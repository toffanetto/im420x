
nucleo-H753ZI_TemplateAutoware_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013d18  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d30  08013fb8  08013fb8  00014fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015ce8  08015ce8  00016ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000044  08015cf0  08015cf0  00016cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08015d34  08015d34  00016d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00001308  24000000  08015d38  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0003214c  24001308  08017040  00018308  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24033454  08017040  00018454  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00018308  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002aa3a  00000000  00000000  00018336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000051e1  00000000  00000000  00042d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e60  00000000  00000000  00047f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001779  00000000  00000000  00049db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f224  00000000  00000000  0004b531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002efae  00000000  00000000  0008a755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018f1ed  00000000  00000000  000b9703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000076  00000000  00000000  002488f0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000087d0  00000000  00000000  00248968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000080  00000000  00000000  00251138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24001308 	.word	0x24001308
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013fa0 	.word	0x08013fa0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400130c 	.word	0x2400130c
 80002dc:	08013fa0 	.word	0x08013fa0

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr

08000304 <__aeabi_uldivmod>:
 8000304:	b953      	cbnz	r3, 800031c <__aeabi_uldivmod+0x18>
 8000306:	b94a      	cbnz	r2, 800031c <__aeabi_uldivmod+0x18>
 8000308:	2900      	cmp	r1, #0
 800030a:	bf08      	it	eq
 800030c:	2800      	cmpeq	r0, #0
 800030e:	bf1c      	itt	ne
 8000310:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000314:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000318:	f000 b96a 	b.w	80005f0 <__aeabi_idiv0>
 800031c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000320:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000324:	f000 f806 	bl	8000334 <__udivmoddi4>
 8000328:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000330:	b004      	add	sp, #16
 8000332:	4770      	bx	lr

08000334 <__udivmoddi4>:
 8000334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000338:	9d08      	ldr	r5, [sp, #32]
 800033a:	460c      	mov	r4, r1
 800033c:	2b00      	cmp	r3, #0
 800033e:	d14e      	bne.n	80003de <__udivmoddi4+0xaa>
 8000340:	4694      	mov	ip, r2
 8000342:	458c      	cmp	ip, r1
 8000344:	4686      	mov	lr, r0
 8000346:	fab2 f282 	clz	r2, r2
 800034a:	d962      	bls.n	8000412 <__udivmoddi4+0xde>
 800034c:	b14a      	cbz	r2, 8000362 <__udivmoddi4+0x2e>
 800034e:	f1c2 0320 	rsb	r3, r2, #32
 8000352:	4091      	lsls	r1, r2
 8000354:	fa20 f303 	lsr.w	r3, r0, r3
 8000358:	fa0c fc02 	lsl.w	ip, ip, r2
 800035c:	4319      	orrs	r1, r3
 800035e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f f68c 	uxth.w	r6, ip
 800036a:	fbb1 f4f7 	udiv	r4, r1, r7
 800036e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000372:	fb07 1114 	mls	r1, r7, r4, r1
 8000376:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037a:	fb04 f106 	mul.w	r1, r4, r6
 800037e:	4299      	cmp	r1, r3
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x64>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800038a:	f080 8112 	bcs.w	80005b2 <__udivmoddi4+0x27e>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 810f 	bls.w	80005b2 <__udivmoddi4+0x27e>
 8000394:	3c02      	subs	r4, #2
 8000396:	4463      	add	r3, ip
 8000398:	1a59      	subs	r1, r3, r1
 800039a:	fa1f f38e 	uxth.w	r3, lr
 800039e:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a2:	fb07 1110 	mls	r1, r7, r0, r1
 80003a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003aa:	fb00 f606 	mul.w	r6, r0, r6
 80003ae:	429e      	cmp	r6, r3
 80003b0:	d90a      	bls.n	80003c8 <__udivmoddi4+0x94>
 80003b2:	eb1c 0303 	adds.w	r3, ip, r3
 80003b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003ba:	f080 80fc 	bcs.w	80005b6 <__udivmoddi4+0x282>
 80003be:	429e      	cmp	r6, r3
 80003c0:	f240 80f9 	bls.w	80005b6 <__udivmoddi4+0x282>
 80003c4:	4463      	add	r3, ip
 80003c6:	3802      	subs	r0, #2
 80003c8:	1b9b      	subs	r3, r3, r6
 80003ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ce:	2100      	movs	r1, #0
 80003d0:	b11d      	cbz	r5, 80003da <__udivmoddi4+0xa6>
 80003d2:	40d3      	lsrs	r3, r2
 80003d4:	2200      	movs	r2, #0
 80003d6:	e9c5 3200 	strd	r3, r2, [r5]
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	428b      	cmp	r3, r1
 80003e0:	d905      	bls.n	80003ee <__udivmoddi4+0xba>
 80003e2:	b10d      	cbz	r5, 80003e8 <__udivmoddi4+0xb4>
 80003e4:	e9c5 0100 	strd	r0, r1, [r5]
 80003e8:	2100      	movs	r1, #0
 80003ea:	4608      	mov	r0, r1
 80003ec:	e7f5      	b.n	80003da <__udivmoddi4+0xa6>
 80003ee:	fab3 f183 	clz	r1, r3
 80003f2:	2900      	cmp	r1, #0
 80003f4:	d146      	bne.n	8000484 <__udivmoddi4+0x150>
 80003f6:	42a3      	cmp	r3, r4
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0xcc>
 80003fa:	4290      	cmp	r0, r2
 80003fc:	f0c0 80f0 	bcc.w	80005e0 <__udivmoddi4+0x2ac>
 8000400:	1a86      	subs	r6, r0, r2
 8000402:	eb64 0303 	sbc.w	r3, r4, r3
 8000406:	2001      	movs	r0, #1
 8000408:	2d00      	cmp	r5, #0
 800040a:	d0e6      	beq.n	80003da <__udivmoddi4+0xa6>
 800040c:	e9c5 6300 	strd	r6, r3, [r5]
 8000410:	e7e3      	b.n	80003da <__udivmoddi4+0xa6>
 8000412:	2a00      	cmp	r2, #0
 8000414:	f040 8090 	bne.w	8000538 <__udivmoddi4+0x204>
 8000418:	eba1 040c 	sub.w	r4, r1, ip
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	2101      	movs	r1, #1
 8000426:	fbb4 f6f8 	udiv	r6, r4, r8
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb08 4416 	mls	r4, r8, r6, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb07 f006 	mul.w	r0, r7, r6
 800043a:	4298      	cmp	r0, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x11c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x11a>
 8000448:	4298      	cmp	r0, r3
 800044a:	f200 80cd 	bhi.w	80005e8 <__udivmoddi4+0x2b4>
 800044e:	4626      	mov	r6, r4
 8000450:	1a1c      	subs	r4, r3, r0
 8000452:	fa1f f38e 	uxth.w	r3, lr
 8000456:	fbb4 f0f8 	udiv	r0, r4, r8
 800045a:	fb08 4410 	mls	r4, r8, r0, r4
 800045e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000462:	fb00 f707 	mul.w	r7, r0, r7
 8000466:	429f      	cmp	r7, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x148>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x146>
 8000474:	429f      	cmp	r7, r3
 8000476:	f200 80b0 	bhi.w	80005da <__udivmoddi4+0x2a6>
 800047a:	4620      	mov	r0, r4
 800047c:	1bdb      	subs	r3, r3, r7
 800047e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000482:	e7a5      	b.n	80003d0 <__udivmoddi4+0x9c>
 8000484:	f1c1 0620 	rsb	r6, r1, #32
 8000488:	408b      	lsls	r3, r1
 800048a:	fa22 f706 	lsr.w	r7, r2, r6
 800048e:	431f      	orrs	r7, r3
 8000490:	fa20 fc06 	lsr.w	ip, r0, r6
 8000494:	fa04 f301 	lsl.w	r3, r4, r1
 8000498:	ea43 030c 	orr.w	r3, r3, ip
 800049c:	40f4      	lsrs	r4, r6
 800049e:	fa00 f801 	lsl.w	r8, r0, r1
 80004a2:	0c38      	lsrs	r0, r7, #16
 80004a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004a8:	fbb4 fef0 	udiv	lr, r4, r0
 80004ac:	fa1f fc87 	uxth.w	ip, r7
 80004b0:	fb00 441e 	mls	r4, r0, lr, r4
 80004b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b8:	fb0e f90c 	mul.w	r9, lr, ip
 80004bc:	45a1      	cmp	r9, r4
 80004be:	fa02 f201 	lsl.w	r2, r2, r1
 80004c2:	d90a      	bls.n	80004da <__udivmoddi4+0x1a6>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004ca:	f080 8084 	bcs.w	80005d6 <__udivmoddi4+0x2a2>
 80004ce:	45a1      	cmp	r9, r4
 80004d0:	f240 8081 	bls.w	80005d6 <__udivmoddi4+0x2a2>
 80004d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80004d8:	443c      	add	r4, r7
 80004da:	eba4 0409 	sub.w	r4, r4, r9
 80004de:	fa1f f983 	uxth.w	r9, r3
 80004e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80004e6:	fb00 4413 	mls	r4, r0, r3, r4
 80004ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f2:	45a4      	cmp	ip, r4
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x1d2>
 80004f6:	193c      	adds	r4, r7, r4
 80004f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004fc:	d267      	bcs.n	80005ce <__udivmoddi4+0x29a>
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d965      	bls.n	80005ce <__udivmoddi4+0x29a>
 8000502:	3b02      	subs	r3, #2
 8000504:	443c      	add	r4, r7
 8000506:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800050a:	fba0 9302 	umull	r9, r3, r0, r2
 800050e:	eba4 040c 	sub.w	r4, r4, ip
 8000512:	429c      	cmp	r4, r3
 8000514:	46ce      	mov	lr, r9
 8000516:	469c      	mov	ip, r3
 8000518:	d351      	bcc.n	80005be <__udivmoddi4+0x28a>
 800051a:	d04e      	beq.n	80005ba <__udivmoddi4+0x286>
 800051c:	b155      	cbz	r5, 8000534 <__udivmoddi4+0x200>
 800051e:	ebb8 030e 	subs.w	r3, r8, lr
 8000522:	eb64 040c 	sbc.w	r4, r4, ip
 8000526:	fa04 f606 	lsl.w	r6, r4, r6
 800052a:	40cb      	lsrs	r3, r1
 800052c:	431e      	orrs	r6, r3
 800052e:	40cc      	lsrs	r4, r1
 8000530:	e9c5 6400 	strd	r6, r4, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	e750      	b.n	80003da <__udivmoddi4+0xa6>
 8000538:	f1c2 0320 	rsb	r3, r2, #32
 800053c:	fa20 f103 	lsr.w	r1, r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa24 f303 	lsr.w	r3, r4, r3
 8000548:	4094      	lsls	r4, r2
 800054a:	430c      	orrs	r4, r1
 800054c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000550:	fa00 fe02 	lsl.w	lr, r0, r2
 8000554:	fa1f f78c 	uxth.w	r7, ip
 8000558:	fbb3 f0f8 	udiv	r0, r3, r8
 800055c:	fb08 3110 	mls	r1, r8, r0, r3
 8000560:	0c23      	lsrs	r3, r4, #16
 8000562:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000566:	fb00 f107 	mul.w	r1, r0, r7
 800056a:	4299      	cmp	r1, r3
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x24c>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000576:	d22c      	bcs.n	80005d2 <__udivmoddi4+0x29e>
 8000578:	4299      	cmp	r1, r3
 800057a:	d92a      	bls.n	80005d2 <__udivmoddi4+0x29e>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1a5b      	subs	r3, r3, r1
 8000582:	b2a4      	uxth	r4, r4
 8000584:	fbb3 f1f8 	udiv	r1, r3, r8
 8000588:	fb08 3311 	mls	r3, r8, r1, r3
 800058c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000590:	fb01 f307 	mul.w	r3, r1, r7
 8000594:	42a3      	cmp	r3, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x276>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005a0:	d213      	bcs.n	80005ca <__udivmoddi4+0x296>
 80005a2:	42a3      	cmp	r3, r4
 80005a4:	d911      	bls.n	80005ca <__udivmoddi4+0x296>
 80005a6:	3902      	subs	r1, #2
 80005a8:	4464      	add	r4, ip
 80005aa:	1ae4      	subs	r4, r4, r3
 80005ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b0:	e739      	b.n	8000426 <__udivmoddi4+0xf2>
 80005b2:	4604      	mov	r4, r0
 80005b4:	e6f0      	b.n	8000398 <__udivmoddi4+0x64>
 80005b6:	4608      	mov	r0, r1
 80005b8:	e706      	b.n	80003c8 <__udivmoddi4+0x94>
 80005ba:	45c8      	cmp	r8, r9
 80005bc:	d2ae      	bcs.n	800051c <__udivmoddi4+0x1e8>
 80005be:	ebb9 0e02 	subs.w	lr, r9, r2
 80005c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80005c6:	3801      	subs	r0, #1
 80005c8:	e7a8      	b.n	800051c <__udivmoddi4+0x1e8>
 80005ca:	4631      	mov	r1, r6
 80005cc:	e7ed      	b.n	80005aa <__udivmoddi4+0x276>
 80005ce:	4603      	mov	r3, r0
 80005d0:	e799      	b.n	8000506 <__udivmoddi4+0x1d2>
 80005d2:	4630      	mov	r0, r6
 80005d4:	e7d4      	b.n	8000580 <__udivmoddi4+0x24c>
 80005d6:	46d6      	mov	lr, sl
 80005d8:	e77f      	b.n	80004da <__udivmoddi4+0x1a6>
 80005da:	4463      	add	r3, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e74d      	b.n	800047c <__udivmoddi4+0x148>
 80005e0:	4606      	mov	r6, r0
 80005e2:	4623      	mov	r3, r4
 80005e4:	4608      	mov	r0, r1
 80005e6:	e70f      	b.n	8000408 <__udivmoddi4+0xd4>
 80005e8:	3e02      	subs	r6, #2
 80005ea:	4463      	add	r3, ip
 80005ec:	e730      	b.n	8000450 <__udivmoddi4+0x11c>
 80005ee:	bf00      	nop

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	@ 0x28
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000606:	463b      	mov	r3, r7
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
 8000614:	615a      	str	r2, [r3, #20]
 8000616:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000618:	4b37      	ldr	r3, [pc, #220]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800061a:	4a38      	ldr	r2, [pc, #224]	@ (80006fc <MX_ADC1_Init+0x108>)
 800061c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800061e:	4b36      	ldr	r3, [pc, #216]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000620:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000624:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000626:	4b34      	ldr	r3, [pc, #208]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800062c:	4b32      	ldr	r3, [pc, #200]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800062e:	2201      	movs	r2, #1
 8000630:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b31      	ldr	r3, [pc, #196]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000634:	2204      	movs	r2, #4
 8000636:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	4b2f      	ldr	r3, [pc, #188]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800063a:	2200      	movs	r2, #0
 800063c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800063e:	4b2e      	ldr	r3, [pc, #184]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000640:	2201      	movs	r2, #1
 8000642:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000644:	4b2c      	ldr	r3, [pc, #176]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000646:	2202      	movs	r2, #2
 8000648:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b2b      	ldr	r3, [pc, #172]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000650:	4b29      	ldr	r3, [pc, #164]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000656:	4b28      	ldr	r3, [pc, #160]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800065c:	4b26      	ldr	r3, [pc, #152]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800065e:	2203      	movs	r2, #3
 8000660:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000662:	4b25      	ldr	r3, [pc, #148]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000668:	4b23      	ldr	r3, [pc, #140]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800066a:	2200      	movs	r2, #0
 800066c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800066e:	4b22      	ldr	r3, [pc, #136]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000676:	4820      	ldr	r0, [pc, #128]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000678:	f001 ff6a 	bl	8002550 <HAL_ADC_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000682:	f000 fd3b 	bl	80010fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	4619      	mov	r1, r3
 8000690:	4819      	ldr	r0, [pc, #100]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000692:	f002 ff8d 	bl	80035b0 <HAL_ADCEx_MultiModeConfigChannel>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800069c:	f000 fd2e 	bl	80010fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006a0:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <MX_ADC1_Init+0x10c>)
 80006a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a4:	2306      	movs	r3, #6
 80006a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80006a8:	2306      	movs	r3, #6
 80006aa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ac:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80006b0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b2:	2304      	movs	r3, #4
 80006b4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006be:	463b      	mov	r3, r7
 80006c0:	4619      	mov	r1, r3
 80006c2:	480d      	ldr	r0, [pc, #52]	@ (80006f8 <MX_ADC1_Init+0x104>)
 80006c4:	f002 f9c8 	bl	8002a58 <HAL_ADC_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ce:	f000 fd15 	bl	80010fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_ADC1_Init+0x110>)
 80006d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006d6:	230c      	movs	r3, #12
 80006d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	4619      	mov	r1, r3
 80006de:	4806      	ldr	r0, [pc, #24]	@ (80006f8 <MX_ADC1_Init+0x104>)
 80006e0:	f002 f9ba 	bl	8002a58 <HAL_ADC_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80006ea:	f000 fd07 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	@ 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	24001324 	.word	0x24001324
 80006fc:	40022000 	.word	0x40022000
 8000700:	19200040 	.word	0x19200040
 8000704:	08600004 	.word	0x08600004

08000708 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b0ba      	sub	sp, #232	@ 0xe8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	22c0      	movs	r2, #192	@ 0xc0
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f013 f9c7 	bl	8013abc <memset>
  if(adcHandle->Instance==ADC1)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a45      	ldr	r2, [pc, #276]	@ (8000848 <HAL_ADC_MspInit+0x140>)
 8000734:	4293      	cmp	r3, r2
 8000736:	f040 8083 	bne.w	8000840 <HAL_ADC_MspInit+0x138>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800073a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800073e:	f04f 0300 	mov.w	r3, #0
 8000742:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000746:	2301      	movs	r3, #1
 8000748:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 37;
 800074a:	2325      	movs	r3, #37	@ 0x25
 800074c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800074e:	2302      	movs	r3, #2
 8000750:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000752:	2302      	movs	r3, #2
 8000754:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000756:	2302      	movs	r3, #2
 8000758:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800075a:	2380      	movs	r3, #128	@ 0x80
 800075c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800075e:	2320      	movs	r3, #32
 8000760:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 8000762:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000766:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000768:	2300      	movs	r3, #0
 800076a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800076e:	f107 0310 	add.w	r3, r7, #16
 8000772:	4618      	mov	r0, r3
 8000774:	f007 f95c 	bl	8007a30 <HAL_RCCEx_PeriphCLKConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 800077e:	f000 fcbd 	bl	80010fc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000782:	4b32      	ldr	r3, [pc, #200]	@ (800084c <HAL_ADC_MspInit+0x144>)
 8000784:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000788:	4a30      	ldr	r2, [pc, #192]	@ (800084c <HAL_ADC_MspInit+0x144>)
 800078a:	f043 0320 	orr.w	r3, r3, #32
 800078e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000792:	4b2e      	ldr	r3, [pc, #184]	@ (800084c <HAL_ADC_MspInit+0x144>)
 8000794:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000798:	f003 0320 	and.w	r3, r3, #32
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80007a0:	4b2a      	ldr	r3, [pc, #168]	@ (800084c <HAL_ADC_MspInit+0x144>)
 80007a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a6:	4a29      	ldr	r2, [pc, #164]	@ (800084c <HAL_ADC_MspInit+0x144>)
 80007a8:	f043 0320 	orr.w	r3, r3, #32
 80007ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b0:	4b26      	ldr	r3, [pc, #152]	@ (800084c <HAL_ADC_MspInit+0x144>)
 80007b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b6:	f003 0320 	and.w	r3, r3, #32
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007be:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80007c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c6:	2303      	movs	r3, #3
 80007c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007d2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80007d6:	4619      	mov	r1, r3
 80007d8:	481d      	ldr	r0, [pc, #116]	@ (8000850 <HAL_ADC_MspInit+0x148>)
 80007da:	f005 fee3 	bl	80065a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80007de:	4b1d      	ldr	r3, [pc, #116]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000858 <HAL_ADC_MspInit+0x150>)
 80007e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007e6:	2209      	movs	r2, #9
 80007e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f0:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007f6:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000800:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000804:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000806:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000808:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800080c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800080e:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000810:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000814:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000816:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000818:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800081c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800081e:	4b0d      	ldr	r3, [pc, #52]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000824:	480b      	ldr	r0, [pc, #44]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000826:	f003 f881 	bl	800392c <HAL_DMA_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 8000830:	f000 fc64 	bl	80010fc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a07      	ldr	r2, [pc, #28]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000838:	64da      	str	r2, [r3, #76]	@ 0x4c
 800083a:	4a06      	ldr	r2, [pc, #24]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000840:	bf00      	nop
 8000842:	37e8      	adds	r7, #232	@ 0xe8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40022000 	.word	0x40022000
 800084c:	58024400 	.word	0x58024400
 8000850:	58021400 	.word	0x58021400
 8000854:	24001388 	.word	0x24001388
 8000858:	40020410 	.word	0x40020410

0800085c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000862:	4b21      	ldr	r3, [pc, #132]	@ (80008e8 <MX_DMA_Init+0x8c>)
 8000864:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000868:	4a1f      	ldr	r2, [pc, #124]	@ (80008e8 <MX_DMA_Init+0x8c>)
 800086a:	f043 0301 	orr.w	r3, r3, #1
 800086e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000872:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <MX_DMA_Init+0x8c>)
 8000874:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000880:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <MX_DMA_Init+0x8c>)
 8000882:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000886:	4a18      	ldr	r2, [pc, #96]	@ (80008e8 <MX_DMA_Init+0x8c>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000890:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <MX_DMA_Init+0x8c>)
 8000892:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	200b      	movs	r0, #11
 80008a4:	f003 f81a 	bl	80038dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008a8:	200b      	movs	r0, #11
 80008aa:	f003 f831 	bl	8003910 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	200c      	movs	r0, #12
 80008b4:	f003 f812 	bl	80038dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80008b8:	200c      	movs	r0, #12
 80008ba:	f003 f829 	bl	8003910 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2105      	movs	r1, #5
 80008c2:	2039      	movs	r0, #57	@ 0x39
 80008c4:	f003 f80a 	bl	80038dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008c8:	2039      	movs	r0, #57	@ 0x39
 80008ca:	f003 f821 	bl	8003910 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2105      	movs	r1, #5
 80008d2:	203a      	movs	r0, #58	@ 0x3a
 80008d4:	f003 f802 	bl	80038dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008d8:	203a      	movs	r0, #58	@ 0x3a
 80008da:	f003 f819 	bl	8003910 <HAL_NVIC_EnableIRQ>

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	58024400 	.word	0x58024400

080008ec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexControlSignal */
  MutexControlSignalHandle = osMutexNew(&MutexControlSignal_attributes);
 80008f0:	480a      	ldr	r0, [pc, #40]	@ (800091c <MX_FREERTOS_Init+0x30>)
 80008f2:	f00c fad2 	bl	800ce9a <osMutexNew>
 80008f6:	4603      	mov	r3, r0
 80008f8:	4a09      	ldr	r2, [pc, #36]	@ (8000920 <MX_FREERTOS_Init+0x34>)
 80008fa:	6013      	str	r3, [r2, #0]

  /* creation of MutexControlAction */
  MutexControlActionHandle = osMutexNew(&MutexControlAction_attributes);
 80008fc:	4809      	ldr	r0, [pc, #36]	@ (8000924 <MX_FREERTOS_Init+0x38>)
 80008fe:	f00c facc 	bl	800ce9a <osMutexNew>
 8000902:	4603      	mov	r3, r0
 8000904:	4a08      	ldr	r2, [pc, #32]	@ (8000928 <MX_FREERTOS_Init+0x3c>)
 8000906:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskControle */
  TaskControleHandle = osThreadNew(StartTaskControle, NULL, &TaskControle_attributes);
 8000908:	4a08      	ldr	r2, [pc, #32]	@ (800092c <MX_FREERTOS_Init+0x40>)
 800090a:	2100      	movs	r1, #0
 800090c:	4808      	ldr	r0, [pc, #32]	@ (8000930 <MX_FREERTOS_Init+0x44>)
 800090e:	f00c f926 	bl	800cb5e <osThreadNew>
 8000912:	4603      	mov	r3, r0
 8000914:	4a07      	ldr	r2, [pc, #28]	@ (8000934 <MX_FREERTOS_Init+0x48>)
 8000916:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	0801403c 	.word	0x0801403c
 8000920:	24001408 	.word	0x24001408
 8000924:	0801404c 	.word	0x0801404c
 8000928:	2400140c 	.word	0x2400140c
 800092c:	08014018 	.word	0x08014018
 8000930:	0800157d 	.word	0x0800157d
 8000934:	24001400 	.word	0x24001400

08000938 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08e      	sub	sp, #56	@ 0x38
 800093c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	4b9e      	ldr	r3, [pc, #632]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000954:	4a9c      	ldr	r2, [pc, #624]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000956:	f043 0304 	orr.w	r3, r3, #4
 800095a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800095e:	4b9a      	ldr	r3, [pc, #616]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	623b      	str	r3, [r7, #32]
 800096a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096c:	4b96      	ldr	r3, [pc, #600]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 800096e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000972:	4a95      	ldr	r2, [pc, #596]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000978:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800097c:	4b92      	ldr	r3, [pc, #584]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 800097e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000986:	61fb      	str	r3, [r7, #28]
 8000988:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b8f      	ldr	r3, [pc, #572]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000990:	4a8d      	ldr	r2, [pc, #564]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000992:	f043 0301 	orr.w	r3, r3, #1
 8000996:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800099a:	4b8b      	ldr	r3, [pc, #556]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 800099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	61bb      	str	r3, [r7, #24]
 80009a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a8:	4b87      	ldr	r3, [pc, #540]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ae:	4a86      	ldr	r2, [pc, #536]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009b8:	4b83      	ldr	r3, [pc, #524]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c6:	4b80      	ldr	r3, [pc, #512]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009cc:	4a7e      	ldr	r2, [pc, #504]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009ce:	f043 0320 	orr.w	r3, r3, #32
 80009d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d6:	4b7c      	ldr	r3, [pc, #496]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009dc:	f003 0320 	and.w	r3, r3, #32
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e4:	4b78      	ldr	r3, [pc, #480]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ea:	4a77      	ldr	r2, [pc, #476]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009ec:	f043 0308 	orr.w	r3, r3, #8
 80009f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f4:	4b74      	ldr	r3, [pc, #464]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fa:	f003 0308 	and.w	r3, r3, #8
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a02:	4b71      	ldr	r3, [pc, #452]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a08:	4a6f      	ldr	r2, [pc, #444]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a12:	4b6d      	ldr	r3, [pc, #436]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a20:	4b69      	ldr	r3, [pc, #420]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a26:	4a68      	ldr	r2, [pc, #416]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a28:	f043 0310 	orr.w	r3, r3, #16
 8000a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a30:	4b65      	ldr	r3, [pc, #404]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a36:	f003 0310 	and.w	r3, r3, #16
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000a44:	4861      	ldr	r0, [pc, #388]	@ (8000bcc <MX_GPIO_Init+0x294>)
 8000a46:	f005 ff5d 	bl	8006904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a50:	485f      	ldr	r0, [pc, #380]	@ (8000bd0 <MX_GPIO_Init+0x298>)
 8000a52:	f005 ff57 	bl	8006904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2102      	movs	r1, #2
 8000a5a:	485e      	ldr	r0, [pc, #376]	@ (8000bd4 <MX_GPIO_Init+0x29c>)
 8000a5c:	f005 ff52 	bl	8006904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a72:	4619      	mov	r1, r3
 8000a74:	4858      	ldr	r0, [pc, #352]	@ (8000bd8 <MX_GPIO_Init+0x2a0>)
 8000a76:	f005 fd95 	bl	80065a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a7a:	2332      	movs	r3, #50	@ 0x32
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a8a:	230b      	movs	r3, #11
 8000a8c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a92:	4619      	mov	r1, r3
 8000a94:	4850      	ldr	r0, [pc, #320]	@ (8000bd8 <MX_GPIO_Init+0x2a0>)
 8000a96:	f005 fd85 	bl	80065a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000a9a:	2386      	movs	r3, #134	@ 0x86
 8000a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aaa:	230b      	movs	r3, #11
 8000aac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4849      	ldr	r0, [pc, #292]	@ (8000bdc <MX_GPIO_Init+0x2a4>)
 8000ab6:	f005 fd75 	bl	80065a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000aba:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000abe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	483e      	ldr	r0, [pc, #248]	@ (8000bcc <MX_GPIO_Init+0x294>)
 8000ad4:	f005 fd66 	bl	80065a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JoySW_Pin;
 8000ad8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000adc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ade:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(JoySW_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aec:	4619      	mov	r1, r3
 8000aee:	483c      	ldr	r0, [pc, #240]	@ (8000be0 <MX_GPIO_Init+0x2a8>)
 8000af0:	f005 fd58 	bl	80065a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000af4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b06:	230b      	movs	r3, #11
 8000b08:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0e:	4619      	mov	r1, r3
 8000b10:	482e      	ldr	r0, [pc, #184]	@ (8000bcc <MX_GPIO_Init+0x294>)
 8000b12:	f005 fd47 	bl	80065a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4828      	ldr	r0, [pc, #160]	@ (8000bd0 <MX_GPIO_Init+0x298>)
 8000b30:	f005 fd38 	bl	80065a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b34:	2380      	movs	r3, #128	@ 0x80
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b38:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b46:	4619      	mov	r1, r3
 8000b48:	4826      	ldr	r0, [pc, #152]	@ (8000be4 <MX_GPIO_Init+0x2ac>)
 8000b4a:	f005 fd2b 	bl	80065a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000b4e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000b60:	230a      	movs	r3, #10
 8000b62:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b68:	4619      	mov	r1, r3
 8000b6a:	481c      	ldr	r0, [pc, #112]	@ (8000bdc <MX_GPIO_Init+0x2a4>)
 8000b6c:	f005 fd1a 	bl	80065a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000b70:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b82:	230b      	movs	r3, #11
 8000b84:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4815      	ldr	r0, [pc, #84]	@ (8000be4 <MX_GPIO_Init+0x2ac>)
 8000b8e:	f005 fd09 	bl	80065a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b92:	2302      	movs	r3, #2
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480a      	ldr	r0, [pc, #40]	@ (8000bd4 <MX_GPIO_Init+0x29c>)
 8000baa:	f005 fcfb 	bl	80065a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2107      	movs	r1, #7
 8000bb2:	2028      	movs	r0, #40	@ 0x28
 8000bb4:	f002 fe92 	bl	80038dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bb8:	2028      	movs	r0, #40	@ 0x28
 8000bba:	f002 fea9 	bl	8003910 <HAL_NVIC_EnableIRQ>

}
 8000bbe:	bf00      	nop
 8000bc0:	3738      	adds	r7, #56	@ 0x38
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	58024400 	.word	0x58024400
 8000bcc:	58020400 	.word	0x58020400
 8000bd0:	58020c00 	.word	0x58020c00
 8000bd4:	58021000 	.word	0x58021000
 8000bd8:	58020800 	.word	0x58020800
 8000bdc:	58020000 	.word	0x58020000
 8000be0:	58021400 	.word	0x58021400
 8000be4:	58021800 	.word	0x58021800

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bec:	f001 fa3c 	bl	8002068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf0:	f000 f81c 	bl	8000c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf4:	f7ff fea0 	bl	8000938 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bf8:	f7ff fe30 	bl	800085c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000bfc:	f000 fefc 	bl	80019f8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000c00:	f7ff fcf8 	bl	80005f4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000c04:	f000 feac 	bl	8001960 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Starting ADC1 reading by DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t * ) uiADC1Buffer, 2);
 8000c08:	2202      	movs	r2, #2
 8000c0a:	4906      	ldr	r1, [pc, #24]	@ (8000c24 <main+0x3c>)
 8000c0c:	4806      	ldr	r0, [pc, #24]	@ (8000c28 <main+0x40>)
 8000c0e:	f001 fe41 	bl	8002894 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c12:	f00b ff45 	bl	800caa0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000c16:	f7ff fe69 	bl	80008ec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c1a:	f00b ff65 	bl	800cae8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c1e:	bf00      	nop
 8000c20:	e7fd      	b.n	8000c1e <main+0x36>
 8000c22:	bf00      	nop
 8000c24:	24001414 	.word	0x24001414
 8000c28:	24001324 	.word	0x24001324

08000c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b09e      	sub	sp, #120	@ 0x78
 8000c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c36:	224c      	movs	r2, #76	@ 0x4c
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f012 ff3e 	bl	8013abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	2220      	movs	r2, #32
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f012 ff37 	bl	8013abc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c4e:	2002      	movs	r0, #2
 8000c50:	f005 fe8c 	bl	800696c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	4b49      	ldr	r3, [pc, #292]	@ (8000d80 <SystemClock_Config+0x154>)
 8000c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c5c:	4a48      	ldr	r2, [pc, #288]	@ (8000d80 <SystemClock_Config+0x154>)
 8000c5e:	f023 0301 	bic.w	r3, r3, #1
 8000c62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c64:	4b46      	ldr	r3, [pc, #280]	@ (8000d80 <SystemClock_Config+0x154>)
 8000c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	4b45      	ldr	r3, [pc, #276]	@ (8000d84 <SystemClock_Config+0x158>)
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	4a44      	ldr	r2, [pc, #272]	@ (8000d84 <SystemClock_Config+0x158>)
 8000c74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c78:	6193      	str	r3, [r2, #24]
 8000c7a:	4b42      	ldr	r3, [pc, #264]	@ (8000d84 <SystemClock_Config+0x158>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c86:	bf00      	nop
 8000c88:	4b3e      	ldr	r3, [pc, #248]	@ (8000d84 <SystemClock_Config+0x158>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c94:	d1f8      	bne.n	8000c88 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	4b3c      	ldr	r3, [pc, #240]	@ (8000d88 <SystemClock_Config+0x15c>)
 8000c98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c9c:	4a3a      	ldr	r2, [pc, #232]	@ (8000d88 <SystemClock_Config+0x15c>)
 8000c9e:	f043 0302 	orr.w	r3, r3, #2
 8000ca2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ca6:	4b38      	ldr	r3, [pc, #224]	@ (8000d88 <SystemClock_Config+0x15c>)
 8000ca8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cac:	f003 0302 	and.w	r3, r3, #2
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	4b32      	ldr	r3, [pc, #200]	@ (8000d84 <SystemClock_Config+0x158>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a31      	ldr	r2, [pc, #196]	@ (8000d84 <SystemClock_Config+0x158>)
 8000cbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b2f      	ldr	r3, [pc, #188]	@ (8000d84 <SystemClock_Config+0x158>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	4b2c      	ldr	r3, [pc, #176]	@ (8000d80 <SystemClock_Config+0x154>)
 8000cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd2:	4a2b      	ldr	r2, [pc, #172]	@ (8000d80 <SystemClock_Config+0x154>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000cda:	4b29      	ldr	r3, [pc, #164]	@ (8000d80 <SystemClock_Config+0x154>)
 8000cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ce6:	bf00      	nop
 8000ce8:	4b26      	ldr	r3, [pc, #152]	@ (8000d84 <SystemClock_Config+0x158>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cf4:	d1f8      	bne.n	8000ce8 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000cf6:	2310      	movs	r3, #16
 8000cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000cfa:	2380      	movs	r3, #128	@ 0x80
 8000cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000cfe:	2320      	movs	r3, #32
 8000d00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d02:	2302      	movs	r3, #2
 8000d04:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8000d06:	2301      	movs	r3, #1
 8000d08:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000d0e:	23f0      	movs	r3, #240	@ 0xf0
 8000d10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d12:	2302      	movs	r3, #2
 8000d14:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d16:	2304      	movs	r3, #4
 8000d18:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d1e:	2308      	movs	r3, #8
 8000d20:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f005 fe56 	bl	80069e0 <HAL_RCC_OscConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000d3a:	f000 f9df 	bl	80010fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3e:	233f      	movs	r3, #63	@ 0x3f
 8000d40:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d42:	2303      	movs	r3, #3
 8000d44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d4a:	2308      	movs	r3, #8
 8000d4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d4e:	2340      	movs	r3, #64	@ 0x40
 8000d50:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d52:	2340      	movs	r3, #64	@ 0x40
 8000d54:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d5c:	2340      	movs	r3, #64	@ 0x40
 8000d5e:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	2104      	movs	r1, #4
 8000d66:	4618      	mov	r0, r3
 8000d68:	f006 fa94 	bl	8007294 <HAL_RCC_ClockConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000d72:	f000 f9c3 	bl	80010fc <Error_Handler>
  }
}
 8000d76:	bf00      	nop
 8000d78:	3778      	adds	r7, #120	@ 0x78
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	58000400 	.word	0x58000400
 8000d84:	58024800 	.word	0x58024800
 8000d88:	58024400 	.word	0x58024400

08000d8c <HAL_GPIO_EXTI_Callback>:
  * @brief  ISR callback for the JoySW, switching the control mode.
  * @param  GPIO_Pin: EXTI pin.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) 
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]
  if(JoySW_Pin == GPIO_Pin){
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d9c:	d11a      	bne.n	8000dd4 <HAL_GPIO_EXTI_Callback+0x48>

    unsigned int uiTick = osKernelGetTickCount();
 8000d9e:	f00b fec9 	bl	800cb34 <osKernelGetTickCount>
 8000da2:	60f8      	str	r0, [r7, #12]

    if(uiTick > (uiJoySWTickOnPress + DEBOUNCE_TICKS)) // DEBOUNCE_TICKS debounce
 8000da4:	4b0d      	ldr	r3, [pc, #52]	@ (8000ddc <HAL_GPIO_EXTI_Callback+0x50>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d910      	bls.n	8000dd4 <HAL_GPIO_EXTI_Callback+0x48>
    {
      ucButtonState ^= 1;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	@ (8000de0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	f083 0301 	eor.w	r3, r3, #1
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	4b08      	ldr	r3, [pc, #32]	@ (8000de0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000dbe:	701a      	strb	r2, [r3, #0]
      uiJoySWTickOnPress = uiTick;
 8000dc0:	4a06      	ldr	r2, [pc, #24]	@ (8000ddc <HAL_GPIO_EXTI_Callback+0x50>)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	6013      	str	r3, [r2, #0]
      osThreadFlagsSet(TaskControleHandle, 0x1000);
 8000dc6:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f00b ff58 	bl	800cc84 <osThreadFlagsSet>
    }
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	2400141c 	.word	0x2400141c
 8000de0:	24001410 	.word	0x24001410
 8000de4:	24001400 	.word	0x24001400

08000de8 <HAL_UART_RxCpltCallback>:
  * @brief  ISR callback for reading msg from UART with UART2_DMA_BUFFER_SIZE bytes.
  * @param  huart: Handle for serial UART
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if(&huart2 == huart)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4ab5      	ldr	r2, [pc, #724]	@ (80010c8 <HAL_UART_RxCpltCallback+0x2e0>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	f040 8163 	bne.w	80010c0 <HAL_UART_RxCpltCallback+0x2d8>
  {

    // State machine state
    unsigned int ucSmState = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]

    for(unsigned char i = 0; i<UART2_DMA_BUFFER_SIZE; i++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	72fb      	strb	r3, [r7, #11]
 8000e02:	e154      	b.n	80010ae <HAL_UART_RxCpltCallback+0x2c6>
    {
      switch (ucSmState)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2b2b      	cmp	r3, #43	@ 0x2b
 8000e08:	f200 814a 	bhi.w	80010a0 <HAL_UART_RxCpltCallback+0x2b8>
 8000e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8000e14 <HAL_UART_RxCpltCallback+0x2c>)
 8000e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e12:	bf00      	nop
 8000e14:	08000ec5 	.word	0x08000ec5
 8000e18:	08000ed7 	.word	0x08000ed7
 8000e1c:	080010a1 	.word	0x080010a1
 8000e20:	080010a1 	.word	0x080010a1
 8000e24:	080010a1 	.word	0x080010a1
 8000e28:	080010a1 	.word	0x080010a1
 8000e2c:	080010a1 	.word	0x080010a1
 8000e30:	080010a1 	.word	0x080010a1
 8000e34:	080010a1 	.word	0x080010a1
 8000e38:	080010a1 	.word	0x080010a1
 8000e3c:	08000fa1 	.word	0x08000fa1
 8000e40:	08000fb1 	.word	0x08000fb1
 8000e44:	08000fc1 	.word	0x08000fc1
 8000e48:	08000fd1 	.word	0x08000fd1
 8000e4c:	080010a1 	.word	0x080010a1
 8000e50:	080010a1 	.word	0x080010a1
 8000e54:	080010a1 	.word	0x080010a1
 8000e58:	080010a1 	.word	0x080010a1
 8000e5c:	080010a1 	.word	0x080010a1
 8000e60:	080010a1 	.word	0x080010a1
 8000e64:	08000fe1 	.word	0x08000fe1
 8000e68:	08000ff1 	.word	0x08000ff1
 8000e6c:	08001001 	.word	0x08001001
 8000e70:	08001011 	.word	0x08001011
 8000e74:	080010a1 	.word	0x080010a1
 8000e78:	080010a1 	.word	0x080010a1
 8000e7c:	080010a1 	.word	0x080010a1
 8000e80:	080010a1 	.word	0x080010a1
 8000e84:	080010a1 	.word	0x080010a1
 8000e88:	080010a1 	.word	0x080010a1
 8000e8c:	08001021 	.word	0x08001021
 8000e90:	08001031 	.word	0x08001031
 8000e94:	08001041 	.word	0x08001041
 8000e98:	08001051 	.word	0x08001051
 8000e9c:	080010a1 	.word	0x080010a1
 8000ea0:	080010a1 	.word	0x080010a1
 8000ea4:	080010a1 	.word	0x080010a1
 8000ea8:	080010a1 	.word	0x080010a1
 8000eac:	080010a1 	.word	0x080010a1
 8000eb0:	080010a1 	.word	0x080010a1
 8000eb4:	08001061 	.word	0x08001061
 8000eb8:	08001071 	.word	0x08001071
 8000ebc:	08001081 	.word	0x08001081
 8000ec0:	08001091 	.word	0x08001091
      {
        case 0:
          if('#' == ucDmaBuffer[i])
 8000ec4:	7afb      	ldrb	r3, [r7, #11]
 8000ec6:	4a81      	ldr	r2, [pc, #516]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8000ec8:	5cd3      	ldrb	r3, [r2, r3]
 8000eca:	2b23      	cmp	r3, #35	@ 0x23
 8000ecc:	f040 80eb 	bne.w	80010a6 <HAL_UART_RxCpltCallback+0x2be>
          {
            ucSmState = 1;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
          }
          break;
 8000ed4:	e0e7      	b.n	80010a6 <HAL_UART_RxCpltCallback+0x2be>

        case 1:
          switch (ucDmaBuffer[i])
 8000ed6:	7afb      	ldrb	r3, [r7, #11]
 8000ed8:	4a7c      	ldr	r2, [pc, #496]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8000eda:	5cd3      	ldrb	r3, [r2, r3]
 8000edc:	3b24      	subs	r3, #36	@ 0x24
 8000ede:	2b20      	cmp	r3, #32
 8000ee0:	d85a      	bhi.n	8000f98 <HAL_UART_RxCpltCallback+0x1b0>
 8000ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ee8 <HAL_UART_RxCpltCallback+0x100>)
 8000ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee8:	08000f85 	.word	0x08000f85
 8000eec:	08000f99 	.word	0x08000f99
 8000ef0:	08000f99 	.word	0x08000f99
 8000ef4:	08000f99 	.word	0x08000f99
 8000ef8:	08000f99 	.word	0x08000f99
 8000efc:	08000f99 	.word	0x08000f99
 8000f00:	08000f99 	.word	0x08000f99
 8000f04:	08000f99 	.word	0x08000f99
 8000f08:	08000f99 	.word	0x08000f99
 8000f0c:	08000f99 	.word	0x08000f99
 8000f10:	08000f99 	.word	0x08000f99
 8000f14:	08000f99 	.word	0x08000f99
 8000f18:	08000f99 	.word	0x08000f99
 8000f1c:	08000f99 	.word	0x08000f99
 8000f20:	08000f99 	.word	0x08000f99
 8000f24:	08000f99 	.word	0x08000f99
 8000f28:	08000f99 	.word	0x08000f99
 8000f2c:	08000f99 	.word	0x08000f99
 8000f30:	08000f99 	.word	0x08000f99
 8000f34:	08000f99 	.word	0x08000f99
 8000f38:	08000f99 	.word	0x08000f99
 8000f3c:	08000f99 	.word	0x08000f99
 8000f40:	08000f99 	.word	0x08000f99
 8000f44:	08000f99 	.word	0x08000f99
 8000f48:	08000f99 	.word	0x08000f99
 8000f4c:	08000f99 	.word	0x08000f99
 8000f50:	08000f99 	.word	0x08000f99
 8000f54:	08000f99 	.word	0x08000f99
 8000f58:	08000f99 	.word	0x08000f99
 8000f5c:	08000f6d 	.word	0x08000f6d
 8000f60:	08000f73 	.word	0x08000f73
 8000f64:	08000f79 	.word	0x08000f79
 8000f68:	08000f7f 	.word	0x08000f7f
          {
            case 'A':
            ucSmState = 10;
 8000f6c:	230a      	movs	r3, #10
 8000f6e:	60fb      	str	r3, [r7, #12]
            break;
 8000f70:	e015      	b.n	8000f9e <HAL_UART_RxCpltCallback+0x1b6>

            case 'B':
            ucSmState = 20;
 8000f72:	2314      	movs	r3, #20
 8000f74:	60fb      	str	r3, [r7, #12]
            break;
 8000f76:	e012      	b.n	8000f9e <HAL_UART_RxCpltCallback+0x1b6>

            case 'C':
            ucSmState = 30;
 8000f78:	231e      	movs	r3, #30
 8000f7a:	60fb      	str	r3, [r7, #12]
            break;
 8000f7c:	e00f      	b.n	8000f9e <HAL_UART_RxCpltCallback+0x1b6>

            case 'D':
            ucSmState = 40;
 8000f7e:	2328      	movs	r3, #40	@ 0x28
 8000f80:	60fb      	str	r3, [r7, #12]
            break;
 8000f82:	e00c      	b.n	8000f9e <HAL_UART_RxCpltCallback+0x1b6>

            case '$':
            ucSmState = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]

            // Message fully received, setting TaskControle ThreadFlag for sync.
            osThreadFlagsSet(TaskControleHandle, 0x10000);
 8000f88:	4b51      	ldr	r3, [pc, #324]	@ (80010d0 <HAL_UART_RxCpltCallback+0x2e8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8000f90:	4618      	mov	r0, r3
 8000f92:	f00b fe77 	bl	800cc84 <osThreadFlagsSet>
            break;
 8000f96:	e002      	b.n	8000f9e <HAL_UART_RxCpltCallback+0x1b6>

            default:
              ucSmState = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
              break;
 8000f9c:	bf00      	nop
          }
          break;
 8000f9e:	e083      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 10:
          xVehicleStatus.xLongSpeed.ucBytes[0] = ucDmaBuffer[i];
 8000fa0:	7afb      	ldrb	r3, [r7, #11]
 8000fa2:	4a4a      	ldr	r2, [pc, #296]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8000fa4:	5cd2      	ldrb	r2, [r2, r3]
 8000fa6:	4b4b      	ldr	r3, [pc, #300]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8000fa8:	701a      	strb	r2, [r3, #0]
          ucSmState = 11;
 8000faa:	230b      	movs	r3, #11
 8000fac:	60fb      	str	r3, [r7, #12]
          break;
 8000fae:	e07b      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 11:
          xVehicleStatus.xLongSpeed.ucBytes[1] = ucDmaBuffer[i];
 8000fb0:	7afb      	ldrb	r3, [r7, #11]
 8000fb2:	4a46      	ldr	r2, [pc, #280]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8000fb4:	5cd2      	ldrb	r2, [r2, r3]
 8000fb6:	4b47      	ldr	r3, [pc, #284]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8000fb8:	705a      	strb	r2, [r3, #1]
          ucSmState = 12;
 8000fba:	230c      	movs	r3, #12
 8000fbc:	60fb      	str	r3, [r7, #12]
          break;
 8000fbe:	e073      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 12:
          xVehicleStatus.xLongSpeed.ucBytes[2] = ucDmaBuffer[i];
 8000fc0:	7afb      	ldrb	r3, [r7, #11]
 8000fc2:	4a42      	ldr	r2, [pc, #264]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8000fc4:	5cd2      	ldrb	r2, [r2, r3]
 8000fc6:	4b43      	ldr	r3, [pc, #268]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8000fc8:	709a      	strb	r2, [r3, #2]
          ucSmState = 13;
 8000fca:	230d      	movs	r3, #13
 8000fcc:	60fb      	str	r3, [r7, #12]
          break;
 8000fce:	e06b      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 13:
          xVehicleStatus.xLongSpeed.ucBytes[3] = ucDmaBuffer[i];
 8000fd0:	7afb      	ldrb	r3, [r7, #11]
 8000fd2:	4a3e      	ldr	r2, [pc, #248]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8000fd4:	5cd2      	ldrb	r2, [r2, r3]
 8000fd6:	4b3f      	ldr	r3, [pc, #252]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8000fd8:	70da      	strb	r2, [r3, #3]
          ucSmState = 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	60fb      	str	r3, [r7, #12]
          break;
 8000fde:	e063      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 20:
          xVehicleStatus.xLatSpeed.ucBytes[0] = ucDmaBuffer[i];
 8000fe0:	7afb      	ldrb	r3, [r7, #11]
 8000fe2:	4a3a      	ldr	r2, [pc, #232]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8000fe4:	5cd2      	ldrb	r2, [r2, r3]
 8000fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8000fe8:	711a      	strb	r2, [r3, #4]
          ucSmState = 21;
 8000fea:	2315      	movs	r3, #21
 8000fec:	60fb      	str	r3, [r7, #12]
          break;
 8000fee:	e05b      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 21:
          xVehicleStatus.xLatSpeed.ucBytes[1] = ucDmaBuffer[i];
 8000ff0:	7afb      	ldrb	r3, [r7, #11]
 8000ff2:	4a36      	ldr	r2, [pc, #216]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8000ff4:	5cd2      	ldrb	r2, [r2, r3]
 8000ff6:	4b37      	ldr	r3, [pc, #220]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8000ff8:	715a      	strb	r2, [r3, #5]
          ucSmState = 22;
 8000ffa:	2316      	movs	r3, #22
 8000ffc:	60fb      	str	r3, [r7, #12]
          break;
 8000ffe:	e053      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 22:
          xVehicleStatus.xLatSpeed.ucBytes[2] = ucDmaBuffer[i];
 8001000:	7afb      	ldrb	r3, [r7, #11]
 8001002:	4a32      	ldr	r2, [pc, #200]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8001004:	5cd2      	ldrb	r2, [r2, r3]
 8001006:	4b33      	ldr	r3, [pc, #204]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8001008:	719a      	strb	r2, [r3, #6]
          ucSmState = 23;
 800100a:	2317      	movs	r3, #23
 800100c:	60fb      	str	r3, [r7, #12]
          break;
 800100e:	e04b      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 23:
          xVehicleStatus.xLatSpeed.ucBytes[3] = ucDmaBuffer[i];
 8001010:	7afb      	ldrb	r3, [r7, #11]
 8001012:	4a2e      	ldr	r2, [pc, #184]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8001014:	5cd2      	ldrb	r2, [r2, r3]
 8001016:	4b2f      	ldr	r3, [pc, #188]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8001018:	71da      	strb	r2, [r3, #7]
          ucSmState = 1;
 800101a:	2301      	movs	r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
          break;
 800101e:	e043      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 30:
          xVehicleStatus.xHeadingRate.ucBytes[0] = ucDmaBuffer[i];
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	4a2a      	ldr	r2, [pc, #168]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8001024:	5cd2      	ldrb	r2, [r2, r3]
 8001026:	4b2b      	ldr	r3, [pc, #172]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8001028:	721a      	strb	r2, [r3, #8]
          ucSmState = 31;
 800102a:	231f      	movs	r3, #31
 800102c:	60fb      	str	r3, [r7, #12]
          break;
 800102e:	e03b      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 31:
          xVehicleStatus.xHeadingRate.ucBytes[1] = ucDmaBuffer[i];
 8001030:	7afb      	ldrb	r3, [r7, #11]
 8001032:	4a26      	ldr	r2, [pc, #152]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8001034:	5cd2      	ldrb	r2, [r2, r3]
 8001036:	4b27      	ldr	r3, [pc, #156]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8001038:	725a      	strb	r2, [r3, #9]
          ucSmState = 32;
 800103a:	2320      	movs	r3, #32
 800103c:	60fb      	str	r3, [r7, #12]
          break;
 800103e:	e033      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 32:
          xVehicleStatus.xHeadingRate.ucBytes[2] = ucDmaBuffer[i];
 8001040:	7afb      	ldrb	r3, [r7, #11]
 8001042:	4a22      	ldr	r2, [pc, #136]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8001044:	5cd2      	ldrb	r2, [r2, r3]
 8001046:	4b23      	ldr	r3, [pc, #140]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8001048:	729a      	strb	r2, [r3, #10]
          ucSmState = 33;
 800104a:	2321      	movs	r3, #33	@ 0x21
 800104c:	60fb      	str	r3, [r7, #12]
          break;
 800104e:	e02b      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 33:
          xVehicleStatus.xHeadingRate.ucBytes[3] = ucDmaBuffer[i];
 8001050:	7afb      	ldrb	r3, [r7, #11]
 8001052:	4a1e      	ldr	r2, [pc, #120]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8001054:	5cd2      	ldrb	r2, [r2, r3]
 8001056:	4b1f      	ldr	r3, [pc, #124]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8001058:	72da      	strb	r2, [r3, #11]
          ucSmState = 1;
 800105a:	2301      	movs	r3, #1
 800105c:	60fb      	str	r3, [r7, #12]
          break;
 800105e:	e023      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 40:
          xVehicleStatus.xSteeringStatus.ucBytes[0] = ucDmaBuffer[i];
 8001060:	7afb      	ldrb	r3, [r7, #11]
 8001062:	4a1a      	ldr	r2, [pc, #104]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8001064:	5cd2      	ldrb	r2, [r2, r3]
 8001066:	4b1b      	ldr	r3, [pc, #108]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8001068:	731a      	strb	r2, [r3, #12]
          ucSmState = 41;
 800106a:	2329      	movs	r3, #41	@ 0x29
 800106c:	60fb      	str	r3, [r7, #12]
          break;
 800106e:	e01b      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 41:
          xVehicleStatus.xSteeringStatus.ucBytes[1] = ucDmaBuffer[i];
 8001070:	7afb      	ldrb	r3, [r7, #11]
 8001072:	4a16      	ldr	r2, [pc, #88]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8001074:	5cd2      	ldrb	r2, [r2, r3]
 8001076:	4b17      	ldr	r3, [pc, #92]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8001078:	735a      	strb	r2, [r3, #13]
          ucSmState = 42;
 800107a:	232a      	movs	r3, #42	@ 0x2a
 800107c:	60fb      	str	r3, [r7, #12]
          break;
 800107e:	e013      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 42:
          xVehicleStatus.xSteeringStatus.ucBytes[2] = ucDmaBuffer[i];
 8001080:	7afb      	ldrb	r3, [r7, #11]
 8001082:	4a12      	ldr	r2, [pc, #72]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8001084:	5cd2      	ldrb	r2, [r2, r3]
 8001086:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8001088:	739a      	strb	r2, [r3, #14]
          ucSmState = 43;
 800108a:	232b      	movs	r3, #43	@ 0x2b
 800108c:	60fb      	str	r3, [r7, #12]
          break;
 800108e:	e00b      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        case 43:
          xVehicleStatus.xSteeringStatus.ucBytes[3] = ucDmaBuffer[i];
 8001090:	7afb      	ldrb	r3, [r7, #11]
 8001092:	4a0e      	ldr	r2, [pc, #56]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 8001094:	5cd2      	ldrb	r2, [r2, r3]
 8001096:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8001098:	73da      	strb	r2, [r3, #15]
          ucSmState = 1;
 800109a:	2301      	movs	r3, #1
 800109c:	60fb      	str	r3, [r7, #12]
          break;
 800109e:	e003      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>

        default:
		      ucSmState = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
          break;
 80010a4:	e000      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x2c0>
          break;
 80010a6:	bf00      	nop
    for(unsigned char i = 0; i<UART2_DMA_BUFFER_SIZE; i++)
 80010a8:	7afb      	ldrb	r3, [r7, #11]
 80010aa:	3301      	adds	r3, #1
 80010ac:	72fb      	strb	r3, [r7, #11]
 80010ae:	7afb      	ldrb	r3, [r7, #11]
 80010b0:	2b15      	cmp	r3, #21
 80010b2:	f67f aea7 	bls.w	8000e04 <HAL_UART_RxCpltCallback+0x1c>
      }
    }
    // Starting other UART reading
    HAL_UART_Receive_DMA(&huart2, ucDmaBuffer, UART2_DMA_BUFFER_SIZE);
 80010b6:	2216      	movs	r2, #22
 80010b8:	4904      	ldr	r1, [pc, #16]	@ (80010cc <HAL_UART_RxCpltCallback+0x2e4>)
 80010ba:	4803      	ldr	r0, [pc, #12]	@ (80010c8 <HAL_UART_RxCpltCallback+0x2e0>)
 80010bc:	f009 fd54 	bl	800ab68 <HAL_UART_Receive_DMA>
  }
}
 80010c0:	bf00      	nop
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	240014d4 	.word	0x240014d4
 80010cc:	2400146c 	.word	0x2400146c
 80010d0:	24001400 	.word	0x24001400
 80010d4:	2400145c 	.word	0x2400145c

080010d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a04      	ldr	r2, [pc, #16]	@ (80010f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d101      	bne.n	80010ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010ea:	f000 fff9 	bl	80020e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40001000 	.word	0x40001000

080010fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001100:	b672      	cpsid	i
}
 8001102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <Error_Handler+0x8>

08001108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <HAL_MspInit+0x38>)
 8001110:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001114:	4a0a      	ldr	r2, [pc, #40]	@ (8001140 <HAL_MspInit+0x38>)
 8001116:	f043 0302 	orr.w	r3, r3, #2
 800111a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800111e:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <HAL_MspInit+0x38>)
 8001120:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800112c:	2200      	movs	r2, #0
 800112e:	210f      	movs	r1, #15
 8001130:	f06f 0001 	mvn.w	r0, #1
 8001134:	f002 fbd2 	bl	80038dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	58024400 	.word	0x58024400

08001144 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b090      	sub	sp, #64	@ 0x40
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b0f      	cmp	r3, #15
 8001150:	d827      	bhi.n	80011a2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001152:	2200      	movs	r2, #0
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	2036      	movs	r0, #54	@ 0x36
 8001158:	f002 fbc0 	bl	80038dc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800115c:	2036      	movs	r0, #54	@ 0x36
 800115e:	f002 fbd7 	bl	8003910 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001162:	4a29      	ldr	r2, [pc, #164]	@ (8001208 <HAL_InitTick+0xc4>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001168:	4b28      	ldr	r3, [pc, #160]	@ (800120c <HAL_InitTick+0xc8>)
 800116a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800116e:	4a27      	ldr	r2, [pc, #156]	@ (800120c <HAL_InitTick+0xc8>)
 8001170:	f043 0310 	orr.w	r3, r3, #16
 8001174:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001178:	4b24      	ldr	r3, [pc, #144]	@ (800120c <HAL_InitTick+0xc8>)
 800117a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800117e:	f003 0310 	and.w	r3, r3, #16
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001186:	f107 0210 	add.w	r2, r7, #16
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f006 fc0b 	bl	80079ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001198:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800119a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800119c:	2b00      	cmp	r3, #0
 800119e:	d106      	bne.n	80011ae <HAL_InitTick+0x6a>
 80011a0:	e001      	b.n	80011a6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e02b      	b.n	80011fe <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011a6:	f006 fbd5 	bl	8007954 <HAL_RCC_GetPCLK1Freq>
 80011aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80011ac:	e004      	b.n	80011b8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011ae:	f006 fbd1 	bl	8007954 <HAL_RCC_GetPCLK1Freq>
 80011b2:	4603      	mov	r3, r0
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011ba:	4a15      	ldr	r2, [pc, #84]	@ (8001210 <HAL_InitTick+0xcc>)
 80011bc:	fba2 2303 	umull	r2, r3, r2, r3
 80011c0:	0c9b      	lsrs	r3, r3, #18
 80011c2:	3b01      	subs	r3, #1
 80011c4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011c6:	4b13      	ldr	r3, [pc, #76]	@ (8001214 <HAL_InitTick+0xd0>)
 80011c8:	4a13      	ldr	r2, [pc, #76]	@ (8001218 <HAL_InitTick+0xd4>)
 80011ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011cc:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <HAL_InitTick+0xd0>)
 80011ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011d2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001214 <HAL_InitTick+0xd0>)
 80011d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011d8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011da:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <HAL_InitTick+0xd0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <HAL_InitTick+0xd0>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80011e6:	480b      	ldr	r0, [pc, #44]	@ (8001214 <HAL_InitTick+0xd0>)
 80011e8:	f009 f920 	bl	800a42c <HAL_TIM_Base_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d104      	bne.n	80011fc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80011f2:	4808      	ldr	r0, [pc, #32]	@ (8001214 <HAL_InitTick+0xd0>)
 80011f4:	f009 f97c 	bl	800a4f0 <HAL_TIM_Base_Start_IT>
 80011f8:	4603      	mov	r3, r0
 80011fa:	e000      	b.n	80011fe <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3740      	adds	r7, #64	@ 0x40
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	24000008 	.word	0x24000008
 800120c:	58024400 	.word	0x58024400
 8001210:	431bde83 	.word	0x431bde83
 8001214:	24001484 	.word	0x24001484
 8001218:	40001000 	.word	0x40001000

0800121c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <NMI_Handler+0x4>

08001224 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <HardFault_Handler+0x4>

0800122c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <MemManage_Handler+0x4>

08001234 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <BusFault_Handler+0x4>

0800123c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <UsageFault_Handler+0x4>

08001244 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001258:	4802      	ldr	r0, [pc, #8]	@ (8001264 <DMA1_Stream0_IRQHandler+0x10>)
 800125a:	f003 fe91 	bl	8004f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	240016ec 	.word	0x240016ec

08001268 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800126c:	4802      	ldr	r0, [pc, #8]	@ (8001278 <DMA1_Stream1_IRQHandler+0x10>)
 800126e:	f003 fe87 	bl	8004f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	24001764 	.word	0x24001764

0800127c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001280:	4802      	ldr	r0, [pc, #8]	@ (800128c <USART2_IRQHandler+0x10>)
 8001282:	f009 fcbd 	bl	800ac00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	240014d4 	.word	0x240014d4

08001290 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001294:	4802      	ldr	r0, [pc, #8]	@ (80012a0 <USART3_IRQHandler+0x10>)
 8001296:	f009 fcb3 	bl	800ac00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	24001568 	.word	0x24001568

080012a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JoySW_Pin);
 80012a8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80012ac:	f005 fb43 	bl	8006936 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012b8:	4802      	ldr	r0, [pc, #8]	@ (80012c4 <TIM6_DAC_IRQHandler+0x10>)
 80012ba:	f009 f991 	bl	800a5e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	24001484 	.word	0x24001484

080012c8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80012cc:	4802      	ldr	r0, [pc, #8]	@ (80012d8 <DMA2_Stream1_IRQHandler+0x10>)
 80012ce:	f003 fe57 	bl	8004f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	240015fc 	.word	0x240015fc

080012dc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80012e0:	4802      	ldr	r0, [pc, #8]	@ (80012ec <DMA2_Stream2_IRQHandler+0x10>)
 80012e2:	f003 fe4d 	bl	8004f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	24001674 	.word	0x24001674

080012f0 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012fa:	f012 fc93 	bl	8013c24 <__errno>
 80012fe:	4603      	mov	r3, r0
 8001300:	2216      	movs	r2, #22
 8001302:	601a      	str	r2, [r3, #0]
  return -1;
 8001304:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <_exit>:

void _exit (int status)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001318:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ffe7 	bl	80012f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001322:	bf00      	nop
 8001324:	e7fd      	b.n	8001322 <_exit+0x12>

08001326 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b086      	sub	sp, #24
 800132a:	af00      	add	r7, sp, #0
 800132c:	60f8      	str	r0, [r7, #12]
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	e00a      	b.n	800134e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001338:	f3af 8000 	nop.w
 800133c:	4601      	mov	r1, r0
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	1c5a      	adds	r2, r3, #1
 8001342:	60ba      	str	r2, [r7, #8]
 8001344:	b2ca      	uxtb	r2, r1
 8001346:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	3301      	adds	r3, #1
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	429a      	cmp	r2, r3
 8001354:	dbf0      	blt.n	8001338 <_read+0x12>
  }

  return len;
 8001356:	687b      	ldr	r3, [r7, #4]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	e009      	b.n	8001386 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	1c5a      	adds	r2, r3, #1
 8001376:	60ba      	str	r2, [r7, #8]
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	3301      	adds	r3, #1
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	429a      	cmp	r2, r3
 800138c:	dbf1      	blt.n	8001372 <_write+0x12>
  }
  return len;
 800138e:	687b      	ldr	r3, [r7, #4]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <_close>:

int _close(int file)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013c0:	605a      	str	r2, [r3, #4]
  return 0;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <_isatty>:

int _isatty(int file)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013d8:	2301      	movs	r3, #1
}
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b085      	sub	sp, #20
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	60f8      	str	r0, [r7, #12]
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001408:	4a14      	ldr	r2, [pc, #80]	@ (800145c <_sbrk+0x5c>)
 800140a:	4b15      	ldr	r3, [pc, #84]	@ (8001460 <_sbrk+0x60>)
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001414:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <_sbrk+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d102      	bne.n	8001422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800141c:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <_sbrk+0x64>)
 800141e:	4a12      	ldr	r2, [pc, #72]	@ (8001468 <_sbrk+0x68>)
 8001420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001422:	4b10      	ldr	r3, [pc, #64]	@ (8001464 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	429a      	cmp	r2, r3
 800142e:	d207      	bcs.n	8001440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001430:	f012 fbf8 	bl	8013c24 <__errno>
 8001434:	4603      	mov	r3, r0
 8001436:	220c      	movs	r2, #12
 8001438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800143a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800143e:	e009      	b.n	8001454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001440:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <_sbrk+0x64>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001446:	4b07      	ldr	r3, [pc, #28]	@ (8001464 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	4a05      	ldr	r2, [pc, #20]	@ (8001464 <_sbrk+0x64>)
 8001450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001452:	68fb      	ldr	r3, [r7, #12]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	24080000 	.word	0x24080000
 8001460:	00000400 	.word	0x00000400
 8001464:	240014d0 	.word	0x240014d0
 8001468:	24033458 	.word	0x24033458

0800146c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001470:	4b37      	ldr	r3, [pc, #220]	@ (8001550 <SystemInit+0xe4>)
 8001472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001476:	4a36      	ldr	r2, [pc, #216]	@ (8001550 <SystemInit+0xe4>)
 8001478:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800147c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001480:	4b34      	ldr	r3, [pc, #208]	@ (8001554 <SystemInit+0xe8>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 030f 	and.w	r3, r3, #15
 8001488:	2b06      	cmp	r3, #6
 800148a:	d807      	bhi.n	800149c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800148c:	4b31      	ldr	r3, [pc, #196]	@ (8001554 <SystemInit+0xe8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f023 030f 	bic.w	r3, r3, #15
 8001494:	4a2f      	ldr	r2, [pc, #188]	@ (8001554 <SystemInit+0xe8>)
 8001496:	f043 0307 	orr.w	r3, r3, #7
 800149a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800149c:	4b2e      	ldr	r3, [pc, #184]	@ (8001558 <SystemInit+0xec>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a2d      	ldr	r2, [pc, #180]	@ (8001558 <SystemInit+0xec>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001558 <SystemInit+0xec>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001558 <SystemInit+0xec>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	4929      	ldr	r1, [pc, #164]	@ (8001558 <SystemInit+0xec>)
 80014b4:	4b29      	ldr	r3, [pc, #164]	@ (800155c <SystemInit+0xf0>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014ba:	4b26      	ldr	r3, [pc, #152]	@ (8001554 <SystemInit+0xe8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d007      	beq.n	80014d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014c6:	4b23      	ldr	r3, [pc, #140]	@ (8001554 <SystemInit+0xe8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f023 030f 	bic.w	r3, r3, #15
 80014ce:	4a21      	ldr	r2, [pc, #132]	@ (8001554 <SystemInit+0xe8>)
 80014d0:	f043 0307 	orr.w	r3, r3, #7
 80014d4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014d6:	4b20      	ldr	r3, [pc, #128]	@ (8001558 <SystemInit+0xec>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001558 <SystemInit+0xec>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001558 <SystemInit+0xec>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <SystemInit+0xec>)
 80014ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001560 <SystemInit+0xf4>)
 80014ec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001558 <SystemInit+0xec>)
 80014f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001564 <SystemInit+0xf8>)
 80014f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014f4:	4b18      	ldr	r3, [pc, #96]	@ (8001558 <SystemInit+0xec>)
 80014f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001568 <SystemInit+0xfc>)
 80014f8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014fa:	4b17      	ldr	r3, [pc, #92]	@ (8001558 <SystemInit+0xec>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001500:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <SystemInit+0xec>)
 8001502:	4a19      	ldr	r2, [pc, #100]	@ (8001568 <SystemInit+0xfc>)
 8001504:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001506:	4b14      	ldr	r3, [pc, #80]	@ (8001558 <SystemInit+0xec>)
 8001508:	2200      	movs	r2, #0
 800150a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800150c:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <SystemInit+0xec>)
 800150e:	4a16      	ldr	r2, [pc, #88]	@ (8001568 <SystemInit+0xfc>)
 8001510:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001512:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <SystemInit+0xec>)
 8001514:	2200      	movs	r2, #0
 8001516:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001518:	4b0f      	ldr	r3, [pc, #60]	@ (8001558 <SystemInit+0xec>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0e      	ldr	r2, [pc, #56]	@ (8001558 <SystemInit+0xec>)
 800151e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001522:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001524:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <SystemInit+0xec>)
 8001526:	2200      	movs	r2, #0
 8001528:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800152a:	4b10      	ldr	r3, [pc, #64]	@ (800156c <SystemInit+0x100>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <SystemInit+0x104>)
 8001530:	4013      	ands	r3, r2
 8001532:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001536:	d202      	bcs.n	800153e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001538:	4b0e      	ldr	r3, [pc, #56]	@ (8001574 <SystemInit+0x108>)
 800153a:	2201      	movs	r2, #1
 800153c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800153e:	4b0e      	ldr	r3, [pc, #56]	@ (8001578 <SystemInit+0x10c>)
 8001540:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001544:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00
 8001554:	52002000 	.word	0x52002000
 8001558:	58024400 	.word	0x58024400
 800155c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001560:	02020200 	.word	0x02020200
 8001564:	01ff0000 	.word	0x01ff0000
 8001568:	01010280 	.word	0x01010280
 800156c:	5c001000 	.word	0x5c001000
 8001570:	ffff0000 	.word	0xffff0000
 8001574:	51008108 	.word	0x51008108
 8001578:	52004000 	.word	0x52004000

0800157c <StartTaskControle>:
  * @brief  TaskControle task function.
  * @param  argument: not used.
  * @retval None
  */
void StartTaskControle(void * argument)
{
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b099      	sub	sp, #100	@ 0x64
 8001580:	af04      	add	r7, sp, #16
 8001582:	6078      	str	r0, [r7, #4]
  // Local variables -- START
  unsigned char ucControlMode;
  unsigned char ucFlagFullMsg;

  // Joystick calibration
  unsigned int uiX0   = 33970;
 8001584:	f248 43b2 	movw	r3, #33970	@ 0x84b2
 8001588:	64bb      	str	r3, [r7, #72]	@ 0x48
  unsigned int uiXMin = 1057;
 800158a:	f240 4321 	movw	r3, #1057	@ 0x421
 800158e:	647b      	str	r3, [r7, #68]	@ 0x44
  unsigned int uiXMax = 65535;
 8001590:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001594:	643b      	str	r3, [r7, #64]	@ 0x40
  unsigned int uiY0   = 33580;
 8001596:	f248 332c 	movw	r3, #33580	@ 0x832c
 800159a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  unsigned int uiYMin = 1062;
 800159c:	f240 4326 	movw	r3, #1062	@ 0x426
 80015a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  unsigned int uiYMax = 65535;
 80015a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015a6:	637b      	str	r3, [r7, #52]	@ 0x34

  // Return flags
  unsigned int uiFlags = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	633b      	str	r3, [r7, #48]	@ 0x30
  unsigned char ucTxMsgToCarla[MSG_TO_CARLA_SIZE];

  // Local variables -- END

  // Initialization of DMA RX in circular mode
  HAL_UART_Receive_DMA(&huart2, ucDmaBuffer, UART2_DMA_BUFFER_SIZE);
 80015ac:	2216      	movs	r2, #22
 80015ae:	498e      	ldr	r1, [pc, #568]	@ (80017e8 <StartTaskControle+0x26c>)
 80015b0:	488e      	ldr	r0, [pc, #568]	@ (80017ec <StartTaskControle+0x270>)
 80015b2:	f009 fad9 	bl	800ab68 <HAL_UART_Receive_DMA>

  // Initialization of operation mode
  ucControlMode = MANUAL; // ! MANUAL to test communication with carla
 80015b6:	2304      	movs	r3, #4
 80015b8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  
  //uiFlags = osThreadFlagsGet();
  //uiFlags = osThreadFlagsWait(MICRO_ROS_AGENT_ONLINE_FLAG, osFlagsWaitAny, 1000 * 20); // Wait 20 seconds for uROS init

  if(osFlagsErrorTimeout == uiFlags)
 80015bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015be:	f113 0f02 	cmn.w	r3, #2
 80015c2:	d102      	bne.n	80015ca <StartTaskControle+0x4e>
  {
    ucControlMode = MANUAL;
 80015c4:	2304      	movs	r3, #4
 80015c6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  // Task loop
  for(;;)
  {

    // Looking fot operation mode change by Autoware -- START
	uiFlags = osThreadFlagsGet();
 80015ca:	f00b fba9 	bl	800cd20 <osThreadFlagsGet>
 80015ce:	6338      	str	r0, [r7, #48]	@ 0x30
    uiFlags = osThreadFlagsWait(TO_AUTOWARE_MODE_FLAG | TO_MANUAL_MODE_FLAG, osFlagsWaitAny, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2100      	movs	r1, #0
 80015d4:	2011      	movs	r0, #17
 80015d6:	f00b fbc4 	bl	800cd62 <osThreadFlagsWait>
 80015da:	6338      	str	r0, [r7, #48]	@ 0x30

    if(TO_AUTOWARE_MODE_FLAG == uiFlags)
 80015dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d103      	bne.n	80015ea <StartTaskControle+0x6e>
    {
      ucControlMode = AUTOWARE;
 80015e2:	2301      	movs	r3, #1
 80015e4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80015e8:	e00c      	b.n	8001604 <StartTaskControle+0x88>
    }
    else if(TO_MANUAL_MODE_FLAG == uiFlags)
 80015ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015ec:	2b10      	cmp	r3, #16
 80015ee:	d103      	bne.n	80015f8 <StartTaskControle+0x7c>
    {
      ucControlMode = MANUAL;
 80015f0:	2304      	movs	r3, #4
 80015f2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80015f6:	e005      	b.n	8001604 <StartTaskControle+0x88>
    }
    else if((TO_AUTOWARE_MODE_FLAG | TO_MANUAL_MODE_FLAG) == uiFlags)
 80015f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015fa:	2b11      	cmp	r3, #17
 80015fc:	d102      	bne.n	8001604 <StartTaskControle+0x88>
    {
      ucControlMode = MANUAL;
 80015fe:	2304      	movs	r3, #4
 8001600:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }
    // Looking for operation mode change by Autoware -- END

    // Looking for operation mode change by JoySW -- START
    uiFlags = osThreadFlagsGet();
 8001604:	f00b fb8c 	bl	800cd20 <osThreadFlagsGet>
 8001608:	6338      	str	r0, [r7, #48]	@ 0x30
    uiFlags = osThreadFlagsWait(JOYSW_FLAG, osFlagsWaitAll, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2101      	movs	r1, #1
 800160e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001612:	f00b fba6 	bl	800cd62 <osThreadFlagsWait>
 8001616:	6338      	str	r0, [r7, #48]	@ 0x30

    if(JOYSW_FLAG == uiFlags)
 8001618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800161a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800161e:	d11a      	bne.n	8001656 <StartTaskControle+0xda>
    {
      if(AUTOWARE == ucControlMode)
 8001620:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001624:	2b01      	cmp	r3, #1
 8001626:	d109      	bne.n	800163c <StartTaskControle+0xc0>
      {
        ucControlMode = MANUAL;
 8001628:	2304      	movs	r3, #4
 800162a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 800162e:	4b70      	ldr	r3, [pc, #448]	@ (80017f0 <StartTaskControle+0x274>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2110      	movs	r1, #16
 8001634:	4618      	mov	r0, r3
 8001636:	f00b fb25 	bl	800cc84 <osThreadFlagsSet>
 800163a:	e00c      	b.n	8001656 <StartTaskControle+0xda>
      }
      else if(MANUAL == ucControlMode)
 800163c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001640:	2b04      	cmp	r3, #4
 8001642:	d108      	bne.n	8001656 <StartTaskControle+0xda>
      {
        ucControlMode = AUTOWARE;
 8001644:	2301      	movs	r3, #1
 8001646:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        osThreadFlagsSet(TaskMicroAutowaHandle, TO_AUTOWARE_MODE_FLAG);
 800164a:	4b69      	ldr	r3, [pc, #420]	@ (80017f0 <StartTaskControle+0x274>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2101      	movs	r1, #1
 8001650:	4618      	mov	r0, r3
 8001652:	f00b fb17 	bl	800cc84 <osThreadFlagsSet>
      }
    }
    // Looking for operation mode change by JoySW -- END

    // Autonomous mode (AUTOWARE) routine -- START
    if(AUTOWARE == ucControlMode)
 8001656:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800165a:	2b01      	cmp	r3, #1
 800165c:	d17c      	bne.n	8001758 <StartTaskControle+0x1dc>
    {
      // Setting driving mode lights
	    vDrivingModeLights(ucControlMode);
 800165e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001662:	4618      	mov	r0, r3
 8001664:	f000 fc8c 	bl	8001f80 <vDrivingModeLights>

      // WAIT for flag to sync xControlAction update
  	  uiFlags = osThreadFlagsGet();
 8001668:	f00b fb5a 	bl	800cd20 <osThreadFlagsGet>
 800166c:	6338      	str	r0, [r7, #48]	@ 0x30
      uiFlags = osThreadFlagsWait(DATA_UPDATED_FLAG, osFlagsWaitAll, TIMEOUT_GET_CONTROL_ACTION);
 800166e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001672:	2101      	movs	r1, #1
 8001674:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001678:	f00b fb73 	bl	800cd62 <osThreadFlagsWait>
 800167c:	6338      	str	r0, [r7, #48]	@ 0x30

      // Timeout error
      if(osFlagsErrorTimeout == uiFlags)
 800167e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001680:	f113 0f02 	cmn.w	r3, #2
 8001684:	d108      	bne.n	8001698 <StartTaskControle+0x11c>
      {
        ucControlMode = MANUAL;
 8001686:	2304      	movs	r3, #4
 8001688:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 800168c:	4b58      	ldr	r3, [pc, #352]	@ (80017f0 <StartTaskControle+0x274>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2110      	movs	r1, #16
 8001692:	4618      	mov	r0, r3
 8001694:	f00b faf6 	bl	800cc84 <osThreadFlagsSet>
      }

      if(DATA_UPDATED_FLAG == uiFlags)
 8001698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800169a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800169e:	d15b      	bne.n	8001758 <StartTaskControle+0x1dc>
      {
        osMutexAcquire(MutexControlActionHandle, osWaitForever);
 80016a0:	4b54      	ldr	r3, [pc, #336]	@ (80017f4 <StartTaskControle+0x278>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016a8:	4618      	mov	r0, r3
 80016aa:	f00b fc7c 	bl	800cfa6 <osMutexAcquire>
        vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 80016ae:	4b52      	ldr	r3, [pc, #328]	@ (80017f8 <StartTaskControle+0x27c>)
 80016b0:	f107 0208 	add.w	r2, r7, #8
 80016b4:	9202      	str	r2, [sp, #8]
 80016b6:	466c      	mov	r4, sp
 80016b8:	f103 0210 	add.w	r2, r3, #16
 80016bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016c0:	e884 0003 	stmia.w	r4, {r0, r1}
 80016c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016c6:	f000 fbd7 	bl	8001e78 <vGetStringFromControlAction>
        osMutexRelease(MutexControlActionHandle);
 80016ca:	4b4a      	ldr	r3, [pc, #296]	@ (80017f4 <StartTaskControle+0x278>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f00b fcb4 	bl	800d03c <osMutexRelease>

        // Send cTxMsgToCarla to CARLA
        HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, strlen((char * ) ucTxMsgToCarla));
 80016d4:	f107 0308 	add.w	r3, r7, #8
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe fe0b 	bl	80002f4 <strlen>
 80016de:	4603      	mov	r3, r0
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	f107 0308 	add.w	r3, r7, #8
 80016e6:	4619      	mov	r1, r3
 80016e8:	4840      	ldr	r0, [pc, #256]	@ (80017ec <StartTaskControle+0x270>)
 80016ea:	f009 f9bd 	bl	800aa68 <HAL_UART_Transmit_DMA>

        // Wait CARLA full msg xVehicleStatusRx
        uiFlags = osThreadFlagsGet();
 80016ee:	f00b fb17 	bl	800cd20 <osThreadFlagsGet>
 80016f2:	6338      	str	r0, [r7, #48]	@ 0x30
        uiFlags = osThreadFlagsWait(UART_NEW_DATA_FLAG, osFlagsWaitAll, TIMEOUT_GET_CARLA_RX);
 80016f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80016f8:	2101      	movs	r1, #1
 80016fa:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80016fe:	f00b fb30 	bl	800cd62 <osThreadFlagsWait>
 8001702:	6338      	str	r0, [r7, #48]	@ 0x30

        // Timeout error
        if(osFlagsErrorTimeout == uiFlags)
 8001704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001706:	f113 0f02 	cmn.w	r3, #2
 800170a:	d102      	bne.n	8001712 <StartTaskControle+0x196>
        {
          ucControlMode = EMERGENCY;
 800170c:	2300      	movs	r3, #0
 800170e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        }

        osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 8001712:	4b3a      	ldr	r3, [pc, #232]	@ (80017fc <StartTaskControle+0x280>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800171a:	4618      	mov	r0, r3
 800171c:	f00b fc43 	bl	800cfa6 <osMutexAcquire>

        xControlSignal.fLongSpeed = xVehicleStatus.xLongSpeed.fFloat;
 8001720:	4b37      	ldr	r3, [pc, #220]	@ (8001800 <StartTaskControle+0x284>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a37      	ldr	r2, [pc, #220]	@ (8001804 <StartTaskControle+0x288>)
 8001726:	6153      	str	r3, [r2, #20]
        xControlSignal.fLatSpeed = xVehicleStatus.xLatSpeed.fFloat;
 8001728:	4b35      	ldr	r3, [pc, #212]	@ (8001800 <StartTaskControle+0x284>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	4a35      	ldr	r2, [pc, #212]	@ (8001804 <StartTaskControle+0x288>)
 800172e:	6193      	str	r3, [r2, #24]
        xControlSignal.fHeadingRate = xVehicleStatus.xHeadingRate.fFloat;
 8001730:	4b33      	ldr	r3, [pc, #204]	@ (8001800 <StartTaskControle+0x284>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	4a33      	ldr	r2, [pc, #204]	@ (8001804 <StartTaskControle+0x288>)
 8001736:	61d3      	str	r3, [r2, #28]
        xControlSignal.fSteeringStatus = xVehicleStatus.xSteeringStatus.fFloat;
 8001738:	4b31      	ldr	r3, [pc, #196]	@ (8001800 <StartTaskControle+0x284>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	4a31      	ldr	r2, [pc, #196]	@ (8001804 <StartTaskControle+0x288>)
 800173e:	6213      	str	r3, [r2, #32]

        osMutexRelease(MutexControlSignalHandle);
 8001740:	4b2e      	ldr	r3, [pc, #184]	@ (80017fc <StartTaskControle+0x280>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f00b fc79 	bl	800d03c <osMutexRelease>

        osThreadFlagsSet(TaskMicroAutowaHandle, DATA_UPDATED_FLAG);
 800174a:	4b29      	ldr	r3, [pc, #164]	@ (80017f0 <StartTaskControle+0x274>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001752:	4618      	mov	r0, r3
 8001754:	f00b fa96 	bl	800cc84 <osThreadFlagsSet>
    }
    // Autonomous mode (AUTOWARE) routine -- END


    // Manual mode (MANUAL) routine -- START
    if(MANUAL == ucControlMode)
 8001758:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800175c:	2b04      	cmp	r3, #4
 800175e:	f040 80ae 	bne.w	80018be <StartTaskControle+0x342>
    {
      // Setting driving mode lights
  	  vDrivingModeLights(ucControlMode);
 8001762:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001766:	4618      	mov	r0, r3
 8001768:	f000 fc0a 	bl	8001f80 <vDrivingModeLights>

      // Joystick read block -- START
      fJoyXAxis = fGetJoyPostition((unsigned int) uiADC1Buffer[0], uiX0, uiXMax, uiXMin);
 800176c:	4b26      	ldr	r3, [pc, #152]	@ (8001808 <StartTaskControle+0x28c>)
 800176e:	6818      	ldr	r0, [r3, #0]
 8001770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001772:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001774:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001776:	f000 fb4b 	bl	8001e10 <fGetJoyPostition>
 800177a:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
      fJoyYAxis = fGetJoyPostition((unsigned int) uiADC1Buffer[1], uiY0, uiYMax, uiYMin);
 800177e:	4b22      	ldr	r3, [pc, #136]	@ (8001808 <StartTaskControle+0x28c>)
 8001780:	6858      	ldr	r0, [r3, #4]
 8001782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001784:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001786:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001788:	f000 fb42 	bl	8001e10 <fGetJoyPostition>
 800178c:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28

      // Assembling xControlAction
      osMutexAcquire(MutexControlActionHandle, osWaitForever);
 8001790:	4b18      	ldr	r3, [pc, #96]	@ (80017f4 <StartTaskControle+0x278>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001798:	4618      	mov	r0, r3
 800179a:	f00b fc04 	bl	800cfa6 <osMutexAcquire>
      xControlAction.xSteeringAngle.fFloat = -fJoyXAxis*MAX_STEERING_ANGLE;
 800179e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80017a2:	eef1 7a67 	vneg.f32	s15, s15
 80017a6:	4b14      	ldr	r3, [pc, #80]	@ (80017f8 <StartTaskControle+0x27c>)
 80017a8:	edc3 7a00 	vstr	s15, [r3]
      xControlAction.xSteeringVelocity.fFloat = 0;
 80017ac:	4b12      	ldr	r3, [pc, #72]	@ (80017f8 <StartTaskControle+0x27c>)
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	605a      	str	r2, [r3, #4]
      xControlAction.xSpeed.fFloat = (fJoyYAxis > 0) ? fJoyYAxis*MAX_TROTTLE : 0.0;
 80017b4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80017b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c0:	dd01      	ble.n	80017c6 <StartTaskControle+0x24a>
 80017c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c4:	e001      	b.n	80017ca <StartTaskControle+0x24e>
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	4a0b      	ldr	r2, [pc, #44]	@ (80017f8 <StartTaskControle+0x27c>)
 80017cc:	6093      	str	r3, [r2, #8]
      xControlAction.xAcceleration.fFloat = (fJoyYAxis < 0) ? -fJoyYAxis*MAX_BRAKE : 0.0;
 80017ce:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80017d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017da:	d519      	bpl.n	8001810 <StartTaskControle+0x294>
 80017dc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80017e0:	eef1 7a67 	vneg.f32	s15, s15
 80017e4:	e016      	b.n	8001814 <StartTaskControle+0x298>
 80017e6:	bf00      	nop
 80017e8:	2400146c 	.word	0x2400146c
 80017ec:	240014d4 	.word	0x240014d4
 80017f0:	24001404 	.word	0x24001404
 80017f4:	2400140c 	.word	0x2400140c
 80017f8:	24001420 	.word	0x24001420
 80017fc:	24001408 	.word	0x24001408
 8001800:	2400145c 	.word	0x2400145c
 8001804:	24001438 	.word	0x24001438
 8001808:	24001414 	.word	0x24001414
 800180c:	00000000 	.word	0x00000000
 8001810:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 800180c <StartTaskControle+0x290>
 8001814:	4b4b      	ldr	r3, [pc, #300]	@ (8001944 <StartTaskControle+0x3c8>)
 8001816:	edc3 7a03 	vstr	s15, [r3, #12]
      xControlAction.xJerk.fFloat = 0;
 800181a:	4b4a      	ldr	r3, [pc, #296]	@ (8001944 <StartTaskControle+0x3c8>)
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	611a      	str	r2, [r3, #16]
      xControlAction.ucControlMode = MANUAL;
 8001822:	4b48      	ldr	r3, [pc, #288]	@ (8001944 <StartTaskControle+0x3c8>)
 8001824:	2204      	movs	r2, #4
 8001826:	751a      	strb	r2, [r3, #20]
      vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 8001828:	4b46      	ldr	r3, [pc, #280]	@ (8001944 <StartTaskControle+0x3c8>)
 800182a:	f107 0208 	add.w	r2, r7, #8
 800182e:	9202      	str	r2, [sp, #8]
 8001830:	466c      	mov	r4, sp
 8001832:	f103 0210 	add.w	r2, r3, #16
 8001836:	e892 0003 	ldmia.w	r2, {r0, r1}
 800183a:	e884 0003 	stmia.w	r4, {r0, r1}
 800183e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001840:	f000 fb1a 	bl	8001e78 <vGetStringFromControlAction>

      osMutexRelease(MutexControlActionHandle);
 8001844:	4b40      	ldr	r3, [pc, #256]	@ (8001948 <StartTaskControle+0x3cc>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f00b fbf7 	bl	800d03c <osMutexRelease>

      // Send cTxMsgToCarla to CARLA
      HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 800184e:	f107 0308 	add.w	r3, r7, #8
 8001852:	221e      	movs	r2, #30
 8001854:	4619      	mov	r1, r3
 8001856:	483d      	ldr	r0, [pc, #244]	@ (800194c <StartTaskControle+0x3d0>)
 8001858:	f009 f906 	bl	800aa68 <HAL_UART_Transmit_DMA>

      // Wait CARLA full msg xVehicleStatusRx
  	  uiFlags = osThreadFlagsGet();
 800185c:	f00b fa60 	bl	800cd20 <osThreadFlagsGet>
 8001860:	6338      	str	r0, [r7, #48]	@ 0x30
      uiFlags = osThreadFlagsWait(UART_NEW_DATA_FLAG, osFlagsWaitAll, TIMEOUT_GET_CARLA_RX);
 8001862:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001866:	2101      	movs	r1, #1
 8001868:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800186c:	f00b fa79 	bl	800cd62 <osThreadFlagsWait>
 8001870:	6338      	str	r0, [r7, #48]	@ 0x30
      {
        //ucControlMode = EMERGENCY;
      }

      // Assembling xControlSignal
      osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 8001872:	4b37      	ldr	r3, [pc, #220]	@ (8001950 <StartTaskControle+0x3d4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800187a:	4618      	mov	r0, r3
 800187c:	f00b fb93 	bl	800cfa6 <osMutexAcquire>

      xControlSignal.fLongSpeed = xVehicleStatus.xLongSpeed.fFloat;
 8001880:	4b34      	ldr	r3, [pc, #208]	@ (8001954 <StartTaskControle+0x3d8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a34      	ldr	r2, [pc, #208]	@ (8001958 <StartTaskControle+0x3dc>)
 8001886:	6153      	str	r3, [r2, #20]
      xControlSignal.fLatSpeed = xVehicleStatus.xLatSpeed.fFloat;
 8001888:	4b32      	ldr	r3, [pc, #200]	@ (8001954 <StartTaskControle+0x3d8>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	4a32      	ldr	r2, [pc, #200]	@ (8001958 <StartTaskControle+0x3dc>)
 800188e:	6193      	str	r3, [r2, #24]
      xControlSignal.fHeadingRate = xVehicleStatus.xHeadingRate.fFloat;
 8001890:	4b30      	ldr	r3, [pc, #192]	@ (8001954 <StartTaskControle+0x3d8>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	4a30      	ldr	r2, [pc, #192]	@ (8001958 <StartTaskControle+0x3dc>)
 8001896:	61d3      	str	r3, [r2, #28]
      xControlSignal.fSteeringStatus = xVehicleStatus.xSteeringStatus.fFloat;
 8001898:	4b2e      	ldr	r3, [pc, #184]	@ (8001954 <StartTaskControle+0x3d8>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	4a2e      	ldr	r2, [pc, #184]	@ (8001958 <StartTaskControle+0x3dc>)
 800189e:	6213      	str	r3, [r2, #32]

      osMutexRelease(MutexControlSignalHandle);
 80018a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001950 <StartTaskControle+0x3d4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f00b fbc9 	bl	800d03c <osMutexRelease>

      osThreadFlagsSet(TaskMicroAutowaHandle, DATA_UPDATED_FLAG);
 80018aa:	4b2c      	ldr	r3, [pc, #176]	@ (800195c <StartTaskControle+0x3e0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018b2:	4618      	mov	r0, r3
 80018b4:	f00b f9e6 	bl	800cc84 <osThreadFlagsSet>

      // WAIT
      osDelay(MANUAL_CONTROL_TIME_COMMAND);
 80018b8:	20c8      	movs	r0, #200	@ 0xc8
 80018ba:	f00b fad3 	bl	800ce64 <osDelay>
    }
    // Manual mode (MANUAL) routine -- END

    // Emergency mode (EMERGENCY) routine -- START
    if(EMERGENCY == ucControlMode)
 80018be:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f47f ae81 	bne.w	80015ca <StartTaskControle+0x4e>
    {
      // Setting driving mode lights
  	  vDrivingModeLights(ucControlMode);
 80018c8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 fb57 	bl	8001f80 <vDrivingModeLights>
    
      osMutexAcquire(MutexControlActionHandle, osWaitForever);
 80018d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001948 <StartTaskControle+0x3cc>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018da:	4618      	mov	r0, r3
 80018dc:	f00b fb63 	bl	800cfa6 <osMutexAcquire>

      xControlAction.xSteeringAngle.fFloat = 0;
 80018e0:	4b18      	ldr	r3, [pc, #96]	@ (8001944 <StartTaskControle+0x3c8>)
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
      xControlAction.xSteeringVelocity.fFloat = 0;
 80018e8:	4b16      	ldr	r3, [pc, #88]	@ (8001944 <StartTaskControle+0x3c8>)
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	605a      	str	r2, [r3, #4]
      xControlAction.xSpeed.fFloat = 0;
 80018f0:	4b14      	ldr	r3, [pc, #80]	@ (8001944 <StartTaskControle+0x3c8>)
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
      xControlAction.xAcceleration.fFloat = 0;
 80018f8:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <StartTaskControle+0x3c8>)
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	60da      	str	r2, [r3, #12]
      xControlAction.xJerk.fFloat = 0;
 8001900:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <StartTaskControle+0x3c8>)
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
      xControlAction.ucControlMode = EMERGENCY;
 8001908:	4b0e      	ldr	r3, [pc, #56]	@ (8001944 <StartTaskControle+0x3c8>)
 800190a:	2200      	movs	r2, #0
 800190c:	751a      	strb	r2, [r3, #20]
      vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 800190e:	4b0d      	ldr	r3, [pc, #52]	@ (8001944 <StartTaskControle+0x3c8>)
 8001910:	f107 0208 	add.w	r2, r7, #8
 8001914:	9202      	str	r2, [sp, #8]
 8001916:	466c      	mov	r4, sp
 8001918:	f103 0210 	add.w	r2, r3, #16
 800191c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001920:	e884 0003 	stmia.w	r4, {r0, r1}
 8001924:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001926:	f000 faa7 	bl	8001e78 <vGetStringFromControlAction>

      // Try to stop the car whatever it takes
      while(1)
      {

        HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 800192a:	f107 0308 	add.w	r3, r7, #8
 800192e:	221e      	movs	r2, #30
 8001930:	4619      	mov	r1, r3
 8001932:	4806      	ldr	r0, [pc, #24]	@ (800194c <StartTaskControle+0x3d0>)
 8001934:	f009 f898 	bl	800aa68 <HAL_UART_Transmit_DMA>

        HAL_Delay(MANUAL_CONTROL_TIME_COMMAND);
 8001938:	20c8      	movs	r0, #200	@ 0xc8
 800193a:	f000 fbf1 	bl	8002120 <HAL_Delay>
        HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 800193e:	bf00      	nop
 8001940:	e7f3      	b.n	800192a <StartTaskControle+0x3ae>
 8001942:	bf00      	nop
 8001944:	24001420 	.word	0x24001420
 8001948:	2400140c 	.word	0x2400140c
 800194c:	240014d4 	.word	0x240014d4
 8001950:	24001408 	.word	0x24001408
 8001954:	2400145c 	.word	0x2400145c
 8001958:	24001438 	.word	0x24001438
 800195c:	24001404 	.word	0x24001404

08001960 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001964:	4b22      	ldr	r3, [pc, #136]	@ (80019f0 <MX_USART2_UART_Init+0x90>)
 8001966:	4a23      	ldr	r2, [pc, #140]	@ (80019f4 <MX_USART2_UART_Init+0x94>)
 8001968:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800196a:	4b21      	ldr	r3, [pc, #132]	@ (80019f0 <MX_USART2_UART_Init+0x90>)
 800196c:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001970:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001972:	4b1f      	ldr	r3, [pc, #124]	@ (80019f0 <MX_USART2_UART_Init+0x90>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001978:	4b1d      	ldr	r3, [pc, #116]	@ (80019f0 <MX_USART2_UART_Init+0x90>)
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800197e:	4b1c      	ldr	r3, [pc, #112]	@ (80019f0 <MX_USART2_UART_Init+0x90>)
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001984:	4b1a      	ldr	r3, [pc, #104]	@ (80019f0 <MX_USART2_UART_Init+0x90>)
 8001986:	220c      	movs	r2, #12
 8001988:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198a:	4b19      	ldr	r3, [pc, #100]	@ (80019f0 <MX_USART2_UART_Init+0x90>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001990:	4b17      	ldr	r3, [pc, #92]	@ (80019f0 <MX_USART2_UART_Init+0x90>)
 8001992:	2200      	movs	r2, #0
 8001994:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001996:	4b16      	ldr	r3, [pc, #88]	@ (80019f0 <MX_USART2_UART_Init+0x90>)
 8001998:	2200      	movs	r2, #0
 800199a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800199c:	4b14      	ldr	r3, [pc, #80]	@ (80019f0 <MX_USART2_UART_Init+0x90>)
 800199e:	2200      	movs	r2, #0
 80019a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019a2:	4b13      	ldr	r3, [pc, #76]	@ (80019f0 <MX_USART2_UART_Init+0x90>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019a8:	4811      	ldr	r0, [pc, #68]	@ (80019f0 <MX_USART2_UART_Init+0x90>)
 80019aa:	f009 f80d 	bl	800a9c8 <HAL_UART_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80019b4:	f7ff fba2 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019b8:	2100      	movs	r1, #0
 80019ba:	480d      	ldr	r0, [pc, #52]	@ (80019f0 <MX_USART2_UART_Init+0x90>)
 80019bc:	f00a ff62 	bl	800c884 <HAL_UARTEx_SetTxFifoThreshold>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80019c6:	f7ff fb99 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ca:	2100      	movs	r1, #0
 80019cc:	4808      	ldr	r0, [pc, #32]	@ (80019f0 <MX_USART2_UART_Init+0x90>)
 80019ce:	f00a ff97 	bl	800c900 <HAL_UARTEx_SetRxFifoThreshold>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80019d8:	f7ff fb90 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80019dc:	4804      	ldr	r0, [pc, #16]	@ (80019f0 <MX_USART2_UART_Init+0x90>)
 80019de:	f00a ff18 	bl	800c812 <HAL_UARTEx_DisableFifoMode>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80019e8:	f7ff fb88 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	240014d4 	.word	0x240014d4
 80019f4:	40004400 	.word	0x40004400

080019f8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019fc:	4b22      	ldr	r3, [pc, #136]	@ (8001a88 <MX_USART3_UART_Init+0x90>)
 80019fe:	4a23      	ldr	r2, [pc, #140]	@ (8001a8c <MX_USART3_UART_Init+0x94>)
 8001a00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8001a02:	4b21      	ldr	r3, [pc, #132]	@ (8001a88 <MX_USART3_UART_Init+0x90>)
 8001a04:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001a08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001a88 <MX_USART3_UART_Init+0x90>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a10:	4b1d      	ldr	r3, [pc, #116]	@ (8001a88 <MX_USART3_UART_Init+0x90>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a16:	4b1c      	ldr	r3, [pc, #112]	@ (8001a88 <MX_USART3_UART_Init+0x90>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a88 <MX_USART3_UART_Init+0x90>)
 8001a1e:	220c      	movs	r2, #12
 8001a20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a22:	4b19      	ldr	r3, [pc, #100]	@ (8001a88 <MX_USART3_UART_Init+0x90>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a28:	4b17      	ldr	r3, [pc, #92]	@ (8001a88 <MX_USART3_UART_Init+0x90>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a2e:	4b16      	ldr	r3, [pc, #88]	@ (8001a88 <MX_USART3_UART_Init+0x90>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a34:	4b14      	ldr	r3, [pc, #80]	@ (8001a88 <MX_USART3_UART_Init+0x90>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a3a:	4b13      	ldr	r3, [pc, #76]	@ (8001a88 <MX_USART3_UART_Init+0x90>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a40:	4811      	ldr	r0, [pc, #68]	@ (8001a88 <MX_USART3_UART_Init+0x90>)
 8001a42:	f008 ffc1 	bl	800a9c8 <HAL_UART_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001a4c:	f7ff fb56 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a50:	2100      	movs	r1, #0
 8001a52:	480d      	ldr	r0, [pc, #52]	@ (8001a88 <MX_USART3_UART_Init+0x90>)
 8001a54:	f00a ff16 	bl	800c884 <HAL_UARTEx_SetTxFifoThreshold>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001a5e:	f7ff fb4d 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a62:	2100      	movs	r1, #0
 8001a64:	4808      	ldr	r0, [pc, #32]	@ (8001a88 <MX_USART3_UART_Init+0x90>)
 8001a66:	f00a ff4b 	bl	800c900 <HAL_UARTEx_SetRxFifoThreshold>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001a70:	f7ff fb44 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001a74:	4804      	ldr	r0, [pc, #16]	@ (8001a88 <MX_USART3_UART_Init+0x90>)
 8001a76:	f00a fecc 	bl	800c812 <HAL_UARTEx_DisableFifoMode>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001a80:	f7ff fb3c 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	24001568 	.word	0x24001568
 8001a8c:	40004800 	.word	0x40004800

08001a90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b0be      	sub	sp, #248	@ 0xf8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aa8:	f107 0320 	add.w	r3, r7, #32
 8001aac:	22c0      	movs	r2, #192	@ 0xc0
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f012 f803 	bl	8013abc <memset>
  if(uartHandle->Instance==USART2)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a6a      	ldr	r2, [pc, #424]	@ (8001c64 <HAL_UART_MspInit+0x1d4>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	f040 80e1 	bne.w	8001c84 <HAL_UART_MspInit+0x1f4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ac2:	f04f 0202 	mov.w	r2, #2
 8001ac6:	f04f 0300 	mov.w	r3, #0
 8001aca:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ad4:	f107 0320 	add.w	r3, r7, #32
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f005 ffa9 	bl	8007a30 <HAL_RCCEx_PeriphCLKConfig>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001ae4:	f7ff fb0a 	bl	80010fc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ae8:	4b5f      	ldr	r3, [pc, #380]	@ (8001c68 <HAL_UART_MspInit+0x1d8>)
 8001aea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001aee:	4a5e      	ldr	r2, [pc, #376]	@ (8001c68 <HAL_UART_MspInit+0x1d8>)
 8001af0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001af4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001af8:	4b5b      	ldr	r3, [pc, #364]	@ (8001c68 <HAL_UART_MspInit+0x1d8>)
 8001afa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b02:	61fb      	str	r3, [r7, #28]
 8001b04:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	4b58      	ldr	r3, [pc, #352]	@ (8001c68 <HAL_UART_MspInit+0x1d8>)
 8001b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b0c:	4a56      	ldr	r2, [pc, #344]	@ (8001c68 <HAL_UART_MspInit+0x1d8>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b16:	4b54      	ldr	r3, [pc, #336]	@ (8001c68 <HAL_UART_MspInit+0x1d8>)
 8001b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	61bb      	str	r3, [r7, #24]
 8001b22:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b24:	4b50      	ldr	r3, [pc, #320]	@ (8001c68 <HAL_UART_MspInit+0x1d8>)
 8001b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b2a:	4a4f      	ldr	r2, [pc, #316]	@ (8001c68 <HAL_UART_MspInit+0x1d8>)
 8001b2c:	f043 0308 	orr.w	r3, r3, #8
 8001b30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b34:	4b4c      	ldr	r3, [pc, #304]	@ (8001c68 <HAL_UART_MspInit+0x1d8>)
 8001b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b42:	2308      	movs	r3, #8
 8001b44:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b5a:	2307      	movs	r3, #7
 8001b5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b60:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b64:	4619      	mov	r1, r3
 8001b66:	4841      	ldr	r0, [pc, #260]	@ (8001c6c <HAL_UART_MspInit+0x1dc>)
 8001b68:	f004 fd1c 	bl	80065a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b6c:	2320      	movs	r3, #32
 8001b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b84:	2307      	movs	r3, #7
 8001b86:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b8a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4837      	ldr	r0, [pc, #220]	@ (8001c70 <HAL_UART_MspInit+0x1e0>)
 8001b92:	f004 fd07 	bl	80065a4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Stream1;
 8001b96:	4b37      	ldr	r3, [pc, #220]	@ (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001b98:	4a37      	ldr	r2, [pc, #220]	@ (8001c78 <HAL_UART_MspInit+0x1e8>)
 8001b9a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001b9c:	4b35      	ldr	r3, [pc, #212]	@ (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001b9e:	222b      	movs	r2, #43	@ 0x2b
 8001ba0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ba2:	4b34      	ldr	r3, [pc, #208]	@ (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ba8:	4b32      	ldr	r3, [pc, #200]	@ (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bae:	4b31      	ldr	r3, [pc, #196]	@ (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001bb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bb4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bb6:	4b2f      	ldr	r3, [pc, #188]	@ (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001bca:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001bce:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bd0:	4b28      	ldr	r3, [pc, #160]	@ (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001bd6:	4827      	ldr	r0, [pc, #156]	@ (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001bd8:	f001 fea8 	bl	800392c <HAL_DMA_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 8001be2:	f7ff fa8b 	bl	80010fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a22      	ldr	r2, [pc, #136]	@ (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001bea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001bee:	4a21      	ldr	r2, [pc, #132]	@ (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA2_Stream2;
 8001bf4:	4b21      	ldr	r3, [pc, #132]	@ (8001c7c <HAL_UART_MspInit+0x1ec>)
 8001bf6:	4a22      	ldr	r2, [pc, #136]	@ (8001c80 <HAL_UART_MspInit+0x1f0>)
 8001bf8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001bfa:	4b20      	ldr	r3, [pc, #128]	@ (8001c7c <HAL_UART_MspInit+0x1ec>)
 8001bfc:	222c      	movs	r2, #44	@ 0x2c
 8001bfe:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c00:	4b1e      	ldr	r3, [pc, #120]	@ (8001c7c <HAL_UART_MspInit+0x1ec>)
 8001c02:	2240      	movs	r2, #64	@ 0x40
 8001c04:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c06:	4b1d      	ldr	r3, [pc, #116]	@ (8001c7c <HAL_UART_MspInit+0x1ec>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c7c <HAL_UART_MspInit+0x1ec>)
 8001c0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c12:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c14:	4b19      	ldr	r3, [pc, #100]	@ (8001c7c <HAL_UART_MspInit+0x1ec>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c1a:	4b18      	ldr	r3, [pc, #96]	@ (8001c7c <HAL_UART_MspInit+0x1ec>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001c20:	4b16      	ldr	r3, [pc, #88]	@ (8001c7c <HAL_UART_MspInit+0x1ec>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001c26:	4b15      	ldr	r3, [pc, #84]	@ (8001c7c <HAL_UART_MspInit+0x1ec>)
 8001c28:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001c2c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c2e:	4b13      	ldr	r3, [pc, #76]	@ (8001c7c <HAL_UART_MspInit+0x1ec>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001c34:	4811      	ldr	r0, [pc, #68]	@ (8001c7c <HAL_UART_MspInit+0x1ec>)
 8001c36:	f001 fe79 	bl	800392c <HAL_DMA_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_UART_MspInit+0x1b4>
    {
      Error_Handler();
 8001c40:	f7ff fa5c 	bl	80010fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a0d      	ldr	r2, [pc, #52]	@ (8001c7c <HAL_UART_MspInit+0x1ec>)
 8001c48:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001c4a:	4a0c      	ldr	r2, [pc, #48]	@ (8001c7c <HAL_UART_MspInit+0x1ec>)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001c50:	2200      	movs	r2, #0
 8001c52:	2105      	movs	r1, #5
 8001c54:	2026      	movs	r0, #38	@ 0x26
 8001c56:	f001 fe41 	bl	80038dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c5a:	2026      	movs	r0, #38	@ 0x26
 8001c5c:	f001 fe58 	bl	8003910 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001c60:	e0c3      	b.n	8001dea <HAL_UART_MspInit+0x35a>
 8001c62:	bf00      	nop
 8001c64:	40004400 	.word	0x40004400
 8001c68:	58024400 	.word	0x58024400
 8001c6c:	58020000 	.word	0x58020000
 8001c70:	58020c00 	.word	0x58020c00
 8001c74:	240015fc 	.word	0x240015fc
 8001c78:	40020428 	.word	0x40020428
 8001c7c:	24001674 	.word	0x24001674
 8001c80:	40020440 	.word	0x40020440
  else if(uartHandle->Instance==USART3)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a5a      	ldr	r2, [pc, #360]	@ (8001df4 <HAL_UART_MspInit+0x364>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	f040 80ad 	bne.w	8001dea <HAL_UART_MspInit+0x35a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c90:	f04f 0202 	mov.w	r2, #2
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ca2:	f107 0320 	add.w	r3, r7, #32
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f005 fec2 	bl	8007a30 <HAL_RCCEx_PeriphCLKConfig>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_UART_MspInit+0x226>
      Error_Handler();
 8001cb2:	f7ff fa23 	bl	80010fc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cb6:	4b50      	ldr	r3, [pc, #320]	@ (8001df8 <HAL_UART_MspInit+0x368>)
 8001cb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cbc:	4a4e      	ldr	r2, [pc, #312]	@ (8001df8 <HAL_UART_MspInit+0x368>)
 8001cbe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cc2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cc6:	4b4c      	ldr	r3, [pc, #304]	@ (8001df8 <HAL_UART_MspInit+0x368>)
 8001cc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ccc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cd4:	4b48      	ldr	r3, [pc, #288]	@ (8001df8 <HAL_UART_MspInit+0x368>)
 8001cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cda:	4a47      	ldr	r2, [pc, #284]	@ (8001df8 <HAL_UART_MspInit+0x368>)
 8001cdc:	f043 0308 	orr.w	r3, r3, #8
 8001ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ce4:	4b44      	ldr	r3, [pc, #272]	@ (8001df8 <HAL_UART_MspInit+0x368>)
 8001ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001cf2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d0c:	2307      	movs	r3, #7
 8001d0e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d12:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001d16:	4619      	mov	r1, r3
 8001d18:	4838      	ldr	r0, [pc, #224]	@ (8001dfc <HAL_UART_MspInit+0x36c>)
 8001d1a:	f004 fc43 	bl	80065a4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001d1e:	4b38      	ldr	r3, [pc, #224]	@ (8001e00 <HAL_UART_MspInit+0x370>)
 8001d20:	4a38      	ldr	r2, [pc, #224]	@ (8001e04 <HAL_UART_MspInit+0x374>)
 8001d22:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001d24:	4b36      	ldr	r3, [pc, #216]	@ (8001e00 <HAL_UART_MspInit+0x370>)
 8001d26:	222d      	movs	r2, #45	@ 0x2d
 8001d28:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d2a:	4b35      	ldr	r3, [pc, #212]	@ (8001e00 <HAL_UART_MspInit+0x370>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d30:	4b33      	ldr	r3, [pc, #204]	@ (8001e00 <HAL_UART_MspInit+0x370>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d36:	4b32      	ldr	r3, [pc, #200]	@ (8001e00 <HAL_UART_MspInit+0x370>)
 8001d38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d3c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d3e:	4b30      	ldr	r3, [pc, #192]	@ (8001e00 <HAL_UART_MspInit+0x370>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d44:	4b2e      	ldr	r3, [pc, #184]	@ (8001e00 <HAL_UART_MspInit+0x370>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001d4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e00 <HAL_UART_MspInit+0x370>)
 8001d4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d50:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001d52:	4b2b      	ldr	r3, [pc, #172]	@ (8001e00 <HAL_UART_MspInit+0x370>)
 8001d54:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001d58:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d5a:	4b29      	ldr	r3, [pc, #164]	@ (8001e00 <HAL_UART_MspInit+0x370>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001d60:	4827      	ldr	r0, [pc, #156]	@ (8001e00 <HAL_UART_MspInit+0x370>)
 8001d62:	f001 fde3 	bl	800392c <HAL_DMA_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <HAL_UART_MspInit+0x2e0>
      Error_Handler();
 8001d6c:	f7ff f9c6 	bl	80010fc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a23      	ldr	r2, [pc, #140]	@ (8001e00 <HAL_UART_MspInit+0x370>)
 8001d74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001d78:	4a21      	ldr	r2, [pc, #132]	@ (8001e00 <HAL_UART_MspInit+0x370>)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001d7e:	4b22      	ldr	r3, [pc, #136]	@ (8001e08 <HAL_UART_MspInit+0x378>)
 8001d80:	4a22      	ldr	r2, [pc, #136]	@ (8001e0c <HAL_UART_MspInit+0x37c>)
 8001d82:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001d84:	4b20      	ldr	r3, [pc, #128]	@ (8001e08 <HAL_UART_MspInit+0x378>)
 8001d86:	222e      	movs	r2, #46	@ 0x2e
 8001d88:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001e08 <HAL_UART_MspInit+0x378>)
 8001d8c:	2240      	movs	r2, #64	@ 0x40
 8001d8e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d90:	4b1d      	ldr	r3, [pc, #116]	@ (8001e08 <HAL_UART_MspInit+0x378>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d96:	4b1c      	ldr	r3, [pc, #112]	@ (8001e08 <HAL_UART_MspInit+0x378>)
 8001d98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d9c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e08 <HAL_UART_MspInit+0x378>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001da4:	4b18      	ldr	r3, [pc, #96]	@ (8001e08 <HAL_UART_MspInit+0x378>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001daa:	4b17      	ldr	r3, [pc, #92]	@ (8001e08 <HAL_UART_MspInit+0x378>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001db0:	4b15      	ldr	r3, [pc, #84]	@ (8001e08 <HAL_UART_MspInit+0x378>)
 8001db2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001db6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001db8:	4b13      	ldr	r3, [pc, #76]	@ (8001e08 <HAL_UART_MspInit+0x378>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001dbe:	4812      	ldr	r0, [pc, #72]	@ (8001e08 <HAL_UART_MspInit+0x378>)
 8001dc0:	f001 fdb4 	bl	800392c <HAL_DMA_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_UART_MspInit+0x33e>
      Error_Handler();
 8001dca:	f7ff f997 	bl	80010fc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001e08 <HAL_UART_MspInit+0x378>)
 8001dd2:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8001e08 <HAL_UART_MspInit+0x378>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2108      	movs	r1, #8
 8001dde:	2027      	movs	r0, #39	@ 0x27
 8001de0:	f001 fd7c 	bl	80038dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001de4:	2027      	movs	r0, #39	@ 0x27
 8001de6:	f001 fd93 	bl	8003910 <HAL_NVIC_EnableIRQ>
}
 8001dea:	bf00      	nop
 8001dec:	37f8      	adds	r7, #248	@ 0xf8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40004800 	.word	0x40004800
 8001df8:	58024400 	.word	0x58024400
 8001dfc:	58020c00 	.word	0x58020c00
 8001e00:	240016ec 	.word	0x240016ec
 8001e04:	40020010 	.word	0x40020010
 8001e08:	24001764 	.word	0x24001764
 8001e0c:	40020028 	.word	0x40020028

08001e10 <fGetJoyPostition>:
  * @param  uiRefMax: Analog value for axis maximum limit.
  * @param  uiRefMin: Analog value for axis minimum limit.
  * @retval Float value with joystick position between -1 and 1.
  */
float fGetJoyPostition(unsigned int uiValue, unsigned int uiRef0, unsigned int uiRefMax, unsigned int uiRefMin)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	603b      	str	r3, [r7, #0]
  return ((int)(uiValue - uiRef0) > 0) ? ((int)(uiValue - uiRef0))/((float)(uiRefMax - uiRef0)) : ((int)(uiValue - uiRef0))/((float)(uiRef0 - uiRefMin));
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	dd10      	ble.n	8001e4a <fGetJoyPostition+0x3a>
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	ee07 3a90 	vmov	s15, r3
 8001e32:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	ee07 3a90 	vmov	s15, r3
 8001e40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e48:	e00f      	b.n	8001e6a <fGetJoyPostition+0x5a>
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	ee07 3a90 	vmov	s15, r3
 8001e54:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	ee07 3a90 	vmov	s15, r3
 8001e62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e66:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 8001e6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <vGetStringFromControlAction>:
  * @param  xControlActionTx: Compressed data with information to CARLA.
  * @param  ucTxMsg: Formated msg to be transmitted.
  * @retval None.
  */
void vGetStringFromControlAction(control_action xControlActionTx, unsigned char * ucTxMsg)
{
 8001e78:	b084      	sub	sp, #16
 8001e7a:	b490      	push	{r4, r7}
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	f107 0408 	add.w	r4, r7, #8
 8001e82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ucTxMsg[0]  = (unsigned char)'#';
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	2223      	movs	r2, #35	@ 0x23
 8001e8a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[1]  = (unsigned char)'S';
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	2253      	movs	r2, #83	@ 0x53
 8001e92:	701a      	strb	r2, [r3, #0]
  ucTxMsg[2]  = xControlActionTx.xSteeringAngle.ucBytes[0];
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	3302      	adds	r3, #2
 8001e98:	7a3a      	ldrb	r2, [r7, #8]
 8001e9a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[3]  = xControlActionTx.xSteeringAngle.ucBytes[1];
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	3303      	adds	r3, #3
 8001ea0:	7a7a      	ldrb	r2, [r7, #9]
 8001ea2:	701a      	strb	r2, [r3, #0]
  ucTxMsg[4]  = xControlActionTx.xSteeringAngle.ucBytes[2];
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	7aba      	ldrb	r2, [r7, #10]
 8001eaa:	701a      	strb	r2, [r3, #0]
  ucTxMsg[5]  = xControlActionTx.xSteeringAngle.ucBytes[3];
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	3305      	adds	r3, #5
 8001eb0:	7afa      	ldrb	r2, [r7, #11]
 8001eb2:	701a      	strb	r2, [r3, #0]
  ucTxMsg[6]  = (unsigned char)'W';
 8001eb4:	6a3b      	ldr	r3, [r7, #32]
 8001eb6:	3306      	adds	r3, #6
 8001eb8:	2257      	movs	r2, #87	@ 0x57
 8001eba:	701a      	strb	r2, [r3, #0]
  ucTxMsg[7]  = xControlActionTx.xSteeringVelocity.ucBytes[0];
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	3307      	adds	r3, #7
 8001ec0:	7b3a      	ldrb	r2, [r7, #12]
 8001ec2:	701a      	strb	r2, [r3, #0]
  ucTxMsg[8]  = xControlActionTx.xSteeringVelocity.ucBytes[1];
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	3308      	adds	r3, #8
 8001ec8:	7b7a      	ldrb	r2, [r7, #13]
 8001eca:	701a      	strb	r2, [r3, #0]
  ucTxMsg[9]  = xControlActionTx.xSteeringVelocity.ucBytes[2];
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
 8001ece:	3309      	adds	r3, #9
 8001ed0:	7bba      	ldrb	r2, [r7, #14]
 8001ed2:	701a      	strb	r2, [r3, #0]
  ucTxMsg[10] = xControlActionTx.xSteeringVelocity.ucBytes[3];
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	330a      	adds	r3, #10
 8001ed8:	7bfa      	ldrb	r2, [r7, #15]
 8001eda:	701a      	strb	r2, [r3, #0]
  ucTxMsg[11] = (unsigned char)'V';
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	330b      	adds	r3, #11
 8001ee0:	2256      	movs	r2, #86	@ 0x56
 8001ee2:	701a      	strb	r2, [r3, #0]
  ucTxMsg[12] = xControlActionTx.xSpeed.ucBytes[0];
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	330c      	adds	r3, #12
 8001ee8:	7c3a      	ldrb	r2, [r7, #16]
 8001eea:	701a      	strb	r2, [r3, #0]
  ucTxMsg[13] = xControlActionTx.xSpeed.ucBytes[1];
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	330d      	adds	r3, #13
 8001ef0:	7c7a      	ldrb	r2, [r7, #17]
 8001ef2:	701a      	strb	r2, [r3, #0]
  ucTxMsg[14] = xControlActionTx.xSpeed.ucBytes[2];
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	330e      	adds	r3, #14
 8001ef8:	7cba      	ldrb	r2, [r7, #18]
 8001efa:	701a      	strb	r2, [r3, #0]
  ucTxMsg[15] = xControlActionTx.xSpeed.ucBytes[3];
 8001efc:	6a3b      	ldr	r3, [r7, #32]
 8001efe:	330f      	adds	r3, #15
 8001f00:	7cfa      	ldrb	r2, [r7, #19]
 8001f02:	701a      	strb	r2, [r3, #0]
  ucTxMsg[16] = (unsigned char)'A';
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	3310      	adds	r3, #16
 8001f08:	2241      	movs	r2, #65	@ 0x41
 8001f0a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[17] = xControlActionTx.xAcceleration.ucBytes[0];
 8001f0c:	6a3b      	ldr	r3, [r7, #32]
 8001f0e:	3311      	adds	r3, #17
 8001f10:	7d3a      	ldrb	r2, [r7, #20]
 8001f12:	701a      	strb	r2, [r3, #0]
  ucTxMsg[18] = xControlActionTx.xAcceleration.ucBytes[1];
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	3312      	adds	r3, #18
 8001f18:	7d7a      	ldrb	r2, [r7, #21]
 8001f1a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[19] = xControlActionTx.xAcceleration.ucBytes[2];
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	3313      	adds	r3, #19
 8001f20:	7dba      	ldrb	r2, [r7, #22]
 8001f22:	701a      	strb	r2, [r3, #0]
  ucTxMsg[20] = xControlActionTx.xAcceleration.ucBytes[3];
 8001f24:	6a3b      	ldr	r3, [r7, #32]
 8001f26:	3314      	adds	r3, #20
 8001f28:	7dfa      	ldrb	r2, [r7, #23]
 8001f2a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[21] = (unsigned char)'J';
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	3315      	adds	r3, #21
 8001f30:	224a      	movs	r2, #74	@ 0x4a
 8001f32:	701a      	strb	r2, [r3, #0]
  ucTxMsg[22] = xControlActionTx.xJerk.ucBytes[0];
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	3316      	adds	r3, #22
 8001f38:	7e3a      	ldrb	r2, [r7, #24]
 8001f3a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[23] = xControlActionTx.xJerk.ucBytes[1];
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
 8001f3e:	3317      	adds	r3, #23
 8001f40:	7e7a      	ldrb	r2, [r7, #25]
 8001f42:	701a      	strb	r2, [r3, #0]
  ucTxMsg[24] = xControlActionTx.xJerk.ucBytes[2];
 8001f44:	6a3b      	ldr	r3, [r7, #32]
 8001f46:	3318      	adds	r3, #24
 8001f48:	7eba      	ldrb	r2, [r7, #26]
 8001f4a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[25] = xControlActionTx.xJerk.ucBytes[3];
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	3319      	adds	r3, #25
 8001f50:	7efa      	ldrb	r2, [r7, #27]
 8001f52:	701a      	strb	r2, [r3, #0]
  ucTxMsg[26] = (unsigned char)'M';
 8001f54:	6a3b      	ldr	r3, [r7, #32]
 8001f56:	331a      	adds	r3, #26
 8001f58:	224d      	movs	r2, #77	@ 0x4d
 8001f5a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[27] = xControlActionTx.ucControlMode;
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
 8001f5e:	331b      	adds	r3, #27
 8001f60:	7f3a      	ldrb	r2, [r7, #28]
 8001f62:	701a      	strb	r2, [r3, #0]
  ucTxMsg[28] = (unsigned char)'$';
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	331c      	adds	r3, #28
 8001f68:	2224      	movs	r2, #36	@ 0x24
 8001f6a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[29] = (unsigned char)'\0';
 8001f6c:	6a3b      	ldr	r3, [r7, #32]
 8001f6e:	331d      	adds	r3, #29
 8001f70:	2200      	movs	r2, #0
 8001f72:	701a      	strb	r2, [r3, #0]
  
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc90      	pop	{r4, r7}
 8001f7a:	b004      	add	sp, #16
 8001f7c:	4770      	bx	lr
	...

08001f80 <vDrivingModeLights>:
  * @brief  Update driving mode signaling lights
  * @param  ucDrivingMode:  Driving mode
  * @retval None
  */
void vDrivingModeLights(unsigned char ucDrivingMode)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
  switch (ucDrivingMode)
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d016      	beq.n	8001fbe <vDrivingModeLights+0x3e>
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	dc36      	bgt.n	8002002 <vDrivingModeLights+0x82>
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d023      	beq.n	8001fe0 <vDrivingModeLights+0x60>
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d132      	bne.n	8002002 <vDrivingModeLights+0x82>
  {
    case AUTOWARE:
      HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, 0); // Green LED
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	481a      	ldr	r0, [pc, #104]	@ (800200c <vDrivingModeLights+0x8c>)
 8001fa2:	f004 fcaf 	bl	8006904 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 1); // Ambar LED
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	2102      	movs	r1, #2
 8001faa:	4819      	ldr	r0, [pc, #100]	@ (8002010 <vDrivingModeLights+0x90>)
 8001fac:	f004 fcaa 	bl	8006904 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 0); // Red LED
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001fb6:	4815      	ldr	r0, [pc, #84]	@ (800200c <vDrivingModeLights+0x8c>)
 8001fb8:	f004 fca4 	bl	8006904 <HAL_GPIO_WritePin>
      break;
 8001fbc:	e022      	b.n	8002004 <vDrivingModeLights+0x84>

    case MANUAL:
      HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, 1); // Green LED
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	4812      	ldr	r0, [pc, #72]	@ (800200c <vDrivingModeLights+0x8c>)
 8001fc4:	f004 fc9e 	bl	8006904 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0); // Ambar LED
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2102      	movs	r1, #2
 8001fcc:	4810      	ldr	r0, [pc, #64]	@ (8002010 <vDrivingModeLights+0x90>)
 8001fce:	f004 fc99 	bl	8006904 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 0); // Red LED
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001fd8:	480c      	ldr	r0, [pc, #48]	@ (800200c <vDrivingModeLights+0x8c>)
 8001fda:	f004 fc93 	bl	8006904 <HAL_GPIO_WritePin>
      break;
 8001fde:	e011      	b.n	8002004 <vDrivingModeLights+0x84>

    case EMERGENCY:
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0); // Green LED
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2102      	movs	r1, #2
 8001fe4:	480a      	ldr	r0, [pc, #40]	@ (8002010 <vDrivingModeLights+0x90>)
 8001fe6:	f004 fc8d 	bl	8006904 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, 0); // Ambar LED
 8001fea:	2200      	movs	r2, #0
 8001fec:	2101      	movs	r1, #1
 8001fee:	4807      	ldr	r0, [pc, #28]	@ (800200c <vDrivingModeLights+0x8c>)
 8001ff0:	f004 fc88 	bl	8006904 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 1); // Red LED
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ffa:	4804      	ldr	r0, [pc, #16]	@ (800200c <vDrivingModeLights+0x8c>)
 8001ffc:	f004 fc82 	bl	8006904 <HAL_GPIO_WritePin>
      break;
 8002000:	e000      	b.n	8002004 <vDrivingModeLights+0x84>

    default:
      break;
 8002002:	bf00      	nop
  }

}
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	58020400 	.word	0x58020400
 8002010:	58021000 	.word	0x58021000

08002014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002014:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800204c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002018:	f7ff fa28 	bl	800146c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800201c:	480c      	ldr	r0, [pc, #48]	@ (8002050 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800201e:	490d      	ldr	r1, [pc, #52]	@ (8002054 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002020:	4a0d      	ldr	r2, [pc, #52]	@ (8002058 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002024:	e002      	b.n	800202c <LoopCopyDataInit>

08002026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800202a:	3304      	adds	r3, #4

0800202c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800202c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800202e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002030:	d3f9      	bcc.n	8002026 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002032:	4a0a      	ldr	r2, [pc, #40]	@ (800205c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002034:	4c0a      	ldr	r4, [pc, #40]	@ (8002060 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002038:	e001      	b.n	800203e <LoopFillZerobss>

0800203a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800203a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800203c:	3204      	adds	r2, #4

0800203e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800203e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002040:	d3fb      	bcc.n	800203a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002042:	f011 fdf5 	bl	8013c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002046:	f7fe fdcf 	bl	8000be8 <main>
  bx  lr
 800204a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800204c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002050:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002054:	24001308 	.word	0x24001308
  ldr r2, =_sidata
 8002058:	08015d38 	.word	0x08015d38
  ldr r2, =_sbss
 800205c:	24001308 	.word	0x24001308
  ldr r4, =_ebss
 8002060:	24033454 	.word	0x24033454

08002064 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002064:	e7fe      	b.n	8002064 <ADC3_IRQHandler>
	...

08002068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800206e:	2003      	movs	r0, #3
 8002070:	f001 fc29 	bl	80038c6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002074:	f005 fac4 	bl	8007600 <HAL_RCC_GetSysClockFreq>
 8002078:	4602      	mov	r2, r0
 800207a:	4b15      	ldr	r3, [pc, #84]	@ (80020d0 <HAL_Init+0x68>)
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	0a1b      	lsrs	r3, r3, #8
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	4913      	ldr	r1, [pc, #76]	@ (80020d4 <HAL_Init+0x6c>)
 8002086:	5ccb      	ldrb	r3, [r1, r3]
 8002088:	f003 031f 	and.w	r3, r3, #31
 800208c:	fa22 f303 	lsr.w	r3, r2, r3
 8002090:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002092:	4b0f      	ldr	r3, [pc, #60]	@ (80020d0 <HAL_Init+0x68>)
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	4a0e      	ldr	r2, [pc, #56]	@ (80020d4 <HAL_Init+0x6c>)
 800209c:	5cd3      	ldrb	r3, [r2, r3]
 800209e:	f003 031f 	and.w	r3, r3, #31
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
 80020a8:	4a0b      	ldr	r2, [pc, #44]	@ (80020d8 <HAL_Init+0x70>)
 80020aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020ac:	4a0b      	ldr	r2, [pc, #44]	@ (80020dc <HAL_Init+0x74>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020b2:	200f      	movs	r0, #15
 80020b4:	f7ff f846 	bl	8001144 <HAL_InitTick>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e002      	b.n	80020c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80020c2:	f7ff f821 	bl	8001108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	58024400 	.word	0x58024400
 80020d4:	0801405c 	.word	0x0801405c
 80020d8:	24000004 	.word	0x24000004
 80020dc:	24000000 	.word	0x24000000

080020e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020e4:	4b06      	ldr	r3, [pc, #24]	@ (8002100 <HAL_IncTick+0x20>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b06      	ldr	r3, [pc, #24]	@ (8002104 <HAL_IncTick+0x24>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4413      	add	r3, r2
 80020f0:	4a04      	ldr	r2, [pc, #16]	@ (8002104 <HAL_IncTick+0x24>)
 80020f2:	6013      	str	r3, [r2, #0]
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	2400000c 	.word	0x2400000c
 8002104:	240017dc 	.word	0x240017dc

08002108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return uwTick;
 800210c:	4b03      	ldr	r3, [pc, #12]	@ (800211c <HAL_GetTick+0x14>)
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	240017dc 	.word	0x240017dc

08002120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002128:	f7ff ffee 	bl	8002108 <HAL_GetTick>
 800212c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002138:	d005      	beq.n	8002146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800213a:	4b0a      	ldr	r3, [pc, #40]	@ (8002164 <HAL_Delay+0x44>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002146:	bf00      	nop
 8002148:	f7ff ffde 	bl	8002108 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	429a      	cmp	r2, r3
 8002156:	d8f7      	bhi.n	8002148 <HAL_Delay+0x28>
  {
  }
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	2400000c 	.word	0x2400000c

08002168 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800216c:	4b03      	ldr	r3, [pc, #12]	@ (800217c <HAL_GetREVID+0x14>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	0c1b      	lsrs	r3, r3, #16
}
 8002172:	4618      	mov	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	5c001000 	.word	0x5c001000

08002180 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	609a      	str	r2, [r3, #8]
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	609a      	str	r2, [r3, #8]
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	3360      	adds	r3, #96	@ 0x60
 80021fa:	461a      	mov	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	430b      	orrs	r3, r1
 8002216:	431a      	orrs	r2, r3
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800221c:	bf00      	nop
 800221e:	371c      	adds	r7, #28
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	fa01 f303 	lsl.w	r3, r1, r3
 8002248:	431a      	orrs	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	611a      	str	r2, [r3, #16]
}
 800224e:	bf00      	nop
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800225a:	b480      	push	{r7}
 800225c:	b087      	sub	sp, #28
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3360      	adds	r3, #96	@ 0x60
 800226a:	461a      	mov	r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	431a      	orrs	r2, r3
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	601a      	str	r2, [r3, #0]
  }
}
 8002284:	bf00      	nop
 8002286:	371c      	adds	r7, #28
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80022a4:	2301      	movs	r3, #1
 80022a6:	e000      	b.n	80022aa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b087      	sub	sp, #28
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	60f8      	str	r0, [r7, #12]
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	3330      	adds	r3, #48	@ 0x30
 80022c6:	461a      	mov	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	0a1b      	lsrs	r3, r3, #8
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	4413      	add	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	f003 031f 	and.w	r3, r3, #31
 80022e0:	211f      	movs	r1, #31
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	401a      	ands	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	0e9b      	lsrs	r3, r3, #26
 80022ee:	f003 011f 	and.w	r1, r3, #31
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f003 031f 	and.w	r3, r3, #31
 80022f8:	fa01 f303 	lsl.w	r3, r1, r3
 80022fc:	431a      	orrs	r2, r3
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002302:	bf00      	nop
 8002304:	371c      	adds	r7, #28
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f023 0203 	bic.w	r2, r3, #3
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	60da      	str	r2, [r3, #12]
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002334:	b480      	push	{r7}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3314      	adds	r3, #20
 8002344:	461a      	mov	r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	0e5b      	lsrs	r3, r3, #25
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	4413      	add	r3, r2
 8002352:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	0d1b      	lsrs	r3, r3, #20
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	2107      	movs	r1, #7
 8002362:	fa01 f303 	lsl.w	r3, r1, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	401a      	ands	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	0d1b      	lsrs	r3, r3, #20
 800236e:	f003 031f 	and.w	r3, r3, #31
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	fa01 f303 	lsl.w	r3, r1, r3
 8002378:	431a      	orrs	r2, r3
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800237e:	bf00      	nop
 8002380:	371c      	adds	r7, #28
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023a4:	43db      	mvns	r3, r3
 80023a6:	401a      	ands	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f003 0318 	and.w	r3, r3, #24
 80023ae:	4908      	ldr	r1, [pc, #32]	@ (80023d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80023b0:	40d9      	lsrs	r1, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	400b      	ands	r3, r1
 80023b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023ba:	431a      	orrs	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80023c2:	bf00      	nop
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	000fffff 	.word	0x000fffff

080023d4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 031f 	and.w	r3, r3, #31
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	4b04      	ldr	r3, [pc, #16]	@ (8002410 <LL_ADC_DisableDeepPowerDown+0x20>)
 80023fe:	4013      	ands	r3, r2
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6093      	str	r3, [r2, #8]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	5fffffc0 	.word	0x5fffffc0

08002414 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002424:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002428:	d101      	bne.n	800242e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <LL_ADC_EnableInternalRegulator+0x24>)
 800244a:	4013      	ands	r3, r2
 800244c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	6fffffc0 	.word	0x6fffffc0

08002464 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002474:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002478:	d101      	bne.n	800247e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	4b05      	ldr	r3, [pc, #20]	@ (80024b0 <LL_ADC_Enable+0x24>)
 800249a:	4013      	ands	r3, r2
 800249c:	f043 0201 	orr.w	r2, r3, #1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	7fffffc0 	.word	0x7fffffc0

080024b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <LL_ADC_IsEnabled+0x18>
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <LL_ADC_IsEnabled+0x1a>
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	4b05      	ldr	r3, [pc, #20]	@ (8002500 <LL_ADC_REG_StartConversion+0x24>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	f043 0204 	orr.w	r2, r3, #4
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	7fffffc0 	.word	0x7fffffc0

08002504 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b04      	cmp	r3, #4
 8002516:	d101      	bne.n	800251c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002518:	2301      	movs	r3, #1
 800251a:	e000      	b.n	800251e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b08      	cmp	r3, #8
 800253c:	d101      	bne.n	8002542 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002550:	b590      	push	{r4, r7, lr}
 8002552:	b089      	sub	sp, #36	@ 0x24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800255c:	2300      	movs	r3, #0
 800255e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e18f      	b.n	800288a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002574:	2b00      	cmp	r3, #0
 8002576:	d109      	bne.n	800258c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7fe f8c5 	bl	8000708 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff ff3f 	bl	8002414 <LL_ADC_IsDeepPowerDownEnabled>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d004      	beq.n	80025a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ff25 	bl	80023f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff ff5a 	bl	8002464 <LL_ADC_IsInternalRegulatorEnabled>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d114      	bne.n	80025e0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff ff3e 	bl	800243c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025c0:	4b87      	ldr	r3, [pc, #540]	@ (80027e0 <HAL_ADC_Init+0x290>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	099b      	lsrs	r3, r3, #6
 80025c6:	4a87      	ldr	r2, [pc, #540]	@ (80027e4 <HAL_ADC_Init+0x294>)
 80025c8:	fba2 2303 	umull	r2, r3, r2, r3
 80025cc:	099b      	lsrs	r3, r3, #6
 80025ce:	3301      	adds	r3, #1
 80025d0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025d2:	e002      	b.n	80025da <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f9      	bne.n	80025d4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff3d 	bl	8002464 <LL_ADC_IsInternalRegulatorEnabled>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10d      	bne.n	800260c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f4:	f043 0210 	orr.w	r2, r3, #16
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002600:	f043 0201 	orr.w	r2, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff ff77 	bl	8002504 <LL_ADC_REG_IsConversionOngoing>
 8002616:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b00      	cmp	r3, #0
 8002622:	f040 8129 	bne.w	8002878 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	2b00      	cmp	r3, #0
 800262a:	f040 8125 	bne.w	8002878 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002632:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002636:	f043 0202 	orr.w	r2, r3, #2
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff ff36 	bl	80024b4 <LL_ADC_IsEnabled>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d136      	bne.n	80026bc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a65      	ldr	r2, [pc, #404]	@ (80027e8 <HAL_ADC_Init+0x298>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d004      	beq.n	8002662 <HAL_ADC_Init+0x112>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a63      	ldr	r2, [pc, #396]	@ (80027ec <HAL_ADC_Init+0x29c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d10e      	bne.n	8002680 <HAL_ADC_Init+0x130>
 8002662:	4861      	ldr	r0, [pc, #388]	@ (80027e8 <HAL_ADC_Init+0x298>)
 8002664:	f7ff ff26 	bl	80024b4 <LL_ADC_IsEnabled>
 8002668:	4604      	mov	r4, r0
 800266a:	4860      	ldr	r0, [pc, #384]	@ (80027ec <HAL_ADC_Init+0x29c>)
 800266c:	f7ff ff22 	bl	80024b4 <LL_ADC_IsEnabled>
 8002670:	4603      	mov	r3, r0
 8002672:	4323      	orrs	r3, r4
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf0c      	ite	eq
 8002678:	2301      	moveq	r3, #1
 800267a:	2300      	movne	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	e008      	b.n	8002692 <HAL_ADC_Init+0x142>
 8002680:	485b      	ldr	r0, [pc, #364]	@ (80027f0 <HAL_ADC_Init+0x2a0>)
 8002682:	f7ff ff17 	bl	80024b4 <LL_ADC_IsEnabled>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	bf0c      	ite	eq
 800268c:	2301      	moveq	r3, #1
 800268e:	2300      	movne	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d012      	beq.n	80026bc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a53      	ldr	r2, [pc, #332]	@ (80027e8 <HAL_ADC_Init+0x298>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d004      	beq.n	80026aa <HAL_ADC_Init+0x15a>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a51      	ldr	r2, [pc, #324]	@ (80027ec <HAL_ADC_Init+0x29c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d101      	bne.n	80026ae <HAL_ADC_Init+0x15e>
 80026aa:	4a52      	ldr	r2, [pc, #328]	@ (80027f4 <HAL_ADC_Init+0x2a4>)
 80026ac:	e000      	b.n	80026b0 <HAL_ADC_Init+0x160>
 80026ae:	4a52      	ldr	r2, [pc, #328]	@ (80027f8 <HAL_ADC_Init+0x2a8>)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4619      	mov	r1, r3
 80026b6:	4610      	mov	r0, r2
 80026b8:	f7ff fd62 	bl	8002180 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80026bc:	f7ff fd54 	bl	8002168 <HAL_GetREVID>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d914      	bls.n	80026f4 <HAL_ADC_Init+0x1a4>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b10      	cmp	r3, #16
 80026d0:	d110      	bne.n	80026f4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	7d5b      	ldrb	r3, [r3, #21]
 80026d6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026dc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80026e2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	7f1b      	ldrb	r3, [r3, #28]
 80026e8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80026ea:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026ec:	f043 030c 	orr.w	r3, r3, #12
 80026f0:	61bb      	str	r3, [r7, #24]
 80026f2:	e00d      	b.n	8002710 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	7d5b      	ldrb	r3, [r3, #21]
 80026f8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026fe:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002704:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	7f1b      	ldrb	r3, [r3, #28]
 800270a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	7f1b      	ldrb	r3, [r3, #28]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d106      	bne.n	8002726 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	3b01      	subs	r3, #1
 800271e:	045b      	lsls	r3, r3, #17
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002732:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	4b2c      	ldr	r3, [pc, #176]	@ (80027fc <HAL_ADC_Init+0x2ac>)
 800274a:	4013      	ands	r3, r2
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6812      	ldr	r2, [r2, #0]
 8002750:	69b9      	ldr	r1, [r7, #24]
 8002752:	430b      	orrs	r3, r1
 8002754:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fed2 	bl	8002504 <LL_ADC_REG_IsConversionOngoing>
 8002760:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fedf 	bl	800252a <LL_ADC_INJ_IsConversionOngoing>
 800276c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d15f      	bne.n	8002834 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d15c      	bne.n	8002834 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	7d1b      	ldrb	r3, [r3, #20]
 800277e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	4b1c      	ldr	r3, [pc, #112]	@ (8002800 <HAL_ADC_Init+0x2b0>)
 8002790:	4013      	ands	r3, r2
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6812      	ldr	r2, [r2, #0]
 8002796:	69b9      	ldr	r1, [r7, #24]
 8002798:	430b      	orrs	r3, r1
 800279a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d130      	bne.n	8002808 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027aa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691a      	ldr	r2, [r3, #16]
 80027b2:	4b14      	ldr	r3, [pc, #80]	@ (8002804 <HAL_ADC_Init+0x2b4>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80027ba:	3a01      	subs	r2, #1
 80027bc:	0411      	lsls	r1, r2, #16
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80027c2:	4311      	orrs	r1, r2
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80027c8:	4311      	orrs	r1, r2
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80027ce:	430a      	orrs	r2, r1
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0201 	orr.w	r2, r2, #1
 80027da:	611a      	str	r2, [r3, #16]
 80027dc:	e01c      	b.n	8002818 <HAL_ADC_Init+0x2c8>
 80027de:	bf00      	nop
 80027e0:	24000000 	.word	0x24000000
 80027e4:	053e2d63 	.word	0x053e2d63
 80027e8:	40022000 	.word	0x40022000
 80027ec:	40022100 	.word	0x40022100
 80027f0:	58026000 	.word	0x58026000
 80027f4:	40022300 	.word	0x40022300
 80027f8:	58026300 	.word	0x58026300
 80027fc:	fff0c003 	.word	0xfff0c003
 8002800:	ffffbffc 	.word	0xffffbffc
 8002804:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691a      	ldr	r2, [r3, #16]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0201 	bic.w	r2, r2, #1
 8002816:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 fd8c 	bl	800334c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d10c      	bne.n	8002856 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002842:	f023 010f 	bic.w	r1, r3, #15
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	1e5a      	subs	r2, r3, #1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	631a      	str	r2, [r3, #48]	@ 0x30
 8002854:	e007      	b.n	8002866 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 020f 	bic.w	r2, r2, #15
 8002864:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286a:	f023 0303 	bic.w	r3, r3, #3
 800286e:	f043 0201 	orr.w	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	655a      	str	r2, [r3, #84]	@ 0x54
 8002876:	e007      	b.n	8002888 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287c:	f043 0210 	orr.w	r2, r3, #16
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002888:	7ffb      	ldrb	r3, [r7, #31]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3724      	adds	r7, #36	@ 0x24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd90      	pop	{r4, r7, pc}
 8002892:	bf00      	nop

08002894 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a55      	ldr	r2, [pc, #340]	@ (80029fc <HAL_ADC_Start_DMA+0x168>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d004      	beq.n	80028b4 <HAL_ADC_Start_DMA+0x20>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a54      	ldr	r2, [pc, #336]	@ (8002a00 <HAL_ADC_Start_DMA+0x16c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d101      	bne.n	80028b8 <HAL_ADC_Start_DMA+0x24>
 80028b4:	4b53      	ldr	r3, [pc, #332]	@ (8002a04 <HAL_ADC_Start_DMA+0x170>)
 80028b6:	e000      	b.n	80028ba <HAL_ADC_Start_DMA+0x26>
 80028b8:	4b53      	ldr	r3, [pc, #332]	@ (8002a08 <HAL_ADC_Start_DMA+0x174>)
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff fd8a 	bl	80023d4 <LL_ADC_GetMultimode>
 80028c0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff fe1c 	bl	8002504 <LL_ADC_REG_IsConversionOngoing>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f040 808c 	bne.w	80029ec <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d101      	bne.n	80028e2 <HAL_ADC_Start_DMA+0x4e>
 80028de:	2302      	movs	r3, #2
 80028e0:	e087      	b.n	80029f2 <HAL_ADC_Start_DMA+0x15e>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	2b05      	cmp	r3, #5
 80028f4:	d002      	beq.n	80028fc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	2b09      	cmp	r3, #9
 80028fa:	d170      	bne.n	80029de <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 fc07 	bl	8003110 <ADC_Enable>
 8002902:	4603      	mov	r3, r0
 8002904:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002906:	7dfb      	ldrb	r3, [r7, #23]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d163      	bne.n	80029d4 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002910:	4b3e      	ldr	r3, [pc, #248]	@ (8002a0c <HAL_ADC_Start_DMA+0x178>)
 8002912:	4013      	ands	r3, r2
 8002914:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a37      	ldr	r2, [pc, #220]	@ (8002a00 <HAL_ADC_Start_DMA+0x16c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d002      	beq.n	800292c <HAL_ADC_Start_DMA+0x98>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	e000      	b.n	800292e <HAL_ADC_Start_DMA+0x9a>
 800292c:	4b33      	ldr	r3, [pc, #204]	@ (80029fc <HAL_ADC_Start_DMA+0x168>)
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	6812      	ldr	r2, [r2, #0]
 8002932:	4293      	cmp	r3, r2
 8002934:	d002      	beq.n	800293c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d105      	bne.n	8002948 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002940:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800294c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d006      	beq.n	8002962 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002958:	f023 0206 	bic.w	r2, r3, #6
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002960:	e002      	b.n	8002968 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800296c:	4a28      	ldr	r2, [pc, #160]	@ (8002a10 <HAL_ADC_Start_DMA+0x17c>)
 800296e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002974:	4a27      	ldr	r2, [pc, #156]	@ (8002a14 <HAL_ADC_Start_DMA+0x180>)
 8002976:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800297c:	4a26      	ldr	r2, [pc, #152]	@ (8002a18 <HAL_ADC_Start_DMA+0x184>)
 800297e:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	221c      	movs	r2, #28
 8002986:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0210 	orr.w	r2, r2, #16
 800299e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a8:	4619      	mov	r1, r3
 80029aa:	4610      	mov	r0, r2
 80029ac:	f7ff fcaf 	bl	800230e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	3340      	adds	r3, #64	@ 0x40
 80029ba:	4619      	mov	r1, r3
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f001 fb10 	bl	8003fe4 <HAL_DMA_Start_IT>
 80029c4:	4603      	mov	r3, r0
 80029c6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fd85 	bl	80024dc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80029d2:	e00d      	b.n	80029f0 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80029dc:	e008      	b.n	80029f0 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80029ea:	e001      	b.n	80029f0 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029ec:	2302      	movs	r3, #2
 80029ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80029f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40022000 	.word	0x40022000
 8002a00:	40022100 	.word	0x40022100
 8002a04:	40022300 	.word	0x40022300
 8002a08:	58026300 	.word	0x58026300
 8002a0c:	fffff0fe 	.word	0xfffff0fe
 8002a10:	08003225 	.word	0x08003225
 8002a14:	080032fd 	.word	0x080032fd
 8002a18:	08003319 	.word	0x08003319

08002a1c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a58:	b590      	push	{r4, r7, lr}
 8002a5a:	b0a1      	sub	sp, #132	@ 0x84
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	4a65      	ldr	r2, [pc, #404]	@ (8002c08 <HAL_ADC_ConfigChannel+0x1b0>)
 8002a72:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x2a>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e32e      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x688>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff fd38 	bl	8002504 <LL_ADC_REG_IsConversionOngoing>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f040 8313 	bne.w	80030c2 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	db2c      	blt.n	8002afe <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d108      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x6a>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	0e9b      	lsrs	r3, r3, #26
 8002ab6:	f003 031f 	and.w	r3, r3, #31
 8002aba:	2201      	movs	r2, #1
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	e016      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x98>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ad0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ad2:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ad4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002ada:	2320      	movs	r3, #32
 8002adc:	e003      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002ade:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ae0:	fab3 f383 	clz	r3, r3
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	f003 031f 	and.w	r3, r3, #31
 8002aea:	2201      	movs	r2, #1
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	69d1      	ldr	r1, [r2, #28]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	430b      	orrs	r3, r1
 8002afc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	6859      	ldr	r1, [r3, #4]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f7ff fbd3 	bl	80022b6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fcf5 	bl	8002504 <LL_ADC_REG_IsConversionOngoing>
 8002b1a:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fd02 	bl	800252a <LL_ADC_INJ_IsConversionOngoing>
 8002b26:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f040 80b8 	bne.w	8002ca0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f040 80b4 	bne.w	8002ca0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	6819      	ldr	r1, [r3, #0]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	461a      	mov	r2, r3
 8002b46:	f7ff fbf5 	bl	8002334 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b4a:	4b30      	ldr	r3, [pc, #192]	@ (8002c0c <HAL_ADC_ConfigChannel+0x1b4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002b52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b56:	d10b      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x118>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	695a      	ldr	r2, [r3, #20]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	089b      	lsrs	r3, r3, #2
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	e01d      	b.n	8002bac <HAL_ADC_ConfigChannel+0x154>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f003 0310 	and.w	r3, r3, #16
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10b      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x13e>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	695a      	ldr	r2, [r3, #20]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	089b      	lsrs	r3, r3, #2
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	e00a      	b.n	8002bac <HAL_ADC_ConfigChannel+0x154>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	695a      	ldr	r2, [r3, #20]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	089b      	lsrs	r3, r3, #2
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d02c      	beq.n	8002c10 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	6919      	ldr	r1, [r3, #16]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bc4:	f7ff fb10 	bl	80021e8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6818      	ldr	r0, [r3, #0]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	6919      	ldr	r1, [r3, #16]
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	7e5b      	ldrb	r3, [r3, #25]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d102      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x186>
 8002bd8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002bdc:	e000      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x188>
 8002bde:	2300      	movs	r3, #0
 8002be0:	461a      	mov	r2, r3
 8002be2:	f7ff fb3a 	bl	800225a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	6919      	ldr	r1, [r3, #16]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	7e1b      	ldrb	r3, [r3, #24]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d102      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x1a4>
 8002bf6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002bfa:	e000      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x1a6>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	461a      	mov	r2, r3
 8002c00:	f7ff fb12 	bl	8002228 <LL_ADC_SetDataRightShift>
 8002c04:	e04c      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x248>
 8002c06:	bf00      	nop
 8002c08:	47ff0000 	.word	0x47ff0000
 8002c0c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	069b      	lsls	r3, r3, #26
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d107      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c32:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	069b      	lsls	r3, r3, #26
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d107      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c56:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	069b      	lsls	r3, r3, #26
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d107      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c7a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	069b      	lsls	r3, r3, #26
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d107      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c9e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff fc05 	bl	80024b4 <LL_ADC_IsEnabled>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f040 8211 	bne.w	80030d4 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	6819      	ldr	r1, [r3, #0]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	f7ff fb64 	bl	800238c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	4aa1      	ldr	r2, [pc, #644]	@ (8002f50 <HAL_ADC_ConfigChannel+0x4f8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	f040 812e 	bne.w	8002f2c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10b      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x2a0>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	0e9b      	lsrs	r3, r3, #26
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	2b09      	cmp	r3, #9
 8002cee:	bf94      	ite	ls
 8002cf0:	2301      	movls	r3, #1
 8002cf2:	2300      	movhi	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	e019      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x2d4>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d00:	fa93 f3a3 	rbit	r3, r3
 8002d04:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d08:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002d0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002d10:	2320      	movs	r3, #32
 8002d12:	e003      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002d14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d16:	fab3 f383 	clz	r3, r3
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	f003 031f 	and.w	r3, r3, #31
 8002d22:	2b09      	cmp	r3, #9
 8002d24:	bf94      	ite	ls
 8002d26:	2301      	movls	r3, #1
 8002d28:	2300      	movhi	r3, #0
 8002d2a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d079      	beq.n	8002e24 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d107      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x2f4>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	0e9b      	lsrs	r3, r3, #26
 8002d42:	3301      	adds	r3, #1
 8002d44:	069b      	lsls	r3, r3, #26
 8002d46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d4a:	e015      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x320>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d54:	fa93 f3a3 	rbit	r3, r3
 8002d58:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002d5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d5c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002d5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002d64:	2320      	movs	r3, #32
 8002d66:	e003      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002d68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d6a:	fab3 f383 	clz	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	3301      	adds	r3, #1
 8002d72:	069b      	lsls	r3, r3, #26
 8002d74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d109      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x340>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	0e9b      	lsrs	r3, r3, #26
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	f003 031f 	and.w	r3, r3, #31
 8002d90:	2101      	movs	r1, #1
 8002d92:	fa01 f303 	lsl.w	r3, r1, r3
 8002d96:	e017      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x370>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002da0:	fa93 f3a3 	rbit	r3, r3
 8002da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002da6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002da8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002daa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002db0:	2320      	movs	r3, #32
 8002db2:	e003      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002db4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002db6:	fab3 f383 	clz	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	f003 031f 	and.w	r3, r3, #31
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc8:	ea42 0103 	orr.w	r1, r2, r3
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10a      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x396>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	0e9b      	lsrs	r3, r3, #26
 8002dde:	3301      	adds	r3, #1
 8002de0:	f003 021f 	and.w	r2, r3, #31
 8002de4:	4613      	mov	r3, r2
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	4413      	add	r3, r2
 8002dea:	051b      	lsls	r3, r3, #20
 8002dec:	e018      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x3c8>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002df6:	fa93 f3a3 	rbit	r3, r3
 8002dfa:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002e06:	2320      	movs	r3, #32
 8002e08:	e003      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8002e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e0c:	fab3 f383 	clz	r3, r3
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	3301      	adds	r3, #1
 8002e14:	f003 021f 	and.w	r2, r3, #31
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e20:	430b      	orrs	r3, r1
 8002e22:	e07e      	b.n	8002f22 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d107      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x3e8>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	0e9b      	lsrs	r3, r3, #26
 8002e36:	3301      	adds	r3, #1
 8002e38:	069b      	lsls	r3, r3, #26
 8002e3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e3e:	e015      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x414>
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e48:	fa93 f3a3 	rbit	r3, r3
 8002e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002e58:	2320      	movs	r3, #32
 8002e5a:	e003      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e5e:	fab3 f383 	clz	r3, r3
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	3301      	adds	r3, #1
 8002e66:	069b      	lsls	r3, r3, #26
 8002e68:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d109      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x434>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	0e9b      	lsrs	r3, r3, #26
 8002e7e:	3301      	adds	r3, #1
 8002e80:	f003 031f 	and.w	r3, r3, #31
 8002e84:	2101      	movs	r1, #1
 8002e86:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8a:	e017      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x464>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	fa93 f3a3 	rbit	r3, r3
 8002e98:	61bb      	str	r3, [r7, #24]
  return result;
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002ea4:	2320      	movs	r3, #32
 8002ea6:	e003      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	fab3 f383 	clz	r3, r3
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebc:	ea42 0103 	orr.w	r1, r2, r3
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10d      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x490>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	0e9b      	lsrs	r3, r3, #26
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	f003 021f 	and.w	r2, r3, #31
 8002ed8:	4613      	mov	r3, r2
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	4413      	add	r3, r2
 8002ede:	3b1e      	subs	r3, #30
 8002ee0:	051b      	lsls	r3, r3, #20
 8002ee2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ee6:	e01b      	b.n	8002f20 <HAL_ADC_ConfigChannel+0x4c8>
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	fa93 f3a3 	rbit	r3, r3
 8002ef4:	60fb      	str	r3, [r7, #12]
  return result;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002f00:	2320      	movs	r3, #32
 8002f02:	e003      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	fab3 f383 	clz	r3, r3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	f003 021f 	and.w	r2, r3, #31
 8002f12:	4613      	mov	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	4413      	add	r3, r2
 8002f18:	3b1e      	subs	r3, #30
 8002f1a:	051b      	lsls	r3, r3, #20
 8002f1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f20:	430b      	orrs	r3, r1
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	6892      	ldr	r2, [r2, #8]
 8002f26:	4619      	mov	r1, r3
 8002f28:	f7ff fa04 	bl	8002334 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f280 80cf 	bge.w	80030d4 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a06      	ldr	r2, [pc, #24]	@ (8002f54 <HAL_ADC_ConfigChannel+0x4fc>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d004      	beq.n	8002f4a <HAL_ADC_ConfigChannel+0x4f2>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a04      	ldr	r2, [pc, #16]	@ (8002f58 <HAL_ADC_ConfigChannel+0x500>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d10a      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x508>
 8002f4a:	4b04      	ldr	r3, [pc, #16]	@ (8002f5c <HAL_ADC_ConfigChannel+0x504>)
 8002f4c:	e009      	b.n	8002f62 <HAL_ADC_ConfigChannel+0x50a>
 8002f4e:	bf00      	nop
 8002f50:	47ff0000 	.word	0x47ff0000
 8002f54:	40022000 	.word	0x40022000
 8002f58:	40022100 	.word	0x40022100
 8002f5c:	40022300 	.word	0x40022300
 8002f60:	4b61      	ldr	r3, [pc, #388]	@ (80030e8 <HAL_ADC_ConfigChannel+0x690>)
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff f932 	bl	80021cc <LL_ADC_GetCommonPathInternalCh>
 8002f68:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a5f      	ldr	r2, [pc, #380]	@ (80030ec <HAL_ADC_ConfigChannel+0x694>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d004      	beq.n	8002f7e <HAL_ADC_ConfigChannel+0x526>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a5d      	ldr	r2, [pc, #372]	@ (80030f0 <HAL_ADC_ConfigChannel+0x698>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d10e      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x544>
 8002f7e:	485b      	ldr	r0, [pc, #364]	@ (80030ec <HAL_ADC_ConfigChannel+0x694>)
 8002f80:	f7ff fa98 	bl	80024b4 <LL_ADC_IsEnabled>
 8002f84:	4604      	mov	r4, r0
 8002f86:	485a      	ldr	r0, [pc, #360]	@ (80030f0 <HAL_ADC_ConfigChannel+0x698>)
 8002f88:	f7ff fa94 	bl	80024b4 <LL_ADC_IsEnabled>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	4323      	orrs	r3, r4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	bf0c      	ite	eq
 8002f94:	2301      	moveq	r3, #1
 8002f96:	2300      	movne	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	e008      	b.n	8002fae <HAL_ADC_ConfigChannel+0x556>
 8002f9c:	4855      	ldr	r0, [pc, #340]	@ (80030f4 <HAL_ADC_ConfigChannel+0x69c>)
 8002f9e:	f7ff fa89 	bl	80024b4 <LL_ADC_IsEnabled>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d07d      	beq.n	80030ae <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a50      	ldr	r2, [pc, #320]	@ (80030f8 <HAL_ADC_ConfigChannel+0x6a0>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d130      	bne.n	800301e <HAL_ADC_ConfigChannel+0x5c6>
 8002fbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d12b      	bne.n	800301e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a4a      	ldr	r2, [pc, #296]	@ (80030f4 <HAL_ADC_ConfigChannel+0x69c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	f040 8081 	bne.w	80030d4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a45      	ldr	r2, [pc, #276]	@ (80030ec <HAL_ADC_ConfigChannel+0x694>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d004      	beq.n	8002fe6 <HAL_ADC_ConfigChannel+0x58e>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a43      	ldr	r2, [pc, #268]	@ (80030f0 <HAL_ADC_ConfigChannel+0x698>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d101      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x592>
 8002fe6:	4a45      	ldr	r2, [pc, #276]	@ (80030fc <HAL_ADC_ConfigChannel+0x6a4>)
 8002fe8:	e000      	b.n	8002fec <HAL_ADC_ConfigChannel+0x594>
 8002fea:	4a3f      	ldr	r2, [pc, #252]	@ (80030e8 <HAL_ADC_ConfigChannel+0x690>)
 8002fec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4610      	mov	r0, r2
 8002ff6:	f7ff f8d6 	bl	80021a6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ffa:	4b41      	ldr	r3, [pc, #260]	@ (8003100 <HAL_ADC_ConfigChannel+0x6a8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	099b      	lsrs	r3, r3, #6
 8003000:	4a40      	ldr	r2, [pc, #256]	@ (8003104 <HAL_ADC_ConfigChannel+0x6ac>)
 8003002:	fba2 2303 	umull	r2, r3, r2, r3
 8003006:	099b      	lsrs	r3, r3, #6
 8003008:	3301      	adds	r3, #1
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800300e:	e002      	b.n	8003016 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	3b01      	subs	r3, #1
 8003014:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1f9      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800301c:	e05a      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a39      	ldr	r2, [pc, #228]	@ (8003108 <HAL_ADC_ConfigChannel+0x6b0>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d11e      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x60e>
 8003028:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800302a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d119      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a2f      	ldr	r2, [pc, #188]	@ (80030f4 <HAL_ADC_ConfigChannel+0x69c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d14b      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a2a      	ldr	r2, [pc, #168]	@ (80030ec <HAL_ADC_ConfigChannel+0x694>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d004      	beq.n	8003050 <HAL_ADC_ConfigChannel+0x5f8>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a29      	ldr	r2, [pc, #164]	@ (80030f0 <HAL_ADC_ConfigChannel+0x698>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d101      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x5fc>
 8003050:	4a2a      	ldr	r2, [pc, #168]	@ (80030fc <HAL_ADC_ConfigChannel+0x6a4>)
 8003052:	e000      	b.n	8003056 <HAL_ADC_ConfigChannel+0x5fe>
 8003054:	4a24      	ldr	r2, [pc, #144]	@ (80030e8 <HAL_ADC_ConfigChannel+0x690>)
 8003056:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003058:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800305c:	4619      	mov	r1, r3
 800305e:	4610      	mov	r0, r2
 8003060:	f7ff f8a1 	bl	80021a6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003064:	e036      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a28      	ldr	r2, [pc, #160]	@ (800310c <HAL_ADC_ConfigChannel+0x6b4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d131      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x67c>
 8003070:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003072:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d12c      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a1d      	ldr	r2, [pc, #116]	@ (80030f4 <HAL_ADC_ConfigChannel+0x69c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d127      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a18      	ldr	r2, [pc, #96]	@ (80030ec <HAL_ADC_ConfigChannel+0x694>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d004      	beq.n	8003098 <HAL_ADC_ConfigChannel+0x640>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a17      	ldr	r2, [pc, #92]	@ (80030f0 <HAL_ADC_ConfigChannel+0x698>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d101      	bne.n	800309c <HAL_ADC_ConfigChannel+0x644>
 8003098:	4a18      	ldr	r2, [pc, #96]	@ (80030fc <HAL_ADC_ConfigChannel+0x6a4>)
 800309a:	e000      	b.n	800309e <HAL_ADC_ConfigChannel+0x646>
 800309c:	4a12      	ldr	r2, [pc, #72]	@ (80030e8 <HAL_ADC_ConfigChannel+0x690>)
 800309e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030a4:	4619      	mov	r1, r3
 80030a6:	4610      	mov	r0, r2
 80030a8:	f7ff f87d 	bl	80021a6 <LL_ADC_SetCommonPathInternalCh>
 80030ac:	e012      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b2:	f043 0220 	orr.w	r2, r3, #32
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80030c0:	e008      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c6:	f043 0220 	orr.w	r2, r3, #32
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80030dc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3784      	adds	r7, #132	@ 0x84
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd90      	pop	{r4, r7, pc}
 80030e8:	58026300 	.word	0x58026300
 80030ec:	40022000 	.word	0x40022000
 80030f0:	40022100 	.word	0x40022100
 80030f4:	58026000 	.word	0x58026000
 80030f8:	cb840000 	.word	0xcb840000
 80030fc:	40022300 	.word	0x40022300
 8003100:	24000000 	.word	0x24000000
 8003104:	053e2d63 	.word	0x053e2d63
 8003108:	c7520000 	.word	0xc7520000
 800310c:	cfb80000 	.word	0xcfb80000

08003110 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff f9c9 	bl	80024b4 <LL_ADC_IsEnabled>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d16e      	bne.n	8003206 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	4b38      	ldr	r3, [pc, #224]	@ (8003210 <ADC_Enable+0x100>)
 8003130:	4013      	ands	r3, r2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00d      	beq.n	8003152 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800313a:	f043 0210 	orr.w	r2, r3, #16
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003146:	f043 0201 	orr.w	r2, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e05a      	b.n	8003208 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff f998 	bl	800248c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800315c:	f7fe ffd4 	bl	8002108 <HAL_GetTick>
 8003160:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a2b      	ldr	r2, [pc, #172]	@ (8003214 <ADC_Enable+0x104>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d004      	beq.n	8003176 <ADC_Enable+0x66>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a29      	ldr	r2, [pc, #164]	@ (8003218 <ADC_Enable+0x108>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d101      	bne.n	800317a <ADC_Enable+0x6a>
 8003176:	4b29      	ldr	r3, [pc, #164]	@ (800321c <ADC_Enable+0x10c>)
 8003178:	e000      	b.n	800317c <ADC_Enable+0x6c>
 800317a:	4b29      	ldr	r3, [pc, #164]	@ (8003220 <ADC_Enable+0x110>)
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff f929 	bl	80023d4 <LL_ADC_GetMultimode>
 8003182:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a23      	ldr	r2, [pc, #140]	@ (8003218 <ADC_Enable+0x108>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d002      	beq.n	8003194 <ADC_Enable+0x84>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	e000      	b.n	8003196 <ADC_Enable+0x86>
 8003194:	4b1f      	ldr	r3, [pc, #124]	@ (8003214 <ADC_Enable+0x104>)
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6812      	ldr	r2, [r2, #0]
 800319a:	4293      	cmp	r3, r2
 800319c:	d02c      	beq.n	80031f8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d130      	bne.n	8003206 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031a4:	e028      	b.n	80031f8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff f982 	bl	80024b4 <LL_ADC_IsEnabled>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d104      	bne.n	80031c0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff f966 	bl	800248c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031c0:	f7fe ffa2 	bl	8002108 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d914      	bls.n	80031f8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d00d      	beq.n	80031f8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e0:	f043 0210 	orr.w	r2, r3, #16
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ec:	f043 0201 	orr.w	r2, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e007      	b.n	8003208 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b01      	cmp	r3, #1
 8003204:	d1cf      	bne.n	80031a6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	8000003f 	.word	0x8000003f
 8003214:	40022000 	.word	0x40022000
 8003218:	40022100 	.word	0x40022100
 800321c:	40022300 	.word	0x40022300
 8003220:	58026300 	.word	0x58026300

08003224 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003230:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003236:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800323a:	2b00      	cmp	r3, #0
 800323c:	d14b      	bne.n	80032d6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003242:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b00      	cmp	r3, #0
 8003256:	d021      	beq.n	800329c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff f817 	bl	8002290 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d032      	beq.n	80032ce <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d12b      	bne.n	80032ce <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800327a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003286:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d11f      	bne.n	80032ce <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003292:	f043 0201 	orr.w	r2, r3, #1
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	655a      	str	r2, [r3, #84]	@ 0x54
 800329a:	e018      	b.n	80032ce <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d111      	bne.n	80032ce <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d105      	bne.n	80032ce <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c6:	f043 0201 	orr.w	r2, r3, #1
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f7ff fba4 	bl	8002a1c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80032d4:	e00e      	b.n	80032f4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032da:	f003 0310 	and.w	r3, r3, #16
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f7ff fbae 	bl	8002a44 <HAL_ADC_ErrorCallback>
}
 80032e8:	e004      	b.n	80032f4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	4798      	blx	r3
}
 80032f4:	bf00      	nop
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003308:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f7ff fb90 	bl	8002a30 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003310:	bf00      	nop
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003324:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800332a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003336:	f043 0204 	orr.w	r2, r3, #4
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f7ff fb80 	bl	8002a44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003344:	bf00      	nop
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a7a      	ldr	r2, [pc, #488]	@ (8003544 <ADC_ConfigureBoostMode+0x1f8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d004      	beq.n	8003368 <ADC_ConfigureBoostMode+0x1c>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a79      	ldr	r2, [pc, #484]	@ (8003548 <ADC_ConfigureBoostMode+0x1fc>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d109      	bne.n	800337c <ADC_ConfigureBoostMode+0x30>
 8003368:	4b78      	ldr	r3, [pc, #480]	@ (800354c <ADC_ConfigureBoostMode+0x200>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003370:	2b00      	cmp	r3, #0
 8003372:	bf14      	ite	ne
 8003374:	2301      	movne	r3, #1
 8003376:	2300      	moveq	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	e008      	b.n	800338e <ADC_ConfigureBoostMode+0x42>
 800337c:	4b74      	ldr	r3, [pc, #464]	@ (8003550 <ADC_ConfigureBoostMode+0x204>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003384:	2b00      	cmp	r3, #0
 8003386:	bf14      	ite	ne
 8003388:	2301      	movne	r3, #1
 800338a:	2300      	moveq	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d01c      	beq.n	80033cc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003392:	f004 faaf 	bl	80078f4 <HAL_RCC_GetHCLKFreq>
 8003396:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80033a0:	d010      	beq.n	80033c4 <ADC_ConfigureBoostMode+0x78>
 80033a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80033a6:	d873      	bhi.n	8003490 <ADC_ConfigureBoostMode+0x144>
 80033a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033ac:	d002      	beq.n	80033b4 <ADC_ConfigureBoostMode+0x68>
 80033ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033b2:	d16d      	bne.n	8003490 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	0c1b      	lsrs	r3, r3, #16
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c0:	60fb      	str	r3, [r7, #12]
        break;
 80033c2:	e068      	b.n	8003496 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	089b      	lsrs	r3, r3, #2
 80033c8:	60fb      	str	r3, [r7, #12]
        break;
 80033ca:	e064      	b.n	8003496 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80033cc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80033d0:	f04f 0100 	mov.w	r1, #0
 80033d4:	f005 fd36 	bl	8008e44 <HAL_RCCEx_GetPeriphCLKFreq>
 80033d8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80033e2:	d051      	beq.n	8003488 <ADC_ConfigureBoostMode+0x13c>
 80033e4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80033e8:	d854      	bhi.n	8003494 <ADC_ConfigureBoostMode+0x148>
 80033ea:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80033ee:	d047      	beq.n	8003480 <ADC_ConfigureBoostMode+0x134>
 80033f0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80033f4:	d84e      	bhi.n	8003494 <ADC_ConfigureBoostMode+0x148>
 80033f6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80033fa:	d03d      	beq.n	8003478 <ADC_ConfigureBoostMode+0x12c>
 80033fc:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003400:	d848      	bhi.n	8003494 <ADC_ConfigureBoostMode+0x148>
 8003402:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003406:	d033      	beq.n	8003470 <ADC_ConfigureBoostMode+0x124>
 8003408:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800340c:	d842      	bhi.n	8003494 <ADC_ConfigureBoostMode+0x148>
 800340e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003412:	d029      	beq.n	8003468 <ADC_ConfigureBoostMode+0x11c>
 8003414:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003418:	d83c      	bhi.n	8003494 <ADC_ConfigureBoostMode+0x148>
 800341a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800341e:	d01a      	beq.n	8003456 <ADC_ConfigureBoostMode+0x10a>
 8003420:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003424:	d836      	bhi.n	8003494 <ADC_ConfigureBoostMode+0x148>
 8003426:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800342a:	d014      	beq.n	8003456 <ADC_ConfigureBoostMode+0x10a>
 800342c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003430:	d830      	bhi.n	8003494 <ADC_ConfigureBoostMode+0x148>
 8003432:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003436:	d00e      	beq.n	8003456 <ADC_ConfigureBoostMode+0x10a>
 8003438:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800343c:	d82a      	bhi.n	8003494 <ADC_ConfigureBoostMode+0x148>
 800343e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003442:	d008      	beq.n	8003456 <ADC_ConfigureBoostMode+0x10a>
 8003444:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003448:	d824      	bhi.n	8003494 <ADC_ConfigureBoostMode+0x148>
 800344a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800344e:	d002      	beq.n	8003456 <ADC_ConfigureBoostMode+0x10a>
 8003450:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003454:	d11e      	bne.n	8003494 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	0c9b      	lsrs	r3, r3, #18
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	fbb2 f3f3 	udiv	r3, r2, r3
 8003464:	60fb      	str	r3, [r7, #12]
        break;
 8003466:	e016      	b.n	8003496 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	091b      	lsrs	r3, r3, #4
 800346c:	60fb      	str	r3, [r7, #12]
        break;
 800346e:	e012      	b.n	8003496 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	095b      	lsrs	r3, r3, #5
 8003474:	60fb      	str	r3, [r7, #12]
        break;
 8003476:	e00e      	b.n	8003496 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	099b      	lsrs	r3, r3, #6
 800347c:	60fb      	str	r3, [r7, #12]
        break;
 800347e:	e00a      	b.n	8003496 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	09db      	lsrs	r3, r3, #7
 8003484:	60fb      	str	r3, [r7, #12]
        break;
 8003486:	e006      	b.n	8003496 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	0a1b      	lsrs	r3, r3, #8
 800348c:	60fb      	str	r3, [r7, #12]
        break;
 800348e:	e002      	b.n	8003496 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003490:	bf00      	nop
 8003492:	e000      	b.n	8003496 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003494:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003496:	f7fe fe67 	bl	8002168 <HAL_GetREVID>
 800349a:	4603      	mov	r3, r0
 800349c:	f241 0203 	movw	r2, #4099	@ 0x1003
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d815      	bhi.n	80034d0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4a2b      	ldr	r2, [pc, #172]	@ (8003554 <ADC_ConfigureBoostMode+0x208>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d908      	bls.n	80034be <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034ba:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80034bc:	e03e      	b.n	800353c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034cc:	609a      	str	r2, [r3, #8]
}
 80034ce:	e035      	b.n	800353c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	085b      	lsrs	r3, r3, #1
 80034d4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003558 <ADC_ConfigureBoostMode+0x20c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d808      	bhi.n	80034f0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80034ec:	609a      	str	r2, [r3, #8]
}
 80034ee:	e025      	b.n	800353c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4a1a      	ldr	r2, [pc, #104]	@ (800355c <ADC_ConfigureBoostMode+0x210>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d80a      	bhi.n	800350e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800350a:	609a      	str	r2, [r3, #8]
}
 800350c:	e016      	b.n	800353c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4a13      	ldr	r2, [pc, #76]	@ (8003560 <ADC_ConfigureBoostMode+0x214>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d80a      	bhi.n	800352c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003528:	609a      	str	r2, [r3, #8]
}
 800352a:	e007      	b.n	800353c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800353a:	609a      	str	r2, [r3, #8]
}
 800353c:	bf00      	nop
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40022000 	.word	0x40022000
 8003548:	40022100 	.word	0x40022100
 800354c:	40022300 	.word	0x40022300
 8003550:	58026300 	.word	0x58026300
 8003554:	01312d00 	.word	0x01312d00
 8003558:	005f5e10 	.word	0x005f5e10
 800355c:	00bebc20 	.word	0x00bebc20
 8003560:	017d7840 	.word	0x017d7840

08003564 <LL_ADC_IsEnabled>:
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b01      	cmp	r3, #1
 8003576:	d101      	bne.n	800357c <LL_ADC_IsEnabled+0x18>
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <LL_ADC_IsEnabled+0x1a>
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <LL_ADC_REG_IsConversionOngoing>:
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	2b04      	cmp	r3, #4
 800359c:	d101      	bne.n	80035a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80035b0:	b590      	push	{r4, r7, lr}
 80035b2:	b09f      	sub	sp, #124	@ 0x7c
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ba:	2300      	movs	r3, #0
 80035bc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d101      	bne.n	80035ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035ca:	2302      	movs	r3, #2
 80035cc:	e0be      	b.n	800374c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80035d6:	2300      	movs	r3, #0
 80035d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80035da:	2300      	movs	r3, #0
 80035dc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a5c      	ldr	r2, [pc, #368]	@ (8003754 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d102      	bne.n	80035ee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80035e8:	4b5b      	ldr	r3, [pc, #364]	@ (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80035ea:	60bb      	str	r3, [r7, #8]
 80035ec:	e001      	b.n	80035f2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80035ee:	2300      	movs	r3, #0
 80035f0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10b      	bne.n	8003610 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035fc:	f043 0220 	orr.w	r2, r3, #32
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e09d      	b.n	800374c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff ffb9 	bl	800358a <LL_ADC_REG_IsConversionOngoing>
 8003618:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff ffb3 	bl	800358a <LL_ADC_REG_IsConversionOngoing>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d17f      	bne.n	800372a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800362a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800362c:	2b00      	cmp	r3, #0
 800362e:	d17c      	bne.n	800372a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a47      	ldr	r2, [pc, #284]	@ (8003754 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d004      	beq.n	8003644 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a46      	ldr	r2, [pc, #280]	@ (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d101      	bne.n	8003648 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003644:	4b45      	ldr	r3, [pc, #276]	@ (800375c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003646:	e000      	b.n	800364a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003648:	4b45      	ldr	r3, [pc, #276]	@ (8003760 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800364a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d039      	beq.n	80036c8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003654:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	431a      	orrs	r2, r3
 8003662:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003664:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a3a      	ldr	r2, [pc, #232]	@ (8003754 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d004      	beq.n	800367a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a38      	ldr	r2, [pc, #224]	@ (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d10e      	bne.n	8003698 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800367a:	4836      	ldr	r0, [pc, #216]	@ (8003754 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800367c:	f7ff ff72 	bl	8003564 <LL_ADC_IsEnabled>
 8003680:	4604      	mov	r4, r0
 8003682:	4835      	ldr	r0, [pc, #212]	@ (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003684:	f7ff ff6e 	bl	8003564 <LL_ADC_IsEnabled>
 8003688:	4603      	mov	r3, r0
 800368a:	4323      	orrs	r3, r4
 800368c:	2b00      	cmp	r3, #0
 800368e:	bf0c      	ite	eq
 8003690:	2301      	moveq	r3, #1
 8003692:	2300      	movne	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	e008      	b.n	80036aa <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003698:	4832      	ldr	r0, [pc, #200]	@ (8003764 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800369a:	f7ff ff63 	bl	8003564 <LL_ADC_IsEnabled>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	bf0c      	ite	eq
 80036a4:	2301      	moveq	r3, #1
 80036a6:	2300      	movne	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d047      	beq.n	800373e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80036ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	4b2d      	ldr	r3, [pc, #180]	@ (8003768 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	6811      	ldr	r1, [r2, #0]
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	6892      	ldr	r2, [r2, #8]
 80036be:	430a      	orrs	r2, r1
 80036c0:	431a      	orrs	r2, r3
 80036c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036c4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036c6:	e03a      	b.n	800373e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80036c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036d2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a1e      	ldr	r2, [pc, #120]	@ (8003754 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d004      	beq.n	80036e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a1d      	ldr	r2, [pc, #116]	@ (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d10e      	bne.n	8003706 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80036e8:	481a      	ldr	r0, [pc, #104]	@ (8003754 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80036ea:	f7ff ff3b 	bl	8003564 <LL_ADC_IsEnabled>
 80036ee:	4604      	mov	r4, r0
 80036f0:	4819      	ldr	r0, [pc, #100]	@ (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80036f2:	f7ff ff37 	bl	8003564 <LL_ADC_IsEnabled>
 80036f6:	4603      	mov	r3, r0
 80036f8:	4323      	orrs	r3, r4
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	bf0c      	ite	eq
 80036fe:	2301      	moveq	r3, #1
 8003700:	2300      	movne	r3, #0
 8003702:	b2db      	uxtb	r3, r3
 8003704:	e008      	b.n	8003718 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003706:	4817      	ldr	r0, [pc, #92]	@ (8003764 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003708:	f7ff ff2c 	bl	8003564 <LL_ADC_IsEnabled>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	bf0c      	ite	eq
 8003712:	2301      	moveq	r3, #1
 8003714:	2300      	movne	r3, #0
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d010      	beq.n	800373e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800371c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	4b11      	ldr	r3, [pc, #68]	@ (8003768 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003722:	4013      	ands	r3, r2
 8003724:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003726:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003728:	e009      	b.n	800373e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800372e:	f043 0220 	orr.w	r2, r3, #32
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800373c:	e000      	b.n	8003740 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800373e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003748:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800374c:	4618      	mov	r0, r3
 800374e:	377c      	adds	r7, #124	@ 0x7c
 8003750:	46bd      	mov	sp, r7
 8003752:	bd90      	pop	{r4, r7, pc}
 8003754:	40022000 	.word	0x40022000
 8003758:	40022100 	.word	0x40022100
 800375c:	40022300 	.word	0x40022300
 8003760:	58026300 	.word	0x58026300
 8003764:	58026000 	.word	0x58026000
 8003768:	fffff0e0 	.word	0xfffff0e0

0800376c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800377c:	4b0b      	ldr	r3, [pc, #44]	@ (80037ac <__NVIC_SetPriorityGrouping+0x40>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003788:	4013      	ands	r3, r2
 800378a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003794:	4b06      	ldr	r3, [pc, #24]	@ (80037b0 <__NVIC_SetPriorityGrouping+0x44>)
 8003796:	4313      	orrs	r3, r2
 8003798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800379a:	4a04      	ldr	r2, [pc, #16]	@ (80037ac <__NVIC_SetPriorityGrouping+0x40>)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	60d3      	str	r3, [r2, #12]
}
 80037a0:	bf00      	nop
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	e000ed00 	.word	0xe000ed00
 80037b0:	05fa0000 	.word	0x05fa0000

080037b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037b8:	4b04      	ldr	r3, [pc, #16]	@ (80037cc <__NVIC_GetPriorityGrouping+0x18>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	0a1b      	lsrs	r3, r3, #8
 80037be:	f003 0307 	and.w	r3, r3, #7
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	e000ed00 	.word	0xe000ed00

080037d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	db0b      	blt.n	80037fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037e2:	88fb      	ldrh	r3, [r7, #6]
 80037e4:	f003 021f 	and.w	r2, r3, #31
 80037e8:	4907      	ldr	r1, [pc, #28]	@ (8003808 <__NVIC_EnableIRQ+0x38>)
 80037ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	2001      	movs	r0, #1
 80037f2:	fa00 f202 	lsl.w	r2, r0, r2
 80037f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	e000e100 	.word	0xe000e100

0800380c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	6039      	str	r1, [r7, #0]
 8003816:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003818:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800381c:	2b00      	cmp	r3, #0
 800381e:	db0a      	blt.n	8003836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	b2da      	uxtb	r2, r3
 8003824:	490c      	ldr	r1, [pc, #48]	@ (8003858 <__NVIC_SetPriority+0x4c>)
 8003826:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800382a:	0112      	lsls	r2, r2, #4
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	440b      	add	r3, r1
 8003830:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003834:	e00a      	b.n	800384c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	b2da      	uxtb	r2, r3
 800383a:	4908      	ldr	r1, [pc, #32]	@ (800385c <__NVIC_SetPriority+0x50>)
 800383c:	88fb      	ldrh	r3, [r7, #6]
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	3b04      	subs	r3, #4
 8003844:	0112      	lsls	r2, r2, #4
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	440b      	add	r3, r1
 800384a:	761a      	strb	r2, [r3, #24]
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	e000e100 	.word	0xe000e100
 800385c:	e000ed00 	.word	0xe000ed00

08003860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003860:	b480      	push	{r7}
 8003862:	b089      	sub	sp, #36	@ 0x24
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f1c3 0307 	rsb	r3, r3, #7
 800387a:	2b04      	cmp	r3, #4
 800387c:	bf28      	it	cs
 800387e:	2304      	movcs	r3, #4
 8003880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	3304      	adds	r3, #4
 8003886:	2b06      	cmp	r3, #6
 8003888:	d902      	bls.n	8003890 <NVIC_EncodePriority+0x30>
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	3b03      	subs	r3, #3
 800388e:	e000      	b.n	8003892 <NVIC_EncodePriority+0x32>
 8003890:	2300      	movs	r3, #0
 8003892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003894:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43da      	mvns	r2, r3
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	401a      	ands	r2, r3
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	fa01 f303 	lsl.w	r3, r1, r3
 80038b2:	43d9      	mvns	r1, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b8:	4313      	orrs	r3, r2
         );
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3724      	adds	r7, #36	@ 0x24
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b082      	sub	sp, #8
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7ff ff4c 	bl	800376c <__NVIC_SetPriorityGrouping>
}
 80038d4:	bf00      	nop
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	4603      	mov	r3, r0
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
 80038e8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038ea:	f7ff ff63 	bl	80037b4 <__NVIC_GetPriorityGrouping>
 80038ee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	6978      	ldr	r0, [r7, #20]
 80038f6:	f7ff ffb3 	bl	8003860 <NVIC_EncodePriority>
 80038fa:	4602      	mov	r2, r0
 80038fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003900:	4611      	mov	r1, r2
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff ff82 	bl	800380c <__NVIC_SetPriority>
}
 8003908:	bf00      	nop
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	4603      	mov	r3, r0
 8003918:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800391a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff ff56 	bl	80037d0 <__NVIC_EnableIRQ>
}
 8003924:	bf00      	nop
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003934:	f7fe fbe8 	bl	8002108 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e316      	b.n	8003f72 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a66      	ldr	r2, [pc, #408]	@ (8003ae4 <HAL_DMA_Init+0x1b8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d04a      	beq.n	80039e4 <HAL_DMA_Init+0xb8>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a65      	ldr	r2, [pc, #404]	@ (8003ae8 <HAL_DMA_Init+0x1bc>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d045      	beq.n	80039e4 <HAL_DMA_Init+0xb8>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a63      	ldr	r2, [pc, #396]	@ (8003aec <HAL_DMA_Init+0x1c0>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d040      	beq.n	80039e4 <HAL_DMA_Init+0xb8>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a62      	ldr	r2, [pc, #392]	@ (8003af0 <HAL_DMA_Init+0x1c4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d03b      	beq.n	80039e4 <HAL_DMA_Init+0xb8>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a60      	ldr	r2, [pc, #384]	@ (8003af4 <HAL_DMA_Init+0x1c8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d036      	beq.n	80039e4 <HAL_DMA_Init+0xb8>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a5f      	ldr	r2, [pc, #380]	@ (8003af8 <HAL_DMA_Init+0x1cc>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d031      	beq.n	80039e4 <HAL_DMA_Init+0xb8>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a5d      	ldr	r2, [pc, #372]	@ (8003afc <HAL_DMA_Init+0x1d0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d02c      	beq.n	80039e4 <HAL_DMA_Init+0xb8>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a5c      	ldr	r2, [pc, #368]	@ (8003b00 <HAL_DMA_Init+0x1d4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d027      	beq.n	80039e4 <HAL_DMA_Init+0xb8>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a5a      	ldr	r2, [pc, #360]	@ (8003b04 <HAL_DMA_Init+0x1d8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d022      	beq.n	80039e4 <HAL_DMA_Init+0xb8>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a59      	ldr	r2, [pc, #356]	@ (8003b08 <HAL_DMA_Init+0x1dc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d01d      	beq.n	80039e4 <HAL_DMA_Init+0xb8>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a57      	ldr	r2, [pc, #348]	@ (8003b0c <HAL_DMA_Init+0x1e0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d018      	beq.n	80039e4 <HAL_DMA_Init+0xb8>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a56      	ldr	r2, [pc, #344]	@ (8003b10 <HAL_DMA_Init+0x1e4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d013      	beq.n	80039e4 <HAL_DMA_Init+0xb8>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a54      	ldr	r2, [pc, #336]	@ (8003b14 <HAL_DMA_Init+0x1e8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00e      	beq.n	80039e4 <HAL_DMA_Init+0xb8>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a53      	ldr	r2, [pc, #332]	@ (8003b18 <HAL_DMA_Init+0x1ec>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d009      	beq.n	80039e4 <HAL_DMA_Init+0xb8>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a51      	ldr	r2, [pc, #324]	@ (8003b1c <HAL_DMA_Init+0x1f0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d004      	beq.n	80039e4 <HAL_DMA_Init+0xb8>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a50      	ldr	r2, [pc, #320]	@ (8003b20 <HAL_DMA_Init+0x1f4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d101      	bne.n	80039e8 <HAL_DMA_Init+0xbc>
 80039e4:	2301      	movs	r3, #1
 80039e6:	e000      	b.n	80039ea <HAL_DMA_Init+0xbe>
 80039e8:	2300      	movs	r3, #0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 813b 	beq.w	8003c66 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a37      	ldr	r2, [pc, #220]	@ (8003ae4 <HAL_DMA_Init+0x1b8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d04a      	beq.n	8003aa0 <HAL_DMA_Init+0x174>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a36      	ldr	r2, [pc, #216]	@ (8003ae8 <HAL_DMA_Init+0x1bc>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d045      	beq.n	8003aa0 <HAL_DMA_Init+0x174>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a34      	ldr	r2, [pc, #208]	@ (8003aec <HAL_DMA_Init+0x1c0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d040      	beq.n	8003aa0 <HAL_DMA_Init+0x174>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a33      	ldr	r2, [pc, #204]	@ (8003af0 <HAL_DMA_Init+0x1c4>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d03b      	beq.n	8003aa0 <HAL_DMA_Init+0x174>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a31      	ldr	r2, [pc, #196]	@ (8003af4 <HAL_DMA_Init+0x1c8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d036      	beq.n	8003aa0 <HAL_DMA_Init+0x174>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a30      	ldr	r2, [pc, #192]	@ (8003af8 <HAL_DMA_Init+0x1cc>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d031      	beq.n	8003aa0 <HAL_DMA_Init+0x174>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a2e      	ldr	r2, [pc, #184]	@ (8003afc <HAL_DMA_Init+0x1d0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d02c      	beq.n	8003aa0 <HAL_DMA_Init+0x174>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a2d      	ldr	r2, [pc, #180]	@ (8003b00 <HAL_DMA_Init+0x1d4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d027      	beq.n	8003aa0 <HAL_DMA_Init+0x174>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a2b      	ldr	r2, [pc, #172]	@ (8003b04 <HAL_DMA_Init+0x1d8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d022      	beq.n	8003aa0 <HAL_DMA_Init+0x174>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a2a      	ldr	r2, [pc, #168]	@ (8003b08 <HAL_DMA_Init+0x1dc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d01d      	beq.n	8003aa0 <HAL_DMA_Init+0x174>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a28      	ldr	r2, [pc, #160]	@ (8003b0c <HAL_DMA_Init+0x1e0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d018      	beq.n	8003aa0 <HAL_DMA_Init+0x174>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a27      	ldr	r2, [pc, #156]	@ (8003b10 <HAL_DMA_Init+0x1e4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d013      	beq.n	8003aa0 <HAL_DMA_Init+0x174>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a25      	ldr	r2, [pc, #148]	@ (8003b14 <HAL_DMA_Init+0x1e8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d00e      	beq.n	8003aa0 <HAL_DMA_Init+0x174>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a24      	ldr	r2, [pc, #144]	@ (8003b18 <HAL_DMA_Init+0x1ec>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d009      	beq.n	8003aa0 <HAL_DMA_Init+0x174>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a22      	ldr	r2, [pc, #136]	@ (8003b1c <HAL_DMA_Init+0x1f0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d004      	beq.n	8003aa0 <HAL_DMA_Init+0x174>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a21      	ldr	r2, [pc, #132]	@ (8003b20 <HAL_DMA_Init+0x1f4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d108      	bne.n	8003ab2 <HAL_DMA_Init+0x186>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0201 	bic.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	e007      	b.n	8003ac2 <HAL_DMA_Init+0x196>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0201 	bic.w	r2, r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ac2:	e02f      	b.n	8003b24 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ac4:	f7fe fb20 	bl	8002108 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b05      	cmp	r3, #5
 8003ad0:	d928      	bls.n	8003b24 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2203      	movs	r2, #3
 8003adc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e246      	b.n	8003f72 <HAL_DMA_Init+0x646>
 8003ae4:	40020010 	.word	0x40020010
 8003ae8:	40020028 	.word	0x40020028
 8003aec:	40020040 	.word	0x40020040
 8003af0:	40020058 	.word	0x40020058
 8003af4:	40020070 	.word	0x40020070
 8003af8:	40020088 	.word	0x40020088
 8003afc:	400200a0 	.word	0x400200a0
 8003b00:	400200b8 	.word	0x400200b8
 8003b04:	40020410 	.word	0x40020410
 8003b08:	40020428 	.word	0x40020428
 8003b0c:	40020440 	.word	0x40020440
 8003b10:	40020458 	.word	0x40020458
 8003b14:	40020470 	.word	0x40020470
 8003b18:	40020488 	.word	0x40020488
 8003b1c:	400204a0 	.word	0x400204a0
 8003b20:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1c8      	bne.n	8003ac4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	4b83      	ldr	r3, [pc, #524]	@ (8003d4c <HAL_DMA_Init+0x420>)
 8003b3e:	4013      	ands	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003b4a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b56:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b62:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	2b04      	cmp	r3, #4
 8003b76:	d107      	bne.n	8003b88 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b80:	4313      	orrs	r3, r2
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003b88:	4b71      	ldr	r3, [pc, #452]	@ (8003d50 <HAL_DMA_Init+0x424>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	4b71      	ldr	r3, [pc, #452]	@ (8003d54 <HAL_DMA_Init+0x428>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b94:	d328      	bcc.n	8003be8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b28      	cmp	r3, #40	@ 0x28
 8003b9c:	d903      	bls.n	8003ba6 <HAL_DMA_Init+0x27a>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ba4:	d917      	bls.n	8003bd6 <HAL_DMA_Init+0x2aa>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b3e      	cmp	r3, #62	@ 0x3e
 8003bac:	d903      	bls.n	8003bb6 <HAL_DMA_Init+0x28a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b42      	cmp	r3, #66	@ 0x42
 8003bb4:	d90f      	bls.n	8003bd6 <HAL_DMA_Init+0x2aa>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b46      	cmp	r3, #70	@ 0x46
 8003bbc:	d903      	bls.n	8003bc6 <HAL_DMA_Init+0x29a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b48      	cmp	r3, #72	@ 0x48
 8003bc4:	d907      	bls.n	8003bd6 <HAL_DMA_Init+0x2aa>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b4e      	cmp	r3, #78	@ 0x4e
 8003bcc:	d905      	bls.n	8003bda <HAL_DMA_Init+0x2ae>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b52      	cmp	r3, #82	@ 0x52
 8003bd4:	d801      	bhi.n	8003bda <HAL_DMA_Init+0x2ae>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <HAL_DMA_Init+0x2b0>
 8003bda:	2300      	movs	r3, #0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003be6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f023 0307 	bic.w	r3, r3, #7
 8003bfe:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	d117      	bne.n	8003c42 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00e      	beq.n	8003c42 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f002 fb33 	bl	8006290 <DMA_CheckFifoParam>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2240      	movs	r2, #64	@ 0x40
 8003c34:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e197      	b.n	8003f72 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f002 fa6e 	bl	800612c <DMA_CalcBaseAndBitshift>
 8003c50:	4603      	mov	r3, r0
 8003c52:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	223f      	movs	r2, #63	@ 0x3f
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	609a      	str	r2, [r3, #8]
 8003c64:	e0cd      	b.n	8003e02 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a3b      	ldr	r2, [pc, #236]	@ (8003d58 <HAL_DMA_Init+0x42c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d022      	beq.n	8003cb6 <HAL_DMA_Init+0x38a>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a39      	ldr	r2, [pc, #228]	@ (8003d5c <HAL_DMA_Init+0x430>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d01d      	beq.n	8003cb6 <HAL_DMA_Init+0x38a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a38      	ldr	r2, [pc, #224]	@ (8003d60 <HAL_DMA_Init+0x434>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d018      	beq.n	8003cb6 <HAL_DMA_Init+0x38a>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a36      	ldr	r2, [pc, #216]	@ (8003d64 <HAL_DMA_Init+0x438>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d013      	beq.n	8003cb6 <HAL_DMA_Init+0x38a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a35      	ldr	r2, [pc, #212]	@ (8003d68 <HAL_DMA_Init+0x43c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00e      	beq.n	8003cb6 <HAL_DMA_Init+0x38a>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a33      	ldr	r2, [pc, #204]	@ (8003d6c <HAL_DMA_Init+0x440>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d009      	beq.n	8003cb6 <HAL_DMA_Init+0x38a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a32      	ldr	r2, [pc, #200]	@ (8003d70 <HAL_DMA_Init+0x444>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d004      	beq.n	8003cb6 <HAL_DMA_Init+0x38a>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a30      	ldr	r2, [pc, #192]	@ (8003d74 <HAL_DMA_Init+0x448>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d101      	bne.n	8003cba <HAL_DMA_Init+0x38e>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <HAL_DMA_Init+0x390>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 8097 	beq.w	8003df0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a24      	ldr	r2, [pc, #144]	@ (8003d58 <HAL_DMA_Init+0x42c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d021      	beq.n	8003d10 <HAL_DMA_Init+0x3e4>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a22      	ldr	r2, [pc, #136]	@ (8003d5c <HAL_DMA_Init+0x430>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d01c      	beq.n	8003d10 <HAL_DMA_Init+0x3e4>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a21      	ldr	r2, [pc, #132]	@ (8003d60 <HAL_DMA_Init+0x434>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d017      	beq.n	8003d10 <HAL_DMA_Init+0x3e4>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8003d64 <HAL_DMA_Init+0x438>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d012      	beq.n	8003d10 <HAL_DMA_Init+0x3e4>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a1e      	ldr	r2, [pc, #120]	@ (8003d68 <HAL_DMA_Init+0x43c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d00d      	beq.n	8003d10 <HAL_DMA_Init+0x3e4>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a1c      	ldr	r2, [pc, #112]	@ (8003d6c <HAL_DMA_Init+0x440>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d008      	beq.n	8003d10 <HAL_DMA_Init+0x3e4>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1b      	ldr	r2, [pc, #108]	@ (8003d70 <HAL_DMA_Init+0x444>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d003      	beq.n	8003d10 <HAL_DMA_Init+0x3e4>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a19      	ldr	r2, [pc, #100]	@ (8003d74 <HAL_DMA_Init+0x448>)
 8003d0e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	4b13      	ldr	r3, [pc, #76]	@ (8003d78 <HAL_DMA_Init+0x44c>)
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	2b40      	cmp	r3, #64	@ 0x40
 8003d36:	d021      	beq.n	8003d7c <HAL_DMA_Init+0x450>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	2b80      	cmp	r3, #128	@ 0x80
 8003d3e:	d102      	bne.n	8003d46 <HAL_DMA_Init+0x41a>
 8003d40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003d44:	e01b      	b.n	8003d7e <HAL_DMA_Init+0x452>
 8003d46:	2300      	movs	r3, #0
 8003d48:	e019      	b.n	8003d7e <HAL_DMA_Init+0x452>
 8003d4a:	bf00      	nop
 8003d4c:	fe10803f 	.word	0xfe10803f
 8003d50:	5c001000 	.word	0x5c001000
 8003d54:	ffff0000 	.word	0xffff0000
 8003d58:	58025408 	.word	0x58025408
 8003d5c:	5802541c 	.word	0x5802541c
 8003d60:	58025430 	.word	0x58025430
 8003d64:	58025444 	.word	0x58025444
 8003d68:	58025458 	.word	0x58025458
 8003d6c:	5802546c 	.word	0x5802546c
 8003d70:	58025480 	.word	0x58025480
 8003d74:	58025494 	.word	0x58025494
 8003d78:	fffe000f 	.word	0xfffe000f
 8003d7c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	68d2      	ldr	r2, [r2, #12]
 8003d82:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003d8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003d94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003d9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003da4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003dac:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	4b6e      	ldr	r3, [pc, #440]	@ (8003f7c <HAL_DMA_Init+0x650>)
 8003dc4:	4413      	add	r3, r2
 8003dc6:	4a6e      	ldr	r2, [pc, #440]	@ (8003f80 <HAL_DMA_Init+0x654>)
 8003dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dcc:	091b      	lsrs	r3, r3, #4
 8003dce:	009a      	lsls	r2, r3, #2
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f002 f9a9 	bl	800612c <DMA_CalcBaseAndBitshift>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de2:	f003 031f 	and.w	r3, r3, #31
 8003de6:	2201      	movs	r2, #1
 8003de8:	409a      	lsls	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	605a      	str	r2, [r3, #4]
 8003dee:	e008      	b.n	8003e02 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2240      	movs	r2, #64	@ 0x40
 8003df4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2203      	movs	r2, #3
 8003dfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e0b7      	b.n	8003f72 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a5f      	ldr	r2, [pc, #380]	@ (8003f84 <HAL_DMA_Init+0x658>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d072      	beq.n	8003ef2 <HAL_DMA_Init+0x5c6>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a5d      	ldr	r2, [pc, #372]	@ (8003f88 <HAL_DMA_Init+0x65c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d06d      	beq.n	8003ef2 <HAL_DMA_Init+0x5c6>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a5c      	ldr	r2, [pc, #368]	@ (8003f8c <HAL_DMA_Init+0x660>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d068      	beq.n	8003ef2 <HAL_DMA_Init+0x5c6>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a5a      	ldr	r2, [pc, #360]	@ (8003f90 <HAL_DMA_Init+0x664>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d063      	beq.n	8003ef2 <HAL_DMA_Init+0x5c6>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a59      	ldr	r2, [pc, #356]	@ (8003f94 <HAL_DMA_Init+0x668>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d05e      	beq.n	8003ef2 <HAL_DMA_Init+0x5c6>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a57      	ldr	r2, [pc, #348]	@ (8003f98 <HAL_DMA_Init+0x66c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d059      	beq.n	8003ef2 <HAL_DMA_Init+0x5c6>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a56      	ldr	r2, [pc, #344]	@ (8003f9c <HAL_DMA_Init+0x670>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d054      	beq.n	8003ef2 <HAL_DMA_Init+0x5c6>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a54      	ldr	r2, [pc, #336]	@ (8003fa0 <HAL_DMA_Init+0x674>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d04f      	beq.n	8003ef2 <HAL_DMA_Init+0x5c6>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a53      	ldr	r2, [pc, #332]	@ (8003fa4 <HAL_DMA_Init+0x678>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d04a      	beq.n	8003ef2 <HAL_DMA_Init+0x5c6>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a51      	ldr	r2, [pc, #324]	@ (8003fa8 <HAL_DMA_Init+0x67c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d045      	beq.n	8003ef2 <HAL_DMA_Init+0x5c6>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a50      	ldr	r2, [pc, #320]	@ (8003fac <HAL_DMA_Init+0x680>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d040      	beq.n	8003ef2 <HAL_DMA_Init+0x5c6>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a4e      	ldr	r2, [pc, #312]	@ (8003fb0 <HAL_DMA_Init+0x684>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d03b      	beq.n	8003ef2 <HAL_DMA_Init+0x5c6>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a4d      	ldr	r2, [pc, #308]	@ (8003fb4 <HAL_DMA_Init+0x688>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d036      	beq.n	8003ef2 <HAL_DMA_Init+0x5c6>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a4b      	ldr	r2, [pc, #300]	@ (8003fb8 <HAL_DMA_Init+0x68c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d031      	beq.n	8003ef2 <HAL_DMA_Init+0x5c6>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a4a      	ldr	r2, [pc, #296]	@ (8003fbc <HAL_DMA_Init+0x690>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d02c      	beq.n	8003ef2 <HAL_DMA_Init+0x5c6>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a48      	ldr	r2, [pc, #288]	@ (8003fc0 <HAL_DMA_Init+0x694>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d027      	beq.n	8003ef2 <HAL_DMA_Init+0x5c6>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a47      	ldr	r2, [pc, #284]	@ (8003fc4 <HAL_DMA_Init+0x698>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d022      	beq.n	8003ef2 <HAL_DMA_Init+0x5c6>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a45      	ldr	r2, [pc, #276]	@ (8003fc8 <HAL_DMA_Init+0x69c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d01d      	beq.n	8003ef2 <HAL_DMA_Init+0x5c6>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a44      	ldr	r2, [pc, #272]	@ (8003fcc <HAL_DMA_Init+0x6a0>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d018      	beq.n	8003ef2 <HAL_DMA_Init+0x5c6>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a42      	ldr	r2, [pc, #264]	@ (8003fd0 <HAL_DMA_Init+0x6a4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d013      	beq.n	8003ef2 <HAL_DMA_Init+0x5c6>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a41      	ldr	r2, [pc, #260]	@ (8003fd4 <HAL_DMA_Init+0x6a8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00e      	beq.n	8003ef2 <HAL_DMA_Init+0x5c6>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a3f      	ldr	r2, [pc, #252]	@ (8003fd8 <HAL_DMA_Init+0x6ac>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d009      	beq.n	8003ef2 <HAL_DMA_Init+0x5c6>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a3e      	ldr	r2, [pc, #248]	@ (8003fdc <HAL_DMA_Init+0x6b0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d004      	beq.n	8003ef2 <HAL_DMA_Init+0x5c6>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a3c      	ldr	r2, [pc, #240]	@ (8003fe0 <HAL_DMA_Init+0x6b4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d101      	bne.n	8003ef6 <HAL_DMA_Init+0x5ca>
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e000      	b.n	8003ef8 <HAL_DMA_Init+0x5cc>
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d032      	beq.n	8003f62 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f002 fa43 	bl	8006388 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b80      	cmp	r3, #128	@ 0x80
 8003f08:	d102      	bne.n	8003f10 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003f24:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d010      	beq.n	8003f50 <HAL_DMA_Init+0x624>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b08      	cmp	r3, #8
 8003f34:	d80c      	bhi.n	8003f50 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f002 fac0 	bl	80064bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003f4c:	605a      	str	r2, [r3, #4]
 8003f4e:	e008      	b.n	8003f62 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	a7fdabf8 	.word	0xa7fdabf8
 8003f80:	cccccccd 	.word	0xcccccccd
 8003f84:	40020010 	.word	0x40020010
 8003f88:	40020028 	.word	0x40020028
 8003f8c:	40020040 	.word	0x40020040
 8003f90:	40020058 	.word	0x40020058
 8003f94:	40020070 	.word	0x40020070
 8003f98:	40020088 	.word	0x40020088
 8003f9c:	400200a0 	.word	0x400200a0
 8003fa0:	400200b8 	.word	0x400200b8
 8003fa4:	40020410 	.word	0x40020410
 8003fa8:	40020428 	.word	0x40020428
 8003fac:	40020440 	.word	0x40020440
 8003fb0:	40020458 	.word	0x40020458
 8003fb4:	40020470 	.word	0x40020470
 8003fb8:	40020488 	.word	0x40020488
 8003fbc:	400204a0 	.word	0x400204a0
 8003fc0:	400204b8 	.word	0x400204b8
 8003fc4:	58025408 	.word	0x58025408
 8003fc8:	5802541c 	.word	0x5802541c
 8003fcc:	58025430 	.word	0x58025430
 8003fd0:	58025444 	.word	0x58025444
 8003fd4:	58025458 	.word	0x58025458
 8003fd8:	5802546c 	.word	0x5802546c
 8003fdc:	58025480 	.word	0x58025480
 8003fe0:	58025494 	.word	0x58025494

08003fe4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e226      	b.n	800444e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <HAL_DMA_Start_IT+0x2a>
 800400a:	2302      	movs	r3, #2
 800400c:	e21f      	b.n	800444e <HAL_DMA_Start_IT+0x46a>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b01      	cmp	r3, #1
 8004020:	f040 820a 	bne.w	8004438 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a68      	ldr	r2, [pc, #416]	@ (80041d8 <HAL_DMA_Start_IT+0x1f4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d04a      	beq.n	80040d2 <HAL_DMA_Start_IT+0xee>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a66      	ldr	r2, [pc, #408]	@ (80041dc <HAL_DMA_Start_IT+0x1f8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d045      	beq.n	80040d2 <HAL_DMA_Start_IT+0xee>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a65      	ldr	r2, [pc, #404]	@ (80041e0 <HAL_DMA_Start_IT+0x1fc>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d040      	beq.n	80040d2 <HAL_DMA_Start_IT+0xee>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a63      	ldr	r2, [pc, #396]	@ (80041e4 <HAL_DMA_Start_IT+0x200>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d03b      	beq.n	80040d2 <HAL_DMA_Start_IT+0xee>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a62      	ldr	r2, [pc, #392]	@ (80041e8 <HAL_DMA_Start_IT+0x204>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d036      	beq.n	80040d2 <HAL_DMA_Start_IT+0xee>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a60      	ldr	r2, [pc, #384]	@ (80041ec <HAL_DMA_Start_IT+0x208>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d031      	beq.n	80040d2 <HAL_DMA_Start_IT+0xee>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a5f      	ldr	r2, [pc, #380]	@ (80041f0 <HAL_DMA_Start_IT+0x20c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d02c      	beq.n	80040d2 <HAL_DMA_Start_IT+0xee>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a5d      	ldr	r2, [pc, #372]	@ (80041f4 <HAL_DMA_Start_IT+0x210>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d027      	beq.n	80040d2 <HAL_DMA_Start_IT+0xee>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a5c      	ldr	r2, [pc, #368]	@ (80041f8 <HAL_DMA_Start_IT+0x214>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d022      	beq.n	80040d2 <HAL_DMA_Start_IT+0xee>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a5a      	ldr	r2, [pc, #360]	@ (80041fc <HAL_DMA_Start_IT+0x218>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d01d      	beq.n	80040d2 <HAL_DMA_Start_IT+0xee>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a59      	ldr	r2, [pc, #356]	@ (8004200 <HAL_DMA_Start_IT+0x21c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d018      	beq.n	80040d2 <HAL_DMA_Start_IT+0xee>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a57      	ldr	r2, [pc, #348]	@ (8004204 <HAL_DMA_Start_IT+0x220>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d013      	beq.n	80040d2 <HAL_DMA_Start_IT+0xee>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a56      	ldr	r2, [pc, #344]	@ (8004208 <HAL_DMA_Start_IT+0x224>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d00e      	beq.n	80040d2 <HAL_DMA_Start_IT+0xee>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a54      	ldr	r2, [pc, #336]	@ (800420c <HAL_DMA_Start_IT+0x228>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d009      	beq.n	80040d2 <HAL_DMA_Start_IT+0xee>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a53      	ldr	r2, [pc, #332]	@ (8004210 <HAL_DMA_Start_IT+0x22c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d004      	beq.n	80040d2 <HAL_DMA_Start_IT+0xee>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a51      	ldr	r2, [pc, #324]	@ (8004214 <HAL_DMA_Start_IT+0x230>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d108      	bne.n	80040e4 <HAL_DMA_Start_IT+0x100>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0201 	bic.w	r2, r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	e007      	b.n	80040f4 <HAL_DMA_Start_IT+0x110>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0201 	bic.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	68b9      	ldr	r1, [r7, #8]
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f001 fe6a 	bl	8005dd4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a34      	ldr	r2, [pc, #208]	@ (80041d8 <HAL_DMA_Start_IT+0x1f4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d04a      	beq.n	80041a0 <HAL_DMA_Start_IT+0x1bc>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a33      	ldr	r2, [pc, #204]	@ (80041dc <HAL_DMA_Start_IT+0x1f8>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d045      	beq.n	80041a0 <HAL_DMA_Start_IT+0x1bc>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a31      	ldr	r2, [pc, #196]	@ (80041e0 <HAL_DMA_Start_IT+0x1fc>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d040      	beq.n	80041a0 <HAL_DMA_Start_IT+0x1bc>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a30      	ldr	r2, [pc, #192]	@ (80041e4 <HAL_DMA_Start_IT+0x200>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d03b      	beq.n	80041a0 <HAL_DMA_Start_IT+0x1bc>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a2e      	ldr	r2, [pc, #184]	@ (80041e8 <HAL_DMA_Start_IT+0x204>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d036      	beq.n	80041a0 <HAL_DMA_Start_IT+0x1bc>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a2d      	ldr	r2, [pc, #180]	@ (80041ec <HAL_DMA_Start_IT+0x208>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d031      	beq.n	80041a0 <HAL_DMA_Start_IT+0x1bc>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a2b      	ldr	r2, [pc, #172]	@ (80041f0 <HAL_DMA_Start_IT+0x20c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d02c      	beq.n	80041a0 <HAL_DMA_Start_IT+0x1bc>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a2a      	ldr	r2, [pc, #168]	@ (80041f4 <HAL_DMA_Start_IT+0x210>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d027      	beq.n	80041a0 <HAL_DMA_Start_IT+0x1bc>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a28      	ldr	r2, [pc, #160]	@ (80041f8 <HAL_DMA_Start_IT+0x214>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d022      	beq.n	80041a0 <HAL_DMA_Start_IT+0x1bc>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a27      	ldr	r2, [pc, #156]	@ (80041fc <HAL_DMA_Start_IT+0x218>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d01d      	beq.n	80041a0 <HAL_DMA_Start_IT+0x1bc>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a25      	ldr	r2, [pc, #148]	@ (8004200 <HAL_DMA_Start_IT+0x21c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d018      	beq.n	80041a0 <HAL_DMA_Start_IT+0x1bc>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a24      	ldr	r2, [pc, #144]	@ (8004204 <HAL_DMA_Start_IT+0x220>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d013      	beq.n	80041a0 <HAL_DMA_Start_IT+0x1bc>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a22      	ldr	r2, [pc, #136]	@ (8004208 <HAL_DMA_Start_IT+0x224>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d00e      	beq.n	80041a0 <HAL_DMA_Start_IT+0x1bc>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a21      	ldr	r2, [pc, #132]	@ (800420c <HAL_DMA_Start_IT+0x228>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d009      	beq.n	80041a0 <HAL_DMA_Start_IT+0x1bc>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a1f      	ldr	r2, [pc, #124]	@ (8004210 <HAL_DMA_Start_IT+0x22c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d004      	beq.n	80041a0 <HAL_DMA_Start_IT+0x1bc>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a1e      	ldr	r2, [pc, #120]	@ (8004214 <HAL_DMA_Start_IT+0x230>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d101      	bne.n	80041a4 <HAL_DMA_Start_IT+0x1c0>
 80041a0:	2301      	movs	r3, #1
 80041a2:	e000      	b.n	80041a6 <HAL_DMA_Start_IT+0x1c2>
 80041a4:	2300      	movs	r3, #0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d036      	beq.n	8004218 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f023 021e 	bic.w	r2, r3, #30
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f042 0216 	orr.w	r2, r2, #22
 80041bc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d03e      	beq.n	8004244 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f042 0208 	orr.w	r2, r2, #8
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	e035      	b.n	8004244 <HAL_DMA_Start_IT+0x260>
 80041d8:	40020010 	.word	0x40020010
 80041dc:	40020028 	.word	0x40020028
 80041e0:	40020040 	.word	0x40020040
 80041e4:	40020058 	.word	0x40020058
 80041e8:	40020070 	.word	0x40020070
 80041ec:	40020088 	.word	0x40020088
 80041f0:	400200a0 	.word	0x400200a0
 80041f4:	400200b8 	.word	0x400200b8
 80041f8:	40020410 	.word	0x40020410
 80041fc:	40020428 	.word	0x40020428
 8004200:	40020440 	.word	0x40020440
 8004204:	40020458 	.word	0x40020458
 8004208:	40020470 	.word	0x40020470
 800420c:	40020488 	.word	0x40020488
 8004210:	400204a0 	.word	0x400204a0
 8004214:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f023 020e 	bic.w	r2, r3, #14
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 020a 	orr.w	r2, r2, #10
 800422a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004230:	2b00      	cmp	r3, #0
 8004232:	d007      	beq.n	8004244 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0204 	orr.w	r2, r2, #4
 8004242:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a83      	ldr	r2, [pc, #524]	@ (8004458 <HAL_DMA_Start_IT+0x474>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d072      	beq.n	8004334 <HAL_DMA_Start_IT+0x350>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a82      	ldr	r2, [pc, #520]	@ (800445c <HAL_DMA_Start_IT+0x478>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d06d      	beq.n	8004334 <HAL_DMA_Start_IT+0x350>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a80      	ldr	r2, [pc, #512]	@ (8004460 <HAL_DMA_Start_IT+0x47c>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d068      	beq.n	8004334 <HAL_DMA_Start_IT+0x350>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a7f      	ldr	r2, [pc, #508]	@ (8004464 <HAL_DMA_Start_IT+0x480>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d063      	beq.n	8004334 <HAL_DMA_Start_IT+0x350>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a7d      	ldr	r2, [pc, #500]	@ (8004468 <HAL_DMA_Start_IT+0x484>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d05e      	beq.n	8004334 <HAL_DMA_Start_IT+0x350>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a7c      	ldr	r2, [pc, #496]	@ (800446c <HAL_DMA_Start_IT+0x488>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d059      	beq.n	8004334 <HAL_DMA_Start_IT+0x350>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a7a      	ldr	r2, [pc, #488]	@ (8004470 <HAL_DMA_Start_IT+0x48c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d054      	beq.n	8004334 <HAL_DMA_Start_IT+0x350>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a79      	ldr	r2, [pc, #484]	@ (8004474 <HAL_DMA_Start_IT+0x490>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d04f      	beq.n	8004334 <HAL_DMA_Start_IT+0x350>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a77      	ldr	r2, [pc, #476]	@ (8004478 <HAL_DMA_Start_IT+0x494>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d04a      	beq.n	8004334 <HAL_DMA_Start_IT+0x350>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a76      	ldr	r2, [pc, #472]	@ (800447c <HAL_DMA_Start_IT+0x498>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d045      	beq.n	8004334 <HAL_DMA_Start_IT+0x350>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a74      	ldr	r2, [pc, #464]	@ (8004480 <HAL_DMA_Start_IT+0x49c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d040      	beq.n	8004334 <HAL_DMA_Start_IT+0x350>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a73      	ldr	r2, [pc, #460]	@ (8004484 <HAL_DMA_Start_IT+0x4a0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d03b      	beq.n	8004334 <HAL_DMA_Start_IT+0x350>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a71      	ldr	r2, [pc, #452]	@ (8004488 <HAL_DMA_Start_IT+0x4a4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d036      	beq.n	8004334 <HAL_DMA_Start_IT+0x350>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a70      	ldr	r2, [pc, #448]	@ (800448c <HAL_DMA_Start_IT+0x4a8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d031      	beq.n	8004334 <HAL_DMA_Start_IT+0x350>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a6e      	ldr	r2, [pc, #440]	@ (8004490 <HAL_DMA_Start_IT+0x4ac>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d02c      	beq.n	8004334 <HAL_DMA_Start_IT+0x350>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a6d      	ldr	r2, [pc, #436]	@ (8004494 <HAL_DMA_Start_IT+0x4b0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d027      	beq.n	8004334 <HAL_DMA_Start_IT+0x350>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a6b      	ldr	r2, [pc, #428]	@ (8004498 <HAL_DMA_Start_IT+0x4b4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d022      	beq.n	8004334 <HAL_DMA_Start_IT+0x350>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a6a      	ldr	r2, [pc, #424]	@ (800449c <HAL_DMA_Start_IT+0x4b8>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d01d      	beq.n	8004334 <HAL_DMA_Start_IT+0x350>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a68      	ldr	r2, [pc, #416]	@ (80044a0 <HAL_DMA_Start_IT+0x4bc>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d018      	beq.n	8004334 <HAL_DMA_Start_IT+0x350>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a67      	ldr	r2, [pc, #412]	@ (80044a4 <HAL_DMA_Start_IT+0x4c0>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d013      	beq.n	8004334 <HAL_DMA_Start_IT+0x350>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a65      	ldr	r2, [pc, #404]	@ (80044a8 <HAL_DMA_Start_IT+0x4c4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00e      	beq.n	8004334 <HAL_DMA_Start_IT+0x350>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a64      	ldr	r2, [pc, #400]	@ (80044ac <HAL_DMA_Start_IT+0x4c8>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d009      	beq.n	8004334 <HAL_DMA_Start_IT+0x350>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a62      	ldr	r2, [pc, #392]	@ (80044b0 <HAL_DMA_Start_IT+0x4cc>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d004      	beq.n	8004334 <HAL_DMA_Start_IT+0x350>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a61      	ldr	r2, [pc, #388]	@ (80044b4 <HAL_DMA_Start_IT+0x4d0>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d101      	bne.n	8004338 <HAL_DMA_Start_IT+0x354>
 8004334:	2301      	movs	r3, #1
 8004336:	e000      	b.n	800433a <HAL_DMA_Start_IT+0x356>
 8004338:	2300      	movs	r3, #0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d01a      	beq.n	8004374 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d007      	beq.n	800435c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004356:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800435a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004360:	2b00      	cmp	r3, #0
 8004362:	d007      	beq.n	8004374 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800436e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004372:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a37      	ldr	r2, [pc, #220]	@ (8004458 <HAL_DMA_Start_IT+0x474>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d04a      	beq.n	8004414 <HAL_DMA_Start_IT+0x430>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a36      	ldr	r2, [pc, #216]	@ (800445c <HAL_DMA_Start_IT+0x478>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d045      	beq.n	8004414 <HAL_DMA_Start_IT+0x430>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a34      	ldr	r2, [pc, #208]	@ (8004460 <HAL_DMA_Start_IT+0x47c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d040      	beq.n	8004414 <HAL_DMA_Start_IT+0x430>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a33      	ldr	r2, [pc, #204]	@ (8004464 <HAL_DMA_Start_IT+0x480>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d03b      	beq.n	8004414 <HAL_DMA_Start_IT+0x430>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a31      	ldr	r2, [pc, #196]	@ (8004468 <HAL_DMA_Start_IT+0x484>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d036      	beq.n	8004414 <HAL_DMA_Start_IT+0x430>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a30      	ldr	r2, [pc, #192]	@ (800446c <HAL_DMA_Start_IT+0x488>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d031      	beq.n	8004414 <HAL_DMA_Start_IT+0x430>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a2e      	ldr	r2, [pc, #184]	@ (8004470 <HAL_DMA_Start_IT+0x48c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d02c      	beq.n	8004414 <HAL_DMA_Start_IT+0x430>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a2d      	ldr	r2, [pc, #180]	@ (8004474 <HAL_DMA_Start_IT+0x490>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d027      	beq.n	8004414 <HAL_DMA_Start_IT+0x430>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a2b      	ldr	r2, [pc, #172]	@ (8004478 <HAL_DMA_Start_IT+0x494>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d022      	beq.n	8004414 <HAL_DMA_Start_IT+0x430>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a2a      	ldr	r2, [pc, #168]	@ (800447c <HAL_DMA_Start_IT+0x498>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d01d      	beq.n	8004414 <HAL_DMA_Start_IT+0x430>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a28      	ldr	r2, [pc, #160]	@ (8004480 <HAL_DMA_Start_IT+0x49c>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d018      	beq.n	8004414 <HAL_DMA_Start_IT+0x430>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a27      	ldr	r2, [pc, #156]	@ (8004484 <HAL_DMA_Start_IT+0x4a0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d013      	beq.n	8004414 <HAL_DMA_Start_IT+0x430>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a25      	ldr	r2, [pc, #148]	@ (8004488 <HAL_DMA_Start_IT+0x4a4>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00e      	beq.n	8004414 <HAL_DMA_Start_IT+0x430>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a24      	ldr	r2, [pc, #144]	@ (800448c <HAL_DMA_Start_IT+0x4a8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d009      	beq.n	8004414 <HAL_DMA_Start_IT+0x430>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a22      	ldr	r2, [pc, #136]	@ (8004490 <HAL_DMA_Start_IT+0x4ac>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d004      	beq.n	8004414 <HAL_DMA_Start_IT+0x430>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a21      	ldr	r2, [pc, #132]	@ (8004494 <HAL_DMA_Start_IT+0x4b0>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d108      	bne.n	8004426 <HAL_DMA_Start_IT+0x442>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0201 	orr.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	e012      	b.n	800444c <HAL_DMA_Start_IT+0x468>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f042 0201 	orr.w	r2, r2, #1
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	e009      	b.n	800444c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800443e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800444c:	7dfb      	ldrb	r3, [r7, #23]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40020010 	.word	0x40020010
 800445c:	40020028 	.word	0x40020028
 8004460:	40020040 	.word	0x40020040
 8004464:	40020058 	.word	0x40020058
 8004468:	40020070 	.word	0x40020070
 800446c:	40020088 	.word	0x40020088
 8004470:	400200a0 	.word	0x400200a0
 8004474:	400200b8 	.word	0x400200b8
 8004478:	40020410 	.word	0x40020410
 800447c:	40020428 	.word	0x40020428
 8004480:	40020440 	.word	0x40020440
 8004484:	40020458 	.word	0x40020458
 8004488:	40020470 	.word	0x40020470
 800448c:	40020488 	.word	0x40020488
 8004490:	400204a0 	.word	0x400204a0
 8004494:	400204b8 	.word	0x400204b8
 8004498:	58025408 	.word	0x58025408
 800449c:	5802541c 	.word	0x5802541c
 80044a0:	58025430 	.word	0x58025430
 80044a4:	58025444 	.word	0x58025444
 80044a8:	58025458 	.word	0x58025458
 80044ac:	5802546c 	.word	0x5802546c
 80044b0:	58025480 	.word	0x58025480
 80044b4:	58025494 	.word	0x58025494

080044b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80044c0:	f7fd fe22 	bl	8002108 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e2dc      	b.n	8004a8a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d008      	beq.n	80044ee <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2280      	movs	r2, #128	@ 0x80
 80044e0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e2cd      	b.n	8004a8a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a76      	ldr	r2, [pc, #472]	@ (80046cc <HAL_DMA_Abort+0x214>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d04a      	beq.n	800458e <HAL_DMA_Abort+0xd6>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a74      	ldr	r2, [pc, #464]	@ (80046d0 <HAL_DMA_Abort+0x218>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d045      	beq.n	800458e <HAL_DMA_Abort+0xd6>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a73      	ldr	r2, [pc, #460]	@ (80046d4 <HAL_DMA_Abort+0x21c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d040      	beq.n	800458e <HAL_DMA_Abort+0xd6>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a71      	ldr	r2, [pc, #452]	@ (80046d8 <HAL_DMA_Abort+0x220>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d03b      	beq.n	800458e <HAL_DMA_Abort+0xd6>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a70      	ldr	r2, [pc, #448]	@ (80046dc <HAL_DMA_Abort+0x224>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d036      	beq.n	800458e <HAL_DMA_Abort+0xd6>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a6e      	ldr	r2, [pc, #440]	@ (80046e0 <HAL_DMA_Abort+0x228>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d031      	beq.n	800458e <HAL_DMA_Abort+0xd6>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a6d      	ldr	r2, [pc, #436]	@ (80046e4 <HAL_DMA_Abort+0x22c>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d02c      	beq.n	800458e <HAL_DMA_Abort+0xd6>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a6b      	ldr	r2, [pc, #428]	@ (80046e8 <HAL_DMA_Abort+0x230>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d027      	beq.n	800458e <HAL_DMA_Abort+0xd6>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a6a      	ldr	r2, [pc, #424]	@ (80046ec <HAL_DMA_Abort+0x234>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d022      	beq.n	800458e <HAL_DMA_Abort+0xd6>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a68      	ldr	r2, [pc, #416]	@ (80046f0 <HAL_DMA_Abort+0x238>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d01d      	beq.n	800458e <HAL_DMA_Abort+0xd6>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a67      	ldr	r2, [pc, #412]	@ (80046f4 <HAL_DMA_Abort+0x23c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d018      	beq.n	800458e <HAL_DMA_Abort+0xd6>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a65      	ldr	r2, [pc, #404]	@ (80046f8 <HAL_DMA_Abort+0x240>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d013      	beq.n	800458e <HAL_DMA_Abort+0xd6>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a64      	ldr	r2, [pc, #400]	@ (80046fc <HAL_DMA_Abort+0x244>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d00e      	beq.n	800458e <HAL_DMA_Abort+0xd6>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a62      	ldr	r2, [pc, #392]	@ (8004700 <HAL_DMA_Abort+0x248>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d009      	beq.n	800458e <HAL_DMA_Abort+0xd6>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a61      	ldr	r2, [pc, #388]	@ (8004704 <HAL_DMA_Abort+0x24c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d004      	beq.n	800458e <HAL_DMA_Abort+0xd6>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a5f      	ldr	r2, [pc, #380]	@ (8004708 <HAL_DMA_Abort+0x250>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d101      	bne.n	8004592 <HAL_DMA_Abort+0xda>
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <HAL_DMA_Abort+0xdc>
 8004592:	2300      	movs	r3, #0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d013      	beq.n	80045c0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 021e 	bic.w	r2, r2, #30
 80045a6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695a      	ldr	r2, [r3, #20]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045b6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	617b      	str	r3, [r7, #20]
 80045be:	e00a      	b.n	80045d6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 020e 	bic.w	r2, r2, #14
 80045ce:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a3c      	ldr	r2, [pc, #240]	@ (80046cc <HAL_DMA_Abort+0x214>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d072      	beq.n	80046c6 <HAL_DMA_Abort+0x20e>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a3a      	ldr	r2, [pc, #232]	@ (80046d0 <HAL_DMA_Abort+0x218>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d06d      	beq.n	80046c6 <HAL_DMA_Abort+0x20e>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a39      	ldr	r2, [pc, #228]	@ (80046d4 <HAL_DMA_Abort+0x21c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d068      	beq.n	80046c6 <HAL_DMA_Abort+0x20e>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a37      	ldr	r2, [pc, #220]	@ (80046d8 <HAL_DMA_Abort+0x220>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d063      	beq.n	80046c6 <HAL_DMA_Abort+0x20e>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a36      	ldr	r2, [pc, #216]	@ (80046dc <HAL_DMA_Abort+0x224>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d05e      	beq.n	80046c6 <HAL_DMA_Abort+0x20e>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a34      	ldr	r2, [pc, #208]	@ (80046e0 <HAL_DMA_Abort+0x228>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d059      	beq.n	80046c6 <HAL_DMA_Abort+0x20e>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a33      	ldr	r2, [pc, #204]	@ (80046e4 <HAL_DMA_Abort+0x22c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d054      	beq.n	80046c6 <HAL_DMA_Abort+0x20e>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a31      	ldr	r2, [pc, #196]	@ (80046e8 <HAL_DMA_Abort+0x230>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d04f      	beq.n	80046c6 <HAL_DMA_Abort+0x20e>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a30      	ldr	r2, [pc, #192]	@ (80046ec <HAL_DMA_Abort+0x234>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d04a      	beq.n	80046c6 <HAL_DMA_Abort+0x20e>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a2e      	ldr	r2, [pc, #184]	@ (80046f0 <HAL_DMA_Abort+0x238>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d045      	beq.n	80046c6 <HAL_DMA_Abort+0x20e>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a2d      	ldr	r2, [pc, #180]	@ (80046f4 <HAL_DMA_Abort+0x23c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d040      	beq.n	80046c6 <HAL_DMA_Abort+0x20e>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a2b      	ldr	r2, [pc, #172]	@ (80046f8 <HAL_DMA_Abort+0x240>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d03b      	beq.n	80046c6 <HAL_DMA_Abort+0x20e>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a2a      	ldr	r2, [pc, #168]	@ (80046fc <HAL_DMA_Abort+0x244>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d036      	beq.n	80046c6 <HAL_DMA_Abort+0x20e>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a28      	ldr	r2, [pc, #160]	@ (8004700 <HAL_DMA_Abort+0x248>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d031      	beq.n	80046c6 <HAL_DMA_Abort+0x20e>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a27      	ldr	r2, [pc, #156]	@ (8004704 <HAL_DMA_Abort+0x24c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d02c      	beq.n	80046c6 <HAL_DMA_Abort+0x20e>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a25      	ldr	r2, [pc, #148]	@ (8004708 <HAL_DMA_Abort+0x250>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d027      	beq.n	80046c6 <HAL_DMA_Abort+0x20e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a24      	ldr	r2, [pc, #144]	@ (800470c <HAL_DMA_Abort+0x254>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d022      	beq.n	80046c6 <HAL_DMA_Abort+0x20e>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a22      	ldr	r2, [pc, #136]	@ (8004710 <HAL_DMA_Abort+0x258>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d01d      	beq.n	80046c6 <HAL_DMA_Abort+0x20e>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a21      	ldr	r2, [pc, #132]	@ (8004714 <HAL_DMA_Abort+0x25c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d018      	beq.n	80046c6 <HAL_DMA_Abort+0x20e>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a1f      	ldr	r2, [pc, #124]	@ (8004718 <HAL_DMA_Abort+0x260>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d013      	beq.n	80046c6 <HAL_DMA_Abort+0x20e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a1e      	ldr	r2, [pc, #120]	@ (800471c <HAL_DMA_Abort+0x264>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d00e      	beq.n	80046c6 <HAL_DMA_Abort+0x20e>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a1c      	ldr	r2, [pc, #112]	@ (8004720 <HAL_DMA_Abort+0x268>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d009      	beq.n	80046c6 <HAL_DMA_Abort+0x20e>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004724 <HAL_DMA_Abort+0x26c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d004      	beq.n	80046c6 <HAL_DMA_Abort+0x20e>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a19      	ldr	r2, [pc, #100]	@ (8004728 <HAL_DMA_Abort+0x270>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d132      	bne.n	800472c <HAL_DMA_Abort+0x274>
 80046c6:	2301      	movs	r3, #1
 80046c8:	e031      	b.n	800472e <HAL_DMA_Abort+0x276>
 80046ca:	bf00      	nop
 80046cc:	40020010 	.word	0x40020010
 80046d0:	40020028 	.word	0x40020028
 80046d4:	40020040 	.word	0x40020040
 80046d8:	40020058 	.word	0x40020058
 80046dc:	40020070 	.word	0x40020070
 80046e0:	40020088 	.word	0x40020088
 80046e4:	400200a0 	.word	0x400200a0
 80046e8:	400200b8 	.word	0x400200b8
 80046ec:	40020410 	.word	0x40020410
 80046f0:	40020428 	.word	0x40020428
 80046f4:	40020440 	.word	0x40020440
 80046f8:	40020458 	.word	0x40020458
 80046fc:	40020470 	.word	0x40020470
 8004700:	40020488 	.word	0x40020488
 8004704:	400204a0 	.word	0x400204a0
 8004708:	400204b8 	.word	0x400204b8
 800470c:	58025408 	.word	0x58025408
 8004710:	5802541c 	.word	0x5802541c
 8004714:	58025430 	.word	0x58025430
 8004718:	58025444 	.word	0x58025444
 800471c:	58025458 	.word	0x58025458
 8004720:	5802546c 	.word	0x5802546c
 8004724:	58025480 	.word	0x58025480
 8004728:	58025494 	.word	0x58025494
 800472c:	2300      	movs	r3, #0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d007      	beq.n	8004742 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800473c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004740:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a6d      	ldr	r2, [pc, #436]	@ (80048fc <HAL_DMA_Abort+0x444>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d04a      	beq.n	80047e2 <HAL_DMA_Abort+0x32a>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a6b      	ldr	r2, [pc, #428]	@ (8004900 <HAL_DMA_Abort+0x448>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d045      	beq.n	80047e2 <HAL_DMA_Abort+0x32a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a6a      	ldr	r2, [pc, #424]	@ (8004904 <HAL_DMA_Abort+0x44c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d040      	beq.n	80047e2 <HAL_DMA_Abort+0x32a>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a68      	ldr	r2, [pc, #416]	@ (8004908 <HAL_DMA_Abort+0x450>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d03b      	beq.n	80047e2 <HAL_DMA_Abort+0x32a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a67      	ldr	r2, [pc, #412]	@ (800490c <HAL_DMA_Abort+0x454>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d036      	beq.n	80047e2 <HAL_DMA_Abort+0x32a>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a65      	ldr	r2, [pc, #404]	@ (8004910 <HAL_DMA_Abort+0x458>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d031      	beq.n	80047e2 <HAL_DMA_Abort+0x32a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a64      	ldr	r2, [pc, #400]	@ (8004914 <HAL_DMA_Abort+0x45c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d02c      	beq.n	80047e2 <HAL_DMA_Abort+0x32a>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a62      	ldr	r2, [pc, #392]	@ (8004918 <HAL_DMA_Abort+0x460>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d027      	beq.n	80047e2 <HAL_DMA_Abort+0x32a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a61      	ldr	r2, [pc, #388]	@ (800491c <HAL_DMA_Abort+0x464>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d022      	beq.n	80047e2 <HAL_DMA_Abort+0x32a>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a5f      	ldr	r2, [pc, #380]	@ (8004920 <HAL_DMA_Abort+0x468>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d01d      	beq.n	80047e2 <HAL_DMA_Abort+0x32a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a5e      	ldr	r2, [pc, #376]	@ (8004924 <HAL_DMA_Abort+0x46c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d018      	beq.n	80047e2 <HAL_DMA_Abort+0x32a>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a5c      	ldr	r2, [pc, #368]	@ (8004928 <HAL_DMA_Abort+0x470>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d013      	beq.n	80047e2 <HAL_DMA_Abort+0x32a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a5b      	ldr	r2, [pc, #364]	@ (800492c <HAL_DMA_Abort+0x474>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d00e      	beq.n	80047e2 <HAL_DMA_Abort+0x32a>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a59      	ldr	r2, [pc, #356]	@ (8004930 <HAL_DMA_Abort+0x478>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d009      	beq.n	80047e2 <HAL_DMA_Abort+0x32a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a58      	ldr	r2, [pc, #352]	@ (8004934 <HAL_DMA_Abort+0x47c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d004      	beq.n	80047e2 <HAL_DMA_Abort+0x32a>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a56      	ldr	r2, [pc, #344]	@ (8004938 <HAL_DMA_Abort+0x480>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d108      	bne.n	80047f4 <HAL_DMA_Abort+0x33c>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0201 	bic.w	r2, r2, #1
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	e007      	b.n	8004804 <HAL_DMA_Abort+0x34c>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004804:	e013      	b.n	800482e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004806:	f7fd fc7f 	bl	8002108 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b05      	cmp	r3, #5
 8004812:	d90c      	bls.n	800482e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2220      	movs	r2, #32
 8004818:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2203      	movs	r2, #3
 800481e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e12d      	b.n	8004a8a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1e5      	bne.n	8004806 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a2f      	ldr	r2, [pc, #188]	@ (80048fc <HAL_DMA_Abort+0x444>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d04a      	beq.n	80048da <HAL_DMA_Abort+0x422>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a2d      	ldr	r2, [pc, #180]	@ (8004900 <HAL_DMA_Abort+0x448>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d045      	beq.n	80048da <HAL_DMA_Abort+0x422>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a2c      	ldr	r2, [pc, #176]	@ (8004904 <HAL_DMA_Abort+0x44c>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d040      	beq.n	80048da <HAL_DMA_Abort+0x422>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a2a      	ldr	r2, [pc, #168]	@ (8004908 <HAL_DMA_Abort+0x450>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d03b      	beq.n	80048da <HAL_DMA_Abort+0x422>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a29      	ldr	r2, [pc, #164]	@ (800490c <HAL_DMA_Abort+0x454>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d036      	beq.n	80048da <HAL_DMA_Abort+0x422>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a27      	ldr	r2, [pc, #156]	@ (8004910 <HAL_DMA_Abort+0x458>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d031      	beq.n	80048da <HAL_DMA_Abort+0x422>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a26      	ldr	r2, [pc, #152]	@ (8004914 <HAL_DMA_Abort+0x45c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d02c      	beq.n	80048da <HAL_DMA_Abort+0x422>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a24      	ldr	r2, [pc, #144]	@ (8004918 <HAL_DMA_Abort+0x460>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d027      	beq.n	80048da <HAL_DMA_Abort+0x422>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a23      	ldr	r2, [pc, #140]	@ (800491c <HAL_DMA_Abort+0x464>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d022      	beq.n	80048da <HAL_DMA_Abort+0x422>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a21      	ldr	r2, [pc, #132]	@ (8004920 <HAL_DMA_Abort+0x468>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d01d      	beq.n	80048da <HAL_DMA_Abort+0x422>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a20      	ldr	r2, [pc, #128]	@ (8004924 <HAL_DMA_Abort+0x46c>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d018      	beq.n	80048da <HAL_DMA_Abort+0x422>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004928 <HAL_DMA_Abort+0x470>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d013      	beq.n	80048da <HAL_DMA_Abort+0x422>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a1d      	ldr	r2, [pc, #116]	@ (800492c <HAL_DMA_Abort+0x474>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d00e      	beq.n	80048da <HAL_DMA_Abort+0x422>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004930 <HAL_DMA_Abort+0x478>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d009      	beq.n	80048da <HAL_DMA_Abort+0x422>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004934 <HAL_DMA_Abort+0x47c>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d004      	beq.n	80048da <HAL_DMA_Abort+0x422>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a18      	ldr	r2, [pc, #96]	@ (8004938 <HAL_DMA_Abort+0x480>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d101      	bne.n	80048de <HAL_DMA_Abort+0x426>
 80048da:	2301      	movs	r3, #1
 80048dc:	e000      	b.n	80048e0 <HAL_DMA_Abort+0x428>
 80048de:	2300      	movs	r3, #0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d02b      	beq.n	800493c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ee:	f003 031f 	and.w	r3, r3, #31
 80048f2:	223f      	movs	r2, #63	@ 0x3f
 80048f4:	409a      	lsls	r2, r3
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	609a      	str	r2, [r3, #8]
 80048fa:	e02a      	b.n	8004952 <HAL_DMA_Abort+0x49a>
 80048fc:	40020010 	.word	0x40020010
 8004900:	40020028 	.word	0x40020028
 8004904:	40020040 	.word	0x40020040
 8004908:	40020058 	.word	0x40020058
 800490c:	40020070 	.word	0x40020070
 8004910:	40020088 	.word	0x40020088
 8004914:	400200a0 	.word	0x400200a0
 8004918:	400200b8 	.word	0x400200b8
 800491c:	40020410 	.word	0x40020410
 8004920:	40020428 	.word	0x40020428
 8004924:	40020440 	.word	0x40020440
 8004928:	40020458 	.word	0x40020458
 800492c:	40020470 	.word	0x40020470
 8004930:	40020488 	.word	0x40020488
 8004934:	400204a0 	.word	0x400204a0
 8004938:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004940:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004946:	f003 031f 	and.w	r3, r3, #31
 800494a:	2201      	movs	r2, #1
 800494c:	409a      	lsls	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a4f      	ldr	r2, [pc, #316]	@ (8004a94 <HAL_DMA_Abort+0x5dc>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d072      	beq.n	8004a42 <HAL_DMA_Abort+0x58a>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a4d      	ldr	r2, [pc, #308]	@ (8004a98 <HAL_DMA_Abort+0x5e0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d06d      	beq.n	8004a42 <HAL_DMA_Abort+0x58a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a4c      	ldr	r2, [pc, #304]	@ (8004a9c <HAL_DMA_Abort+0x5e4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d068      	beq.n	8004a42 <HAL_DMA_Abort+0x58a>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a4a      	ldr	r2, [pc, #296]	@ (8004aa0 <HAL_DMA_Abort+0x5e8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d063      	beq.n	8004a42 <HAL_DMA_Abort+0x58a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a49      	ldr	r2, [pc, #292]	@ (8004aa4 <HAL_DMA_Abort+0x5ec>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d05e      	beq.n	8004a42 <HAL_DMA_Abort+0x58a>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a47      	ldr	r2, [pc, #284]	@ (8004aa8 <HAL_DMA_Abort+0x5f0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d059      	beq.n	8004a42 <HAL_DMA_Abort+0x58a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a46      	ldr	r2, [pc, #280]	@ (8004aac <HAL_DMA_Abort+0x5f4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d054      	beq.n	8004a42 <HAL_DMA_Abort+0x58a>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a44      	ldr	r2, [pc, #272]	@ (8004ab0 <HAL_DMA_Abort+0x5f8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d04f      	beq.n	8004a42 <HAL_DMA_Abort+0x58a>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a43      	ldr	r2, [pc, #268]	@ (8004ab4 <HAL_DMA_Abort+0x5fc>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d04a      	beq.n	8004a42 <HAL_DMA_Abort+0x58a>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a41      	ldr	r2, [pc, #260]	@ (8004ab8 <HAL_DMA_Abort+0x600>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d045      	beq.n	8004a42 <HAL_DMA_Abort+0x58a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a40      	ldr	r2, [pc, #256]	@ (8004abc <HAL_DMA_Abort+0x604>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d040      	beq.n	8004a42 <HAL_DMA_Abort+0x58a>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a3e      	ldr	r2, [pc, #248]	@ (8004ac0 <HAL_DMA_Abort+0x608>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d03b      	beq.n	8004a42 <HAL_DMA_Abort+0x58a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a3d      	ldr	r2, [pc, #244]	@ (8004ac4 <HAL_DMA_Abort+0x60c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d036      	beq.n	8004a42 <HAL_DMA_Abort+0x58a>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a3b      	ldr	r2, [pc, #236]	@ (8004ac8 <HAL_DMA_Abort+0x610>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d031      	beq.n	8004a42 <HAL_DMA_Abort+0x58a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a3a      	ldr	r2, [pc, #232]	@ (8004acc <HAL_DMA_Abort+0x614>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d02c      	beq.n	8004a42 <HAL_DMA_Abort+0x58a>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a38      	ldr	r2, [pc, #224]	@ (8004ad0 <HAL_DMA_Abort+0x618>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d027      	beq.n	8004a42 <HAL_DMA_Abort+0x58a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a37      	ldr	r2, [pc, #220]	@ (8004ad4 <HAL_DMA_Abort+0x61c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d022      	beq.n	8004a42 <HAL_DMA_Abort+0x58a>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a35      	ldr	r2, [pc, #212]	@ (8004ad8 <HAL_DMA_Abort+0x620>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d01d      	beq.n	8004a42 <HAL_DMA_Abort+0x58a>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a34      	ldr	r2, [pc, #208]	@ (8004adc <HAL_DMA_Abort+0x624>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d018      	beq.n	8004a42 <HAL_DMA_Abort+0x58a>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a32      	ldr	r2, [pc, #200]	@ (8004ae0 <HAL_DMA_Abort+0x628>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d013      	beq.n	8004a42 <HAL_DMA_Abort+0x58a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a31      	ldr	r2, [pc, #196]	@ (8004ae4 <HAL_DMA_Abort+0x62c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00e      	beq.n	8004a42 <HAL_DMA_Abort+0x58a>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a2f      	ldr	r2, [pc, #188]	@ (8004ae8 <HAL_DMA_Abort+0x630>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d009      	beq.n	8004a42 <HAL_DMA_Abort+0x58a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a2e      	ldr	r2, [pc, #184]	@ (8004aec <HAL_DMA_Abort+0x634>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d004      	beq.n	8004a42 <HAL_DMA_Abort+0x58a>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a2c      	ldr	r2, [pc, #176]	@ (8004af0 <HAL_DMA_Abort+0x638>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d101      	bne.n	8004a46 <HAL_DMA_Abort+0x58e>
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <HAL_DMA_Abort+0x590>
 8004a46:	2300      	movs	r3, #0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d015      	beq.n	8004a78 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004a54:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00c      	beq.n	8004a78 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a6c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a76:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3718      	adds	r7, #24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	40020010 	.word	0x40020010
 8004a98:	40020028 	.word	0x40020028
 8004a9c:	40020040 	.word	0x40020040
 8004aa0:	40020058 	.word	0x40020058
 8004aa4:	40020070 	.word	0x40020070
 8004aa8:	40020088 	.word	0x40020088
 8004aac:	400200a0 	.word	0x400200a0
 8004ab0:	400200b8 	.word	0x400200b8
 8004ab4:	40020410 	.word	0x40020410
 8004ab8:	40020428 	.word	0x40020428
 8004abc:	40020440 	.word	0x40020440
 8004ac0:	40020458 	.word	0x40020458
 8004ac4:	40020470 	.word	0x40020470
 8004ac8:	40020488 	.word	0x40020488
 8004acc:	400204a0 	.word	0x400204a0
 8004ad0:	400204b8 	.word	0x400204b8
 8004ad4:	58025408 	.word	0x58025408
 8004ad8:	5802541c 	.word	0x5802541c
 8004adc:	58025430 	.word	0x58025430
 8004ae0:	58025444 	.word	0x58025444
 8004ae4:	58025458 	.word	0x58025458
 8004ae8:	5802546c 	.word	0x5802546c
 8004aec:	58025480 	.word	0x58025480
 8004af0:	58025494 	.word	0x58025494

08004af4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e237      	b.n	8004f76 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d004      	beq.n	8004b1c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2280      	movs	r2, #128	@ 0x80
 8004b16:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e22c      	b.n	8004f76 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a5c      	ldr	r2, [pc, #368]	@ (8004c94 <HAL_DMA_Abort_IT+0x1a0>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d04a      	beq.n	8004bbc <HAL_DMA_Abort_IT+0xc8>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a5b      	ldr	r2, [pc, #364]	@ (8004c98 <HAL_DMA_Abort_IT+0x1a4>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d045      	beq.n	8004bbc <HAL_DMA_Abort_IT+0xc8>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a59      	ldr	r2, [pc, #356]	@ (8004c9c <HAL_DMA_Abort_IT+0x1a8>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d040      	beq.n	8004bbc <HAL_DMA_Abort_IT+0xc8>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a58      	ldr	r2, [pc, #352]	@ (8004ca0 <HAL_DMA_Abort_IT+0x1ac>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d03b      	beq.n	8004bbc <HAL_DMA_Abort_IT+0xc8>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a56      	ldr	r2, [pc, #344]	@ (8004ca4 <HAL_DMA_Abort_IT+0x1b0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d036      	beq.n	8004bbc <HAL_DMA_Abort_IT+0xc8>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a55      	ldr	r2, [pc, #340]	@ (8004ca8 <HAL_DMA_Abort_IT+0x1b4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d031      	beq.n	8004bbc <HAL_DMA_Abort_IT+0xc8>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a53      	ldr	r2, [pc, #332]	@ (8004cac <HAL_DMA_Abort_IT+0x1b8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d02c      	beq.n	8004bbc <HAL_DMA_Abort_IT+0xc8>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a52      	ldr	r2, [pc, #328]	@ (8004cb0 <HAL_DMA_Abort_IT+0x1bc>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d027      	beq.n	8004bbc <HAL_DMA_Abort_IT+0xc8>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a50      	ldr	r2, [pc, #320]	@ (8004cb4 <HAL_DMA_Abort_IT+0x1c0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d022      	beq.n	8004bbc <HAL_DMA_Abort_IT+0xc8>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a4f      	ldr	r2, [pc, #316]	@ (8004cb8 <HAL_DMA_Abort_IT+0x1c4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d01d      	beq.n	8004bbc <HAL_DMA_Abort_IT+0xc8>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a4d      	ldr	r2, [pc, #308]	@ (8004cbc <HAL_DMA_Abort_IT+0x1c8>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d018      	beq.n	8004bbc <HAL_DMA_Abort_IT+0xc8>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a4c      	ldr	r2, [pc, #304]	@ (8004cc0 <HAL_DMA_Abort_IT+0x1cc>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d013      	beq.n	8004bbc <HAL_DMA_Abort_IT+0xc8>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a4a      	ldr	r2, [pc, #296]	@ (8004cc4 <HAL_DMA_Abort_IT+0x1d0>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00e      	beq.n	8004bbc <HAL_DMA_Abort_IT+0xc8>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a49      	ldr	r2, [pc, #292]	@ (8004cc8 <HAL_DMA_Abort_IT+0x1d4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d009      	beq.n	8004bbc <HAL_DMA_Abort_IT+0xc8>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a47      	ldr	r2, [pc, #284]	@ (8004ccc <HAL_DMA_Abort_IT+0x1d8>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d004      	beq.n	8004bbc <HAL_DMA_Abort_IT+0xc8>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a46      	ldr	r2, [pc, #280]	@ (8004cd0 <HAL_DMA_Abort_IT+0x1dc>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d101      	bne.n	8004bc0 <HAL_DMA_Abort_IT+0xcc>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e000      	b.n	8004bc2 <HAL_DMA_Abort_IT+0xce>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 8086 	beq.w	8004cd4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2204      	movs	r2, #4
 8004bcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a2f      	ldr	r2, [pc, #188]	@ (8004c94 <HAL_DMA_Abort_IT+0x1a0>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d04a      	beq.n	8004c70 <HAL_DMA_Abort_IT+0x17c>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a2e      	ldr	r2, [pc, #184]	@ (8004c98 <HAL_DMA_Abort_IT+0x1a4>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d045      	beq.n	8004c70 <HAL_DMA_Abort_IT+0x17c>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a2c      	ldr	r2, [pc, #176]	@ (8004c9c <HAL_DMA_Abort_IT+0x1a8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d040      	beq.n	8004c70 <HAL_DMA_Abort_IT+0x17c>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a2b      	ldr	r2, [pc, #172]	@ (8004ca0 <HAL_DMA_Abort_IT+0x1ac>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d03b      	beq.n	8004c70 <HAL_DMA_Abort_IT+0x17c>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a29      	ldr	r2, [pc, #164]	@ (8004ca4 <HAL_DMA_Abort_IT+0x1b0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d036      	beq.n	8004c70 <HAL_DMA_Abort_IT+0x17c>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a28      	ldr	r2, [pc, #160]	@ (8004ca8 <HAL_DMA_Abort_IT+0x1b4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d031      	beq.n	8004c70 <HAL_DMA_Abort_IT+0x17c>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a26      	ldr	r2, [pc, #152]	@ (8004cac <HAL_DMA_Abort_IT+0x1b8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d02c      	beq.n	8004c70 <HAL_DMA_Abort_IT+0x17c>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a25      	ldr	r2, [pc, #148]	@ (8004cb0 <HAL_DMA_Abort_IT+0x1bc>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d027      	beq.n	8004c70 <HAL_DMA_Abort_IT+0x17c>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a23      	ldr	r2, [pc, #140]	@ (8004cb4 <HAL_DMA_Abort_IT+0x1c0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d022      	beq.n	8004c70 <HAL_DMA_Abort_IT+0x17c>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a22      	ldr	r2, [pc, #136]	@ (8004cb8 <HAL_DMA_Abort_IT+0x1c4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d01d      	beq.n	8004c70 <HAL_DMA_Abort_IT+0x17c>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a20      	ldr	r2, [pc, #128]	@ (8004cbc <HAL_DMA_Abort_IT+0x1c8>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d018      	beq.n	8004c70 <HAL_DMA_Abort_IT+0x17c>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a1f      	ldr	r2, [pc, #124]	@ (8004cc0 <HAL_DMA_Abort_IT+0x1cc>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d013      	beq.n	8004c70 <HAL_DMA_Abort_IT+0x17c>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8004cc4 <HAL_DMA_Abort_IT+0x1d0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00e      	beq.n	8004c70 <HAL_DMA_Abort_IT+0x17c>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a1c      	ldr	r2, [pc, #112]	@ (8004cc8 <HAL_DMA_Abort_IT+0x1d4>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d009      	beq.n	8004c70 <HAL_DMA_Abort_IT+0x17c>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1a      	ldr	r2, [pc, #104]	@ (8004ccc <HAL_DMA_Abort_IT+0x1d8>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d004      	beq.n	8004c70 <HAL_DMA_Abort_IT+0x17c>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a19      	ldr	r2, [pc, #100]	@ (8004cd0 <HAL_DMA_Abort_IT+0x1dc>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d108      	bne.n	8004c82 <HAL_DMA_Abort_IT+0x18e>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0201 	bic.w	r2, r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	e178      	b.n	8004f74 <HAL_DMA_Abort_IT+0x480>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0201 	bic.w	r2, r2, #1
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	e16f      	b.n	8004f74 <HAL_DMA_Abort_IT+0x480>
 8004c94:	40020010 	.word	0x40020010
 8004c98:	40020028 	.word	0x40020028
 8004c9c:	40020040 	.word	0x40020040
 8004ca0:	40020058 	.word	0x40020058
 8004ca4:	40020070 	.word	0x40020070
 8004ca8:	40020088 	.word	0x40020088
 8004cac:	400200a0 	.word	0x400200a0
 8004cb0:	400200b8 	.word	0x400200b8
 8004cb4:	40020410 	.word	0x40020410
 8004cb8:	40020428 	.word	0x40020428
 8004cbc:	40020440 	.word	0x40020440
 8004cc0:	40020458 	.word	0x40020458
 8004cc4:	40020470 	.word	0x40020470
 8004cc8:	40020488 	.word	0x40020488
 8004ccc:	400204a0 	.word	0x400204a0
 8004cd0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 020e 	bic.w	r2, r2, #14
 8004ce2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a6c      	ldr	r2, [pc, #432]	@ (8004e9c <HAL_DMA_Abort_IT+0x3a8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d04a      	beq.n	8004d84 <HAL_DMA_Abort_IT+0x290>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a6b      	ldr	r2, [pc, #428]	@ (8004ea0 <HAL_DMA_Abort_IT+0x3ac>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d045      	beq.n	8004d84 <HAL_DMA_Abort_IT+0x290>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a69      	ldr	r2, [pc, #420]	@ (8004ea4 <HAL_DMA_Abort_IT+0x3b0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d040      	beq.n	8004d84 <HAL_DMA_Abort_IT+0x290>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a68      	ldr	r2, [pc, #416]	@ (8004ea8 <HAL_DMA_Abort_IT+0x3b4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d03b      	beq.n	8004d84 <HAL_DMA_Abort_IT+0x290>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a66      	ldr	r2, [pc, #408]	@ (8004eac <HAL_DMA_Abort_IT+0x3b8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d036      	beq.n	8004d84 <HAL_DMA_Abort_IT+0x290>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a65      	ldr	r2, [pc, #404]	@ (8004eb0 <HAL_DMA_Abort_IT+0x3bc>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d031      	beq.n	8004d84 <HAL_DMA_Abort_IT+0x290>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a63      	ldr	r2, [pc, #396]	@ (8004eb4 <HAL_DMA_Abort_IT+0x3c0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d02c      	beq.n	8004d84 <HAL_DMA_Abort_IT+0x290>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a62      	ldr	r2, [pc, #392]	@ (8004eb8 <HAL_DMA_Abort_IT+0x3c4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d027      	beq.n	8004d84 <HAL_DMA_Abort_IT+0x290>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a60      	ldr	r2, [pc, #384]	@ (8004ebc <HAL_DMA_Abort_IT+0x3c8>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d022      	beq.n	8004d84 <HAL_DMA_Abort_IT+0x290>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a5f      	ldr	r2, [pc, #380]	@ (8004ec0 <HAL_DMA_Abort_IT+0x3cc>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d01d      	beq.n	8004d84 <HAL_DMA_Abort_IT+0x290>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a5d      	ldr	r2, [pc, #372]	@ (8004ec4 <HAL_DMA_Abort_IT+0x3d0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d018      	beq.n	8004d84 <HAL_DMA_Abort_IT+0x290>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a5c      	ldr	r2, [pc, #368]	@ (8004ec8 <HAL_DMA_Abort_IT+0x3d4>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d013      	beq.n	8004d84 <HAL_DMA_Abort_IT+0x290>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a5a      	ldr	r2, [pc, #360]	@ (8004ecc <HAL_DMA_Abort_IT+0x3d8>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d00e      	beq.n	8004d84 <HAL_DMA_Abort_IT+0x290>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a59      	ldr	r2, [pc, #356]	@ (8004ed0 <HAL_DMA_Abort_IT+0x3dc>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d009      	beq.n	8004d84 <HAL_DMA_Abort_IT+0x290>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a57      	ldr	r2, [pc, #348]	@ (8004ed4 <HAL_DMA_Abort_IT+0x3e0>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d004      	beq.n	8004d84 <HAL_DMA_Abort_IT+0x290>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a56      	ldr	r2, [pc, #344]	@ (8004ed8 <HAL_DMA_Abort_IT+0x3e4>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d108      	bne.n	8004d96 <HAL_DMA_Abort_IT+0x2a2>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0201 	bic.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	e007      	b.n	8004da6 <HAL_DMA_Abort_IT+0x2b2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0201 	bic.w	r2, r2, #1
 8004da4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a3c      	ldr	r2, [pc, #240]	@ (8004e9c <HAL_DMA_Abort_IT+0x3a8>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d072      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x3a2>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a3a      	ldr	r2, [pc, #232]	@ (8004ea0 <HAL_DMA_Abort_IT+0x3ac>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d06d      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x3a2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a39      	ldr	r2, [pc, #228]	@ (8004ea4 <HAL_DMA_Abort_IT+0x3b0>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d068      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x3a2>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a37      	ldr	r2, [pc, #220]	@ (8004ea8 <HAL_DMA_Abort_IT+0x3b4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d063      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x3a2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a36      	ldr	r2, [pc, #216]	@ (8004eac <HAL_DMA_Abort_IT+0x3b8>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d05e      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x3a2>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a34      	ldr	r2, [pc, #208]	@ (8004eb0 <HAL_DMA_Abort_IT+0x3bc>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d059      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x3a2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a33      	ldr	r2, [pc, #204]	@ (8004eb4 <HAL_DMA_Abort_IT+0x3c0>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d054      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x3a2>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a31      	ldr	r2, [pc, #196]	@ (8004eb8 <HAL_DMA_Abort_IT+0x3c4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d04f      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x3a2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a30      	ldr	r2, [pc, #192]	@ (8004ebc <HAL_DMA_Abort_IT+0x3c8>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d04a      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x3a2>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a2e      	ldr	r2, [pc, #184]	@ (8004ec0 <HAL_DMA_Abort_IT+0x3cc>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d045      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x3a2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a2d      	ldr	r2, [pc, #180]	@ (8004ec4 <HAL_DMA_Abort_IT+0x3d0>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d040      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x3a2>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a2b      	ldr	r2, [pc, #172]	@ (8004ec8 <HAL_DMA_Abort_IT+0x3d4>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d03b      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x3a2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a2a      	ldr	r2, [pc, #168]	@ (8004ecc <HAL_DMA_Abort_IT+0x3d8>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d036      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x3a2>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a28      	ldr	r2, [pc, #160]	@ (8004ed0 <HAL_DMA_Abort_IT+0x3dc>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d031      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x3a2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a27      	ldr	r2, [pc, #156]	@ (8004ed4 <HAL_DMA_Abort_IT+0x3e0>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d02c      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x3a2>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a25      	ldr	r2, [pc, #148]	@ (8004ed8 <HAL_DMA_Abort_IT+0x3e4>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d027      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x3a2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a24      	ldr	r2, [pc, #144]	@ (8004edc <HAL_DMA_Abort_IT+0x3e8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d022      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x3a2>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a22      	ldr	r2, [pc, #136]	@ (8004ee0 <HAL_DMA_Abort_IT+0x3ec>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d01d      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x3a2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a21      	ldr	r2, [pc, #132]	@ (8004ee4 <HAL_DMA_Abort_IT+0x3f0>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d018      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x3a2>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a1f      	ldr	r2, [pc, #124]	@ (8004ee8 <HAL_DMA_Abort_IT+0x3f4>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d013      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x3a2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a1e      	ldr	r2, [pc, #120]	@ (8004eec <HAL_DMA_Abort_IT+0x3f8>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00e      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x3a2>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ef0 <HAL_DMA_Abort_IT+0x3fc>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d009      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x3a2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a1b      	ldr	r2, [pc, #108]	@ (8004ef4 <HAL_DMA_Abort_IT+0x400>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d004      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x3a2>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a19      	ldr	r2, [pc, #100]	@ (8004ef8 <HAL_DMA_Abort_IT+0x404>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d132      	bne.n	8004efc <HAL_DMA_Abort_IT+0x408>
 8004e96:	2301      	movs	r3, #1
 8004e98:	e031      	b.n	8004efe <HAL_DMA_Abort_IT+0x40a>
 8004e9a:	bf00      	nop
 8004e9c:	40020010 	.word	0x40020010
 8004ea0:	40020028 	.word	0x40020028
 8004ea4:	40020040 	.word	0x40020040
 8004ea8:	40020058 	.word	0x40020058
 8004eac:	40020070 	.word	0x40020070
 8004eb0:	40020088 	.word	0x40020088
 8004eb4:	400200a0 	.word	0x400200a0
 8004eb8:	400200b8 	.word	0x400200b8
 8004ebc:	40020410 	.word	0x40020410
 8004ec0:	40020428 	.word	0x40020428
 8004ec4:	40020440 	.word	0x40020440
 8004ec8:	40020458 	.word	0x40020458
 8004ecc:	40020470 	.word	0x40020470
 8004ed0:	40020488 	.word	0x40020488
 8004ed4:	400204a0 	.word	0x400204a0
 8004ed8:	400204b8 	.word	0x400204b8
 8004edc:	58025408 	.word	0x58025408
 8004ee0:	5802541c 	.word	0x5802541c
 8004ee4:	58025430 	.word	0x58025430
 8004ee8:	58025444 	.word	0x58025444
 8004eec:	58025458 	.word	0x58025458
 8004ef0:	5802546c 	.word	0x5802546c
 8004ef4:	58025480 	.word	0x58025480
 8004ef8:	58025494 	.word	0x58025494
 8004efc:	2300      	movs	r3, #0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d028      	beq.n	8004f54 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f10:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f16:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f1c:	f003 031f 	and.w	r3, r3, #31
 8004f20:	2201      	movs	r2, #1
 8004f22:	409a      	lsls	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004f30:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00c      	beq.n	8004f54 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f48:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004f52:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop

08004f80 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08a      	sub	sp, #40	@ 0x28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f8c:	4b67      	ldr	r3, [pc, #412]	@ (800512c <HAL_DMA_IRQHandler+0x1ac>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a67      	ldr	r2, [pc, #412]	@ (8005130 <HAL_DMA_IRQHandler+0x1b0>)
 8004f92:	fba2 2303 	umull	r2, r3, r2, r3
 8004f96:	0a9b      	lsrs	r3, r3, #10
 8004f98:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f9e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a5f      	ldr	r2, [pc, #380]	@ (8005134 <HAL_DMA_IRQHandler+0x1b4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d04a      	beq.n	8005052 <HAL_DMA_IRQHandler+0xd2>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a5d      	ldr	r2, [pc, #372]	@ (8005138 <HAL_DMA_IRQHandler+0x1b8>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d045      	beq.n	8005052 <HAL_DMA_IRQHandler+0xd2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a5c      	ldr	r2, [pc, #368]	@ (800513c <HAL_DMA_IRQHandler+0x1bc>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d040      	beq.n	8005052 <HAL_DMA_IRQHandler+0xd2>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a5a      	ldr	r2, [pc, #360]	@ (8005140 <HAL_DMA_IRQHandler+0x1c0>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d03b      	beq.n	8005052 <HAL_DMA_IRQHandler+0xd2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a59      	ldr	r2, [pc, #356]	@ (8005144 <HAL_DMA_IRQHandler+0x1c4>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d036      	beq.n	8005052 <HAL_DMA_IRQHandler+0xd2>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a57      	ldr	r2, [pc, #348]	@ (8005148 <HAL_DMA_IRQHandler+0x1c8>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d031      	beq.n	8005052 <HAL_DMA_IRQHandler+0xd2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a56      	ldr	r2, [pc, #344]	@ (800514c <HAL_DMA_IRQHandler+0x1cc>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d02c      	beq.n	8005052 <HAL_DMA_IRQHandler+0xd2>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a54      	ldr	r2, [pc, #336]	@ (8005150 <HAL_DMA_IRQHandler+0x1d0>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d027      	beq.n	8005052 <HAL_DMA_IRQHandler+0xd2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a53      	ldr	r2, [pc, #332]	@ (8005154 <HAL_DMA_IRQHandler+0x1d4>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d022      	beq.n	8005052 <HAL_DMA_IRQHandler+0xd2>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a51      	ldr	r2, [pc, #324]	@ (8005158 <HAL_DMA_IRQHandler+0x1d8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d01d      	beq.n	8005052 <HAL_DMA_IRQHandler+0xd2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a50      	ldr	r2, [pc, #320]	@ (800515c <HAL_DMA_IRQHandler+0x1dc>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d018      	beq.n	8005052 <HAL_DMA_IRQHandler+0xd2>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a4e      	ldr	r2, [pc, #312]	@ (8005160 <HAL_DMA_IRQHandler+0x1e0>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d013      	beq.n	8005052 <HAL_DMA_IRQHandler+0xd2>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a4d      	ldr	r2, [pc, #308]	@ (8005164 <HAL_DMA_IRQHandler+0x1e4>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d00e      	beq.n	8005052 <HAL_DMA_IRQHandler+0xd2>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a4b      	ldr	r2, [pc, #300]	@ (8005168 <HAL_DMA_IRQHandler+0x1e8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d009      	beq.n	8005052 <HAL_DMA_IRQHandler+0xd2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a4a      	ldr	r2, [pc, #296]	@ (800516c <HAL_DMA_IRQHandler+0x1ec>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d004      	beq.n	8005052 <HAL_DMA_IRQHandler+0xd2>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a48      	ldr	r2, [pc, #288]	@ (8005170 <HAL_DMA_IRQHandler+0x1f0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d101      	bne.n	8005056 <HAL_DMA_IRQHandler+0xd6>
 8005052:	2301      	movs	r3, #1
 8005054:	e000      	b.n	8005058 <HAL_DMA_IRQHandler+0xd8>
 8005056:	2300      	movs	r3, #0
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 842b 	beq.w	80058b4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005062:	f003 031f 	and.w	r3, r3, #31
 8005066:	2208      	movs	r2, #8
 8005068:	409a      	lsls	r2, r3
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	4013      	ands	r3, r2
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 80a2 	beq.w	80051b8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a2e      	ldr	r2, [pc, #184]	@ (8005134 <HAL_DMA_IRQHandler+0x1b4>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d04a      	beq.n	8005114 <HAL_DMA_IRQHandler+0x194>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a2d      	ldr	r2, [pc, #180]	@ (8005138 <HAL_DMA_IRQHandler+0x1b8>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d045      	beq.n	8005114 <HAL_DMA_IRQHandler+0x194>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a2b      	ldr	r2, [pc, #172]	@ (800513c <HAL_DMA_IRQHandler+0x1bc>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d040      	beq.n	8005114 <HAL_DMA_IRQHandler+0x194>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a2a      	ldr	r2, [pc, #168]	@ (8005140 <HAL_DMA_IRQHandler+0x1c0>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d03b      	beq.n	8005114 <HAL_DMA_IRQHandler+0x194>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a28      	ldr	r2, [pc, #160]	@ (8005144 <HAL_DMA_IRQHandler+0x1c4>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d036      	beq.n	8005114 <HAL_DMA_IRQHandler+0x194>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a27      	ldr	r2, [pc, #156]	@ (8005148 <HAL_DMA_IRQHandler+0x1c8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d031      	beq.n	8005114 <HAL_DMA_IRQHandler+0x194>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a25      	ldr	r2, [pc, #148]	@ (800514c <HAL_DMA_IRQHandler+0x1cc>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d02c      	beq.n	8005114 <HAL_DMA_IRQHandler+0x194>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a24      	ldr	r2, [pc, #144]	@ (8005150 <HAL_DMA_IRQHandler+0x1d0>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d027      	beq.n	8005114 <HAL_DMA_IRQHandler+0x194>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a22      	ldr	r2, [pc, #136]	@ (8005154 <HAL_DMA_IRQHandler+0x1d4>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d022      	beq.n	8005114 <HAL_DMA_IRQHandler+0x194>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a21      	ldr	r2, [pc, #132]	@ (8005158 <HAL_DMA_IRQHandler+0x1d8>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d01d      	beq.n	8005114 <HAL_DMA_IRQHandler+0x194>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a1f      	ldr	r2, [pc, #124]	@ (800515c <HAL_DMA_IRQHandler+0x1dc>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d018      	beq.n	8005114 <HAL_DMA_IRQHandler+0x194>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005160 <HAL_DMA_IRQHandler+0x1e0>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d013      	beq.n	8005114 <HAL_DMA_IRQHandler+0x194>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a1c      	ldr	r2, [pc, #112]	@ (8005164 <HAL_DMA_IRQHandler+0x1e4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00e      	beq.n	8005114 <HAL_DMA_IRQHandler+0x194>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005168 <HAL_DMA_IRQHandler+0x1e8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d009      	beq.n	8005114 <HAL_DMA_IRQHandler+0x194>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a19      	ldr	r2, [pc, #100]	@ (800516c <HAL_DMA_IRQHandler+0x1ec>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d004      	beq.n	8005114 <HAL_DMA_IRQHandler+0x194>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a18      	ldr	r2, [pc, #96]	@ (8005170 <HAL_DMA_IRQHandler+0x1f0>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d12f      	bne.n	8005174 <HAL_DMA_IRQHandler+0x1f4>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0304 	and.w	r3, r3, #4
 800511e:	2b00      	cmp	r3, #0
 8005120:	bf14      	ite	ne
 8005122:	2301      	movne	r3, #1
 8005124:	2300      	moveq	r3, #0
 8005126:	b2db      	uxtb	r3, r3
 8005128:	e02e      	b.n	8005188 <HAL_DMA_IRQHandler+0x208>
 800512a:	bf00      	nop
 800512c:	24000000 	.word	0x24000000
 8005130:	1b4e81b5 	.word	0x1b4e81b5
 8005134:	40020010 	.word	0x40020010
 8005138:	40020028 	.word	0x40020028
 800513c:	40020040 	.word	0x40020040
 8005140:	40020058 	.word	0x40020058
 8005144:	40020070 	.word	0x40020070
 8005148:	40020088 	.word	0x40020088
 800514c:	400200a0 	.word	0x400200a0
 8005150:	400200b8 	.word	0x400200b8
 8005154:	40020410 	.word	0x40020410
 8005158:	40020428 	.word	0x40020428
 800515c:	40020440 	.word	0x40020440
 8005160:	40020458 	.word	0x40020458
 8005164:	40020470 	.word	0x40020470
 8005168:	40020488 	.word	0x40020488
 800516c:	400204a0 	.word	0x400204a0
 8005170:	400204b8 	.word	0x400204b8
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0308 	and.w	r3, r3, #8
 800517e:	2b00      	cmp	r3, #0
 8005180:	bf14      	ite	ne
 8005182:	2301      	movne	r3, #1
 8005184:	2300      	moveq	r3, #0
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d015      	beq.n	80051b8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0204 	bic.w	r2, r2, #4
 800519a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051a0:	f003 031f 	and.w	r3, r3, #31
 80051a4:	2208      	movs	r2, #8
 80051a6:	409a      	lsls	r2, r3
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051b0:	f043 0201 	orr.w	r2, r3, #1
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051bc:	f003 031f 	and.w	r3, r3, #31
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	fa22 f303 	lsr.w	r3, r2, r3
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d06e      	beq.n	80052ac <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a69      	ldr	r2, [pc, #420]	@ (8005378 <HAL_DMA_IRQHandler+0x3f8>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d04a      	beq.n	800526e <HAL_DMA_IRQHandler+0x2ee>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a67      	ldr	r2, [pc, #412]	@ (800537c <HAL_DMA_IRQHandler+0x3fc>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d045      	beq.n	800526e <HAL_DMA_IRQHandler+0x2ee>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a66      	ldr	r2, [pc, #408]	@ (8005380 <HAL_DMA_IRQHandler+0x400>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d040      	beq.n	800526e <HAL_DMA_IRQHandler+0x2ee>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a64      	ldr	r2, [pc, #400]	@ (8005384 <HAL_DMA_IRQHandler+0x404>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d03b      	beq.n	800526e <HAL_DMA_IRQHandler+0x2ee>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a63      	ldr	r2, [pc, #396]	@ (8005388 <HAL_DMA_IRQHandler+0x408>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d036      	beq.n	800526e <HAL_DMA_IRQHandler+0x2ee>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a61      	ldr	r2, [pc, #388]	@ (800538c <HAL_DMA_IRQHandler+0x40c>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d031      	beq.n	800526e <HAL_DMA_IRQHandler+0x2ee>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a60      	ldr	r2, [pc, #384]	@ (8005390 <HAL_DMA_IRQHandler+0x410>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d02c      	beq.n	800526e <HAL_DMA_IRQHandler+0x2ee>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a5e      	ldr	r2, [pc, #376]	@ (8005394 <HAL_DMA_IRQHandler+0x414>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d027      	beq.n	800526e <HAL_DMA_IRQHandler+0x2ee>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a5d      	ldr	r2, [pc, #372]	@ (8005398 <HAL_DMA_IRQHandler+0x418>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d022      	beq.n	800526e <HAL_DMA_IRQHandler+0x2ee>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a5b      	ldr	r2, [pc, #364]	@ (800539c <HAL_DMA_IRQHandler+0x41c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d01d      	beq.n	800526e <HAL_DMA_IRQHandler+0x2ee>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a5a      	ldr	r2, [pc, #360]	@ (80053a0 <HAL_DMA_IRQHandler+0x420>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d018      	beq.n	800526e <HAL_DMA_IRQHandler+0x2ee>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a58      	ldr	r2, [pc, #352]	@ (80053a4 <HAL_DMA_IRQHandler+0x424>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d013      	beq.n	800526e <HAL_DMA_IRQHandler+0x2ee>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a57      	ldr	r2, [pc, #348]	@ (80053a8 <HAL_DMA_IRQHandler+0x428>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d00e      	beq.n	800526e <HAL_DMA_IRQHandler+0x2ee>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a55      	ldr	r2, [pc, #340]	@ (80053ac <HAL_DMA_IRQHandler+0x42c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d009      	beq.n	800526e <HAL_DMA_IRQHandler+0x2ee>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a54      	ldr	r2, [pc, #336]	@ (80053b0 <HAL_DMA_IRQHandler+0x430>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d004      	beq.n	800526e <HAL_DMA_IRQHandler+0x2ee>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a52      	ldr	r2, [pc, #328]	@ (80053b4 <HAL_DMA_IRQHandler+0x434>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d10a      	bne.n	8005284 <HAL_DMA_IRQHandler+0x304>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005278:	2b00      	cmp	r3, #0
 800527a:	bf14      	ite	ne
 800527c:	2301      	movne	r3, #1
 800527e:	2300      	moveq	r3, #0
 8005280:	b2db      	uxtb	r3, r3
 8005282:	e003      	b.n	800528c <HAL_DMA_IRQHandler+0x30c>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2300      	movs	r3, #0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00d      	beq.n	80052ac <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005294:	f003 031f 	and.w	r3, r3, #31
 8005298:	2201      	movs	r2, #1
 800529a:	409a      	lsls	r2, r3
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a4:	f043 0202 	orr.w	r2, r3, #2
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052b0:	f003 031f 	and.w	r3, r3, #31
 80052b4:	2204      	movs	r2, #4
 80052b6:	409a      	lsls	r2, r3
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	4013      	ands	r3, r2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 808f 	beq.w	80053e0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a2c      	ldr	r2, [pc, #176]	@ (8005378 <HAL_DMA_IRQHandler+0x3f8>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d04a      	beq.n	8005362 <HAL_DMA_IRQHandler+0x3e2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a2a      	ldr	r2, [pc, #168]	@ (800537c <HAL_DMA_IRQHandler+0x3fc>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d045      	beq.n	8005362 <HAL_DMA_IRQHandler+0x3e2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a29      	ldr	r2, [pc, #164]	@ (8005380 <HAL_DMA_IRQHandler+0x400>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d040      	beq.n	8005362 <HAL_DMA_IRQHandler+0x3e2>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a27      	ldr	r2, [pc, #156]	@ (8005384 <HAL_DMA_IRQHandler+0x404>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d03b      	beq.n	8005362 <HAL_DMA_IRQHandler+0x3e2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a26      	ldr	r2, [pc, #152]	@ (8005388 <HAL_DMA_IRQHandler+0x408>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d036      	beq.n	8005362 <HAL_DMA_IRQHandler+0x3e2>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a24      	ldr	r2, [pc, #144]	@ (800538c <HAL_DMA_IRQHandler+0x40c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d031      	beq.n	8005362 <HAL_DMA_IRQHandler+0x3e2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a23      	ldr	r2, [pc, #140]	@ (8005390 <HAL_DMA_IRQHandler+0x410>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d02c      	beq.n	8005362 <HAL_DMA_IRQHandler+0x3e2>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a21      	ldr	r2, [pc, #132]	@ (8005394 <HAL_DMA_IRQHandler+0x414>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d027      	beq.n	8005362 <HAL_DMA_IRQHandler+0x3e2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a20      	ldr	r2, [pc, #128]	@ (8005398 <HAL_DMA_IRQHandler+0x418>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d022      	beq.n	8005362 <HAL_DMA_IRQHandler+0x3e2>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a1e      	ldr	r2, [pc, #120]	@ (800539c <HAL_DMA_IRQHandler+0x41c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d01d      	beq.n	8005362 <HAL_DMA_IRQHandler+0x3e2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a1d      	ldr	r2, [pc, #116]	@ (80053a0 <HAL_DMA_IRQHandler+0x420>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d018      	beq.n	8005362 <HAL_DMA_IRQHandler+0x3e2>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a1b      	ldr	r2, [pc, #108]	@ (80053a4 <HAL_DMA_IRQHandler+0x424>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d013      	beq.n	8005362 <HAL_DMA_IRQHandler+0x3e2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a1a      	ldr	r2, [pc, #104]	@ (80053a8 <HAL_DMA_IRQHandler+0x428>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d00e      	beq.n	8005362 <HAL_DMA_IRQHandler+0x3e2>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a18      	ldr	r2, [pc, #96]	@ (80053ac <HAL_DMA_IRQHandler+0x42c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d009      	beq.n	8005362 <HAL_DMA_IRQHandler+0x3e2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a17      	ldr	r2, [pc, #92]	@ (80053b0 <HAL_DMA_IRQHandler+0x430>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d004      	beq.n	8005362 <HAL_DMA_IRQHandler+0x3e2>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a15      	ldr	r2, [pc, #84]	@ (80053b4 <HAL_DMA_IRQHandler+0x434>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d12a      	bne.n	80053b8 <HAL_DMA_IRQHandler+0x438>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	bf14      	ite	ne
 8005370:	2301      	movne	r3, #1
 8005372:	2300      	moveq	r3, #0
 8005374:	b2db      	uxtb	r3, r3
 8005376:	e023      	b.n	80053c0 <HAL_DMA_IRQHandler+0x440>
 8005378:	40020010 	.word	0x40020010
 800537c:	40020028 	.word	0x40020028
 8005380:	40020040 	.word	0x40020040
 8005384:	40020058 	.word	0x40020058
 8005388:	40020070 	.word	0x40020070
 800538c:	40020088 	.word	0x40020088
 8005390:	400200a0 	.word	0x400200a0
 8005394:	400200b8 	.word	0x400200b8
 8005398:	40020410 	.word	0x40020410
 800539c:	40020428 	.word	0x40020428
 80053a0:	40020440 	.word	0x40020440
 80053a4:	40020458 	.word	0x40020458
 80053a8:	40020470 	.word	0x40020470
 80053ac:	40020488 	.word	0x40020488
 80053b0:	400204a0 	.word	0x400204a0
 80053b4:	400204b8 	.word	0x400204b8
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2300      	movs	r3, #0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00d      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053c8:	f003 031f 	and.w	r3, r3, #31
 80053cc:	2204      	movs	r2, #4
 80053ce:	409a      	lsls	r2, r3
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d8:	f043 0204 	orr.w	r2, r3, #4
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053e4:	f003 031f 	and.w	r3, r3, #31
 80053e8:	2210      	movs	r2, #16
 80053ea:	409a      	lsls	r2, r3
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	4013      	ands	r3, r2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 80a6 	beq.w	8005542 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a85      	ldr	r2, [pc, #532]	@ (8005610 <HAL_DMA_IRQHandler+0x690>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d04a      	beq.n	8005496 <HAL_DMA_IRQHandler+0x516>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a83      	ldr	r2, [pc, #524]	@ (8005614 <HAL_DMA_IRQHandler+0x694>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d045      	beq.n	8005496 <HAL_DMA_IRQHandler+0x516>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a82      	ldr	r2, [pc, #520]	@ (8005618 <HAL_DMA_IRQHandler+0x698>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d040      	beq.n	8005496 <HAL_DMA_IRQHandler+0x516>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a80      	ldr	r2, [pc, #512]	@ (800561c <HAL_DMA_IRQHandler+0x69c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d03b      	beq.n	8005496 <HAL_DMA_IRQHandler+0x516>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a7f      	ldr	r2, [pc, #508]	@ (8005620 <HAL_DMA_IRQHandler+0x6a0>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d036      	beq.n	8005496 <HAL_DMA_IRQHandler+0x516>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a7d      	ldr	r2, [pc, #500]	@ (8005624 <HAL_DMA_IRQHandler+0x6a4>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d031      	beq.n	8005496 <HAL_DMA_IRQHandler+0x516>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a7c      	ldr	r2, [pc, #496]	@ (8005628 <HAL_DMA_IRQHandler+0x6a8>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d02c      	beq.n	8005496 <HAL_DMA_IRQHandler+0x516>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a7a      	ldr	r2, [pc, #488]	@ (800562c <HAL_DMA_IRQHandler+0x6ac>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d027      	beq.n	8005496 <HAL_DMA_IRQHandler+0x516>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a79      	ldr	r2, [pc, #484]	@ (8005630 <HAL_DMA_IRQHandler+0x6b0>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d022      	beq.n	8005496 <HAL_DMA_IRQHandler+0x516>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a77      	ldr	r2, [pc, #476]	@ (8005634 <HAL_DMA_IRQHandler+0x6b4>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d01d      	beq.n	8005496 <HAL_DMA_IRQHandler+0x516>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a76      	ldr	r2, [pc, #472]	@ (8005638 <HAL_DMA_IRQHandler+0x6b8>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d018      	beq.n	8005496 <HAL_DMA_IRQHandler+0x516>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a74      	ldr	r2, [pc, #464]	@ (800563c <HAL_DMA_IRQHandler+0x6bc>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d013      	beq.n	8005496 <HAL_DMA_IRQHandler+0x516>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a73      	ldr	r2, [pc, #460]	@ (8005640 <HAL_DMA_IRQHandler+0x6c0>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d00e      	beq.n	8005496 <HAL_DMA_IRQHandler+0x516>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a71      	ldr	r2, [pc, #452]	@ (8005644 <HAL_DMA_IRQHandler+0x6c4>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d009      	beq.n	8005496 <HAL_DMA_IRQHandler+0x516>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a70      	ldr	r2, [pc, #448]	@ (8005648 <HAL_DMA_IRQHandler+0x6c8>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d004      	beq.n	8005496 <HAL_DMA_IRQHandler+0x516>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a6e      	ldr	r2, [pc, #440]	@ (800564c <HAL_DMA_IRQHandler+0x6cc>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d10a      	bne.n	80054ac <HAL_DMA_IRQHandler+0x52c>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0308 	and.w	r3, r3, #8
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	bf14      	ite	ne
 80054a4:	2301      	movne	r3, #1
 80054a6:	2300      	moveq	r3, #0
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	e009      	b.n	80054c0 <HAL_DMA_IRQHandler+0x540>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0304 	and.w	r3, r3, #4
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	bf14      	ite	ne
 80054ba:	2301      	movne	r3, #1
 80054bc:	2300      	moveq	r3, #0
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d03e      	beq.n	8005542 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054c8:	f003 031f 	and.w	r3, r3, #31
 80054cc:	2210      	movs	r2, #16
 80054ce:	409a      	lsls	r2, r3
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d018      	beq.n	8005514 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d108      	bne.n	8005502 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d024      	beq.n	8005542 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	4798      	blx	r3
 8005500:	e01f      	b.n	8005542 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005506:	2b00      	cmp	r3, #0
 8005508:	d01b      	beq.n	8005542 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	4798      	blx	r3
 8005512:	e016      	b.n	8005542 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800551e:	2b00      	cmp	r3, #0
 8005520:	d107      	bne.n	8005532 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 0208 	bic.w	r2, r2, #8
 8005530:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005546:	f003 031f 	and.w	r3, r3, #31
 800554a:	2220      	movs	r2, #32
 800554c:	409a      	lsls	r2, r3
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	4013      	ands	r3, r2
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 8110 	beq.w	8005778 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a2c      	ldr	r2, [pc, #176]	@ (8005610 <HAL_DMA_IRQHandler+0x690>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d04a      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x678>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a2b      	ldr	r2, [pc, #172]	@ (8005614 <HAL_DMA_IRQHandler+0x694>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d045      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x678>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a29      	ldr	r2, [pc, #164]	@ (8005618 <HAL_DMA_IRQHandler+0x698>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d040      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x678>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a28      	ldr	r2, [pc, #160]	@ (800561c <HAL_DMA_IRQHandler+0x69c>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d03b      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x678>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a26      	ldr	r2, [pc, #152]	@ (8005620 <HAL_DMA_IRQHandler+0x6a0>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d036      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x678>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a25      	ldr	r2, [pc, #148]	@ (8005624 <HAL_DMA_IRQHandler+0x6a4>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d031      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x678>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a23      	ldr	r2, [pc, #140]	@ (8005628 <HAL_DMA_IRQHandler+0x6a8>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d02c      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x678>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a22      	ldr	r2, [pc, #136]	@ (800562c <HAL_DMA_IRQHandler+0x6ac>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d027      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x678>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a20      	ldr	r2, [pc, #128]	@ (8005630 <HAL_DMA_IRQHandler+0x6b0>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d022      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x678>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a1f      	ldr	r2, [pc, #124]	@ (8005634 <HAL_DMA_IRQHandler+0x6b4>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d01d      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x678>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005638 <HAL_DMA_IRQHandler+0x6b8>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d018      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x678>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a1c      	ldr	r2, [pc, #112]	@ (800563c <HAL_DMA_IRQHandler+0x6bc>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d013      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x678>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a1a      	ldr	r2, [pc, #104]	@ (8005640 <HAL_DMA_IRQHandler+0x6c0>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d00e      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x678>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a19      	ldr	r2, [pc, #100]	@ (8005644 <HAL_DMA_IRQHandler+0x6c4>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d009      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x678>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a17      	ldr	r2, [pc, #92]	@ (8005648 <HAL_DMA_IRQHandler+0x6c8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d004      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x678>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a16      	ldr	r2, [pc, #88]	@ (800564c <HAL_DMA_IRQHandler+0x6cc>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d12b      	bne.n	8005650 <HAL_DMA_IRQHandler+0x6d0>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0310 	and.w	r3, r3, #16
 8005602:	2b00      	cmp	r3, #0
 8005604:	bf14      	ite	ne
 8005606:	2301      	movne	r3, #1
 8005608:	2300      	moveq	r3, #0
 800560a:	b2db      	uxtb	r3, r3
 800560c:	e02a      	b.n	8005664 <HAL_DMA_IRQHandler+0x6e4>
 800560e:	bf00      	nop
 8005610:	40020010 	.word	0x40020010
 8005614:	40020028 	.word	0x40020028
 8005618:	40020040 	.word	0x40020040
 800561c:	40020058 	.word	0x40020058
 8005620:	40020070 	.word	0x40020070
 8005624:	40020088 	.word	0x40020088
 8005628:	400200a0 	.word	0x400200a0
 800562c:	400200b8 	.word	0x400200b8
 8005630:	40020410 	.word	0x40020410
 8005634:	40020428 	.word	0x40020428
 8005638:	40020440 	.word	0x40020440
 800563c:	40020458 	.word	0x40020458
 8005640:	40020470 	.word	0x40020470
 8005644:	40020488 	.word	0x40020488
 8005648:	400204a0 	.word	0x400204a0
 800564c:	400204b8 	.word	0x400204b8
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	bf14      	ite	ne
 800565e:	2301      	movne	r3, #1
 8005660:	2300      	moveq	r3, #0
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 8087 	beq.w	8005778 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800566e:	f003 031f 	and.w	r3, r3, #31
 8005672:	2220      	movs	r2, #32
 8005674:	409a      	lsls	r2, r3
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b04      	cmp	r3, #4
 8005684:	d139      	bne.n	80056fa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0216 	bic.w	r2, r2, #22
 8005694:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	695a      	ldr	r2, [r3, #20]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056a4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d103      	bne.n	80056b6 <HAL_DMA_IRQHandler+0x736>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d007      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0208 	bic.w	r2, r2, #8
 80056c4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056ca:	f003 031f 	and.w	r3, r3, #31
 80056ce:	223f      	movs	r2, #63	@ 0x3f
 80056d0:	409a      	lsls	r2, r3
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f000 834a 	beq.w	8005d84 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	4798      	blx	r3
          }
          return;
 80056f8:	e344      	b.n	8005d84 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d018      	beq.n	800573a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d108      	bne.n	8005728 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800571a:	2b00      	cmp	r3, #0
 800571c:	d02c      	beq.n	8005778 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	4798      	blx	r3
 8005726:	e027      	b.n	8005778 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800572c:	2b00      	cmp	r3, #0
 800572e:	d023      	beq.n	8005778 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	4798      	blx	r3
 8005738:	e01e      	b.n	8005778 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10f      	bne.n	8005768 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 0210 	bic.w	r2, r2, #16
 8005756:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 8306 	beq.w	8005d8e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 8088 	beq.w	80058a0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2204      	movs	r2, #4
 8005794:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a7a      	ldr	r2, [pc, #488]	@ (8005988 <HAL_DMA_IRQHandler+0xa08>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d04a      	beq.n	8005838 <HAL_DMA_IRQHandler+0x8b8>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a79      	ldr	r2, [pc, #484]	@ (800598c <HAL_DMA_IRQHandler+0xa0c>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d045      	beq.n	8005838 <HAL_DMA_IRQHandler+0x8b8>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a77      	ldr	r2, [pc, #476]	@ (8005990 <HAL_DMA_IRQHandler+0xa10>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d040      	beq.n	8005838 <HAL_DMA_IRQHandler+0x8b8>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a76      	ldr	r2, [pc, #472]	@ (8005994 <HAL_DMA_IRQHandler+0xa14>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d03b      	beq.n	8005838 <HAL_DMA_IRQHandler+0x8b8>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a74      	ldr	r2, [pc, #464]	@ (8005998 <HAL_DMA_IRQHandler+0xa18>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d036      	beq.n	8005838 <HAL_DMA_IRQHandler+0x8b8>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a73      	ldr	r2, [pc, #460]	@ (800599c <HAL_DMA_IRQHandler+0xa1c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d031      	beq.n	8005838 <HAL_DMA_IRQHandler+0x8b8>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a71      	ldr	r2, [pc, #452]	@ (80059a0 <HAL_DMA_IRQHandler+0xa20>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d02c      	beq.n	8005838 <HAL_DMA_IRQHandler+0x8b8>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a70      	ldr	r2, [pc, #448]	@ (80059a4 <HAL_DMA_IRQHandler+0xa24>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d027      	beq.n	8005838 <HAL_DMA_IRQHandler+0x8b8>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a6e      	ldr	r2, [pc, #440]	@ (80059a8 <HAL_DMA_IRQHandler+0xa28>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d022      	beq.n	8005838 <HAL_DMA_IRQHandler+0x8b8>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a6d      	ldr	r2, [pc, #436]	@ (80059ac <HAL_DMA_IRQHandler+0xa2c>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d01d      	beq.n	8005838 <HAL_DMA_IRQHandler+0x8b8>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a6b      	ldr	r2, [pc, #428]	@ (80059b0 <HAL_DMA_IRQHandler+0xa30>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d018      	beq.n	8005838 <HAL_DMA_IRQHandler+0x8b8>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a6a      	ldr	r2, [pc, #424]	@ (80059b4 <HAL_DMA_IRQHandler+0xa34>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d013      	beq.n	8005838 <HAL_DMA_IRQHandler+0x8b8>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a68      	ldr	r2, [pc, #416]	@ (80059b8 <HAL_DMA_IRQHandler+0xa38>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00e      	beq.n	8005838 <HAL_DMA_IRQHandler+0x8b8>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a67      	ldr	r2, [pc, #412]	@ (80059bc <HAL_DMA_IRQHandler+0xa3c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d009      	beq.n	8005838 <HAL_DMA_IRQHandler+0x8b8>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a65      	ldr	r2, [pc, #404]	@ (80059c0 <HAL_DMA_IRQHandler+0xa40>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d004      	beq.n	8005838 <HAL_DMA_IRQHandler+0x8b8>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a64      	ldr	r2, [pc, #400]	@ (80059c4 <HAL_DMA_IRQHandler+0xa44>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d108      	bne.n	800584a <HAL_DMA_IRQHandler+0x8ca>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0201 	bic.w	r2, r2, #1
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	e007      	b.n	800585a <HAL_DMA_IRQHandler+0x8da>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 0201 	bic.w	r2, r2, #1
 8005858:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	3301      	adds	r3, #1
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005862:	429a      	cmp	r2, r3
 8005864:	d307      	bcc.n	8005876 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1f2      	bne.n	800585a <HAL_DMA_IRQHandler+0x8da>
 8005874:	e000      	b.n	8005878 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005876:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d004      	beq.n	8005890 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2203      	movs	r2, #3
 800588a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800588e:	e003      	b.n	8005898 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 8272 	beq.w	8005d8e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	4798      	blx	r3
 80058b2:	e26c      	b.n	8005d8e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a43      	ldr	r2, [pc, #268]	@ (80059c8 <HAL_DMA_IRQHandler+0xa48>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d022      	beq.n	8005904 <HAL_DMA_IRQHandler+0x984>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a42      	ldr	r2, [pc, #264]	@ (80059cc <HAL_DMA_IRQHandler+0xa4c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d01d      	beq.n	8005904 <HAL_DMA_IRQHandler+0x984>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a40      	ldr	r2, [pc, #256]	@ (80059d0 <HAL_DMA_IRQHandler+0xa50>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d018      	beq.n	8005904 <HAL_DMA_IRQHandler+0x984>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a3f      	ldr	r2, [pc, #252]	@ (80059d4 <HAL_DMA_IRQHandler+0xa54>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d013      	beq.n	8005904 <HAL_DMA_IRQHandler+0x984>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a3d      	ldr	r2, [pc, #244]	@ (80059d8 <HAL_DMA_IRQHandler+0xa58>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d00e      	beq.n	8005904 <HAL_DMA_IRQHandler+0x984>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a3c      	ldr	r2, [pc, #240]	@ (80059dc <HAL_DMA_IRQHandler+0xa5c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d009      	beq.n	8005904 <HAL_DMA_IRQHandler+0x984>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a3a      	ldr	r2, [pc, #232]	@ (80059e0 <HAL_DMA_IRQHandler+0xa60>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d004      	beq.n	8005904 <HAL_DMA_IRQHandler+0x984>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a39      	ldr	r2, [pc, #228]	@ (80059e4 <HAL_DMA_IRQHandler+0xa64>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d101      	bne.n	8005908 <HAL_DMA_IRQHandler+0x988>
 8005904:	2301      	movs	r3, #1
 8005906:	e000      	b.n	800590a <HAL_DMA_IRQHandler+0x98a>
 8005908:	2300      	movs	r3, #0
 800590a:	2b00      	cmp	r3, #0
 800590c:	f000 823f 	beq.w	8005d8e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800591c:	f003 031f 	and.w	r3, r3, #31
 8005920:	2204      	movs	r2, #4
 8005922:	409a      	lsls	r2, r3
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	4013      	ands	r3, r2
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 80cd 	beq.w	8005ac8 <HAL_DMA_IRQHandler+0xb48>
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f003 0304 	and.w	r3, r3, #4
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 80c7 	beq.w	8005ac8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800593e:	f003 031f 	and.w	r3, r3, #31
 8005942:	2204      	movs	r2, #4
 8005944:	409a      	lsls	r2, r3
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d049      	beq.n	80059e8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d109      	bne.n	8005972 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 8210 	beq.w	8005d88 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005970:	e20a      	b.n	8005d88 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005976:	2b00      	cmp	r3, #0
 8005978:	f000 8206 	beq.w	8005d88 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005984:	e200      	b.n	8005d88 <HAL_DMA_IRQHandler+0xe08>
 8005986:	bf00      	nop
 8005988:	40020010 	.word	0x40020010
 800598c:	40020028 	.word	0x40020028
 8005990:	40020040 	.word	0x40020040
 8005994:	40020058 	.word	0x40020058
 8005998:	40020070 	.word	0x40020070
 800599c:	40020088 	.word	0x40020088
 80059a0:	400200a0 	.word	0x400200a0
 80059a4:	400200b8 	.word	0x400200b8
 80059a8:	40020410 	.word	0x40020410
 80059ac:	40020428 	.word	0x40020428
 80059b0:	40020440 	.word	0x40020440
 80059b4:	40020458 	.word	0x40020458
 80059b8:	40020470 	.word	0x40020470
 80059bc:	40020488 	.word	0x40020488
 80059c0:	400204a0 	.word	0x400204a0
 80059c4:	400204b8 	.word	0x400204b8
 80059c8:	58025408 	.word	0x58025408
 80059cc:	5802541c 	.word	0x5802541c
 80059d0:	58025430 	.word	0x58025430
 80059d4:	58025444 	.word	0x58025444
 80059d8:	58025458 	.word	0x58025458
 80059dc:	5802546c 	.word	0x5802546c
 80059e0:	58025480 	.word	0x58025480
 80059e4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f003 0320 	and.w	r3, r3, #32
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d160      	bne.n	8005ab4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a7f      	ldr	r2, [pc, #508]	@ (8005bf4 <HAL_DMA_IRQHandler+0xc74>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d04a      	beq.n	8005a92 <HAL_DMA_IRQHandler+0xb12>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a7d      	ldr	r2, [pc, #500]	@ (8005bf8 <HAL_DMA_IRQHandler+0xc78>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d045      	beq.n	8005a92 <HAL_DMA_IRQHandler+0xb12>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a7c      	ldr	r2, [pc, #496]	@ (8005bfc <HAL_DMA_IRQHandler+0xc7c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d040      	beq.n	8005a92 <HAL_DMA_IRQHandler+0xb12>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a7a      	ldr	r2, [pc, #488]	@ (8005c00 <HAL_DMA_IRQHandler+0xc80>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d03b      	beq.n	8005a92 <HAL_DMA_IRQHandler+0xb12>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a79      	ldr	r2, [pc, #484]	@ (8005c04 <HAL_DMA_IRQHandler+0xc84>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d036      	beq.n	8005a92 <HAL_DMA_IRQHandler+0xb12>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a77      	ldr	r2, [pc, #476]	@ (8005c08 <HAL_DMA_IRQHandler+0xc88>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d031      	beq.n	8005a92 <HAL_DMA_IRQHandler+0xb12>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a76      	ldr	r2, [pc, #472]	@ (8005c0c <HAL_DMA_IRQHandler+0xc8c>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d02c      	beq.n	8005a92 <HAL_DMA_IRQHandler+0xb12>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a74      	ldr	r2, [pc, #464]	@ (8005c10 <HAL_DMA_IRQHandler+0xc90>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d027      	beq.n	8005a92 <HAL_DMA_IRQHandler+0xb12>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a73      	ldr	r2, [pc, #460]	@ (8005c14 <HAL_DMA_IRQHandler+0xc94>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d022      	beq.n	8005a92 <HAL_DMA_IRQHandler+0xb12>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a71      	ldr	r2, [pc, #452]	@ (8005c18 <HAL_DMA_IRQHandler+0xc98>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d01d      	beq.n	8005a92 <HAL_DMA_IRQHandler+0xb12>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a70      	ldr	r2, [pc, #448]	@ (8005c1c <HAL_DMA_IRQHandler+0xc9c>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d018      	beq.n	8005a92 <HAL_DMA_IRQHandler+0xb12>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a6e      	ldr	r2, [pc, #440]	@ (8005c20 <HAL_DMA_IRQHandler+0xca0>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d013      	beq.n	8005a92 <HAL_DMA_IRQHandler+0xb12>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a6d      	ldr	r2, [pc, #436]	@ (8005c24 <HAL_DMA_IRQHandler+0xca4>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d00e      	beq.n	8005a92 <HAL_DMA_IRQHandler+0xb12>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a6b      	ldr	r2, [pc, #428]	@ (8005c28 <HAL_DMA_IRQHandler+0xca8>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d009      	beq.n	8005a92 <HAL_DMA_IRQHandler+0xb12>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a6a      	ldr	r2, [pc, #424]	@ (8005c2c <HAL_DMA_IRQHandler+0xcac>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d004      	beq.n	8005a92 <HAL_DMA_IRQHandler+0xb12>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a68      	ldr	r2, [pc, #416]	@ (8005c30 <HAL_DMA_IRQHandler+0xcb0>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d108      	bne.n	8005aa4 <HAL_DMA_IRQHandler+0xb24>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0208 	bic.w	r2, r2, #8
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	e007      	b.n	8005ab4 <HAL_DMA_IRQHandler+0xb34>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0204 	bic.w	r2, r2, #4
 8005ab2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 8165 	beq.w	8005d88 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ac6:	e15f      	b.n	8005d88 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005acc:	f003 031f 	and.w	r3, r3, #31
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	409a      	lsls	r2, r3
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 80c5 	beq.w	8005c68 <HAL_DMA_IRQHandler+0xce8>
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f000 80bf 	beq.w	8005c68 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aee:	f003 031f 	and.w	r3, r3, #31
 8005af2:	2202      	movs	r2, #2
 8005af4:	409a      	lsls	r2, r3
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d018      	beq.n	8005b36 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d109      	bne.n	8005b22 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 813a 	beq.w	8005d8c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b20:	e134      	b.n	8005d8c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 8130 	beq.w	8005d8c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b34:	e12a      	b.n	8005d8c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f003 0320 	and.w	r3, r3, #32
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f040 8089 	bne.w	8005c54 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a2b      	ldr	r2, [pc, #172]	@ (8005bf4 <HAL_DMA_IRQHandler+0xc74>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d04a      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xc62>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a29      	ldr	r2, [pc, #164]	@ (8005bf8 <HAL_DMA_IRQHandler+0xc78>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d045      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xc62>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a28      	ldr	r2, [pc, #160]	@ (8005bfc <HAL_DMA_IRQHandler+0xc7c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d040      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xc62>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a26      	ldr	r2, [pc, #152]	@ (8005c00 <HAL_DMA_IRQHandler+0xc80>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d03b      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xc62>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a25      	ldr	r2, [pc, #148]	@ (8005c04 <HAL_DMA_IRQHandler+0xc84>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d036      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xc62>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a23      	ldr	r2, [pc, #140]	@ (8005c08 <HAL_DMA_IRQHandler+0xc88>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d031      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xc62>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a22      	ldr	r2, [pc, #136]	@ (8005c0c <HAL_DMA_IRQHandler+0xc8c>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d02c      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xc62>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a20      	ldr	r2, [pc, #128]	@ (8005c10 <HAL_DMA_IRQHandler+0xc90>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d027      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xc62>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a1f      	ldr	r2, [pc, #124]	@ (8005c14 <HAL_DMA_IRQHandler+0xc94>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d022      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xc62>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8005c18 <HAL_DMA_IRQHandler+0xc98>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d01d      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xc62>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a1c      	ldr	r2, [pc, #112]	@ (8005c1c <HAL_DMA_IRQHandler+0xc9c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d018      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xc62>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a1a      	ldr	r2, [pc, #104]	@ (8005c20 <HAL_DMA_IRQHandler+0xca0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d013      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xc62>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a19      	ldr	r2, [pc, #100]	@ (8005c24 <HAL_DMA_IRQHandler+0xca4>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d00e      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xc62>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a17      	ldr	r2, [pc, #92]	@ (8005c28 <HAL_DMA_IRQHandler+0xca8>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d009      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xc62>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a16      	ldr	r2, [pc, #88]	@ (8005c2c <HAL_DMA_IRQHandler+0xcac>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d004      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xc62>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a14      	ldr	r2, [pc, #80]	@ (8005c30 <HAL_DMA_IRQHandler+0xcb0>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d128      	bne.n	8005c34 <HAL_DMA_IRQHandler+0xcb4>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0214 	bic.w	r2, r2, #20
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	e027      	b.n	8005c44 <HAL_DMA_IRQHandler+0xcc4>
 8005bf4:	40020010 	.word	0x40020010
 8005bf8:	40020028 	.word	0x40020028
 8005bfc:	40020040 	.word	0x40020040
 8005c00:	40020058 	.word	0x40020058
 8005c04:	40020070 	.word	0x40020070
 8005c08:	40020088 	.word	0x40020088
 8005c0c:	400200a0 	.word	0x400200a0
 8005c10:	400200b8 	.word	0x400200b8
 8005c14:	40020410 	.word	0x40020410
 8005c18:	40020428 	.word	0x40020428
 8005c1c:	40020440 	.word	0x40020440
 8005c20:	40020458 	.word	0x40020458
 8005c24:	40020470 	.word	0x40020470
 8005c28:	40020488 	.word	0x40020488
 8005c2c:	400204a0 	.word	0x400204a0
 8005c30:	400204b8 	.word	0x400204b8
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 020a 	bic.w	r2, r2, #10
 8005c42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 8097 	beq.w	8005d8c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c66:	e091      	b.n	8005d8c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c6c:	f003 031f 	and.w	r3, r3, #31
 8005c70:	2208      	movs	r2, #8
 8005c72:	409a      	lsls	r2, r3
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	4013      	ands	r3, r2
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f000 8088 	beq.w	8005d8e <HAL_DMA_IRQHandler+0xe0e>
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f003 0308 	and.w	r3, r3, #8
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 8082 	beq.w	8005d8e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a41      	ldr	r2, [pc, #260]	@ (8005d94 <HAL_DMA_IRQHandler+0xe14>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d04a      	beq.n	8005d2a <HAL_DMA_IRQHandler+0xdaa>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a3f      	ldr	r2, [pc, #252]	@ (8005d98 <HAL_DMA_IRQHandler+0xe18>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d045      	beq.n	8005d2a <HAL_DMA_IRQHandler+0xdaa>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a3e      	ldr	r2, [pc, #248]	@ (8005d9c <HAL_DMA_IRQHandler+0xe1c>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d040      	beq.n	8005d2a <HAL_DMA_IRQHandler+0xdaa>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a3c      	ldr	r2, [pc, #240]	@ (8005da0 <HAL_DMA_IRQHandler+0xe20>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d03b      	beq.n	8005d2a <HAL_DMA_IRQHandler+0xdaa>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a3b      	ldr	r2, [pc, #236]	@ (8005da4 <HAL_DMA_IRQHandler+0xe24>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d036      	beq.n	8005d2a <HAL_DMA_IRQHandler+0xdaa>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a39      	ldr	r2, [pc, #228]	@ (8005da8 <HAL_DMA_IRQHandler+0xe28>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d031      	beq.n	8005d2a <HAL_DMA_IRQHandler+0xdaa>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a38      	ldr	r2, [pc, #224]	@ (8005dac <HAL_DMA_IRQHandler+0xe2c>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d02c      	beq.n	8005d2a <HAL_DMA_IRQHandler+0xdaa>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a36      	ldr	r2, [pc, #216]	@ (8005db0 <HAL_DMA_IRQHandler+0xe30>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d027      	beq.n	8005d2a <HAL_DMA_IRQHandler+0xdaa>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a35      	ldr	r2, [pc, #212]	@ (8005db4 <HAL_DMA_IRQHandler+0xe34>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d022      	beq.n	8005d2a <HAL_DMA_IRQHandler+0xdaa>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a33      	ldr	r2, [pc, #204]	@ (8005db8 <HAL_DMA_IRQHandler+0xe38>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d01d      	beq.n	8005d2a <HAL_DMA_IRQHandler+0xdaa>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a32      	ldr	r2, [pc, #200]	@ (8005dbc <HAL_DMA_IRQHandler+0xe3c>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d018      	beq.n	8005d2a <HAL_DMA_IRQHandler+0xdaa>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a30      	ldr	r2, [pc, #192]	@ (8005dc0 <HAL_DMA_IRQHandler+0xe40>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d013      	beq.n	8005d2a <HAL_DMA_IRQHandler+0xdaa>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a2f      	ldr	r2, [pc, #188]	@ (8005dc4 <HAL_DMA_IRQHandler+0xe44>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d00e      	beq.n	8005d2a <HAL_DMA_IRQHandler+0xdaa>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a2d      	ldr	r2, [pc, #180]	@ (8005dc8 <HAL_DMA_IRQHandler+0xe48>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d009      	beq.n	8005d2a <HAL_DMA_IRQHandler+0xdaa>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a2c      	ldr	r2, [pc, #176]	@ (8005dcc <HAL_DMA_IRQHandler+0xe4c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d004      	beq.n	8005d2a <HAL_DMA_IRQHandler+0xdaa>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a2a      	ldr	r2, [pc, #168]	@ (8005dd0 <HAL_DMA_IRQHandler+0xe50>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d108      	bne.n	8005d3c <HAL_DMA_IRQHandler+0xdbc>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 021c 	bic.w	r2, r2, #28
 8005d38:	601a      	str	r2, [r3, #0]
 8005d3a:	e007      	b.n	8005d4c <HAL_DMA_IRQHandler+0xdcc>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f022 020e 	bic.w	r2, r2, #14
 8005d4a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d50:	f003 031f 	and.w	r3, r3, #31
 8005d54:	2201      	movs	r2, #1
 8005d56:	409a      	lsls	r2, r3
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d009      	beq.n	8005d8e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	4798      	blx	r3
 8005d82:	e004      	b.n	8005d8e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005d84:	bf00      	nop
 8005d86:	e002      	b.n	8005d8e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d88:	bf00      	nop
 8005d8a:	e000      	b.n	8005d8e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d8c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005d8e:	3728      	adds	r7, #40	@ 0x28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	40020010 	.word	0x40020010
 8005d98:	40020028 	.word	0x40020028
 8005d9c:	40020040 	.word	0x40020040
 8005da0:	40020058 	.word	0x40020058
 8005da4:	40020070 	.word	0x40020070
 8005da8:	40020088 	.word	0x40020088
 8005dac:	400200a0 	.word	0x400200a0
 8005db0:	400200b8 	.word	0x400200b8
 8005db4:	40020410 	.word	0x40020410
 8005db8:	40020428 	.word	0x40020428
 8005dbc:	40020440 	.word	0x40020440
 8005dc0:	40020458 	.word	0x40020458
 8005dc4:	40020470 	.word	0x40020470
 8005dc8:	40020488 	.word	0x40020488
 8005dcc:	400204a0 	.word	0x400204a0
 8005dd0:	400204b8 	.word	0x400204b8

08005dd4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
 8005de0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005de6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dec:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a7f      	ldr	r2, [pc, #508]	@ (8005ff0 <DMA_SetConfig+0x21c>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d072      	beq.n	8005ede <DMA_SetConfig+0x10a>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a7d      	ldr	r2, [pc, #500]	@ (8005ff4 <DMA_SetConfig+0x220>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d06d      	beq.n	8005ede <DMA_SetConfig+0x10a>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a7c      	ldr	r2, [pc, #496]	@ (8005ff8 <DMA_SetConfig+0x224>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d068      	beq.n	8005ede <DMA_SetConfig+0x10a>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a7a      	ldr	r2, [pc, #488]	@ (8005ffc <DMA_SetConfig+0x228>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d063      	beq.n	8005ede <DMA_SetConfig+0x10a>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a79      	ldr	r2, [pc, #484]	@ (8006000 <DMA_SetConfig+0x22c>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d05e      	beq.n	8005ede <DMA_SetConfig+0x10a>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a77      	ldr	r2, [pc, #476]	@ (8006004 <DMA_SetConfig+0x230>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d059      	beq.n	8005ede <DMA_SetConfig+0x10a>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a76      	ldr	r2, [pc, #472]	@ (8006008 <DMA_SetConfig+0x234>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d054      	beq.n	8005ede <DMA_SetConfig+0x10a>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a74      	ldr	r2, [pc, #464]	@ (800600c <DMA_SetConfig+0x238>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d04f      	beq.n	8005ede <DMA_SetConfig+0x10a>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a73      	ldr	r2, [pc, #460]	@ (8006010 <DMA_SetConfig+0x23c>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d04a      	beq.n	8005ede <DMA_SetConfig+0x10a>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a71      	ldr	r2, [pc, #452]	@ (8006014 <DMA_SetConfig+0x240>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d045      	beq.n	8005ede <DMA_SetConfig+0x10a>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a70      	ldr	r2, [pc, #448]	@ (8006018 <DMA_SetConfig+0x244>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d040      	beq.n	8005ede <DMA_SetConfig+0x10a>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a6e      	ldr	r2, [pc, #440]	@ (800601c <DMA_SetConfig+0x248>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d03b      	beq.n	8005ede <DMA_SetConfig+0x10a>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a6d      	ldr	r2, [pc, #436]	@ (8006020 <DMA_SetConfig+0x24c>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d036      	beq.n	8005ede <DMA_SetConfig+0x10a>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a6b      	ldr	r2, [pc, #428]	@ (8006024 <DMA_SetConfig+0x250>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d031      	beq.n	8005ede <DMA_SetConfig+0x10a>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a6a      	ldr	r2, [pc, #424]	@ (8006028 <DMA_SetConfig+0x254>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d02c      	beq.n	8005ede <DMA_SetConfig+0x10a>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a68      	ldr	r2, [pc, #416]	@ (800602c <DMA_SetConfig+0x258>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d027      	beq.n	8005ede <DMA_SetConfig+0x10a>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a67      	ldr	r2, [pc, #412]	@ (8006030 <DMA_SetConfig+0x25c>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d022      	beq.n	8005ede <DMA_SetConfig+0x10a>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a65      	ldr	r2, [pc, #404]	@ (8006034 <DMA_SetConfig+0x260>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d01d      	beq.n	8005ede <DMA_SetConfig+0x10a>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a64      	ldr	r2, [pc, #400]	@ (8006038 <DMA_SetConfig+0x264>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d018      	beq.n	8005ede <DMA_SetConfig+0x10a>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a62      	ldr	r2, [pc, #392]	@ (800603c <DMA_SetConfig+0x268>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d013      	beq.n	8005ede <DMA_SetConfig+0x10a>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a61      	ldr	r2, [pc, #388]	@ (8006040 <DMA_SetConfig+0x26c>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d00e      	beq.n	8005ede <DMA_SetConfig+0x10a>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a5f      	ldr	r2, [pc, #380]	@ (8006044 <DMA_SetConfig+0x270>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d009      	beq.n	8005ede <DMA_SetConfig+0x10a>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a5e      	ldr	r2, [pc, #376]	@ (8006048 <DMA_SetConfig+0x274>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d004      	beq.n	8005ede <DMA_SetConfig+0x10a>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a5c      	ldr	r2, [pc, #368]	@ (800604c <DMA_SetConfig+0x278>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d101      	bne.n	8005ee2 <DMA_SetConfig+0x10e>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e000      	b.n	8005ee4 <DMA_SetConfig+0x110>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00d      	beq.n	8005f04 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005ef0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d004      	beq.n	8005f04 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005f02:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a39      	ldr	r2, [pc, #228]	@ (8005ff0 <DMA_SetConfig+0x21c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d04a      	beq.n	8005fa4 <DMA_SetConfig+0x1d0>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a38      	ldr	r2, [pc, #224]	@ (8005ff4 <DMA_SetConfig+0x220>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d045      	beq.n	8005fa4 <DMA_SetConfig+0x1d0>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a36      	ldr	r2, [pc, #216]	@ (8005ff8 <DMA_SetConfig+0x224>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d040      	beq.n	8005fa4 <DMA_SetConfig+0x1d0>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a35      	ldr	r2, [pc, #212]	@ (8005ffc <DMA_SetConfig+0x228>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d03b      	beq.n	8005fa4 <DMA_SetConfig+0x1d0>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a33      	ldr	r2, [pc, #204]	@ (8006000 <DMA_SetConfig+0x22c>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d036      	beq.n	8005fa4 <DMA_SetConfig+0x1d0>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a32      	ldr	r2, [pc, #200]	@ (8006004 <DMA_SetConfig+0x230>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d031      	beq.n	8005fa4 <DMA_SetConfig+0x1d0>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a30      	ldr	r2, [pc, #192]	@ (8006008 <DMA_SetConfig+0x234>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d02c      	beq.n	8005fa4 <DMA_SetConfig+0x1d0>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a2f      	ldr	r2, [pc, #188]	@ (800600c <DMA_SetConfig+0x238>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d027      	beq.n	8005fa4 <DMA_SetConfig+0x1d0>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a2d      	ldr	r2, [pc, #180]	@ (8006010 <DMA_SetConfig+0x23c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d022      	beq.n	8005fa4 <DMA_SetConfig+0x1d0>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a2c      	ldr	r2, [pc, #176]	@ (8006014 <DMA_SetConfig+0x240>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d01d      	beq.n	8005fa4 <DMA_SetConfig+0x1d0>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a2a      	ldr	r2, [pc, #168]	@ (8006018 <DMA_SetConfig+0x244>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d018      	beq.n	8005fa4 <DMA_SetConfig+0x1d0>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a29      	ldr	r2, [pc, #164]	@ (800601c <DMA_SetConfig+0x248>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d013      	beq.n	8005fa4 <DMA_SetConfig+0x1d0>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a27      	ldr	r2, [pc, #156]	@ (8006020 <DMA_SetConfig+0x24c>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d00e      	beq.n	8005fa4 <DMA_SetConfig+0x1d0>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a26      	ldr	r2, [pc, #152]	@ (8006024 <DMA_SetConfig+0x250>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d009      	beq.n	8005fa4 <DMA_SetConfig+0x1d0>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a24      	ldr	r2, [pc, #144]	@ (8006028 <DMA_SetConfig+0x254>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d004      	beq.n	8005fa4 <DMA_SetConfig+0x1d0>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a23      	ldr	r2, [pc, #140]	@ (800602c <DMA_SetConfig+0x258>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d101      	bne.n	8005fa8 <DMA_SetConfig+0x1d4>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e000      	b.n	8005faa <DMA_SetConfig+0x1d6>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d059      	beq.n	8006062 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fb2:	f003 031f 	and.w	r3, r3, #31
 8005fb6:	223f      	movs	r2, #63	@ 0x3f
 8005fb8:	409a      	lsls	r2, r3
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005fcc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	2b40      	cmp	r3, #64	@ 0x40
 8005fdc:	d138      	bne.n	8006050 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005fee:	e086      	b.n	80060fe <DMA_SetConfig+0x32a>
 8005ff0:	40020010 	.word	0x40020010
 8005ff4:	40020028 	.word	0x40020028
 8005ff8:	40020040 	.word	0x40020040
 8005ffc:	40020058 	.word	0x40020058
 8006000:	40020070 	.word	0x40020070
 8006004:	40020088 	.word	0x40020088
 8006008:	400200a0 	.word	0x400200a0
 800600c:	400200b8 	.word	0x400200b8
 8006010:	40020410 	.word	0x40020410
 8006014:	40020428 	.word	0x40020428
 8006018:	40020440 	.word	0x40020440
 800601c:	40020458 	.word	0x40020458
 8006020:	40020470 	.word	0x40020470
 8006024:	40020488 	.word	0x40020488
 8006028:	400204a0 	.word	0x400204a0
 800602c:	400204b8 	.word	0x400204b8
 8006030:	58025408 	.word	0x58025408
 8006034:	5802541c 	.word	0x5802541c
 8006038:	58025430 	.word	0x58025430
 800603c:	58025444 	.word	0x58025444
 8006040:	58025458 	.word	0x58025458
 8006044:	5802546c 	.word	0x5802546c
 8006048:	58025480 	.word	0x58025480
 800604c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	60da      	str	r2, [r3, #12]
}
 8006060:	e04d      	b.n	80060fe <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a29      	ldr	r2, [pc, #164]	@ (800610c <DMA_SetConfig+0x338>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d022      	beq.n	80060b2 <DMA_SetConfig+0x2de>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a27      	ldr	r2, [pc, #156]	@ (8006110 <DMA_SetConfig+0x33c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d01d      	beq.n	80060b2 <DMA_SetConfig+0x2de>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a26      	ldr	r2, [pc, #152]	@ (8006114 <DMA_SetConfig+0x340>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d018      	beq.n	80060b2 <DMA_SetConfig+0x2de>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a24      	ldr	r2, [pc, #144]	@ (8006118 <DMA_SetConfig+0x344>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d013      	beq.n	80060b2 <DMA_SetConfig+0x2de>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a23      	ldr	r2, [pc, #140]	@ (800611c <DMA_SetConfig+0x348>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d00e      	beq.n	80060b2 <DMA_SetConfig+0x2de>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a21      	ldr	r2, [pc, #132]	@ (8006120 <DMA_SetConfig+0x34c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d009      	beq.n	80060b2 <DMA_SetConfig+0x2de>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a20      	ldr	r2, [pc, #128]	@ (8006124 <DMA_SetConfig+0x350>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d004      	beq.n	80060b2 <DMA_SetConfig+0x2de>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a1e      	ldr	r2, [pc, #120]	@ (8006128 <DMA_SetConfig+0x354>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d101      	bne.n	80060b6 <DMA_SetConfig+0x2e2>
 80060b2:	2301      	movs	r3, #1
 80060b4:	e000      	b.n	80060b8 <DMA_SetConfig+0x2e4>
 80060b6:	2300      	movs	r3, #0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d020      	beq.n	80060fe <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060c0:	f003 031f 	and.w	r3, r3, #31
 80060c4:	2201      	movs	r2, #1
 80060c6:	409a      	lsls	r2, r3
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	2b40      	cmp	r3, #64	@ 0x40
 80060da:	d108      	bne.n	80060ee <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	60da      	str	r2, [r3, #12]
}
 80060ec:	e007      	b.n	80060fe <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	60da      	str	r2, [r3, #12]
}
 80060fe:	bf00      	nop
 8006100:	371c      	adds	r7, #28
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	58025408 	.word	0x58025408
 8006110:	5802541c 	.word	0x5802541c
 8006114:	58025430 	.word	0x58025430
 8006118:	58025444 	.word	0x58025444
 800611c:	58025458 	.word	0x58025458
 8006120:	5802546c 	.word	0x5802546c
 8006124:	58025480 	.word	0x58025480
 8006128:	58025494 	.word	0x58025494

0800612c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a42      	ldr	r2, [pc, #264]	@ (8006244 <DMA_CalcBaseAndBitshift+0x118>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d04a      	beq.n	80061d4 <DMA_CalcBaseAndBitshift+0xa8>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a41      	ldr	r2, [pc, #260]	@ (8006248 <DMA_CalcBaseAndBitshift+0x11c>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d045      	beq.n	80061d4 <DMA_CalcBaseAndBitshift+0xa8>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a3f      	ldr	r2, [pc, #252]	@ (800624c <DMA_CalcBaseAndBitshift+0x120>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d040      	beq.n	80061d4 <DMA_CalcBaseAndBitshift+0xa8>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a3e      	ldr	r2, [pc, #248]	@ (8006250 <DMA_CalcBaseAndBitshift+0x124>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d03b      	beq.n	80061d4 <DMA_CalcBaseAndBitshift+0xa8>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a3c      	ldr	r2, [pc, #240]	@ (8006254 <DMA_CalcBaseAndBitshift+0x128>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d036      	beq.n	80061d4 <DMA_CalcBaseAndBitshift+0xa8>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a3b      	ldr	r2, [pc, #236]	@ (8006258 <DMA_CalcBaseAndBitshift+0x12c>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d031      	beq.n	80061d4 <DMA_CalcBaseAndBitshift+0xa8>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a39      	ldr	r2, [pc, #228]	@ (800625c <DMA_CalcBaseAndBitshift+0x130>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d02c      	beq.n	80061d4 <DMA_CalcBaseAndBitshift+0xa8>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a38      	ldr	r2, [pc, #224]	@ (8006260 <DMA_CalcBaseAndBitshift+0x134>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d027      	beq.n	80061d4 <DMA_CalcBaseAndBitshift+0xa8>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a36      	ldr	r2, [pc, #216]	@ (8006264 <DMA_CalcBaseAndBitshift+0x138>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d022      	beq.n	80061d4 <DMA_CalcBaseAndBitshift+0xa8>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a35      	ldr	r2, [pc, #212]	@ (8006268 <DMA_CalcBaseAndBitshift+0x13c>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d01d      	beq.n	80061d4 <DMA_CalcBaseAndBitshift+0xa8>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a33      	ldr	r2, [pc, #204]	@ (800626c <DMA_CalcBaseAndBitshift+0x140>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d018      	beq.n	80061d4 <DMA_CalcBaseAndBitshift+0xa8>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a32      	ldr	r2, [pc, #200]	@ (8006270 <DMA_CalcBaseAndBitshift+0x144>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d013      	beq.n	80061d4 <DMA_CalcBaseAndBitshift+0xa8>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a30      	ldr	r2, [pc, #192]	@ (8006274 <DMA_CalcBaseAndBitshift+0x148>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d00e      	beq.n	80061d4 <DMA_CalcBaseAndBitshift+0xa8>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a2f      	ldr	r2, [pc, #188]	@ (8006278 <DMA_CalcBaseAndBitshift+0x14c>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d009      	beq.n	80061d4 <DMA_CalcBaseAndBitshift+0xa8>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a2d      	ldr	r2, [pc, #180]	@ (800627c <DMA_CalcBaseAndBitshift+0x150>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d004      	beq.n	80061d4 <DMA_CalcBaseAndBitshift+0xa8>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a2c      	ldr	r2, [pc, #176]	@ (8006280 <DMA_CalcBaseAndBitshift+0x154>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d101      	bne.n	80061d8 <DMA_CalcBaseAndBitshift+0xac>
 80061d4:	2301      	movs	r3, #1
 80061d6:	e000      	b.n	80061da <DMA_CalcBaseAndBitshift+0xae>
 80061d8:	2300      	movs	r3, #0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d024      	beq.n	8006228 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	3b10      	subs	r3, #16
 80061e6:	4a27      	ldr	r2, [pc, #156]	@ (8006284 <DMA_CalcBaseAndBitshift+0x158>)
 80061e8:	fba2 2303 	umull	r2, r3, r2, r3
 80061ec:	091b      	lsrs	r3, r3, #4
 80061ee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f003 0307 	and.w	r3, r3, #7
 80061f6:	4a24      	ldr	r2, [pc, #144]	@ (8006288 <DMA_CalcBaseAndBitshift+0x15c>)
 80061f8:	5cd3      	ldrb	r3, [r2, r3]
 80061fa:	461a      	mov	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2b03      	cmp	r3, #3
 8006204:	d908      	bls.n	8006218 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	461a      	mov	r2, r3
 800620c:	4b1f      	ldr	r3, [pc, #124]	@ (800628c <DMA_CalcBaseAndBitshift+0x160>)
 800620e:	4013      	ands	r3, r2
 8006210:	1d1a      	adds	r2, r3, #4
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	659a      	str	r2, [r3, #88]	@ 0x58
 8006216:	e00d      	b.n	8006234 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	461a      	mov	r2, r3
 800621e:	4b1b      	ldr	r3, [pc, #108]	@ (800628c <DMA_CalcBaseAndBitshift+0x160>)
 8006220:	4013      	ands	r3, r2
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	6593      	str	r3, [r2, #88]	@ 0x58
 8006226:	e005      	b.n	8006234 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006238:	4618      	mov	r0, r3
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	40020010 	.word	0x40020010
 8006248:	40020028 	.word	0x40020028
 800624c:	40020040 	.word	0x40020040
 8006250:	40020058 	.word	0x40020058
 8006254:	40020070 	.word	0x40020070
 8006258:	40020088 	.word	0x40020088
 800625c:	400200a0 	.word	0x400200a0
 8006260:	400200b8 	.word	0x400200b8
 8006264:	40020410 	.word	0x40020410
 8006268:	40020428 	.word	0x40020428
 800626c:	40020440 	.word	0x40020440
 8006270:	40020458 	.word	0x40020458
 8006274:	40020470 	.word	0x40020470
 8006278:	40020488 	.word	0x40020488
 800627c:	400204a0 	.word	0x400204a0
 8006280:	400204b8 	.word	0x400204b8
 8006284:	aaaaaaab 	.word	0xaaaaaaab
 8006288:	0801406c 	.word	0x0801406c
 800628c:	fffffc00 	.word	0xfffffc00

08006290 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d120      	bne.n	80062e6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a8:	2b03      	cmp	r3, #3
 80062aa:	d858      	bhi.n	800635e <DMA_CheckFifoParam+0xce>
 80062ac:	a201      	add	r2, pc, #4	@ (adr r2, 80062b4 <DMA_CheckFifoParam+0x24>)
 80062ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b2:	bf00      	nop
 80062b4:	080062c5 	.word	0x080062c5
 80062b8:	080062d7 	.word	0x080062d7
 80062bc:	080062c5 	.word	0x080062c5
 80062c0:	0800635f 	.word	0x0800635f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d048      	beq.n	8006362 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80062d4:	e045      	b.n	8006362 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80062de:	d142      	bne.n	8006366 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80062e4:	e03f      	b.n	8006366 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062ee:	d123      	bne.n	8006338 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f4:	2b03      	cmp	r3, #3
 80062f6:	d838      	bhi.n	800636a <DMA_CheckFifoParam+0xda>
 80062f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006300 <DMA_CheckFifoParam+0x70>)
 80062fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fe:	bf00      	nop
 8006300:	08006311 	.word	0x08006311
 8006304:	08006317 	.word	0x08006317
 8006308:	08006311 	.word	0x08006311
 800630c:	08006329 	.word	0x08006329
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	73fb      	strb	r3, [r7, #15]
        break;
 8006314:	e030      	b.n	8006378 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800631a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d025      	beq.n	800636e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006326:	e022      	b.n	800636e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800632c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006330:	d11f      	bne.n	8006372 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006336:	e01c      	b.n	8006372 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800633c:	2b02      	cmp	r3, #2
 800633e:	d902      	bls.n	8006346 <DMA_CheckFifoParam+0xb6>
 8006340:	2b03      	cmp	r3, #3
 8006342:	d003      	beq.n	800634c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006344:	e018      	b.n	8006378 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	73fb      	strb	r3, [r7, #15]
        break;
 800634a:	e015      	b.n	8006378 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006350:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00e      	beq.n	8006376 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	73fb      	strb	r3, [r7, #15]
    break;
 800635c:	e00b      	b.n	8006376 <DMA_CheckFifoParam+0xe6>
        break;
 800635e:	bf00      	nop
 8006360:	e00a      	b.n	8006378 <DMA_CheckFifoParam+0xe8>
        break;
 8006362:	bf00      	nop
 8006364:	e008      	b.n	8006378 <DMA_CheckFifoParam+0xe8>
        break;
 8006366:	bf00      	nop
 8006368:	e006      	b.n	8006378 <DMA_CheckFifoParam+0xe8>
        break;
 800636a:	bf00      	nop
 800636c:	e004      	b.n	8006378 <DMA_CheckFifoParam+0xe8>
        break;
 800636e:	bf00      	nop
 8006370:	e002      	b.n	8006378 <DMA_CheckFifoParam+0xe8>
        break;
 8006372:	bf00      	nop
 8006374:	e000      	b.n	8006378 <DMA_CheckFifoParam+0xe8>
    break;
 8006376:	bf00      	nop
    }
  }

  return status;
 8006378:	7bfb      	ldrb	r3, [r7, #15]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop

08006388 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a38      	ldr	r2, [pc, #224]	@ (800647c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d022      	beq.n	80063e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a36      	ldr	r2, [pc, #216]	@ (8006480 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d01d      	beq.n	80063e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a35      	ldr	r2, [pc, #212]	@ (8006484 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d018      	beq.n	80063e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a33      	ldr	r2, [pc, #204]	@ (8006488 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d013      	beq.n	80063e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a32      	ldr	r2, [pc, #200]	@ (800648c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d00e      	beq.n	80063e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a30      	ldr	r2, [pc, #192]	@ (8006490 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d009      	beq.n	80063e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a2f      	ldr	r2, [pc, #188]	@ (8006494 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d004      	beq.n	80063e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a2d      	ldr	r2, [pc, #180]	@ (8006498 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d101      	bne.n	80063ea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80063e6:	2301      	movs	r3, #1
 80063e8:	e000      	b.n	80063ec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80063ea:	2300      	movs	r3, #0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d01a      	beq.n	8006426 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	3b08      	subs	r3, #8
 80063f8:	4a28      	ldr	r2, [pc, #160]	@ (800649c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80063fa:	fba2 2303 	umull	r2, r3, r2, r3
 80063fe:	091b      	lsrs	r3, r3, #4
 8006400:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	4b26      	ldr	r3, [pc, #152]	@ (80064a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006406:	4413      	add	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	461a      	mov	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a24      	ldr	r2, [pc, #144]	@ (80064a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006414:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f003 031f 	and.w	r3, r3, #31
 800641c:	2201      	movs	r2, #1
 800641e:	409a      	lsls	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006424:	e024      	b.n	8006470 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	b2db      	uxtb	r3, r3
 800642c:	3b10      	subs	r3, #16
 800642e:	4a1e      	ldr	r2, [pc, #120]	@ (80064a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006430:	fba2 2303 	umull	r2, r3, r2, r3
 8006434:	091b      	lsrs	r3, r3, #4
 8006436:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	4a1c      	ldr	r2, [pc, #112]	@ (80064ac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d806      	bhi.n	800644e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	4a1b      	ldr	r2, [pc, #108]	@ (80064b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d902      	bls.n	800644e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	3308      	adds	r3, #8
 800644c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	4b18      	ldr	r3, [pc, #96]	@ (80064b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006452:	4413      	add	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	461a      	mov	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a16      	ldr	r2, [pc, #88]	@ (80064b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006460:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f003 031f 	and.w	r3, r3, #31
 8006468:	2201      	movs	r2, #1
 800646a:	409a      	lsls	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006470:	bf00      	nop
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	58025408 	.word	0x58025408
 8006480:	5802541c 	.word	0x5802541c
 8006484:	58025430 	.word	0x58025430
 8006488:	58025444 	.word	0x58025444
 800648c:	58025458 	.word	0x58025458
 8006490:	5802546c 	.word	0x5802546c
 8006494:	58025480 	.word	0x58025480
 8006498:	58025494 	.word	0x58025494
 800649c:	cccccccd 	.word	0xcccccccd
 80064a0:	16009600 	.word	0x16009600
 80064a4:	58025880 	.word	0x58025880
 80064a8:	aaaaaaab 	.word	0xaaaaaaab
 80064ac:	400204b8 	.word	0x400204b8
 80064b0:	4002040f 	.word	0x4002040f
 80064b4:	10008200 	.word	0x10008200
 80064b8:	40020880 	.word	0x40020880

080064bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d04a      	beq.n	8006568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2b08      	cmp	r3, #8
 80064d6:	d847      	bhi.n	8006568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a25      	ldr	r2, [pc, #148]	@ (8006574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d022      	beq.n	8006528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a24      	ldr	r2, [pc, #144]	@ (8006578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d01d      	beq.n	8006528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a22      	ldr	r2, [pc, #136]	@ (800657c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d018      	beq.n	8006528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a21      	ldr	r2, [pc, #132]	@ (8006580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d013      	beq.n	8006528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a1f      	ldr	r2, [pc, #124]	@ (8006584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d00e      	beq.n	8006528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a1e      	ldr	r2, [pc, #120]	@ (8006588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d009      	beq.n	8006528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a1c      	ldr	r2, [pc, #112]	@ (800658c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d004      	beq.n	8006528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a1b      	ldr	r2, [pc, #108]	@ (8006590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d101      	bne.n	800652c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006528:	2301      	movs	r3, #1
 800652a:	e000      	b.n	800652e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800652c:	2300      	movs	r3, #0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	4b17      	ldr	r3, [pc, #92]	@ (8006594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006536:	4413      	add	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	461a      	mov	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a15      	ldr	r2, [pc, #84]	@ (8006598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006544:	671a      	str	r2, [r3, #112]	@ 0x70
 8006546:	e009      	b.n	800655c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	4b14      	ldr	r3, [pc, #80]	@ (800659c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800654c:	4413      	add	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	461a      	mov	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a11      	ldr	r2, [pc, #68]	@ (80065a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800655a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	3b01      	subs	r3, #1
 8006560:	2201      	movs	r2, #1
 8006562:	409a      	lsls	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006568:	bf00      	nop
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	58025408 	.word	0x58025408
 8006578:	5802541c 	.word	0x5802541c
 800657c:	58025430 	.word	0x58025430
 8006580:	58025444 	.word	0x58025444
 8006584:	58025458 	.word	0x58025458
 8006588:	5802546c 	.word	0x5802546c
 800658c:	58025480 	.word	0x58025480
 8006590:	58025494 	.word	0x58025494
 8006594:	1600963f 	.word	0x1600963f
 8006598:	58025940 	.word	0x58025940
 800659c:	1000823f 	.word	0x1000823f
 80065a0:	40020940 	.word	0x40020940

080065a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b089      	sub	sp, #36	@ 0x24
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80065b2:	4b89      	ldr	r3, [pc, #548]	@ (80067d8 <HAL_GPIO_Init+0x234>)
 80065b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80065b6:	e194      	b.n	80068e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	2101      	movs	r1, #1
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	fa01 f303 	lsl.w	r3, r1, r3
 80065c4:	4013      	ands	r3, r2
 80065c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f000 8186 	beq.w	80068dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f003 0303 	and.w	r3, r3, #3
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d005      	beq.n	80065e8 <HAL_GPIO_Init+0x44>
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f003 0303 	and.w	r3, r3, #3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d130      	bne.n	800664a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	005b      	lsls	r3, r3, #1
 80065f2:	2203      	movs	r2, #3
 80065f4:	fa02 f303 	lsl.w	r3, r2, r3
 80065f8:	43db      	mvns	r3, r3
 80065fa:	69ba      	ldr	r2, [r7, #24]
 80065fc:	4013      	ands	r3, r2
 80065fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	68da      	ldr	r2, [r3, #12]
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	005b      	lsls	r3, r3, #1
 8006608:	fa02 f303 	lsl.w	r3, r2, r3
 800660c:	69ba      	ldr	r2, [r7, #24]
 800660e:	4313      	orrs	r3, r2
 8006610:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800661e:	2201      	movs	r2, #1
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	fa02 f303 	lsl.w	r3, r2, r3
 8006626:	43db      	mvns	r3, r3
 8006628:	69ba      	ldr	r2, [r7, #24]
 800662a:	4013      	ands	r3, r2
 800662c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	091b      	lsrs	r3, r3, #4
 8006634:	f003 0201 	and.w	r2, r3, #1
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	fa02 f303 	lsl.w	r3, r2, r3
 800663e:	69ba      	ldr	r2, [r7, #24]
 8006640:	4313      	orrs	r3, r2
 8006642:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f003 0303 	and.w	r3, r3, #3
 8006652:	2b03      	cmp	r3, #3
 8006654:	d017      	beq.n	8006686 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	005b      	lsls	r3, r3, #1
 8006660:	2203      	movs	r2, #3
 8006662:	fa02 f303 	lsl.w	r3, r2, r3
 8006666:	43db      	mvns	r3, r3
 8006668:	69ba      	ldr	r2, [r7, #24]
 800666a:	4013      	ands	r3, r2
 800666c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	005b      	lsls	r3, r3, #1
 8006676:	fa02 f303 	lsl.w	r3, r2, r3
 800667a:	69ba      	ldr	r2, [r7, #24]
 800667c:	4313      	orrs	r3, r2
 800667e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	69ba      	ldr	r2, [r7, #24]
 8006684:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f003 0303 	and.w	r3, r3, #3
 800668e:	2b02      	cmp	r3, #2
 8006690:	d123      	bne.n	80066da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	08da      	lsrs	r2, r3, #3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	3208      	adds	r2, #8
 800669a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800669e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	f003 0307 	and.w	r3, r3, #7
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	220f      	movs	r2, #15
 80066aa:	fa02 f303 	lsl.w	r3, r2, r3
 80066ae:	43db      	mvns	r3, r3
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	4013      	ands	r3, r2
 80066b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	691a      	ldr	r2, [r3, #16]
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	f003 0307 	and.w	r3, r3, #7
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	fa02 f303 	lsl.w	r3, r2, r3
 80066c6:	69ba      	ldr	r2, [r7, #24]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	08da      	lsrs	r2, r3, #3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	3208      	adds	r2, #8
 80066d4:	69b9      	ldr	r1, [r7, #24]
 80066d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	2203      	movs	r2, #3
 80066e6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ea:	43db      	mvns	r3, r3
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	4013      	ands	r3, r2
 80066f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f003 0203 	and.w	r2, r3, #3
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	005b      	lsls	r3, r3, #1
 80066fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006702:	69ba      	ldr	r2, [r7, #24]
 8006704:	4313      	orrs	r3, r2
 8006706:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	69ba      	ldr	r2, [r7, #24]
 800670c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 80e0 	beq.w	80068dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800671c:	4b2f      	ldr	r3, [pc, #188]	@ (80067dc <HAL_GPIO_Init+0x238>)
 800671e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006722:	4a2e      	ldr	r2, [pc, #184]	@ (80067dc <HAL_GPIO_Init+0x238>)
 8006724:	f043 0302 	orr.w	r3, r3, #2
 8006728:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800672c:	4b2b      	ldr	r3, [pc, #172]	@ (80067dc <HAL_GPIO_Init+0x238>)
 800672e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800673a:	4a29      	ldr	r2, [pc, #164]	@ (80067e0 <HAL_GPIO_Init+0x23c>)
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	089b      	lsrs	r3, r3, #2
 8006740:	3302      	adds	r3, #2
 8006742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006746:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	f003 0303 	and.w	r3, r3, #3
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	220f      	movs	r2, #15
 8006752:	fa02 f303 	lsl.w	r3, r2, r3
 8006756:	43db      	mvns	r3, r3
 8006758:	69ba      	ldr	r2, [r7, #24]
 800675a:	4013      	ands	r3, r2
 800675c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a20      	ldr	r2, [pc, #128]	@ (80067e4 <HAL_GPIO_Init+0x240>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d052      	beq.n	800680c <HAL_GPIO_Init+0x268>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a1f      	ldr	r2, [pc, #124]	@ (80067e8 <HAL_GPIO_Init+0x244>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d031      	beq.n	80067d2 <HAL_GPIO_Init+0x22e>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a1e      	ldr	r2, [pc, #120]	@ (80067ec <HAL_GPIO_Init+0x248>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d02b      	beq.n	80067ce <HAL_GPIO_Init+0x22a>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a1d      	ldr	r2, [pc, #116]	@ (80067f0 <HAL_GPIO_Init+0x24c>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d025      	beq.n	80067ca <HAL_GPIO_Init+0x226>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a1c      	ldr	r2, [pc, #112]	@ (80067f4 <HAL_GPIO_Init+0x250>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d01f      	beq.n	80067c6 <HAL_GPIO_Init+0x222>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a1b      	ldr	r2, [pc, #108]	@ (80067f8 <HAL_GPIO_Init+0x254>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d019      	beq.n	80067c2 <HAL_GPIO_Init+0x21e>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a1a      	ldr	r2, [pc, #104]	@ (80067fc <HAL_GPIO_Init+0x258>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d013      	beq.n	80067be <HAL_GPIO_Init+0x21a>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a19      	ldr	r2, [pc, #100]	@ (8006800 <HAL_GPIO_Init+0x25c>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d00d      	beq.n	80067ba <HAL_GPIO_Init+0x216>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a18      	ldr	r2, [pc, #96]	@ (8006804 <HAL_GPIO_Init+0x260>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d007      	beq.n	80067b6 <HAL_GPIO_Init+0x212>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a17      	ldr	r2, [pc, #92]	@ (8006808 <HAL_GPIO_Init+0x264>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d101      	bne.n	80067b2 <HAL_GPIO_Init+0x20e>
 80067ae:	2309      	movs	r3, #9
 80067b0:	e02d      	b.n	800680e <HAL_GPIO_Init+0x26a>
 80067b2:	230a      	movs	r3, #10
 80067b4:	e02b      	b.n	800680e <HAL_GPIO_Init+0x26a>
 80067b6:	2308      	movs	r3, #8
 80067b8:	e029      	b.n	800680e <HAL_GPIO_Init+0x26a>
 80067ba:	2307      	movs	r3, #7
 80067bc:	e027      	b.n	800680e <HAL_GPIO_Init+0x26a>
 80067be:	2306      	movs	r3, #6
 80067c0:	e025      	b.n	800680e <HAL_GPIO_Init+0x26a>
 80067c2:	2305      	movs	r3, #5
 80067c4:	e023      	b.n	800680e <HAL_GPIO_Init+0x26a>
 80067c6:	2304      	movs	r3, #4
 80067c8:	e021      	b.n	800680e <HAL_GPIO_Init+0x26a>
 80067ca:	2303      	movs	r3, #3
 80067cc:	e01f      	b.n	800680e <HAL_GPIO_Init+0x26a>
 80067ce:	2302      	movs	r3, #2
 80067d0:	e01d      	b.n	800680e <HAL_GPIO_Init+0x26a>
 80067d2:	2301      	movs	r3, #1
 80067d4:	e01b      	b.n	800680e <HAL_GPIO_Init+0x26a>
 80067d6:	bf00      	nop
 80067d8:	58000080 	.word	0x58000080
 80067dc:	58024400 	.word	0x58024400
 80067e0:	58000400 	.word	0x58000400
 80067e4:	58020000 	.word	0x58020000
 80067e8:	58020400 	.word	0x58020400
 80067ec:	58020800 	.word	0x58020800
 80067f0:	58020c00 	.word	0x58020c00
 80067f4:	58021000 	.word	0x58021000
 80067f8:	58021400 	.word	0x58021400
 80067fc:	58021800 	.word	0x58021800
 8006800:	58021c00 	.word	0x58021c00
 8006804:	58022000 	.word	0x58022000
 8006808:	58022400 	.word	0x58022400
 800680c:	2300      	movs	r3, #0
 800680e:	69fa      	ldr	r2, [r7, #28]
 8006810:	f002 0203 	and.w	r2, r2, #3
 8006814:	0092      	lsls	r2, r2, #2
 8006816:	4093      	lsls	r3, r2
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	4313      	orrs	r3, r2
 800681c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800681e:	4938      	ldr	r1, [pc, #224]	@ (8006900 <HAL_GPIO_Init+0x35c>)
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	089b      	lsrs	r3, r3, #2
 8006824:	3302      	adds	r3, #2
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800682c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	43db      	mvns	r3, r3
 8006838:	69ba      	ldr	r2, [r7, #24]
 800683a:	4013      	ands	r3, r2
 800683c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800684a:	69ba      	ldr	r2, [r7, #24]
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	4313      	orrs	r3, r2
 8006850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006852:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800685a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	43db      	mvns	r3, r3
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	4013      	ands	r3, r2
 800686a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d003      	beq.n	8006880 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006878:	69ba      	ldr	r2, [r7, #24]
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	4313      	orrs	r3, r2
 800687e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006880:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	43db      	mvns	r3, r3
 8006892:	69ba      	ldr	r2, [r7, #24]
 8006894:	4013      	ands	r3, r2
 8006896:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d003      	beq.n	80068ac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80068a4:	69ba      	ldr	r2, [r7, #24]
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	69ba      	ldr	r2, [r7, #24]
 80068b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	43db      	mvns	r3, r3
 80068bc:	69ba      	ldr	r2, [r7, #24]
 80068be:	4013      	ands	r3, r2
 80068c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80068ce:	69ba      	ldr	r2, [r7, #24]
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	69ba      	ldr	r2, [r7, #24]
 80068da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	3301      	adds	r3, #1
 80068e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	fa22 f303 	lsr.w	r3, r2, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f47f ae63 	bne.w	80065b8 <HAL_GPIO_Init+0x14>
  }
}
 80068f2:	bf00      	nop
 80068f4:	bf00      	nop
 80068f6:	3724      	adds	r7, #36	@ 0x24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	58000400 	.word	0x58000400

08006904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	807b      	strh	r3, [r7, #2]
 8006910:	4613      	mov	r3, r2
 8006912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006914:	787b      	ldrb	r3, [r7, #1]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d003      	beq.n	8006922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800691a:	887a      	ldrh	r2, [r7, #2]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006920:	e003      	b.n	800692a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006922:	887b      	ldrh	r3, [r7, #2]
 8006924:	041a      	lsls	r2, r3, #16
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	619a      	str	r2, [r3, #24]
}
 800692a:	bf00      	nop
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b082      	sub	sp, #8
 800693a:	af00      	add	r7, sp, #0
 800693c:	4603      	mov	r3, r0
 800693e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006944:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006948:	88fb      	ldrh	r3, [r7, #6]
 800694a:	4013      	ands	r3, r2
 800694c:	2b00      	cmp	r3, #0
 800694e:	d008      	beq.n	8006962 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006950:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006954:	88fb      	ldrh	r3, [r7, #6]
 8006956:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800695a:	88fb      	ldrh	r3, [r7, #6]
 800695c:	4618      	mov	r0, r3
 800695e:	f7fa fa15 	bl	8000d8c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006962:	bf00      	nop
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
	...

0800696c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006974:	4b19      	ldr	r3, [pc, #100]	@ (80069dc <HAL_PWREx_ConfigSupply+0x70>)
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f003 0304 	and.w	r3, r3, #4
 800697c:	2b04      	cmp	r3, #4
 800697e:	d00a      	beq.n	8006996 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006980:	4b16      	ldr	r3, [pc, #88]	@ (80069dc <HAL_PWREx_ConfigSupply+0x70>)
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f003 0307 	and.w	r3, r3, #7
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	429a      	cmp	r2, r3
 800698c:	d001      	beq.n	8006992 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e01f      	b.n	80069d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	e01d      	b.n	80069d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006996:	4b11      	ldr	r3, [pc, #68]	@ (80069dc <HAL_PWREx_ConfigSupply+0x70>)
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	f023 0207 	bic.w	r2, r3, #7
 800699e:	490f      	ldr	r1, [pc, #60]	@ (80069dc <HAL_PWREx_ConfigSupply+0x70>)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80069a6:	f7fb fbaf 	bl	8002108 <HAL_GetTick>
 80069aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80069ac:	e009      	b.n	80069c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80069ae:	f7fb fbab 	bl	8002108 <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069bc:	d901      	bls.n	80069c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e007      	b.n	80069d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80069c2:	4b06      	ldr	r3, [pc, #24]	@ (80069dc <HAL_PWREx_ConfigSupply+0x70>)
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069ce:	d1ee      	bne.n	80069ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	58024800 	.word	0x58024800

080069e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b08c      	sub	sp, #48	@ 0x30
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d102      	bne.n	80069f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	f000 bc48 	b.w	8007284 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0301 	and.w	r3, r3, #1
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 8088 	beq.w	8006b12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a02:	4b99      	ldr	r3, [pc, #612]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a0c:	4b96      	ldr	r3, [pc, #600]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a10:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a14:	2b10      	cmp	r3, #16
 8006a16:	d007      	beq.n	8006a28 <HAL_RCC_OscConfig+0x48>
 8006a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a1a:	2b18      	cmp	r3, #24
 8006a1c:	d111      	bne.n	8006a42 <HAL_RCC_OscConfig+0x62>
 8006a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a20:	f003 0303 	and.w	r3, r3, #3
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d10c      	bne.n	8006a42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a28:	4b8f      	ldr	r3, [pc, #572]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d06d      	beq.n	8006b10 <HAL_RCC_OscConfig+0x130>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d169      	bne.n	8006b10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	f000 bc21 	b.w	8007284 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a4a:	d106      	bne.n	8006a5a <HAL_RCC_OscConfig+0x7a>
 8006a4c:	4b86      	ldr	r3, [pc, #536]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a85      	ldr	r2, [pc, #532]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006a52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a56:	6013      	str	r3, [r2, #0]
 8006a58:	e02e      	b.n	8006ab8 <HAL_RCC_OscConfig+0xd8>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10c      	bne.n	8006a7c <HAL_RCC_OscConfig+0x9c>
 8006a62:	4b81      	ldr	r3, [pc, #516]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a80      	ldr	r2, [pc, #512]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006a68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a6c:	6013      	str	r3, [r2, #0]
 8006a6e:	4b7e      	ldr	r3, [pc, #504]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a7d      	ldr	r2, [pc, #500]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006a74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a78:	6013      	str	r3, [r2, #0]
 8006a7a:	e01d      	b.n	8006ab8 <HAL_RCC_OscConfig+0xd8>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a84:	d10c      	bne.n	8006aa0 <HAL_RCC_OscConfig+0xc0>
 8006a86:	4b78      	ldr	r3, [pc, #480]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a77      	ldr	r2, [pc, #476]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006a8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a90:	6013      	str	r3, [r2, #0]
 8006a92:	4b75      	ldr	r3, [pc, #468]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a74      	ldr	r2, [pc, #464]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a9c:	6013      	str	r3, [r2, #0]
 8006a9e:	e00b      	b.n	8006ab8 <HAL_RCC_OscConfig+0xd8>
 8006aa0:	4b71      	ldr	r3, [pc, #452]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a70      	ldr	r2, [pc, #448]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006aa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006aaa:	6013      	str	r3, [r2, #0]
 8006aac:	4b6e      	ldr	r3, [pc, #440]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a6d      	ldr	r2, [pc, #436]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006ab2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ab6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d013      	beq.n	8006ae8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac0:	f7fb fb22 	bl	8002108 <HAL_GetTick>
 8006ac4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ac6:	e008      	b.n	8006ada <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ac8:	f7fb fb1e 	bl	8002108 <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	2b64      	cmp	r3, #100	@ 0x64
 8006ad4:	d901      	bls.n	8006ada <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e3d4      	b.n	8007284 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ada:	4b63      	ldr	r3, [pc, #396]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d0f0      	beq.n	8006ac8 <HAL_RCC_OscConfig+0xe8>
 8006ae6:	e014      	b.n	8006b12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ae8:	f7fb fb0e 	bl	8002108 <HAL_GetTick>
 8006aec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006aee:	e008      	b.n	8006b02 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006af0:	f7fb fb0a 	bl	8002108 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	2b64      	cmp	r3, #100	@ 0x64
 8006afc:	d901      	bls.n	8006b02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e3c0      	b.n	8007284 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b02:	4b59      	ldr	r3, [pc, #356]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1f0      	bne.n	8006af0 <HAL_RCC_OscConfig+0x110>
 8006b0e:	e000      	b.n	8006b12 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 80ca 	beq.w	8006cb4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b20:	4b51      	ldr	r3, [pc, #324]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b28:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b2a:	4b4f      	ldr	r3, [pc, #316]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006b30:	6a3b      	ldr	r3, [r7, #32]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d007      	beq.n	8006b46 <HAL_RCC_OscConfig+0x166>
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	2b18      	cmp	r3, #24
 8006b3a:	d156      	bne.n	8006bea <HAL_RCC_OscConfig+0x20a>
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	f003 0303 	and.w	r3, r3, #3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d151      	bne.n	8006bea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b46:	4b48      	ldr	r3, [pc, #288]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0304 	and.w	r3, r3, #4
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d005      	beq.n	8006b5e <HAL_RCC_OscConfig+0x17e>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e392      	b.n	8007284 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b5e:	4b42      	ldr	r3, [pc, #264]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f023 0219 	bic.w	r2, r3, #25
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	493f      	ldr	r1, [pc, #252]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b70:	f7fb faca 	bl	8002108 <HAL_GetTick>
 8006b74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b76:	e008      	b.n	8006b8a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b78:	f7fb fac6 	bl	8002108 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d901      	bls.n	8006b8a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e37c      	b.n	8007284 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b8a:	4b37      	ldr	r3, [pc, #220]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0304 	and.w	r3, r3, #4
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d0f0      	beq.n	8006b78 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b96:	f7fb fae7 	bl	8002168 <HAL_GetREVID>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d817      	bhi.n	8006bd4 <HAL_RCC_OscConfig+0x1f4>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	2b40      	cmp	r3, #64	@ 0x40
 8006baa:	d108      	bne.n	8006bbe <HAL_RCC_OscConfig+0x1de>
 8006bac:	4b2e      	ldr	r3, [pc, #184]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006bb4:	4a2c      	ldr	r2, [pc, #176]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006bb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bbc:	e07a      	b.n	8006cb4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	031b      	lsls	r3, r3, #12
 8006bcc:	4926      	ldr	r1, [pc, #152]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bd2:	e06f      	b.n	8006cb4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bd4:	4b24      	ldr	r3, [pc, #144]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	061b      	lsls	r3, r3, #24
 8006be2:	4921      	ldr	r1, [pc, #132]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006be8:	e064      	b.n	8006cb4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d047      	beq.n	8006c82 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f023 0219 	bic.w	r2, r3, #25
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	491a      	ldr	r1, [pc, #104]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c04:	f7fb fa80 	bl	8002108 <HAL_GetTick>
 8006c08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c0a:	e008      	b.n	8006c1e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c0c:	f7fb fa7c 	bl	8002108 <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d901      	bls.n	8006c1e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e332      	b.n	8007284 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c1e:	4b12      	ldr	r3, [pc, #72]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0304 	and.w	r3, r3, #4
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d0f0      	beq.n	8006c0c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c2a:	f7fb fa9d 	bl	8002168 <HAL_GetREVID>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d819      	bhi.n	8006c6c <HAL_RCC_OscConfig+0x28c>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	2b40      	cmp	r3, #64	@ 0x40
 8006c3e:	d108      	bne.n	8006c52 <HAL_RCC_OscConfig+0x272>
 8006c40:	4b09      	ldr	r3, [pc, #36]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006c48:	4a07      	ldr	r2, [pc, #28]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006c4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c4e:	6053      	str	r3, [r2, #4]
 8006c50:	e030      	b.n	8006cb4 <HAL_RCC_OscConfig+0x2d4>
 8006c52:	4b05      	ldr	r3, [pc, #20]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	031b      	lsls	r3, r3, #12
 8006c60:	4901      	ldr	r1, [pc, #4]	@ (8006c68 <HAL_RCC_OscConfig+0x288>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	604b      	str	r3, [r1, #4]
 8006c66:	e025      	b.n	8006cb4 <HAL_RCC_OscConfig+0x2d4>
 8006c68:	58024400 	.word	0x58024400
 8006c6c:	4b9a      	ldr	r3, [pc, #616]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	061b      	lsls	r3, r3, #24
 8006c7a:	4997      	ldr	r1, [pc, #604]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	604b      	str	r3, [r1, #4]
 8006c80:	e018      	b.n	8006cb4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c82:	4b95      	ldr	r3, [pc, #596]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a94      	ldr	r2, [pc, #592]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006c88:	f023 0301 	bic.w	r3, r3, #1
 8006c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c8e:	f7fb fa3b 	bl	8002108 <HAL_GetTick>
 8006c92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c94:	e008      	b.n	8006ca8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c96:	f7fb fa37 	bl	8002108 <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d901      	bls.n	8006ca8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e2ed      	b.n	8007284 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ca8:	4b8b      	ldr	r3, [pc, #556]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0304 	and.w	r3, r3, #4
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1f0      	bne.n	8006c96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0310 	and.w	r3, r3, #16
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 80a9 	beq.w	8006e14 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cc2:	4b85      	ldr	r3, [pc, #532]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ccc:	4b82      	ldr	r3, [pc, #520]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	2b08      	cmp	r3, #8
 8006cd6:	d007      	beq.n	8006ce8 <HAL_RCC_OscConfig+0x308>
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	2b18      	cmp	r3, #24
 8006cdc:	d13a      	bne.n	8006d54 <HAL_RCC_OscConfig+0x374>
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f003 0303 	and.w	r3, r3, #3
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d135      	bne.n	8006d54 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ce8:	4b7b      	ldr	r3, [pc, #492]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d005      	beq.n	8006d00 <HAL_RCC_OscConfig+0x320>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	69db      	ldr	r3, [r3, #28]
 8006cf8:	2b80      	cmp	r3, #128	@ 0x80
 8006cfa:	d001      	beq.n	8006d00 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e2c1      	b.n	8007284 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d00:	f7fb fa32 	bl	8002168 <HAL_GetREVID>
 8006d04:	4603      	mov	r3, r0
 8006d06:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d817      	bhi.n	8006d3e <HAL_RCC_OscConfig+0x35e>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	2b20      	cmp	r3, #32
 8006d14:	d108      	bne.n	8006d28 <HAL_RCC_OscConfig+0x348>
 8006d16:	4b70      	ldr	r3, [pc, #448]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006d1e:	4a6e      	ldr	r2, [pc, #440]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006d20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d24:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d26:	e075      	b.n	8006e14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d28:	4b6b      	ldr	r3, [pc, #428]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	069b      	lsls	r3, r3, #26
 8006d36:	4968      	ldr	r1, [pc, #416]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d3c:	e06a      	b.n	8006e14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d3e:	4b66      	ldr	r3, [pc, #408]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	061b      	lsls	r3, r3, #24
 8006d4c:	4962      	ldr	r1, [pc, #392]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d52:	e05f      	b.n	8006e14 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	69db      	ldr	r3, [r3, #28]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d042      	beq.n	8006de2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006d5c:	4b5e      	ldr	r3, [pc, #376]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a5d      	ldr	r2, [pc, #372]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d68:	f7fb f9ce 	bl	8002108 <HAL_GetTick>
 8006d6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d6e:	e008      	b.n	8006d82 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006d70:	f7fb f9ca 	bl	8002108 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d901      	bls.n	8006d82 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e280      	b.n	8007284 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d82:	4b55      	ldr	r3, [pc, #340]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0f0      	beq.n	8006d70 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d8e:	f7fb f9eb 	bl	8002168 <HAL_GetREVID>
 8006d92:	4603      	mov	r3, r0
 8006d94:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d817      	bhi.n	8006dcc <HAL_RCC_OscConfig+0x3ec>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a1b      	ldr	r3, [r3, #32]
 8006da0:	2b20      	cmp	r3, #32
 8006da2:	d108      	bne.n	8006db6 <HAL_RCC_OscConfig+0x3d6>
 8006da4:	4b4c      	ldr	r3, [pc, #304]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006dac:	4a4a      	ldr	r2, [pc, #296]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006dae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006db2:	6053      	str	r3, [r2, #4]
 8006db4:	e02e      	b.n	8006e14 <HAL_RCC_OscConfig+0x434>
 8006db6:	4b48      	ldr	r3, [pc, #288]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	069b      	lsls	r3, r3, #26
 8006dc4:	4944      	ldr	r1, [pc, #272]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	604b      	str	r3, [r1, #4]
 8006dca:	e023      	b.n	8006e14 <HAL_RCC_OscConfig+0x434>
 8006dcc:	4b42      	ldr	r3, [pc, #264]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	061b      	lsls	r3, r3, #24
 8006dda:	493f      	ldr	r1, [pc, #252]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	60cb      	str	r3, [r1, #12]
 8006de0:	e018      	b.n	8006e14 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006de2:	4b3d      	ldr	r3, [pc, #244]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a3c      	ldr	r2, [pc, #240]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006de8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dee:	f7fb f98b 	bl	8002108 <HAL_GetTick>
 8006df2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006df4:	e008      	b.n	8006e08 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006df6:	f7fb f987 	bl	8002108 <HAL_GetTick>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	d901      	bls.n	8006e08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e23d      	b.n	8007284 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e08:	4b33      	ldr	r3, [pc, #204]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1f0      	bne.n	8006df6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0308 	and.w	r3, r3, #8
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d036      	beq.n	8006e8e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d019      	beq.n	8006e5c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e28:	4b2b      	ldr	r3, [pc, #172]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006e2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e2c:	4a2a      	ldr	r2, [pc, #168]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006e2e:	f043 0301 	orr.w	r3, r3, #1
 8006e32:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e34:	f7fb f968 	bl	8002108 <HAL_GetTick>
 8006e38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e3a:	e008      	b.n	8006e4e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e3c:	f7fb f964 	bl	8002108 <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d901      	bls.n	8006e4e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e21a      	b.n	8007284 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e4e:	4b22      	ldr	r3, [pc, #136]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006e50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e52:	f003 0302 	and.w	r3, r3, #2
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d0f0      	beq.n	8006e3c <HAL_RCC_OscConfig+0x45c>
 8006e5a:	e018      	b.n	8006e8e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e5c:	4b1e      	ldr	r3, [pc, #120]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006e5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e60:	4a1d      	ldr	r2, [pc, #116]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006e62:	f023 0301 	bic.w	r3, r3, #1
 8006e66:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e68:	f7fb f94e 	bl	8002108 <HAL_GetTick>
 8006e6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006e6e:	e008      	b.n	8006e82 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e70:	f7fb f94a 	bl	8002108 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e200      	b.n	8007284 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006e82:	4b15      	ldr	r3, [pc, #84]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1f0      	bne.n	8006e70 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 0320 	and.w	r3, r3, #32
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d039      	beq.n	8006f0e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d01c      	beq.n	8006edc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a0c      	ldr	r2, [pc, #48]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006ea8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006eac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006eae:	f7fb f92b 	bl	8002108 <HAL_GetTick>
 8006eb2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006eb4:	e008      	b.n	8006ec8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006eb6:	f7fb f927 	bl	8002108 <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d901      	bls.n	8006ec8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e1dd      	b.n	8007284 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006ec8:	4b03      	ldr	r3, [pc, #12]	@ (8006ed8 <HAL_RCC_OscConfig+0x4f8>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d0f0      	beq.n	8006eb6 <HAL_RCC_OscConfig+0x4d6>
 8006ed4:	e01b      	b.n	8006f0e <HAL_RCC_OscConfig+0x52e>
 8006ed6:	bf00      	nop
 8006ed8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006edc:	4b9b      	ldr	r3, [pc, #620]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a9a      	ldr	r2, [pc, #616]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8006ee2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ee6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006ee8:	f7fb f90e 	bl	8002108 <HAL_GetTick>
 8006eec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006eee:	e008      	b.n	8006f02 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ef0:	f7fb f90a 	bl	8002108 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d901      	bls.n	8006f02 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e1c0      	b.n	8007284 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f02:	4b92      	ldr	r3, [pc, #584]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1f0      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0304 	and.w	r3, r3, #4
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f000 8081 	beq.w	800701e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006f1c:	4b8c      	ldr	r3, [pc, #560]	@ (8007150 <HAL_RCC_OscConfig+0x770>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a8b      	ldr	r2, [pc, #556]	@ (8007150 <HAL_RCC_OscConfig+0x770>)
 8006f22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f28:	f7fb f8ee 	bl	8002108 <HAL_GetTick>
 8006f2c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f2e:	e008      	b.n	8006f42 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f30:	f7fb f8ea 	bl	8002108 <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	2b64      	cmp	r3, #100	@ 0x64
 8006f3c:	d901      	bls.n	8006f42 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e1a0      	b.n	8007284 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f42:	4b83      	ldr	r3, [pc, #524]	@ (8007150 <HAL_RCC_OscConfig+0x770>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d0f0      	beq.n	8006f30 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d106      	bne.n	8006f64 <HAL_RCC_OscConfig+0x584>
 8006f56:	4b7d      	ldr	r3, [pc, #500]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8006f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f5a:	4a7c      	ldr	r2, [pc, #496]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8006f5c:	f043 0301 	orr.w	r3, r3, #1
 8006f60:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f62:	e02d      	b.n	8006fc0 <HAL_RCC_OscConfig+0x5e0>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10c      	bne.n	8006f86 <HAL_RCC_OscConfig+0x5a6>
 8006f6c:	4b77      	ldr	r3, [pc, #476]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8006f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f70:	4a76      	ldr	r2, [pc, #472]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8006f72:	f023 0301 	bic.w	r3, r3, #1
 8006f76:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f78:	4b74      	ldr	r3, [pc, #464]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8006f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f7c:	4a73      	ldr	r2, [pc, #460]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8006f7e:	f023 0304 	bic.w	r3, r3, #4
 8006f82:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f84:	e01c      	b.n	8006fc0 <HAL_RCC_OscConfig+0x5e0>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	2b05      	cmp	r3, #5
 8006f8c:	d10c      	bne.n	8006fa8 <HAL_RCC_OscConfig+0x5c8>
 8006f8e:	4b6f      	ldr	r3, [pc, #444]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8006f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f92:	4a6e      	ldr	r2, [pc, #440]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8006f94:	f043 0304 	orr.w	r3, r3, #4
 8006f98:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f9a:	4b6c      	ldr	r3, [pc, #432]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8006f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f9e:	4a6b      	ldr	r2, [pc, #428]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8006fa0:	f043 0301 	orr.w	r3, r3, #1
 8006fa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fa6:	e00b      	b.n	8006fc0 <HAL_RCC_OscConfig+0x5e0>
 8006fa8:	4b68      	ldr	r3, [pc, #416]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8006faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fac:	4a67      	ldr	r2, [pc, #412]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8006fae:	f023 0301 	bic.w	r3, r3, #1
 8006fb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fb4:	4b65      	ldr	r3, [pc, #404]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8006fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fb8:	4a64      	ldr	r2, [pc, #400]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8006fba:	f023 0304 	bic.w	r3, r3, #4
 8006fbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d015      	beq.n	8006ff4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fc8:	f7fb f89e 	bl	8002108 <HAL_GetTick>
 8006fcc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fce:	e00a      	b.n	8006fe6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fd0:	f7fb f89a 	bl	8002108 <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d901      	bls.n	8006fe6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e14e      	b.n	8007284 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fe6:	4b59      	ldr	r3, [pc, #356]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8006fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fea:	f003 0302 	and.w	r3, r3, #2
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d0ee      	beq.n	8006fd0 <HAL_RCC_OscConfig+0x5f0>
 8006ff2:	e014      	b.n	800701e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ff4:	f7fb f888 	bl	8002108 <HAL_GetTick>
 8006ff8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ffa:	e00a      	b.n	8007012 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ffc:	f7fb f884 	bl	8002108 <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800700a:	4293      	cmp	r3, r2
 800700c:	d901      	bls.n	8007012 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e138      	b.n	8007284 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007012:	4b4e      	ldr	r3, [pc, #312]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8007014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007016:	f003 0302 	and.w	r3, r3, #2
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1ee      	bne.n	8006ffc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007022:	2b00      	cmp	r3, #0
 8007024:	f000 812d 	beq.w	8007282 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007028:	4b48      	ldr	r3, [pc, #288]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007030:	2b18      	cmp	r3, #24
 8007032:	f000 80bd 	beq.w	80071b0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703a:	2b02      	cmp	r3, #2
 800703c:	f040 809e 	bne.w	800717c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007040:	4b42      	ldr	r3, [pc, #264]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a41      	ldr	r2, [pc, #260]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8007046:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800704a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800704c:	f7fb f85c 	bl	8002108 <HAL_GetTick>
 8007050:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007052:	e008      	b.n	8007066 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007054:	f7fb f858 	bl	8002108 <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	2b02      	cmp	r3, #2
 8007060:	d901      	bls.n	8007066 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e10e      	b.n	8007284 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007066:	4b39      	ldr	r3, [pc, #228]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1f0      	bne.n	8007054 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007072:	4b36      	ldr	r3, [pc, #216]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8007074:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007076:	4b37      	ldr	r3, [pc, #220]	@ (8007154 <HAL_RCC_OscConfig+0x774>)
 8007078:	4013      	ands	r3, r2
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007082:	0112      	lsls	r2, r2, #4
 8007084:	430a      	orrs	r2, r1
 8007086:	4931      	ldr	r1, [pc, #196]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8007088:	4313      	orrs	r3, r2
 800708a:	628b      	str	r3, [r1, #40]	@ 0x28
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007090:	3b01      	subs	r3, #1
 8007092:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800709a:	3b01      	subs	r3, #1
 800709c:	025b      	lsls	r3, r3, #9
 800709e:	b29b      	uxth	r3, r3
 80070a0:	431a      	orrs	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a6:	3b01      	subs	r3, #1
 80070a8:	041b      	lsls	r3, r3, #16
 80070aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80070ae:	431a      	orrs	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070b4:	3b01      	subs	r3, #1
 80070b6:	061b      	lsls	r3, r3, #24
 80070b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80070bc:	4923      	ldr	r1, [pc, #140]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 80070be:	4313      	orrs	r3, r2
 80070c0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80070c2:	4b22      	ldr	r3, [pc, #136]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 80070c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c6:	4a21      	ldr	r2, [pc, #132]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 80070c8:	f023 0301 	bic.w	r3, r3, #1
 80070cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80070ce:	4b1f      	ldr	r3, [pc, #124]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 80070d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070d2:	4b21      	ldr	r3, [pc, #132]	@ (8007158 <HAL_RCC_OscConfig+0x778>)
 80070d4:	4013      	ands	r3, r2
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80070da:	00d2      	lsls	r2, r2, #3
 80070dc:	491b      	ldr	r1, [pc, #108]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80070e2:	4b1a      	ldr	r3, [pc, #104]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 80070e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e6:	f023 020c 	bic.w	r2, r3, #12
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ee:	4917      	ldr	r1, [pc, #92]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80070f4:	4b15      	ldr	r3, [pc, #84]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 80070f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f8:	f023 0202 	bic.w	r2, r3, #2
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007100:	4912      	ldr	r1, [pc, #72]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8007102:	4313      	orrs	r3, r2
 8007104:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007106:	4b11      	ldr	r3, [pc, #68]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8007108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710a:	4a10      	ldr	r2, [pc, #64]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 800710c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007110:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007112:	4b0e      	ldr	r3, [pc, #56]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8007114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007116:	4a0d      	ldr	r2, [pc, #52]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8007118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800711c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800711e:	4b0b      	ldr	r3, [pc, #44]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8007120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007122:	4a0a      	ldr	r2, [pc, #40]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8007124:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007128:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800712a:	4b08      	ldr	r3, [pc, #32]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 800712c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712e:	4a07      	ldr	r2, [pc, #28]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8007130:	f043 0301 	orr.w	r3, r3, #1
 8007134:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007136:	4b05      	ldr	r3, [pc, #20]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a04      	ldr	r2, [pc, #16]	@ (800714c <HAL_RCC_OscConfig+0x76c>)
 800713c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007140:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007142:	f7fa ffe1 	bl	8002108 <HAL_GetTick>
 8007146:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007148:	e011      	b.n	800716e <HAL_RCC_OscConfig+0x78e>
 800714a:	bf00      	nop
 800714c:	58024400 	.word	0x58024400
 8007150:	58024800 	.word	0x58024800
 8007154:	fffffc0c 	.word	0xfffffc0c
 8007158:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800715c:	f7fa ffd4 	bl	8002108 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	2b02      	cmp	r3, #2
 8007168:	d901      	bls.n	800716e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e08a      	b.n	8007284 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800716e:	4b47      	ldr	r3, [pc, #284]	@ (800728c <HAL_RCC_OscConfig+0x8ac>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d0f0      	beq.n	800715c <HAL_RCC_OscConfig+0x77c>
 800717a:	e082      	b.n	8007282 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800717c:	4b43      	ldr	r3, [pc, #268]	@ (800728c <HAL_RCC_OscConfig+0x8ac>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a42      	ldr	r2, [pc, #264]	@ (800728c <HAL_RCC_OscConfig+0x8ac>)
 8007182:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007188:	f7fa ffbe 	bl	8002108 <HAL_GetTick>
 800718c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800718e:	e008      	b.n	80071a2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007190:	f7fa ffba 	bl	8002108 <HAL_GetTick>
 8007194:	4602      	mov	r2, r0
 8007196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	2b02      	cmp	r3, #2
 800719c:	d901      	bls.n	80071a2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e070      	b.n	8007284 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80071a2:	4b3a      	ldr	r3, [pc, #232]	@ (800728c <HAL_RCC_OscConfig+0x8ac>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1f0      	bne.n	8007190 <HAL_RCC_OscConfig+0x7b0>
 80071ae:	e068      	b.n	8007282 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80071b0:	4b36      	ldr	r3, [pc, #216]	@ (800728c <HAL_RCC_OscConfig+0x8ac>)
 80071b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80071b6:	4b35      	ldr	r3, [pc, #212]	@ (800728c <HAL_RCC_OscConfig+0x8ac>)
 80071b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d031      	beq.n	8007228 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	f003 0203 	and.w	r2, r3, #3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d12a      	bne.n	8007228 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	091b      	lsrs	r3, r3, #4
 80071d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071de:	429a      	cmp	r2, r3
 80071e0:	d122      	bne.n	8007228 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d11a      	bne.n	8007228 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	0a5b      	lsrs	r3, r3, #9
 80071f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007200:	429a      	cmp	r2, r3
 8007202:	d111      	bne.n	8007228 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	0c1b      	lsrs	r3, r3, #16
 8007208:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007210:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007212:	429a      	cmp	r2, r3
 8007214:	d108      	bne.n	8007228 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	0e1b      	lsrs	r3, r3, #24
 800721a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007222:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007224:	429a      	cmp	r2, r3
 8007226:	d001      	beq.n	800722c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e02b      	b.n	8007284 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800722c:	4b17      	ldr	r3, [pc, #92]	@ (800728c <HAL_RCC_OscConfig+0x8ac>)
 800722e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007230:	08db      	lsrs	r3, r3, #3
 8007232:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007236:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	429a      	cmp	r2, r3
 8007240:	d01f      	beq.n	8007282 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007242:	4b12      	ldr	r3, [pc, #72]	@ (800728c <HAL_RCC_OscConfig+0x8ac>)
 8007244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007246:	4a11      	ldr	r2, [pc, #68]	@ (800728c <HAL_RCC_OscConfig+0x8ac>)
 8007248:	f023 0301 	bic.w	r3, r3, #1
 800724c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800724e:	f7fa ff5b 	bl	8002108 <HAL_GetTick>
 8007252:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007254:	bf00      	nop
 8007256:	f7fa ff57 	bl	8002108 <HAL_GetTick>
 800725a:	4602      	mov	r2, r0
 800725c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725e:	4293      	cmp	r3, r2
 8007260:	d0f9      	beq.n	8007256 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007262:	4b0a      	ldr	r3, [pc, #40]	@ (800728c <HAL_RCC_OscConfig+0x8ac>)
 8007264:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007266:	4b0a      	ldr	r3, [pc, #40]	@ (8007290 <HAL_RCC_OscConfig+0x8b0>)
 8007268:	4013      	ands	r3, r2
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800726e:	00d2      	lsls	r2, r2, #3
 8007270:	4906      	ldr	r1, [pc, #24]	@ (800728c <HAL_RCC_OscConfig+0x8ac>)
 8007272:	4313      	orrs	r3, r2
 8007274:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007276:	4b05      	ldr	r3, [pc, #20]	@ (800728c <HAL_RCC_OscConfig+0x8ac>)
 8007278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800727a:	4a04      	ldr	r2, [pc, #16]	@ (800728c <HAL_RCC_OscConfig+0x8ac>)
 800727c:	f043 0301 	orr.w	r3, r3, #1
 8007280:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3730      	adds	r7, #48	@ 0x30
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	58024400 	.word	0x58024400
 8007290:	ffff0007 	.word	0xffff0007

08007294 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e19c      	b.n	80075e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072a8:	4b8a      	ldr	r3, [pc, #552]	@ (80074d4 <HAL_RCC_ClockConfig+0x240>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 030f 	and.w	r3, r3, #15
 80072b0:	683a      	ldr	r2, [r7, #0]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d910      	bls.n	80072d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072b6:	4b87      	ldr	r3, [pc, #540]	@ (80074d4 <HAL_RCC_ClockConfig+0x240>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f023 020f 	bic.w	r2, r3, #15
 80072be:	4985      	ldr	r1, [pc, #532]	@ (80074d4 <HAL_RCC_ClockConfig+0x240>)
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072c6:	4b83      	ldr	r3, [pc, #524]	@ (80074d4 <HAL_RCC_ClockConfig+0x240>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 030f 	and.w	r3, r3, #15
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d001      	beq.n	80072d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e184      	b.n	80075e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 0304 	and.w	r3, r3, #4
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d010      	beq.n	8007306 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	691a      	ldr	r2, [r3, #16]
 80072e8:	4b7b      	ldr	r3, [pc, #492]	@ (80074d8 <HAL_RCC_ClockConfig+0x244>)
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d908      	bls.n	8007306 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80072f4:	4b78      	ldr	r3, [pc, #480]	@ (80074d8 <HAL_RCC_ClockConfig+0x244>)
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	4975      	ldr	r1, [pc, #468]	@ (80074d8 <HAL_RCC_ClockConfig+0x244>)
 8007302:	4313      	orrs	r3, r2
 8007304:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0308 	and.w	r3, r3, #8
 800730e:	2b00      	cmp	r3, #0
 8007310:	d010      	beq.n	8007334 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	695a      	ldr	r2, [r3, #20]
 8007316:	4b70      	ldr	r3, [pc, #448]	@ (80074d8 <HAL_RCC_ClockConfig+0x244>)
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800731e:	429a      	cmp	r2, r3
 8007320:	d908      	bls.n	8007334 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007322:	4b6d      	ldr	r3, [pc, #436]	@ (80074d8 <HAL_RCC_ClockConfig+0x244>)
 8007324:	69db      	ldr	r3, [r3, #28]
 8007326:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	496a      	ldr	r1, [pc, #424]	@ (80074d8 <HAL_RCC_ClockConfig+0x244>)
 8007330:	4313      	orrs	r3, r2
 8007332:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0310 	and.w	r3, r3, #16
 800733c:	2b00      	cmp	r3, #0
 800733e:	d010      	beq.n	8007362 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	699a      	ldr	r2, [r3, #24]
 8007344:	4b64      	ldr	r3, [pc, #400]	@ (80074d8 <HAL_RCC_ClockConfig+0x244>)
 8007346:	69db      	ldr	r3, [r3, #28]
 8007348:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800734c:	429a      	cmp	r2, r3
 800734e:	d908      	bls.n	8007362 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007350:	4b61      	ldr	r3, [pc, #388]	@ (80074d8 <HAL_RCC_ClockConfig+0x244>)
 8007352:	69db      	ldr	r3, [r3, #28]
 8007354:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	495e      	ldr	r1, [pc, #376]	@ (80074d8 <HAL_RCC_ClockConfig+0x244>)
 800735e:	4313      	orrs	r3, r2
 8007360:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 0320 	and.w	r3, r3, #32
 800736a:	2b00      	cmp	r3, #0
 800736c:	d010      	beq.n	8007390 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	69da      	ldr	r2, [r3, #28]
 8007372:	4b59      	ldr	r3, [pc, #356]	@ (80074d8 <HAL_RCC_ClockConfig+0x244>)
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800737a:	429a      	cmp	r2, r3
 800737c:	d908      	bls.n	8007390 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800737e:	4b56      	ldr	r3, [pc, #344]	@ (80074d8 <HAL_RCC_ClockConfig+0x244>)
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	4953      	ldr	r1, [pc, #332]	@ (80074d8 <HAL_RCC_ClockConfig+0x244>)
 800738c:	4313      	orrs	r3, r2
 800738e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	2b00      	cmp	r3, #0
 800739a:	d010      	beq.n	80073be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	68da      	ldr	r2, [r3, #12]
 80073a0:	4b4d      	ldr	r3, [pc, #308]	@ (80074d8 <HAL_RCC_ClockConfig+0x244>)
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	f003 030f 	and.w	r3, r3, #15
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d908      	bls.n	80073be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073ac:	4b4a      	ldr	r3, [pc, #296]	@ (80074d8 <HAL_RCC_ClockConfig+0x244>)
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	f023 020f 	bic.w	r2, r3, #15
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	4947      	ldr	r1, [pc, #284]	@ (80074d8 <HAL_RCC_ClockConfig+0x244>)
 80073ba:	4313      	orrs	r3, r2
 80073bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0301 	and.w	r3, r3, #1
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d055      	beq.n	8007476 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80073ca:	4b43      	ldr	r3, [pc, #268]	@ (80074d8 <HAL_RCC_ClockConfig+0x244>)
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	4940      	ldr	r1, [pc, #256]	@ (80074d8 <HAL_RCC_ClockConfig+0x244>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d107      	bne.n	80073f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80073e4:	4b3c      	ldr	r3, [pc, #240]	@ (80074d8 <HAL_RCC_ClockConfig+0x244>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d121      	bne.n	8007434 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e0f6      	b.n	80075e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	2b03      	cmp	r3, #3
 80073fa:	d107      	bne.n	800740c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073fc:	4b36      	ldr	r3, [pc, #216]	@ (80074d8 <HAL_RCC_ClockConfig+0x244>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d115      	bne.n	8007434 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e0ea      	b.n	80075e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	2b01      	cmp	r3, #1
 8007412:	d107      	bne.n	8007424 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007414:	4b30      	ldr	r3, [pc, #192]	@ (80074d8 <HAL_RCC_ClockConfig+0x244>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800741c:	2b00      	cmp	r3, #0
 800741e:	d109      	bne.n	8007434 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e0de      	b.n	80075e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007424:	4b2c      	ldr	r3, [pc, #176]	@ (80074d8 <HAL_RCC_ClockConfig+0x244>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0304 	and.w	r3, r3, #4
 800742c:	2b00      	cmp	r3, #0
 800742e:	d101      	bne.n	8007434 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e0d6      	b.n	80075e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007434:	4b28      	ldr	r3, [pc, #160]	@ (80074d8 <HAL_RCC_ClockConfig+0x244>)
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	f023 0207 	bic.w	r2, r3, #7
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	4925      	ldr	r1, [pc, #148]	@ (80074d8 <HAL_RCC_ClockConfig+0x244>)
 8007442:	4313      	orrs	r3, r2
 8007444:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007446:	f7fa fe5f 	bl	8002108 <HAL_GetTick>
 800744a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800744c:	e00a      	b.n	8007464 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800744e:	f7fa fe5b 	bl	8002108 <HAL_GetTick>
 8007452:	4602      	mov	r2, r0
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800745c:	4293      	cmp	r3, r2
 800745e:	d901      	bls.n	8007464 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e0be      	b.n	80075e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007464:	4b1c      	ldr	r3, [pc, #112]	@ (80074d8 <HAL_RCC_ClockConfig+0x244>)
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	00db      	lsls	r3, r3, #3
 8007472:	429a      	cmp	r2, r3
 8007474:	d1eb      	bne.n	800744e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0302 	and.w	r3, r3, #2
 800747e:	2b00      	cmp	r3, #0
 8007480:	d010      	beq.n	80074a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68da      	ldr	r2, [r3, #12]
 8007486:	4b14      	ldr	r3, [pc, #80]	@ (80074d8 <HAL_RCC_ClockConfig+0x244>)
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	f003 030f 	and.w	r3, r3, #15
 800748e:	429a      	cmp	r2, r3
 8007490:	d208      	bcs.n	80074a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007492:	4b11      	ldr	r3, [pc, #68]	@ (80074d8 <HAL_RCC_ClockConfig+0x244>)
 8007494:	699b      	ldr	r3, [r3, #24]
 8007496:	f023 020f 	bic.w	r2, r3, #15
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	490e      	ldr	r1, [pc, #56]	@ (80074d8 <HAL_RCC_ClockConfig+0x244>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80074a4:	4b0b      	ldr	r3, [pc, #44]	@ (80074d4 <HAL_RCC_ClockConfig+0x240>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 030f 	and.w	r3, r3, #15
 80074ac:	683a      	ldr	r2, [r7, #0]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d214      	bcs.n	80074dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074b2:	4b08      	ldr	r3, [pc, #32]	@ (80074d4 <HAL_RCC_ClockConfig+0x240>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f023 020f 	bic.w	r2, r3, #15
 80074ba:	4906      	ldr	r1, [pc, #24]	@ (80074d4 <HAL_RCC_ClockConfig+0x240>)
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	4313      	orrs	r3, r2
 80074c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074c2:	4b04      	ldr	r3, [pc, #16]	@ (80074d4 <HAL_RCC_ClockConfig+0x240>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 030f 	and.w	r3, r3, #15
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d005      	beq.n	80074dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e086      	b.n	80075e2 <HAL_RCC_ClockConfig+0x34e>
 80074d4:	52002000 	.word	0x52002000
 80074d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0304 	and.w	r3, r3, #4
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d010      	beq.n	800750a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	691a      	ldr	r2, [r3, #16]
 80074ec:	4b3f      	ldr	r3, [pc, #252]	@ (80075ec <HAL_RCC_ClockConfig+0x358>)
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d208      	bcs.n	800750a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80074f8:	4b3c      	ldr	r3, [pc, #240]	@ (80075ec <HAL_RCC_ClockConfig+0x358>)
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	4939      	ldr	r1, [pc, #228]	@ (80075ec <HAL_RCC_ClockConfig+0x358>)
 8007506:	4313      	orrs	r3, r2
 8007508:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 0308 	and.w	r3, r3, #8
 8007512:	2b00      	cmp	r3, #0
 8007514:	d010      	beq.n	8007538 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	695a      	ldr	r2, [r3, #20]
 800751a:	4b34      	ldr	r3, [pc, #208]	@ (80075ec <HAL_RCC_ClockConfig+0x358>)
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007522:	429a      	cmp	r2, r3
 8007524:	d208      	bcs.n	8007538 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007526:	4b31      	ldr	r3, [pc, #196]	@ (80075ec <HAL_RCC_ClockConfig+0x358>)
 8007528:	69db      	ldr	r3, [r3, #28]
 800752a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	492e      	ldr	r1, [pc, #184]	@ (80075ec <HAL_RCC_ClockConfig+0x358>)
 8007534:	4313      	orrs	r3, r2
 8007536:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0310 	and.w	r3, r3, #16
 8007540:	2b00      	cmp	r3, #0
 8007542:	d010      	beq.n	8007566 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	699a      	ldr	r2, [r3, #24]
 8007548:	4b28      	ldr	r3, [pc, #160]	@ (80075ec <HAL_RCC_ClockConfig+0x358>)
 800754a:	69db      	ldr	r3, [r3, #28]
 800754c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007550:	429a      	cmp	r2, r3
 8007552:	d208      	bcs.n	8007566 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007554:	4b25      	ldr	r3, [pc, #148]	@ (80075ec <HAL_RCC_ClockConfig+0x358>)
 8007556:	69db      	ldr	r3, [r3, #28]
 8007558:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	4922      	ldr	r1, [pc, #136]	@ (80075ec <HAL_RCC_ClockConfig+0x358>)
 8007562:	4313      	orrs	r3, r2
 8007564:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0320 	and.w	r3, r3, #32
 800756e:	2b00      	cmp	r3, #0
 8007570:	d010      	beq.n	8007594 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	69da      	ldr	r2, [r3, #28]
 8007576:	4b1d      	ldr	r3, [pc, #116]	@ (80075ec <HAL_RCC_ClockConfig+0x358>)
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800757e:	429a      	cmp	r2, r3
 8007580:	d208      	bcs.n	8007594 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007582:	4b1a      	ldr	r3, [pc, #104]	@ (80075ec <HAL_RCC_ClockConfig+0x358>)
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	69db      	ldr	r3, [r3, #28]
 800758e:	4917      	ldr	r1, [pc, #92]	@ (80075ec <HAL_RCC_ClockConfig+0x358>)
 8007590:	4313      	orrs	r3, r2
 8007592:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007594:	f000 f834 	bl	8007600 <HAL_RCC_GetSysClockFreq>
 8007598:	4602      	mov	r2, r0
 800759a:	4b14      	ldr	r3, [pc, #80]	@ (80075ec <HAL_RCC_ClockConfig+0x358>)
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	0a1b      	lsrs	r3, r3, #8
 80075a0:	f003 030f 	and.w	r3, r3, #15
 80075a4:	4912      	ldr	r1, [pc, #72]	@ (80075f0 <HAL_RCC_ClockConfig+0x35c>)
 80075a6:	5ccb      	ldrb	r3, [r1, r3]
 80075a8:	f003 031f 	and.w	r3, r3, #31
 80075ac:	fa22 f303 	lsr.w	r3, r2, r3
 80075b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80075b2:	4b0e      	ldr	r3, [pc, #56]	@ (80075ec <HAL_RCC_ClockConfig+0x358>)
 80075b4:	699b      	ldr	r3, [r3, #24]
 80075b6:	f003 030f 	and.w	r3, r3, #15
 80075ba:	4a0d      	ldr	r2, [pc, #52]	@ (80075f0 <HAL_RCC_ClockConfig+0x35c>)
 80075bc:	5cd3      	ldrb	r3, [r2, r3]
 80075be:	f003 031f 	and.w	r3, r3, #31
 80075c2:	693a      	ldr	r2, [r7, #16]
 80075c4:	fa22 f303 	lsr.w	r3, r2, r3
 80075c8:	4a0a      	ldr	r2, [pc, #40]	@ (80075f4 <HAL_RCC_ClockConfig+0x360>)
 80075ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80075cc:	4a0a      	ldr	r2, [pc, #40]	@ (80075f8 <HAL_RCC_ClockConfig+0x364>)
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80075d2:	4b0a      	ldr	r3, [pc, #40]	@ (80075fc <HAL_RCC_ClockConfig+0x368>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7f9 fdb4 	bl	8001144 <HAL_InitTick>
 80075dc:	4603      	mov	r3, r0
 80075de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3718      	adds	r7, #24
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	58024400 	.word	0x58024400
 80075f0:	0801405c 	.word	0x0801405c
 80075f4:	24000004 	.word	0x24000004
 80075f8:	24000000 	.word	0x24000000
 80075fc:	24000008 	.word	0x24000008

08007600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007600:	b480      	push	{r7}
 8007602:	b089      	sub	sp, #36	@ 0x24
 8007604:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007606:	4bb3      	ldr	r3, [pc, #716]	@ (80078d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800760e:	2b18      	cmp	r3, #24
 8007610:	f200 8155 	bhi.w	80078be <HAL_RCC_GetSysClockFreq+0x2be>
 8007614:	a201      	add	r2, pc, #4	@ (adr r2, 800761c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761a:	bf00      	nop
 800761c:	08007681 	.word	0x08007681
 8007620:	080078bf 	.word	0x080078bf
 8007624:	080078bf 	.word	0x080078bf
 8007628:	080078bf 	.word	0x080078bf
 800762c:	080078bf 	.word	0x080078bf
 8007630:	080078bf 	.word	0x080078bf
 8007634:	080078bf 	.word	0x080078bf
 8007638:	080078bf 	.word	0x080078bf
 800763c:	080076a7 	.word	0x080076a7
 8007640:	080078bf 	.word	0x080078bf
 8007644:	080078bf 	.word	0x080078bf
 8007648:	080078bf 	.word	0x080078bf
 800764c:	080078bf 	.word	0x080078bf
 8007650:	080078bf 	.word	0x080078bf
 8007654:	080078bf 	.word	0x080078bf
 8007658:	080078bf 	.word	0x080078bf
 800765c:	080076ad 	.word	0x080076ad
 8007660:	080078bf 	.word	0x080078bf
 8007664:	080078bf 	.word	0x080078bf
 8007668:	080078bf 	.word	0x080078bf
 800766c:	080078bf 	.word	0x080078bf
 8007670:	080078bf 	.word	0x080078bf
 8007674:	080078bf 	.word	0x080078bf
 8007678:	080078bf 	.word	0x080078bf
 800767c:	080076b3 	.word	0x080076b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007680:	4b94      	ldr	r3, [pc, #592]	@ (80078d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0320 	and.w	r3, r3, #32
 8007688:	2b00      	cmp	r3, #0
 800768a:	d009      	beq.n	80076a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800768c:	4b91      	ldr	r3, [pc, #580]	@ (80078d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	08db      	lsrs	r3, r3, #3
 8007692:	f003 0303 	and.w	r3, r3, #3
 8007696:	4a90      	ldr	r2, [pc, #576]	@ (80078d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007698:	fa22 f303 	lsr.w	r3, r2, r3
 800769c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800769e:	e111      	b.n	80078c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80076a0:	4b8d      	ldr	r3, [pc, #564]	@ (80078d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80076a2:	61bb      	str	r3, [r7, #24]
      break;
 80076a4:	e10e      	b.n	80078c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80076a6:	4b8d      	ldr	r3, [pc, #564]	@ (80078dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80076a8:	61bb      	str	r3, [r7, #24]
      break;
 80076aa:	e10b      	b.n	80078c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80076ac:	4b8c      	ldr	r3, [pc, #560]	@ (80078e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80076ae:	61bb      	str	r3, [r7, #24]
      break;
 80076b0:	e108      	b.n	80078c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076b2:	4b88      	ldr	r3, [pc, #544]	@ (80078d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b6:	f003 0303 	and.w	r3, r3, #3
 80076ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80076bc:	4b85      	ldr	r3, [pc, #532]	@ (80078d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c0:	091b      	lsrs	r3, r3, #4
 80076c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80076c8:	4b82      	ldr	r3, [pc, #520]	@ (80078d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80076d2:	4b80      	ldr	r3, [pc, #512]	@ (80078d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076d6:	08db      	lsrs	r3, r3, #3
 80076d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	fb02 f303 	mul.w	r3, r2, r3
 80076e2:	ee07 3a90 	vmov	s15, r3
 80076e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f000 80e1 	beq.w	80078b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	f000 8083 	beq.w	8007804 <HAL_RCC_GetSysClockFreq+0x204>
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2b02      	cmp	r3, #2
 8007702:	f200 80a1 	bhi.w	8007848 <HAL_RCC_GetSysClockFreq+0x248>
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d003      	beq.n	8007714 <HAL_RCC_GetSysClockFreq+0x114>
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d056      	beq.n	80077c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007712:	e099      	b.n	8007848 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007714:	4b6f      	ldr	r3, [pc, #444]	@ (80078d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0320 	and.w	r3, r3, #32
 800771c:	2b00      	cmp	r3, #0
 800771e:	d02d      	beq.n	800777c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007720:	4b6c      	ldr	r3, [pc, #432]	@ (80078d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	08db      	lsrs	r3, r3, #3
 8007726:	f003 0303 	and.w	r3, r3, #3
 800772a:	4a6b      	ldr	r2, [pc, #428]	@ (80078d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800772c:	fa22 f303 	lsr.w	r3, r2, r3
 8007730:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	ee07 3a90 	vmov	s15, r3
 8007738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	ee07 3a90 	vmov	s15, r3
 8007742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800774a:	4b62      	ldr	r3, [pc, #392]	@ (80078d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800774c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800774e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007752:	ee07 3a90 	vmov	s15, r3
 8007756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800775a:	ed97 6a02 	vldr	s12, [r7, #8]
 800775e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80078e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800776a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800776e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007776:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800777a:	e087      	b.n	800788c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	ee07 3a90 	vmov	s15, r3
 8007782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007786:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80078e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800778a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800778e:	4b51      	ldr	r3, [pc, #324]	@ (80078d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007796:	ee07 3a90 	vmov	s15, r3
 800779a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800779e:	ed97 6a02 	vldr	s12, [r7, #8]
 80077a2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80078e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80077be:	e065      	b.n	800788c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	ee07 3a90 	vmov	s15, r3
 80077c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ca:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80078ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80077ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077d2:	4b40      	ldr	r3, [pc, #256]	@ (80078d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077da:	ee07 3a90 	vmov	s15, r3
 80077de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80077e6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80078e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007802:	e043      	b.n	800788c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	ee07 3a90 	vmov	s15, r3
 800780a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800780e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80078f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007816:	4b2f      	ldr	r3, [pc, #188]	@ (80078d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800781a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800781e:	ee07 3a90 	vmov	s15, r3
 8007822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007826:	ed97 6a02 	vldr	s12, [r7, #8]
 800782a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80078e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800782e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007836:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800783a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800783e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007842:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007846:	e021      	b.n	800788c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	ee07 3a90 	vmov	s15, r3
 800784e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007852:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80078ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8007856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800785a:	4b1e      	ldr	r3, [pc, #120]	@ (80078d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800785c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800785e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007862:	ee07 3a90 	vmov	s15, r3
 8007866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800786a:	ed97 6a02 	vldr	s12, [r7, #8]
 800786e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80078e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800787a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800787e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007886:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800788a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800788c:	4b11      	ldr	r3, [pc, #68]	@ (80078d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800788e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007890:	0a5b      	lsrs	r3, r3, #9
 8007892:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007896:	3301      	adds	r3, #1
 8007898:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	ee07 3a90 	vmov	s15, r3
 80078a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80078a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80078a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078b0:	ee17 3a90 	vmov	r3, s15
 80078b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80078b6:	e005      	b.n	80078c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80078b8:	2300      	movs	r3, #0
 80078ba:	61bb      	str	r3, [r7, #24]
      break;
 80078bc:	e002      	b.n	80078c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80078be:	4b07      	ldr	r3, [pc, #28]	@ (80078dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80078c0:	61bb      	str	r3, [r7, #24]
      break;
 80078c2:	bf00      	nop
  }

  return sysclockfreq;
 80078c4:	69bb      	ldr	r3, [r7, #24]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3724      	adds	r7, #36	@ 0x24
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	58024400 	.word	0x58024400
 80078d8:	03d09000 	.word	0x03d09000
 80078dc:	003d0900 	.word	0x003d0900
 80078e0:	007a1200 	.word	0x007a1200
 80078e4:	46000000 	.word	0x46000000
 80078e8:	4c742400 	.word	0x4c742400
 80078ec:	4a742400 	.word	0x4a742400
 80078f0:	4af42400 	.word	0x4af42400

080078f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80078fa:	f7ff fe81 	bl	8007600 <HAL_RCC_GetSysClockFreq>
 80078fe:	4602      	mov	r2, r0
 8007900:	4b10      	ldr	r3, [pc, #64]	@ (8007944 <HAL_RCC_GetHCLKFreq+0x50>)
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	0a1b      	lsrs	r3, r3, #8
 8007906:	f003 030f 	and.w	r3, r3, #15
 800790a:	490f      	ldr	r1, [pc, #60]	@ (8007948 <HAL_RCC_GetHCLKFreq+0x54>)
 800790c:	5ccb      	ldrb	r3, [r1, r3]
 800790e:	f003 031f 	and.w	r3, r3, #31
 8007912:	fa22 f303 	lsr.w	r3, r2, r3
 8007916:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007918:	4b0a      	ldr	r3, [pc, #40]	@ (8007944 <HAL_RCC_GetHCLKFreq+0x50>)
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	f003 030f 	and.w	r3, r3, #15
 8007920:	4a09      	ldr	r2, [pc, #36]	@ (8007948 <HAL_RCC_GetHCLKFreq+0x54>)
 8007922:	5cd3      	ldrb	r3, [r2, r3]
 8007924:	f003 031f 	and.w	r3, r3, #31
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	fa22 f303 	lsr.w	r3, r2, r3
 800792e:	4a07      	ldr	r2, [pc, #28]	@ (800794c <HAL_RCC_GetHCLKFreq+0x58>)
 8007930:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007932:	4a07      	ldr	r2, [pc, #28]	@ (8007950 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007938:	4b04      	ldr	r3, [pc, #16]	@ (800794c <HAL_RCC_GetHCLKFreq+0x58>)
 800793a:	681b      	ldr	r3, [r3, #0]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	58024400 	.word	0x58024400
 8007948:	0801405c 	.word	0x0801405c
 800794c:	24000004 	.word	0x24000004
 8007950:	24000000 	.word	0x24000000

08007954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007958:	f7ff ffcc 	bl	80078f4 <HAL_RCC_GetHCLKFreq>
 800795c:	4602      	mov	r2, r0
 800795e:	4b06      	ldr	r3, [pc, #24]	@ (8007978 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007960:	69db      	ldr	r3, [r3, #28]
 8007962:	091b      	lsrs	r3, r3, #4
 8007964:	f003 0307 	and.w	r3, r3, #7
 8007968:	4904      	ldr	r1, [pc, #16]	@ (800797c <HAL_RCC_GetPCLK1Freq+0x28>)
 800796a:	5ccb      	ldrb	r3, [r1, r3]
 800796c:	f003 031f 	and.w	r3, r3, #31
 8007970:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007974:	4618      	mov	r0, r3
 8007976:	bd80      	pop	{r7, pc}
 8007978:	58024400 	.word	0x58024400
 800797c:	0801405c 	.word	0x0801405c

08007980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007984:	f7ff ffb6 	bl	80078f4 <HAL_RCC_GetHCLKFreq>
 8007988:	4602      	mov	r2, r0
 800798a:	4b06      	ldr	r3, [pc, #24]	@ (80079a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800798c:	69db      	ldr	r3, [r3, #28]
 800798e:	0a1b      	lsrs	r3, r3, #8
 8007990:	f003 0307 	and.w	r3, r3, #7
 8007994:	4904      	ldr	r1, [pc, #16]	@ (80079a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007996:	5ccb      	ldrb	r3, [r1, r3]
 8007998:	f003 031f 	and.w	r3, r3, #31
 800799c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	58024400 	.word	0x58024400
 80079a8:	0801405c 	.word	0x0801405c

080079ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	223f      	movs	r2, #63	@ 0x3f
 80079ba:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80079bc:	4b1a      	ldr	r3, [pc, #104]	@ (8007a28 <HAL_RCC_GetClockConfig+0x7c>)
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	f003 0207 	and.w	r2, r3, #7
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80079c8:	4b17      	ldr	r3, [pc, #92]	@ (8007a28 <HAL_RCC_GetClockConfig+0x7c>)
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80079d4:	4b14      	ldr	r3, [pc, #80]	@ (8007a28 <HAL_RCC_GetClockConfig+0x7c>)
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	f003 020f 	and.w	r2, r3, #15
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80079e0:	4b11      	ldr	r3, [pc, #68]	@ (8007a28 <HAL_RCC_GetClockConfig+0x7c>)
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80079ec:	4b0e      	ldr	r3, [pc, #56]	@ (8007a28 <HAL_RCC_GetClockConfig+0x7c>)
 80079ee:	69db      	ldr	r3, [r3, #28]
 80079f0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80079f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007a28 <HAL_RCC_GetClockConfig+0x7c>)
 80079fa:	69db      	ldr	r3, [r3, #28]
 80079fc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007a04:	4b08      	ldr	r3, [pc, #32]	@ (8007a28 <HAL_RCC_GetClockConfig+0x7c>)
 8007a06:	6a1b      	ldr	r3, [r3, #32]
 8007a08:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007a10:	4b06      	ldr	r3, [pc, #24]	@ (8007a2c <HAL_RCC_GetClockConfig+0x80>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 020f 	and.w	r2, r3, #15
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	601a      	str	r2, [r3, #0]
}
 8007a1c:	bf00      	nop
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	58024400 	.word	0x58024400
 8007a2c:	52002000 	.word	0x52002000

08007a30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a34:	b0ca      	sub	sp, #296	@ 0x128
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a42:	2300      	movs	r3, #0
 8007a44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a50:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007a54:	2500      	movs	r5, #0
 8007a56:	ea54 0305 	orrs.w	r3, r4, r5
 8007a5a:	d049      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a62:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a66:	d02f      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007a68:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a6c:	d828      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007a6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a72:	d01a      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007a74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a78:	d822      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d003      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007a7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a82:	d007      	beq.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007a84:	e01c      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a86:	4bb8      	ldr	r3, [pc, #736]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a8a:	4ab7      	ldr	r2, [pc, #732]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007a92:	e01a      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a98:	3308      	adds	r3, #8
 8007a9a:	2102      	movs	r1, #2
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f002 fb61 	bl	800a164 <RCCEx_PLL2_Config>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007aa8:	e00f      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aae:	3328      	adds	r3, #40	@ 0x28
 8007ab0:	2102      	movs	r1, #2
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f002 fc08 	bl	800a2c8 <RCCEx_PLL3_Config>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007abe:	e004      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ac6:	e000      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10a      	bne.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007ad2:	4ba5      	ldr	r3, [pc, #660]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ad6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ade:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ae0:	4aa1      	ldr	r2, [pc, #644]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ae2:	430b      	orrs	r3, r1
 8007ae4:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ae6:	e003      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007afc:	f04f 0900 	mov.w	r9, #0
 8007b00:	ea58 0309 	orrs.w	r3, r8, r9
 8007b04:	d047      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b0c:	2b04      	cmp	r3, #4
 8007b0e:	d82a      	bhi.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007b10:	a201      	add	r2, pc, #4	@ (adr r2, 8007b18 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b16:	bf00      	nop
 8007b18:	08007b2d 	.word	0x08007b2d
 8007b1c:	08007b3b 	.word	0x08007b3b
 8007b20:	08007b51 	.word	0x08007b51
 8007b24:	08007b6f 	.word	0x08007b6f
 8007b28:	08007b6f 	.word	0x08007b6f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b2c:	4b8e      	ldr	r3, [pc, #568]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b30:	4a8d      	ldr	r2, [pc, #564]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b38:	e01a      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b3e:	3308      	adds	r3, #8
 8007b40:	2100      	movs	r1, #0
 8007b42:	4618      	mov	r0, r3
 8007b44:	f002 fb0e 	bl	800a164 <RCCEx_PLL2_Config>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b4e:	e00f      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b54:	3328      	adds	r3, #40	@ 0x28
 8007b56:	2100      	movs	r1, #0
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f002 fbb5 	bl	800a2c8 <RCCEx_PLL3_Config>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b64:	e004      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b6c:	e000      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007b6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10a      	bne.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b78:	4b7b      	ldr	r3, [pc, #492]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b7c:	f023 0107 	bic.w	r1, r3, #7
 8007b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b86:	4a78      	ldr	r2, [pc, #480]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b88:	430b      	orrs	r3, r1
 8007b8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007b8c:	e003      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007ba2:	f04f 0b00 	mov.w	fp, #0
 8007ba6:	ea5a 030b 	orrs.w	r3, sl, fp
 8007baa:	d04c      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bb6:	d030      	beq.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007bb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bbc:	d829      	bhi.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007bbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8007bc0:	d02d      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007bc2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007bc4:	d825      	bhi.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007bc6:	2b80      	cmp	r3, #128	@ 0x80
 8007bc8:	d018      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007bca:	2b80      	cmp	r3, #128	@ 0x80
 8007bcc:	d821      	bhi.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d002      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007bd2:	2b40      	cmp	r3, #64	@ 0x40
 8007bd4:	d007      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007bd6:	e01c      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bd8:	4b63      	ldr	r3, [pc, #396]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bdc:	4a62      	ldr	r2, [pc, #392]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007be2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007be4:	e01c      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bea:	3308      	adds	r3, #8
 8007bec:	2100      	movs	r1, #0
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f002 fab8 	bl	800a164 <RCCEx_PLL2_Config>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007bfa:	e011      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c00:	3328      	adds	r3, #40	@ 0x28
 8007c02:	2100      	movs	r1, #0
 8007c04:	4618      	mov	r0, r3
 8007c06:	f002 fb5f 	bl	800a2c8 <RCCEx_PLL3_Config>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007c10:	e006      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c18:	e002      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007c1a:	bf00      	nop
 8007c1c:	e000      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007c1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10a      	bne.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007c28:	4b4f      	ldr	r3, [pc, #316]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c2c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c36:	4a4c      	ldr	r2, [pc, #304]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c38:	430b      	orrs	r3, r1
 8007c3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c3c:	e003      	b.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007c52:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007c56:	2300      	movs	r3, #0
 8007c58:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007c5c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007c60:	460b      	mov	r3, r1
 8007c62:	4313      	orrs	r3, r2
 8007c64:	d053      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007c6e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007c72:	d035      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007c74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007c78:	d82e      	bhi.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007c7a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007c7e:	d031      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007c80:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007c84:	d828      	bhi.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007c86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c8a:	d01a      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007c8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c90:	d822      	bhi.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d003      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007c96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c9a:	d007      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007c9c:	e01c      	b.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c9e:	4b32      	ldr	r3, [pc, #200]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca2:	4a31      	ldr	r2, [pc, #196]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ca8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007caa:	e01c      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb0:	3308      	adds	r3, #8
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f002 fa55 	bl	800a164 <RCCEx_PLL2_Config>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007cc0:	e011      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc6:	3328      	adds	r3, #40	@ 0x28
 8007cc8:	2100      	movs	r1, #0
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f002 fafc 	bl	800a2c8 <RCCEx_PLL3_Config>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007cd6:	e006      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007cde:	e002      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007ce0:	bf00      	nop
 8007ce2:	e000      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d10b      	bne.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007cee:	4b1e      	ldr	r3, [pc, #120]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cf2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007cfe:	4a1a      	ldr	r2, [pc, #104]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d00:	430b      	orrs	r3, r1
 8007d02:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d04:	e003      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d16:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007d1a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007d1e:	2300      	movs	r3, #0
 8007d20:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007d24:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007d28:	460b      	mov	r3, r1
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	d056      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007d36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007d3a:	d038      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007d3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007d40:	d831      	bhi.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007d42:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007d46:	d034      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007d48:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007d4c:	d82b      	bhi.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007d4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d52:	d01d      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007d54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d58:	d825      	bhi.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d006      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007d5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d62:	d00a      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007d64:	e01f      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007d66:	bf00      	nop
 8007d68:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d6c:	4ba2      	ldr	r3, [pc, #648]	@ (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d70:	4aa1      	ldr	r2, [pc, #644]	@ (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d78:	e01c      	b.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d7e:	3308      	adds	r3, #8
 8007d80:	2100      	movs	r1, #0
 8007d82:	4618      	mov	r0, r3
 8007d84:	f002 f9ee 	bl	800a164 <RCCEx_PLL2_Config>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007d8e:	e011      	b.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d94:	3328      	adds	r3, #40	@ 0x28
 8007d96:	2100      	movs	r1, #0
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f002 fa95 	bl	800a2c8 <RCCEx_PLL3_Config>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007da4:	e006      	b.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007dac:	e002      	b.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007dae:	bf00      	nop
 8007db0:	e000      	b.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007db4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10b      	bne.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007dbc:	4b8e      	ldr	r3, [pc, #568]	@ (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dc0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dc8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007dcc:	4a8a      	ldr	r2, [pc, #552]	@ (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007dce:	430b      	orrs	r3, r1
 8007dd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8007dd2:	e003      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007de8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007dec:	2300      	movs	r3, #0
 8007dee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007df2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007df6:	460b      	mov	r3, r1
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	d03a      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e02:	2b30      	cmp	r3, #48	@ 0x30
 8007e04:	d01f      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007e06:	2b30      	cmp	r3, #48	@ 0x30
 8007e08:	d819      	bhi.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007e0a:	2b20      	cmp	r3, #32
 8007e0c:	d00c      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007e0e:	2b20      	cmp	r3, #32
 8007e10:	d815      	bhi.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d019      	beq.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007e16:	2b10      	cmp	r3, #16
 8007e18:	d111      	bne.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e1a:	4b77      	ldr	r3, [pc, #476]	@ (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e1e:	4a76      	ldr	r2, [pc, #472]	@ (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007e26:	e011      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e2c:	3308      	adds	r3, #8
 8007e2e:	2102      	movs	r1, #2
 8007e30:	4618      	mov	r0, r3
 8007e32:	f002 f997 	bl	800a164 <RCCEx_PLL2_Config>
 8007e36:	4603      	mov	r3, r0
 8007e38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007e3c:	e006      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e44:	e002      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007e46:	bf00      	nop
 8007e48:	e000      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007e4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d10a      	bne.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007e54:	4b68      	ldr	r3, [pc, #416]	@ (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e58:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e62:	4a65      	ldr	r2, [pc, #404]	@ (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e64:	430b      	orrs	r3, r1
 8007e66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007e68:	e003      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007e7e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007e82:	2300      	movs	r3, #0
 8007e84:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007e88:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	d051      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e9c:	d035      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007e9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ea2:	d82e      	bhi.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007ea4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ea8:	d031      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007eaa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007eae:	d828      	bhi.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007eb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eb4:	d01a      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007eb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eba:	d822      	bhi.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d003      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007ec0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ec4:	d007      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007ec6:	e01c      	b.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ec8:	4b4b      	ldr	r3, [pc, #300]	@ (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ecc:	4a4a      	ldr	r2, [pc, #296]	@ (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ece:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ed2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ed4:	e01c      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eda:	3308      	adds	r3, #8
 8007edc:	2100      	movs	r1, #0
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f002 f940 	bl	800a164 <RCCEx_PLL2_Config>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007eea:	e011      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef0:	3328      	adds	r3, #40	@ 0x28
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f002 f9e7 	bl	800a2c8 <RCCEx_PLL3_Config>
 8007efa:	4603      	mov	r3, r0
 8007efc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007f00:	e006      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f08:	e002      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007f0a:	bf00      	nop
 8007f0c:	e000      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007f0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10a      	bne.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007f18:	4b37      	ldr	r3, [pc, #220]	@ (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f1c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f26:	4a34      	ldr	r2, [pc, #208]	@ (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f28:	430b      	orrs	r3, r1
 8007f2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f2c:	e003      	b.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007f42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f46:	2300      	movs	r3, #0
 8007f48:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007f4c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007f50:	460b      	mov	r3, r1
 8007f52:	4313      	orrs	r3, r2
 8007f54:	d056      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007f60:	d033      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007f62:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007f66:	d82c      	bhi.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007f68:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f6c:	d02f      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007f6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f72:	d826      	bhi.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007f74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007f78:	d02b      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007f7a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007f7e:	d820      	bhi.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007f80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f84:	d012      	beq.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007f86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f8a:	d81a      	bhi.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d022      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f94:	d115      	bne.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f9a:	3308      	adds	r3, #8
 8007f9c:	2101      	movs	r1, #1
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f002 f8e0 	bl	800a164 <RCCEx_PLL2_Config>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007faa:	e015      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fb0:	3328      	adds	r3, #40	@ 0x28
 8007fb2:	2101      	movs	r1, #1
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f002 f987 	bl	800a2c8 <RCCEx_PLL3_Config>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007fc0:	e00a      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fc8:	e006      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007fca:	bf00      	nop
 8007fcc:	e004      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007fce:	bf00      	nop
 8007fd0:	e002      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007fd2:	bf00      	nop
 8007fd4:	e000      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007fd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10d      	bne.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007fe0:	4b05      	ldr	r3, [pc, #20]	@ (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fe4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fee:	4a02      	ldr	r2, [pc, #8]	@ (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ff0:	430b      	orrs	r3, r1
 8007ff2:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ff4:	e006      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007ff6:	bf00      	nop
 8007ff8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ffc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008000:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008010:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008014:	2300      	movs	r3, #0
 8008016:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800801a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800801e:	460b      	mov	r3, r1
 8008020:	4313      	orrs	r3, r2
 8008022:	d055      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008028:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800802c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008030:	d033      	beq.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008032:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008036:	d82c      	bhi.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800803c:	d02f      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800803e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008042:	d826      	bhi.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008044:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008048:	d02b      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800804a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800804e:	d820      	bhi.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008050:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008054:	d012      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008056:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800805a:	d81a      	bhi.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800805c:	2b00      	cmp	r3, #0
 800805e:	d022      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008060:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008064:	d115      	bne.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800806a:	3308      	adds	r3, #8
 800806c:	2101      	movs	r1, #1
 800806e:	4618      	mov	r0, r3
 8008070:	f002 f878 	bl	800a164 <RCCEx_PLL2_Config>
 8008074:	4603      	mov	r3, r0
 8008076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800807a:	e015      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800807c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008080:	3328      	adds	r3, #40	@ 0x28
 8008082:	2101      	movs	r1, #1
 8008084:	4618      	mov	r0, r3
 8008086:	f002 f91f 	bl	800a2c8 <RCCEx_PLL3_Config>
 800808a:	4603      	mov	r3, r0
 800808c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008090:	e00a      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008098:	e006      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800809a:	bf00      	nop
 800809c:	e004      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800809e:	bf00      	nop
 80080a0:	e002      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80080a2:	bf00      	nop
 80080a4:	e000      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80080a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10b      	bne.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80080b0:	4ba3      	ldr	r3, [pc, #652]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080b4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80080b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80080c0:	4a9f      	ldr	r2, [pc, #636]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080c2:	430b      	orrs	r3, r1
 80080c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80080c6:	e003      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80080d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80080dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80080e0:	2300      	movs	r3, #0
 80080e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80080e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80080ea:	460b      	mov	r3, r1
 80080ec:	4313      	orrs	r3, r2
 80080ee:	d037      	beq.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80080f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080fa:	d00e      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80080fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008100:	d816      	bhi.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008102:	2b00      	cmp	r3, #0
 8008104:	d018      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008106:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800810a:	d111      	bne.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800810c:	4b8c      	ldr	r3, [pc, #560]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800810e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008110:	4a8b      	ldr	r2, [pc, #556]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008112:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008116:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008118:	e00f      	b.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800811a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800811e:	3308      	adds	r3, #8
 8008120:	2101      	movs	r1, #1
 8008122:	4618      	mov	r0, r3
 8008124:	f002 f81e 	bl	800a164 <RCCEx_PLL2_Config>
 8008128:	4603      	mov	r3, r0
 800812a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800812e:	e004      	b.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008136:	e000      	b.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008138:	bf00      	nop
    }

    if (ret == HAL_OK)
 800813a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800813e:	2b00      	cmp	r3, #0
 8008140:	d10a      	bne.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008142:	4b7f      	ldr	r3, [pc, #508]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008146:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800814a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800814e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008150:	4a7b      	ldr	r2, [pc, #492]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008152:	430b      	orrs	r3, r1
 8008154:	6513      	str	r3, [r2, #80]	@ 0x50
 8008156:	e003      	b.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008158:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800815c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008168:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800816c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008170:	2300      	movs	r3, #0
 8008172:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008176:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800817a:	460b      	mov	r3, r1
 800817c:	4313      	orrs	r3, r2
 800817e:	d039      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008186:	2b03      	cmp	r3, #3
 8008188:	d81c      	bhi.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800818a:	a201      	add	r2, pc, #4	@ (adr r2, 8008190 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800818c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008190:	080081cd 	.word	0x080081cd
 8008194:	080081a1 	.word	0x080081a1
 8008198:	080081af 	.word	0x080081af
 800819c:	080081cd 	.word	0x080081cd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081a0:	4b67      	ldr	r3, [pc, #412]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a4:	4a66      	ldr	r2, [pc, #408]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80081ac:	e00f      	b.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80081ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081b2:	3308      	adds	r3, #8
 80081b4:	2102      	movs	r1, #2
 80081b6:	4618      	mov	r0, r3
 80081b8:	f001 ffd4 	bl	800a164 <RCCEx_PLL2_Config>
 80081bc:	4603      	mov	r3, r0
 80081be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80081c2:	e004      	b.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081ca:	e000      	b.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80081cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d10a      	bne.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80081d6:	4b5a      	ldr	r3, [pc, #360]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081da:	f023 0103 	bic.w	r1, r3, #3
 80081de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081e4:	4a56      	ldr	r2, [pc, #344]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081e6:	430b      	orrs	r3, r1
 80081e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80081ea:	e003      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80081f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008200:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008204:	2300      	movs	r3, #0
 8008206:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800820a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800820e:	460b      	mov	r3, r1
 8008210:	4313      	orrs	r3, r2
 8008212:	f000 809f 	beq.w	8008354 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008216:	4b4b      	ldr	r3, [pc, #300]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a4a      	ldr	r2, [pc, #296]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800821c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008220:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008222:	f7f9 ff71 	bl	8002108 <HAL_GetTick>
 8008226:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800822a:	e00b      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800822c:	f7f9 ff6c 	bl	8002108 <HAL_GetTick>
 8008230:	4602      	mov	r2, r0
 8008232:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	2b64      	cmp	r3, #100	@ 0x64
 800823a:	d903      	bls.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008242:	e005      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008244:	4b3f      	ldr	r3, [pc, #252]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800824c:	2b00      	cmp	r3, #0
 800824e:	d0ed      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008250:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008254:	2b00      	cmp	r3, #0
 8008256:	d179      	bne.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008258:	4b39      	ldr	r3, [pc, #228]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800825a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800825c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008260:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008264:	4053      	eors	r3, r2
 8008266:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800826a:	2b00      	cmp	r3, #0
 800826c:	d015      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800826e:	4b34      	ldr	r3, [pc, #208]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008272:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008276:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800827a:	4b31      	ldr	r3, [pc, #196]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800827c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800827e:	4a30      	ldr	r2, [pc, #192]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008284:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008286:	4b2e      	ldr	r3, [pc, #184]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800828a:	4a2d      	ldr	r2, [pc, #180]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800828c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008290:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008292:	4a2b      	ldr	r2, [pc, #172]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008294:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008298:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800829a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800829e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80082a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082a6:	d118      	bne.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082a8:	f7f9 ff2e 	bl	8002108 <HAL_GetTick>
 80082ac:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082b0:	e00d      	b.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082b2:	f7f9 ff29 	bl	8002108 <HAL_GetTick>
 80082b6:	4602      	mov	r2, r0
 80082b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80082bc:	1ad2      	subs	r2, r2, r3
 80082be:	f241 3388 	movw	r3, #5000	@ 0x1388
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d903      	bls.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80082c6:	2303      	movs	r3, #3
 80082c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80082cc:	e005      	b.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082ce:	4b1c      	ldr	r3, [pc, #112]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082d2:	f003 0302 	and.w	r3, r3, #2
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d0eb      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80082da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d129      	bne.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80082ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082f2:	d10e      	bne.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80082f4:	4b12      	ldr	r3, [pc, #72]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80082fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008300:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008304:	091a      	lsrs	r2, r3, #4
 8008306:	4b10      	ldr	r3, [pc, #64]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008308:	4013      	ands	r3, r2
 800830a:	4a0d      	ldr	r2, [pc, #52]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800830c:	430b      	orrs	r3, r1
 800830e:	6113      	str	r3, [r2, #16]
 8008310:	e005      	b.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008312:	4b0b      	ldr	r3, [pc, #44]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	4a0a      	ldr	r2, [pc, #40]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008318:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800831c:	6113      	str	r3, [r2, #16]
 800831e:	4b08      	ldr	r3, [pc, #32]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008320:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008326:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800832a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800832e:	4a04      	ldr	r2, [pc, #16]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008330:	430b      	orrs	r3, r1
 8008332:	6713      	str	r3, [r2, #112]	@ 0x70
 8008334:	e00e      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008336:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800833a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800833e:	e009      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008340:	58024400 	.word	0x58024400
 8008344:	58024800 	.word	0x58024800
 8008348:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800834c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008350:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835c:	f002 0301 	and.w	r3, r2, #1
 8008360:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008364:	2300      	movs	r3, #0
 8008366:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800836a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800836e:	460b      	mov	r3, r1
 8008370:	4313      	orrs	r3, r2
 8008372:	f000 8089 	beq.w	8008488 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800837a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800837c:	2b28      	cmp	r3, #40	@ 0x28
 800837e:	d86b      	bhi.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008380:	a201      	add	r2, pc, #4	@ (adr r2, 8008388 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008386:	bf00      	nop
 8008388:	08008461 	.word	0x08008461
 800838c:	08008459 	.word	0x08008459
 8008390:	08008459 	.word	0x08008459
 8008394:	08008459 	.word	0x08008459
 8008398:	08008459 	.word	0x08008459
 800839c:	08008459 	.word	0x08008459
 80083a0:	08008459 	.word	0x08008459
 80083a4:	08008459 	.word	0x08008459
 80083a8:	0800842d 	.word	0x0800842d
 80083ac:	08008459 	.word	0x08008459
 80083b0:	08008459 	.word	0x08008459
 80083b4:	08008459 	.word	0x08008459
 80083b8:	08008459 	.word	0x08008459
 80083bc:	08008459 	.word	0x08008459
 80083c0:	08008459 	.word	0x08008459
 80083c4:	08008459 	.word	0x08008459
 80083c8:	08008443 	.word	0x08008443
 80083cc:	08008459 	.word	0x08008459
 80083d0:	08008459 	.word	0x08008459
 80083d4:	08008459 	.word	0x08008459
 80083d8:	08008459 	.word	0x08008459
 80083dc:	08008459 	.word	0x08008459
 80083e0:	08008459 	.word	0x08008459
 80083e4:	08008459 	.word	0x08008459
 80083e8:	08008461 	.word	0x08008461
 80083ec:	08008459 	.word	0x08008459
 80083f0:	08008459 	.word	0x08008459
 80083f4:	08008459 	.word	0x08008459
 80083f8:	08008459 	.word	0x08008459
 80083fc:	08008459 	.word	0x08008459
 8008400:	08008459 	.word	0x08008459
 8008404:	08008459 	.word	0x08008459
 8008408:	08008461 	.word	0x08008461
 800840c:	08008459 	.word	0x08008459
 8008410:	08008459 	.word	0x08008459
 8008414:	08008459 	.word	0x08008459
 8008418:	08008459 	.word	0x08008459
 800841c:	08008459 	.word	0x08008459
 8008420:	08008459 	.word	0x08008459
 8008424:	08008459 	.word	0x08008459
 8008428:	08008461 	.word	0x08008461
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800842c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008430:	3308      	adds	r3, #8
 8008432:	2101      	movs	r1, #1
 8008434:	4618      	mov	r0, r3
 8008436:	f001 fe95 	bl	800a164 <RCCEx_PLL2_Config>
 800843a:	4603      	mov	r3, r0
 800843c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008440:	e00f      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008446:	3328      	adds	r3, #40	@ 0x28
 8008448:	2101      	movs	r1, #1
 800844a:	4618      	mov	r0, r3
 800844c:	f001 ff3c 	bl	800a2c8 <RCCEx_PLL3_Config>
 8008450:	4603      	mov	r3, r0
 8008452:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008456:	e004      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800845e:	e000      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008460:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10a      	bne.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800846a:	4bbf      	ldr	r3, [pc, #764]	@ (8008768 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800846c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800846e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008476:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008478:	4abb      	ldr	r2, [pc, #748]	@ (8008768 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800847a:	430b      	orrs	r3, r1
 800847c:	6553      	str	r3, [r2, #84]	@ 0x54
 800847e:	e003      	b.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008480:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008484:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800848c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008490:	f002 0302 	and.w	r3, r2, #2
 8008494:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008498:	2300      	movs	r3, #0
 800849a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800849e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80084a2:	460b      	mov	r3, r1
 80084a4:	4313      	orrs	r3, r2
 80084a6:	d041      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80084a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80084ae:	2b05      	cmp	r3, #5
 80084b0:	d824      	bhi.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80084b2:	a201      	add	r2, pc, #4	@ (adr r2, 80084b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80084b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b8:	08008505 	.word	0x08008505
 80084bc:	080084d1 	.word	0x080084d1
 80084c0:	080084e7 	.word	0x080084e7
 80084c4:	08008505 	.word	0x08008505
 80084c8:	08008505 	.word	0x08008505
 80084cc:	08008505 	.word	0x08008505
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80084d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084d4:	3308      	adds	r3, #8
 80084d6:	2101      	movs	r1, #1
 80084d8:	4618      	mov	r0, r3
 80084da:	f001 fe43 	bl	800a164 <RCCEx_PLL2_Config>
 80084de:	4603      	mov	r3, r0
 80084e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80084e4:	e00f      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ea:	3328      	adds	r3, #40	@ 0x28
 80084ec:	2101      	movs	r1, #1
 80084ee:	4618      	mov	r0, r3
 80084f0:	f001 feea 	bl	800a2c8 <RCCEx_PLL3_Config>
 80084f4:	4603      	mov	r3, r0
 80084f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80084fa:	e004      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008502:	e000      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008506:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10a      	bne.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800850e:	4b96      	ldr	r3, [pc, #600]	@ (8008768 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008512:	f023 0107 	bic.w	r1, r3, #7
 8008516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800851a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800851c:	4a92      	ldr	r2, [pc, #584]	@ (8008768 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800851e:	430b      	orrs	r3, r1
 8008520:	6553      	str	r3, [r2, #84]	@ 0x54
 8008522:	e003      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008524:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008528:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800852c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008534:	f002 0304 	and.w	r3, r2, #4
 8008538:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800853c:	2300      	movs	r3, #0
 800853e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008542:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008546:	460b      	mov	r3, r1
 8008548:	4313      	orrs	r3, r2
 800854a:	d044      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800854c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008550:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008554:	2b05      	cmp	r3, #5
 8008556:	d825      	bhi.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008558:	a201      	add	r2, pc, #4	@ (adr r2, 8008560 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800855a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855e:	bf00      	nop
 8008560:	080085ad 	.word	0x080085ad
 8008564:	08008579 	.word	0x08008579
 8008568:	0800858f 	.word	0x0800858f
 800856c:	080085ad 	.word	0x080085ad
 8008570:	080085ad 	.word	0x080085ad
 8008574:	080085ad 	.word	0x080085ad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800857c:	3308      	adds	r3, #8
 800857e:	2101      	movs	r1, #1
 8008580:	4618      	mov	r0, r3
 8008582:	f001 fdef 	bl	800a164 <RCCEx_PLL2_Config>
 8008586:	4603      	mov	r3, r0
 8008588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800858c:	e00f      	b.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800858e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008592:	3328      	adds	r3, #40	@ 0x28
 8008594:	2101      	movs	r1, #1
 8008596:	4618      	mov	r0, r3
 8008598:	f001 fe96 	bl	800a2c8 <RCCEx_PLL3_Config>
 800859c:	4603      	mov	r3, r0
 800859e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80085a2:	e004      	b.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80085aa:	e000      	b.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80085ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d10b      	bne.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80085b6:	4b6c      	ldr	r3, [pc, #432]	@ (8008768 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085ba:	f023 0107 	bic.w	r1, r3, #7
 80085be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085c6:	4a68      	ldr	r2, [pc, #416]	@ (8008768 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085c8:	430b      	orrs	r3, r1
 80085ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80085cc:	e003      	b.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80085d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085de:	f002 0320 	and.w	r3, r2, #32
 80085e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80085e6:	2300      	movs	r3, #0
 80085e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80085ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80085f0:	460b      	mov	r3, r1
 80085f2:	4313      	orrs	r3, r2
 80085f4:	d055      	beq.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80085f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008602:	d033      	beq.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008604:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008608:	d82c      	bhi.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800860a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800860e:	d02f      	beq.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008614:	d826      	bhi.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008616:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800861a:	d02b      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800861c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008620:	d820      	bhi.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008622:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008626:	d012      	beq.n	800864e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008628:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800862c:	d81a      	bhi.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800862e:	2b00      	cmp	r3, #0
 8008630:	d022      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008632:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008636:	d115      	bne.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800863c:	3308      	adds	r3, #8
 800863e:	2100      	movs	r1, #0
 8008640:	4618      	mov	r0, r3
 8008642:	f001 fd8f 	bl	800a164 <RCCEx_PLL2_Config>
 8008646:	4603      	mov	r3, r0
 8008648:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800864c:	e015      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800864e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008652:	3328      	adds	r3, #40	@ 0x28
 8008654:	2102      	movs	r1, #2
 8008656:	4618      	mov	r0, r3
 8008658:	f001 fe36 	bl	800a2c8 <RCCEx_PLL3_Config>
 800865c:	4603      	mov	r3, r0
 800865e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008662:	e00a      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800866a:	e006      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800866c:	bf00      	nop
 800866e:	e004      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008670:	bf00      	nop
 8008672:	e002      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008674:	bf00      	nop
 8008676:	e000      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008678:	bf00      	nop
    }

    if (ret == HAL_OK)
 800867a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800867e:	2b00      	cmp	r3, #0
 8008680:	d10b      	bne.n	800869a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008682:	4b39      	ldr	r3, [pc, #228]	@ (8008768 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008686:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800868a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800868e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008692:	4a35      	ldr	r2, [pc, #212]	@ (8008768 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008694:	430b      	orrs	r3, r1
 8008696:	6553      	str	r3, [r2, #84]	@ 0x54
 8008698:	e003      	b.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800869a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800869e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80086a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086aa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80086ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80086b2:	2300      	movs	r3, #0
 80086b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80086b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80086bc:	460b      	mov	r3, r1
 80086be:	4313      	orrs	r3, r2
 80086c0:	d058      	beq.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80086c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80086ca:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80086ce:	d033      	beq.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80086d0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80086d4:	d82c      	bhi.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80086d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086da:	d02f      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80086dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086e0:	d826      	bhi.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80086e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80086e6:	d02b      	beq.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80086e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80086ec:	d820      	bhi.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80086ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086f2:	d012      	beq.n	800871a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80086f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086f8:	d81a      	bhi.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d022      	beq.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80086fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008702:	d115      	bne.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008708:	3308      	adds	r3, #8
 800870a:	2100      	movs	r1, #0
 800870c:	4618      	mov	r0, r3
 800870e:	f001 fd29 	bl	800a164 <RCCEx_PLL2_Config>
 8008712:	4603      	mov	r3, r0
 8008714:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008718:	e015      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800871a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800871e:	3328      	adds	r3, #40	@ 0x28
 8008720:	2102      	movs	r1, #2
 8008722:	4618      	mov	r0, r3
 8008724:	f001 fdd0 	bl	800a2c8 <RCCEx_PLL3_Config>
 8008728:	4603      	mov	r3, r0
 800872a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800872e:	e00a      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008736:	e006      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008738:	bf00      	nop
 800873a:	e004      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800873c:	bf00      	nop
 800873e:	e002      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008740:	bf00      	nop
 8008742:	e000      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008746:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10e      	bne.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800874e:	4b06      	ldr	r3, [pc, #24]	@ (8008768 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008752:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800875a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800875e:	4a02      	ldr	r2, [pc, #8]	@ (8008768 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008760:	430b      	orrs	r3, r1
 8008762:	6593      	str	r3, [r2, #88]	@ 0x58
 8008764:	e006      	b.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008766:	bf00      	nop
 8008768:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800876c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008770:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008780:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008784:	2300      	movs	r3, #0
 8008786:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800878a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800878e:	460b      	mov	r3, r1
 8008790:	4313      	orrs	r3, r2
 8008792:	d055      	beq.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008798:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800879c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80087a0:	d033      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80087a2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80087a6:	d82c      	bhi.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80087a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087ac:	d02f      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80087ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087b2:	d826      	bhi.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80087b4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80087b8:	d02b      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80087ba:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80087be:	d820      	bhi.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80087c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087c4:	d012      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80087c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087ca:	d81a      	bhi.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d022      	beq.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80087d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087d4:	d115      	bne.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087da:	3308      	adds	r3, #8
 80087dc:	2100      	movs	r1, #0
 80087de:	4618      	mov	r0, r3
 80087e0:	f001 fcc0 	bl	800a164 <RCCEx_PLL2_Config>
 80087e4:	4603      	mov	r3, r0
 80087e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80087ea:	e015      	b.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80087ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087f0:	3328      	adds	r3, #40	@ 0x28
 80087f2:	2102      	movs	r1, #2
 80087f4:	4618      	mov	r0, r3
 80087f6:	f001 fd67 	bl	800a2c8 <RCCEx_PLL3_Config>
 80087fa:	4603      	mov	r3, r0
 80087fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008800:	e00a      	b.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008808:	e006      	b.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800880a:	bf00      	nop
 800880c:	e004      	b.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800880e:	bf00      	nop
 8008810:	e002      	b.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008812:	bf00      	nop
 8008814:	e000      	b.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008816:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008818:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800881c:	2b00      	cmp	r3, #0
 800881e:	d10b      	bne.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008820:	4ba1      	ldr	r3, [pc, #644]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008824:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800882c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008830:	4a9d      	ldr	r2, [pc, #628]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008832:	430b      	orrs	r3, r1
 8008834:	6593      	str	r3, [r2, #88]	@ 0x58
 8008836:	e003      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008838:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800883c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008848:	f002 0308 	and.w	r3, r2, #8
 800884c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008850:	2300      	movs	r3, #0
 8008852:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008856:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800885a:	460b      	mov	r3, r1
 800885c:	4313      	orrs	r3, r2
 800885e:	d01e      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008864:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008868:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800886c:	d10c      	bne.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800886e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008872:	3328      	adds	r3, #40	@ 0x28
 8008874:	2102      	movs	r1, #2
 8008876:	4618      	mov	r0, r3
 8008878:	f001 fd26 	bl	800a2c8 <RCCEx_PLL3_Config>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d002      	beq.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008888:	4b87      	ldr	r3, [pc, #540]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800888a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800888c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008894:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008898:	4a83      	ldr	r2, [pc, #524]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800889a:	430b      	orrs	r3, r1
 800889c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800889e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	f002 0310 	and.w	r3, r2, #16
 80088aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80088ae:	2300      	movs	r3, #0
 80088b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80088b4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80088b8:	460b      	mov	r3, r1
 80088ba:	4313      	orrs	r3, r2
 80088bc:	d01e      	beq.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80088be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80088c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088ca:	d10c      	bne.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80088cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088d0:	3328      	adds	r3, #40	@ 0x28
 80088d2:	2102      	movs	r1, #2
 80088d4:	4618      	mov	r0, r3
 80088d6:	f001 fcf7 	bl	800a2c8 <RCCEx_PLL3_Config>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d002      	beq.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80088e6:	4b70      	ldr	r3, [pc, #448]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80088ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80088f6:	4a6c      	ldr	r2, [pc, #432]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088f8:	430b      	orrs	r3, r1
 80088fa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80088fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008904:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008908:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800890c:	2300      	movs	r3, #0
 800890e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008912:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008916:	460b      	mov	r3, r1
 8008918:	4313      	orrs	r3, r2
 800891a:	d03e      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800891c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008920:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008924:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008928:	d022      	beq.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800892a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800892e:	d81b      	bhi.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008930:	2b00      	cmp	r3, #0
 8008932:	d003      	beq.n	800893c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008938:	d00b      	beq.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800893a:	e015      	b.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800893c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008940:	3308      	adds	r3, #8
 8008942:	2100      	movs	r1, #0
 8008944:	4618      	mov	r0, r3
 8008946:	f001 fc0d 	bl	800a164 <RCCEx_PLL2_Config>
 800894a:	4603      	mov	r3, r0
 800894c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008950:	e00f      	b.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008956:	3328      	adds	r3, #40	@ 0x28
 8008958:	2102      	movs	r1, #2
 800895a:	4618      	mov	r0, r3
 800895c:	f001 fcb4 	bl	800a2c8 <RCCEx_PLL3_Config>
 8008960:	4603      	mov	r3, r0
 8008962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008966:	e004      	b.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800896e:	e000      	b.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008970:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008972:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008976:	2b00      	cmp	r3, #0
 8008978:	d10b      	bne.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800897a:	4b4b      	ldr	r3, [pc, #300]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800897c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800897e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008986:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800898a:	4a47      	ldr	r2, [pc, #284]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800898c:	430b      	orrs	r3, r1
 800898e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008990:	e003      	b.n	800899a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008996:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800899a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800899e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80089a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80089a8:	2300      	movs	r3, #0
 80089aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80089ac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80089b0:	460b      	mov	r3, r1
 80089b2:	4313      	orrs	r3, r2
 80089b4:	d03b      	beq.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80089b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80089c2:	d01f      	beq.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80089c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80089c8:	d818      	bhi.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80089ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089ce:	d003      	beq.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80089d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80089d4:	d007      	beq.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80089d6:	e011      	b.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089d8:	4b33      	ldr	r3, [pc, #204]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089dc:	4a32      	ldr	r2, [pc, #200]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80089e4:	e00f      	b.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80089e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ea:	3328      	adds	r3, #40	@ 0x28
 80089ec:	2101      	movs	r1, #1
 80089ee:	4618      	mov	r0, r3
 80089f0:	f001 fc6a 	bl	800a2c8 <RCCEx_PLL3_Config>
 80089f4:	4603      	mov	r3, r0
 80089f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80089fa:	e004      	b.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a02:	e000      	b.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d10b      	bne.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a0e:	4b26      	ldr	r3, [pc, #152]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a12:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a1e:	4a22      	ldr	r2, [pc, #136]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a20:	430b      	orrs	r3, r1
 8008a22:	6553      	str	r3, [r2, #84]	@ 0x54
 8008a24:	e003      	b.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a36:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008a3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008a40:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008a44:	460b      	mov	r3, r1
 8008a46:	4313      	orrs	r3, r2
 8008a48:	d034      	beq.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d003      	beq.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008a54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a58:	d007      	beq.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008a5a:	e011      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a5c:	4b12      	ldr	r3, [pc, #72]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a60:	4a11      	ldr	r2, [pc, #68]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008a68:	e00e      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a6e:	3308      	adds	r3, #8
 8008a70:	2102      	movs	r1, #2
 8008a72:	4618      	mov	r0, r3
 8008a74:	f001 fb76 	bl	800a164 <RCCEx_PLL2_Config>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008a7e:	e003      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d10d      	bne.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008a90:	4b05      	ldr	r3, [pc, #20]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a94:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a9e:	4a02      	ldr	r2, [pc, #8]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008aa0:	430b      	orrs	r3, r1
 8008aa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008aa4:	e006      	b.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008aa6:	bf00      	nop
 8008aa8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ab0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008ac0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008ac6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008aca:	460b      	mov	r3, r1
 8008acc:	4313      	orrs	r3, r2
 8008ace:	d00c      	beq.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ad4:	3328      	adds	r3, #40	@ 0x28
 8008ad6:	2102      	movs	r1, #2
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f001 fbf5 	bl	800a2c8 <RCCEx_PLL3_Config>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d002      	beq.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008af6:	663b      	str	r3, [r7, #96]	@ 0x60
 8008af8:	2300      	movs	r3, #0
 8008afa:	667b      	str	r3, [r7, #100]	@ 0x64
 8008afc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008b00:	460b      	mov	r3, r1
 8008b02:	4313      	orrs	r3, r2
 8008b04:	d038      	beq.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b12:	d018      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008b14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b18:	d811      	bhi.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008b1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b1e:	d014      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008b20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b24:	d80b      	bhi.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d011      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008b2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b2e:	d106      	bne.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b30:	4bc3      	ldr	r3, [pc, #780]	@ (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b34:	4ac2      	ldr	r2, [pc, #776]	@ (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008b3c:	e008      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b44:	e004      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008b46:	bf00      	nop
 8008b48:	e002      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008b4a:	bf00      	nop
 8008b4c:	e000      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008b4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10b      	bne.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008b58:	4bb9      	ldr	r3, [pc, #740]	@ (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b5c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b68:	4ab5      	ldr	r2, [pc, #724]	@ (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b6a:	430b      	orrs	r3, r1
 8008b6c:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b6e:	e003      	b.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b80:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008b84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b86:	2300      	movs	r3, #0
 8008b88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b8a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008b8e:	460b      	mov	r3, r1
 8008b90:	4313      	orrs	r3, r2
 8008b92:	d009      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008b94:	4baa      	ldr	r3, [pc, #680]	@ (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b98:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ba2:	4aa7      	ldr	r2, [pc, #668]	@ (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ba4:	430b      	orrs	r3, r1
 8008ba6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008bb4:	653b      	str	r3, [r7, #80]	@ 0x50
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	657b      	str	r3, [r7, #84]	@ 0x54
 8008bba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	d00a      	beq.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008bc4:	4b9e      	ldr	r3, [pc, #632]	@ (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bc6:	691b      	ldr	r3, [r3, #16]
 8008bc8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bd0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008bd4:	4a9a      	ldr	r2, [pc, #616]	@ (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bd6:	430b      	orrs	r3, r1
 8008bd8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008be6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008be8:	2300      	movs	r3, #0
 8008bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	d009      	beq.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008bf6:	4b92      	ldr	r3, [pc, #584]	@ (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bfa:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c04:	4a8e      	ldr	r2, [pc, #568]	@ (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c06:	430b      	orrs	r3, r1
 8008c08:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c12:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008c16:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c18:	2300      	movs	r3, #0
 8008c1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c1c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008c20:	460b      	mov	r3, r1
 8008c22:	4313      	orrs	r3, r2
 8008c24:	d00e      	beq.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008c26:	4b86      	ldr	r3, [pc, #536]	@ (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	4a85      	ldr	r2, [pc, #532]	@ (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c2c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008c30:	6113      	str	r3, [r2, #16]
 8008c32:	4b83      	ldr	r3, [pc, #524]	@ (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c34:	6919      	ldr	r1, [r3, #16]
 8008c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c3a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008c3e:	4a80      	ldr	r2, [pc, #512]	@ (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c40:	430b      	orrs	r3, r1
 8008c42:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008c50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c52:	2300      	movs	r3, #0
 8008c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c56:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	d009      	beq.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008c60:	4b77      	ldr	r3, [pc, #476]	@ (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c64:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c6e:	4a74      	ldr	r2, [pc, #464]	@ (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c70:	430b      	orrs	r3, r1
 8008c72:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008c80:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c82:	2300      	movs	r3, #0
 8008c84:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c86:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	d00a      	beq.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008c90:	4b6b      	ldr	r3, [pc, #428]	@ (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c94:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ca0:	4a67      	ldr	r2, [pc, #412]	@ (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ca2:	430b      	orrs	r3, r1
 8008ca4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cae:	2100      	movs	r1, #0
 8008cb0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008cb2:	f003 0301 	and.w	r3, r3, #1
 8008cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008cb8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	d011      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cc6:	3308      	adds	r3, #8
 8008cc8:	2100      	movs	r1, #0
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f001 fa4a 	bl	800a164 <RCCEx_PLL2_Config>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d003      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ce2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cee:	2100      	movs	r1, #0
 8008cf0:	6239      	str	r1, [r7, #32]
 8008cf2:	f003 0302 	and.w	r3, r3, #2
 8008cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cf8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	d011      	beq.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d06:	3308      	adds	r3, #8
 8008d08:	2101      	movs	r1, #1
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f001 fa2a 	bl	800a164 <RCCEx_PLL2_Config>
 8008d10:	4603      	mov	r3, r0
 8008d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008d16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d003      	beq.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2e:	2100      	movs	r1, #0
 8008d30:	61b9      	str	r1, [r7, #24]
 8008d32:	f003 0304 	and.w	r3, r3, #4
 8008d36:	61fb      	str	r3, [r7, #28]
 8008d38:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	d011      	beq.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d46:	3308      	adds	r3, #8
 8008d48:	2102      	movs	r1, #2
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f001 fa0a 	bl	800a164 <RCCEx_PLL2_Config>
 8008d50:	4603      	mov	r3, r0
 8008d52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008d56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d003      	beq.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6e:	2100      	movs	r1, #0
 8008d70:	6139      	str	r1, [r7, #16]
 8008d72:	f003 0308 	and.w	r3, r3, #8
 8008d76:	617b      	str	r3, [r7, #20]
 8008d78:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	d011      	beq.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d86:	3328      	adds	r3, #40	@ 0x28
 8008d88:	2100      	movs	r1, #0
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f001 fa9c 	bl	800a2c8 <RCCEx_PLL3_Config>
 8008d90:	4603      	mov	r3, r0
 8008d92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008d96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d003      	beq.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008da2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dae:	2100      	movs	r1, #0
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	f003 0310 	and.w	r3, r3, #16
 8008db6:	60fb      	str	r3, [r7, #12]
 8008db8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	d011      	beq.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dc6:	3328      	adds	r3, #40	@ 0x28
 8008dc8:	2101      	movs	r1, #1
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f001 fa7c 	bl	800a2c8 <RCCEx_PLL3_Config>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d003      	beq.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008de2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dee:	2100      	movs	r1, #0
 8008df0:	6039      	str	r1, [r7, #0]
 8008df2:	f003 0320 	and.w	r3, r3, #32
 8008df6:	607b      	str	r3, [r7, #4]
 8008df8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	d011      	beq.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e06:	3328      	adds	r3, #40	@ 0x28
 8008e08:	2102      	movs	r1, #2
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f001 fa5c 	bl	800a2c8 <RCCEx_PLL3_Config>
 8008e10:	4603      	mov	r3, r0
 8008e12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d003      	beq.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008e26:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d101      	bne.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	e000      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e40:	58024400 	.word	0x58024400

08008e44 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b090      	sub	sp, #64	@ 0x40
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008e4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e52:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008e56:	430b      	orrs	r3, r1
 8008e58:	f040 8094 	bne.w	8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008e5c:	4b9e      	ldr	r3, [pc, #632]	@ (80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e60:	f003 0307 	and.w	r3, r3, #7
 8008e64:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e68:	2b04      	cmp	r3, #4
 8008e6a:	f200 8087 	bhi.w	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e74:	08008e89 	.word	0x08008e89
 8008e78:	08008eb1 	.word	0x08008eb1
 8008e7c:	08008ed9 	.word	0x08008ed9
 8008e80:	08008f75 	.word	0x08008f75
 8008e84:	08008f01 	.word	0x08008f01
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e88:	4b93      	ldr	r3, [pc, #588]	@ (80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e94:	d108      	bne.n	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f001 f810 	bl	8009ec0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ea4:	f000 bd45 	b.w	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eac:	f000 bd41 	b.w	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008eb0:	4b89      	ldr	r3, [pc, #548]	@ (80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008eb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ebc:	d108      	bne.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ebe:	f107 0318 	add.w	r3, r7, #24
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 fd54 	bl	8009970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ecc:	f000 bd31 	b.w	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ed4:	f000 bd2d 	b.w	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ed8:	4b7f      	ldr	r3, [pc, #508]	@ (80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ee0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ee4:	d108      	bne.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ee6:	f107 030c 	add.w	r3, r7, #12
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 fe94 	bl	8009c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ef4:	f000 bd1d 	b.w	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008efc:	f000 bd19 	b.w	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f00:	4b75      	ldr	r3, [pc, #468]	@ (80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008f08:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f0a:	4b73      	ldr	r3, [pc, #460]	@ (80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 0304 	and.w	r3, r3, #4
 8008f12:	2b04      	cmp	r3, #4
 8008f14:	d10c      	bne.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d109      	bne.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f1c:	4b6e      	ldr	r3, [pc, #440]	@ (80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	08db      	lsrs	r3, r3, #3
 8008f22:	f003 0303 	and.w	r3, r3, #3
 8008f26:	4a6d      	ldr	r2, [pc, #436]	@ (80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008f28:	fa22 f303 	lsr.w	r3, r2, r3
 8008f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f2e:	e01f      	b.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f30:	4b69      	ldr	r3, [pc, #420]	@ (80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f3c:	d106      	bne.n	8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f44:	d102      	bne.n	8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008f46:	4b66      	ldr	r3, [pc, #408]	@ (80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f4a:	e011      	b.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f4c:	4b62      	ldr	r3, [pc, #392]	@ (80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f58:	d106      	bne.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f60:	d102      	bne.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008f62:	4b60      	ldr	r3, [pc, #384]	@ (80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f66:	e003      	b.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008f6c:	f000 bce1 	b.w	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f70:	f000 bcdf 	b.w	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008f74:	4b5c      	ldr	r3, [pc, #368]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f78:	f000 bcdb 	b.w	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f80:	f000 bcd7 	b.w	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008f84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f88:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008f8c:	430b      	orrs	r3, r1
 8008f8e:	f040 80ad 	bne.w	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008f92:	4b51      	ldr	r3, [pc, #324]	@ (80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f96:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008f9a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fa2:	d056      	beq.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008faa:	f200 8090 	bhi.w	80090ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb0:	2bc0      	cmp	r3, #192	@ 0xc0
 8008fb2:	f000 8088 	beq.w	80090c6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb8:	2bc0      	cmp	r3, #192	@ 0xc0
 8008fba:	f200 8088 	bhi.w	80090ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc0:	2b80      	cmp	r3, #128	@ 0x80
 8008fc2:	d032      	beq.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc6:	2b80      	cmp	r3, #128	@ 0x80
 8008fc8:	f200 8081 	bhi.w	80090ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d003      	beq.n	8008fda <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd4:	2b40      	cmp	r3, #64	@ 0x40
 8008fd6:	d014      	beq.n	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008fd8:	e079      	b.n	80090ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fda:	4b3f      	ldr	r3, [pc, #252]	@ (80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fe2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008fe6:	d108      	bne.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fe8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fec:	4618      	mov	r0, r3
 8008fee:	f000 ff67 	bl	8009ec0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ff6:	f000 bc9c 	b.w	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ffe:	f000 bc98 	b.w	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009002:	4b35      	ldr	r3, [pc, #212]	@ (80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800900a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800900e:	d108      	bne.n	8009022 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009010:	f107 0318 	add.w	r3, r7, #24
 8009014:	4618      	mov	r0, r3
 8009016:	f000 fcab 	bl	8009970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800901e:	f000 bc88 	b.w	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009022:	2300      	movs	r3, #0
 8009024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009026:	f000 bc84 	b.w	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800902a:	4b2b      	ldr	r3, [pc, #172]	@ (80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009032:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009036:	d108      	bne.n	800904a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009038:	f107 030c 	add.w	r3, r7, #12
 800903c:	4618      	mov	r0, r3
 800903e:	f000 fdeb 	bl	8009c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009046:	f000 bc74 	b.w	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800904a:	2300      	movs	r3, #0
 800904c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800904e:	f000 bc70 	b.w	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009052:	4b21      	ldr	r3, [pc, #132]	@ (80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009056:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800905a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800905c:	4b1e      	ldr	r3, [pc, #120]	@ (80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 0304 	and.w	r3, r3, #4
 8009064:	2b04      	cmp	r3, #4
 8009066:	d10c      	bne.n	8009082 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800906a:	2b00      	cmp	r3, #0
 800906c:	d109      	bne.n	8009082 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800906e:	4b1a      	ldr	r3, [pc, #104]	@ (80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	08db      	lsrs	r3, r3, #3
 8009074:	f003 0303 	and.w	r3, r3, #3
 8009078:	4a18      	ldr	r2, [pc, #96]	@ (80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800907a:	fa22 f303 	lsr.w	r3, r2, r3
 800907e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009080:	e01f      	b.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009082:	4b15      	ldr	r3, [pc, #84]	@ (80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800908a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800908e:	d106      	bne.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009092:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009096:	d102      	bne.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009098:	4b11      	ldr	r3, [pc, #68]	@ (80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800909a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800909c:	e011      	b.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800909e:	4b0e      	ldr	r3, [pc, #56]	@ (80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090aa:	d106      	bne.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80090ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090b2:	d102      	bne.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80090b4:	4b0b      	ldr	r3, [pc, #44]	@ (80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80090b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090b8:	e003      	b.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80090ba:	2300      	movs	r3, #0
 80090bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80090be:	f000 bc38 	b.w	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80090c2:	f000 bc36 	b.w	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80090c6:	4b08      	ldr	r3, [pc, #32]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80090c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090ca:	f000 bc32 	b.w	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80090ce:	2300      	movs	r3, #0
 80090d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090d2:	f000 bc2e 	b.w	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80090d6:	bf00      	nop
 80090d8:	58024400 	.word	0x58024400
 80090dc:	03d09000 	.word	0x03d09000
 80090e0:	003d0900 	.word	0x003d0900
 80090e4:	007a1200 	.word	0x007a1200
 80090e8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80090ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090f0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80090f4:	430b      	orrs	r3, r1
 80090f6:	f040 809c 	bne.w	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80090fa:	4b9e      	ldr	r3, [pc, #632]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090fe:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009102:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009106:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800910a:	d054      	beq.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800910c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009112:	f200 808b 	bhi.w	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009118:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800911c:	f000 8083 	beq.w	8009226 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009122:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009126:	f200 8081 	bhi.w	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800912a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800912c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009130:	d02f      	beq.n	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009134:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009138:	d878      	bhi.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800913a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913c:	2b00      	cmp	r3, #0
 800913e:	d004      	beq.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009142:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009146:	d012      	beq.n	800916e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009148:	e070      	b.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800914a:	4b8a      	ldr	r3, [pc, #552]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009152:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009156:	d107      	bne.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009158:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800915c:	4618      	mov	r0, r3
 800915e:	f000 feaf 	bl	8009ec0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009164:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009166:	e3e4      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009168:	2300      	movs	r3, #0
 800916a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800916c:	e3e1      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800916e:	4b81      	ldr	r3, [pc, #516]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009176:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800917a:	d107      	bne.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800917c:	f107 0318 	add.w	r3, r7, #24
 8009180:	4618      	mov	r0, r3
 8009182:	f000 fbf5 	bl	8009970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800918a:	e3d2      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800918c:	2300      	movs	r3, #0
 800918e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009190:	e3cf      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009192:	4b78      	ldr	r3, [pc, #480]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800919a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800919e:	d107      	bne.n	80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091a0:	f107 030c 	add.w	r3, r7, #12
 80091a4:	4618      	mov	r0, r3
 80091a6:	f000 fd37 	bl	8009c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091ae:	e3c0      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091b0:	2300      	movs	r3, #0
 80091b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091b4:	e3bd      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80091b6:	4b6f      	ldr	r3, [pc, #444]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80091be:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091c0:	4b6c      	ldr	r3, [pc, #432]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f003 0304 	and.w	r3, r3, #4
 80091c8:	2b04      	cmp	r3, #4
 80091ca:	d10c      	bne.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80091cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d109      	bne.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091d2:	4b68      	ldr	r3, [pc, #416]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	08db      	lsrs	r3, r3, #3
 80091d8:	f003 0303 	and.w	r3, r3, #3
 80091dc:	4a66      	ldr	r2, [pc, #408]	@ (8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80091de:	fa22 f303 	lsr.w	r3, r2, r3
 80091e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091e4:	e01e      	b.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80091e6:	4b63      	ldr	r3, [pc, #396]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091f2:	d106      	bne.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80091f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091fa:	d102      	bne.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80091fc:	4b5f      	ldr	r3, [pc, #380]	@ (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80091fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009200:	e010      	b.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009202:	4b5c      	ldr	r3, [pc, #368]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800920a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800920e:	d106      	bne.n	800921e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009212:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009216:	d102      	bne.n	800921e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009218:	4b59      	ldr	r3, [pc, #356]	@ (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800921a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800921c:	e002      	b.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800921e:	2300      	movs	r3, #0
 8009220:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009222:	e386      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009224:	e385      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009226:	4b57      	ldr	r3, [pc, #348]	@ (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800922a:	e382      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800922c:	2300      	movs	r3, #0
 800922e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009230:	e37f      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009232:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009236:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800923a:	430b      	orrs	r3, r1
 800923c:	f040 80a7 	bne.w	800938e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009240:	4b4c      	ldr	r3, [pc, #304]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009244:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009248:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800924a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800924c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009250:	d055      	beq.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009254:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009258:	f200 8096 	bhi.w	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800925c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800925e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009262:	f000 8084 	beq.w	800936e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009268:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800926c:	f200 808c 	bhi.w	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009272:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009276:	d030      	beq.n	80092da <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800927a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800927e:	f200 8083 	bhi.w	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009284:	2b00      	cmp	r3, #0
 8009286:	d004      	beq.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800928a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800928e:	d012      	beq.n	80092b6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009290:	e07a      	b.n	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009292:	4b38      	ldr	r3, [pc, #224]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800929a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800929e:	d107      	bne.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092a4:	4618      	mov	r0, r3
 80092a6:	f000 fe0b 	bl	8009ec0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092ae:	e340      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092b0:	2300      	movs	r3, #0
 80092b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092b4:	e33d      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092b6:	4b2f      	ldr	r3, [pc, #188]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092c2:	d107      	bne.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092c4:	f107 0318 	add.w	r3, r7, #24
 80092c8:	4618      	mov	r0, r3
 80092ca:	f000 fb51 	bl	8009970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092d2:	e32e      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092d4:	2300      	movs	r3, #0
 80092d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092d8:	e32b      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092da:	4b26      	ldr	r3, [pc, #152]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80092e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092e6:	d107      	bne.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092e8:	f107 030c 	add.w	r3, r7, #12
 80092ec:	4618      	mov	r0, r3
 80092ee:	f000 fc93 	bl	8009c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092f6:	e31c      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092f8:	2300      	movs	r3, #0
 80092fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092fc:	e319      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092fe:	4b1d      	ldr	r3, [pc, #116]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009302:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009306:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009308:	4b1a      	ldr	r3, [pc, #104]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f003 0304 	and.w	r3, r3, #4
 8009310:	2b04      	cmp	r3, #4
 8009312:	d10c      	bne.n	800932e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009316:	2b00      	cmp	r3, #0
 8009318:	d109      	bne.n	800932e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800931a:	4b16      	ldr	r3, [pc, #88]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	08db      	lsrs	r3, r3, #3
 8009320:	f003 0303 	and.w	r3, r3, #3
 8009324:	4a14      	ldr	r2, [pc, #80]	@ (8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009326:	fa22 f303 	lsr.w	r3, r2, r3
 800932a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800932c:	e01e      	b.n	800936c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800932e:	4b11      	ldr	r3, [pc, #68]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009336:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800933a:	d106      	bne.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800933c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800933e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009342:	d102      	bne.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009344:	4b0d      	ldr	r3, [pc, #52]	@ (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009346:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009348:	e010      	b.n	800936c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800934a:	4b0a      	ldr	r3, [pc, #40]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009352:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009356:	d106      	bne.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800935a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800935e:	d102      	bne.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009360:	4b07      	ldr	r3, [pc, #28]	@ (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009362:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009364:	e002      	b.n	800936c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009366:	2300      	movs	r3, #0
 8009368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800936a:	e2e2      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800936c:	e2e1      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800936e:	4b05      	ldr	r3, [pc, #20]	@ (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009370:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009372:	e2de      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009374:	58024400 	.word	0x58024400
 8009378:	03d09000 	.word	0x03d09000
 800937c:	003d0900 	.word	0x003d0900
 8009380:	007a1200 	.word	0x007a1200
 8009384:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009388:	2300      	movs	r3, #0
 800938a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800938c:	e2d1      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800938e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009392:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009396:	430b      	orrs	r3, r1
 8009398:	f040 809c 	bne.w	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800939c:	4b93      	ldr	r3, [pc, #588]	@ (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800939e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093a0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80093a4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80093a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80093ac:	d054      	beq.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80093ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80093b4:	f200 808b 	bhi.w	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80093b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80093be:	f000 8083 	beq.w	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80093c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80093c8:	f200 8081 	bhi.w	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80093cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093d2:	d02f      	beq.n	8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80093d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093da:	d878      	bhi.n	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80093dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d004      	beq.n	80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80093e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093e8:	d012      	beq.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80093ea:	e070      	b.n	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80093ec:	4b7f      	ldr	r3, [pc, #508]	@ (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093f8:	d107      	bne.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093fe:	4618      	mov	r0, r3
 8009400:	f000 fd5e 	bl	8009ec0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009408:	e293      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800940a:	2300      	movs	r3, #0
 800940c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800940e:	e290      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009410:	4b76      	ldr	r3, [pc, #472]	@ (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009418:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800941c:	d107      	bne.n	800942e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800941e:	f107 0318 	add.w	r3, r7, #24
 8009422:	4618      	mov	r0, r3
 8009424:	f000 faa4 	bl	8009970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800942c:	e281      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800942e:	2300      	movs	r3, #0
 8009430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009432:	e27e      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009434:	4b6d      	ldr	r3, [pc, #436]	@ (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800943c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009440:	d107      	bne.n	8009452 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009442:	f107 030c 	add.w	r3, r7, #12
 8009446:	4618      	mov	r0, r3
 8009448:	f000 fbe6 	bl	8009c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009450:	e26f      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009452:	2300      	movs	r3, #0
 8009454:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009456:	e26c      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009458:	4b64      	ldr	r3, [pc, #400]	@ (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800945a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800945c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009460:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009462:	4b62      	ldr	r3, [pc, #392]	@ (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f003 0304 	and.w	r3, r3, #4
 800946a:	2b04      	cmp	r3, #4
 800946c:	d10c      	bne.n	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800946e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009470:	2b00      	cmp	r3, #0
 8009472:	d109      	bne.n	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009474:	4b5d      	ldr	r3, [pc, #372]	@ (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	08db      	lsrs	r3, r3, #3
 800947a:	f003 0303 	and.w	r3, r3, #3
 800947e:	4a5c      	ldr	r2, [pc, #368]	@ (80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009480:	fa22 f303 	lsr.w	r3, r2, r3
 8009484:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009486:	e01e      	b.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009488:	4b58      	ldr	r3, [pc, #352]	@ (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009490:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009494:	d106      	bne.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009498:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800949c:	d102      	bne.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800949e:	4b55      	ldr	r3, [pc, #340]	@ (80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80094a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094a2:	e010      	b.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094a4:	4b51      	ldr	r3, [pc, #324]	@ (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094b0:	d106      	bne.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80094b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094b8:	d102      	bne.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80094ba:	4b4f      	ldr	r3, [pc, #316]	@ (80095f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80094bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094be:	e002      	b.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80094c0:	2300      	movs	r3, #0
 80094c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80094c4:	e235      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80094c6:	e234      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80094c8:	4b4c      	ldr	r3, [pc, #304]	@ (80095fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80094ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094cc:	e231      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80094ce:	2300      	movs	r3, #0
 80094d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094d2:	e22e      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80094d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094d8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80094dc:	430b      	orrs	r3, r1
 80094de:	f040 808f 	bne.w	8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80094e2:	4b42      	ldr	r3, [pc, #264]	@ (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094e6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80094ea:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80094ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80094f2:	d06b      	beq.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80094f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80094fa:	d874      	bhi.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80094fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009502:	d056      	beq.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009506:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800950a:	d86c      	bhi.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800950c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800950e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009512:	d03b      	beq.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009516:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800951a:	d864      	bhi.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800951c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800951e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009522:	d021      	beq.n	8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009526:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800952a:	d85c      	bhi.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800952c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800952e:	2b00      	cmp	r3, #0
 8009530:	d004      	beq.n	800953c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009538:	d004      	beq.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800953a:	e054      	b.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800953c:	f7fe fa0a 	bl	8007954 <HAL_RCC_GetPCLK1Freq>
 8009540:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009542:	e1f6      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009544:	4b29      	ldr	r3, [pc, #164]	@ (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800954c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009550:	d107      	bne.n	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009552:	f107 0318 	add.w	r3, r7, #24
 8009556:	4618      	mov	r0, r3
 8009558:	f000 fa0a 	bl	8009970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009560:	e1e7      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009562:	2300      	movs	r3, #0
 8009564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009566:	e1e4      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009568:	4b20      	ldr	r3, [pc, #128]	@ (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009570:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009574:	d107      	bne.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009576:	f107 030c 	add.w	r3, r7, #12
 800957a:	4618      	mov	r0, r3
 800957c:	f000 fb4c 	bl	8009c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009584:	e1d5      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009586:	2300      	movs	r3, #0
 8009588:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800958a:	e1d2      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800958c:	4b17      	ldr	r3, [pc, #92]	@ (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 0304 	and.w	r3, r3, #4
 8009594:	2b04      	cmp	r3, #4
 8009596:	d109      	bne.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009598:	4b14      	ldr	r3, [pc, #80]	@ (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	08db      	lsrs	r3, r3, #3
 800959e:	f003 0303 	and.w	r3, r3, #3
 80095a2:	4a13      	ldr	r2, [pc, #76]	@ (80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80095a4:	fa22 f303 	lsr.w	r3, r2, r3
 80095a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095aa:	e1c2      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095ac:	2300      	movs	r3, #0
 80095ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095b0:	e1bf      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80095b2:	4b0e      	ldr	r3, [pc, #56]	@ (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095be:	d102      	bne.n	80095c6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80095c0:	4b0c      	ldr	r3, [pc, #48]	@ (80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80095c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095c4:	e1b5      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095c6:	2300      	movs	r3, #0
 80095c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095ca:	e1b2      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80095cc:	4b07      	ldr	r3, [pc, #28]	@ (80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095d8:	d102      	bne.n	80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80095da:	4b07      	ldr	r3, [pc, #28]	@ (80095f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80095dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095de:	e1a8      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095e0:	2300      	movs	r3, #0
 80095e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095e4:	e1a5      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80095e6:	2300      	movs	r3, #0
 80095e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095ea:	e1a2      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80095ec:	58024400 	.word	0x58024400
 80095f0:	03d09000 	.word	0x03d09000
 80095f4:	003d0900 	.word	0x003d0900
 80095f8:	007a1200 	.word	0x007a1200
 80095fc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009600:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009604:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009608:	430b      	orrs	r3, r1
 800960a:	d173      	bne.n	80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800960c:	4b9c      	ldr	r3, [pc, #624]	@ (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800960e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009610:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009614:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009618:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800961c:	d02f      	beq.n	800967e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800961e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009620:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009624:	d863      	bhi.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009628:	2b00      	cmp	r3, #0
 800962a:	d004      	beq.n	8009636 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800962c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800962e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009632:	d012      	beq.n	800965a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009634:	e05b      	b.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009636:	4b92      	ldr	r3, [pc, #584]	@ (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800963e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009642:	d107      	bne.n	8009654 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009644:	f107 0318 	add.w	r3, r7, #24
 8009648:	4618      	mov	r0, r3
 800964a:	f000 f991 	bl	8009970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009652:	e16e      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009654:	2300      	movs	r3, #0
 8009656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009658:	e16b      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800965a:	4b89      	ldr	r3, [pc, #548]	@ (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009662:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009666:	d107      	bne.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009668:	f107 030c 	add.w	r3, r7, #12
 800966c:	4618      	mov	r0, r3
 800966e:	f000 fad3 	bl	8009c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009676:	e15c      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009678:	2300      	movs	r3, #0
 800967a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800967c:	e159      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800967e:	4b80      	ldr	r3, [pc, #512]	@ (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009682:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009686:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009688:	4b7d      	ldr	r3, [pc, #500]	@ (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 0304 	and.w	r3, r3, #4
 8009690:	2b04      	cmp	r3, #4
 8009692:	d10c      	bne.n	80096ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009696:	2b00      	cmp	r3, #0
 8009698:	d109      	bne.n	80096ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800969a:	4b79      	ldr	r3, [pc, #484]	@ (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	08db      	lsrs	r3, r3, #3
 80096a0:	f003 0303 	and.w	r3, r3, #3
 80096a4:	4a77      	ldr	r2, [pc, #476]	@ (8009884 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80096a6:	fa22 f303 	lsr.w	r3, r2, r3
 80096aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096ac:	e01e      	b.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80096ae:	4b74      	ldr	r3, [pc, #464]	@ (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096ba:	d106      	bne.n	80096ca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80096bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096c2:	d102      	bne.n	80096ca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80096c4:	4b70      	ldr	r3, [pc, #448]	@ (8009888 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80096c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096c8:	e010      	b.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80096ca:	4b6d      	ldr	r3, [pc, #436]	@ (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096d6:	d106      	bne.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80096d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096de:	d102      	bne.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80096e0:	4b6a      	ldr	r3, [pc, #424]	@ (800988c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80096e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096e4:	e002      	b.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80096e6:	2300      	movs	r3, #0
 80096e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80096ea:	e122      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80096ec:	e121      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80096ee:	2300      	movs	r3, #0
 80096f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096f2:	e11e      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80096f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096f8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80096fc:	430b      	orrs	r3, r1
 80096fe:	d133      	bne.n	8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009700:	4b5f      	ldr	r3, [pc, #380]	@ (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009704:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009708:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800970a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800970c:	2b00      	cmp	r3, #0
 800970e:	d004      	beq.n	800971a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009712:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009716:	d012      	beq.n	800973e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009718:	e023      	b.n	8009762 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800971a:	4b59      	ldr	r3, [pc, #356]	@ (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009722:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009726:	d107      	bne.n	8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009728:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800972c:	4618      	mov	r0, r3
 800972e:	f000 fbc7 	bl	8009ec0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009736:	e0fc      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009738:	2300      	movs	r3, #0
 800973a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800973c:	e0f9      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800973e:	4b50      	ldr	r3, [pc, #320]	@ (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009746:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800974a:	d107      	bne.n	800975c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800974c:	f107 0318 	add.w	r3, r7, #24
 8009750:	4618      	mov	r0, r3
 8009752:	f000 f90d 	bl	8009970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009756:	6a3b      	ldr	r3, [r7, #32]
 8009758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800975a:	e0ea      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800975c:	2300      	movs	r3, #0
 800975e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009760:	e0e7      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009762:	2300      	movs	r3, #0
 8009764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009766:	e0e4      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800976c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009770:	430b      	orrs	r3, r1
 8009772:	f040 808d 	bne.w	8009890 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009776:	4b42      	ldr	r3, [pc, #264]	@ (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800977a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800977e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009782:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009786:	d06b      	beq.n	8009860 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800978a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800978e:	d874      	bhi.n	800987a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009796:	d056      	beq.n	8009846 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800979a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800979e:	d86c      	bhi.n	800987a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80097a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80097a6:	d03b      	beq.n	8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80097a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80097ae:	d864      	bhi.n	800987a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80097b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097b6:	d021      	beq.n	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80097b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097be:	d85c      	bhi.n	800987a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80097c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d004      	beq.n	80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80097c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097cc:	d004      	beq.n	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80097ce:	e054      	b.n	800987a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80097d0:	f000 f8b8 	bl	8009944 <HAL_RCCEx_GetD3PCLK1Freq>
 80097d4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80097d6:	e0ac      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097d8:	4b29      	ldr	r3, [pc, #164]	@ (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097e4:	d107      	bne.n	80097f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097e6:	f107 0318 	add.w	r3, r7, #24
 80097ea:	4618      	mov	r0, r3
 80097ec:	f000 f8c0 	bl	8009970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097f4:	e09d      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097f6:	2300      	movs	r3, #0
 80097f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097fa:	e09a      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80097fc:	4b20      	ldr	r3, [pc, #128]	@ (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009804:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009808:	d107      	bne.n	800981a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800980a:	f107 030c 	add.w	r3, r7, #12
 800980e:	4618      	mov	r0, r3
 8009810:	f000 fa02 	bl	8009c18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009818:	e08b      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800981a:	2300      	movs	r3, #0
 800981c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800981e:	e088      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009820:	4b17      	ldr	r3, [pc, #92]	@ (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f003 0304 	and.w	r3, r3, #4
 8009828:	2b04      	cmp	r3, #4
 800982a:	d109      	bne.n	8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800982c:	4b14      	ldr	r3, [pc, #80]	@ (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	08db      	lsrs	r3, r3, #3
 8009832:	f003 0303 	and.w	r3, r3, #3
 8009836:	4a13      	ldr	r2, [pc, #76]	@ (8009884 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009838:	fa22 f303 	lsr.w	r3, r2, r3
 800983c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800983e:	e078      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009840:	2300      	movs	r3, #0
 8009842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009844:	e075      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009846:	4b0e      	ldr	r3, [pc, #56]	@ (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800984e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009852:	d102      	bne.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009854:	4b0c      	ldr	r3, [pc, #48]	@ (8009888 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009858:	e06b      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800985a:	2300      	movs	r3, #0
 800985c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800985e:	e068      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009860:	4b07      	ldr	r3, [pc, #28]	@ (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009868:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800986c:	d102      	bne.n	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800986e:	4b07      	ldr	r3, [pc, #28]	@ (800988c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009872:	e05e      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009874:	2300      	movs	r3, #0
 8009876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009878:	e05b      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800987a:	2300      	movs	r3, #0
 800987c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800987e:	e058      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009880:	58024400 	.word	0x58024400
 8009884:	03d09000 	.word	0x03d09000
 8009888:	003d0900 	.word	0x003d0900
 800988c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009890:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009894:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009898:	430b      	orrs	r3, r1
 800989a:	d148      	bne.n	800992e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800989c:	4b27      	ldr	r3, [pc, #156]	@ (800993c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800989e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80098a4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80098a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098ac:	d02a      	beq.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80098ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098b4:	d838      	bhi.n	8009928 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80098b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d004      	beq.n	80098c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80098bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098c2:	d00d      	beq.n	80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80098c4:	e030      	b.n	8009928 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80098c6:	4b1d      	ldr	r3, [pc, #116]	@ (800993c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098d2:	d102      	bne.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80098d4:	4b1a      	ldr	r3, [pc, #104]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80098d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098d8:	e02b      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098da:	2300      	movs	r3, #0
 80098dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098de:	e028      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80098e0:	4b16      	ldr	r3, [pc, #88]	@ (800993c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80098ec:	d107      	bne.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098f2:	4618      	mov	r0, r3
 80098f4:	f000 fae4 	bl	8009ec0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80098f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098fc:	e019      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098fe:	2300      	movs	r3, #0
 8009900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009902:	e016      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009904:	4b0d      	ldr	r3, [pc, #52]	@ (800993c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800990c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009910:	d107      	bne.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009912:	f107 0318 	add.w	r3, r7, #24
 8009916:	4618      	mov	r0, r3
 8009918:	f000 f82a 	bl	8009970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009920:	e007      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009922:	2300      	movs	r3, #0
 8009924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009926:	e004      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009928:	2300      	movs	r3, #0
 800992a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800992c:	e001      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800992e:	2300      	movs	r3, #0
 8009930:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009934:	4618      	mov	r0, r3
 8009936:	3740      	adds	r7, #64	@ 0x40
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	58024400 	.word	0x58024400
 8009940:	007a1200 	.word	0x007a1200

08009944 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009948:	f7fd ffd4 	bl	80078f4 <HAL_RCC_GetHCLKFreq>
 800994c:	4602      	mov	r2, r0
 800994e:	4b06      	ldr	r3, [pc, #24]	@ (8009968 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009950:	6a1b      	ldr	r3, [r3, #32]
 8009952:	091b      	lsrs	r3, r3, #4
 8009954:	f003 0307 	and.w	r3, r3, #7
 8009958:	4904      	ldr	r1, [pc, #16]	@ (800996c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800995a:	5ccb      	ldrb	r3, [r1, r3]
 800995c:	f003 031f 	and.w	r3, r3, #31
 8009960:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009964:	4618      	mov	r0, r3
 8009966:	bd80      	pop	{r7, pc}
 8009968:	58024400 	.word	0x58024400
 800996c:	0801405c 	.word	0x0801405c

08009970 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009970:	b480      	push	{r7}
 8009972:	b089      	sub	sp, #36	@ 0x24
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009978:	4ba1      	ldr	r3, [pc, #644]	@ (8009c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800997a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800997c:	f003 0303 	and.w	r3, r3, #3
 8009980:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009982:	4b9f      	ldr	r3, [pc, #636]	@ (8009c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009986:	0b1b      	lsrs	r3, r3, #12
 8009988:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800998c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800998e:	4b9c      	ldr	r3, [pc, #624]	@ (8009c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009992:	091b      	lsrs	r3, r3, #4
 8009994:	f003 0301 	and.w	r3, r3, #1
 8009998:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800999a:	4b99      	ldr	r3, [pc, #612]	@ (8009c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800999c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800999e:	08db      	lsrs	r3, r3, #3
 80099a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80099a4:	693a      	ldr	r2, [r7, #16]
 80099a6:	fb02 f303 	mul.w	r3, r2, r3
 80099aa:	ee07 3a90 	vmov	s15, r3
 80099ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f000 8111 	beq.w	8009be0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	f000 8083 	beq.w	8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	2b02      	cmp	r3, #2
 80099ca:	f200 80a1 	bhi.w	8009b10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d003      	beq.n	80099dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80099d4:	69bb      	ldr	r3, [r7, #24]
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d056      	beq.n	8009a88 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80099da:	e099      	b.n	8009b10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099dc:	4b88      	ldr	r3, [pc, #544]	@ (8009c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f003 0320 	and.w	r3, r3, #32
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d02d      	beq.n	8009a44 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099e8:	4b85      	ldr	r3, [pc, #532]	@ (8009c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	08db      	lsrs	r3, r3, #3
 80099ee:	f003 0303 	and.w	r3, r3, #3
 80099f2:	4a84      	ldr	r2, [pc, #528]	@ (8009c04 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80099f4:	fa22 f303 	lsr.w	r3, r2, r3
 80099f8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	ee07 3a90 	vmov	s15, r3
 8009a00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	ee07 3a90 	vmov	s15, r3
 8009a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a12:	4b7b      	ldr	r3, [pc, #492]	@ (8009c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a1a:	ee07 3a90 	vmov	s15, r3
 8009a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a22:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a26:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009c08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009a42:	e087      	b.n	8009b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	ee07 3a90 	vmov	s15, r3
 8009a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a4e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009c0c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a56:	4b6a      	ldr	r3, [pc, #424]	@ (8009c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a5e:	ee07 3a90 	vmov	s15, r3
 8009a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a6a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009c08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a86:	e065      	b.n	8009b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	ee07 3a90 	vmov	s15, r3
 8009a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a92:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009c10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a9a:	4b59      	ldr	r3, [pc, #356]	@ (8009c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aa2:	ee07 3a90 	vmov	s15, r3
 8009aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009aae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009c08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009aca:	e043      	b.n	8009b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	ee07 3a90 	vmov	s15, r3
 8009ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ad6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ade:	4b48      	ldr	r3, [pc, #288]	@ (8009c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ae6:	ee07 3a90 	vmov	s15, r3
 8009aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8009af2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009c08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009afe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b0e:	e021      	b.n	8009b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	ee07 3a90 	vmov	s15, r3
 8009b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b1a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009c10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b22:	4b37      	ldr	r3, [pc, #220]	@ (8009c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b2a:	ee07 3a90 	vmov	s15, r3
 8009b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b36:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009c08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b52:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009b54:	4b2a      	ldr	r3, [pc, #168]	@ (8009c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b58:	0a5b      	lsrs	r3, r3, #9
 8009b5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b5e:	ee07 3a90 	vmov	s15, r3
 8009b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009b6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b7a:	ee17 2a90 	vmov	r2, s15
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009b82:	4b1f      	ldr	r3, [pc, #124]	@ (8009c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b86:	0c1b      	lsrs	r3, r3, #16
 8009b88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b8c:	ee07 3a90 	vmov	s15, r3
 8009b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009b98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ba8:	ee17 2a90 	vmov	r2, s15
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009bb0:	4b13      	ldr	r3, [pc, #76]	@ (8009c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bb4:	0e1b      	lsrs	r3, r3, #24
 8009bb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bba:	ee07 3a90 	vmov	s15, r3
 8009bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009bc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bca:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bd6:	ee17 2a90 	vmov	r2, s15
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009bde:	e008      	b.n	8009bf2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	609a      	str	r2, [r3, #8]
}
 8009bf2:	bf00      	nop
 8009bf4:	3724      	adds	r7, #36	@ 0x24
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop
 8009c00:	58024400 	.word	0x58024400
 8009c04:	03d09000 	.word	0x03d09000
 8009c08:	46000000 	.word	0x46000000
 8009c0c:	4c742400 	.word	0x4c742400
 8009c10:	4a742400 	.word	0x4a742400
 8009c14:	4af42400 	.word	0x4af42400

08009c18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b089      	sub	sp, #36	@ 0x24
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c20:	4ba1      	ldr	r3, [pc, #644]	@ (8009ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c24:	f003 0303 	and.w	r3, r3, #3
 8009c28:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009c2a:	4b9f      	ldr	r3, [pc, #636]	@ (8009ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c2e:	0d1b      	lsrs	r3, r3, #20
 8009c30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c34:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009c36:	4b9c      	ldr	r3, [pc, #624]	@ (8009ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c3a:	0a1b      	lsrs	r3, r3, #8
 8009c3c:	f003 0301 	and.w	r3, r3, #1
 8009c40:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009c42:	4b99      	ldr	r3, [pc, #612]	@ (8009ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c46:	08db      	lsrs	r3, r3, #3
 8009c48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c4c:	693a      	ldr	r2, [r7, #16]
 8009c4e:	fb02 f303 	mul.w	r3, r2, r3
 8009c52:	ee07 3a90 	vmov	s15, r3
 8009c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f000 8111 	beq.w	8009e88 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	f000 8083 	beq.w	8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	2b02      	cmp	r3, #2
 8009c72:	f200 80a1 	bhi.w	8009db8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d003      	beq.n	8009c84 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d056      	beq.n	8009d30 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009c82:	e099      	b.n	8009db8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c84:	4b88      	ldr	r3, [pc, #544]	@ (8009ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f003 0320 	and.w	r3, r3, #32
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d02d      	beq.n	8009cec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c90:	4b85      	ldr	r3, [pc, #532]	@ (8009ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	08db      	lsrs	r3, r3, #3
 8009c96:	f003 0303 	and.w	r3, r3, #3
 8009c9a:	4a84      	ldr	r2, [pc, #528]	@ (8009eac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009ca0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	ee07 3a90 	vmov	s15, r3
 8009ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	ee07 3a90 	vmov	s15, r3
 8009cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cba:	4b7b      	ldr	r3, [pc, #492]	@ (8009ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cc2:	ee07 3a90 	vmov	s15, r3
 8009cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cca:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ce6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009cea:	e087      	b.n	8009dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	ee07 3a90 	vmov	s15, r3
 8009cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cf6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cfe:	4b6a      	ldr	r3, [pc, #424]	@ (8009ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d06:	ee07 3a90 	vmov	s15, r3
 8009d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d12:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d2e:	e065      	b.n	8009dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	ee07 3a90 	vmov	s15, r3
 8009d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d3a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d42:	4b59      	ldr	r3, [pc, #356]	@ (8009ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d4a:	ee07 3a90 	vmov	s15, r3
 8009d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d56:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d72:	e043      	b.n	8009dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	ee07 3a90 	vmov	s15, r3
 8009d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d86:	4b48      	ldr	r3, [pc, #288]	@ (8009ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d8e:	ee07 3a90 	vmov	s15, r3
 8009d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d9a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009da6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009db2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009db6:	e021      	b.n	8009dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	ee07 3a90 	vmov	s15, r3
 8009dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dc2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dca:	4b37      	ldr	r3, [pc, #220]	@ (8009ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dd2:	ee07 3a90 	vmov	s15, r3
 8009dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dde:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009df6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dfa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009dfc:	4b2a      	ldr	r3, [pc, #168]	@ (8009ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e00:	0a5b      	lsrs	r3, r3, #9
 8009e02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e06:	ee07 3a90 	vmov	s15, r3
 8009e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e16:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e22:	ee17 2a90 	vmov	r2, s15
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8009ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e2e:	0c1b      	lsrs	r3, r3, #16
 8009e30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e34:	ee07 3a90 	vmov	s15, r3
 8009e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e44:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e50:	ee17 2a90 	vmov	r2, s15
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009e58:	4b13      	ldr	r3, [pc, #76]	@ (8009ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e5c:	0e1b      	lsrs	r3, r3, #24
 8009e5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e62:	ee07 3a90 	vmov	s15, r3
 8009e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e72:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e7e:	ee17 2a90 	vmov	r2, s15
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009e86:	e008      	b.n	8009e9a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	609a      	str	r2, [r3, #8]
}
 8009e9a:	bf00      	nop
 8009e9c:	3724      	adds	r7, #36	@ 0x24
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr
 8009ea6:	bf00      	nop
 8009ea8:	58024400 	.word	0x58024400
 8009eac:	03d09000 	.word	0x03d09000
 8009eb0:	46000000 	.word	0x46000000
 8009eb4:	4c742400 	.word	0x4c742400
 8009eb8:	4a742400 	.word	0x4a742400
 8009ebc:	4af42400 	.word	0x4af42400

08009ec0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b089      	sub	sp, #36	@ 0x24
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ec8:	4ba0      	ldr	r3, [pc, #640]	@ (800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ecc:	f003 0303 	and.w	r3, r3, #3
 8009ed0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009ed2:	4b9e      	ldr	r3, [pc, #632]	@ (800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ed6:	091b      	lsrs	r3, r3, #4
 8009ed8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009edc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009ede:	4b9b      	ldr	r3, [pc, #620]	@ (800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ee2:	f003 0301 	and.w	r3, r3, #1
 8009ee6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009ee8:	4b98      	ldr	r3, [pc, #608]	@ (800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009eec:	08db      	lsrs	r3, r3, #3
 8009eee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ef2:	693a      	ldr	r2, [r7, #16]
 8009ef4:	fb02 f303 	mul.w	r3, r2, r3
 8009ef8:	ee07 3a90 	vmov	s15, r3
 8009efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f00:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	f000 8111 	beq.w	800a12e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	2b02      	cmp	r3, #2
 8009f10:	f000 8083 	beq.w	800a01a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	f200 80a1 	bhi.w	800a05e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d003      	beq.n	8009f2a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d056      	beq.n	8009fd6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009f28:	e099      	b.n	800a05e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f2a:	4b88      	ldr	r3, [pc, #544]	@ (800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f003 0320 	and.w	r3, r3, #32
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d02d      	beq.n	8009f92 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f36:	4b85      	ldr	r3, [pc, #532]	@ (800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	08db      	lsrs	r3, r3, #3
 8009f3c:	f003 0303 	and.w	r3, r3, #3
 8009f40:	4a83      	ldr	r2, [pc, #524]	@ (800a150 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009f42:	fa22 f303 	lsr.w	r3, r2, r3
 8009f46:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	ee07 3a90 	vmov	s15, r3
 8009f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	ee07 3a90 	vmov	s15, r3
 8009f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f60:	4b7a      	ldr	r3, [pc, #488]	@ (800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f68:	ee07 3a90 	vmov	s15, r3
 8009f6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f70:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f74:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a154 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f8c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009f90:	e087      	b.n	800a0a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	ee07 3a90 	vmov	s15, r3
 8009f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f9c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a158 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009fa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fa4:	4b69      	ldr	r3, [pc, #420]	@ (800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fac:	ee07 3a90 	vmov	s15, r3
 8009fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fb4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fb8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a154 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009fbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fd0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fd4:	e065      	b.n	800a0a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	ee07 3a90 	vmov	s15, r3
 8009fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fe0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a15c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009fe4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fe8:	4b58      	ldr	r3, [pc, #352]	@ (800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ff0:	ee07 3a90 	vmov	s15, r3
 8009ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ff8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ffc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a154 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a000:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a004:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a008:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a00c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a010:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a014:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a018:	e043      	b.n	800a0a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	ee07 3a90 	vmov	s15, r3
 800a020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a024:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a160 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a028:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a02c:	4b47      	ldr	r3, [pc, #284]	@ (800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a02e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a034:	ee07 3a90 	vmov	s15, r3
 800a038:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a03c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a040:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a154 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a044:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a048:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a04c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a050:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a054:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a058:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a05c:	e021      	b.n	800a0a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	ee07 3a90 	vmov	s15, r3
 800a064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a068:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a158 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a06c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a070:	4b36      	ldr	r3, [pc, #216]	@ (800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a078:	ee07 3a90 	vmov	s15, r3
 800a07c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a080:	ed97 6a03 	vldr	s12, [r7, #12]
 800a084:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a154 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a088:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a08c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a090:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a094:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a09c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0a0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a0a2:	4b2a      	ldr	r3, [pc, #168]	@ (800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0a6:	0a5b      	lsrs	r3, r3, #9
 800a0a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0ac:	ee07 3a90 	vmov	s15, r3
 800a0b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0c8:	ee17 2a90 	vmov	r2, s15
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a0d0:	4b1e      	ldr	r3, [pc, #120]	@ (800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0d4:	0c1b      	lsrs	r3, r3, #16
 800a0d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0da:	ee07 3a90 	vmov	s15, r3
 800a0de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0f6:	ee17 2a90 	vmov	r2, s15
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a0fe:	4b13      	ldr	r3, [pc, #76]	@ (800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a102:	0e1b      	lsrs	r3, r3, #24
 800a104:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a108:	ee07 3a90 	vmov	s15, r3
 800a10c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a110:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a114:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a118:	edd7 6a07 	vldr	s13, [r7, #28]
 800a11c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a124:	ee17 2a90 	vmov	r2, s15
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a12c:	e008      	b.n	800a140 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2200      	movs	r2, #0
 800a13e:	609a      	str	r2, [r3, #8]
}
 800a140:	bf00      	nop
 800a142:	3724      	adds	r7, #36	@ 0x24
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr
 800a14c:	58024400 	.word	0x58024400
 800a150:	03d09000 	.word	0x03d09000
 800a154:	46000000 	.word	0x46000000
 800a158:	4c742400 	.word	0x4c742400
 800a15c:	4a742400 	.word	0x4a742400
 800a160:	4af42400 	.word	0x4af42400

0800a164 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a172:	4b53      	ldr	r3, [pc, #332]	@ (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a176:	f003 0303 	and.w	r3, r3, #3
 800a17a:	2b03      	cmp	r3, #3
 800a17c:	d101      	bne.n	800a182 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	e099      	b.n	800a2b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a182:	4b4f      	ldr	r3, [pc, #316]	@ (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a4e      	ldr	r2, [pc, #312]	@ (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a188:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a18c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a18e:	f7f7 ffbb 	bl	8002108 <HAL_GetTick>
 800a192:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a194:	e008      	b.n	800a1a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a196:	f7f7 ffb7 	bl	8002108 <HAL_GetTick>
 800a19a:	4602      	mov	r2, r0
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	1ad3      	subs	r3, r2, r3
 800a1a0:	2b02      	cmp	r3, #2
 800a1a2:	d901      	bls.n	800a1a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	e086      	b.n	800a2b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a1a8:	4b45      	ldr	r3, [pc, #276]	@ (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1f0      	bne.n	800a196 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a1b4:	4b42      	ldr	r3, [pc, #264]	@ (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a1b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1b8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	031b      	lsls	r3, r3, #12
 800a1c2:	493f      	ldr	r1, [pc, #252]	@ (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	628b      	str	r3, [r1, #40]	@ 0x28
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	3b01      	subs	r3, #1
 800a1d8:	025b      	lsls	r3, r3, #9
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	431a      	orrs	r2, r3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	041b      	lsls	r3, r3, #16
 800a1e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a1ea:	431a      	orrs	r2, r3
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	061b      	lsls	r3, r3, #24
 800a1f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a1f8:	4931      	ldr	r1, [pc, #196]	@ (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a1fe:	4b30      	ldr	r3, [pc, #192]	@ (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a202:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	695b      	ldr	r3, [r3, #20]
 800a20a:	492d      	ldr	r1, [pc, #180]	@ (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a20c:	4313      	orrs	r3, r2
 800a20e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a210:	4b2b      	ldr	r3, [pc, #172]	@ (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a214:	f023 0220 	bic.w	r2, r3, #32
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	699b      	ldr	r3, [r3, #24]
 800a21c:	4928      	ldr	r1, [pc, #160]	@ (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a21e:	4313      	orrs	r3, r2
 800a220:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a222:	4b27      	ldr	r3, [pc, #156]	@ (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a226:	4a26      	ldr	r2, [pc, #152]	@ (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a228:	f023 0310 	bic.w	r3, r3, #16
 800a22c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a22e:	4b24      	ldr	r3, [pc, #144]	@ (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a230:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a232:	4b24      	ldr	r3, [pc, #144]	@ (800a2c4 <RCCEx_PLL2_Config+0x160>)
 800a234:	4013      	ands	r3, r2
 800a236:	687a      	ldr	r2, [r7, #4]
 800a238:	69d2      	ldr	r2, [r2, #28]
 800a23a:	00d2      	lsls	r2, r2, #3
 800a23c:	4920      	ldr	r1, [pc, #128]	@ (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a23e:	4313      	orrs	r3, r2
 800a240:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a242:	4b1f      	ldr	r3, [pc, #124]	@ (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a246:	4a1e      	ldr	r2, [pc, #120]	@ (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a248:	f043 0310 	orr.w	r3, r3, #16
 800a24c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d106      	bne.n	800a262 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a254:	4b1a      	ldr	r3, [pc, #104]	@ (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a258:	4a19      	ldr	r2, [pc, #100]	@ (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a25a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a25e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a260:	e00f      	b.n	800a282 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	2b01      	cmp	r3, #1
 800a266:	d106      	bne.n	800a276 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a268:	4b15      	ldr	r3, [pc, #84]	@ (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a26a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a26c:	4a14      	ldr	r2, [pc, #80]	@ (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a26e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a272:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a274:	e005      	b.n	800a282 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a276:	4b12      	ldr	r3, [pc, #72]	@ (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a27a:	4a11      	ldr	r2, [pc, #68]	@ (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a27c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a280:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a282:	4b0f      	ldr	r3, [pc, #60]	@ (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a0e      	ldr	r2, [pc, #56]	@ (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a288:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a28c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a28e:	f7f7 ff3b 	bl	8002108 <HAL_GetTick>
 800a292:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a294:	e008      	b.n	800a2a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a296:	f7f7 ff37 	bl	8002108 <HAL_GetTick>
 800a29a:	4602      	mov	r2, r0
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	1ad3      	subs	r3, r2, r3
 800a2a0:	2b02      	cmp	r3, #2
 800a2a2:	d901      	bls.n	800a2a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	e006      	b.n	800a2b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a2a8:	4b05      	ldr	r3, [pc, #20]	@ (800a2c0 <RCCEx_PLL2_Config+0x15c>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d0f0      	beq.n	800a296 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	58024400 	.word	0x58024400
 800a2c4:	ffff0007 	.word	0xffff0007

0800a2c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a2d6:	4b53      	ldr	r3, [pc, #332]	@ (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a2d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2da:	f003 0303 	and.w	r3, r3, #3
 800a2de:	2b03      	cmp	r3, #3
 800a2e0:	d101      	bne.n	800a2e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e099      	b.n	800a41a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a2e6:	4b4f      	ldr	r3, [pc, #316]	@ (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a4e      	ldr	r2, [pc, #312]	@ (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a2ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a2f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2f2:	f7f7 ff09 	bl	8002108 <HAL_GetTick>
 800a2f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a2f8:	e008      	b.n	800a30c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a2fa:	f7f7 ff05 	bl	8002108 <HAL_GetTick>
 800a2fe:	4602      	mov	r2, r0
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	1ad3      	subs	r3, r2, r3
 800a304:	2b02      	cmp	r3, #2
 800a306:	d901      	bls.n	800a30c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a308:	2303      	movs	r3, #3
 800a30a:	e086      	b.n	800a41a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a30c:	4b45      	ldr	r3, [pc, #276]	@ (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1f0      	bne.n	800a2fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a318:	4b42      	ldr	r3, [pc, #264]	@ (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a31a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a31c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	051b      	lsls	r3, r3, #20
 800a326:	493f      	ldr	r1, [pc, #252]	@ (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a328:	4313      	orrs	r3, r2
 800a32a:	628b      	str	r3, [r1, #40]	@ 0x28
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	3b01      	subs	r3, #1
 800a332:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	3b01      	subs	r3, #1
 800a33c:	025b      	lsls	r3, r3, #9
 800a33e:	b29b      	uxth	r3, r3
 800a340:	431a      	orrs	r2, r3
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	3b01      	subs	r3, #1
 800a348:	041b      	lsls	r3, r3, #16
 800a34a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a34e:	431a      	orrs	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	3b01      	subs	r3, #1
 800a356:	061b      	lsls	r3, r3, #24
 800a358:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a35c:	4931      	ldr	r1, [pc, #196]	@ (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a35e:	4313      	orrs	r3, r2
 800a360:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a362:	4b30      	ldr	r3, [pc, #192]	@ (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a366:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	695b      	ldr	r3, [r3, #20]
 800a36e:	492d      	ldr	r1, [pc, #180]	@ (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a370:	4313      	orrs	r3, r2
 800a372:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a374:	4b2b      	ldr	r3, [pc, #172]	@ (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a378:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	699b      	ldr	r3, [r3, #24]
 800a380:	4928      	ldr	r1, [pc, #160]	@ (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a382:	4313      	orrs	r3, r2
 800a384:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a386:	4b27      	ldr	r3, [pc, #156]	@ (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a38a:	4a26      	ldr	r2, [pc, #152]	@ (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a38c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a390:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a392:	4b24      	ldr	r3, [pc, #144]	@ (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a394:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a396:	4b24      	ldr	r3, [pc, #144]	@ (800a428 <RCCEx_PLL3_Config+0x160>)
 800a398:	4013      	ands	r3, r2
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	69d2      	ldr	r2, [r2, #28]
 800a39e:	00d2      	lsls	r2, r2, #3
 800a3a0:	4920      	ldr	r1, [pc, #128]	@ (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a3a6:	4b1f      	ldr	r3, [pc, #124]	@ (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a3a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3aa:	4a1e      	ldr	r2, [pc, #120]	@ (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a3ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a3b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d106      	bne.n	800a3c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a3b8:	4b1a      	ldr	r3, [pc, #104]	@ (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3bc:	4a19      	ldr	r2, [pc, #100]	@ (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a3be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a3c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a3c4:	e00f      	b.n	800a3e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d106      	bne.n	800a3da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a3cc:	4b15      	ldr	r3, [pc, #84]	@ (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a3ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3d0:	4a14      	ldr	r2, [pc, #80]	@ (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a3d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a3d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a3d8:	e005      	b.n	800a3e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a3da:	4b12      	ldr	r3, [pc, #72]	@ (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a3dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3de:	4a11      	ldr	r2, [pc, #68]	@ (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a3e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a3e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a3e6:	4b0f      	ldr	r3, [pc, #60]	@ (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a0e      	ldr	r2, [pc, #56]	@ (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a3ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3f2:	f7f7 fe89 	bl	8002108 <HAL_GetTick>
 800a3f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a3f8:	e008      	b.n	800a40c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a3fa:	f7f7 fe85 	bl	8002108 <HAL_GetTick>
 800a3fe:	4602      	mov	r2, r0
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	1ad3      	subs	r3, r2, r3
 800a404:	2b02      	cmp	r3, #2
 800a406:	d901      	bls.n	800a40c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a408:	2303      	movs	r3, #3
 800a40a:	e006      	b.n	800a41a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a40c:	4b05      	ldr	r3, [pc, #20]	@ (800a424 <RCCEx_PLL3_Config+0x15c>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a414:	2b00      	cmp	r3, #0
 800a416:	d0f0      	beq.n	800a3fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a418:	7bfb      	ldrb	r3, [r7, #15]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	58024400 	.word	0x58024400
 800a428:	ffff0007 	.word	0xffff0007

0800a42c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d101      	bne.n	800a43e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	e049      	b.n	800a4d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a444:	b2db      	uxtb	r3, r3
 800a446:	2b00      	cmp	r3, #0
 800a448:	d106      	bne.n	800a458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 f841 	bl	800a4da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2202      	movs	r2, #2
 800a45c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	3304      	adds	r3, #4
 800a468:	4619      	mov	r1, r3
 800a46a:	4610      	mov	r0, r2
 800a46c:	f000 f9e8 	bl	800a840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2201      	movs	r2, #1
 800a474:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2201      	movs	r2, #1
 800a47c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2201      	movs	r2, #1
 800a484:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2201      	movs	r2, #1
 800a494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3708      	adds	r7, #8
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a4da:	b480      	push	{r7}
 800a4dc:	b083      	sub	sp, #12
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a4e2:	bf00      	nop
 800a4e4:	370c      	adds	r7, #12
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr
	...

0800a4f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b085      	sub	sp, #20
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	2b01      	cmp	r3, #1
 800a502:	d001      	beq.n	800a508 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a504:	2301      	movs	r3, #1
 800a506:	e054      	b.n	800a5b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2202      	movs	r2, #2
 800a50c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	68da      	ldr	r2, [r3, #12]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f042 0201 	orr.w	r2, r2, #1
 800a51e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a26      	ldr	r2, [pc, #152]	@ (800a5c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d022      	beq.n	800a570 <HAL_TIM_Base_Start_IT+0x80>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a532:	d01d      	beq.n	800a570 <HAL_TIM_Base_Start_IT+0x80>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a22      	ldr	r2, [pc, #136]	@ (800a5c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d018      	beq.n	800a570 <HAL_TIM_Base_Start_IT+0x80>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a21      	ldr	r2, [pc, #132]	@ (800a5c8 <HAL_TIM_Base_Start_IT+0xd8>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d013      	beq.n	800a570 <HAL_TIM_Base_Start_IT+0x80>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a1f      	ldr	r2, [pc, #124]	@ (800a5cc <HAL_TIM_Base_Start_IT+0xdc>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d00e      	beq.n	800a570 <HAL_TIM_Base_Start_IT+0x80>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a1e      	ldr	r2, [pc, #120]	@ (800a5d0 <HAL_TIM_Base_Start_IT+0xe0>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d009      	beq.n	800a570 <HAL_TIM_Base_Start_IT+0x80>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a1c      	ldr	r2, [pc, #112]	@ (800a5d4 <HAL_TIM_Base_Start_IT+0xe4>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d004      	beq.n	800a570 <HAL_TIM_Base_Start_IT+0x80>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a1b      	ldr	r2, [pc, #108]	@ (800a5d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d115      	bne.n	800a59c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	689a      	ldr	r2, [r3, #8]
 800a576:	4b19      	ldr	r3, [pc, #100]	@ (800a5dc <HAL_TIM_Base_Start_IT+0xec>)
 800a578:	4013      	ands	r3, r2
 800a57a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2b06      	cmp	r3, #6
 800a580:	d015      	beq.n	800a5ae <HAL_TIM_Base_Start_IT+0xbe>
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a588:	d011      	beq.n	800a5ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f042 0201 	orr.w	r2, r2, #1
 800a598:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a59a:	e008      	b.n	800a5ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f042 0201 	orr.w	r2, r2, #1
 800a5aa:	601a      	str	r2, [r3, #0]
 800a5ac:	e000      	b.n	800a5b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3714      	adds	r7, #20
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop
 800a5c0:	40010000 	.word	0x40010000
 800a5c4:	40000400 	.word	0x40000400
 800a5c8:	40000800 	.word	0x40000800
 800a5cc:	40000c00 	.word	0x40000c00
 800a5d0:	40010400 	.word	0x40010400
 800a5d4:	40001800 	.word	0x40001800
 800a5d8:	40014000 	.word	0x40014000
 800a5dc:	00010007 	.word	0x00010007

0800a5e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	68db      	ldr	r3, [r3, #12]
 800a5ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	691b      	ldr	r3, [r3, #16]
 800a5f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	f003 0302 	and.w	r3, r3, #2
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d020      	beq.n	800a644 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f003 0302 	and.w	r3, r3, #2
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d01b      	beq.n	800a644 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f06f 0202 	mvn.w	r2, #2
 800a614:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2201      	movs	r2, #1
 800a61a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	699b      	ldr	r3, [r3, #24]
 800a622:	f003 0303 	and.w	r3, r3, #3
 800a626:	2b00      	cmp	r3, #0
 800a628:	d003      	beq.n	800a632 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 f8e9 	bl	800a802 <HAL_TIM_IC_CaptureCallback>
 800a630:	e005      	b.n	800a63e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 f8db 	bl	800a7ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 f8ec 	bl	800a816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	f003 0304 	and.w	r3, r3, #4
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d020      	beq.n	800a690 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f003 0304 	and.w	r3, r3, #4
 800a654:	2b00      	cmp	r3, #0
 800a656:	d01b      	beq.n	800a690 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f06f 0204 	mvn.w	r2, #4
 800a660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2202      	movs	r2, #2
 800a666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	699b      	ldr	r3, [r3, #24]
 800a66e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a672:	2b00      	cmp	r3, #0
 800a674:	d003      	beq.n	800a67e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f8c3 	bl	800a802 <HAL_TIM_IC_CaptureCallback>
 800a67c:	e005      	b.n	800a68a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f8b5 	bl	800a7ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 f8c6 	bl	800a816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	f003 0308 	and.w	r3, r3, #8
 800a696:	2b00      	cmp	r3, #0
 800a698:	d020      	beq.n	800a6dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f003 0308 	and.w	r3, r3, #8
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d01b      	beq.n	800a6dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f06f 0208 	mvn.w	r2, #8
 800a6ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2204      	movs	r2, #4
 800a6b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	69db      	ldr	r3, [r3, #28]
 800a6ba:	f003 0303 	and.w	r3, r3, #3
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d003      	beq.n	800a6ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 f89d 	bl	800a802 <HAL_TIM_IC_CaptureCallback>
 800a6c8:	e005      	b.n	800a6d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 f88f 	bl	800a7ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 f8a0 	bl	800a816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	f003 0310 	and.w	r3, r3, #16
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d020      	beq.n	800a728 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f003 0310 	and.w	r3, r3, #16
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d01b      	beq.n	800a728 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f06f 0210 	mvn.w	r2, #16
 800a6f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2208      	movs	r2, #8
 800a6fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	69db      	ldr	r3, [r3, #28]
 800a706:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d003      	beq.n	800a716 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 f877 	bl	800a802 <HAL_TIM_IC_CaptureCallback>
 800a714:	e005      	b.n	800a722 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 f869 	bl	800a7ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 f87a 	bl	800a816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2200      	movs	r2, #0
 800a726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	f003 0301 	and.w	r3, r3, #1
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d00c      	beq.n	800a74c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f003 0301 	and.w	r3, r3, #1
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d007      	beq.n	800a74c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f06f 0201 	mvn.w	r2, #1
 800a744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f7f6 fcc6 	bl	80010d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a752:	2b00      	cmp	r3, #0
 800a754:	d104      	bne.n	800a760 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d00c      	beq.n	800a77a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a766:	2b00      	cmp	r3, #0
 800a768:	d007      	beq.n	800a77a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 f913 	bl	800a9a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a780:	2b00      	cmp	r3, #0
 800a782:	d00c      	beq.n	800a79e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d007      	beq.n	800a79e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 f90b 	bl	800a9b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d00c      	beq.n	800a7c2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d007      	beq.n	800a7c2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a7ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 f834 	bl	800a82a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	f003 0320 	and.w	r3, r3, #32
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d00c      	beq.n	800a7e6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f003 0320 	and.w	r3, r3, #32
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d007      	beq.n	800a7e6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f06f 0220 	mvn.w	r2, #32
 800a7de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 f8d3 	bl	800a98c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a7e6:	bf00      	nop
 800a7e8:	3710      	adds	r7, #16
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a7ee:	b480      	push	{r7}
 800a7f0:	b083      	sub	sp, #12
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a7f6:	bf00      	nop
 800a7f8:	370c      	adds	r7, #12
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr

0800a802 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a802:	b480      	push	{r7}
 800a804:	b083      	sub	sp, #12
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a80a:	bf00      	nop
 800a80c:	370c      	adds	r7, #12
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr

0800a816 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a816:	b480      	push	{r7}
 800a818:	b083      	sub	sp, #12
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a81e:	bf00      	nop
 800a820:	370c      	adds	r7, #12
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr

0800a82a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a82a:	b480      	push	{r7}
 800a82c:	b083      	sub	sp, #12
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a832:	bf00      	nop
 800a834:	370c      	adds	r7, #12
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr
	...

0800a840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a840:	b480      	push	{r7}
 800a842:	b085      	sub	sp, #20
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4a46      	ldr	r2, [pc, #280]	@ (800a96c <TIM_Base_SetConfig+0x12c>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d013      	beq.n	800a880 <TIM_Base_SetConfig+0x40>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a85e:	d00f      	beq.n	800a880 <TIM_Base_SetConfig+0x40>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	4a43      	ldr	r2, [pc, #268]	@ (800a970 <TIM_Base_SetConfig+0x130>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d00b      	beq.n	800a880 <TIM_Base_SetConfig+0x40>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	4a42      	ldr	r2, [pc, #264]	@ (800a974 <TIM_Base_SetConfig+0x134>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d007      	beq.n	800a880 <TIM_Base_SetConfig+0x40>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	4a41      	ldr	r2, [pc, #260]	@ (800a978 <TIM_Base_SetConfig+0x138>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d003      	beq.n	800a880 <TIM_Base_SetConfig+0x40>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	4a40      	ldr	r2, [pc, #256]	@ (800a97c <TIM_Base_SetConfig+0x13c>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d108      	bne.n	800a892 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	68fa      	ldr	r2, [r7, #12]
 800a88e:	4313      	orrs	r3, r2
 800a890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4a35      	ldr	r2, [pc, #212]	@ (800a96c <TIM_Base_SetConfig+0x12c>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d01f      	beq.n	800a8da <TIM_Base_SetConfig+0x9a>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8a0:	d01b      	beq.n	800a8da <TIM_Base_SetConfig+0x9a>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	4a32      	ldr	r2, [pc, #200]	@ (800a970 <TIM_Base_SetConfig+0x130>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d017      	beq.n	800a8da <TIM_Base_SetConfig+0x9a>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	4a31      	ldr	r2, [pc, #196]	@ (800a974 <TIM_Base_SetConfig+0x134>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d013      	beq.n	800a8da <TIM_Base_SetConfig+0x9a>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	4a30      	ldr	r2, [pc, #192]	@ (800a978 <TIM_Base_SetConfig+0x138>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d00f      	beq.n	800a8da <TIM_Base_SetConfig+0x9a>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	4a2f      	ldr	r2, [pc, #188]	@ (800a97c <TIM_Base_SetConfig+0x13c>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d00b      	beq.n	800a8da <TIM_Base_SetConfig+0x9a>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	4a2e      	ldr	r2, [pc, #184]	@ (800a980 <TIM_Base_SetConfig+0x140>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d007      	beq.n	800a8da <TIM_Base_SetConfig+0x9a>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	4a2d      	ldr	r2, [pc, #180]	@ (800a984 <TIM_Base_SetConfig+0x144>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d003      	beq.n	800a8da <TIM_Base_SetConfig+0x9a>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	4a2c      	ldr	r2, [pc, #176]	@ (800a988 <TIM_Base_SetConfig+0x148>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d108      	bne.n	800a8ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a8e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	695b      	ldr	r3, [r3, #20]
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	689a      	ldr	r2, [r3, #8]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a16      	ldr	r2, [pc, #88]	@ (800a96c <TIM_Base_SetConfig+0x12c>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d00f      	beq.n	800a938 <TIM_Base_SetConfig+0xf8>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4a18      	ldr	r2, [pc, #96]	@ (800a97c <TIM_Base_SetConfig+0x13c>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d00b      	beq.n	800a938 <TIM_Base_SetConfig+0xf8>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	4a17      	ldr	r2, [pc, #92]	@ (800a980 <TIM_Base_SetConfig+0x140>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d007      	beq.n	800a938 <TIM_Base_SetConfig+0xf8>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4a16      	ldr	r2, [pc, #88]	@ (800a984 <TIM_Base_SetConfig+0x144>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d003      	beq.n	800a938 <TIM_Base_SetConfig+0xf8>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	4a15      	ldr	r2, [pc, #84]	@ (800a988 <TIM_Base_SetConfig+0x148>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d103      	bne.n	800a940 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	691a      	ldr	r2, [r3, #16]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2201      	movs	r2, #1
 800a944:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	691b      	ldr	r3, [r3, #16]
 800a94a:	f003 0301 	and.w	r3, r3, #1
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d105      	bne.n	800a95e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	691b      	ldr	r3, [r3, #16]
 800a956:	f023 0201 	bic.w	r2, r3, #1
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	611a      	str	r2, [r3, #16]
  }
}
 800a95e:	bf00      	nop
 800a960:	3714      	adds	r7, #20
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	40010000 	.word	0x40010000
 800a970:	40000400 	.word	0x40000400
 800a974:	40000800 	.word	0x40000800
 800a978:	40000c00 	.word	0x40000c00
 800a97c:	40010400 	.word	0x40010400
 800a980:	40014000 	.word	0x40014000
 800a984:	40014400 	.word	0x40014400
 800a988:	40014800 	.word	0x40014800

0800a98c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a994:	bf00      	nop
 800a996:	370c      	adds	r7, #12
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a9a8:	bf00      	nop
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a9bc:	bf00      	nop
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d101      	bne.n	800a9da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e042      	b.n	800aa60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d106      	bne.n	800a9f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f7f7 f84f 	bl	8001a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2224      	movs	r2, #36	@ 0x24
 800a9f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	681a      	ldr	r2, [r3, #0]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f022 0201 	bic.w	r2, r2, #1
 800aa08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d002      	beq.n	800aa18 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f001 fa4a 	bl	800beac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 fcdf 	bl	800b3dc <UART_SetConfig>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d101      	bne.n	800aa28 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aa24:	2301      	movs	r3, #1
 800aa26:	e01b      	b.n	800aa60 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	685a      	ldr	r2, [r3, #4]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aa36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	689a      	ldr	r2, [r3, #8]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aa46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f042 0201 	orr.w	r2, r2, #1
 800aa56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f001 fac9 	bl	800bff0 <UART_CheckIdleState>
 800aa5e:	4603      	mov	r3, r0
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3708      	adds	r7, #8
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b08a      	sub	sp, #40	@ 0x28
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	4613      	mov	r3, r2
 800aa74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa7c:	2b20      	cmp	r3, #32
 800aa7e:	d167      	bne.n	800ab50 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d002      	beq.n	800aa8c <HAL_UART_Transmit_DMA+0x24>
 800aa86:	88fb      	ldrh	r3, [r7, #6]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d101      	bne.n	800aa90 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	e060      	b.n	800ab52 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	68ba      	ldr	r2, [r7, #8]
 800aa94:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	88fa      	ldrh	r2, [r7, #6]
 800aa9a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	88fa      	ldrh	r2, [r7, #6]
 800aaa2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2221      	movs	r2, #33	@ 0x21
 800aab2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d028      	beq.n	800ab10 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aac2:	4a26      	ldr	r2, [pc, #152]	@ (800ab5c <HAL_UART_Transmit_DMA+0xf4>)
 800aac4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aaca:	4a25      	ldr	r2, [pc, #148]	@ (800ab60 <HAL_UART_Transmit_DMA+0xf8>)
 800aacc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aad2:	4a24      	ldr	r2, [pc, #144]	@ (800ab64 <HAL_UART_Transmit_DMA+0xfc>)
 800aad4:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aada:	2200      	movs	r2, #0
 800aadc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aae6:	4619      	mov	r1, r3
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	3328      	adds	r3, #40	@ 0x28
 800aaee:	461a      	mov	r2, r3
 800aaf0:	88fb      	ldrh	r3, [r7, #6]
 800aaf2:	f7f9 fa77 	bl	8003fe4 <HAL_DMA_Start_IT>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d009      	beq.n	800ab10 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2210      	movs	r2, #16
 800ab00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2220      	movs	r2, #32
 800ab08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	e020      	b.n	800ab52 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2240      	movs	r2, #64	@ 0x40
 800ab16:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	3308      	adds	r3, #8
 800ab1e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	e853 3f00 	ldrex	r3, [r3]
 800ab26:	613b      	str	r3, [r7, #16]
   return(result);
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab2e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	3308      	adds	r3, #8
 800ab36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab38:	623a      	str	r2, [r7, #32]
 800ab3a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab3c:	69f9      	ldr	r1, [r7, #28]
 800ab3e:	6a3a      	ldr	r2, [r7, #32]
 800ab40:	e841 2300 	strex	r3, r2, [r1]
 800ab44:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d1e5      	bne.n	800ab18 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	e000      	b.n	800ab52 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800ab50:	2302      	movs	r3, #2
  }
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3728      	adds	r7, #40	@ 0x28
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	0800c4bd 	.word	0x0800c4bd
 800ab60:	0800c553 	.word	0x0800c553
 800ab64:	0800c6d5 	.word	0x0800c6d5

0800ab68 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b08a      	sub	sp, #40	@ 0x28
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	60b9      	str	r1, [r7, #8]
 800ab72:	4613      	mov	r3, r2
 800ab74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab7c:	2b20      	cmp	r3, #32
 800ab7e:	d137      	bne.n	800abf0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d002      	beq.n	800ab8c <HAL_UART_Receive_DMA+0x24>
 800ab86:	88fb      	ldrh	r3, [r7, #6]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d101      	bne.n	800ab90 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e030      	b.n	800abf2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2200      	movs	r2, #0
 800ab94:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4a18      	ldr	r2, [pc, #96]	@ (800abfc <HAL_UART_Receive_DMA+0x94>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d01f      	beq.n	800abe0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d018      	beq.n	800abe0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	e853 3f00 	ldrex	r3, [r3]
 800abba:	613b      	str	r3, [r7, #16]
   return(result);
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800abc2:	627b      	str	r3, [r7, #36]	@ 0x24
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	461a      	mov	r2, r3
 800abca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abcc:	623b      	str	r3, [r7, #32]
 800abce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abd0:	69f9      	ldr	r1, [r7, #28]
 800abd2:	6a3a      	ldr	r2, [r7, #32]
 800abd4:	e841 2300 	strex	r3, r2, [r1]
 800abd8:	61bb      	str	r3, [r7, #24]
   return(result);
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d1e6      	bne.n	800abae <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800abe0:	88fb      	ldrh	r3, [r7, #6]
 800abe2:	461a      	mov	r2, r3
 800abe4:	68b9      	ldr	r1, [r7, #8]
 800abe6:	68f8      	ldr	r0, [r7, #12]
 800abe8:	f001 fb1a 	bl	800c220 <UART_Start_Receive_DMA>
 800abec:	4603      	mov	r3, r0
 800abee:	e000      	b.n	800abf2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800abf0:	2302      	movs	r3, #2
  }
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3728      	adds	r7, #40	@ 0x28
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	58000c00 	.word	0x58000c00

0800ac00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b0ba      	sub	sp, #232	@ 0xe8
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	69db      	ldr	r3, [r3, #28]
 800ac0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ac26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ac2a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ac2e:	4013      	ands	r3, r2
 800ac30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ac34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d11b      	bne.n	800ac74 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ac3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac40:	f003 0320 	and.w	r3, r3, #32
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d015      	beq.n	800ac74 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ac48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac4c:	f003 0320 	and.w	r3, r3, #32
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d105      	bne.n	800ac60 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ac54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d009      	beq.n	800ac74 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f000 8377 	beq.w	800b358 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	4798      	blx	r3
      }
      return;
 800ac72:	e371      	b.n	800b358 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ac74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	f000 8123 	beq.w	800aec4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ac7e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ac82:	4b8d      	ldr	r3, [pc, #564]	@ (800aeb8 <HAL_UART_IRQHandler+0x2b8>)
 800ac84:	4013      	ands	r3, r2
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d106      	bne.n	800ac98 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ac8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ac8e:	4b8b      	ldr	r3, [pc, #556]	@ (800aebc <HAL_UART_IRQHandler+0x2bc>)
 800ac90:	4013      	ands	r3, r2
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	f000 8116 	beq.w	800aec4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ac98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac9c:	f003 0301 	and.w	r3, r3, #1
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d011      	beq.n	800acc8 <HAL_UART_IRQHandler+0xc8>
 800aca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acac:	2b00      	cmp	r3, #0
 800acae:	d00b      	beq.n	800acc8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2201      	movs	r2, #1
 800acb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acbe:	f043 0201 	orr.w	r2, r3, #1
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800acc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800accc:	f003 0302 	and.w	r3, r3, #2
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d011      	beq.n	800acf8 <HAL_UART_IRQHandler+0xf8>
 800acd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800acd8:	f003 0301 	and.w	r3, r3, #1
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d00b      	beq.n	800acf8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2202      	movs	r2, #2
 800ace6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acee:	f043 0204 	orr.w	r2, r3, #4
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800acf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acfc:	f003 0304 	and.w	r3, r3, #4
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d011      	beq.n	800ad28 <HAL_UART_IRQHandler+0x128>
 800ad04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad08:	f003 0301 	and.w	r3, r3, #1
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d00b      	beq.n	800ad28 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2204      	movs	r2, #4
 800ad16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad1e:	f043 0202 	orr.w	r2, r3, #2
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ad28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad2c:	f003 0308 	and.w	r3, r3, #8
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d017      	beq.n	800ad64 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ad34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad38:	f003 0320 	and.w	r3, r3, #32
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d105      	bne.n	800ad4c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ad40:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ad44:	4b5c      	ldr	r3, [pc, #368]	@ (800aeb8 <HAL_UART_IRQHandler+0x2b8>)
 800ad46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00b      	beq.n	800ad64 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	2208      	movs	r2, #8
 800ad52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad5a:	f043 0208 	orr.w	r2, r3, #8
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ad64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d012      	beq.n	800ad96 <HAL_UART_IRQHandler+0x196>
 800ad70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d00c      	beq.n	800ad96 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ad84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad8c:	f043 0220 	orr.w	r2, r3, #32
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	f000 82dd 	beq.w	800b35c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ada2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ada6:	f003 0320 	and.w	r3, r3, #32
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d013      	beq.n	800add6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800adae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800adb2:	f003 0320 	and.w	r3, r3, #32
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d105      	bne.n	800adc6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800adba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800adbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d007      	beq.n	800add6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d003      	beq.n	800add6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800addc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	689b      	ldr	r3, [r3, #8]
 800ade6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adea:	2b40      	cmp	r3, #64	@ 0x40
 800adec:	d005      	beq.n	800adfa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800adee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800adf2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d054      	beq.n	800aea4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f001 faf8 	bl	800c3f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae0a:	2b40      	cmp	r3, #64	@ 0x40
 800ae0c:	d146      	bne.n	800ae9c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	3308      	adds	r3, #8
 800ae14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ae1c:	e853 3f00 	ldrex	r3, [r3]
 800ae20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ae24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ae28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	3308      	adds	r3, #8
 800ae36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ae3a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ae3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ae46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ae4a:	e841 2300 	strex	r3, r2, [r1]
 800ae4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ae52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d1d9      	bne.n	800ae0e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d017      	beq.n	800ae94 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae6a:	4a15      	ldr	r2, [pc, #84]	@ (800aec0 <HAL_UART_IRQHandler+0x2c0>)
 800ae6c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae74:	4618      	mov	r0, r3
 800ae76:	f7f9 fe3d 	bl	8004af4 <HAL_DMA_Abort_IT>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d019      	beq.n	800aeb4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ae8e:	4610      	mov	r0, r2
 800ae90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae92:	e00f      	b.n	800aeb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 fa8b 	bl	800b3b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae9a:	e00b      	b.n	800aeb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 fa87 	bl	800b3b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aea2:	e007      	b.n	800aeb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 fa83 	bl	800b3b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2200      	movs	r2, #0
 800aeae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800aeb2:	e253      	b.n	800b35c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aeb4:	bf00      	nop
    return;
 800aeb6:	e251      	b.n	800b35c <HAL_UART_IRQHandler+0x75c>
 800aeb8:	10000001 	.word	0x10000001
 800aebc:	04000120 	.word	0x04000120
 800aec0:	0800c755 	.word	0x0800c755

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	f040 81e7 	bne.w	800b29c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800aece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aed2:	f003 0310 	and.w	r3, r3, #16
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	f000 81e0 	beq.w	800b29c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800aedc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aee0:	f003 0310 	and.w	r3, r3, #16
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	f000 81d9 	beq.w	800b29c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	2210      	movs	r2, #16
 800aef0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aefc:	2b40      	cmp	r3, #64	@ 0x40
 800aefe:	f040 8151 	bne.w	800b1a4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a96      	ldr	r2, [pc, #600]	@ (800b164 <HAL_UART_IRQHandler+0x564>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d068      	beq.n	800afe2 <HAL_UART_IRQHandler+0x3e2>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a93      	ldr	r2, [pc, #588]	@ (800b168 <HAL_UART_IRQHandler+0x568>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d061      	beq.n	800afe2 <HAL_UART_IRQHandler+0x3e2>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4a91      	ldr	r2, [pc, #580]	@ (800b16c <HAL_UART_IRQHandler+0x56c>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d05a      	beq.n	800afe2 <HAL_UART_IRQHandler+0x3e2>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a8e      	ldr	r2, [pc, #568]	@ (800b170 <HAL_UART_IRQHandler+0x570>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d053      	beq.n	800afe2 <HAL_UART_IRQHandler+0x3e2>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4a8c      	ldr	r2, [pc, #560]	@ (800b174 <HAL_UART_IRQHandler+0x574>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d04c      	beq.n	800afe2 <HAL_UART_IRQHandler+0x3e2>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a89      	ldr	r2, [pc, #548]	@ (800b178 <HAL_UART_IRQHandler+0x578>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d045      	beq.n	800afe2 <HAL_UART_IRQHandler+0x3e2>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a87      	ldr	r2, [pc, #540]	@ (800b17c <HAL_UART_IRQHandler+0x57c>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d03e      	beq.n	800afe2 <HAL_UART_IRQHandler+0x3e2>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a84      	ldr	r2, [pc, #528]	@ (800b180 <HAL_UART_IRQHandler+0x580>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d037      	beq.n	800afe2 <HAL_UART_IRQHandler+0x3e2>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4a82      	ldr	r2, [pc, #520]	@ (800b184 <HAL_UART_IRQHandler+0x584>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d030      	beq.n	800afe2 <HAL_UART_IRQHandler+0x3e2>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4a7f      	ldr	r2, [pc, #508]	@ (800b188 <HAL_UART_IRQHandler+0x588>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d029      	beq.n	800afe2 <HAL_UART_IRQHandler+0x3e2>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4a7d      	ldr	r2, [pc, #500]	@ (800b18c <HAL_UART_IRQHandler+0x58c>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d022      	beq.n	800afe2 <HAL_UART_IRQHandler+0x3e2>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a7a      	ldr	r2, [pc, #488]	@ (800b190 <HAL_UART_IRQHandler+0x590>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d01b      	beq.n	800afe2 <HAL_UART_IRQHandler+0x3e2>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a78      	ldr	r2, [pc, #480]	@ (800b194 <HAL_UART_IRQHandler+0x594>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d014      	beq.n	800afe2 <HAL_UART_IRQHandler+0x3e2>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a75      	ldr	r2, [pc, #468]	@ (800b198 <HAL_UART_IRQHandler+0x598>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d00d      	beq.n	800afe2 <HAL_UART_IRQHandler+0x3e2>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a73      	ldr	r2, [pc, #460]	@ (800b19c <HAL_UART_IRQHandler+0x59c>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d006      	beq.n	800afe2 <HAL_UART_IRQHandler+0x3e2>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a70      	ldr	r2, [pc, #448]	@ (800b1a0 <HAL_UART_IRQHandler+0x5a0>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d106      	bne.n	800aff0 <HAL_UART_IRQHandler+0x3f0>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	b29b      	uxth	r3, r3
 800afee:	e005      	b.n	800affc <HAL_UART_IRQHandler+0x3fc>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	b29b      	uxth	r3, r3
 800affc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b000:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b004:	2b00      	cmp	r3, #0
 800b006:	f000 81ab 	beq.w	800b360 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b010:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b014:	429a      	cmp	r2, r3
 800b016:	f080 81a3 	bcs.w	800b360 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b020:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b02a:	69db      	ldr	r3, [r3, #28]
 800b02c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b030:	f000 8087 	beq.w	800b142 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b03c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b040:	e853 3f00 	ldrex	r3, [r3]
 800b044:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b048:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b04c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b050:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	461a      	mov	r2, r3
 800b05a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b05e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b062:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b066:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b06a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b06e:	e841 2300 	strex	r3, r2, [r1]
 800b072:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b076:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d1da      	bne.n	800b034 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	3308      	adds	r3, #8
 800b084:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b086:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b088:	e853 3f00 	ldrex	r3, [r3]
 800b08c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b08e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b090:	f023 0301 	bic.w	r3, r3, #1
 800b094:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	3308      	adds	r3, #8
 800b09e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b0a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b0a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b0aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b0ae:	e841 2300 	strex	r3, r2, [r1]
 800b0b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b0b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d1e1      	bne.n	800b07e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	3308      	adds	r3, #8
 800b0c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b0c4:	e853 3f00 	ldrex	r3, [r3]
 800b0c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b0ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b0cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b0d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	3308      	adds	r3, #8
 800b0da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b0de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b0e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b0e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b0e6:	e841 2300 	strex	r3, r2, [r1]
 800b0ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b0ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d1e3      	bne.n	800b0ba <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2220      	movs	r2, #32
 800b0f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b106:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b108:	e853 3f00 	ldrex	r3, [r3]
 800b10c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b10e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b110:	f023 0310 	bic.w	r3, r3, #16
 800b114:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	461a      	mov	r2, r3
 800b11e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b122:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b124:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b126:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b128:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b12a:	e841 2300 	strex	r3, r2, [r1]
 800b12e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b130:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b132:	2b00      	cmp	r3, #0
 800b134:	d1e4      	bne.n	800b100 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7f9 f9bb 	bl	80044b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2202      	movs	r2, #2
 800b146:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b154:	b29b      	uxth	r3, r3
 800b156:	1ad3      	subs	r3, r2, r3
 800b158:	b29b      	uxth	r3, r3
 800b15a:	4619      	mov	r1, r3
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 f931 	bl	800b3c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b162:	e0fd      	b.n	800b360 <HAL_UART_IRQHandler+0x760>
 800b164:	40020010 	.word	0x40020010
 800b168:	40020028 	.word	0x40020028
 800b16c:	40020040 	.word	0x40020040
 800b170:	40020058 	.word	0x40020058
 800b174:	40020070 	.word	0x40020070
 800b178:	40020088 	.word	0x40020088
 800b17c:	400200a0 	.word	0x400200a0
 800b180:	400200b8 	.word	0x400200b8
 800b184:	40020410 	.word	0x40020410
 800b188:	40020428 	.word	0x40020428
 800b18c:	40020440 	.word	0x40020440
 800b190:	40020458 	.word	0x40020458
 800b194:	40020470 	.word	0x40020470
 800b198:	40020488 	.word	0x40020488
 800b19c:	400204a0 	.word	0x400204a0
 800b1a0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	1ad3      	subs	r3, r2, r3
 800b1b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f000 80cf 	beq.w	800b364 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b1c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	f000 80ca 	beq.w	800b364 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1d8:	e853 3f00 	ldrex	r3, [r3]
 800b1dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b1de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b1e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b1f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1f4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b1f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b1fa:	e841 2300 	strex	r3, r2, [r1]
 800b1fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b202:	2b00      	cmp	r3, #0
 800b204:	d1e4      	bne.n	800b1d0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	3308      	adds	r3, #8
 800b20c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b210:	e853 3f00 	ldrex	r3, [r3]
 800b214:	623b      	str	r3, [r7, #32]
   return(result);
 800b216:	6a3a      	ldr	r2, [r7, #32]
 800b218:	4b55      	ldr	r3, [pc, #340]	@ (800b370 <HAL_UART_IRQHandler+0x770>)
 800b21a:	4013      	ands	r3, r2
 800b21c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	3308      	adds	r3, #8
 800b226:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b22a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b22c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b22e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b230:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b232:	e841 2300 	strex	r3, r2, [r1]
 800b236:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d1e3      	bne.n	800b206 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2220      	movs	r2, #32
 800b242:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2200      	movs	r2, #0
 800b250:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	e853 3f00 	ldrex	r3, [r3]
 800b25e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f023 0310 	bic.w	r3, r3, #16
 800b266:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	461a      	mov	r2, r3
 800b270:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b274:	61fb      	str	r3, [r7, #28]
 800b276:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b278:	69b9      	ldr	r1, [r7, #24]
 800b27a:	69fa      	ldr	r2, [r7, #28]
 800b27c:	e841 2300 	strex	r3, r2, [r1]
 800b280:	617b      	str	r3, [r7, #20]
   return(result);
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d1e4      	bne.n	800b252 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2202      	movs	r2, #2
 800b28c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b28e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b292:	4619      	mov	r1, r3
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 f895 	bl	800b3c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b29a:	e063      	b.n	800b364 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b29c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d00e      	beq.n	800b2c6 <HAL_UART_IRQHandler+0x6c6>
 800b2a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d008      	beq.n	800b2c6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b2bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f001 fa89 	bl	800c7d6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b2c4:	e051      	b.n	800b36a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b2c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d014      	beq.n	800b2fc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b2d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d105      	bne.n	800b2ea <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b2de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d008      	beq.n	800b2fc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d03a      	beq.n	800b368 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	4798      	blx	r3
    }
    return;
 800b2fa:	e035      	b.n	800b368 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b2fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b304:	2b00      	cmp	r3, #0
 800b306:	d009      	beq.n	800b31c <HAL_UART_IRQHandler+0x71c>
 800b308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b30c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b310:	2b00      	cmp	r3, #0
 800b312:	d003      	beq.n	800b31c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f001 fa33 	bl	800c780 <UART_EndTransmit_IT>
    return;
 800b31a:	e026      	b.n	800b36a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b31c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b320:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b324:	2b00      	cmp	r3, #0
 800b326:	d009      	beq.n	800b33c <HAL_UART_IRQHandler+0x73c>
 800b328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b32c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b330:	2b00      	cmp	r3, #0
 800b332:	d003      	beq.n	800b33c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f001 fa62 	bl	800c7fe <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b33a:	e016      	b.n	800b36a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b33c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b340:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b344:	2b00      	cmp	r3, #0
 800b346:	d010      	beq.n	800b36a <HAL_UART_IRQHandler+0x76a>
 800b348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	da0c      	bge.n	800b36a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f001 fa4a 	bl	800c7ea <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b356:	e008      	b.n	800b36a <HAL_UART_IRQHandler+0x76a>
      return;
 800b358:	bf00      	nop
 800b35a:	e006      	b.n	800b36a <HAL_UART_IRQHandler+0x76a>
    return;
 800b35c:	bf00      	nop
 800b35e:	e004      	b.n	800b36a <HAL_UART_IRQHandler+0x76a>
      return;
 800b360:	bf00      	nop
 800b362:	e002      	b.n	800b36a <HAL_UART_IRQHandler+0x76a>
      return;
 800b364:	bf00      	nop
 800b366:	e000      	b.n	800b36a <HAL_UART_IRQHandler+0x76a>
    return;
 800b368:	bf00      	nop
  }
}
 800b36a:	37e8      	adds	r7, #232	@ 0xe8
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	effffffe 	.word	0xeffffffe

0800b374 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b37c:	bf00      	nop
 800b37e:	370c      	adds	r7, #12
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b390:	bf00      	nop
 800b392:	370c      	adds	r7, #12
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr

0800b39c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b083      	sub	sp, #12
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b3a4:	bf00      	nop
 800b3a6:	370c      	adds	r7, #12
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr

0800b3b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b3b8:	bf00      	nop
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b3d0:	bf00      	nop
 800b3d2:	370c      	adds	r7, #12
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr

0800b3dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3e0:	b092      	sub	sp, #72	@ 0x48
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	689a      	ldr	r2, [r3, #8]
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	691b      	ldr	r3, [r3, #16]
 800b3f4:	431a      	orrs	r2, r3
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	695b      	ldr	r3, [r3, #20]
 800b3fa:	431a      	orrs	r2, r3
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	69db      	ldr	r3, [r3, #28]
 800b400:	4313      	orrs	r3, r2
 800b402:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	4bbe      	ldr	r3, [pc, #760]	@ (800b704 <UART_SetConfig+0x328>)
 800b40c:	4013      	ands	r3, r2
 800b40e:	697a      	ldr	r2, [r7, #20]
 800b410:	6812      	ldr	r2, [r2, #0]
 800b412:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b414:	430b      	orrs	r3, r1
 800b416:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	68da      	ldr	r2, [r3, #12]
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	430a      	orrs	r2, r1
 800b42c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	699b      	ldr	r3, [r3, #24]
 800b432:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4ab3      	ldr	r2, [pc, #716]	@ (800b708 <UART_SetConfig+0x32c>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d004      	beq.n	800b448 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	6a1b      	ldr	r3, [r3, #32]
 800b442:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b444:	4313      	orrs	r3, r2
 800b446:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	689a      	ldr	r2, [r3, #8]
 800b44e:	4baf      	ldr	r3, [pc, #700]	@ (800b70c <UART_SetConfig+0x330>)
 800b450:	4013      	ands	r3, r2
 800b452:	697a      	ldr	r2, [r7, #20]
 800b454:	6812      	ldr	r2, [r2, #0]
 800b456:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b458:	430b      	orrs	r3, r1
 800b45a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b462:	f023 010f 	bic.w	r1, r3, #15
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	430a      	orrs	r2, r1
 800b470:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4aa6      	ldr	r2, [pc, #664]	@ (800b710 <UART_SetConfig+0x334>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d177      	bne.n	800b56c <UART_SetConfig+0x190>
 800b47c:	4ba5      	ldr	r3, [pc, #660]	@ (800b714 <UART_SetConfig+0x338>)
 800b47e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b480:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b484:	2b28      	cmp	r3, #40	@ 0x28
 800b486:	d86d      	bhi.n	800b564 <UART_SetConfig+0x188>
 800b488:	a201      	add	r2, pc, #4	@ (adr r2, 800b490 <UART_SetConfig+0xb4>)
 800b48a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b48e:	bf00      	nop
 800b490:	0800b535 	.word	0x0800b535
 800b494:	0800b565 	.word	0x0800b565
 800b498:	0800b565 	.word	0x0800b565
 800b49c:	0800b565 	.word	0x0800b565
 800b4a0:	0800b565 	.word	0x0800b565
 800b4a4:	0800b565 	.word	0x0800b565
 800b4a8:	0800b565 	.word	0x0800b565
 800b4ac:	0800b565 	.word	0x0800b565
 800b4b0:	0800b53d 	.word	0x0800b53d
 800b4b4:	0800b565 	.word	0x0800b565
 800b4b8:	0800b565 	.word	0x0800b565
 800b4bc:	0800b565 	.word	0x0800b565
 800b4c0:	0800b565 	.word	0x0800b565
 800b4c4:	0800b565 	.word	0x0800b565
 800b4c8:	0800b565 	.word	0x0800b565
 800b4cc:	0800b565 	.word	0x0800b565
 800b4d0:	0800b545 	.word	0x0800b545
 800b4d4:	0800b565 	.word	0x0800b565
 800b4d8:	0800b565 	.word	0x0800b565
 800b4dc:	0800b565 	.word	0x0800b565
 800b4e0:	0800b565 	.word	0x0800b565
 800b4e4:	0800b565 	.word	0x0800b565
 800b4e8:	0800b565 	.word	0x0800b565
 800b4ec:	0800b565 	.word	0x0800b565
 800b4f0:	0800b54d 	.word	0x0800b54d
 800b4f4:	0800b565 	.word	0x0800b565
 800b4f8:	0800b565 	.word	0x0800b565
 800b4fc:	0800b565 	.word	0x0800b565
 800b500:	0800b565 	.word	0x0800b565
 800b504:	0800b565 	.word	0x0800b565
 800b508:	0800b565 	.word	0x0800b565
 800b50c:	0800b565 	.word	0x0800b565
 800b510:	0800b555 	.word	0x0800b555
 800b514:	0800b565 	.word	0x0800b565
 800b518:	0800b565 	.word	0x0800b565
 800b51c:	0800b565 	.word	0x0800b565
 800b520:	0800b565 	.word	0x0800b565
 800b524:	0800b565 	.word	0x0800b565
 800b528:	0800b565 	.word	0x0800b565
 800b52c:	0800b565 	.word	0x0800b565
 800b530:	0800b55d 	.word	0x0800b55d
 800b534:	2301      	movs	r3, #1
 800b536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b53a:	e222      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b53c:	2304      	movs	r3, #4
 800b53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b542:	e21e      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b544:	2308      	movs	r3, #8
 800b546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b54a:	e21a      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b54c:	2310      	movs	r3, #16
 800b54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b552:	e216      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b554:	2320      	movs	r3, #32
 800b556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b55a:	e212      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b55c:	2340      	movs	r3, #64	@ 0x40
 800b55e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b562:	e20e      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b564:	2380      	movs	r3, #128	@ 0x80
 800b566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b56a:	e20a      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a69      	ldr	r2, [pc, #420]	@ (800b718 <UART_SetConfig+0x33c>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d130      	bne.n	800b5d8 <UART_SetConfig+0x1fc>
 800b576:	4b67      	ldr	r3, [pc, #412]	@ (800b714 <UART_SetConfig+0x338>)
 800b578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b57a:	f003 0307 	and.w	r3, r3, #7
 800b57e:	2b05      	cmp	r3, #5
 800b580:	d826      	bhi.n	800b5d0 <UART_SetConfig+0x1f4>
 800b582:	a201      	add	r2, pc, #4	@ (adr r2, 800b588 <UART_SetConfig+0x1ac>)
 800b584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b588:	0800b5a1 	.word	0x0800b5a1
 800b58c:	0800b5a9 	.word	0x0800b5a9
 800b590:	0800b5b1 	.word	0x0800b5b1
 800b594:	0800b5b9 	.word	0x0800b5b9
 800b598:	0800b5c1 	.word	0x0800b5c1
 800b59c:	0800b5c9 	.word	0x0800b5c9
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5a6:	e1ec      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b5a8:	2304      	movs	r3, #4
 800b5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5ae:	e1e8      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b5b0:	2308      	movs	r3, #8
 800b5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5b6:	e1e4      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b5b8:	2310      	movs	r3, #16
 800b5ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5be:	e1e0      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b5c0:	2320      	movs	r3, #32
 800b5c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5c6:	e1dc      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b5c8:	2340      	movs	r3, #64	@ 0x40
 800b5ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5ce:	e1d8      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b5d0:	2380      	movs	r3, #128	@ 0x80
 800b5d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5d6:	e1d4      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a4f      	ldr	r2, [pc, #316]	@ (800b71c <UART_SetConfig+0x340>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d130      	bne.n	800b644 <UART_SetConfig+0x268>
 800b5e2:	4b4c      	ldr	r3, [pc, #304]	@ (800b714 <UART_SetConfig+0x338>)
 800b5e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5e6:	f003 0307 	and.w	r3, r3, #7
 800b5ea:	2b05      	cmp	r3, #5
 800b5ec:	d826      	bhi.n	800b63c <UART_SetConfig+0x260>
 800b5ee:	a201      	add	r2, pc, #4	@ (adr r2, 800b5f4 <UART_SetConfig+0x218>)
 800b5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f4:	0800b60d 	.word	0x0800b60d
 800b5f8:	0800b615 	.word	0x0800b615
 800b5fc:	0800b61d 	.word	0x0800b61d
 800b600:	0800b625 	.word	0x0800b625
 800b604:	0800b62d 	.word	0x0800b62d
 800b608:	0800b635 	.word	0x0800b635
 800b60c:	2300      	movs	r3, #0
 800b60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b612:	e1b6      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b614:	2304      	movs	r3, #4
 800b616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b61a:	e1b2      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b61c:	2308      	movs	r3, #8
 800b61e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b622:	e1ae      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b624:	2310      	movs	r3, #16
 800b626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b62a:	e1aa      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b62c:	2320      	movs	r3, #32
 800b62e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b632:	e1a6      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b634:	2340      	movs	r3, #64	@ 0x40
 800b636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b63a:	e1a2      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b63c:	2380      	movs	r3, #128	@ 0x80
 800b63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b642:	e19e      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4a35      	ldr	r2, [pc, #212]	@ (800b720 <UART_SetConfig+0x344>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d130      	bne.n	800b6b0 <UART_SetConfig+0x2d4>
 800b64e:	4b31      	ldr	r3, [pc, #196]	@ (800b714 <UART_SetConfig+0x338>)
 800b650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b652:	f003 0307 	and.w	r3, r3, #7
 800b656:	2b05      	cmp	r3, #5
 800b658:	d826      	bhi.n	800b6a8 <UART_SetConfig+0x2cc>
 800b65a:	a201      	add	r2, pc, #4	@ (adr r2, 800b660 <UART_SetConfig+0x284>)
 800b65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b660:	0800b679 	.word	0x0800b679
 800b664:	0800b681 	.word	0x0800b681
 800b668:	0800b689 	.word	0x0800b689
 800b66c:	0800b691 	.word	0x0800b691
 800b670:	0800b699 	.word	0x0800b699
 800b674:	0800b6a1 	.word	0x0800b6a1
 800b678:	2300      	movs	r3, #0
 800b67a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b67e:	e180      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b680:	2304      	movs	r3, #4
 800b682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b686:	e17c      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b688:	2308      	movs	r3, #8
 800b68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b68e:	e178      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b690:	2310      	movs	r3, #16
 800b692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b696:	e174      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b698:	2320      	movs	r3, #32
 800b69a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b69e:	e170      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b6a0:	2340      	movs	r3, #64	@ 0x40
 800b6a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6a6:	e16c      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b6a8:	2380      	movs	r3, #128	@ 0x80
 800b6aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ae:	e168      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b6b0:	697b      	ldr	r3, [r7, #20]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4a1b      	ldr	r2, [pc, #108]	@ (800b724 <UART_SetConfig+0x348>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d142      	bne.n	800b740 <UART_SetConfig+0x364>
 800b6ba:	4b16      	ldr	r3, [pc, #88]	@ (800b714 <UART_SetConfig+0x338>)
 800b6bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6be:	f003 0307 	and.w	r3, r3, #7
 800b6c2:	2b05      	cmp	r3, #5
 800b6c4:	d838      	bhi.n	800b738 <UART_SetConfig+0x35c>
 800b6c6:	a201      	add	r2, pc, #4	@ (adr r2, 800b6cc <UART_SetConfig+0x2f0>)
 800b6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6cc:	0800b6e5 	.word	0x0800b6e5
 800b6d0:	0800b6ed 	.word	0x0800b6ed
 800b6d4:	0800b6f5 	.word	0x0800b6f5
 800b6d8:	0800b6fd 	.word	0x0800b6fd
 800b6dc:	0800b729 	.word	0x0800b729
 800b6e0:	0800b731 	.word	0x0800b731
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ea:	e14a      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b6ec:	2304      	movs	r3, #4
 800b6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6f2:	e146      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b6f4:	2308      	movs	r3, #8
 800b6f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6fa:	e142      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b6fc:	2310      	movs	r3, #16
 800b6fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b702:	e13e      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b704:	cfff69f3 	.word	0xcfff69f3
 800b708:	58000c00 	.word	0x58000c00
 800b70c:	11fff4ff 	.word	0x11fff4ff
 800b710:	40011000 	.word	0x40011000
 800b714:	58024400 	.word	0x58024400
 800b718:	40004400 	.word	0x40004400
 800b71c:	40004800 	.word	0x40004800
 800b720:	40004c00 	.word	0x40004c00
 800b724:	40005000 	.word	0x40005000
 800b728:	2320      	movs	r3, #32
 800b72a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b72e:	e128      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b730:	2340      	movs	r3, #64	@ 0x40
 800b732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b736:	e124      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b738:	2380      	movs	r3, #128	@ 0x80
 800b73a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b73e:	e120      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4acb      	ldr	r2, [pc, #812]	@ (800ba74 <UART_SetConfig+0x698>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d176      	bne.n	800b838 <UART_SetConfig+0x45c>
 800b74a:	4bcb      	ldr	r3, [pc, #812]	@ (800ba78 <UART_SetConfig+0x69c>)
 800b74c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b74e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b752:	2b28      	cmp	r3, #40	@ 0x28
 800b754:	d86c      	bhi.n	800b830 <UART_SetConfig+0x454>
 800b756:	a201      	add	r2, pc, #4	@ (adr r2, 800b75c <UART_SetConfig+0x380>)
 800b758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b75c:	0800b801 	.word	0x0800b801
 800b760:	0800b831 	.word	0x0800b831
 800b764:	0800b831 	.word	0x0800b831
 800b768:	0800b831 	.word	0x0800b831
 800b76c:	0800b831 	.word	0x0800b831
 800b770:	0800b831 	.word	0x0800b831
 800b774:	0800b831 	.word	0x0800b831
 800b778:	0800b831 	.word	0x0800b831
 800b77c:	0800b809 	.word	0x0800b809
 800b780:	0800b831 	.word	0x0800b831
 800b784:	0800b831 	.word	0x0800b831
 800b788:	0800b831 	.word	0x0800b831
 800b78c:	0800b831 	.word	0x0800b831
 800b790:	0800b831 	.word	0x0800b831
 800b794:	0800b831 	.word	0x0800b831
 800b798:	0800b831 	.word	0x0800b831
 800b79c:	0800b811 	.word	0x0800b811
 800b7a0:	0800b831 	.word	0x0800b831
 800b7a4:	0800b831 	.word	0x0800b831
 800b7a8:	0800b831 	.word	0x0800b831
 800b7ac:	0800b831 	.word	0x0800b831
 800b7b0:	0800b831 	.word	0x0800b831
 800b7b4:	0800b831 	.word	0x0800b831
 800b7b8:	0800b831 	.word	0x0800b831
 800b7bc:	0800b819 	.word	0x0800b819
 800b7c0:	0800b831 	.word	0x0800b831
 800b7c4:	0800b831 	.word	0x0800b831
 800b7c8:	0800b831 	.word	0x0800b831
 800b7cc:	0800b831 	.word	0x0800b831
 800b7d0:	0800b831 	.word	0x0800b831
 800b7d4:	0800b831 	.word	0x0800b831
 800b7d8:	0800b831 	.word	0x0800b831
 800b7dc:	0800b821 	.word	0x0800b821
 800b7e0:	0800b831 	.word	0x0800b831
 800b7e4:	0800b831 	.word	0x0800b831
 800b7e8:	0800b831 	.word	0x0800b831
 800b7ec:	0800b831 	.word	0x0800b831
 800b7f0:	0800b831 	.word	0x0800b831
 800b7f4:	0800b831 	.word	0x0800b831
 800b7f8:	0800b831 	.word	0x0800b831
 800b7fc:	0800b829 	.word	0x0800b829
 800b800:	2301      	movs	r3, #1
 800b802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b806:	e0bc      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b808:	2304      	movs	r3, #4
 800b80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b80e:	e0b8      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b810:	2308      	movs	r3, #8
 800b812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b816:	e0b4      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b818:	2310      	movs	r3, #16
 800b81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b81e:	e0b0      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b820:	2320      	movs	r3, #32
 800b822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b826:	e0ac      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b828:	2340      	movs	r3, #64	@ 0x40
 800b82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b82e:	e0a8      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b830:	2380      	movs	r3, #128	@ 0x80
 800b832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b836:	e0a4      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a8f      	ldr	r2, [pc, #572]	@ (800ba7c <UART_SetConfig+0x6a0>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d130      	bne.n	800b8a4 <UART_SetConfig+0x4c8>
 800b842:	4b8d      	ldr	r3, [pc, #564]	@ (800ba78 <UART_SetConfig+0x69c>)
 800b844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b846:	f003 0307 	and.w	r3, r3, #7
 800b84a:	2b05      	cmp	r3, #5
 800b84c:	d826      	bhi.n	800b89c <UART_SetConfig+0x4c0>
 800b84e:	a201      	add	r2, pc, #4	@ (adr r2, 800b854 <UART_SetConfig+0x478>)
 800b850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b854:	0800b86d 	.word	0x0800b86d
 800b858:	0800b875 	.word	0x0800b875
 800b85c:	0800b87d 	.word	0x0800b87d
 800b860:	0800b885 	.word	0x0800b885
 800b864:	0800b88d 	.word	0x0800b88d
 800b868:	0800b895 	.word	0x0800b895
 800b86c:	2300      	movs	r3, #0
 800b86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b872:	e086      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b874:	2304      	movs	r3, #4
 800b876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b87a:	e082      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b87c:	2308      	movs	r3, #8
 800b87e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b882:	e07e      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b884:	2310      	movs	r3, #16
 800b886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b88a:	e07a      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b88c:	2320      	movs	r3, #32
 800b88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b892:	e076      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b894:	2340      	movs	r3, #64	@ 0x40
 800b896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b89a:	e072      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b89c:	2380      	movs	r3, #128	@ 0x80
 800b89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8a2:	e06e      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4a75      	ldr	r2, [pc, #468]	@ (800ba80 <UART_SetConfig+0x6a4>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d130      	bne.n	800b910 <UART_SetConfig+0x534>
 800b8ae:	4b72      	ldr	r3, [pc, #456]	@ (800ba78 <UART_SetConfig+0x69c>)
 800b8b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8b2:	f003 0307 	and.w	r3, r3, #7
 800b8b6:	2b05      	cmp	r3, #5
 800b8b8:	d826      	bhi.n	800b908 <UART_SetConfig+0x52c>
 800b8ba:	a201      	add	r2, pc, #4	@ (adr r2, 800b8c0 <UART_SetConfig+0x4e4>)
 800b8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c0:	0800b8d9 	.word	0x0800b8d9
 800b8c4:	0800b8e1 	.word	0x0800b8e1
 800b8c8:	0800b8e9 	.word	0x0800b8e9
 800b8cc:	0800b8f1 	.word	0x0800b8f1
 800b8d0:	0800b8f9 	.word	0x0800b8f9
 800b8d4:	0800b901 	.word	0x0800b901
 800b8d8:	2300      	movs	r3, #0
 800b8da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8de:	e050      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b8e0:	2304      	movs	r3, #4
 800b8e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8e6:	e04c      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b8e8:	2308      	movs	r3, #8
 800b8ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8ee:	e048      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b8f0:	2310      	movs	r3, #16
 800b8f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8f6:	e044      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b8f8:	2320      	movs	r3, #32
 800b8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8fe:	e040      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b900:	2340      	movs	r3, #64	@ 0x40
 800b902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b906:	e03c      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b908:	2380      	movs	r3, #128	@ 0x80
 800b90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b90e:	e038      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	4a5b      	ldr	r2, [pc, #364]	@ (800ba84 <UART_SetConfig+0x6a8>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d130      	bne.n	800b97c <UART_SetConfig+0x5a0>
 800b91a:	4b57      	ldr	r3, [pc, #348]	@ (800ba78 <UART_SetConfig+0x69c>)
 800b91c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b91e:	f003 0307 	and.w	r3, r3, #7
 800b922:	2b05      	cmp	r3, #5
 800b924:	d826      	bhi.n	800b974 <UART_SetConfig+0x598>
 800b926:	a201      	add	r2, pc, #4	@ (adr r2, 800b92c <UART_SetConfig+0x550>)
 800b928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b92c:	0800b945 	.word	0x0800b945
 800b930:	0800b94d 	.word	0x0800b94d
 800b934:	0800b955 	.word	0x0800b955
 800b938:	0800b95d 	.word	0x0800b95d
 800b93c:	0800b965 	.word	0x0800b965
 800b940:	0800b96d 	.word	0x0800b96d
 800b944:	2302      	movs	r3, #2
 800b946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b94a:	e01a      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b94c:	2304      	movs	r3, #4
 800b94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b952:	e016      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b954:	2308      	movs	r3, #8
 800b956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b95a:	e012      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b95c:	2310      	movs	r3, #16
 800b95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b962:	e00e      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b964:	2320      	movs	r3, #32
 800b966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b96a:	e00a      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b96c:	2340      	movs	r3, #64	@ 0x40
 800b96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b972:	e006      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b974:	2380      	movs	r3, #128	@ 0x80
 800b976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b97a:	e002      	b.n	800b982 <UART_SetConfig+0x5a6>
 800b97c:	2380      	movs	r3, #128	@ 0x80
 800b97e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4a3f      	ldr	r2, [pc, #252]	@ (800ba84 <UART_SetConfig+0x6a8>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	f040 80f8 	bne.w	800bb7e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b98e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b992:	2b20      	cmp	r3, #32
 800b994:	dc46      	bgt.n	800ba24 <UART_SetConfig+0x648>
 800b996:	2b02      	cmp	r3, #2
 800b998:	f2c0 8082 	blt.w	800baa0 <UART_SetConfig+0x6c4>
 800b99c:	3b02      	subs	r3, #2
 800b99e:	2b1e      	cmp	r3, #30
 800b9a0:	d87e      	bhi.n	800baa0 <UART_SetConfig+0x6c4>
 800b9a2:	a201      	add	r2, pc, #4	@ (adr r2, 800b9a8 <UART_SetConfig+0x5cc>)
 800b9a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a8:	0800ba2b 	.word	0x0800ba2b
 800b9ac:	0800baa1 	.word	0x0800baa1
 800b9b0:	0800ba33 	.word	0x0800ba33
 800b9b4:	0800baa1 	.word	0x0800baa1
 800b9b8:	0800baa1 	.word	0x0800baa1
 800b9bc:	0800baa1 	.word	0x0800baa1
 800b9c0:	0800ba43 	.word	0x0800ba43
 800b9c4:	0800baa1 	.word	0x0800baa1
 800b9c8:	0800baa1 	.word	0x0800baa1
 800b9cc:	0800baa1 	.word	0x0800baa1
 800b9d0:	0800baa1 	.word	0x0800baa1
 800b9d4:	0800baa1 	.word	0x0800baa1
 800b9d8:	0800baa1 	.word	0x0800baa1
 800b9dc:	0800baa1 	.word	0x0800baa1
 800b9e0:	0800ba53 	.word	0x0800ba53
 800b9e4:	0800baa1 	.word	0x0800baa1
 800b9e8:	0800baa1 	.word	0x0800baa1
 800b9ec:	0800baa1 	.word	0x0800baa1
 800b9f0:	0800baa1 	.word	0x0800baa1
 800b9f4:	0800baa1 	.word	0x0800baa1
 800b9f8:	0800baa1 	.word	0x0800baa1
 800b9fc:	0800baa1 	.word	0x0800baa1
 800ba00:	0800baa1 	.word	0x0800baa1
 800ba04:	0800baa1 	.word	0x0800baa1
 800ba08:	0800baa1 	.word	0x0800baa1
 800ba0c:	0800baa1 	.word	0x0800baa1
 800ba10:	0800baa1 	.word	0x0800baa1
 800ba14:	0800baa1 	.word	0x0800baa1
 800ba18:	0800baa1 	.word	0x0800baa1
 800ba1c:	0800baa1 	.word	0x0800baa1
 800ba20:	0800ba93 	.word	0x0800ba93
 800ba24:	2b40      	cmp	r3, #64	@ 0x40
 800ba26:	d037      	beq.n	800ba98 <UART_SetConfig+0x6bc>
 800ba28:	e03a      	b.n	800baa0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ba2a:	f7fd ff8b 	bl	8009944 <HAL_RCCEx_GetD3PCLK1Freq>
 800ba2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ba30:	e03c      	b.n	800baac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7fd ff9a 	bl	8009970 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba40:	e034      	b.n	800baac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba42:	f107 0318 	add.w	r3, r7, #24
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7fe f8e6 	bl	8009c18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba4c:	69fb      	ldr	r3, [r7, #28]
 800ba4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba50:	e02c      	b.n	800baac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba52:	4b09      	ldr	r3, [pc, #36]	@ (800ba78 <UART_SetConfig+0x69c>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f003 0320 	and.w	r3, r3, #32
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d016      	beq.n	800ba8c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba5e:	4b06      	ldr	r3, [pc, #24]	@ (800ba78 <UART_SetConfig+0x69c>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	08db      	lsrs	r3, r3, #3
 800ba64:	f003 0303 	and.w	r3, r3, #3
 800ba68:	4a07      	ldr	r2, [pc, #28]	@ (800ba88 <UART_SetConfig+0x6ac>)
 800ba6a:	fa22 f303 	lsr.w	r3, r2, r3
 800ba6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba70:	e01c      	b.n	800baac <UART_SetConfig+0x6d0>
 800ba72:	bf00      	nop
 800ba74:	40011400 	.word	0x40011400
 800ba78:	58024400 	.word	0x58024400
 800ba7c:	40007800 	.word	0x40007800
 800ba80:	40007c00 	.word	0x40007c00
 800ba84:	58000c00 	.word	0x58000c00
 800ba88:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ba8c:	4b9d      	ldr	r3, [pc, #628]	@ (800bd04 <UART_SetConfig+0x928>)
 800ba8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba90:	e00c      	b.n	800baac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ba92:	4b9d      	ldr	r3, [pc, #628]	@ (800bd08 <UART_SetConfig+0x92c>)
 800ba94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba96:	e009      	b.n	800baac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba9e:	e005      	b.n	800baac <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800baa0:	2300      	movs	r3, #0
 800baa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800baa4:	2301      	movs	r3, #1
 800baa6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800baaa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800baac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baae:	2b00      	cmp	r3, #0
 800bab0:	f000 81de 	beq.w	800be70 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bab8:	4a94      	ldr	r2, [pc, #592]	@ (800bd0c <UART_SetConfig+0x930>)
 800baba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800babe:	461a      	mov	r2, r3
 800bac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bac2:	fbb3 f3f2 	udiv	r3, r3, r2
 800bac6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	685a      	ldr	r2, [r3, #4]
 800bacc:	4613      	mov	r3, r2
 800bace:	005b      	lsls	r3, r3, #1
 800bad0:	4413      	add	r3, r2
 800bad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d305      	bcc.n	800bae4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d903      	bls.n	800baec <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800bae4:	2301      	movs	r3, #1
 800bae6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800baea:	e1c1      	b.n	800be70 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800baec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baee:	2200      	movs	r2, #0
 800baf0:	60bb      	str	r3, [r7, #8]
 800baf2:	60fa      	str	r2, [r7, #12]
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baf8:	4a84      	ldr	r2, [pc, #528]	@ (800bd0c <UART_SetConfig+0x930>)
 800bafa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bafe:	b29b      	uxth	r3, r3
 800bb00:	2200      	movs	r2, #0
 800bb02:	603b      	str	r3, [r7, #0]
 800bb04:	607a      	str	r2, [r7, #4]
 800bb06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bb0e:	f7f4 fbf9 	bl	8000304 <__aeabi_uldivmod>
 800bb12:	4602      	mov	r2, r0
 800bb14:	460b      	mov	r3, r1
 800bb16:	4610      	mov	r0, r2
 800bb18:	4619      	mov	r1, r3
 800bb1a:	f04f 0200 	mov.w	r2, #0
 800bb1e:	f04f 0300 	mov.w	r3, #0
 800bb22:	020b      	lsls	r3, r1, #8
 800bb24:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bb28:	0202      	lsls	r2, r0, #8
 800bb2a:	6979      	ldr	r1, [r7, #20]
 800bb2c:	6849      	ldr	r1, [r1, #4]
 800bb2e:	0849      	lsrs	r1, r1, #1
 800bb30:	2000      	movs	r0, #0
 800bb32:	460c      	mov	r4, r1
 800bb34:	4605      	mov	r5, r0
 800bb36:	eb12 0804 	adds.w	r8, r2, r4
 800bb3a:	eb43 0905 	adc.w	r9, r3, r5
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	2200      	movs	r2, #0
 800bb44:	469a      	mov	sl, r3
 800bb46:	4693      	mov	fp, r2
 800bb48:	4652      	mov	r2, sl
 800bb4a:	465b      	mov	r3, fp
 800bb4c:	4640      	mov	r0, r8
 800bb4e:	4649      	mov	r1, r9
 800bb50:	f7f4 fbd8 	bl	8000304 <__aeabi_uldivmod>
 800bb54:	4602      	mov	r2, r0
 800bb56:	460b      	mov	r3, r1
 800bb58:	4613      	mov	r3, r2
 800bb5a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bb5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bb62:	d308      	bcc.n	800bb76 <UART_SetConfig+0x79a>
 800bb64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb6a:	d204      	bcs.n	800bb76 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb72:	60da      	str	r2, [r3, #12]
 800bb74:	e17c      	b.n	800be70 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800bb76:	2301      	movs	r3, #1
 800bb78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bb7c:	e178      	b.n	800be70 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	69db      	ldr	r3, [r3, #28]
 800bb82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb86:	f040 80c5 	bne.w	800bd14 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800bb8a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bb8e:	2b20      	cmp	r3, #32
 800bb90:	dc48      	bgt.n	800bc24 <UART_SetConfig+0x848>
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	db7b      	blt.n	800bc8e <UART_SetConfig+0x8b2>
 800bb96:	2b20      	cmp	r3, #32
 800bb98:	d879      	bhi.n	800bc8e <UART_SetConfig+0x8b2>
 800bb9a:	a201      	add	r2, pc, #4	@ (adr r2, 800bba0 <UART_SetConfig+0x7c4>)
 800bb9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba0:	0800bc2b 	.word	0x0800bc2b
 800bba4:	0800bc33 	.word	0x0800bc33
 800bba8:	0800bc8f 	.word	0x0800bc8f
 800bbac:	0800bc8f 	.word	0x0800bc8f
 800bbb0:	0800bc3b 	.word	0x0800bc3b
 800bbb4:	0800bc8f 	.word	0x0800bc8f
 800bbb8:	0800bc8f 	.word	0x0800bc8f
 800bbbc:	0800bc8f 	.word	0x0800bc8f
 800bbc0:	0800bc4b 	.word	0x0800bc4b
 800bbc4:	0800bc8f 	.word	0x0800bc8f
 800bbc8:	0800bc8f 	.word	0x0800bc8f
 800bbcc:	0800bc8f 	.word	0x0800bc8f
 800bbd0:	0800bc8f 	.word	0x0800bc8f
 800bbd4:	0800bc8f 	.word	0x0800bc8f
 800bbd8:	0800bc8f 	.word	0x0800bc8f
 800bbdc:	0800bc8f 	.word	0x0800bc8f
 800bbe0:	0800bc5b 	.word	0x0800bc5b
 800bbe4:	0800bc8f 	.word	0x0800bc8f
 800bbe8:	0800bc8f 	.word	0x0800bc8f
 800bbec:	0800bc8f 	.word	0x0800bc8f
 800bbf0:	0800bc8f 	.word	0x0800bc8f
 800bbf4:	0800bc8f 	.word	0x0800bc8f
 800bbf8:	0800bc8f 	.word	0x0800bc8f
 800bbfc:	0800bc8f 	.word	0x0800bc8f
 800bc00:	0800bc8f 	.word	0x0800bc8f
 800bc04:	0800bc8f 	.word	0x0800bc8f
 800bc08:	0800bc8f 	.word	0x0800bc8f
 800bc0c:	0800bc8f 	.word	0x0800bc8f
 800bc10:	0800bc8f 	.word	0x0800bc8f
 800bc14:	0800bc8f 	.word	0x0800bc8f
 800bc18:	0800bc8f 	.word	0x0800bc8f
 800bc1c:	0800bc8f 	.word	0x0800bc8f
 800bc20:	0800bc81 	.word	0x0800bc81
 800bc24:	2b40      	cmp	r3, #64	@ 0x40
 800bc26:	d02e      	beq.n	800bc86 <UART_SetConfig+0x8aa>
 800bc28:	e031      	b.n	800bc8e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc2a:	f7fb fe93 	bl	8007954 <HAL_RCC_GetPCLK1Freq>
 800bc2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc30:	e033      	b.n	800bc9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc32:	f7fb fea5 	bl	8007980 <HAL_RCC_GetPCLK2Freq>
 800bc36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc38:	e02f      	b.n	800bc9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f7fd fe96 	bl	8009970 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bc44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc48:	e027      	b.n	800bc9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc4a:	f107 0318 	add.w	r3, r7, #24
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7fd ffe2 	bl	8009c18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bc54:	69fb      	ldr	r3, [r7, #28]
 800bc56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc58:	e01f      	b.n	800bc9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc5a:	4b2d      	ldr	r3, [pc, #180]	@ (800bd10 <UART_SetConfig+0x934>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f003 0320 	and.w	r3, r3, #32
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d009      	beq.n	800bc7a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bc66:	4b2a      	ldr	r3, [pc, #168]	@ (800bd10 <UART_SetConfig+0x934>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	08db      	lsrs	r3, r3, #3
 800bc6c:	f003 0303 	and.w	r3, r3, #3
 800bc70:	4a24      	ldr	r2, [pc, #144]	@ (800bd04 <UART_SetConfig+0x928>)
 800bc72:	fa22 f303 	lsr.w	r3, r2, r3
 800bc76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bc78:	e00f      	b.n	800bc9a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bc7a:	4b22      	ldr	r3, [pc, #136]	@ (800bd04 <UART_SetConfig+0x928>)
 800bc7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc7e:	e00c      	b.n	800bc9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bc80:	4b21      	ldr	r3, [pc, #132]	@ (800bd08 <UART_SetConfig+0x92c>)
 800bc82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc84:	e009      	b.n	800bc9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc8c:	e005      	b.n	800bc9a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bc92:	2301      	movs	r3, #1
 800bc94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bc98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bc9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	f000 80e7 	beq.w	800be70 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bca6:	4a19      	ldr	r2, [pc, #100]	@ (800bd0c <UART_SetConfig+0x930>)
 800bca8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcac:	461a      	mov	r2, r3
 800bcae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcb4:	005a      	lsls	r2, r3, #1
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	085b      	lsrs	r3, r3, #1
 800bcbc:	441a      	add	r2, r3
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcc6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bcc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcca:	2b0f      	cmp	r3, #15
 800bccc:	d916      	bls.n	800bcfc <UART_SetConfig+0x920>
 800bcce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bcd4:	d212      	bcs.n	800bcfc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bcd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	f023 030f 	bic.w	r3, r3, #15
 800bcde:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bce2:	085b      	lsrs	r3, r3, #1
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	f003 0307 	and.w	r3, r3, #7
 800bcea:	b29a      	uxth	r2, r3
 800bcec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bcf8:	60da      	str	r2, [r3, #12]
 800bcfa:	e0b9      	b.n	800be70 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bd02:	e0b5      	b.n	800be70 <UART_SetConfig+0xa94>
 800bd04:	03d09000 	.word	0x03d09000
 800bd08:	003d0900 	.word	0x003d0900
 800bd0c:	08014074 	.word	0x08014074
 800bd10:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bd14:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bd18:	2b20      	cmp	r3, #32
 800bd1a:	dc49      	bgt.n	800bdb0 <UART_SetConfig+0x9d4>
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	db7c      	blt.n	800be1a <UART_SetConfig+0xa3e>
 800bd20:	2b20      	cmp	r3, #32
 800bd22:	d87a      	bhi.n	800be1a <UART_SetConfig+0xa3e>
 800bd24:	a201      	add	r2, pc, #4	@ (adr r2, 800bd2c <UART_SetConfig+0x950>)
 800bd26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd2a:	bf00      	nop
 800bd2c:	0800bdb7 	.word	0x0800bdb7
 800bd30:	0800bdbf 	.word	0x0800bdbf
 800bd34:	0800be1b 	.word	0x0800be1b
 800bd38:	0800be1b 	.word	0x0800be1b
 800bd3c:	0800bdc7 	.word	0x0800bdc7
 800bd40:	0800be1b 	.word	0x0800be1b
 800bd44:	0800be1b 	.word	0x0800be1b
 800bd48:	0800be1b 	.word	0x0800be1b
 800bd4c:	0800bdd7 	.word	0x0800bdd7
 800bd50:	0800be1b 	.word	0x0800be1b
 800bd54:	0800be1b 	.word	0x0800be1b
 800bd58:	0800be1b 	.word	0x0800be1b
 800bd5c:	0800be1b 	.word	0x0800be1b
 800bd60:	0800be1b 	.word	0x0800be1b
 800bd64:	0800be1b 	.word	0x0800be1b
 800bd68:	0800be1b 	.word	0x0800be1b
 800bd6c:	0800bde7 	.word	0x0800bde7
 800bd70:	0800be1b 	.word	0x0800be1b
 800bd74:	0800be1b 	.word	0x0800be1b
 800bd78:	0800be1b 	.word	0x0800be1b
 800bd7c:	0800be1b 	.word	0x0800be1b
 800bd80:	0800be1b 	.word	0x0800be1b
 800bd84:	0800be1b 	.word	0x0800be1b
 800bd88:	0800be1b 	.word	0x0800be1b
 800bd8c:	0800be1b 	.word	0x0800be1b
 800bd90:	0800be1b 	.word	0x0800be1b
 800bd94:	0800be1b 	.word	0x0800be1b
 800bd98:	0800be1b 	.word	0x0800be1b
 800bd9c:	0800be1b 	.word	0x0800be1b
 800bda0:	0800be1b 	.word	0x0800be1b
 800bda4:	0800be1b 	.word	0x0800be1b
 800bda8:	0800be1b 	.word	0x0800be1b
 800bdac:	0800be0d 	.word	0x0800be0d
 800bdb0:	2b40      	cmp	r3, #64	@ 0x40
 800bdb2:	d02e      	beq.n	800be12 <UART_SetConfig+0xa36>
 800bdb4:	e031      	b.n	800be1a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bdb6:	f7fb fdcd 	bl	8007954 <HAL_RCC_GetPCLK1Freq>
 800bdba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bdbc:	e033      	b.n	800be26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bdbe:	f7fb fddf 	bl	8007980 <HAL_RCC_GetPCLK2Freq>
 800bdc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bdc4:	e02f      	b.n	800be26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fd fdd0 	bl	8009970 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bdd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdd4:	e027      	b.n	800be26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdd6:	f107 0318 	add.w	r3, r7, #24
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7fd ff1c 	bl	8009c18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bde4:	e01f      	b.n	800be26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bde6:	4b2d      	ldr	r3, [pc, #180]	@ (800be9c <UART_SetConfig+0xac0>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f003 0320 	and.w	r3, r3, #32
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d009      	beq.n	800be06 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bdf2:	4b2a      	ldr	r3, [pc, #168]	@ (800be9c <UART_SetConfig+0xac0>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	08db      	lsrs	r3, r3, #3
 800bdf8:	f003 0303 	and.w	r3, r3, #3
 800bdfc:	4a28      	ldr	r2, [pc, #160]	@ (800bea0 <UART_SetConfig+0xac4>)
 800bdfe:	fa22 f303 	lsr.w	r3, r2, r3
 800be02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800be04:	e00f      	b.n	800be26 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800be06:	4b26      	ldr	r3, [pc, #152]	@ (800bea0 <UART_SetConfig+0xac4>)
 800be08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be0a:	e00c      	b.n	800be26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800be0c:	4b25      	ldr	r3, [pc, #148]	@ (800bea4 <UART_SetConfig+0xac8>)
 800be0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be10:	e009      	b.n	800be26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be18:	e005      	b.n	800be26 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800be1a:	2300      	movs	r3, #0
 800be1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800be1e:	2301      	movs	r3, #1
 800be20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800be24:	bf00      	nop
    }

    if (pclk != 0U)
 800be26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d021      	beq.n	800be70 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be30:	4a1d      	ldr	r2, [pc, #116]	@ (800bea8 <UART_SetConfig+0xacc>)
 800be32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be36:	461a      	mov	r2, r3
 800be38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be3a:	fbb3 f2f2 	udiv	r2, r3, r2
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	085b      	lsrs	r3, r3, #1
 800be44:	441a      	add	r2, r3
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800be4e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be52:	2b0f      	cmp	r3, #15
 800be54:	d909      	bls.n	800be6a <UART_SetConfig+0xa8e>
 800be56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be5c:	d205      	bcs.n	800be6a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800be5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be60:	b29a      	uxth	r2, r3
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	60da      	str	r2, [r3, #12]
 800be68:	e002      	b.n	800be70 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800be6a:	2301      	movs	r3, #1
 800be6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	2201      	movs	r2, #1
 800be74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	2201      	movs	r2, #1
 800be7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	2200      	movs	r2, #0
 800be84:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	2200      	movs	r2, #0
 800be8a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800be8c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800be90:	4618      	mov	r0, r3
 800be92:	3748      	adds	r7, #72	@ 0x48
 800be94:	46bd      	mov	sp, r7
 800be96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be9a:	bf00      	nop
 800be9c:	58024400 	.word	0x58024400
 800bea0:	03d09000 	.word	0x03d09000
 800bea4:	003d0900 	.word	0x003d0900
 800bea8:	08014074 	.word	0x08014074

0800beac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800beac:	b480      	push	{r7}
 800beae:	b083      	sub	sp, #12
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beb8:	f003 0308 	and.w	r3, r3, #8
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d00a      	beq.n	800bed6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	430a      	orrs	r2, r1
 800bed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beda:	f003 0301 	and.w	r3, r3, #1
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d00a      	beq.n	800bef8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	430a      	orrs	r2, r1
 800bef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800befc:	f003 0302 	and.w	r3, r3, #2
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d00a      	beq.n	800bf1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	430a      	orrs	r2, r1
 800bf18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf1e:	f003 0304 	and.w	r3, r3, #4
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d00a      	beq.n	800bf3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	430a      	orrs	r2, r1
 800bf3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf40:	f003 0310 	and.w	r3, r3, #16
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d00a      	beq.n	800bf5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	689b      	ldr	r3, [r3, #8]
 800bf4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	430a      	orrs	r2, r1
 800bf5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf62:	f003 0320 	and.w	r3, r3, #32
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d00a      	beq.n	800bf80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	689b      	ldr	r3, [r3, #8]
 800bf70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	430a      	orrs	r2, r1
 800bf7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d01a      	beq.n	800bfc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	430a      	orrs	r2, r1
 800bfa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bfaa:	d10a      	bne.n	800bfc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	430a      	orrs	r2, r1
 800bfc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d00a      	beq.n	800bfe4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	685b      	ldr	r3, [r3, #4]
 800bfd4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	430a      	orrs	r2, r1
 800bfe2:	605a      	str	r2, [r3, #4]
  }
}
 800bfe4:	bf00      	nop
 800bfe6:	370c      	adds	r7, #12
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr

0800bff0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b098      	sub	sp, #96	@ 0x60
 800bff4:	af02      	add	r7, sp, #8
 800bff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2200      	movs	r2, #0
 800bffc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c000:	f7f6 f882 	bl	8002108 <HAL_GetTick>
 800c004:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f003 0308 	and.w	r3, r3, #8
 800c010:	2b08      	cmp	r3, #8
 800c012:	d12f      	bne.n	800c074 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c014:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c018:	9300      	str	r3, [sp, #0]
 800c01a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c01c:	2200      	movs	r2, #0
 800c01e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 f88e 	bl	800c144 <UART_WaitOnFlagUntilTimeout>
 800c028:	4603      	mov	r3, r0
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d022      	beq.n	800c074 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c036:	e853 3f00 	ldrex	r3, [r3]
 800c03a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c03c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c03e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c042:	653b      	str	r3, [r7, #80]	@ 0x50
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	461a      	mov	r2, r3
 800c04a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c04c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c04e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c050:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c052:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c054:	e841 2300 	strex	r3, r2, [r1]
 800c058:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c05a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1e6      	bne.n	800c02e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2220      	movs	r2, #32
 800c064:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2200      	movs	r2, #0
 800c06c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c070:	2303      	movs	r3, #3
 800c072:	e063      	b.n	800c13c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f003 0304 	and.w	r3, r3, #4
 800c07e:	2b04      	cmp	r3, #4
 800c080:	d149      	bne.n	800c116 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c082:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c08a:	2200      	movs	r2, #0
 800c08c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f000 f857 	bl	800c144 <UART_WaitOnFlagUntilTimeout>
 800c096:	4603      	mov	r3, r0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d03c      	beq.n	800c116 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0a4:	e853 3f00 	ldrex	r3, [r3]
 800c0a8:	623b      	str	r3, [r7, #32]
   return(result);
 800c0aa:	6a3b      	ldr	r3, [r7, #32]
 800c0ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c0b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800c0bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c0c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0c2:	e841 2300 	strex	r3, r2, [r1]
 800c0c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c0c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d1e6      	bne.n	800c09c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	3308      	adds	r3, #8
 800c0d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	e853 3f00 	ldrex	r3, [r3]
 800c0dc:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	f023 0301 	bic.w	r3, r3, #1
 800c0e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	3308      	adds	r3, #8
 800c0ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c0ee:	61fa      	str	r2, [r7, #28]
 800c0f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0f2:	69b9      	ldr	r1, [r7, #24]
 800c0f4:	69fa      	ldr	r2, [r7, #28]
 800c0f6:	e841 2300 	strex	r3, r2, [r1]
 800c0fa:	617b      	str	r3, [r7, #20]
   return(result);
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d1e5      	bne.n	800c0ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2220      	movs	r2, #32
 800c106:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2200      	movs	r2, #0
 800c10e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c112:	2303      	movs	r3, #3
 800c114:	e012      	b.n	800c13c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2220      	movs	r2, #32
 800c11a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2220      	movs	r2, #32
 800c122:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2200      	movs	r2, #0
 800c12a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2200      	movs	r2, #0
 800c130:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2200      	movs	r2, #0
 800c136:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c13a:	2300      	movs	r3, #0
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3758      	adds	r7, #88	@ 0x58
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b084      	sub	sp, #16
 800c148:	af00      	add	r7, sp, #0
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	60b9      	str	r1, [r7, #8]
 800c14e:	603b      	str	r3, [r7, #0]
 800c150:	4613      	mov	r3, r2
 800c152:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c154:	e04f      	b.n	800c1f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c156:	69bb      	ldr	r3, [r7, #24]
 800c158:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c15c:	d04b      	beq.n	800c1f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c15e:	f7f5 ffd3 	bl	8002108 <HAL_GetTick>
 800c162:	4602      	mov	r2, r0
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	1ad3      	subs	r3, r2, r3
 800c168:	69ba      	ldr	r2, [r7, #24]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d302      	bcc.n	800c174 <UART_WaitOnFlagUntilTimeout+0x30>
 800c16e:	69bb      	ldr	r3, [r7, #24]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d101      	bne.n	800c178 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c174:	2303      	movs	r3, #3
 800c176:	e04e      	b.n	800c216 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f003 0304 	and.w	r3, r3, #4
 800c182:	2b00      	cmp	r3, #0
 800c184:	d037      	beq.n	800c1f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	2b80      	cmp	r3, #128	@ 0x80
 800c18a:	d034      	beq.n	800c1f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	2b40      	cmp	r3, #64	@ 0x40
 800c190:	d031      	beq.n	800c1f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	69db      	ldr	r3, [r3, #28]
 800c198:	f003 0308 	and.w	r3, r3, #8
 800c19c:	2b08      	cmp	r3, #8
 800c19e:	d110      	bne.n	800c1c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2208      	movs	r2, #8
 800c1a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c1a8:	68f8      	ldr	r0, [r7, #12]
 800c1aa:	f000 f921 	bl	800c3f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	2208      	movs	r2, #8
 800c1b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	e029      	b.n	800c216 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	69db      	ldr	r3, [r3, #28]
 800c1c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c1cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c1d0:	d111      	bne.n	800c1f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c1da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c1dc:	68f8      	ldr	r0, [r7, #12]
 800c1de:	f000 f907 	bl	800c3f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	2220      	movs	r2, #32
 800c1e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c1f2:	2303      	movs	r3, #3
 800c1f4:	e00f      	b.n	800c216 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	69da      	ldr	r2, [r3, #28]
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	4013      	ands	r3, r2
 800c200:	68ba      	ldr	r2, [r7, #8]
 800c202:	429a      	cmp	r2, r3
 800c204:	bf0c      	ite	eq
 800c206:	2301      	moveq	r3, #1
 800c208:	2300      	movne	r3, #0
 800c20a:	b2db      	uxtb	r3, r3
 800c20c:	461a      	mov	r2, r3
 800c20e:	79fb      	ldrb	r3, [r7, #7]
 800c210:	429a      	cmp	r2, r3
 800c212:	d0a0      	beq.n	800c156 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c214:	2300      	movs	r3, #0
}
 800c216:	4618      	mov	r0, r3
 800c218:	3710      	adds	r7, #16
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}
	...

0800c220 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b096      	sub	sp, #88	@ 0x58
 800c224:	af00      	add	r7, sp, #0
 800c226:	60f8      	str	r0, [r7, #12]
 800c228:	60b9      	str	r1, [r7, #8]
 800c22a:	4613      	mov	r3, r2
 800c22c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	68ba      	ldr	r2, [r7, #8]
 800c232:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	88fa      	ldrh	r2, [r7, #6]
 800c238:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2200      	movs	r2, #0
 800c240:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2222      	movs	r2, #34	@ 0x22
 800c248:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c252:	2b00      	cmp	r3, #0
 800c254:	d02d      	beq.n	800c2b2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c25c:	4a40      	ldr	r2, [pc, #256]	@ (800c360 <UART_Start_Receive_DMA+0x140>)
 800c25e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c266:	4a3f      	ldr	r2, [pc, #252]	@ (800c364 <UART_Start_Receive_DMA+0x144>)
 800c268:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c270:	4a3d      	ldr	r2, [pc, #244]	@ (800c368 <UART_Start_Receive_DMA+0x148>)
 800c272:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c27a:	2200      	movs	r2, #0
 800c27c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	3324      	adds	r3, #36	@ 0x24
 800c28a:	4619      	mov	r1, r3
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c290:	461a      	mov	r2, r3
 800c292:	88fb      	ldrh	r3, [r7, #6]
 800c294:	f7f7 fea6 	bl	8003fe4 <HAL_DMA_Start_IT>
 800c298:	4603      	mov	r3, r0
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d009      	beq.n	800c2b2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2210      	movs	r2, #16
 800c2a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2220      	movs	r2, #32
 800c2aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	e051      	b.n	800c356 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	691b      	ldr	r3, [r3, #16]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d018      	beq.n	800c2ec <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2c2:	e853 3f00 	ldrex	r3, [r3]
 800c2c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c2ce:	657b      	str	r3, [r7, #84]	@ 0x54
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	461a      	mov	r2, r3
 800c2d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c2da:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c2de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c2e0:	e841 2300 	strex	r3, r2, [r1]
 800c2e4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c2e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d1e6      	bne.n	800c2ba <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	3308      	adds	r3, #8
 800c2f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f6:	e853 3f00 	ldrex	r3, [r3]
 800c2fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2fe:	f043 0301 	orr.w	r3, r3, #1
 800c302:	653b      	str	r3, [r7, #80]	@ 0x50
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	3308      	adds	r3, #8
 800c30a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c30c:	637a      	str	r2, [r7, #52]	@ 0x34
 800c30e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c310:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c312:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c314:	e841 2300 	strex	r3, r2, [r1]
 800c318:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c31a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d1e5      	bne.n	800c2ec <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	3308      	adds	r3, #8
 800c326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	e853 3f00 	ldrex	r3, [r3]
 800c32e:	613b      	str	r3, [r7, #16]
   return(result);
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c336:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	3308      	adds	r3, #8
 800c33e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c340:	623a      	str	r2, [r7, #32]
 800c342:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c344:	69f9      	ldr	r1, [r7, #28]
 800c346:	6a3a      	ldr	r2, [r7, #32]
 800c348:	e841 2300 	strex	r3, r2, [r1]
 800c34c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c34e:	69bb      	ldr	r3, [r7, #24]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d1e5      	bne.n	800c320 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c354:	2300      	movs	r3, #0
}
 800c356:	4618      	mov	r0, r3
 800c358:	3758      	adds	r7, #88	@ 0x58
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	0800c56f 	.word	0x0800c56f
 800c364:	0800c697 	.word	0x0800c697
 800c368:	0800c6d5 	.word	0x0800c6d5

0800c36c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b08f      	sub	sp, #60	@ 0x3c
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c37a:	6a3b      	ldr	r3, [r7, #32]
 800c37c:	e853 3f00 	ldrex	r3, [r3]
 800c380:	61fb      	str	r3, [r7, #28]
   return(result);
 800c382:	69fb      	ldr	r3, [r7, #28]
 800c384:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c388:	637b      	str	r3, [r7, #52]	@ 0x34
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	461a      	mov	r2, r3
 800c390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c392:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c394:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c396:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c398:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c39a:	e841 2300 	strex	r3, r2, [r1]
 800c39e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d1e6      	bne.n	800c374 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	3308      	adds	r3, #8
 800c3ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	e853 3f00 	ldrex	r3, [r3]
 800c3b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c3bc:	633b      	str	r3, [r7, #48]	@ 0x30
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	3308      	adds	r3, #8
 800c3c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3c6:	61ba      	str	r2, [r7, #24]
 800c3c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ca:	6979      	ldr	r1, [r7, #20]
 800c3cc:	69ba      	ldr	r2, [r7, #24]
 800c3ce:	e841 2300 	strex	r3, r2, [r1]
 800c3d2:	613b      	str	r3, [r7, #16]
   return(result);
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d1e5      	bne.n	800c3a6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2220      	movs	r2, #32
 800c3de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c3e2:	bf00      	nop
 800c3e4:	373c      	adds	r7, #60	@ 0x3c
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr
	...

0800c3f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b095      	sub	sp, #84	@ 0x54
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c400:	e853 3f00 	ldrex	r3, [r3]
 800c404:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c408:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c40c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	461a      	mov	r2, r3
 800c414:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c416:	643b      	str	r3, [r7, #64]	@ 0x40
 800c418:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c41a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c41c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c41e:	e841 2300 	strex	r3, r2, [r1]
 800c422:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c426:	2b00      	cmp	r3, #0
 800c428:	d1e6      	bne.n	800c3f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	3308      	adds	r3, #8
 800c430:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c432:	6a3b      	ldr	r3, [r7, #32]
 800c434:	e853 3f00 	ldrex	r3, [r3]
 800c438:	61fb      	str	r3, [r7, #28]
   return(result);
 800c43a:	69fa      	ldr	r2, [r7, #28]
 800c43c:	4b1e      	ldr	r3, [pc, #120]	@ (800c4b8 <UART_EndRxTransfer+0xc8>)
 800c43e:	4013      	ands	r3, r2
 800c440:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	3308      	adds	r3, #8
 800c448:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c44a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c44c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c44e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c450:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c452:	e841 2300 	strex	r3, r2, [r1]
 800c456:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d1e5      	bne.n	800c42a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c462:	2b01      	cmp	r3, #1
 800c464:	d118      	bne.n	800c498 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	e853 3f00 	ldrex	r3, [r3]
 800c472:	60bb      	str	r3, [r7, #8]
   return(result);
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	f023 0310 	bic.w	r3, r3, #16
 800c47a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	461a      	mov	r2, r3
 800c482:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c484:	61bb      	str	r3, [r7, #24]
 800c486:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c488:	6979      	ldr	r1, [r7, #20]
 800c48a:	69ba      	ldr	r2, [r7, #24]
 800c48c:	e841 2300 	strex	r3, r2, [r1]
 800c490:	613b      	str	r3, [r7, #16]
   return(result);
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d1e6      	bne.n	800c466 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2220      	movs	r2, #32
 800c49c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c4ac:	bf00      	nop
 800c4ae:	3754      	adds	r7, #84	@ 0x54
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr
 800c4b8:	effffffe 	.word	0xeffffffe

0800c4bc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b090      	sub	sp, #64	@ 0x40
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4c8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	69db      	ldr	r3, [r3, #28]
 800c4ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c4d2:	d037      	beq.n	800c544 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800c4d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c4dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	3308      	adds	r3, #8
 800c4e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e6:	e853 3f00 	ldrex	r3, [r3]
 800c4ea:	623b      	str	r3, [r7, #32]
   return(result);
 800c4ec:	6a3b      	ldr	r3, [r7, #32]
 800c4ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c4f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c4f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	3308      	adds	r3, #8
 800c4fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c4fc:	633a      	str	r2, [r7, #48]	@ 0x30
 800c4fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c500:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c502:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c504:	e841 2300 	strex	r3, r2, [r1]
 800c508:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d1e5      	bne.n	800c4dc <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	e853 3f00 	ldrex	r3, [r3]
 800c51c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c524:	637b      	str	r3, [r7, #52]	@ 0x34
 800c526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	461a      	mov	r2, r3
 800c52c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c52e:	61fb      	str	r3, [r7, #28]
 800c530:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c532:	69b9      	ldr	r1, [r7, #24]
 800c534:	69fa      	ldr	r2, [r7, #28]
 800c536:	e841 2300 	strex	r3, r2, [r1]
 800c53a:	617b      	str	r3, [r7, #20]
   return(result);
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d1e6      	bne.n	800c510 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c542:	e002      	b.n	800c54a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800c544:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c546:	f7fe ff15 	bl	800b374 <HAL_UART_TxCpltCallback>
}
 800c54a:	bf00      	nop
 800c54c:	3740      	adds	r7, #64	@ 0x40
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}

0800c552 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c552:	b580      	push	{r7, lr}
 800c554:	b084      	sub	sp, #16
 800c556:	af00      	add	r7, sp, #0
 800c558:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c55e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c560:	68f8      	ldr	r0, [r7, #12]
 800c562:	f7fe ff11 	bl	800b388 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c566:	bf00      	nop
 800c568:	3710      	adds	r7, #16
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}

0800c56e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c56e:	b580      	push	{r7, lr}
 800c570:	b09c      	sub	sp, #112	@ 0x70
 800c572:	af00      	add	r7, sp, #0
 800c574:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c57a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	69db      	ldr	r3, [r3, #28]
 800c580:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c584:	d071      	beq.n	800c66a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800c586:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c588:	2200      	movs	r2, #0
 800c58a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c58e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c594:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c596:	e853 3f00 	ldrex	r3, [r3]
 800c59a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c59c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c59e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c5a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c5a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	461a      	mov	r2, r3
 800c5aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c5ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c5ae:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c5b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c5b4:	e841 2300 	strex	r3, r2, [r1]
 800c5b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c5ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d1e6      	bne.n	800c58e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	3308      	adds	r3, #8
 800c5c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ca:	e853 3f00 	ldrex	r3, [r3]
 800c5ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c5d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5d2:	f023 0301 	bic.w	r3, r3, #1
 800c5d6:	667b      	str	r3, [r7, #100]	@ 0x64
 800c5d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	3308      	adds	r3, #8
 800c5de:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c5e0:	647a      	str	r2, [r7, #68]	@ 0x44
 800c5e2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c5e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c5e8:	e841 2300 	strex	r3, r2, [r1]
 800c5ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c5ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d1e5      	bne.n	800c5c0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	3308      	adds	r3, #8
 800c5fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5fe:	e853 3f00 	ldrex	r3, [r3]
 800c602:	623b      	str	r3, [r7, #32]
   return(result);
 800c604:	6a3b      	ldr	r3, [r7, #32]
 800c606:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c60a:	663b      	str	r3, [r7, #96]	@ 0x60
 800c60c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	3308      	adds	r3, #8
 800c612:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c614:	633a      	str	r2, [r7, #48]	@ 0x30
 800c616:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c618:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c61a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c61c:	e841 2300 	strex	r3, r2, [r1]
 800c620:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c624:	2b00      	cmp	r3, #0
 800c626:	d1e5      	bne.n	800c5f4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c628:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c62a:	2220      	movs	r2, #32
 800c62c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c630:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c632:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c634:	2b01      	cmp	r3, #1
 800c636:	d118      	bne.n	800c66a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c638:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	e853 3f00 	ldrex	r3, [r3]
 800c644:	60fb      	str	r3, [r7, #12]
   return(result);
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	f023 0310 	bic.w	r3, r3, #16
 800c64c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c64e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	461a      	mov	r2, r3
 800c654:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c656:	61fb      	str	r3, [r7, #28]
 800c658:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c65a:	69b9      	ldr	r1, [r7, #24]
 800c65c:	69fa      	ldr	r2, [r7, #28]
 800c65e:	e841 2300 	strex	r3, r2, [r1]
 800c662:	617b      	str	r3, [r7, #20]
   return(result);
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d1e6      	bne.n	800c638 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c66a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c66c:	2200      	movs	r2, #0
 800c66e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c670:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c672:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c674:	2b01      	cmp	r3, #1
 800c676:	d107      	bne.n	800c688 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c678:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c67a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c67e:	4619      	mov	r1, r3
 800c680:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c682:	f7fe fe9f 	bl	800b3c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c686:	e002      	b.n	800c68e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800c688:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c68a:	f7f4 fbad 	bl	8000de8 <HAL_UART_RxCpltCallback>
}
 800c68e:	bf00      	nop
 800c690:	3770      	adds	r7, #112	@ 0x70
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}

0800c696 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c696:	b580      	push	{r7, lr}
 800c698:	b084      	sub	sp, #16
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6a2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6ae:	2b01      	cmp	r3, #1
 800c6b0:	d109      	bne.n	800c6c6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c6b8:	085b      	lsrs	r3, r3, #1
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	4619      	mov	r1, r3
 800c6be:	68f8      	ldr	r0, [r7, #12]
 800c6c0:	f7fe fe80 	bl	800b3c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c6c4:	e002      	b.n	800c6cc <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c6c6:	68f8      	ldr	r0, [r7, #12]
 800c6c8:	f7fe fe68 	bl	800b39c <HAL_UART_RxHalfCpltCallback>
}
 800c6cc:	bf00      	nop
 800c6ce:	3710      	adds	r7, #16
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b086      	sub	sp, #24
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6e0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c6e8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c6f0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	689b      	ldr	r3, [r3, #8]
 800c6f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c6fc:	2b80      	cmp	r3, #128	@ 0x80
 800c6fe:	d109      	bne.n	800c714 <UART_DMAError+0x40>
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	2b21      	cmp	r3, #33	@ 0x21
 800c704:	d106      	bne.n	800c714 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	2200      	movs	r2, #0
 800c70a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c70e:	6978      	ldr	r0, [r7, #20]
 800c710:	f7ff fe2c 	bl	800c36c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	689b      	ldr	r3, [r3, #8]
 800c71a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c71e:	2b40      	cmp	r3, #64	@ 0x40
 800c720:	d109      	bne.n	800c736 <UART_DMAError+0x62>
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	2b22      	cmp	r3, #34	@ 0x22
 800c726:	d106      	bne.n	800c736 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c730:	6978      	ldr	r0, [r7, #20]
 800c732:	f7ff fe5d 	bl	800c3f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c73c:	f043 0210 	orr.w	r2, r3, #16
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c746:	6978      	ldr	r0, [r7, #20]
 800c748:	f7fe fe32 	bl	800b3b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c74c:	bf00      	nop
 800c74e:	3718      	adds	r7, #24
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c760:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	2200      	movs	r2, #0
 800c766:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2200      	movs	r2, #0
 800c76e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c772:	68f8      	ldr	r0, [r7, #12]
 800c774:	f7fe fe1c 	bl	800b3b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c778:	bf00      	nop
 800c77a:	3710      	adds	r7, #16
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b088      	sub	sp, #32
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	e853 3f00 	ldrex	r3, [r3]
 800c794:	60bb      	str	r3, [r7, #8]
   return(result);
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c79c:	61fb      	str	r3, [r7, #28]
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	69fb      	ldr	r3, [r7, #28]
 800c7a6:	61bb      	str	r3, [r7, #24]
 800c7a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7aa:	6979      	ldr	r1, [r7, #20]
 800c7ac:	69ba      	ldr	r2, [r7, #24]
 800c7ae:	e841 2300 	strex	r3, r2, [r1]
 800c7b2:	613b      	str	r3, [r7, #16]
   return(result);
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d1e6      	bne.n	800c788 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2220      	movs	r2, #32
 800c7be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f7fe fdd3 	bl	800b374 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7ce:	bf00      	nop
 800c7d0:	3720      	adds	r7, #32
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}

0800c7d6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c7d6:	b480      	push	{r7}
 800c7d8:	b083      	sub	sp, #12
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c7de:	bf00      	nop
 800c7e0:	370c      	adds	r7, #12
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr

0800c7ea <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c7ea:	b480      	push	{r7}
 800c7ec:	b083      	sub	sp, #12
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c7f2:	bf00      	nop
 800c7f4:	370c      	adds	r7, #12
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fc:	4770      	bx	lr

0800c7fe <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c7fe:	b480      	push	{r7}
 800c800:	b083      	sub	sp, #12
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c806:	bf00      	nop
 800c808:	370c      	adds	r7, #12
 800c80a:	46bd      	mov	sp, r7
 800c80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c810:	4770      	bx	lr

0800c812 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c812:	b480      	push	{r7}
 800c814:	b085      	sub	sp, #20
 800c816:	af00      	add	r7, sp, #0
 800c818:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c820:	2b01      	cmp	r3, #1
 800c822:	d101      	bne.n	800c828 <HAL_UARTEx_DisableFifoMode+0x16>
 800c824:	2302      	movs	r3, #2
 800c826:	e027      	b.n	800c878 <HAL_UARTEx_DisableFifoMode+0x66>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2201      	movs	r2, #1
 800c82c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2224      	movs	r2, #36	@ 0x24
 800c834:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	681a      	ldr	r2, [r3, #0]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f022 0201 	bic.w	r2, r2, #1
 800c84e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c856:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2200      	movs	r2, #0
 800c85c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	68fa      	ldr	r2, [r7, #12]
 800c864:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2220      	movs	r2, #32
 800c86a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2200      	movs	r2, #0
 800c872:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c876:	2300      	movs	r3, #0
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3714      	adds	r7, #20
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr

0800c884 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b084      	sub	sp, #16
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c894:	2b01      	cmp	r3, #1
 800c896:	d101      	bne.n	800c89c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c898:	2302      	movs	r3, #2
 800c89a:	e02d      	b.n	800c8f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2224      	movs	r2, #36	@ 0x24
 800c8a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f022 0201 	bic.w	r2, r2, #1
 800c8c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	689b      	ldr	r3, [r3, #8]
 800c8ca:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	683a      	ldr	r2, [r7, #0]
 800c8d4:	430a      	orrs	r2, r1
 800c8d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 f84f 	bl	800c97c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	68fa      	ldr	r2, [r7, #12]
 800c8e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2220      	movs	r2, #32
 800c8ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c8f6:	2300      	movs	r3, #0
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3710      	adds	r7, #16
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c910:	2b01      	cmp	r3, #1
 800c912:	d101      	bne.n	800c918 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c914:	2302      	movs	r3, #2
 800c916:	e02d      	b.n	800c974 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2201      	movs	r2, #1
 800c91c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2224      	movs	r2, #36	@ 0x24
 800c924:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	681a      	ldr	r2, [r3, #0]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f022 0201 	bic.w	r2, r2, #1
 800c93e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	689b      	ldr	r3, [r3, #8]
 800c946:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	683a      	ldr	r2, [r7, #0]
 800c950:	430a      	orrs	r2, r1
 800c952:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f000 f811 	bl	800c97c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	68fa      	ldr	r2, [r7, #12]
 800c960:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2220      	movs	r2, #32
 800c966:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2200      	movs	r2, #0
 800c96e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c972:	2300      	movs	r3, #0
}
 800c974:	4618      	mov	r0, r3
 800c976:	3710      	adds	r7, #16
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b085      	sub	sp, #20
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d108      	bne.n	800c99e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2201      	movs	r2, #1
 800c990:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2201      	movs	r2, #1
 800c998:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c99c:	e031      	b.n	800ca02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c99e:	2310      	movs	r3, #16
 800c9a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c9a2:	2310      	movs	r3, #16
 800c9a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	689b      	ldr	r3, [r3, #8]
 800c9ac:	0e5b      	lsrs	r3, r3, #25
 800c9ae:	b2db      	uxtb	r3, r3
 800c9b0:	f003 0307 	and.w	r3, r3, #7
 800c9b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	689b      	ldr	r3, [r3, #8]
 800c9bc:	0f5b      	lsrs	r3, r3, #29
 800c9be:	b2db      	uxtb	r3, r3
 800c9c0:	f003 0307 	and.w	r3, r3, #7
 800c9c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c9c6:	7bbb      	ldrb	r3, [r7, #14]
 800c9c8:	7b3a      	ldrb	r2, [r7, #12]
 800c9ca:	4911      	ldr	r1, [pc, #68]	@ (800ca10 <UARTEx_SetNbDataToProcess+0x94>)
 800c9cc:	5c8a      	ldrb	r2, [r1, r2]
 800c9ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c9d2:	7b3a      	ldrb	r2, [r7, #12]
 800c9d4:	490f      	ldr	r1, [pc, #60]	@ (800ca14 <UARTEx_SetNbDataToProcess+0x98>)
 800c9d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c9d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9dc:	b29a      	uxth	r2, r3
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c9e4:	7bfb      	ldrb	r3, [r7, #15]
 800c9e6:	7b7a      	ldrb	r2, [r7, #13]
 800c9e8:	4909      	ldr	r1, [pc, #36]	@ (800ca10 <UARTEx_SetNbDataToProcess+0x94>)
 800c9ea:	5c8a      	ldrb	r2, [r1, r2]
 800c9ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c9f0:	7b7a      	ldrb	r2, [r7, #13]
 800c9f2:	4908      	ldr	r1, [pc, #32]	@ (800ca14 <UARTEx_SetNbDataToProcess+0x98>)
 800c9f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c9f6:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9fa:	b29a      	uxth	r2, r3
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ca02:	bf00      	nop
 800ca04:	3714      	adds	r7, #20
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr
 800ca0e:	bf00      	nop
 800ca10:	0801408c 	.word	0x0801408c
 800ca14:	08014094 	.word	0x08014094

0800ca18 <__NVIC_SetPriority>:
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b083      	sub	sp, #12
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	4603      	mov	r3, r0
 800ca20:	6039      	str	r1, [r7, #0]
 800ca22:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ca24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	db0a      	blt.n	800ca42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	b2da      	uxtb	r2, r3
 800ca30:	490c      	ldr	r1, [pc, #48]	@ (800ca64 <__NVIC_SetPriority+0x4c>)
 800ca32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ca36:	0112      	lsls	r2, r2, #4
 800ca38:	b2d2      	uxtb	r2, r2
 800ca3a:	440b      	add	r3, r1
 800ca3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ca40:	e00a      	b.n	800ca58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	b2da      	uxtb	r2, r3
 800ca46:	4908      	ldr	r1, [pc, #32]	@ (800ca68 <__NVIC_SetPriority+0x50>)
 800ca48:	88fb      	ldrh	r3, [r7, #6]
 800ca4a:	f003 030f 	and.w	r3, r3, #15
 800ca4e:	3b04      	subs	r3, #4
 800ca50:	0112      	lsls	r2, r2, #4
 800ca52:	b2d2      	uxtb	r2, r2
 800ca54:	440b      	add	r3, r1
 800ca56:	761a      	strb	r2, [r3, #24]
}
 800ca58:	bf00      	nop
 800ca5a:	370c      	adds	r7, #12
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr
 800ca64:	e000e100 	.word	0xe000e100
 800ca68:	e000ed00 	.word	0xe000ed00

0800ca6c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ca70:	4b05      	ldr	r3, [pc, #20]	@ (800ca88 <SysTick_Handler+0x1c>)
 800ca72:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ca74:	f002 f998 	bl	800eda8 <xTaskGetSchedulerState>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b01      	cmp	r3, #1
 800ca7c:	d001      	beq.n	800ca82 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ca7e:	f003 fa9b 	bl	800ffb8 <xPortSysTickHandler>
  }
}
 800ca82:	bf00      	nop
 800ca84:	bd80      	pop	{r7, pc}
 800ca86:	bf00      	nop
 800ca88:	e000e010 	.word	0xe000e010

0800ca8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ca90:	2100      	movs	r1, #0
 800ca92:	f06f 0004 	mvn.w	r0, #4
 800ca96:	f7ff ffbf 	bl	800ca18 <__NVIC_SetPriority>
#endif
}
 800ca9a:	bf00      	nop
 800ca9c:	bd80      	pop	{r7, pc}
	...

0800caa0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800caa0:	b480      	push	{r7}
 800caa2:	b083      	sub	sp, #12
 800caa4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800caa6:	f3ef 8305 	mrs	r3, IPSR
 800caaa:	603b      	str	r3, [r7, #0]
  return(result);
 800caac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d003      	beq.n	800caba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cab2:	f06f 0305 	mvn.w	r3, #5
 800cab6:	607b      	str	r3, [r7, #4]
 800cab8:	e00c      	b.n	800cad4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800caba:	4b0a      	ldr	r3, [pc, #40]	@ (800cae4 <osKernelInitialize+0x44>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d105      	bne.n	800cace <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cac2:	4b08      	ldr	r3, [pc, #32]	@ (800cae4 <osKernelInitialize+0x44>)
 800cac4:	2201      	movs	r2, #1
 800cac6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cac8:	2300      	movs	r3, #0
 800caca:	607b      	str	r3, [r7, #4]
 800cacc:	e002      	b.n	800cad4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cace:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cad2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cad4:	687b      	ldr	r3, [r7, #4]
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	370c      	adds	r7, #12
 800cada:	46bd      	mov	sp, r7
 800cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae0:	4770      	bx	lr
 800cae2:	bf00      	nop
 800cae4:	240017e0 	.word	0x240017e0

0800cae8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cae8:	b580      	push	{r7, lr}
 800caea:	b082      	sub	sp, #8
 800caec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800caee:	f3ef 8305 	mrs	r3, IPSR
 800caf2:	603b      	str	r3, [r7, #0]
  return(result);
 800caf4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d003      	beq.n	800cb02 <osKernelStart+0x1a>
    stat = osErrorISR;
 800cafa:	f06f 0305 	mvn.w	r3, #5
 800cafe:	607b      	str	r3, [r7, #4]
 800cb00:	e010      	b.n	800cb24 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cb02:	4b0b      	ldr	r3, [pc, #44]	@ (800cb30 <osKernelStart+0x48>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	d109      	bne.n	800cb1e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cb0a:	f7ff ffbf 	bl	800ca8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cb0e:	4b08      	ldr	r3, [pc, #32]	@ (800cb30 <osKernelStart+0x48>)
 800cb10:	2202      	movs	r2, #2
 800cb12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cb14:	f001 fcc2 	bl	800e49c <vTaskStartScheduler>
      stat = osOK;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	607b      	str	r3, [r7, #4]
 800cb1c:	e002      	b.n	800cb24 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cb1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cb22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cb24:	687b      	ldr	r3, [r7, #4]
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3708      	adds	r7, #8
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
 800cb2e:	bf00      	nop
 800cb30:	240017e0 	.word	0x240017e0

0800cb34 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b082      	sub	sp, #8
 800cb38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb3a:	f3ef 8305 	mrs	r3, IPSR
 800cb3e:	603b      	str	r3, [r7, #0]
  return(result);
 800cb40:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d003      	beq.n	800cb4e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800cb46:	f001 fdd5 	bl	800e6f4 <xTaskGetTickCountFromISR>
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	e002      	b.n	800cb54 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800cb4e:	f001 fdc1 	bl	800e6d4 <xTaskGetTickCount>
 800cb52:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800cb54:	687b      	ldr	r3, [r7, #4]
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3708      	adds	r7, #8
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b08e      	sub	sp, #56	@ 0x38
 800cb62:	af04      	add	r7, sp, #16
 800cb64:	60f8      	str	r0, [r7, #12]
 800cb66:	60b9      	str	r1, [r7, #8]
 800cb68:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb6e:	f3ef 8305 	mrs	r3, IPSR
 800cb72:	617b      	str	r3, [r7, #20]
  return(result);
 800cb74:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d17e      	bne.n	800cc78 <osThreadNew+0x11a>
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d07b      	beq.n	800cc78 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cb80:	2380      	movs	r3, #128	@ 0x80
 800cb82:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cb84:	2318      	movs	r3, #24
 800cb86:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800cb8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cb90:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d045      	beq.n	800cc24 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d002      	beq.n	800cba6 <osThreadNew+0x48>
        name = attr->name;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	699b      	ldr	r3, [r3, #24]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d002      	beq.n	800cbb4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	699b      	ldr	r3, [r3, #24]
 800cbb2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cbb4:	69fb      	ldr	r3, [r7, #28]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d008      	beq.n	800cbcc <osThreadNew+0x6e>
 800cbba:	69fb      	ldr	r3, [r7, #28]
 800cbbc:	2b38      	cmp	r3, #56	@ 0x38
 800cbbe:	d805      	bhi.n	800cbcc <osThreadNew+0x6e>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	f003 0301 	and.w	r3, r3, #1
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d001      	beq.n	800cbd0 <osThreadNew+0x72>
        return (NULL);
 800cbcc:	2300      	movs	r3, #0
 800cbce:	e054      	b.n	800cc7a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	695b      	ldr	r3, [r3, #20]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d003      	beq.n	800cbe0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	695b      	ldr	r3, [r3, #20]
 800cbdc:	089b      	lsrs	r3, r3, #2
 800cbde:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	689b      	ldr	r3, [r3, #8]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d00e      	beq.n	800cc06 <osThreadNew+0xa8>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	68db      	ldr	r3, [r3, #12]
 800cbec:	2ba7      	cmp	r3, #167	@ 0xa7
 800cbee:	d90a      	bls.n	800cc06 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d006      	beq.n	800cc06 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	695b      	ldr	r3, [r3, #20]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d002      	beq.n	800cc06 <osThreadNew+0xa8>
        mem = 1;
 800cc00:	2301      	movs	r3, #1
 800cc02:	61bb      	str	r3, [r7, #24]
 800cc04:	e010      	b.n	800cc28 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	689b      	ldr	r3, [r3, #8]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d10c      	bne.n	800cc28 <osThreadNew+0xca>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	68db      	ldr	r3, [r3, #12]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d108      	bne.n	800cc28 <osThreadNew+0xca>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	691b      	ldr	r3, [r3, #16]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d104      	bne.n	800cc28 <osThreadNew+0xca>
          mem = 0;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	61bb      	str	r3, [r7, #24]
 800cc22:	e001      	b.n	800cc28 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800cc24:	2300      	movs	r3, #0
 800cc26:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cc28:	69bb      	ldr	r3, [r7, #24]
 800cc2a:	2b01      	cmp	r3, #1
 800cc2c:	d110      	bne.n	800cc50 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cc32:	687a      	ldr	r2, [r7, #4]
 800cc34:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cc36:	9202      	str	r2, [sp, #8]
 800cc38:	9301      	str	r3, [sp, #4]
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	9300      	str	r3, [sp, #0]
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	6a3a      	ldr	r2, [r7, #32]
 800cc42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cc44:	68f8      	ldr	r0, [r7, #12]
 800cc46:	f001 fa35 	bl	800e0b4 <xTaskCreateStatic>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	613b      	str	r3, [r7, #16]
 800cc4e:	e013      	b.n	800cc78 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cc50:	69bb      	ldr	r3, [r7, #24]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d110      	bne.n	800cc78 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cc56:	6a3b      	ldr	r3, [r7, #32]
 800cc58:	b29a      	uxth	r2, r3
 800cc5a:	f107 0310 	add.w	r3, r7, #16
 800cc5e:	9301      	str	r3, [sp, #4]
 800cc60:	69fb      	ldr	r3, [r7, #28]
 800cc62:	9300      	str	r3, [sp, #0]
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cc68:	68f8      	ldr	r0, [r7, #12]
 800cc6a:	f001 fa83 	bl	800e174 <xTaskCreate>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d001      	beq.n	800cc78 <osThreadNew+0x11a>
            hTask = NULL;
 800cc74:	2300      	movs	r3, #0
 800cc76:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cc78:	693b      	ldr	r3, [r7, #16]
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3728      	adds	r7, #40	@ 0x28
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}
	...

0800cc84 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b088      	sub	sp, #32
 800cc88:	af02      	add	r7, sp, #8
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d002      	beq.n	800cc9e <osThreadFlagsSet+0x1a>
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	da03      	bge.n	800cca6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800cc9e:	f06f 0303 	mvn.w	r3, #3
 800cca2:	60fb      	str	r3, [r7, #12]
 800cca4:	e035      	b.n	800cd12 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800cca6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ccaa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccac:	f3ef 8305 	mrs	r3, IPSR
 800ccb0:	613b      	str	r3, [r7, #16]
  return(result);
 800ccb2:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d01f      	beq.n	800ccf8 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800ccbc:	f107 0308 	add.w	r3, r7, #8
 800ccc0:	9300      	str	r3, [sp, #0]
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	2201      	movs	r2, #1
 800ccc6:	6839      	ldr	r1, [r7, #0]
 800ccc8:	6978      	ldr	r0, [r7, #20]
 800ccca:	f002 fb1d 	bl	800f308 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800ccce:	f107 030c 	add.w	r3, r7, #12
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	9200      	str	r2, [sp, #0]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	2100      	movs	r1, #0
 800ccda:	6978      	ldr	r0, [r7, #20]
 800ccdc:	f002 fb14 	bl	800f308 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d015      	beq.n	800cd12 <osThreadFlagsSet+0x8e>
 800cce6:	4b0d      	ldr	r3, [pc, #52]	@ (800cd1c <osThreadFlagsSet+0x98>)
 800cce8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ccec:	601a      	str	r2, [r3, #0]
 800ccee:	f3bf 8f4f 	dsb	sy
 800ccf2:	f3bf 8f6f 	isb	sy
 800ccf6:	e00c      	b.n	800cd12 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	6839      	ldr	r1, [r7, #0]
 800ccfe:	6978      	ldr	r0, [r7, #20]
 800cd00:	f002 fa40 	bl	800f184 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800cd04:	f107 030c 	add.w	r3, r7, #12
 800cd08:	2200      	movs	r2, #0
 800cd0a:	2100      	movs	r1, #0
 800cd0c:	6978      	ldr	r0, [r7, #20]
 800cd0e:	f002 fa39 	bl	800f184 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800cd12:	68fb      	ldr	r3, [r7, #12]
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3718      	adds	r7, #24
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	e000ed04 	.word	0xe000ed04

0800cd20 <osThreadFlagsGet>:

  /* Return flags before clearing */
  return (rflags);
}

uint32_t osThreadFlagsGet (void) {
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b084      	sub	sp, #16
 800cd24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd26:	f3ef 8305 	mrs	r3, IPSR
 800cd2a:	60bb      	str	r3, [r7, #8]
  return(result);
 800cd2c:	68bb      	ldr	r3, [r7, #8]
  TaskHandle_t hTask;
  uint32_t rflags;

  if (IS_IRQ()) {
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d003      	beq.n	800cd3a <osThreadFlagsGet+0x1a>
    rflags = (uint32_t)osErrorISR;
 800cd32:	f06f 0305 	mvn.w	r3, #5
 800cd36:	607b      	str	r3, [r7, #4]
 800cd38:	e00e      	b.n	800cd58 <osThreadFlagsGet+0x38>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800cd3a:	f002 f825 	bl	800ed88 <xTaskGetCurrentTaskHandle>
 800cd3e:	60f8      	str	r0, [r7, #12]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags) != pdPASS) {
 800cd40:	1d3b      	adds	r3, r7, #4
 800cd42:	2200      	movs	r2, #0
 800cd44:	2100      	movs	r1, #0
 800cd46:	68f8      	ldr	r0, [r7, #12]
 800cd48:	f002 fa1c 	bl	800f184 <xTaskGenericNotify>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	2b01      	cmp	r3, #1
 800cd50:	d002      	beq.n	800cd58 <osThreadFlagsGet+0x38>
      rflags = (uint32_t)osError;
 800cd52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cd56:	607b      	str	r3, [r7, #4]
    }
  }

  return (rflags);
 800cd58:	687b      	ldr	r3, [r7, #4]
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3710      	adds	r7, #16
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}

0800cd62 <osThreadFlagsWait>:

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800cd62:	b580      	push	{r7, lr}
 800cd64:	b08c      	sub	sp, #48	@ 0x30
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	60f8      	str	r0, [r7, #12]
 800cd6a:	60b9      	str	r1, [r7, #8]
 800cd6c:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd6e:	f3ef 8305 	mrs	r3, IPSR
 800cd72:	617b      	str	r3, [r7, #20]
  return(result);
 800cd74:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d003      	beq.n	800cd82 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800cd7a:	f06f 0305 	mvn.w	r3, #5
 800cd7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cd80:	e06b      	b.n	800ce5a <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	da03      	bge.n	800cd90 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800cd88:	f06f 0303 	mvn.w	r3, #3
 800cd8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cd8e:	e064      	b.n	800ce5a <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	f003 0302 	and.w	r3, r3, #2
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d002      	beq.n	800cda0 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cd9e:	e001      	b.n	800cda4 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800cda4:	2300      	movs	r3, #0
 800cda6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800cdac:	f001 fc92 	bl	800e6d4 <xTaskGetTickCount>
 800cdb0:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800cdb2:	f107 0210 	add.w	r2, r7, #16
 800cdb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cdba:	2000      	movs	r0, #0
 800cdbc:	f002 f982 	bl	800f0c4 <xTaskNotifyWait>
 800cdc0:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800cdc2:	69fb      	ldr	r3, [r7, #28]
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d137      	bne.n	800ce38 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800cdc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	4013      	ands	r3, r2
 800cdce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	f003 0301 	and.w	r3, r3, #1
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d00c      	beq.n	800cdfc <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800cde2:	68fa      	ldr	r2, [r7, #12]
 800cde4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cde6:	4013      	ands	r3, r2
 800cde8:	68fa      	ldr	r2, [r7, #12]
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d032      	beq.n	800ce54 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d10f      	bne.n	800ce14 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800cdf4:	f06f 0302 	mvn.w	r3, #2
 800cdf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800cdfa:	e02e      	b.n	800ce5a <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800cdfc:	68fa      	ldr	r2, [r7, #12]
 800cdfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce00:	4013      	ands	r3, r2
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d128      	bne.n	800ce58 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d103      	bne.n	800ce14 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800ce0c:	f06f 0302 	mvn.w	r3, #2
 800ce10:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800ce12:	e022      	b.n	800ce5a <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800ce14:	f001 fc5e 	bl	800e6d4 <xTaskGetTickCount>
 800ce18:	4602      	mov	r2, r0
 800ce1a:	6a3b      	ldr	r3, [r7, #32]
 800ce1c:	1ad3      	subs	r3, r2, r3
 800ce1e:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800ce20:	69ba      	ldr	r2, [r7, #24]
 800ce22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d902      	bls.n	800ce2e <osThreadFlagsWait+0xcc>
          tout  = 0;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce2c:	e00e      	b.n	800ce4c <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800ce2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce30:	69bb      	ldr	r3, [r7, #24]
 800ce32:	1ad3      	subs	r3, r2, r3
 800ce34:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce36:	e009      	b.n	800ce4c <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d103      	bne.n	800ce46 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800ce3e:	f06f 0302 	mvn.w	r3, #2
 800ce42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ce44:	e002      	b.n	800ce4c <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800ce46:	f06f 0301 	mvn.w	r3, #1
 800ce4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800ce4c:	69fb      	ldr	r3, [r7, #28]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d1af      	bne.n	800cdb2 <osThreadFlagsWait+0x50>
 800ce52:	e002      	b.n	800ce5a <osThreadFlagsWait+0xf8>
            break;
 800ce54:	bf00      	nop
 800ce56:	e000      	b.n	800ce5a <osThreadFlagsWait+0xf8>
            break;
 800ce58:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800ce5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3730      	adds	r7, #48	@ 0x30
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}

0800ce64 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce6c:	f3ef 8305 	mrs	r3, IPSR
 800ce70:	60bb      	str	r3, [r7, #8]
  return(result);
 800ce72:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d003      	beq.n	800ce80 <osDelay+0x1c>
    stat = osErrorISR;
 800ce78:	f06f 0305 	mvn.w	r3, #5
 800ce7c:	60fb      	str	r3, [r7, #12]
 800ce7e:	e007      	b.n	800ce90 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ce80:	2300      	movs	r3, #0
 800ce82:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d002      	beq.n	800ce90 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f001 fad0 	bl	800e430 <vTaskDelay>
    }
  }

  return (stat);
 800ce90:	68fb      	ldr	r3, [r7, #12]
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3710      	adds	r7, #16
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}

0800ce9a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ce9a:	b580      	push	{r7, lr}
 800ce9c:	b088      	sub	sp, #32
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800cea2:	2300      	movs	r3, #0
 800cea4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cea6:	f3ef 8305 	mrs	r3, IPSR
 800ceaa:	60bb      	str	r3, [r7, #8]
  return(result);
 800ceac:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d174      	bne.n	800cf9c <osMutexNew+0x102>
    if (attr != NULL) {
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d003      	beq.n	800cec0 <osMutexNew+0x26>
      type = attr->attr_bits;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	685b      	ldr	r3, [r3, #4]
 800cebc:	61bb      	str	r3, [r7, #24]
 800cebe:	e001      	b.n	800cec4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800cec0:	2300      	movs	r3, #0
 800cec2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800cec4:	69bb      	ldr	r3, [r7, #24]
 800cec6:	f003 0301 	and.w	r3, r3, #1
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d002      	beq.n	800ced4 <osMutexNew+0x3a>
      rmtx = 1U;
 800cece:	2301      	movs	r3, #1
 800ced0:	617b      	str	r3, [r7, #20]
 800ced2:	e001      	b.n	800ced8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800ced4:	2300      	movs	r3, #0
 800ced6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ced8:	69bb      	ldr	r3, [r7, #24]
 800ceda:	f003 0308 	and.w	r3, r3, #8
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d15c      	bne.n	800cf9c <osMutexNew+0x102>
      mem = -1;
 800cee2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cee6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d015      	beq.n	800cf1a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	689b      	ldr	r3, [r3, #8]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d006      	beq.n	800cf04 <osMutexNew+0x6a>
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	68db      	ldr	r3, [r3, #12]
 800cefa:	2b4f      	cmp	r3, #79	@ 0x4f
 800cefc:	d902      	bls.n	800cf04 <osMutexNew+0x6a>
          mem = 1;
 800cefe:	2301      	movs	r3, #1
 800cf00:	613b      	str	r3, [r7, #16]
 800cf02:	e00c      	b.n	800cf1e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	689b      	ldr	r3, [r3, #8]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d108      	bne.n	800cf1e <osMutexNew+0x84>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	68db      	ldr	r3, [r3, #12]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d104      	bne.n	800cf1e <osMutexNew+0x84>
            mem = 0;
 800cf14:	2300      	movs	r3, #0
 800cf16:	613b      	str	r3, [r7, #16]
 800cf18:	e001      	b.n	800cf1e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d112      	bne.n	800cf4a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d007      	beq.n	800cf3a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	689b      	ldr	r3, [r3, #8]
 800cf2e:	4619      	mov	r1, r3
 800cf30:	2004      	movs	r0, #4
 800cf32:	f000 fb20 	bl	800d576 <xQueueCreateMutexStatic>
 800cf36:	61f8      	str	r0, [r7, #28]
 800cf38:	e016      	b.n	800cf68 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	689b      	ldr	r3, [r3, #8]
 800cf3e:	4619      	mov	r1, r3
 800cf40:	2001      	movs	r0, #1
 800cf42:	f000 fb18 	bl	800d576 <xQueueCreateMutexStatic>
 800cf46:	61f8      	str	r0, [r7, #28]
 800cf48:	e00e      	b.n	800cf68 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d10b      	bne.n	800cf68 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d004      	beq.n	800cf60 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800cf56:	2004      	movs	r0, #4
 800cf58:	f000 faf5 	bl	800d546 <xQueueCreateMutex>
 800cf5c:	61f8      	str	r0, [r7, #28]
 800cf5e:	e003      	b.n	800cf68 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800cf60:	2001      	movs	r0, #1
 800cf62:	f000 faf0 	bl	800d546 <xQueueCreateMutex>
 800cf66:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800cf68:	69fb      	ldr	r3, [r7, #28]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d00c      	beq.n	800cf88 <osMutexNew+0xee>
        if (attr != NULL) {
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d003      	beq.n	800cf7c <osMutexNew+0xe2>
          name = attr->name;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	60fb      	str	r3, [r7, #12]
 800cf7a:	e001      	b.n	800cf80 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800cf80:	68f9      	ldr	r1, [r7, #12]
 800cf82:	69f8      	ldr	r0, [r7, #28]
 800cf84:	f001 f838 	bl	800dff8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800cf88:	69fb      	ldr	r3, [r7, #28]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d006      	beq.n	800cf9c <osMutexNew+0x102>
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d003      	beq.n	800cf9c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800cf94:	69fb      	ldr	r3, [r7, #28]
 800cf96:	f043 0301 	orr.w	r3, r3, #1
 800cf9a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800cf9c:	69fb      	ldr	r3, [r7, #28]
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3720      	adds	r7, #32
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}

0800cfa6 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800cfa6:	b580      	push	{r7, lr}
 800cfa8:	b086      	sub	sp, #24
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	6078      	str	r0, [r7, #4]
 800cfae:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f023 0301 	bic.w	r3, r3, #1
 800cfb6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f003 0301 	and.w	r3, r3, #1
 800cfbe:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfc4:	f3ef 8305 	mrs	r3, IPSR
 800cfc8:	60bb      	str	r3, [r7, #8]
  return(result);
 800cfca:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d003      	beq.n	800cfd8 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800cfd0:	f06f 0305 	mvn.w	r3, #5
 800cfd4:	617b      	str	r3, [r7, #20]
 800cfd6:	e02c      	b.n	800d032 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d103      	bne.n	800cfe6 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800cfde:	f06f 0303 	mvn.w	r3, #3
 800cfe2:	617b      	str	r3, [r7, #20]
 800cfe4:	e025      	b.n	800d032 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d011      	beq.n	800d010 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800cfec:	6839      	ldr	r1, [r7, #0]
 800cfee:	6938      	ldr	r0, [r7, #16]
 800cff0:	f000 fb11 	bl	800d616 <xQueueTakeMutexRecursive>
 800cff4:	4603      	mov	r3, r0
 800cff6:	2b01      	cmp	r3, #1
 800cff8:	d01b      	beq.n	800d032 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d003      	beq.n	800d008 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800d000:	f06f 0301 	mvn.w	r3, #1
 800d004:	617b      	str	r3, [r7, #20]
 800d006:	e014      	b.n	800d032 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d008:	f06f 0302 	mvn.w	r3, #2
 800d00c:	617b      	str	r3, [r7, #20]
 800d00e:	e010      	b.n	800d032 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800d010:	6839      	ldr	r1, [r7, #0]
 800d012:	6938      	ldr	r0, [r7, #16]
 800d014:	f000 fdb8 	bl	800db88 <xQueueSemaphoreTake>
 800d018:	4603      	mov	r3, r0
 800d01a:	2b01      	cmp	r3, #1
 800d01c:	d009      	beq.n	800d032 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d003      	beq.n	800d02c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800d024:	f06f 0301 	mvn.w	r3, #1
 800d028:	617b      	str	r3, [r7, #20]
 800d02a:	e002      	b.n	800d032 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d02c:	f06f 0302 	mvn.w	r3, #2
 800d030:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800d032:	697b      	ldr	r3, [r7, #20]
}
 800d034:	4618      	mov	r0, r3
 800d036:	3718      	adds	r7, #24
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b086      	sub	sp, #24
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f023 0301 	bic.w	r3, r3, #1
 800d04a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f003 0301 	and.w	r3, r3, #1
 800d052:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800d054:	2300      	movs	r3, #0
 800d056:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d058:	f3ef 8305 	mrs	r3, IPSR
 800d05c:	60bb      	str	r3, [r7, #8]
  return(result);
 800d05e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800d060:	2b00      	cmp	r3, #0
 800d062:	d003      	beq.n	800d06c <osMutexRelease+0x30>
    stat = osErrorISR;
 800d064:	f06f 0305 	mvn.w	r3, #5
 800d068:	617b      	str	r3, [r7, #20]
 800d06a:	e01f      	b.n	800d0ac <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d103      	bne.n	800d07a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800d072:	f06f 0303 	mvn.w	r3, #3
 800d076:	617b      	str	r3, [r7, #20]
 800d078:	e018      	b.n	800d0ac <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d009      	beq.n	800d094 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800d080:	6938      	ldr	r0, [r7, #16]
 800d082:	f000 fa93 	bl	800d5ac <xQueueGiveMutexRecursive>
 800d086:	4603      	mov	r3, r0
 800d088:	2b01      	cmp	r3, #1
 800d08a:	d00f      	beq.n	800d0ac <osMutexRelease+0x70>
        stat = osErrorResource;
 800d08c:	f06f 0302 	mvn.w	r3, #2
 800d090:	617b      	str	r3, [r7, #20]
 800d092:	e00b      	b.n	800d0ac <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800d094:	2300      	movs	r3, #0
 800d096:	2200      	movs	r2, #0
 800d098:	2100      	movs	r1, #0
 800d09a:	6938      	ldr	r0, [r7, #16]
 800d09c:	f000 faf2 	bl	800d684 <xQueueGenericSend>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	2b01      	cmp	r3, #1
 800d0a4:	d002      	beq.n	800d0ac <osMutexRelease+0x70>
        stat = osErrorResource;
 800d0a6:	f06f 0302 	mvn.w	r3, #2
 800d0aa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d0ac:	697b      	ldr	r3, [r7, #20]
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3718      	adds	r7, #24
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}
	...

0800d0b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d0b8:	b480      	push	{r7}
 800d0ba:	b085      	sub	sp, #20
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	60f8      	str	r0, [r7, #12]
 800d0c0:	60b9      	str	r1, [r7, #8]
 800d0c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	4a07      	ldr	r2, [pc, #28]	@ (800d0e4 <vApplicationGetIdleTaskMemory+0x2c>)
 800d0c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	4a06      	ldr	r2, [pc, #24]	@ (800d0e8 <vApplicationGetIdleTaskMemory+0x30>)
 800d0ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2280      	movs	r2, #128	@ 0x80
 800d0d4:	601a      	str	r2, [r3, #0]
}
 800d0d6:	bf00      	nop
 800d0d8:	3714      	adds	r7, #20
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr
 800d0e2:	bf00      	nop
 800d0e4:	240017e4 	.word	0x240017e4
 800d0e8:	2400188c 	.word	0x2400188c

0800d0ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d0ec:	b480      	push	{r7}
 800d0ee:	b085      	sub	sp, #20
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	60b9      	str	r1, [r7, #8]
 800d0f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	4a07      	ldr	r2, [pc, #28]	@ (800d118 <vApplicationGetTimerTaskMemory+0x2c>)
 800d0fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	4a06      	ldr	r2, [pc, #24]	@ (800d11c <vApplicationGetTimerTaskMemory+0x30>)
 800d102:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d10a:	601a      	str	r2, [r3, #0]
}
 800d10c:	bf00      	nop
 800d10e:	3714      	adds	r7, #20
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr
 800d118:	24001a8c 	.word	0x24001a8c
 800d11c:	24001b34 	.word	0x24001b34

0800d120 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d120:	b480      	push	{r7}
 800d122:	b083      	sub	sp, #12
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f103 0208 	add.w	r2, r3, #8
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d138:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f103 0208 	add.w	r2, r3, #8
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f103 0208 	add.w	r2, r3, #8
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2200      	movs	r2, #0
 800d152:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d154:	bf00      	nop
 800d156:	370c      	adds	r7, #12
 800d158:	46bd      	mov	sp, r7
 800d15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15e:	4770      	bx	lr

0800d160 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d160:	b480      	push	{r7}
 800d162:	b083      	sub	sp, #12
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2200      	movs	r2, #0
 800d16c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d16e:	bf00      	nop
 800d170:	370c      	adds	r7, #12
 800d172:	46bd      	mov	sp, r7
 800d174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d178:	4770      	bx	lr

0800d17a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d17a:	b480      	push	{r7}
 800d17c:	b085      	sub	sp, #20
 800d17e:	af00      	add	r7, sp, #0
 800d180:	6078      	str	r0, [r7, #4]
 800d182:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	68fa      	ldr	r2, [r7, #12]
 800d18e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	689a      	ldr	r2, [r3, #8]
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	689b      	ldr	r3, [r3, #8]
 800d19c:	683a      	ldr	r2, [r7, #0]
 800d19e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	683a      	ldr	r2, [r7, #0]
 800d1a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	687a      	ldr	r2, [r7, #4]
 800d1aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	1c5a      	adds	r2, r3, #1
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	601a      	str	r2, [r3, #0]
}
 800d1b6:	bf00      	nop
 800d1b8:	3714      	adds	r7, #20
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c0:	4770      	bx	lr

0800d1c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d1c2:	b480      	push	{r7}
 800d1c4:	b085      	sub	sp, #20
 800d1c6:	af00      	add	r7, sp, #0
 800d1c8:	6078      	str	r0, [r7, #4]
 800d1ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d1d8:	d103      	bne.n	800d1e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	691b      	ldr	r3, [r3, #16]
 800d1de:	60fb      	str	r3, [r7, #12]
 800d1e0:	e00c      	b.n	800d1fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	3308      	adds	r3, #8
 800d1e6:	60fb      	str	r3, [r7, #12]
 800d1e8:	e002      	b.n	800d1f0 <vListInsert+0x2e>
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	685b      	ldr	r3, [r3, #4]
 800d1ee:	60fb      	str	r3, [r7, #12]
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	68ba      	ldr	r2, [r7, #8]
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d2f6      	bcs.n	800d1ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	685a      	ldr	r2, [r3, #4]
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	685b      	ldr	r3, [r3, #4]
 800d208:	683a      	ldr	r2, [r7, #0]
 800d20a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	68fa      	ldr	r2, [r7, #12]
 800d210:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	683a      	ldr	r2, [r7, #0]
 800d216:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	687a      	ldr	r2, [r7, #4]
 800d21c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	1c5a      	adds	r2, r3, #1
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	601a      	str	r2, [r3, #0]
}
 800d228:	bf00      	nop
 800d22a:	3714      	adds	r7, #20
 800d22c:	46bd      	mov	sp, r7
 800d22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d232:	4770      	bx	lr

0800d234 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d234:	b480      	push	{r7}
 800d236:	b085      	sub	sp, #20
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	691b      	ldr	r3, [r3, #16]
 800d240:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	685b      	ldr	r3, [r3, #4]
 800d246:	687a      	ldr	r2, [r7, #4]
 800d248:	6892      	ldr	r2, [r2, #8]
 800d24a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	689b      	ldr	r3, [r3, #8]
 800d250:	687a      	ldr	r2, [r7, #4]
 800d252:	6852      	ldr	r2, [r2, #4]
 800d254:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	687a      	ldr	r2, [r7, #4]
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d103      	bne.n	800d268 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	689a      	ldr	r2, [r3, #8]
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2200      	movs	r2, #0
 800d26c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	1e5a      	subs	r2, r3, #1
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3714      	adds	r7, #20
 800d280:	46bd      	mov	sp, r7
 800d282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d286:	4770      	bx	lr

0800d288 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b084      	sub	sp, #16
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d10b      	bne.n	800d2b4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d29c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2a0:	f383 8811 	msr	BASEPRI, r3
 800d2a4:	f3bf 8f6f 	isb	sy
 800d2a8:	f3bf 8f4f 	dsb	sy
 800d2ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d2ae:	bf00      	nop
 800d2b0:	bf00      	nop
 800d2b2:	e7fd      	b.n	800d2b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d2b4:	f002 fdf0 	bl	800fe98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	681a      	ldr	r2, [r3, #0]
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2c0:	68f9      	ldr	r1, [r7, #12]
 800d2c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d2c4:	fb01 f303 	mul.w	r3, r1, r3
 800d2c8:	441a      	add	r2, r3
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681a      	ldr	r2, [r3, #0]
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	681a      	ldr	r2, [r3, #0]
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2e4:	3b01      	subs	r3, #1
 800d2e6:	68f9      	ldr	r1, [r7, #12]
 800d2e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d2ea:	fb01 f303 	mul.w	r3, r1, r3
 800d2ee:	441a      	add	r2, r3
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	22ff      	movs	r2, #255	@ 0xff
 800d2f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	22ff      	movs	r2, #255	@ 0xff
 800d300:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d114      	bne.n	800d334 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	691b      	ldr	r3, [r3, #16]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d01a      	beq.n	800d348 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	3310      	adds	r3, #16
 800d316:	4618      	mov	r0, r3
 800d318:	f001 fb70 	bl	800e9fc <xTaskRemoveFromEventList>
 800d31c:	4603      	mov	r3, r0
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d012      	beq.n	800d348 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d322:	4b0d      	ldr	r3, [pc, #52]	@ (800d358 <xQueueGenericReset+0xd0>)
 800d324:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d328:	601a      	str	r2, [r3, #0]
 800d32a:	f3bf 8f4f 	dsb	sy
 800d32e:	f3bf 8f6f 	isb	sy
 800d332:	e009      	b.n	800d348 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	3310      	adds	r3, #16
 800d338:	4618      	mov	r0, r3
 800d33a:	f7ff fef1 	bl	800d120 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	3324      	adds	r3, #36	@ 0x24
 800d342:	4618      	mov	r0, r3
 800d344:	f7ff feec 	bl	800d120 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d348:	f002 fdd8 	bl	800fefc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d34c:	2301      	movs	r3, #1
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3710      	adds	r7, #16
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
 800d356:	bf00      	nop
 800d358:	e000ed04 	.word	0xe000ed04

0800d35c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b08e      	sub	sp, #56	@ 0x38
 800d360:	af02      	add	r7, sp, #8
 800d362:	60f8      	str	r0, [r7, #12]
 800d364:	60b9      	str	r1, [r7, #8]
 800d366:	607a      	str	r2, [r7, #4]
 800d368:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d10b      	bne.n	800d388 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d374:	f383 8811 	msr	BASEPRI, r3
 800d378:	f3bf 8f6f 	isb	sy
 800d37c:	f3bf 8f4f 	dsb	sy
 800d380:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d382:	bf00      	nop
 800d384:	bf00      	nop
 800d386:	e7fd      	b.n	800d384 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d10b      	bne.n	800d3a6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d392:	f383 8811 	msr	BASEPRI, r3
 800d396:	f3bf 8f6f 	isb	sy
 800d39a:	f3bf 8f4f 	dsb	sy
 800d39e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d3a0:	bf00      	nop
 800d3a2:	bf00      	nop
 800d3a4:	e7fd      	b.n	800d3a2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d002      	beq.n	800d3b2 <xQueueGenericCreateStatic+0x56>
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d001      	beq.n	800d3b6 <xQueueGenericCreateStatic+0x5a>
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	e000      	b.n	800d3b8 <xQueueGenericCreateStatic+0x5c>
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d10b      	bne.n	800d3d4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d3bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3c0:	f383 8811 	msr	BASEPRI, r3
 800d3c4:	f3bf 8f6f 	isb	sy
 800d3c8:	f3bf 8f4f 	dsb	sy
 800d3cc:	623b      	str	r3, [r7, #32]
}
 800d3ce:	bf00      	nop
 800d3d0:	bf00      	nop
 800d3d2:	e7fd      	b.n	800d3d0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d102      	bne.n	800d3e0 <xQueueGenericCreateStatic+0x84>
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d101      	bne.n	800d3e4 <xQueueGenericCreateStatic+0x88>
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	e000      	b.n	800d3e6 <xQueueGenericCreateStatic+0x8a>
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d10b      	bne.n	800d402 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d3ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3ee:	f383 8811 	msr	BASEPRI, r3
 800d3f2:	f3bf 8f6f 	isb	sy
 800d3f6:	f3bf 8f4f 	dsb	sy
 800d3fa:	61fb      	str	r3, [r7, #28]
}
 800d3fc:	bf00      	nop
 800d3fe:	bf00      	nop
 800d400:	e7fd      	b.n	800d3fe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d402:	2350      	movs	r3, #80	@ 0x50
 800d404:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	2b50      	cmp	r3, #80	@ 0x50
 800d40a:	d00b      	beq.n	800d424 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d40c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d410:	f383 8811 	msr	BASEPRI, r3
 800d414:	f3bf 8f6f 	isb	sy
 800d418:	f3bf 8f4f 	dsb	sy
 800d41c:	61bb      	str	r3, [r7, #24]
}
 800d41e:	bf00      	nop
 800d420:	bf00      	nop
 800d422:	e7fd      	b.n	800d420 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d424:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d42a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d00d      	beq.n	800d44c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d432:	2201      	movs	r2, #1
 800d434:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d438:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d43c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d43e:	9300      	str	r3, [sp, #0]
 800d440:	4613      	mov	r3, r2
 800d442:	687a      	ldr	r2, [r7, #4]
 800d444:	68b9      	ldr	r1, [r7, #8]
 800d446:	68f8      	ldr	r0, [r7, #12]
 800d448:	f000 f840 	bl	800d4cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d44e:	4618      	mov	r0, r3
 800d450:	3730      	adds	r7, #48	@ 0x30
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}

0800d456 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d456:	b580      	push	{r7, lr}
 800d458:	b08a      	sub	sp, #40	@ 0x28
 800d45a:	af02      	add	r7, sp, #8
 800d45c:	60f8      	str	r0, [r7, #12]
 800d45e:	60b9      	str	r1, [r7, #8]
 800d460:	4613      	mov	r3, r2
 800d462:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d10b      	bne.n	800d482 <xQueueGenericCreate+0x2c>
	__asm volatile
 800d46a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d46e:	f383 8811 	msr	BASEPRI, r3
 800d472:	f3bf 8f6f 	isb	sy
 800d476:	f3bf 8f4f 	dsb	sy
 800d47a:	613b      	str	r3, [r7, #16]
}
 800d47c:	bf00      	nop
 800d47e:	bf00      	nop
 800d480:	e7fd      	b.n	800d47e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	68ba      	ldr	r2, [r7, #8]
 800d486:	fb02 f303 	mul.w	r3, r2, r3
 800d48a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d48c:	69fb      	ldr	r3, [r7, #28]
 800d48e:	3350      	adds	r3, #80	@ 0x50
 800d490:	4618      	mov	r0, r3
 800d492:	f002 fe23 	bl	80100dc <pvPortMalloc>
 800d496:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d498:	69bb      	ldr	r3, [r7, #24]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d011      	beq.n	800d4c2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d49e:	69bb      	ldr	r3, [r7, #24]
 800d4a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	3350      	adds	r3, #80	@ 0x50
 800d4a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d4a8:	69bb      	ldr	r3, [r7, #24]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d4b0:	79fa      	ldrb	r2, [r7, #7]
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	9300      	str	r3, [sp, #0]
 800d4b6:	4613      	mov	r3, r2
 800d4b8:	697a      	ldr	r2, [r7, #20]
 800d4ba:	68b9      	ldr	r1, [r7, #8]
 800d4bc:	68f8      	ldr	r0, [r7, #12]
 800d4be:	f000 f805 	bl	800d4cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d4c2:	69bb      	ldr	r3, [r7, #24]
	}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3720      	adds	r7, #32
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	60f8      	str	r0, [r7, #12]
 800d4d4:	60b9      	str	r1, [r7, #8]
 800d4d6:	607a      	str	r2, [r7, #4]
 800d4d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d103      	bne.n	800d4e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d4e0:	69bb      	ldr	r3, [r7, #24]
 800d4e2:	69ba      	ldr	r2, [r7, #24]
 800d4e4:	601a      	str	r2, [r3, #0]
 800d4e6:	e002      	b.n	800d4ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d4e8:	69bb      	ldr	r3, [r7, #24]
 800d4ea:	687a      	ldr	r2, [r7, #4]
 800d4ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d4ee:	69bb      	ldr	r3, [r7, #24]
 800d4f0:	68fa      	ldr	r2, [r7, #12]
 800d4f2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d4f4:	69bb      	ldr	r3, [r7, #24]
 800d4f6:	68ba      	ldr	r2, [r7, #8]
 800d4f8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d4fa:	2101      	movs	r1, #1
 800d4fc:	69b8      	ldr	r0, [r7, #24]
 800d4fe:	f7ff fec3 	bl	800d288 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d502:	69bb      	ldr	r3, [r7, #24]
 800d504:	78fa      	ldrb	r2, [r7, #3]
 800d506:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d50a:	bf00      	nop
 800d50c:	3710      	adds	r7, #16
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}

0800d512 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d512:	b580      	push	{r7, lr}
 800d514:	b082      	sub	sp, #8
 800d516:	af00      	add	r7, sp, #0
 800d518:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d00e      	beq.n	800d53e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2200      	movs	r2, #0
 800d524:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2200      	movs	r2, #0
 800d52a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2200      	movs	r2, #0
 800d530:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d532:	2300      	movs	r3, #0
 800d534:	2200      	movs	r2, #0
 800d536:	2100      	movs	r1, #0
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f000 f8a3 	bl	800d684 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d53e:	bf00      	nop
 800d540:	3708      	adds	r7, #8
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}

0800d546 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d546:	b580      	push	{r7, lr}
 800d548:	b086      	sub	sp, #24
 800d54a:	af00      	add	r7, sp, #0
 800d54c:	4603      	mov	r3, r0
 800d54e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d550:	2301      	movs	r3, #1
 800d552:	617b      	str	r3, [r7, #20]
 800d554:	2300      	movs	r3, #0
 800d556:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d558:	79fb      	ldrb	r3, [r7, #7]
 800d55a:	461a      	mov	r2, r3
 800d55c:	6939      	ldr	r1, [r7, #16]
 800d55e:	6978      	ldr	r0, [r7, #20]
 800d560:	f7ff ff79 	bl	800d456 <xQueueGenericCreate>
 800d564:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d566:	68f8      	ldr	r0, [r7, #12]
 800d568:	f7ff ffd3 	bl	800d512 <prvInitialiseMutex>

		return xNewQueue;
 800d56c:	68fb      	ldr	r3, [r7, #12]
	}
 800d56e:	4618      	mov	r0, r3
 800d570:	3718      	adds	r7, #24
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}

0800d576 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d576:	b580      	push	{r7, lr}
 800d578:	b088      	sub	sp, #32
 800d57a:	af02      	add	r7, sp, #8
 800d57c:	4603      	mov	r3, r0
 800d57e:	6039      	str	r1, [r7, #0]
 800d580:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d582:	2301      	movs	r3, #1
 800d584:	617b      	str	r3, [r7, #20]
 800d586:	2300      	movs	r3, #0
 800d588:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d58a:	79fb      	ldrb	r3, [r7, #7]
 800d58c:	9300      	str	r3, [sp, #0]
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	2200      	movs	r2, #0
 800d592:	6939      	ldr	r1, [r7, #16]
 800d594:	6978      	ldr	r0, [r7, #20]
 800d596:	f7ff fee1 	bl	800d35c <xQueueGenericCreateStatic>
 800d59a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d59c:	68f8      	ldr	r0, [r7, #12]
 800d59e:	f7ff ffb8 	bl	800d512 <prvInitialiseMutex>

		return xNewQueue;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
	}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3718      	adds	r7, #24
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d5ac:	b590      	push	{r4, r7, lr}
 800d5ae:	b087      	sub	sp, #28
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d10b      	bne.n	800d5d6 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800d5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5c2:	f383 8811 	msr	BASEPRI, r3
 800d5c6:	f3bf 8f6f 	isb	sy
 800d5ca:	f3bf 8f4f 	dsb	sy
 800d5ce:	60fb      	str	r3, [r7, #12]
}
 800d5d0:	bf00      	nop
 800d5d2:	bf00      	nop
 800d5d4:	e7fd      	b.n	800d5d2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	689c      	ldr	r4, [r3, #8]
 800d5da:	f001 fbd5 	bl	800ed88 <xTaskGetCurrentTaskHandle>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	429c      	cmp	r4, r3
 800d5e2:	d111      	bne.n	800d608 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	68db      	ldr	r3, [r3, #12]
 800d5e8:	1e5a      	subs	r2, r3, #1
 800d5ea:	693b      	ldr	r3, [r7, #16]
 800d5ec:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	68db      	ldr	r3, [r3, #12]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d105      	bne.n	800d602 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	2100      	movs	r1, #0
 800d5fc:	6938      	ldr	r0, [r7, #16]
 800d5fe:	f000 f841 	bl	800d684 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d602:	2301      	movs	r3, #1
 800d604:	617b      	str	r3, [r7, #20]
 800d606:	e001      	b.n	800d60c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d608:	2300      	movs	r3, #0
 800d60a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d60c:	697b      	ldr	r3, [r7, #20]
	}
 800d60e:	4618      	mov	r0, r3
 800d610:	371c      	adds	r7, #28
 800d612:	46bd      	mov	sp, r7
 800d614:	bd90      	pop	{r4, r7, pc}

0800d616 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d616:	b590      	push	{r4, r7, lr}
 800d618:	b087      	sub	sp, #28
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
 800d61e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d10b      	bne.n	800d642 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800d62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d62e:	f383 8811 	msr	BASEPRI, r3
 800d632:	f3bf 8f6f 	isb	sy
 800d636:	f3bf 8f4f 	dsb	sy
 800d63a:	60fb      	str	r3, [r7, #12]
}
 800d63c:	bf00      	nop
 800d63e:	bf00      	nop
 800d640:	e7fd      	b.n	800d63e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	689c      	ldr	r4, [r3, #8]
 800d646:	f001 fb9f 	bl	800ed88 <xTaskGetCurrentTaskHandle>
 800d64a:	4603      	mov	r3, r0
 800d64c:	429c      	cmp	r4, r3
 800d64e:	d107      	bne.n	800d660 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	68db      	ldr	r3, [r3, #12]
 800d654:	1c5a      	adds	r2, r3, #1
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d65a:	2301      	movs	r3, #1
 800d65c:	617b      	str	r3, [r7, #20]
 800d65e:	e00c      	b.n	800d67a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d660:	6839      	ldr	r1, [r7, #0]
 800d662:	6938      	ldr	r0, [r7, #16]
 800d664:	f000 fa90 	bl	800db88 <xQueueSemaphoreTake>
 800d668:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d004      	beq.n	800d67a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	68db      	ldr	r3, [r3, #12]
 800d674:	1c5a      	adds	r2, r3, #1
 800d676:	693b      	ldr	r3, [r7, #16]
 800d678:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d67a:	697b      	ldr	r3, [r7, #20]
	}
 800d67c:	4618      	mov	r0, r3
 800d67e:	371c      	adds	r7, #28
 800d680:	46bd      	mov	sp, r7
 800d682:	bd90      	pop	{r4, r7, pc}

0800d684 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b08e      	sub	sp, #56	@ 0x38
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	607a      	str	r2, [r7, #4]
 800d690:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d692:	2300      	movs	r3, #0
 800d694:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d69a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d10b      	bne.n	800d6b8 <xQueueGenericSend+0x34>
	__asm volatile
 800d6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6a4:	f383 8811 	msr	BASEPRI, r3
 800d6a8:	f3bf 8f6f 	isb	sy
 800d6ac:	f3bf 8f4f 	dsb	sy
 800d6b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d6b2:	bf00      	nop
 800d6b4:	bf00      	nop
 800d6b6:	e7fd      	b.n	800d6b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d103      	bne.n	800d6c6 <xQueueGenericSend+0x42>
 800d6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d101      	bne.n	800d6ca <xQueueGenericSend+0x46>
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	e000      	b.n	800d6cc <xQueueGenericSend+0x48>
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d10b      	bne.n	800d6e8 <xQueueGenericSend+0x64>
	__asm volatile
 800d6d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6d4:	f383 8811 	msr	BASEPRI, r3
 800d6d8:	f3bf 8f6f 	isb	sy
 800d6dc:	f3bf 8f4f 	dsb	sy
 800d6e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d6e2:	bf00      	nop
 800d6e4:	bf00      	nop
 800d6e6:	e7fd      	b.n	800d6e4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	2b02      	cmp	r3, #2
 800d6ec:	d103      	bne.n	800d6f6 <xQueueGenericSend+0x72>
 800d6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6f2:	2b01      	cmp	r3, #1
 800d6f4:	d101      	bne.n	800d6fa <xQueueGenericSend+0x76>
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	e000      	b.n	800d6fc <xQueueGenericSend+0x78>
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d10b      	bne.n	800d718 <xQueueGenericSend+0x94>
	__asm volatile
 800d700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d704:	f383 8811 	msr	BASEPRI, r3
 800d708:	f3bf 8f6f 	isb	sy
 800d70c:	f3bf 8f4f 	dsb	sy
 800d710:	623b      	str	r3, [r7, #32]
}
 800d712:	bf00      	nop
 800d714:	bf00      	nop
 800d716:	e7fd      	b.n	800d714 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d718:	f001 fb46 	bl	800eda8 <xTaskGetSchedulerState>
 800d71c:	4603      	mov	r3, r0
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d102      	bne.n	800d728 <xQueueGenericSend+0xa4>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d101      	bne.n	800d72c <xQueueGenericSend+0xa8>
 800d728:	2301      	movs	r3, #1
 800d72a:	e000      	b.n	800d72e <xQueueGenericSend+0xaa>
 800d72c:	2300      	movs	r3, #0
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d10b      	bne.n	800d74a <xQueueGenericSend+0xc6>
	__asm volatile
 800d732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d736:	f383 8811 	msr	BASEPRI, r3
 800d73a:	f3bf 8f6f 	isb	sy
 800d73e:	f3bf 8f4f 	dsb	sy
 800d742:	61fb      	str	r3, [r7, #28]
}
 800d744:	bf00      	nop
 800d746:	bf00      	nop
 800d748:	e7fd      	b.n	800d746 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d74a:	f002 fba5 	bl	800fe98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d750:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d756:	429a      	cmp	r2, r3
 800d758:	d302      	bcc.n	800d760 <xQueueGenericSend+0xdc>
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	2b02      	cmp	r3, #2
 800d75e:	d129      	bne.n	800d7b4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d760:	683a      	ldr	r2, [r7, #0]
 800d762:	68b9      	ldr	r1, [r7, #8]
 800d764:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d766:	f000 fb37 	bl	800ddd8 <prvCopyDataToQueue>
 800d76a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d76c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d76e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d770:	2b00      	cmp	r3, #0
 800d772:	d010      	beq.n	800d796 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d776:	3324      	adds	r3, #36	@ 0x24
 800d778:	4618      	mov	r0, r3
 800d77a:	f001 f93f 	bl	800e9fc <xTaskRemoveFromEventList>
 800d77e:	4603      	mov	r3, r0
 800d780:	2b00      	cmp	r3, #0
 800d782:	d013      	beq.n	800d7ac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d784:	4b3f      	ldr	r3, [pc, #252]	@ (800d884 <xQueueGenericSend+0x200>)
 800d786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d78a:	601a      	str	r2, [r3, #0]
 800d78c:	f3bf 8f4f 	dsb	sy
 800d790:	f3bf 8f6f 	isb	sy
 800d794:	e00a      	b.n	800d7ac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d007      	beq.n	800d7ac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d79c:	4b39      	ldr	r3, [pc, #228]	@ (800d884 <xQueueGenericSend+0x200>)
 800d79e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7a2:	601a      	str	r2, [r3, #0]
 800d7a4:	f3bf 8f4f 	dsb	sy
 800d7a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d7ac:	f002 fba6 	bl	800fefc <vPortExitCritical>
				return pdPASS;
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	e063      	b.n	800d87c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d103      	bne.n	800d7c2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d7ba:	f002 fb9f 	bl	800fefc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	e05c      	b.n	800d87c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d7c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d106      	bne.n	800d7d6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d7c8:	f107 0314 	add.w	r3, r7, #20
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f001 f979 	bl	800eac4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d7d6:	f002 fb91 	bl	800fefc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d7da:	f000 fecf 	bl	800e57c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d7de:	f002 fb5b 	bl	800fe98 <vPortEnterCritical>
 800d7e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d7e8:	b25b      	sxtb	r3, r3
 800d7ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d7ee:	d103      	bne.n	800d7f8 <xQueueGenericSend+0x174>
 800d7f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d7f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d7fe:	b25b      	sxtb	r3, r3
 800d800:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d804:	d103      	bne.n	800d80e <xQueueGenericSend+0x18a>
 800d806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d808:	2200      	movs	r2, #0
 800d80a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d80e:	f002 fb75 	bl	800fefc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d812:	1d3a      	adds	r2, r7, #4
 800d814:	f107 0314 	add.w	r3, r7, #20
 800d818:	4611      	mov	r1, r2
 800d81a:	4618      	mov	r0, r3
 800d81c:	f001 f968 	bl	800eaf0 <xTaskCheckForTimeOut>
 800d820:	4603      	mov	r3, r0
 800d822:	2b00      	cmp	r3, #0
 800d824:	d124      	bne.n	800d870 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d826:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d828:	f000 fbce 	bl	800dfc8 <prvIsQueueFull>
 800d82c:	4603      	mov	r3, r0
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d018      	beq.n	800d864 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d834:	3310      	adds	r3, #16
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	4611      	mov	r1, r2
 800d83a:	4618      	mov	r0, r3
 800d83c:	f001 f88c 	bl	800e958 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d840:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d842:	f000 fb59 	bl	800def8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d846:	f000 fea7 	bl	800e598 <xTaskResumeAll>
 800d84a:	4603      	mov	r3, r0
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	f47f af7c 	bne.w	800d74a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d852:	4b0c      	ldr	r3, [pc, #48]	@ (800d884 <xQueueGenericSend+0x200>)
 800d854:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d858:	601a      	str	r2, [r3, #0]
 800d85a:	f3bf 8f4f 	dsb	sy
 800d85e:	f3bf 8f6f 	isb	sy
 800d862:	e772      	b.n	800d74a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d864:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d866:	f000 fb47 	bl	800def8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d86a:	f000 fe95 	bl	800e598 <xTaskResumeAll>
 800d86e:	e76c      	b.n	800d74a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d870:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d872:	f000 fb41 	bl	800def8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d876:	f000 fe8f 	bl	800e598 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d87a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3738      	adds	r7, #56	@ 0x38
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}
 800d884:	e000ed04 	.word	0xe000ed04

0800d888 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b090      	sub	sp, #64	@ 0x40
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	60f8      	str	r0, [r7, #12]
 800d890:	60b9      	str	r1, [r7, #8]
 800d892:	607a      	str	r2, [r7, #4]
 800d894:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d89a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d10b      	bne.n	800d8b8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d8a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8a4:	f383 8811 	msr	BASEPRI, r3
 800d8a8:	f3bf 8f6f 	isb	sy
 800d8ac:	f3bf 8f4f 	dsb	sy
 800d8b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d8b2:	bf00      	nop
 800d8b4:	bf00      	nop
 800d8b6:	e7fd      	b.n	800d8b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d103      	bne.n	800d8c6 <xQueueGenericSendFromISR+0x3e>
 800d8be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d101      	bne.n	800d8ca <xQueueGenericSendFromISR+0x42>
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	e000      	b.n	800d8cc <xQueueGenericSendFromISR+0x44>
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d10b      	bne.n	800d8e8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d8d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8d4:	f383 8811 	msr	BASEPRI, r3
 800d8d8:	f3bf 8f6f 	isb	sy
 800d8dc:	f3bf 8f4f 	dsb	sy
 800d8e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d8e2:	bf00      	nop
 800d8e4:	bf00      	nop
 800d8e6:	e7fd      	b.n	800d8e4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	2b02      	cmp	r3, #2
 800d8ec:	d103      	bne.n	800d8f6 <xQueueGenericSendFromISR+0x6e>
 800d8ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d8f2:	2b01      	cmp	r3, #1
 800d8f4:	d101      	bne.n	800d8fa <xQueueGenericSendFromISR+0x72>
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	e000      	b.n	800d8fc <xQueueGenericSendFromISR+0x74>
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d10b      	bne.n	800d918 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d904:	f383 8811 	msr	BASEPRI, r3
 800d908:	f3bf 8f6f 	isb	sy
 800d90c:	f3bf 8f4f 	dsb	sy
 800d910:	623b      	str	r3, [r7, #32]
}
 800d912:	bf00      	nop
 800d914:	bf00      	nop
 800d916:	e7fd      	b.n	800d914 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d918:	f002 fb9e 	bl	8010058 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d91c:	f3ef 8211 	mrs	r2, BASEPRI
 800d920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d924:	f383 8811 	msr	BASEPRI, r3
 800d928:	f3bf 8f6f 	isb	sy
 800d92c:	f3bf 8f4f 	dsb	sy
 800d930:	61fa      	str	r2, [r7, #28]
 800d932:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d934:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d936:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d93a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d93e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d940:	429a      	cmp	r2, r3
 800d942:	d302      	bcc.n	800d94a <xQueueGenericSendFromISR+0xc2>
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	2b02      	cmp	r3, #2
 800d948:	d12f      	bne.n	800d9aa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d94a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d94c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d950:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d958:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d95a:	683a      	ldr	r2, [r7, #0]
 800d95c:	68b9      	ldr	r1, [r7, #8]
 800d95e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d960:	f000 fa3a 	bl	800ddd8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d964:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d968:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d96c:	d112      	bne.n	800d994 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d96e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d972:	2b00      	cmp	r3, #0
 800d974:	d016      	beq.n	800d9a4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d978:	3324      	adds	r3, #36	@ 0x24
 800d97a:	4618      	mov	r0, r3
 800d97c:	f001 f83e 	bl	800e9fc <xTaskRemoveFromEventList>
 800d980:	4603      	mov	r3, r0
 800d982:	2b00      	cmp	r3, #0
 800d984:	d00e      	beq.n	800d9a4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d00b      	beq.n	800d9a4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2201      	movs	r2, #1
 800d990:	601a      	str	r2, [r3, #0]
 800d992:	e007      	b.n	800d9a4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d994:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d998:	3301      	adds	r3, #1
 800d99a:	b2db      	uxtb	r3, r3
 800d99c:	b25a      	sxtb	r2, r3
 800d99e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d9a8:	e001      	b.n	800d9ae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d9ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9b0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d9b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d9ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3740      	adds	r7, #64	@ 0x40
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b08c      	sub	sp, #48	@ 0x30
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d10b      	bne.n	800d9f6 <xQueueReceive+0x32>
	__asm volatile
 800d9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9e2:	f383 8811 	msr	BASEPRI, r3
 800d9e6:	f3bf 8f6f 	isb	sy
 800d9ea:	f3bf 8f4f 	dsb	sy
 800d9ee:	623b      	str	r3, [r7, #32]
}
 800d9f0:	bf00      	nop
 800d9f2:	bf00      	nop
 800d9f4:	e7fd      	b.n	800d9f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d103      	bne.n	800da04 <xQueueReceive+0x40>
 800d9fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da00:	2b00      	cmp	r3, #0
 800da02:	d101      	bne.n	800da08 <xQueueReceive+0x44>
 800da04:	2301      	movs	r3, #1
 800da06:	e000      	b.n	800da0a <xQueueReceive+0x46>
 800da08:	2300      	movs	r3, #0
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d10b      	bne.n	800da26 <xQueueReceive+0x62>
	__asm volatile
 800da0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da12:	f383 8811 	msr	BASEPRI, r3
 800da16:	f3bf 8f6f 	isb	sy
 800da1a:	f3bf 8f4f 	dsb	sy
 800da1e:	61fb      	str	r3, [r7, #28]
}
 800da20:	bf00      	nop
 800da22:	bf00      	nop
 800da24:	e7fd      	b.n	800da22 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da26:	f001 f9bf 	bl	800eda8 <xTaskGetSchedulerState>
 800da2a:	4603      	mov	r3, r0
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d102      	bne.n	800da36 <xQueueReceive+0x72>
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d101      	bne.n	800da3a <xQueueReceive+0x76>
 800da36:	2301      	movs	r3, #1
 800da38:	e000      	b.n	800da3c <xQueueReceive+0x78>
 800da3a:	2300      	movs	r3, #0
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d10b      	bne.n	800da58 <xQueueReceive+0x94>
	__asm volatile
 800da40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da44:	f383 8811 	msr	BASEPRI, r3
 800da48:	f3bf 8f6f 	isb	sy
 800da4c:	f3bf 8f4f 	dsb	sy
 800da50:	61bb      	str	r3, [r7, #24]
}
 800da52:	bf00      	nop
 800da54:	bf00      	nop
 800da56:	e7fd      	b.n	800da54 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800da58:	f002 fa1e 	bl	800fe98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da60:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da64:	2b00      	cmp	r3, #0
 800da66:	d01f      	beq.n	800daa8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800da68:	68b9      	ldr	r1, [r7, #8]
 800da6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da6c:	f000 fa1e 	bl	800deac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800da70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da72:	1e5a      	subs	r2, r3, #1
 800da74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da76:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da7a:	691b      	ldr	r3, [r3, #16]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d00f      	beq.n	800daa0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da82:	3310      	adds	r3, #16
 800da84:	4618      	mov	r0, r3
 800da86:	f000 ffb9 	bl	800e9fc <xTaskRemoveFromEventList>
 800da8a:	4603      	mov	r3, r0
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d007      	beq.n	800daa0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800da90:	4b3c      	ldr	r3, [pc, #240]	@ (800db84 <xQueueReceive+0x1c0>)
 800da92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da96:	601a      	str	r2, [r3, #0]
 800da98:	f3bf 8f4f 	dsb	sy
 800da9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800daa0:	f002 fa2c 	bl	800fefc <vPortExitCritical>
				return pdPASS;
 800daa4:	2301      	movs	r3, #1
 800daa6:	e069      	b.n	800db7c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d103      	bne.n	800dab6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800daae:	f002 fa25 	bl	800fefc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dab2:	2300      	movs	r3, #0
 800dab4:	e062      	b.n	800db7c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d106      	bne.n	800daca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dabc:	f107 0310 	add.w	r3, r7, #16
 800dac0:	4618      	mov	r0, r3
 800dac2:	f000 ffff 	bl	800eac4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dac6:	2301      	movs	r3, #1
 800dac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800daca:	f002 fa17 	bl	800fefc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dace:	f000 fd55 	bl	800e57c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dad2:	f002 f9e1 	bl	800fe98 <vPortEnterCritical>
 800dad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dad8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dadc:	b25b      	sxtb	r3, r3
 800dade:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dae2:	d103      	bne.n	800daec <xQueueReceive+0x128>
 800dae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dae6:	2200      	movs	r2, #0
 800dae8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800daec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800daf2:	b25b      	sxtb	r3, r3
 800daf4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800daf8:	d103      	bne.n	800db02 <xQueueReceive+0x13e>
 800dafa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dafc:	2200      	movs	r2, #0
 800dafe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800db02:	f002 f9fb 	bl	800fefc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800db06:	1d3a      	adds	r2, r7, #4
 800db08:	f107 0310 	add.w	r3, r7, #16
 800db0c:	4611      	mov	r1, r2
 800db0e:	4618      	mov	r0, r3
 800db10:	f000 ffee 	bl	800eaf0 <xTaskCheckForTimeOut>
 800db14:	4603      	mov	r3, r0
 800db16:	2b00      	cmp	r3, #0
 800db18:	d123      	bne.n	800db62 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db1c:	f000 fa3e 	bl	800df9c <prvIsQueueEmpty>
 800db20:	4603      	mov	r3, r0
 800db22:	2b00      	cmp	r3, #0
 800db24:	d017      	beq.n	800db56 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800db26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db28:	3324      	adds	r3, #36	@ 0x24
 800db2a:	687a      	ldr	r2, [r7, #4]
 800db2c:	4611      	mov	r1, r2
 800db2e:	4618      	mov	r0, r3
 800db30:	f000 ff12 	bl	800e958 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800db34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db36:	f000 f9df 	bl	800def8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800db3a:	f000 fd2d 	bl	800e598 <xTaskResumeAll>
 800db3e:	4603      	mov	r3, r0
 800db40:	2b00      	cmp	r3, #0
 800db42:	d189      	bne.n	800da58 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800db44:	4b0f      	ldr	r3, [pc, #60]	@ (800db84 <xQueueReceive+0x1c0>)
 800db46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db4a:	601a      	str	r2, [r3, #0]
 800db4c:	f3bf 8f4f 	dsb	sy
 800db50:	f3bf 8f6f 	isb	sy
 800db54:	e780      	b.n	800da58 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800db56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db58:	f000 f9ce 	bl	800def8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800db5c:	f000 fd1c 	bl	800e598 <xTaskResumeAll>
 800db60:	e77a      	b.n	800da58 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800db62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db64:	f000 f9c8 	bl	800def8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800db68:	f000 fd16 	bl	800e598 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db6e:	f000 fa15 	bl	800df9c <prvIsQueueEmpty>
 800db72:	4603      	mov	r3, r0
 800db74:	2b00      	cmp	r3, #0
 800db76:	f43f af6f 	beq.w	800da58 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800db7a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	3730      	adds	r7, #48	@ 0x30
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}
 800db84:	e000ed04 	.word	0xe000ed04

0800db88 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b08e      	sub	sp, #56	@ 0x38
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800db92:	2300      	movs	r3, #0
 800db94:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800db9a:	2300      	movs	r3, #0
 800db9c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800db9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d10b      	bne.n	800dbbc <xQueueSemaphoreTake+0x34>
	__asm volatile
 800dba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dba8:	f383 8811 	msr	BASEPRI, r3
 800dbac:	f3bf 8f6f 	isb	sy
 800dbb0:	f3bf 8f4f 	dsb	sy
 800dbb4:	623b      	str	r3, [r7, #32]
}
 800dbb6:	bf00      	nop
 800dbb8:	bf00      	nop
 800dbba:	e7fd      	b.n	800dbb8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dbbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d00b      	beq.n	800dbdc <xQueueSemaphoreTake+0x54>
	__asm volatile
 800dbc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbc8:	f383 8811 	msr	BASEPRI, r3
 800dbcc:	f3bf 8f6f 	isb	sy
 800dbd0:	f3bf 8f4f 	dsb	sy
 800dbd4:	61fb      	str	r3, [r7, #28]
}
 800dbd6:	bf00      	nop
 800dbd8:	bf00      	nop
 800dbda:	e7fd      	b.n	800dbd8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dbdc:	f001 f8e4 	bl	800eda8 <xTaskGetSchedulerState>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d102      	bne.n	800dbec <xQueueSemaphoreTake+0x64>
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d101      	bne.n	800dbf0 <xQueueSemaphoreTake+0x68>
 800dbec:	2301      	movs	r3, #1
 800dbee:	e000      	b.n	800dbf2 <xQueueSemaphoreTake+0x6a>
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d10b      	bne.n	800dc0e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800dbf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbfa:	f383 8811 	msr	BASEPRI, r3
 800dbfe:	f3bf 8f6f 	isb	sy
 800dc02:	f3bf 8f4f 	dsb	sy
 800dc06:	61bb      	str	r3, [r7, #24]
}
 800dc08:	bf00      	nop
 800dc0a:	bf00      	nop
 800dc0c:	e7fd      	b.n	800dc0a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dc0e:	f002 f943 	bl	800fe98 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800dc12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc16:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800dc18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d024      	beq.n	800dc68 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800dc1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc20:	1e5a      	subs	r2, r3, #1
 800dc22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc24:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d104      	bne.n	800dc38 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800dc2e:	f001 fa35 	bl	800f09c <pvTaskIncrementMutexHeldCount>
 800dc32:	4602      	mov	r2, r0
 800dc34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc36:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc3a:	691b      	ldr	r3, [r3, #16]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d00f      	beq.n	800dc60 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc42:	3310      	adds	r3, #16
 800dc44:	4618      	mov	r0, r3
 800dc46:	f000 fed9 	bl	800e9fc <xTaskRemoveFromEventList>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d007      	beq.n	800dc60 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dc50:	4b54      	ldr	r3, [pc, #336]	@ (800dda4 <xQueueSemaphoreTake+0x21c>)
 800dc52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc56:	601a      	str	r2, [r3, #0]
 800dc58:	f3bf 8f4f 	dsb	sy
 800dc5c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dc60:	f002 f94c 	bl	800fefc <vPortExitCritical>
				return pdPASS;
 800dc64:	2301      	movs	r3, #1
 800dc66:	e098      	b.n	800dd9a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d112      	bne.n	800dc94 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800dc6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d00b      	beq.n	800dc8c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800dc74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc78:	f383 8811 	msr	BASEPRI, r3
 800dc7c:	f3bf 8f6f 	isb	sy
 800dc80:	f3bf 8f4f 	dsb	sy
 800dc84:	617b      	str	r3, [r7, #20]
}
 800dc86:	bf00      	nop
 800dc88:	bf00      	nop
 800dc8a:	e7fd      	b.n	800dc88 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800dc8c:	f002 f936 	bl	800fefc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dc90:	2300      	movs	r3, #0
 800dc92:	e082      	b.n	800dd9a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dc94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d106      	bne.n	800dca8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dc9a:	f107 030c 	add.w	r3, r7, #12
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f000 ff10 	bl	800eac4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dca4:	2301      	movs	r3, #1
 800dca6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dca8:	f002 f928 	bl	800fefc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dcac:	f000 fc66 	bl	800e57c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dcb0:	f002 f8f2 	bl	800fe98 <vPortEnterCritical>
 800dcb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcb6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dcba:	b25b      	sxtb	r3, r3
 800dcbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dcc0:	d103      	bne.n	800dcca <xQueueSemaphoreTake+0x142>
 800dcc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dcca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dccc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dcd0:	b25b      	sxtb	r3, r3
 800dcd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dcd6:	d103      	bne.n	800dce0 <xQueueSemaphoreTake+0x158>
 800dcd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcda:	2200      	movs	r2, #0
 800dcdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dce0:	f002 f90c 	bl	800fefc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dce4:	463a      	mov	r2, r7
 800dce6:	f107 030c 	add.w	r3, r7, #12
 800dcea:	4611      	mov	r1, r2
 800dcec:	4618      	mov	r0, r3
 800dcee:	f000 feff 	bl	800eaf0 <xTaskCheckForTimeOut>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d132      	bne.n	800dd5e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dcf8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dcfa:	f000 f94f 	bl	800df9c <prvIsQueueEmpty>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d026      	beq.n	800dd52 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dd04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d109      	bne.n	800dd20 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800dd0c:	f002 f8c4 	bl	800fe98 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dd10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd12:	689b      	ldr	r3, [r3, #8]
 800dd14:	4618      	mov	r0, r3
 800dd16:	f001 f865 	bl	800ede4 <xTaskPriorityInherit>
 800dd1a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800dd1c:	f002 f8ee 	bl	800fefc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dd20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd22:	3324      	adds	r3, #36	@ 0x24
 800dd24:	683a      	ldr	r2, [r7, #0]
 800dd26:	4611      	mov	r1, r2
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f000 fe15 	bl	800e958 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dd2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd30:	f000 f8e2 	bl	800def8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dd34:	f000 fc30 	bl	800e598 <xTaskResumeAll>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	f47f af67 	bne.w	800dc0e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800dd40:	4b18      	ldr	r3, [pc, #96]	@ (800dda4 <xQueueSemaphoreTake+0x21c>)
 800dd42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd46:	601a      	str	r2, [r3, #0]
 800dd48:	f3bf 8f4f 	dsb	sy
 800dd4c:	f3bf 8f6f 	isb	sy
 800dd50:	e75d      	b.n	800dc0e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800dd52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd54:	f000 f8d0 	bl	800def8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dd58:	f000 fc1e 	bl	800e598 <xTaskResumeAll>
 800dd5c:	e757      	b.n	800dc0e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dd5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd60:	f000 f8ca 	bl	800def8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dd64:	f000 fc18 	bl	800e598 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd6a:	f000 f917 	bl	800df9c <prvIsQueueEmpty>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	f43f af4c 	beq.w	800dc0e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dd76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d00d      	beq.n	800dd98 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800dd7c:	f002 f88c 	bl	800fe98 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dd80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd82:	f000 f811 	bl	800dda8 <prvGetDisinheritPriorityAfterTimeout>
 800dd86:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dd88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd8a:	689b      	ldr	r3, [r3, #8]
 800dd8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f001 f900 	bl	800ef94 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dd94:	f002 f8b2 	bl	800fefc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dd98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3738      	adds	r7, #56	@ 0x38
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
 800dda2:	bf00      	nop
 800dda4:	e000ed04 	.word	0xe000ed04

0800dda8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dda8:	b480      	push	{r7}
 800ddaa:	b085      	sub	sp, #20
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d006      	beq.n	800ddc6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ddc2:	60fb      	str	r3, [r7, #12]
 800ddc4:	e001      	b.n	800ddca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ddca:	68fb      	ldr	r3, [r7, #12]
	}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3714      	adds	r7, #20
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr

0800ddd8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b086      	sub	sp, #24
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	60f8      	str	r0, [r7, #12]
 800dde0:	60b9      	str	r1, [r7, #8]
 800dde2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dde4:	2300      	movs	r3, #0
 800dde6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d10d      	bne.n	800de12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d14d      	bne.n	800de9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	689b      	ldr	r3, [r3, #8]
 800de02:	4618      	mov	r0, r3
 800de04:	f001 f856 	bl	800eeb4 <xTaskPriorityDisinherit>
 800de08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	2200      	movs	r2, #0
 800de0e:	609a      	str	r2, [r3, #8]
 800de10:	e043      	b.n	800de9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d119      	bne.n	800de4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	6858      	ldr	r0, [r3, #4]
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de20:	461a      	mov	r2, r3
 800de22:	68b9      	ldr	r1, [r7, #8]
 800de24:	f005 ff2b 	bl	8013c7e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	685a      	ldr	r2, [r3, #4]
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de30:	441a      	add	r2, r3
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	685a      	ldr	r2, [r3, #4]
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	689b      	ldr	r3, [r3, #8]
 800de3e:	429a      	cmp	r2, r3
 800de40:	d32b      	bcc.n	800de9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	681a      	ldr	r2, [r3, #0]
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	605a      	str	r2, [r3, #4]
 800de4a:	e026      	b.n	800de9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	68d8      	ldr	r0, [r3, #12]
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de54:	461a      	mov	r2, r3
 800de56:	68b9      	ldr	r1, [r7, #8]
 800de58:	f005 ff11 	bl	8013c7e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	68da      	ldr	r2, [r3, #12]
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de64:	425b      	negs	r3, r3
 800de66:	441a      	add	r2, r3
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	68da      	ldr	r2, [r3, #12]
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	429a      	cmp	r2, r3
 800de76:	d207      	bcs.n	800de88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	689a      	ldr	r2, [r3, #8]
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de80:	425b      	negs	r3, r3
 800de82:	441a      	add	r2, r3
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2b02      	cmp	r3, #2
 800de8c:	d105      	bne.n	800de9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d002      	beq.n	800de9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	3b01      	subs	r3, #1
 800de98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800de9a:	693b      	ldr	r3, [r7, #16]
 800de9c:	1c5a      	adds	r2, r3, #1
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800dea2:	697b      	ldr	r3, [r7, #20]
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	3718      	adds	r7, #24
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}

0800deac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b082      	sub	sp, #8
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
 800deb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800deba:	2b00      	cmp	r3, #0
 800debc:	d018      	beq.n	800def0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	68da      	ldr	r2, [r3, #12]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dec6:	441a      	add	r2, r3
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	68da      	ldr	r2, [r3, #12]
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	689b      	ldr	r3, [r3, #8]
 800ded4:	429a      	cmp	r2, r3
 800ded6:	d303      	bcc.n	800dee0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681a      	ldr	r2, [r3, #0]
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	68d9      	ldr	r1, [r3, #12]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dee8:	461a      	mov	r2, r3
 800deea:	6838      	ldr	r0, [r7, #0]
 800deec:	f005 fec7 	bl	8013c7e <memcpy>
	}
}
 800def0:	bf00      	nop
 800def2:	3708      	adds	r7, #8
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}

0800def8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b084      	sub	sp, #16
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800df00:	f001 ffca 	bl	800fe98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800df0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800df0c:	e011      	b.n	800df32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df12:	2b00      	cmp	r3, #0
 800df14:	d012      	beq.n	800df3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	3324      	adds	r3, #36	@ 0x24
 800df1a:	4618      	mov	r0, r3
 800df1c:	f000 fd6e 	bl	800e9fc <xTaskRemoveFromEventList>
 800df20:	4603      	mov	r3, r0
 800df22:	2b00      	cmp	r3, #0
 800df24:	d001      	beq.n	800df2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800df26:	f000 fe47 	bl	800ebb8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800df2a:	7bfb      	ldrb	r3, [r7, #15]
 800df2c:	3b01      	subs	r3, #1
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800df32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df36:	2b00      	cmp	r3, #0
 800df38:	dce9      	bgt.n	800df0e <prvUnlockQueue+0x16>
 800df3a:	e000      	b.n	800df3e <prvUnlockQueue+0x46>
					break;
 800df3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	22ff      	movs	r2, #255	@ 0xff
 800df42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800df46:	f001 ffd9 	bl	800fefc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800df4a:	f001 ffa5 	bl	800fe98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800df54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800df56:	e011      	b.n	800df7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	691b      	ldr	r3, [r3, #16]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d012      	beq.n	800df86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	3310      	adds	r3, #16
 800df64:	4618      	mov	r0, r3
 800df66:	f000 fd49 	bl	800e9fc <xTaskRemoveFromEventList>
 800df6a:	4603      	mov	r3, r0
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d001      	beq.n	800df74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800df70:	f000 fe22 	bl	800ebb8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800df74:	7bbb      	ldrb	r3, [r7, #14]
 800df76:	3b01      	subs	r3, #1
 800df78:	b2db      	uxtb	r3, r3
 800df7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800df7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df80:	2b00      	cmp	r3, #0
 800df82:	dce9      	bgt.n	800df58 <prvUnlockQueue+0x60>
 800df84:	e000      	b.n	800df88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800df86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	22ff      	movs	r2, #255	@ 0xff
 800df8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800df90:	f001 ffb4 	bl	800fefc <vPortExitCritical>
}
 800df94:	bf00      	nop
 800df96:	3710      	adds	r7, #16
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}

0800df9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b084      	sub	sp, #16
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dfa4:	f001 ff78 	bl	800fe98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d102      	bne.n	800dfb6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	60fb      	str	r3, [r7, #12]
 800dfb4:	e001      	b.n	800dfba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dfba:	f001 ff9f 	bl	800fefc <vPortExitCritical>

	return xReturn;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3710      	adds	r7, #16
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b084      	sub	sp, #16
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dfd0:	f001 ff62 	bl	800fe98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dfdc:	429a      	cmp	r2, r3
 800dfde:	d102      	bne.n	800dfe6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	60fb      	str	r3, [r7, #12]
 800dfe4:	e001      	b.n	800dfea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dfea:	f001 ff87 	bl	800fefc <vPortExitCritical>

	return xReturn;
 800dfee:	68fb      	ldr	r3, [r7, #12]
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3710      	adds	r7, #16
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dff8:	b480      	push	{r7}
 800dffa:	b085      	sub	sp, #20
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e002:	2300      	movs	r3, #0
 800e004:	60fb      	str	r3, [r7, #12]
 800e006:	e014      	b.n	800e032 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e008:	4a0f      	ldr	r2, [pc, #60]	@ (800e048 <vQueueAddToRegistry+0x50>)
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d10b      	bne.n	800e02c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e014:	490c      	ldr	r1, [pc, #48]	@ (800e048 <vQueueAddToRegistry+0x50>)
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	683a      	ldr	r2, [r7, #0]
 800e01a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e01e:	4a0a      	ldr	r2, [pc, #40]	@ (800e048 <vQueueAddToRegistry+0x50>)
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	00db      	lsls	r3, r3, #3
 800e024:	4413      	add	r3, r2
 800e026:	687a      	ldr	r2, [r7, #4]
 800e028:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e02a:	e006      	b.n	800e03a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	3301      	adds	r3, #1
 800e030:	60fb      	str	r3, [r7, #12]
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	2b07      	cmp	r3, #7
 800e036:	d9e7      	bls.n	800e008 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e038:	bf00      	nop
 800e03a:	bf00      	nop
 800e03c:	3714      	adds	r7, #20
 800e03e:	46bd      	mov	sp, r7
 800e040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e044:	4770      	bx	lr
 800e046:	bf00      	nop
 800e048:	24001f34 	.word	0x24001f34

0800e04c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b086      	sub	sp, #24
 800e050:	af00      	add	r7, sp, #0
 800e052:	60f8      	str	r0, [r7, #12]
 800e054:	60b9      	str	r1, [r7, #8]
 800e056:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e05c:	f001 ff1c 	bl	800fe98 <vPortEnterCritical>
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e066:	b25b      	sxtb	r3, r3
 800e068:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e06c:	d103      	bne.n	800e076 <vQueueWaitForMessageRestricted+0x2a>
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	2200      	movs	r2, #0
 800e072:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e07c:	b25b      	sxtb	r3, r3
 800e07e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e082:	d103      	bne.n	800e08c <vQueueWaitForMessageRestricted+0x40>
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	2200      	movs	r2, #0
 800e088:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e08c:	f001 ff36 	bl	800fefc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e094:	2b00      	cmp	r3, #0
 800e096:	d106      	bne.n	800e0a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	3324      	adds	r3, #36	@ 0x24
 800e09c:	687a      	ldr	r2, [r7, #4]
 800e09e:	68b9      	ldr	r1, [r7, #8]
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f000 fc7f 	bl	800e9a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e0a6:	6978      	ldr	r0, [r7, #20]
 800e0a8:	f7ff ff26 	bl	800def8 <prvUnlockQueue>
	}
 800e0ac:	bf00      	nop
 800e0ae:	3718      	adds	r7, #24
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}

0800e0b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b08e      	sub	sp, #56	@ 0x38
 800e0b8:	af04      	add	r7, sp, #16
 800e0ba:	60f8      	str	r0, [r7, #12]
 800e0bc:	60b9      	str	r1, [r7, #8]
 800e0be:	607a      	str	r2, [r7, #4]
 800e0c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e0c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d10b      	bne.n	800e0e0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e0c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0cc:	f383 8811 	msr	BASEPRI, r3
 800e0d0:	f3bf 8f6f 	isb	sy
 800e0d4:	f3bf 8f4f 	dsb	sy
 800e0d8:	623b      	str	r3, [r7, #32]
}
 800e0da:	bf00      	nop
 800e0dc:	bf00      	nop
 800e0de:	e7fd      	b.n	800e0dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d10b      	bne.n	800e0fe <xTaskCreateStatic+0x4a>
	__asm volatile
 800e0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0ea:	f383 8811 	msr	BASEPRI, r3
 800e0ee:	f3bf 8f6f 	isb	sy
 800e0f2:	f3bf 8f4f 	dsb	sy
 800e0f6:	61fb      	str	r3, [r7, #28]
}
 800e0f8:	bf00      	nop
 800e0fa:	bf00      	nop
 800e0fc:	e7fd      	b.n	800e0fa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e0fe:	23a8      	movs	r3, #168	@ 0xa8
 800e100:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	2ba8      	cmp	r3, #168	@ 0xa8
 800e106:	d00b      	beq.n	800e120 <xTaskCreateStatic+0x6c>
	__asm volatile
 800e108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e10c:	f383 8811 	msr	BASEPRI, r3
 800e110:	f3bf 8f6f 	isb	sy
 800e114:	f3bf 8f4f 	dsb	sy
 800e118:	61bb      	str	r3, [r7, #24]
}
 800e11a:	bf00      	nop
 800e11c:	bf00      	nop
 800e11e:	e7fd      	b.n	800e11c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e120:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e124:	2b00      	cmp	r3, #0
 800e126:	d01e      	beq.n	800e166 <xTaskCreateStatic+0xb2>
 800e128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d01b      	beq.n	800e166 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e130:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e134:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e136:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e13a:	2202      	movs	r2, #2
 800e13c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e140:	2300      	movs	r3, #0
 800e142:	9303      	str	r3, [sp, #12]
 800e144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e146:	9302      	str	r3, [sp, #8]
 800e148:	f107 0314 	add.w	r3, r7, #20
 800e14c:	9301      	str	r3, [sp, #4]
 800e14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e150:	9300      	str	r3, [sp, #0]
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	68b9      	ldr	r1, [r7, #8]
 800e158:	68f8      	ldr	r0, [r7, #12]
 800e15a:	f000 f851 	bl	800e200 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e15e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e160:	f000 f8f6 	bl	800e350 <prvAddNewTaskToReadyList>
 800e164:	e001      	b.n	800e16a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e166:	2300      	movs	r3, #0
 800e168:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e16a:	697b      	ldr	r3, [r7, #20]
	}
 800e16c:	4618      	mov	r0, r3
 800e16e:	3728      	adds	r7, #40	@ 0x28
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}

0800e174 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e174:	b580      	push	{r7, lr}
 800e176:	b08c      	sub	sp, #48	@ 0x30
 800e178:	af04      	add	r7, sp, #16
 800e17a:	60f8      	str	r0, [r7, #12]
 800e17c:	60b9      	str	r1, [r7, #8]
 800e17e:	603b      	str	r3, [r7, #0]
 800e180:	4613      	mov	r3, r2
 800e182:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e184:	88fb      	ldrh	r3, [r7, #6]
 800e186:	009b      	lsls	r3, r3, #2
 800e188:	4618      	mov	r0, r3
 800e18a:	f001 ffa7 	bl	80100dc <pvPortMalloc>
 800e18e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e190:	697b      	ldr	r3, [r7, #20]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d00e      	beq.n	800e1b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e196:	20a8      	movs	r0, #168	@ 0xa8
 800e198:	f001 ffa0 	bl	80100dc <pvPortMalloc>
 800e19c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e19e:	69fb      	ldr	r3, [r7, #28]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d003      	beq.n	800e1ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e1a4:	69fb      	ldr	r3, [r7, #28]
 800e1a6:	697a      	ldr	r2, [r7, #20]
 800e1a8:	631a      	str	r2, [r3, #48]	@ 0x30
 800e1aa:	e005      	b.n	800e1b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e1ac:	6978      	ldr	r0, [r7, #20]
 800e1ae:	f002 f863 	bl	8010278 <vPortFree>
 800e1b2:	e001      	b.n	800e1b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e1b8:	69fb      	ldr	r3, [r7, #28]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d017      	beq.n	800e1ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e1be:	69fb      	ldr	r3, [r7, #28]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e1c6:	88fa      	ldrh	r2, [r7, #6]
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	9303      	str	r3, [sp, #12]
 800e1cc:	69fb      	ldr	r3, [r7, #28]
 800e1ce:	9302      	str	r3, [sp, #8]
 800e1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1d2:	9301      	str	r3, [sp, #4]
 800e1d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1d6:	9300      	str	r3, [sp, #0]
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	68b9      	ldr	r1, [r7, #8]
 800e1dc:	68f8      	ldr	r0, [r7, #12]
 800e1de:	f000 f80f 	bl	800e200 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e1e2:	69f8      	ldr	r0, [r7, #28]
 800e1e4:	f000 f8b4 	bl	800e350 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	61bb      	str	r3, [r7, #24]
 800e1ec:	e002      	b.n	800e1f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e1ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e1f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e1f4:	69bb      	ldr	r3, [r7, #24]
	}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	3720      	adds	r7, #32
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}
	...

0800e200 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b088      	sub	sp, #32
 800e204:	af00      	add	r7, sp, #0
 800e206:	60f8      	str	r0, [r7, #12]
 800e208:	60b9      	str	r1, [r7, #8]
 800e20a:	607a      	str	r2, [r7, #4]
 800e20c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e210:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	009b      	lsls	r3, r3, #2
 800e216:	461a      	mov	r2, r3
 800e218:	21a5      	movs	r1, #165	@ 0xa5
 800e21a:	f005 fc4f 	bl	8013abc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e220:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e222:	6879      	ldr	r1, [r7, #4]
 800e224:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e228:	440b      	add	r3, r1
 800e22a:	009b      	lsls	r3, r3, #2
 800e22c:	4413      	add	r3, r2
 800e22e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e230:	69bb      	ldr	r3, [r7, #24]
 800e232:	f023 0307 	bic.w	r3, r3, #7
 800e236:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e238:	69bb      	ldr	r3, [r7, #24]
 800e23a:	f003 0307 	and.w	r3, r3, #7
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d00b      	beq.n	800e25a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e246:	f383 8811 	msr	BASEPRI, r3
 800e24a:	f3bf 8f6f 	isb	sy
 800e24e:	f3bf 8f4f 	dsb	sy
 800e252:	617b      	str	r3, [r7, #20]
}
 800e254:	bf00      	nop
 800e256:	bf00      	nop
 800e258:	e7fd      	b.n	800e256 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d01f      	beq.n	800e2a0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e260:	2300      	movs	r3, #0
 800e262:	61fb      	str	r3, [r7, #28]
 800e264:	e012      	b.n	800e28c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e266:	68ba      	ldr	r2, [r7, #8]
 800e268:	69fb      	ldr	r3, [r7, #28]
 800e26a:	4413      	add	r3, r2
 800e26c:	7819      	ldrb	r1, [r3, #0]
 800e26e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e270:	69fb      	ldr	r3, [r7, #28]
 800e272:	4413      	add	r3, r2
 800e274:	3334      	adds	r3, #52	@ 0x34
 800e276:	460a      	mov	r2, r1
 800e278:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e27a:	68ba      	ldr	r2, [r7, #8]
 800e27c:	69fb      	ldr	r3, [r7, #28]
 800e27e:	4413      	add	r3, r2
 800e280:	781b      	ldrb	r3, [r3, #0]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d006      	beq.n	800e294 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e286:	69fb      	ldr	r3, [r7, #28]
 800e288:	3301      	adds	r3, #1
 800e28a:	61fb      	str	r3, [r7, #28]
 800e28c:	69fb      	ldr	r3, [r7, #28]
 800e28e:	2b0f      	cmp	r3, #15
 800e290:	d9e9      	bls.n	800e266 <prvInitialiseNewTask+0x66>
 800e292:	e000      	b.n	800e296 <prvInitialiseNewTask+0x96>
			{
				break;
 800e294:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e298:	2200      	movs	r2, #0
 800e29a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e29e:	e003      	b.n	800e2a8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e2a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2aa:	2b37      	cmp	r3, #55	@ 0x37
 800e2ac:	d901      	bls.n	800e2b2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e2ae:	2337      	movs	r3, #55	@ 0x37
 800e2b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e2b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e2bc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e2be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e2c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2c6:	3304      	adds	r3, #4
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f7fe ff49 	bl	800d160 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2d0:	3318      	adds	r3, #24
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f7fe ff44 	bl	800d160 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e2dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e2e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e2e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e2ec:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e2ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e300:	3354      	adds	r3, #84	@ 0x54
 800e302:	224c      	movs	r2, #76	@ 0x4c
 800e304:	2100      	movs	r1, #0
 800e306:	4618      	mov	r0, r3
 800e308:	f005 fbd8 	bl	8013abc <memset>
 800e30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e30e:	4a0d      	ldr	r2, [pc, #52]	@ (800e344 <prvInitialiseNewTask+0x144>)
 800e310:	659a      	str	r2, [r3, #88]	@ 0x58
 800e312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e314:	4a0c      	ldr	r2, [pc, #48]	@ (800e348 <prvInitialiseNewTask+0x148>)
 800e316:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e31a:	4a0c      	ldr	r2, [pc, #48]	@ (800e34c <prvInitialiseNewTask+0x14c>)
 800e31c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e31e:	683a      	ldr	r2, [r7, #0]
 800e320:	68f9      	ldr	r1, [r7, #12]
 800e322:	69b8      	ldr	r0, [r7, #24]
 800e324:	f001 fc84 	bl	800fc30 <pxPortInitialiseStack>
 800e328:	4602      	mov	r2, r0
 800e32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e32c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e32e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e330:	2b00      	cmp	r3, #0
 800e332:	d002      	beq.n	800e33a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e336:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e338:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e33a:	bf00      	nop
 800e33c:	3720      	adds	r7, #32
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}
 800e342:	bf00      	nop
 800e344:	24033310 	.word	0x24033310
 800e348:	24033378 	.word	0x24033378
 800e34c:	240333e0 	.word	0x240333e0

0800e350 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b082      	sub	sp, #8
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e358:	f001 fd9e 	bl	800fe98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e35c:	4b2d      	ldr	r3, [pc, #180]	@ (800e414 <prvAddNewTaskToReadyList+0xc4>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	3301      	adds	r3, #1
 800e362:	4a2c      	ldr	r2, [pc, #176]	@ (800e414 <prvAddNewTaskToReadyList+0xc4>)
 800e364:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e366:	4b2c      	ldr	r3, [pc, #176]	@ (800e418 <prvAddNewTaskToReadyList+0xc8>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d109      	bne.n	800e382 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e36e:	4a2a      	ldr	r2, [pc, #168]	@ (800e418 <prvAddNewTaskToReadyList+0xc8>)
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e374:	4b27      	ldr	r3, [pc, #156]	@ (800e414 <prvAddNewTaskToReadyList+0xc4>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	2b01      	cmp	r3, #1
 800e37a:	d110      	bne.n	800e39e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e37c:	f000 fc40 	bl	800ec00 <prvInitialiseTaskLists>
 800e380:	e00d      	b.n	800e39e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e382:	4b26      	ldr	r3, [pc, #152]	@ (800e41c <prvAddNewTaskToReadyList+0xcc>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d109      	bne.n	800e39e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e38a:	4b23      	ldr	r3, [pc, #140]	@ (800e418 <prvAddNewTaskToReadyList+0xc8>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e394:	429a      	cmp	r2, r3
 800e396:	d802      	bhi.n	800e39e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e398:	4a1f      	ldr	r2, [pc, #124]	@ (800e418 <prvAddNewTaskToReadyList+0xc8>)
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e39e:	4b20      	ldr	r3, [pc, #128]	@ (800e420 <prvAddNewTaskToReadyList+0xd0>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	4a1e      	ldr	r2, [pc, #120]	@ (800e420 <prvAddNewTaskToReadyList+0xd0>)
 800e3a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e3a8:	4b1d      	ldr	r3, [pc, #116]	@ (800e420 <prvAddNewTaskToReadyList+0xd0>)
 800e3aa:	681a      	ldr	r2, [r3, #0]
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3b4:	4b1b      	ldr	r3, [pc, #108]	@ (800e424 <prvAddNewTaskToReadyList+0xd4>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d903      	bls.n	800e3c4 <prvAddNewTaskToReadyList+0x74>
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3c0:	4a18      	ldr	r2, [pc, #96]	@ (800e424 <prvAddNewTaskToReadyList+0xd4>)
 800e3c2:	6013      	str	r3, [r2, #0]
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3c8:	4613      	mov	r3, r2
 800e3ca:	009b      	lsls	r3, r3, #2
 800e3cc:	4413      	add	r3, r2
 800e3ce:	009b      	lsls	r3, r3, #2
 800e3d0:	4a15      	ldr	r2, [pc, #84]	@ (800e428 <prvAddNewTaskToReadyList+0xd8>)
 800e3d2:	441a      	add	r2, r3
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	3304      	adds	r3, #4
 800e3d8:	4619      	mov	r1, r3
 800e3da:	4610      	mov	r0, r2
 800e3dc:	f7fe fecd 	bl	800d17a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e3e0:	f001 fd8c 	bl	800fefc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e3e4:	4b0d      	ldr	r3, [pc, #52]	@ (800e41c <prvAddNewTaskToReadyList+0xcc>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d00e      	beq.n	800e40a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e3ec:	4b0a      	ldr	r3, [pc, #40]	@ (800e418 <prvAddNewTaskToReadyList+0xc8>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3f6:	429a      	cmp	r2, r3
 800e3f8:	d207      	bcs.n	800e40a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e3fa:	4b0c      	ldr	r3, [pc, #48]	@ (800e42c <prvAddNewTaskToReadyList+0xdc>)
 800e3fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e400:	601a      	str	r2, [r3, #0]
 800e402:	f3bf 8f4f 	dsb	sy
 800e406:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e40a:	bf00      	nop
 800e40c:	3708      	adds	r7, #8
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	24002448 	.word	0x24002448
 800e418:	24001f74 	.word	0x24001f74
 800e41c:	24002454 	.word	0x24002454
 800e420:	24002464 	.word	0x24002464
 800e424:	24002450 	.word	0x24002450
 800e428:	24001f78 	.word	0x24001f78
 800e42c:	e000ed04 	.word	0xe000ed04

0800e430 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e430:	b580      	push	{r7, lr}
 800e432:	b084      	sub	sp, #16
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e438:	2300      	movs	r3, #0
 800e43a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d018      	beq.n	800e474 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e442:	4b14      	ldr	r3, [pc, #80]	@ (800e494 <vTaskDelay+0x64>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d00b      	beq.n	800e462 <vTaskDelay+0x32>
	__asm volatile
 800e44a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e44e:	f383 8811 	msr	BASEPRI, r3
 800e452:	f3bf 8f6f 	isb	sy
 800e456:	f3bf 8f4f 	dsb	sy
 800e45a:	60bb      	str	r3, [r7, #8]
}
 800e45c:	bf00      	nop
 800e45e:	bf00      	nop
 800e460:	e7fd      	b.n	800e45e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e462:	f000 f88b 	bl	800e57c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e466:	2100      	movs	r1, #0
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f001 f833 	bl	800f4d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e46e:	f000 f893 	bl	800e598 <xTaskResumeAll>
 800e472:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d107      	bne.n	800e48a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e47a:	4b07      	ldr	r3, [pc, #28]	@ (800e498 <vTaskDelay+0x68>)
 800e47c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e480:	601a      	str	r2, [r3, #0]
 800e482:	f3bf 8f4f 	dsb	sy
 800e486:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e48a:	bf00      	nop
 800e48c:	3710      	adds	r7, #16
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}
 800e492:	bf00      	nop
 800e494:	24002470 	.word	0x24002470
 800e498:	e000ed04 	.word	0xe000ed04

0800e49c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b08a      	sub	sp, #40	@ 0x28
 800e4a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e4aa:	463a      	mov	r2, r7
 800e4ac:	1d39      	adds	r1, r7, #4
 800e4ae:	f107 0308 	add.w	r3, r7, #8
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7fe fe00 	bl	800d0b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e4b8:	6839      	ldr	r1, [r7, #0]
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	68ba      	ldr	r2, [r7, #8]
 800e4be:	9202      	str	r2, [sp, #8]
 800e4c0:	9301      	str	r3, [sp, #4]
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	9300      	str	r3, [sp, #0]
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	460a      	mov	r2, r1
 800e4ca:	4924      	ldr	r1, [pc, #144]	@ (800e55c <vTaskStartScheduler+0xc0>)
 800e4cc:	4824      	ldr	r0, [pc, #144]	@ (800e560 <vTaskStartScheduler+0xc4>)
 800e4ce:	f7ff fdf1 	bl	800e0b4 <xTaskCreateStatic>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	4a23      	ldr	r2, [pc, #140]	@ (800e564 <vTaskStartScheduler+0xc8>)
 800e4d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e4d8:	4b22      	ldr	r3, [pc, #136]	@ (800e564 <vTaskStartScheduler+0xc8>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d002      	beq.n	800e4e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e4e0:	2301      	movs	r3, #1
 800e4e2:	617b      	str	r3, [r7, #20]
 800e4e4:	e001      	b.n	800e4ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	2b01      	cmp	r3, #1
 800e4ee:	d102      	bne.n	800e4f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e4f0:	f001 f844 	bl	800f57c <xTimerCreateTimerTask>
 800e4f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	2b01      	cmp	r3, #1
 800e4fa:	d11b      	bne.n	800e534 <vTaskStartScheduler+0x98>
	__asm volatile
 800e4fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e500:	f383 8811 	msr	BASEPRI, r3
 800e504:	f3bf 8f6f 	isb	sy
 800e508:	f3bf 8f4f 	dsb	sy
 800e50c:	613b      	str	r3, [r7, #16]
}
 800e50e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e510:	4b15      	ldr	r3, [pc, #84]	@ (800e568 <vTaskStartScheduler+0xcc>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	3354      	adds	r3, #84	@ 0x54
 800e516:	4a15      	ldr	r2, [pc, #84]	@ (800e56c <vTaskStartScheduler+0xd0>)
 800e518:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e51a:	4b15      	ldr	r3, [pc, #84]	@ (800e570 <vTaskStartScheduler+0xd4>)
 800e51c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e520:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e522:	4b14      	ldr	r3, [pc, #80]	@ (800e574 <vTaskStartScheduler+0xd8>)
 800e524:	2201      	movs	r2, #1
 800e526:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e528:	4b13      	ldr	r3, [pc, #76]	@ (800e578 <vTaskStartScheduler+0xdc>)
 800e52a:	2200      	movs	r2, #0
 800e52c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e52e:	f001 fc0f 	bl	800fd50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e532:	e00f      	b.n	800e554 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e534:	697b      	ldr	r3, [r7, #20]
 800e536:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e53a:	d10b      	bne.n	800e554 <vTaskStartScheduler+0xb8>
	__asm volatile
 800e53c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e540:	f383 8811 	msr	BASEPRI, r3
 800e544:	f3bf 8f6f 	isb	sy
 800e548:	f3bf 8f4f 	dsb	sy
 800e54c:	60fb      	str	r3, [r7, #12]
}
 800e54e:	bf00      	nop
 800e550:	bf00      	nop
 800e552:	e7fd      	b.n	800e550 <vTaskStartScheduler+0xb4>
}
 800e554:	bf00      	nop
 800e556:	3718      	adds	r7, #24
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}
 800e55c:	08014000 	.word	0x08014000
 800e560:	0800ebd1 	.word	0x0800ebd1
 800e564:	2400246c 	.word	0x2400246c
 800e568:	24001f74 	.word	0x24001f74
 800e56c:	240012b8 	.word	0x240012b8
 800e570:	24002468 	.word	0x24002468
 800e574:	24002454 	.word	0x24002454
 800e578:	2400244c 	.word	0x2400244c

0800e57c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e57c:	b480      	push	{r7}
 800e57e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e580:	4b04      	ldr	r3, [pc, #16]	@ (800e594 <vTaskSuspendAll+0x18>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	3301      	adds	r3, #1
 800e586:	4a03      	ldr	r2, [pc, #12]	@ (800e594 <vTaskSuspendAll+0x18>)
 800e588:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e58a:	bf00      	nop
 800e58c:	46bd      	mov	sp, r7
 800e58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e592:	4770      	bx	lr
 800e594:	24002470 	.word	0x24002470

0800e598 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b084      	sub	sp, #16
 800e59c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e5a6:	4b42      	ldr	r3, [pc, #264]	@ (800e6b0 <xTaskResumeAll+0x118>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d10b      	bne.n	800e5c6 <xTaskResumeAll+0x2e>
	__asm volatile
 800e5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5b2:	f383 8811 	msr	BASEPRI, r3
 800e5b6:	f3bf 8f6f 	isb	sy
 800e5ba:	f3bf 8f4f 	dsb	sy
 800e5be:	603b      	str	r3, [r7, #0]
}
 800e5c0:	bf00      	nop
 800e5c2:	bf00      	nop
 800e5c4:	e7fd      	b.n	800e5c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e5c6:	f001 fc67 	bl	800fe98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e5ca:	4b39      	ldr	r3, [pc, #228]	@ (800e6b0 <xTaskResumeAll+0x118>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	3b01      	subs	r3, #1
 800e5d0:	4a37      	ldr	r2, [pc, #220]	@ (800e6b0 <xTaskResumeAll+0x118>)
 800e5d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5d4:	4b36      	ldr	r3, [pc, #216]	@ (800e6b0 <xTaskResumeAll+0x118>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d162      	bne.n	800e6a2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e5dc:	4b35      	ldr	r3, [pc, #212]	@ (800e6b4 <xTaskResumeAll+0x11c>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d05e      	beq.n	800e6a2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e5e4:	e02f      	b.n	800e646 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5e6:	4b34      	ldr	r3, [pc, #208]	@ (800e6b8 <xTaskResumeAll+0x120>)
 800e5e8:	68db      	ldr	r3, [r3, #12]
 800e5ea:	68db      	ldr	r3, [r3, #12]
 800e5ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	3318      	adds	r3, #24
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f7fe fe1e 	bl	800d234 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	3304      	adds	r3, #4
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f7fe fe19 	bl	800d234 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e606:	4b2d      	ldr	r3, [pc, #180]	@ (800e6bc <xTaskResumeAll+0x124>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d903      	bls.n	800e616 <xTaskResumeAll+0x7e>
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e612:	4a2a      	ldr	r2, [pc, #168]	@ (800e6bc <xTaskResumeAll+0x124>)
 800e614:	6013      	str	r3, [r2, #0]
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e61a:	4613      	mov	r3, r2
 800e61c:	009b      	lsls	r3, r3, #2
 800e61e:	4413      	add	r3, r2
 800e620:	009b      	lsls	r3, r3, #2
 800e622:	4a27      	ldr	r2, [pc, #156]	@ (800e6c0 <xTaskResumeAll+0x128>)
 800e624:	441a      	add	r2, r3
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	3304      	adds	r3, #4
 800e62a:	4619      	mov	r1, r3
 800e62c:	4610      	mov	r0, r2
 800e62e:	f7fe fda4 	bl	800d17a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e636:	4b23      	ldr	r3, [pc, #140]	@ (800e6c4 <xTaskResumeAll+0x12c>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d302      	bcc.n	800e646 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e640:	4b21      	ldr	r3, [pc, #132]	@ (800e6c8 <xTaskResumeAll+0x130>)
 800e642:	2201      	movs	r2, #1
 800e644:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e646:	4b1c      	ldr	r3, [pc, #112]	@ (800e6b8 <xTaskResumeAll+0x120>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d1cb      	bne.n	800e5e6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d001      	beq.n	800e658 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e654:	f000 fb78 	bl	800ed48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e658:	4b1c      	ldr	r3, [pc, #112]	@ (800e6cc <xTaskResumeAll+0x134>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d010      	beq.n	800e686 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e664:	f000 f858 	bl	800e718 <xTaskIncrementTick>
 800e668:	4603      	mov	r3, r0
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d002      	beq.n	800e674 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e66e:	4b16      	ldr	r3, [pc, #88]	@ (800e6c8 <xTaskResumeAll+0x130>)
 800e670:	2201      	movs	r2, #1
 800e672:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	3b01      	subs	r3, #1
 800e678:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d1f1      	bne.n	800e664 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e680:	4b12      	ldr	r3, [pc, #72]	@ (800e6cc <xTaskResumeAll+0x134>)
 800e682:	2200      	movs	r2, #0
 800e684:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e686:	4b10      	ldr	r3, [pc, #64]	@ (800e6c8 <xTaskResumeAll+0x130>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d009      	beq.n	800e6a2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e68e:	2301      	movs	r3, #1
 800e690:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e692:	4b0f      	ldr	r3, [pc, #60]	@ (800e6d0 <xTaskResumeAll+0x138>)
 800e694:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e698:	601a      	str	r2, [r3, #0]
 800e69a:	f3bf 8f4f 	dsb	sy
 800e69e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e6a2:	f001 fc2b 	bl	800fefc <vPortExitCritical>

	return xAlreadyYielded;
 800e6a6:	68bb      	ldr	r3, [r7, #8]
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3710      	adds	r7, #16
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}
 800e6b0:	24002470 	.word	0x24002470
 800e6b4:	24002448 	.word	0x24002448
 800e6b8:	24002408 	.word	0x24002408
 800e6bc:	24002450 	.word	0x24002450
 800e6c0:	24001f78 	.word	0x24001f78
 800e6c4:	24001f74 	.word	0x24001f74
 800e6c8:	2400245c 	.word	0x2400245c
 800e6cc:	24002458 	.word	0x24002458
 800e6d0:	e000ed04 	.word	0xe000ed04

0800e6d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b083      	sub	sp, #12
 800e6d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e6da:	4b05      	ldr	r3, [pc, #20]	@ (800e6f0 <xTaskGetTickCount+0x1c>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e6e0:	687b      	ldr	r3, [r7, #4]
}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	370c      	adds	r7, #12
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ec:	4770      	bx	lr
 800e6ee:	bf00      	nop
 800e6f0:	2400244c 	.word	0x2400244c

0800e6f4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b082      	sub	sp, #8
 800e6f8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e6fa:	f001 fcad 	bl	8010058 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e6fe:	2300      	movs	r3, #0
 800e700:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e702:	4b04      	ldr	r3, [pc, #16]	@ (800e714 <xTaskGetTickCountFromISR+0x20>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e708:	683b      	ldr	r3, [r7, #0]
}
 800e70a:	4618      	mov	r0, r3
 800e70c:	3708      	adds	r7, #8
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}
 800e712:	bf00      	nop
 800e714:	2400244c 	.word	0x2400244c

0800e718 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b086      	sub	sp, #24
 800e71c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e71e:	2300      	movs	r3, #0
 800e720:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e722:	4b4f      	ldr	r3, [pc, #316]	@ (800e860 <xTaskIncrementTick+0x148>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	2b00      	cmp	r3, #0
 800e728:	f040 8090 	bne.w	800e84c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e72c:	4b4d      	ldr	r3, [pc, #308]	@ (800e864 <xTaskIncrementTick+0x14c>)
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	3301      	adds	r3, #1
 800e732:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e734:	4a4b      	ldr	r2, [pc, #300]	@ (800e864 <xTaskIncrementTick+0x14c>)
 800e736:	693b      	ldr	r3, [r7, #16]
 800e738:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e73a:	693b      	ldr	r3, [r7, #16]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d121      	bne.n	800e784 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e740:	4b49      	ldr	r3, [pc, #292]	@ (800e868 <xTaskIncrementTick+0x150>)
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d00b      	beq.n	800e762 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e74a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e74e:	f383 8811 	msr	BASEPRI, r3
 800e752:	f3bf 8f6f 	isb	sy
 800e756:	f3bf 8f4f 	dsb	sy
 800e75a:	603b      	str	r3, [r7, #0]
}
 800e75c:	bf00      	nop
 800e75e:	bf00      	nop
 800e760:	e7fd      	b.n	800e75e <xTaskIncrementTick+0x46>
 800e762:	4b41      	ldr	r3, [pc, #260]	@ (800e868 <xTaskIncrementTick+0x150>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	60fb      	str	r3, [r7, #12]
 800e768:	4b40      	ldr	r3, [pc, #256]	@ (800e86c <xTaskIncrementTick+0x154>)
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	4a3e      	ldr	r2, [pc, #248]	@ (800e868 <xTaskIncrementTick+0x150>)
 800e76e:	6013      	str	r3, [r2, #0]
 800e770:	4a3e      	ldr	r2, [pc, #248]	@ (800e86c <xTaskIncrementTick+0x154>)
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	6013      	str	r3, [r2, #0]
 800e776:	4b3e      	ldr	r3, [pc, #248]	@ (800e870 <xTaskIncrementTick+0x158>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	3301      	adds	r3, #1
 800e77c:	4a3c      	ldr	r2, [pc, #240]	@ (800e870 <xTaskIncrementTick+0x158>)
 800e77e:	6013      	str	r3, [r2, #0]
 800e780:	f000 fae2 	bl	800ed48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e784:	4b3b      	ldr	r3, [pc, #236]	@ (800e874 <xTaskIncrementTick+0x15c>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	693a      	ldr	r2, [r7, #16]
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d349      	bcc.n	800e822 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e78e:	4b36      	ldr	r3, [pc, #216]	@ (800e868 <xTaskIncrementTick+0x150>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d104      	bne.n	800e7a2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e798:	4b36      	ldr	r3, [pc, #216]	@ (800e874 <xTaskIncrementTick+0x15c>)
 800e79a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e79e:	601a      	str	r2, [r3, #0]
					break;
 800e7a0:	e03f      	b.n	800e822 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7a2:	4b31      	ldr	r3, [pc, #196]	@ (800e868 <xTaskIncrementTick+0x150>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	68db      	ldr	r3, [r3, #12]
 800e7a8:	68db      	ldr	r3, [r3, #12]
 800e7aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	685b      	ldr	r3, [r3, #4]
 800e7b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e7b2:	693a      	ldr	r2, [r7, #16]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d203      	bcs.n	800e7c2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e7ba:	4a2e      	ldr	r2, [pc, #184]	@ (800e874 <xTaskIncrementTick+0x15c>)
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e7c0:	e02f      	b.n	800e822 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	3304      	adds	r3, #4
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	f7fe fd34 	bl	800d234 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d004      	beq.n	800e7de <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	3318      	adds	r3, #24
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7fe fd2b 	bl	800d234 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e7de:	68bb      	ldr	r3, [r7, #8]
 800e7e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7e2:	4b25      	ldr	r3, [pc, #148]	@ (800e878 <xTaskIncrementTick+0x160>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	429a      	cmp	r2, r3
 800e7e8:	d903      	bls.n	800e7f2 <xTaskIncrementTick+0xda>
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7ee:	4a22      	ldr	r2, [pc, #136]	@ (800e878 <xTaskIncrementTick+0x160>)
 800e7f0:	6013      	str	r3, [r2, #0]
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7f6:	4613      	mov	r3, r2
 800e7f8:	009b      	lsls	r3, r3, #2
 800e7fa:	4413      	add	r3, r2
 800e7fc:	009b      	lsls	r3, r3, #2
 800e7fe:	4a1f      	ldr	r2, [pc, #124]	@ (800e87c <xTaskIncrementTick+0x164>)
 800e800:	441a      	add	r2, r3
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	3304      	adds	r3, #4
 800e806:	4619      	mov	r1, r3
 800e808:	4610      	mov	r0, r2
 800e80a:	f7fe fcb6 	bl	800d17a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e812:	4b1b      	ldr	r3, [pc, #108]	@ (800e880 <xTaskIncrementTick+0x168>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e818:	429a      	cmp	r2, r3
 800e81a:	d3b8      	bcc.n	800e78e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e81c:	2301      	movs	r3, #1
 800e81e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e820:	e7b5      	b.n	800e78e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e822:	4b17      	ldr	r3, [pc, #92]	@ (800e880 <xTaskIncrementTick+0x168>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e828:	4914      	ldr	r1, [pc, #80]	@ (800e87c <xTaskIncrementTick+0x164>)
 800e82a:	4613      	mov	r3, r2
 800e82c:	009b      	lsls	r3, r3, #2
 800e82e:	4413      	add	r3, r2
 800e830:	009b      	lsls	r3, r3, #2
 800e832:	440b      	add	r3, r1
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	2b01      	cmp	r3, #1
 800e838:	d901      	bls.n	800e83e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e83a:	2301      	movs	r3, #1
 800e83c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e83e:	4b11      	ldr	r3, [pc, #68]	@ (800e884 <xTaskIncrementTick+0x16c>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d007      	beq.n	800e856 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e846:	2301      	movs	r3, #1
 800e848:	617b      	str	r3, [r7, #20]
 800e84a:	e004      	b.n	800e856 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e84c:	4b0e      	ldr	r3, [pc, #56]	@ (800e888 <xTaskIncrementTick+0x170>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	3301      	adds	r3, #1
 800e852:	4a0d      	ldr	r2, [pc, #52]	@ (800e888 <xTaskIncrementTick+0x170>)
 800e854:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e856:	697b      	ldr	r3, [r7, #20]
}
 800e858:	4618      	mov	r0, r3
 800e85a:	3718      	adds	r7, #24
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}
 800e860:	24002470 	.word	0x24002470
 800e864:	2400244c 	.word	0x2400244c
 800e868:	24002400 	.word	0x24002400
 800e86c:	24002404 	.word	0x24002404
 800e870:	24002460 	.word	0x24002460
 800e874:	24002468 	.word	0x24002468
 800e878:	24002450 	.word	0x24002450
 800e87c:	24001f78 	.word	0x24001f78
 800e880:	24001f74 	.word	0x24001f74
 800e884:	2400245c 	.word	0x2400245c
 800e888:	24002458 	.word	0x24002458

0800e88c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e88c:	b480      	push	{r7}
 800e88e:	b085      	sub	sp, #20
 800e890:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e892:	4b2b      	ldr	r3, [pc, #172]	@ (800e940 <vTaskSwitchContext+0xb4>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d003      	beq.n	800e8a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e89a:	4b2a      	ldr	r3, [pc, #168]	@ (800e944 <vTaskSwitchContext+0xb8>)
 800e89c:	2201      	movs	r2, #1
 800e89e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e8a0:	e047      	b.n	800e932 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e8a2:	4b28      	ldr	r3, [pc, #160]	@ (800e944 <vTaskSwitchContext+0xb8>)
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8a8:	4b27      	ldr	r3, [pc, #156]	@ (800e948 <vTaskSwitchContext+0xbc>)
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	60fb      	str	r3, [r7, #12]
 800e8ae:	e011      	b.n	800e8d4 <vTaskSwitchContext+0x48>
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d10b      	bne.n	800e8ce <vTaskSwitchContext+0x42>
	__asm volatile
 800e8b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ba:	f383 8811 	msr	BASEPRI, r3
 800e8be:	f3bf 8f6f 	isb	sy
 800e8c2:	f3bf 8f4f 	dsb	sy
 800e8c6:	607b      	str	r3, [r7, #4]
}
 800e8c8:	bf00      	nop
 800e8ca:	bf00      	nop
 800e8cc:	e7fd      	b.n	800e8ca <vTaskSwitchContext+0x3e>
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	3b01      	subs	r3, #1
 800e8d2:	60fb      	str	r3, [r7, #12]
 800e8d4:	491d      	ldr	r1, [pc, #116]	@ (800e94c <vTaskSwitchContext+0xc0>)
 800e8d6:	68fa      	ldr	r2, [r7, #12]
 800e8d8:	4613      	mov	r3, r2
 800e8da:	009b      	lsls	r3, r3, #2
 800e8dc:	4413      	add	r3, r2
 800e8de:	009b      	lsls	r3, r3, #2
 800e8e0:	440b      	add	r3, r1
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d0e3      	beq.n	800e8b0 <vTaskSwitchContext+0x24>
 800e8e8:	68fa      	ldr	r2, [r7, #12]
 800e8ea:	4613      	mov	r3, r2
 800e8ec:	009b      	lsls	r3, r3, #2
 800e8ee:	4413      	add	r3, r2
 800e8f0:	009b      	lsls	r3, r3, #2
 800e8f2:	4a16      	ldr	r2, [pc, #88]	@ (800e94c <vTaskSwitchContext+0xc0>)
 800e8f4:	4413      	add	r3, r2
 800e8f6:	60bb      	str	r3, [r7, #8]
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	685b      	ldr	r3, [r3, #4]
 800e8fc:	685a      	ldr	r2, [r3, #4]
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	605a      	str	r2, [r3, #4]
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	685a      	ldr	r2, [r3, #4]
 800e906:	68bb      	ldr	r3, [r7, #8]
 800e908:	3308      	adds	r3, #8
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d104      	bne.n	800e918 <vTaskSwitchContext+0x8c>
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	685b      	ldr	r3, [r3, #4]
 800e912:	685a      	ldr	r2, [r3, #4]
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	605a      	str	r2, [r3, #4]
 800e918:	68bb      	ldr	r3, [r7, #8]
 800e91a:	685b      	ldr	r3, [r3, #4]
 800e91c:	68db      	ldr	r3, [r3, #12]
 800e91e:	4a0c      	ldr	r2, [pc, #48]	@ (800e950 <vTaskSwitchContext+0xc4>)
 800e920:	6013      	str	r3, [r2, #0]
 800e922:	4a09      	ldr	r2, [pc, #36]	@ (800e948 <vTaskSwitchContext+0xbc>)
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e928:	4b09      	ldr	r3, [pc, #36]	@ (800e950 <vTaskSwitchContext+0xc4>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	3354      	adds	r3, #84	@ 0x54
 800e92e:	4a09      	ldr	r2, [pc, #36]	@ (800e954 <vTaskSwitchContext+0xc8>)
 800e930:	6013      	str	r3, [r2, #0]
}
 800e932:	bf00      	nop
 800e934:	3714      	adds	r7, #20
 800e936:	46bd      	mov	sp, r7
 800e938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93c:	4770      	bx	lr
 800e93e:	bf00      	nop
 800e940:	24002470 	.word	0x24002470
 800e944:	2400245c 	.word	0x2400245c
 800e948:	24002450 	.word	0x24002450
 800e94c:	24001f78 	.word	0x24001f78
 800e950:	24001f74 	.word	0x24001f74
 800e954:	240012b8 	.word	0x240012b8

0800e958 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b084      	sub	sp, #16
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d10b      	bne.n	800e980 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e96c:	f383 8811 	msr	BASEPRI, r3
 800e970:	f3bf 8f6f 	isb	sy
 800e974:	f3bf 8f4f 	dsb	sy
 800e978:	60fb      	str	r3, [r7, #12]
}
 800e97a:	bf00      	nop
 800e97c:	bf00      	nop
 800e97e:	e7fd      	b.n	800e97c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e980:	4b07      	ldr	r3, [pc, #28]	@ (800e9a0 <vTaskPlaceOnEventList+0x48>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	3318      	adds	r3, #24
 800e986:	4619      	mov	r1, r3
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f7fe fc1a 	bl	800d1c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e98e:	2101      	movs	r1, #1
 800e990:	6838      	ldr	r0, [r7, #0]
 800e992:	f000 fd9f 	bl	800f4d4 <prvAddCurrentTaskToDelayedList>
}
 800e996:	bf00      	nop
 800e998:	3710      	adds	r7, #16
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	24001f74 	.word	0x24001f74

0800e9a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b086      	sub	sp, #24
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	60f8      	str	r0, [r7, #12]
 800e9ac:	60b9      	str	r1, [r7, #8]
 800e9ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d10b      	bne.n	800e9ce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e9b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9ba:	f383 8811 	msr	BASEPRI, r3
 800e9be:	f3bf 8f6f 	isb	sy
 800e9c2:	f3bf 8f4f 	dsb	sy
 800e9c6:	617b      	str	r3, [r7, #20]
}
 800e9c8:	bf00      	nop
 800e9ca:	bf00      	nop
 800e9cc:	e7fd      	b.n	800e9ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e9ce:	4b0a      	ldr	r3, [pc, #40]	@ (800e9f8 <vTaskPlaceOnEventListRestricted+0x54>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	3318      	adds	r3, #24
 800e9d4:	4619      	mov	r1, r3
 800e9d6:	68f8      	ldr	r0, [r7, #12]
 800e9d8:	f7fe fbcf 	bl	800d17a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d002      	beq.n	800e9e8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e9e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e9e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e9e8:	6879      	ldr	r1, [r7, #4]
 800e9ea:	68b8      	ldr	r0, [r7, #8]
 800e9ec:	f000 fd72 	bl	800f4d4 <prvAddCurrentTaskToDelayedList>
	}
 800e9f0:	bf00      	nop
 800e9f2:	3718      	adds	r7, #24
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}
 800e9f8:	24001f74 	.word	0x24001f74

0800e9fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b086      	sub	sp, #24
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	68db      	ldr	r3, [r3, #12]
 800ea08:	68db      	ldr	r3, [r3, #12]
 800ea0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ea0c:	693b      	ldr	r3, [r7, #16]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d10b      	bne.n	800ea2a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ea12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea16:	f383 8811 	msr	BASEPRI, r3
 800ea1a:	f3bf 8f6f 	isb	sy
 800ea1e:	f3bf 8f4f 	dsb	sy
 800ea22:	60fb      	str	r3, [r7, #12]
}
 800ea24:	bf00      	nop
 800ea26:	bf00      	nop
 800ea28:	e7fd      	b.n	800ea26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ea2a:	693b      	ldr	r3, [r7, #16]
 800ea2c:	3318      	adds	r3, #24
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7fe fc00 	bl	800d234 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea34:	4b1d      	ldr	r3, [pc, #116]	@ (800eaac <xTaskRemoveFromEventList+0xb0>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d11d      	bne.n	800ea78 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	3304      	adds	r3, #4
 800ea40:	4618      	mov	r0, r3
 800ea42:	f7fe fbf7 	bl	800d234 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea4a:	4b19      	ldr	r3, [pc, #100]	@ (800eab0 <xTaskRemoveFromEventList+0xb4>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	d903      	bls.n	800ea5a <xTaskRemoveFromEventList+0x5e>
 800ea52:	693b      	ldr	r3, [r7, #16]
 800ea54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea56:	4a16      	ldr	r2, [pc, #88]	@ (800eab0 <xTaskRemoveFromEventList+0xb4>)
 800ea58:	6013      	str	r3, [r2, #0]
 800ea5a:	693b      	ldr	r3, [r7, #16]
 800ea5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea5e:	4613      	mov	r3, r2
 800ea60:	009b      	lsls	r3, r3, #2
 800ea62:	4413      	add	r3, r2
 800ea64:	009b      	lsls	r3, r3, #2
 800ea66:	4a13      	ldr	r2, [pc, #76]	@ (800eab4 <xTaskRemoveFromEventList+0xb8>)
 800ea68:	441a      	add	r2, r3
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	3304      	adds	r3, #4
 800ea6e:	4619      	mov	r1, r3
 800ea70:	4610      	mov	r0, r2
 800ea72:	f7fe fb82 	bl	800d17a <vListInsertEnd>
 800ea76:	e005      	b.n	800ea84 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ea78:	693b      	ldr	r3, [r7, #16]
 800ea7a:	3318      	adds	r3, #24
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	480e      	ldr	r0, [pc, #56]	@ (800eab8 <xTaskRemoveFromEventList+0xbc>)
 800ea80:	f7fe fb7b 	bl	800d17a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ea84:	693b      	ldr	r3, [r7, #16]
 800ea86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea88:	4b0c      	ldr	r3, [pc, #48]	@ (800eabc <xTaskRemoveFromEventList+0xc0>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	d905      	bls.n	800ea9e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ea92:	2301      	movs	r3, #1
 800ea94:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ea96:	4b0a      	ldr	r3, [pc, #40]	@ (800eac0 <xTaskRemoveFromEventList+0xc4>)
 800ea98:	2201      	movs	r2, #1
 800ea9a:	601a      	str	r2, [r3, #0]
 800ea9c:	e001      	b.n	800eaa2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800eaa2:	697b      	ldr	r3, [r7, #20]
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3718      	adds	r7, #24
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}
 800eaac:	24002470 	.word	0x24002470
 800eab0:	24002450 	.word	0x24002450
 800eab4:	24001f78 	.word	0x24001f78
 800eab8:	24002408 	.word	0x24002408
 800eabc:	24001f74 	.word	0x24001f74
 800eac0:	2400245c 	.word	0x2400245c

0800eac4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800eac4:	b480      	push	{r7}
 800eac6:	b083      	sub	sp, #12
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800eacc:	4b06      	ldr	r3, [pc, #24]	@ (800eae8 <vTaskInternalSetTimeOutState+0x24>)
 800eace:	681a      	ldr	r2, [r3, #0]
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ead4:	4b05      	ldr	r3, [pc, #20]	@ (800eaec <vTaskInternalSetTimeOutState+0x28>)
 800ead6:	681a      	ldr	r2, [r3, #0]
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	605a      	str	r2, [r3, #4]
}
 800eadc:	bf00      	nop
 800eade:	370c      	adds	r7, #12
 800eae0:	46bd      	mov	sp, r7
 800eae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae6:	4770      	bx	lr
 800eae8:	24002460 	.word	0x24002460
 800eaec:	2400244c 	.word	0x2400244c

0800eaf0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b088      	sub	sp, #32
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d10b      	bne.n	800eb18 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800eb00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb04:	f383 8811 	msr	BASEPRI, r3
 800eb08:	f3bf 8f6f 	isb	sy
 800eb0c:	f3bf 8f4f 	dsb	sy
 800eb10:	613b      	str	r3, [r7, #16]
}
 800eb12:	bf00      	nop
 800eb14:	bf00      	nop
 800eb16:	e7fd      	b.n	800eb14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d10b      	bne.n	800eb36 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800eb1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb22:	f383 8811 	msr	BASEPRI, r3
 800eb26:	f3bf 8f6f 	isb	sy
 800eb2a:	f3bf 8f4f 	dsb	sy
 800eb2e:	60fb      	str	r3, [r7, #12]
}
 800eb30:	bf00      	nop
 800eb32:	bf00      	nop
 800eb34:	e7fd      	b.n	800eb32 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800eb36:	f001 f9af 	bl	800fe98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800eb3a:	4b1d      	ldr	r3, [pc, #116]	@ (800ebb0 <xTaskCheckForTimeOut+0xc0>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	685b      	ldr	r3, [r3, #4]
 800eb44:	69ba      	ldr	r2, [r7, #24]
 800eb46:	1ad3      	subs	r3, r2, r3
 800eb48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eb52:	d102      	bne.n	800eb5a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800eb54:	2300      	movs	r3, #0
 800eb56:	61fb      	str	r3, [r7, #28]
 800eb58:	e023      	b.n	800eba2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681a      	ldr	r2, [r3, #0]
 800eb5e:	4b15      	ldr	r3, [pc, #84]	@ (800ebb4 <xTaskCheckForTimeOut+0xc4>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	429a      	cmp	r2, r3
 800eb64:	d007      	beq.n	800eb76 <xTaskCheckForTimeOut+0x86>
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	685b      	ldr	r3, [r3, #4]
 800eb6a:	69ba      	ldr	r2, [r7, #24]
 800eb6c:	429a      	cmp	r2, r3
 800eb6e:	d302      	bcc.n	800eb76 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800eb70:	2301      	movs	r3, #1
 800eb72:	61fb      	str	r3, [r7, #28]
 800eb74:	e015      	b.n	800eba2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	697a      	ldr	r2, [r7, #20]
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	d20b      	bcs.n	800eb98 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	681a      	ldr	r2, [r3, #0]
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	1ad2      	subs	r2, r2, r3
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f7ff ff99 	bl	800eac4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eb92:	2300      	movs	r3, #0
 800eb94:	61fb      	str	r3, [r7, #28]
 800eb96:	e004      	b.n	800eba2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800eb9e:	2301      	movs	r3, #1
 800eba0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800eba2:	f001 f9ab 	bl	800fefc <vPortExitCritical>

	return xReturn;
 800eba6:	69fb      	ldr	r3, [r7, #28]
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3720      	adds	r7, #32
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}
 800ebb0:	2400244c 	.word	0x2400244c
 800ebb4:	24002460 	.word	0x24002460

0800ebb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ebb8:	b480      	push	{r7}
 800ebba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ebbc:	4b03      	ldr	r3, [pc, #12]	@ (800ebcc <vTaskMissedYield+0x14>)
 800ebbe:	2201      	movs	r2, #1
 800ebc0:	601a      	str	r2, [r3, #0]
}
 800ebc2:	bf00      	nop
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebca:	4770      	bx	lr
 800ebcc:	2400245c 	.word	0x2400245c

0800ebd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b082      	sub	sp, #8
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ebd8:	f000 f852 	bl	800ec80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ebdc:	4b06      	ldr	r3, [pc, #24]	@ (800ebf8 <prvIdleTask+0x28>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	2b01      	cmp	r3, #1
 800ebe2:	d9f9      	bls.n	800ebd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ebe4:	4b05      	ldr	r3, [pc, #20]	@ (800ebfc <prvIdleTask+0x2c>)
 800ebe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ebea:	601a      	str	r2, [r3, #0]
 800ebec:	f3bf 8f4f 	dsb	sy
 800ebf0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ebf4:	e7f0      	b.n	800ebd8 <prvIdleTask+0x8>
 800ebf6:	bf00      	nop
 800ebf8:	24001f78 	.word	0x24001f78
 800ebfc:	e000ed04 	.word	0xe000ed04

0800ec00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b082      	sub	sp, #8
 800ec04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ec06:	2300      	movs	r3, #0
 800ec08:	607b      	str	r3, [r7, #4]
 800ec0a:	e00c      	b.n	800ec26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ec0c:	687a      	ldr	r2, [r7, #4]
 800ec0e:	4613      	mov	r3, r2
 800ec10:	009b      	lsls	r3, r3, #2
 800ec12:	4413      	add	r3, r2
 800ec14:	009b      	lsls	r3, r3, #2
 800ec16:	4a12      	ldr	r2, [pc, #72]	@ (800ec60 <prvInitialiseTaskLists+0x60>)
 800ec18:	4413      	add	r3, r2
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f7fe fa80 	bl	800d120 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	3301      	adds	r3, #1
 800ec24:	607b      	str	r3, [r7, #4]
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2b37      	cmp	r3, #55	@ 0x37
 800ec2a:	d9ef      	bls.n	800ec0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ec2c:	480d      	ldr	r0, [pc, #52]	@ (800ec64 <prvInitialiseTaskLists+0x64>)
 800ec2e:	f7fe fa77 	bl	800d120 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ec32:	480d      	ldr	r0, [pc, #52]	@ (800ec68 <prvInitialiseTaskLists+0x68>)
 800ec34:	f7fe fa74 	bl	800d120 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ec38:	480c      	ldr	r0, [pc, #48]	@ (800ec6c <prvInitialiseTaskLists+0x6c>)
 800ec3a:	f7fe fa71 	bl	800d120 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ec3e:	480c      	ldr	r0, [pc, #48]	@ (800ec70 <prvInitialiseTaskLists+0x70>)
 800ec40:	f7fe fa6e 	bl	800d120 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ec44:	480b      	ldr	r0, [pc, #44]	@ (800ec74 <prvInitialiseTaskLists+0x74>)
 800ec46:	f7fe fa6b 	bl	800d120 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ec4a:	4b0b      	ldr	r3, [pc, #44]	@ (800ec78 <prvInitialiseTaskLists+0x78>)
 800ec4c:	4a05      	ldr	r2, [pc, #20]	@ (800ec64 <prvInitialiseTaskLists+0x64>)
 800ec4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ec50:	4b0a      	ldr	r3, [pc, #40]	@ (800ec7c <prvInitialiseTaskLists+0x7c>)
 800ec52:	4a05      	ldr	r2, [pc, #20]	@ (800ec68 <prvInitialiseTaskLists+0x68>)
 800ec54:	601a      	str	r2, [r3, #0]
}
 800ec56:	bf00      	nop
 800ec58:	3708      	adds	r7, #8
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}
 800ec5e:	bf00      	nop
 800ec60:	24001f78 	.word	0x24001f78
 800ec64:	240023d8 	.word	0x240023d8
 800ec68:	240023ec 	.word	0x240023ec
 800ec6c:	24002408 	.word	0x24002408
 800ec70:	2400241c 	.word	0x2400241c
 800ec74:	24002434 	.word	0x24002434
 800ec78:	24002400 	.word	0x24002400
 800ec7c:	24002404 	.word	0x24002404

0800ec80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b082      	sub	sp, #8
 800ec84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ec86:	e019      	b.n	800ecbc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ec88:	f001 f906 	bl	800fe98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec8c:	4b10      	ldr	r3, [pc, #64]	@ (800ecd0 <prvCheckTasksWaitingTermination+0x50>)
 800ec8e:	68db      	ldr	r3, [r3, #12]
 800ec90:	68db      	ldr	r3, [r3, #12]
 800ec92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	3304      	adds	r3, #4
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f7fe facb 	bl	800d234 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ec9e:	4b0d      	ldr	r3, [pc, #52]	@ (800ecd4 <prvCheckTasksWaitingTermination+0x54>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	3b01      	subs	r3, #1
 800eca4:	4a0b      	ldr	r2, [pc, #44]	@ (800ecd4 <prvCheckTasksWaitingTermination+0x54>)
 800eca6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eca8:	4b0b      	ldr	r3, [pc, #44]	@ (800ecd8 <prvCheckTasksWaitingTermination+0x58>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	3b01      	subs	r3, #1
 800ecae:	4a0a      	ldr	r2, [pc, #40]	@ (800ecd8 <prvCheckTasksWaitingTermination+0x58>)
 800ecb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ecb2:	f001 f923 	bl	800fefc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f000 f810 	bl	800ecdc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ecbc:	4b06      	ldr	r3, [pc, #24]	@ (800ecd8 <prvCheckTasksWaitingTermination+0x58>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d1e1      	bne.n	800ec88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ecc4:	bf00      	nop
 800ecc6:	bf00      	nop
 800ecc8:	3708      	adds	r7, #8
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
 800ecce:	bf00      	nop
 800ecd0:	2400241c 	.word	0x2400241c
 800ecd4:	24002448 	.word	0x24002448
 800ecd8:	24002430 	.word	0x24002430

0800ecdc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b084      	sub	sp, #16
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	3354      	adds	r3, #84	@ 0x54
 800ece8:	4618      	mov	r0, r3
 800ecea:	f004 feff 	bl	8013aec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d108      	bne.n	800ed0a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f001 fabb 	bl	8010278 <vPortFree>
				vPortFree( pxTCB );
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f001 fab8 	bl	8010278 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ed08:	e019      	b.n	800ed3e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ed10:	2b01      	cmp	r3, #1
 800ed12:	d103      	bne.n	800ed1c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f001 faaf 	bl	8010278 <vPortFree>
	}
 800ed1a:	e010      	b.n	800ed3e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ed22:	2b02      	cmp	r3, #2
 800ed24:	d00b      	beq.n	800ed3e <prvDeleteTCB+0x62>
	__asm volatile
 800ed26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed2a:	f383 8811 	msr	BASEPRI, r3
 800ed2e:	f3bf 8f6f 	isb	sy
 800ed32:	f3bf 8f4f 	dsb	sy
 800ed36:	60fb      	str	r3, [r7, #12]
}
 800ed38:	bf00      	nop
 800ed3a:	bf00      	nop
 800ed3c:	e7fd      	b.n	800ed3a <prvDeleteTCB+0x5e>
	}
 800ed3e:	bf00      	nop
 800ed40:	3710      	adds	r7, #16
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}
	...

0800ed48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ed48:	b480      	push	{r7}
 800ed4a:	b083      	sub	sp, #12
 800ed4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ed4e:	4b0c      	ldr	r3, [pc, #48]	@ (800ed80 <prvResetNextTaskUnblockTime+0x38>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d104      	bne.n	800ed62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ed58:	4b0a      	ldr	r3, [pc, #40]	@ (800ed84 <prvResetNextTaskUnblockTime+0x3c>)
 800ed5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ed5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ed60:	e008      	b.n	800ed74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed62:	4b07      	ldr	r3, [pc, #28]	@ (800ed80 <prvResetNextTaskUnblockTime+0x38>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	68db      	ldr	r3, [r3, #12]
 800ed68:	68db      	ldr	r3, [r3, #12]
 800ed6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	685b      	ldr	r3, [r3, #4]
 800ed70:	4a04      	ldr	r2, [pc, #16]	@ (800ed84 <prvResetNextTaskUnblockTime+0x3c>)
 800ed72:	6013      	str	r3, [r2, #0]
}
 800ed74:	bf00      	nop
 800ed76:	370c      	adds	r7, #12
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7e:	4770      	bx	lr
 800ed80:	24002400 	.word	0x24002400
 800ed84:	24002468 	.word	0x24002468

0800ed88 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ed88:	b480      	push	{r7}
 800ed8a:	b083      	sub	sp, #12
 800ed8c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ed8e:	4b05      	ldr	r3, [pc, #20]	@ (800eda4 <xTaskGetCurrentTaskHandle+0x1c>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ed94:	687b      	ldr	r3, [r7, #4]
	}
 800ed96:	4618      	mov	r0, r3
 800ed98:	370c      	adds	r7, #12
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda0:	4770      	bx	lr
 800eda2:	bf00      	nop
 800eda4:	24001f74 	.word	0x24001f74

0800eda8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800eda8:	b480      	push	{r7}
 800edaa:	b083      	sub	sp, #12
 800edac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800edae:	4b0b      	ldr	r3, [pc, #44]	@ (800eddc <xTaskGetSchedulerState+0x34>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d102      	bne.n	800edbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800edb6:	2301      	movs	r3, #1
 800edb8:	607b      	str	r3, [r7, #4]
 800edba:	e008      	b.n	800edce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edbc:	4b08      	ldr	r3, [pc, #32]	@ (800ede0 <xTaskGetSchedulerState+0x38>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d102      	bne.n	800edca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800edc4:	2302      	movs	r3, #2
 800edc6:	607b      	str	r3, [r7, #4]
 800edc8:	e001      	b.n	800edce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800edca:	2300      	movs	r3, #0
 800edcc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800edce:	687b      	ldr	r3, [r7, #4]
	}
 800edd0:	4618      	mov	r0, r3
 800edd2:	370c      	adds	r7, #12
 800edd4:	46bd      	mov	sp, r7
 800edd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edda:	4770      	bx	lr
 800eddc:	24002454 	.word	0x24002454
 800ede0:	24002470 	.word	0x24002470

0800ede4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b084      	sub	sp, #16
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800edf0:	2300      	movs	r3, #0
 800edf2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d051      	beq.n	800ee9e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edfe:	4b2a      	ldr	r3, [pc, #168]	@ (800eea8 <xTaskPriorityInherit+0xc4>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee04:	429a      	cmp	r2, r3
 800ee06:	d241      	bcs.n	800ee8c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	699b      	ldr	r3, [r3, #24]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	db06      	blt.n	800ee1e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee10:	4b25      	ldr	r3, [pc, #148]	@ (800eea8 <xTaskPriorityInherit+0xc4>)
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee16:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ee1a:	68bb      	ldr	r3, [r7, #8]
 800ee1c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	6959      	ldr	r1, [r3, #20]
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee26:	4613      	mov	r3, r2
 800ee28:	009b      	lsls	r3, r3, #2
 800ee2a:	4413      	add	r3, r2
 800ee2c:	009b      	lsls	r3, r3, #2
 800ee2e:	4a1f      	ldr	r2, [pc, #124]	@ (800eeac <xTaskPriorityInherit+0xc8>)
 800ee30:	4413      	add	r3, r2
 800ee32:	4299      	cmp	r1, r3
 800ee34:	d122      	bne.n	800ee7c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	3304      	adds	r3, #4
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7fe f9fa 	bl	800d234 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ee40:	4b19      	ldr	r3, [pc, #100]	@ (800eea8 <xTaskPriorityInherit+0xc4>)
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee4e:	4b18      	ldr	r3, [pc, #96]	@ (800eeb0 <xTaskPriorityInherit+0xcc>)
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d903      	bls.n	800ee5e <xTaskPriorityInherit+0x7a>
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee5a:	4a15      	ldr	r2, [pc, #84]	@ (800eeb0 <xTaskPriorityInherit+0xcc>)
 800ee5c:	6013      	str	r3, [r2, #0]
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee62:	4613      	mov	r3, r2
 800ee64:	009b      	lsls	r3, r3, #2
 800ee66:	4413      	add	r3, r2
 800ee68:	009b      	lsls	r3, r3, #2
 800ee6a:	4a10      	ldr	r2, [pc, #64]	@ (800eeac <xTaskPriorityInherit+0xc8>)
 800ee6c:	441a      	add	r2, r3
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	3304      	adds	r3, #4
 800ee72:	4619      	mov	r1, r3
 800ee74:	4610      	mov	r0, r2
 800ee76:	f7fe f980 	bl	800d17a <vListInsertEnd>
 800ee7a:	e004      	b.n	800ee86 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ee7c:	4b0a      	ldr	r3, [pc, #40]	@ (800eea8 <xTaskPriorityInherit+0xc4>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ee86:	2301      	movs	r3, #1
 800ee88:	60fb      	str	r3, [r7, #12]
 800ee8a:	e008      	b.n	800ee9e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ee90:	4b05      	ldr	r3, [pc, #20]	@ (800eea8 <xTaskPriorityInherit+0xc4>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d201      	bcs.n	800ee9e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
	}
 800eea0:	4618      	mov	r0, r3
 800eea2:	3710      	adds	r7, #16
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}
 800eea8:	24001f74 	.word	0x24001f74
 800eeac:	24001f78 	.word	0x24001f78
 800eeb0:	24002450 	.word	0x24002450

0800eeb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b086      	sub	sp, #24
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eec0:	2300      	movs	r3, #0
 800eec2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d058      	beq.n	800ef7c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800eeca:	4b2f      	ldr	r3, [pc, #188]	@ (800ef88 <xTaskPriorityDisinherit+0xd4>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	693a      	ldr	r2, [r7, #16]
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d00b      	beq.n	800eeec <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800eed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eed8:	f383 8811 	msr	BASEPRI, r3
 800eedc:	f3bf 8f6f 	isb	sy
 800eee0:	f3bf 8f4f 	dsb	sy
 800eee4:	60fb      	str	r3, [r7, #12]
}
 800eee6:	bf00      	nop
 800eee8:	bf00      	nop
 800eeea:	e7fd      	b.n	800eee8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800eeec:	693b      	ldr	r3, [r7, #16]
 800eeee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d10b      	bne.n	800ef0c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800eef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eef8:	f383 8811 	msr	BASEPRI, r3
 800eefc:	f3bf 8f6f 	isb	sy
 800ef00:	f3bf 8f4f 	dsb	sy
 800ef04:	60bb      	str	r3, [r7, #8]
}
 800ef06:	bf00      	nop
 800ef08:	bf00      	nop
 800ef0a:	e7fd      	b.n	800ef08 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ef0c:	693b      	ldr	r3, [r7, #16]
 800ef0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef10:	1e5a      	subs	r2, r3, #1
 800ef12:	693b      	ldr	r3, [r7, #16]
 800ef14:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ef16:	693b      	ldr	r3, [r7, #16]
 800ef18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef1a:	693b      	ldr	r3, [r7, #16]
 800ef1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d02c      	beq.n	800ef7c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ef22:	693b      	ldr	r3, [r7, #16]
 800ef24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d128      	bne.n	800ef7c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef2a:	693b      	ldr	r3, [r7, #16]
 800ef2c:	3304      	adds	r3, #4
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7fe f980 	bl	800d234 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ef38:	693b      	ldr	r3, [r7, #16]
 800ef3a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef3c:	693b      	ldr	r3, [r7, #16]
 800ef3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef40:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ef44:	693b      	ldr	r3, [r7, #16]
 800ef46:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ef48:	693b      	ldr	r3, [r7, #16]
 800ef4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef4c:	4b0f      	ldr	r3, [pc, #60]	@ (800ef8c <xTaskPriorityDisinherit+0xd8>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d903      	bls.n	800ef5c <xTaskPriorityDisinherit+0xa8>
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef58:	4a0c      	ldr	r2, [pc, #48]	@ (800ef8c <xTaskPriorityDisinherit+0xd8>)
 800ef5a:	6013      	str	r3, [r2, #0]
 800ef5c:	693b      	ldr	r3, [r7, #16]
 800ef5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef60:	4613      	mov	r3, r2
 800ef62:	009b      	lsls	r3, r3, #2
 800ef64:	4413      	add	r3, r2
 800ef66:	009b      	lsls	r3, r3, #2
 800ef68:	4a09      	ldr	r2, [pc, #36]	@ (800ef90 <xTaskPriorityDisinherit+0xdc>)
 800ef6a:	441a      	add	r2, r3
 800ef6c:	693b      	ldr	r3, [r7, #16]
 800ef6e:	3304      	adds	r3, #4
 800ef70:	4619      	mov	r1, r3
 800ef72:	4610      	mov	r0, r2
 800ef74:	f7fe f901 	bl	800d17a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ef78:	2301      	movs	r3, #1
 800ef7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ef7c:	697b      	ldr	r3, [r7, #20]
	}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3718      	adds	r7, #24
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}
 800ef86:	bf00      	nop
 800ef88:	24001f74 	.word	0x24001f74
 800ef8c:	24002450 	.word	0x24002450
 800ef90:	24001f78 	.word	0x24001f78

0800ef94 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b088      	sub	sp, #32
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
 800ef9c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800efa2:	2301      	movs	r3, #1
 800efa4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d06c      	beq.n	800f086 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800efac:	69bb      	ldr	r3, [r7, #24]
 800efae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d10b      	bne.n	800efcc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800efb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efb8:	f383 8811 	msr	BASEPRI, r3
 800efbc:	f3bf 8f6f 	isb	sy
 800efc0:	f3bf 8f4f 	dsb	sy
 800efc4:	60fb      	str	r3, [r7, #12]
}
 800efc6:	bf00      	nop
 800efc8:	bf00      	nop
 800efca:	e7fd      	b.n	800efc8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800efcc:	69bb      	ldr	r3, [r7, #24]
 800efce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800efd0:	683a      	ldr	r2, [r7, #0]
 800efd2:	429a      	cmp	r2, r3
 800efd4:	d902      	bls.n	800efdc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	61fb      	str	r3, [r7, #28]
 800efda:	e002      	b.n	800efe2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800efdc:	69bb      	ldr	r3, [r7, #24]
 800efde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800efe0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800efe2:	69bb      	ldr	r3, [r7, #24]
 800efe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efe6:	69fa      	ldr	r2, [r7, #28]
 800efe8:	429a      	cmp	r2, r3
 800efea:	d04c      	beq.n	800f086 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800efec:	69bb      	ldr	r3, [r7, #24]
 800efee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eff0:	697a      	ldr	r2, [r7, #20]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d147      	bne.n	800f086 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800eff6:	4b26      	ldr	r3, [pc, #152]	@ (800f090 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	69ba      	ldr	r2, [r7, #24]
 800effc:	429a      	cmp	r2, r3
 800effe:	d10b      	bne.n	800f018 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800f000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f004:	f383 8811 	msr	BASEPRI, r3
 800f008:	f3bf 8f6f 	isb	sy
 800f00c:	f3bf 8f4f 	dsb	sy
 800f010:	60bb      	str	r3, [r7, #8]
}
 800f012:	bf00      	nop
 800f014:	bf00      	nop
 800f016:	e7fd      	b.n	800f014 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f018:	69bb      	ldr	r3, [r7, #24]
 800f01a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f01c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f01e:	69bb      	ldr	r3, [r7, #24]
 800f020:	69fa      	ldr	r2, [r7, #28]
 800f022:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f024:	69bb      	ldr	r3, [r7, #24]
 800f026:	699b      	ldr	r3, [r3, #24]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	db04      	blt.n	800f036 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f02c:	69fb      	ldr	r3, [r7, #28]
 800f02e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f032:	69bb      	ldr	r3, [r7, #24]
 800f034:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f036:	69bb      	ldr	r3, [r7, #24]
 800f038:	6959      	ldr	r1, [r3, #20]
 800f03a:	693a      	ldr	r2, [r7, #16]
 800f03c:	4613      	mov	r3, r2
 800f03e:	009b      	lsls	r3, r3, #2
 800f040:	4413      	add	r3, r2
 800f042:	009b      	lsls	r3, r3, #2
 800f044:	4a13      	ldr	r2, [pc, #76]	@ (800f094 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f046:	4413      	add	r3, r2
 800f048:	4299      	cmp	r1, r3
 800f04a:	d11c      	bne.n	800f086 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f04c:	69bb      	ldr	r3, [r7, #24]
 800f04e:	3304      	adds	r3, #4
 800f050:	4618      	mov	r0, r3
 800f052:	f7fe f8ef 	bl	800d234 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f056:	69bb      	ldr	r3, [r7, #24]
 800f058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f05a:	4b0f      	ldr	r3, [pc, #60]	@ (800f098 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	429a      	cmp	r2, r3
 800f060:	d903      	bls.n	800f06a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800f062:	69bb      	ldr	r3, [r7, #24]
 800f064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f066:	4a0c      	ldr	r2, [pc, #48]	@ (800f098 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800f068:	6013      	str	r3, [r2, #0]
 800f06a:	69bb      	ldr	r3, [r7, #24]
 800f06c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f06e:	4613      	mov	r3, r2
 800f070:	009b      	lsls	r3, r3, #2
 800f072:	4413      	add	r3, r2
 800f074:	009b      	lsls	r3, r3, #2
 800f076:	4a07      	ldr	r2, [pc, #28]	@ (800f094 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f078:	441a      	add	r2, r3
 800f07a:	69bb      	ldr	r3, [r7, #24]
 800f07c:	3304      	adds	r3, #4
 800f07e:	4619      	mov	r1, r3
 800f080:	4610      	mov	r0, r2
 800f082:	f7fe f87a 	bl	800d17a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f086:	bf00      	nop
 800f088:	3720      	adds	r7, #32
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}
 800f08e:	bf00      	nop
 800f090:	24001f74 	.word	0x24001f74
 800f094:	24001f78 	.word	0x24001f78
 800f098:	24002450 	.word	0x24002450

0800f09c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f09c:	b480      	push	{r7}
 800f09e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f0a0:	4b07      	ldr	r3, [pc, #28]	@ (800f0c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d004      	beq.n	800f0b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f0a8:	4b05      	ldr	r3, [pc, #20]	@ (800f0c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f0ae:	3201      	adds	r2, #1
 800f0b0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800f0b2:	4b03      	ldr	r3, [pc, #12]	@ (800f0c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
	}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0be:	4770      	bx	lr
 800f0c0:	24001f74 	.word	0x24001f74

0800f0c4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b086      	sub	sp, #24
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	60f8      	str	r0, [r7, #12]
 800f0cc:	60b9      	str	r1, [r7, #8]
 800f0ce:	607a      	str	r2, [r7, #4]
 800f0d0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800f0d2:	f000 fee1 	bl	800fe98 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f0d6:	4b29      	ldr	r3, [pc, #164]	@ (800f17c <xTaskNotifyWait+0xb8>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f0de:	b2db      	uxtb	r3, r3
 800f0e0:	2b02      	cmp	r3, #2
 800f0e2:	d01c      	beq.n	800f11e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800f0e4:	4b25      	ldr	r3, [pc, #148]	@ (800f17c <xTaskNotifyWait+0xb8>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800f0ec:	68fa      	ldr	r2, [r7, #12]
 800f0ee:	43d2      	mvns	r2, r2
 800f0f0:	400a      	ands	r2, r1
 800f0f2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f0f6:	4b21      	ldr	r3, [pc, #132]	@ (800f17c <xTaskNotifyWait+0xb8>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	2201      	movs	r2, #1
 800f0fc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d00b      	beq.n	800f11e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f106:	2101      	movs	r1, #1
 800f108:	6838      	ldr	r0, [r7, #0]
 800f10a:	f000 f9e3 	bl	800f4d4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f10e:	4b1c      	ldr	r3, [pc, #112]	@ (800f180 <xTaskNotifyWait+0xbc>)
 800f110:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f114:	601a      	str	r2, [r3, #0]
 800f116:	f3bf 8f4f 	dsb	sy
 800f11a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f11e:	f000 feed 	bl	800fefc <vPortExitCritical>

		taskENTER_CRITICAL();
 800f122:	f000 feb9 	bl	800fe98 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d005      	beq.n	800f138 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800f12c:	4b13      	ldr	r3, [pc, #76]	@ (800f17c <xTaskNotifyWait+0xb8>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f138:	4b10      	ldr	r3, [pc, #64]	@ (800f17c <xTaskNotifyWait+0xb8>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f140:	b2db      	uxtb	r3, r3
 800f142:	2b02      	cmp	r3, #2
 800f144:	d002      	beq.n	800f14c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800f146:	2300      	movs	r3, #0
 800f148:	617b      	str	r3, [r7, #20]
 800f14a:	e00a      	b.n	800f162 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800f14c:	4b0b      	ldr	r3, [pc, #44]	@ (800f17c <xTaskNotifyWait+0xb8>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800f154:	68ba      	ldr	r2, [r7, #8]
 800f156:	43d2      	mvns	r2, r2
 800f158:	400a      	ands	r2, r1
 800f15a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800f15e:	2301      	movs	r3, #1
 800f160:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f162:	4b06      	ldr	r3, [pc, #24]	@ (800f17c <xTaskNotifyWait+0xb8>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	2200      	movs	r2, #0
 800f168:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800f16c:	f000 fec6 	bl	800fefc <vPortExitCritical>

		return xReturn;
 800f170:	697b      	ldr	r3, [r7, #20]
	}
 800f172:	4618      	mov	r0, r3
 800f174:	3718      	adds	r7, #24
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}
 800f17a:	bf00      	nop
 800f17c:	24001f74 	.word	0x24001f74
 800f180:	e000ed04 	.word	0xe000ed04

0800f184 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f184:	b580      	push	{r7, lr}
 800f186:	b08a      	sub	sp, #40	@ 0x28
 800f188:	af00      	add	r7, sp, #0
 800f18a:	60f8      	str	r0, [r7, #12]
 800f18c:	60b9      	str	r1, [r7, #8]
 800f18e:	603b      	str	r3, [r7, #0]
 800f190:	4613      	mov	r3, r2
 800f192:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800f194:	2301      	movs	r3, #1
 800f196:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d10b      	bne.n	800f1b6 <xTaskGenericNotify+0x32>
	__asm volatile
 800f19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1a2:	f383 8811 	msr	BASEPRI, r3
 800f1a6:	f3bf 8f6f 	isb	sy
 800f1aa:	f3bf 8f4f 	dsb	sy
 800f1ae:	61bb      	str	r3, [r7, #24]
}
 800f1b0:	bf00      	nop
 800f1b2:	bf00      	nop
 800f1b4:	e7fd      	b.n	800f1b2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800f1ba:	f000 fe6d 	bl	800fe98 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d004      	beq.n	800f1ce <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f1c4:	6a3b      	ldr	r3, [r7, #32]
 800f1c6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f1ce:	6a3b      	ldr	r3, [r7, #32]
 800f1d0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f1d4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f1d6:	6a3b      	ldr	r3, [r7, #32]
 800f1d8:	2202      	movs	r2, #2
 800f1da:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800f1de:	79fb      	ldrb	r3, [r7, #7]
 800f1e0:	2b04      	cmp	r3, #4
 800f1e2:	d82e      	bhi.n	800f242 <xTaskGenericNotify+0xbe>
 800f1e4:	a201      	add	r2, pc, #4	@ (adr r2, 800f1ec <xTaskGenericNotify+0x68>)
 800f1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ea:	bf00      	nop
 800f1ec:	0800f267 	.word	0x0800f267
 800f1f0:	0800f201 	.word	0x0800f201
 800f1f4:	0800f213 	.word	0x0800f213
 800f1f8:	0800f223 	.word	0x0800f223
 800f1fc:	0800f22d 	.word	0x0800f22d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f200:	6a3b      	ldr	r3, [r7, #32]
 800f202:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	431a      	orrs	r2, r3
 800f20a:	6a3b      	ldr	r3, [r7, #32]
 800f20c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f210:	e02c      	b.n	800f26c <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f212:	6a3b      	ldr	r3, [r7, #32]
 800f214:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f218:	1c5a      	adds	r2, r3, #1
 800f21a:	6a3b      	ldr	r3, [r7, #32]
 800f21c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f220:	e024      	b.n	800f26c <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f222:	6a3b      	ldr	r3, [r7, #32]
 800f224:	68ba      	ldr	r2, [r7, #8]
 800f226:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f22a:	e01f      	b.n	800f26c <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f22c:	7ffb      	ldrb	r3, [r7, #31]
 800f22e:	2b02      	cmp	r3, #2
 800f230:	d004      	beq.n	800f23c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f232:	6a3b      	ldr	r3, [r7, #32]
 800f234:	68ba      	ldr	r2, [r7, #8]
 800f236:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f23a:	e017      	b.n	800f26c <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800f23c:	2300      	movs	r3, #0
 800f23e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800f240:	e014      	b.n	800f26c <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f242:	6a3b      	ldr	r3, [r7, #32]
 800f244:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f248:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f24c:	d00d      	beq.n	800f26a <xTaskGenericNotify+0xe6>
	__asm volatile
 800f24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f252:	f383 8811 	msr	BASEPRI, r3
 800f256:	f3bf 8f6f 	isb	sy
 800f25a:	f3bf 8f4f 	dsb	sy
 800f25e:	617b      	str	r3, [r7, #20]
}
 800f260:	bf00      	nop
 800f262:	bf00      	nop
 800f264:	e7fd      	b.n	800f262 <xTaskGenericNotify+0xde>
					break;
 800f266:	bf00      	nop
 800f268:	e000      	b.n	800f26c <xTaskGenericNotify+0xe8>

					break;
 800f26a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f26c:	7ffb      	ldrb	r3, [r7, #31]
 800f26e:	2b01      	cmp	r3, #1
 800f270:	d13b      	bne.n	800f2ea <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f272:	6a3b      	ldr	r3, [r7, #32]
 800f274:	3304      	adds	r3, #4
 800f276:	4618      	mov	r0, r3
 800f278:	f7fd ffdc 	bl	800d234 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f27c:	6a3b      	ldr	r3, [r7, #32]
 800f27e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f280:	4b1d      	ldr	r3, [pc, #116]	@ (800f2f8 <xTaskGenericNotify+0x174>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	429a      	cmp	r2, r3
 800f286:	d903      	bls.n	800f290 <xTaskGenericNotify+0x10c>
 800f288:	6a3b      	ldr	r3, [r7, #32]
 800f28a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f28c:	4a1a      	ldr	r2, [pc, #104]	@ (800f2f8 <xTaskGenericNotify+0x174>)
 800f28e:	6013      	str	r3, [r2, #0]
 800f290:	6a3b      	ldr	r3, [r7, #32]
 800f292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f294:	4613      	mov	r3, r2
 800f296:	009b      	lsls	r3, r3, #2
 800f298:	4413      	add	r3, r2
 800f29a:	009b      	lsls	r3, r3, #2
 800f29c:	4a17      	ldr	r2, [pc, #92]	@ (800f2fc <xTaskGenericNotify+0x178>)
 800f29e:	441a      	add	r2, r3
 800f2a0:	6a3b      	ldr	r3, [r7, #32]
 800f2a2:	3304      	adds	r3, #4
 800f2a4:	4619      	mov	r1, r3
 800f2a6:	4610      	mov	r0, r2
 800f2a8:	f7fd ff67 	bl	800d17a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f2ac:	6a3b      	ldr	r3, [r7, #32]
 800f2ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d00b      	beq.n	800f2cc <xTaskGenericNotify+0x148>
	__asm volatile
 800f2b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2b8:	f383 8811 	msr	BASEPRI, r3
 800f2bc:	f3bf 8f6f 	isb	sy
 800f2c0:	f3bf 8f4f 	dsb	sy
 800f2c4:	613b      	str	r3, [r7, #16]
}
 800f2c6:	bf00      	nop
 800f2c8:	bf00      	nop
 800f2ca:	e7fd      	b.n	800f2c8 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f2cc:	6a3b      	ldr	r3, [r7, #32]
 800f2ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2d0:	4b0b      	ldr	r3, [pc, #44]	@ (800f300 <xTaskGenericNotify+0x17c>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2d6:	429a      	cmp	r2, r3
 800f2d8:	d907      	bls.n	800f2ea <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800f2da:	4b0a      	ldr	r3, [pc, #40]	@ (800f304 <xTaskGenericNotify+0x180>)
 800f2dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f2e0:	601a      	str	r2, [r3, #0]
 800f2e2:	f3bf 8f4f 	dsb	sy
 800f2e6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f2ea:	f000 fe07 	bl	800fefc <vPortExitCritical>

		return xReturn;
 800f2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	3728      	adds	r7, #40	@ 0x28
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}
 800f2f8:	24002450 	.word	0x24002450
 800f2fc:	24001f78 	.word	0x24001f78
 800f300:	24001f74 	.word	0x24001f74
 800f304:	e000ed04 	.word	0xe000ed04

0800f308 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b08e      	sub	sp, #56	@ 0x38
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	60f8      	str	r0, [r7, #12]
 800f310:	60b9      	str	r1, [r7, #8]
 800f312:	603b      	str	r3, [r7, #0]
 800f314:	4613      	mov	r3, r2
 800f316:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800f318:	2301      	movs	r3, #1
 800f31a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d10b      	bne.n	800f33a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800f322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f326:	f383 8811 	msr	BASEPRI, r3
 800f32a:	f3bf 8f6f 	isb	sy
 800f32e:	f3bf 8f4f 	dsb	sy
 800f332:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f334:	bf00      	nop
 800f336:	bf00      	nop
 800f338:	e7fd      	b.n	800f336 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f33a:	f000 fe8d 	bl	8010058 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800f342:	f3ef 8211 	mrs	r2, BASEPRI
 800f346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f34a:	f383 8811 	msr	BASEPRI, r3
 800f34e:	f3bf 8f6f 	isb	sy
 800f352:	f3bf 8f4f 	dsb	sy
 800f356:	623a      	str	r2, [r7, #32]
 800f358:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800f35a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f35c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d004      	beq.n	800f36e <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f366:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f370:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f374:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f37a:	2202      	movs	r2, #2
 800f37c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800f380:	79fb      	ldrb	r3, [r7, #7]
 800f382:	2b04      	cmp	r3, #4
 800f384:	d82e      	bhi.n	800f3e4 <xTaskGenericNotifyFromISR+0xdc>
 800f386:	a201      	add	r2, pc, #4	@ (adr r2, 800f38c <xTaskGenericNotifyFromISR+0x84>)
 800f388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f38c:	0800f409 	.word	0x0800f409
 800f390:	0800f3a1 	.word	0x0800f3a1
 800f394:	0800f3b3 	.word	0x0800f3b3
 800f398:	0800f3c3 	.word	0x0800f3c3
 800f39c:	0800f3cd 	.word	0x0800f3cd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f3a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3a2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	431a      	orrs	r2, r3
 800f3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3ac:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f3b0:	e02d      	b.n	800f40e <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f3b8:	1c5a      	adds	r2, r3, #1
 800f3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3bc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f3c0:	e025      	b.n	800f40e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3c4:	68ba      	ldr	r2, [r7, #8]
 800f3c6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f3ca:	e020      	b.n	800f40e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f3cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f3d0:	2b02      	cmp	r3, #2
 800f3d2:	d004      	beq.n	800f3de <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f3d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3d6:	68ba      	ldr	r2, [r7, #8]
 800f3d8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f3dc:	e017      	b.n	800f40e <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800f3e2:	e014      	b.n	800f40e <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f3ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f3ee:	d00d      	beq.n	800f40c <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800f3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3f4:	f383 8811 	msr	BASEPRI, r3
 800f3f8:	f3bf 8f6f 	isb	sy
 800f3fc:	f3bf 8f4f 	dsb	sy
 800f400:	61bb      	str	r3, [r7, #24]
}
 800f402:	bf00      	nop
 800f404:	bf00      	nop
 800f406:	e7fd      	b.n	800f404 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800f408:	bf00      	nop
 800f40a:	e000      	b.n	800f40e <xTaskGenericNotifyFromISR+0x106>
					break;
 800f40c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f40e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f412:	2b01      	cmp	r3, #1
 800f414:	d147      	bne.n	800f4a6 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d00b      	beq.n	800f436 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800f41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f422:	f383 8811 	msr	BASEPRI, r3
 800f426:	f3bf 8f6f 	isb	sy
 800f42a:	f3bf 8f4f 	dsb	sy
 800f42e:	617b      	str	r3, [r7, #20]
}
 800f430:	bf00      	nop
 800f432:	bf00      	nop
 800f434:	e7fd      	b.n	800f432 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f436:	4b21      	ldr	r3, [pc, #132]	@ (800f4bc <xTaskGenericNotifyFromISR+0x1b4>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d11d      	bne.n	800f47a <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f440:	3304      	adds	r3, #4
 800f442:	4618      	mov	r0, r3
 800f444:	f7fd fef6 	bl	800d234 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f44a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f44c:	4b1c      	ldr	r3, [pc, #112]	@ (800f4c0 <xTaskGenericNotifyFromISR+0x1b8>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	429a      	cmp	r2, r3
 800f452:	d903      	bls.n	800f45c <xTaskGenericNotifyFromISR+0x154>
 800f454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f458:	4a19      	ldr	r2, [pc, #100]	@ (800f4c0 <xTaskGenericNotifyFromISR+0x1b8>)
 800f45a:	6013      	str	r3, [r2, #0]
 800f45c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f45e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f460:	4613      	mov	r3, r2
 800f462:	009b      	lsls	r3, r3, #2
 800f464:	4413      	add	r3, r2
 800f466:	009b      	lsls	r3, r3, #2
 800f468:	4a16      	ldr	r2, [pc, #88]	@ (800f4c4 <xTaskGenericNotifyFromISR+0x1bc>)
 800f46a:	441a      	add	r2, r3
 800f46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f46e:	3304      	adds	r3, #4
 800f470:	4619      	mov	r1, r3
 800f472:	4610      	mov	r0, r2
 800f474:	f7fd fe81 	bl	800d17a <vListInsertEnd>
 800f478:	e005      	b.n	800f486 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800f47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f47c:	3318      	adds	r3, #24
 800f47e:	4619      	mov	r1, r3
 800f480:	4811      	ldr	r0, [pc, #68]	@ (800f4c8 <xTaskGenericNotifyFromISR+0x1c0>)
 800f482:	f7fd fe7a 	bl	800d17a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f48a:	4b10      	ldr	r3, [pc, #64]	@ (800f4cc <xTaskGenericNotifyFromISR+0x1c4>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f490:	429a      	cmp	r2, r3
 800f492:	d908      	bls.n	800f4a6 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800f494:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f496:	2b00      	cmp	r3, #0
 800f498:	d002      	beq.n	800f4a0 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800f49a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f49c:	2201      	movs	r2, #1
 800f49e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800f4a0:	4b0b      	ldr	r3, [pc, #44]	@ (800f4d0 <xTaskGenericNotifyFromISR+0x1c8>)
 800f4a2:	2201      	movs	r2, #1
 800f4a4:	601a      	str	r2, [r3, #0]
 800f4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	f383 8811 	msr	BASEPRI, r3
}
 800f4b0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800f4b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	3738      	adds	r7, #56	@ 0x38
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}
 800f4bc:	24002470 	.word	0x24002470
 800f4c0:	24002450 	.word	0x24002450
 800f4c4:	24001f78 	.word	0x24001f78
 800f4c8:	24002408 	.word	0x24002408
 800f4cc:	24001f74 	.word	0x24001f74
 800f4d0:	2400245c 	.word	0x2400245c

0800f4d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b084      	sub	sp, #16
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
 800f4dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f4de:	4b21      	ldr	r3, [pc, #132]	@ (800f564 <prvAddCurrentTaskToDelayedList+0x90>)
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f4e4:	4b20      	ldr	r3, [pc, #128]	@ (800f568 <prvAddCurrentTaskToDelayedList+0x94>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	3304      	adds	r3, #4
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f7fd fea2 	bl	800d234 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f4f6:	d10a      	bne.n	800f50e <prvAddCurrentTaskToDelayedList+0x3a>
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d007      	beq.n	800f50e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f4fe:	4b1a      	ldr	r3, [pc, #104]	@ (800f568 <prvAddCurrentTaskToDelayedList+0x94>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	3304      	adds	r3, #4
 800f504:	4619      	mov	r1, r3
 800f506:	4819      	ldr	r0, [pc, #100]	@ (800f56c <prvAddCurrentTaskToDelayedList+0x98>)
 800f508:	f7fd fe37 	bl	800d17a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f50c:	e026      	b.n	800f55c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f50e:	68fa      	ldr	r2, [r7, #12]
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	4413      	add	r3, r2
 800f514:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f516:	4b14      	ldr	r3, [pc, #80]	@ (800f568 <prvAddCurrentTaskToDelayedList+0x94>)
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	68ba      	ldr	r2, [r7, #8]
 800f51c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f51e:	68ba      	ldr	r2, [r7, #8]
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	429a      	cmp	r2, r3
 800f524:	d209      	bcs.n	800f53a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f526:	4b12      	ldr	r3, [pc, #72]	@ (800f570 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f528:	681a      	ldr	r2, [r3, #0]
 800f52a:	4b0f      	ldr	r3, [pc, #60]	@ (800f568 <prvAddCurrentTaskToDelayedList+0x94>)
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	3304      	adds	r3, #4
 800f530:	4619      	mov	r1, r3
 800f532:	4610      	mov	r0, r2
 800f534:	f7fd fe45 	bl	800d1c2 <vListInsert>
}
 800f538:	e010      	b.n	800f55c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f53a:	4b0e      	ldr	r3, [pc, #56]	@ (800f574 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f53c:	681a      	ldr	r2, [r3, #0]
 800f53e:	4b0a      	ldr	r3, [pc, #40]	@ (800f568 <prvAddCurrentTaskToDelayedList+0x94>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	3304      	adds	r3, #4
 800f544:	4619      	mov	r1, r3
 800f546:	4610      	mov	r0, r2
 800f548:	f7fd fe3b 	bl	800d1c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f54c:	4b0a      	ldr	r3, [pc, #40]	@ (800f578 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	68ba      	ldr	r2, [r7, #8]
 800f552:	429a      	cmp	r2, r3
 800f554:	d202      	bcs.n	800f55c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f556:	4a08      	ldr	r2, [pc, #32]	@ (800f578 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f558:	68bb      	ldr	r3, [r7, #8]
 800f55a:	6013      	str	r3, [r2, #0]
}
 800f55c:	bf00      	nop
 800f55e:	3710      	adds	r7, #16
 800f560:	46bd      	mov	sp, r7
 800f562:	bd80      	pop	{r7, pc}
 800f564:	2400244c 	.word	0x2400244c
 800f568:	24001f74 	.word	0x24001f74
 800f56c:	24002434 	.word	0x24002434
 800f570:	24002404 	.word	0x24002404
 800f574:	24002400 	.word	0x24002400
 800f578:	24002468 	.word	0x24002468

0800f57c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b08a      	sub	sp, #40	@ 0x28
 800f580:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f582:	2300      	movs	r3, #0
 800f584:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f586:	f000 fb13 	bl	800fbb0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f58a:	4b1d      	ldr	r3, [pc, #116]	@ (800f600 <xTimerCreateTimerTask+0x84>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d021      	beq.n	800f5d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f592:	2300      	movs	r3, #0
 800f594:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f596:	2300      	movs	r3, #0
 800f598:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f59a:	1d3a      	adds	r2, r7, #4
 800f59c:	f107 0108 	add.w	r1, r7, #8
 800f5a0:	f107 030c 	add.w	r3, r7, #12
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f7fd fda1 	bl	800d0ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f5aa:	6879      	ldr	r1, [r7, #4]
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	68fa      	ldr	r2, [r7, #12]
 800f5b0:	9202      	str	r2, [sp, #8]
 800f5b2:	9301      	str	r3, [sp, #4]
 800f5b4:	2302      	movs	r3, #2
 800f5b6:	9300      	str	r3, [sp, #0]
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	460a      	mov	r2, r1
 800f5bc:	4911      	ldr	r1, [pc, #68]	@ (800f604 <xTimerCreateTimerTask+0x88>)
 800f5be:	4812      	ldr	r0, [pc, #72]	@ (800f608 <xTimerCreateTimerTask+0x8c>)
 800f5c0:	f7fe fd78 	bl	800e0b4 <xTaskCreateStatic>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	4a11      	ldr	r2, [pc, #68]	@ (800f60c <xTimerCreateTimerTask+0x90>)
 800f5c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f5ca:	4b10      	ldr	r3, [pc, #64]	@ (800f60c <xTimerCreateTimerTask+0x90>)
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d001      	beq.n	800f5d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d10b      	bne.n	800f5f4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f5dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5e0:	f383 8811 	msr	BASEPRI, r3
 800f5e4:	f3bf 8f6f 	isb	sy
 800f5e8:	f3bf 8f4f 	dsb	sy
 800f5ec:	613b      	str	r3, [r7, #16]
}
 800f5ee:	bf00      	nop
 800f5f0:	bf00      	nop
 800f5f2:	e7fd      	b.n	800f5f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f5f4:	697b      	ldr	r3, [r7, #20]
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	3718      	adds	r7, #24
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}
 800f5fe:	bf00      	nop
 800f600:	240024a4 	.word	0x240024a4
 800f604:	08014008 	.word	0x08014008
 800f608:	0800f749 	.word	0x0800f749
 800f60c:	240024a8 	.word	0x240024a8

0800f610 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b08a      	sub	sp, #40	@ 0x28
 800f614:	af00      	add	r7, sp, #0
 800f616:	60f8      	str	r0, [r7, #12]
 800f618:	60b9      	str	r1, [r7, #8]
 800f61a:	607a      	str	r2, [r7, #4]
 800f61c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f61e:	2300      	movs	r3, #0
 800f620:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d10b      	bne.n	800f640 <xTimerGenericCommand+0x30>
	__asm volatile
 800f628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f62c:	f383 8811 	msr	BASEPRI, r3
 800f630:	f3bf 8f6f 	isb	sy
 800f634:	f3bf 8f4f 	dsb	sy
 800f638:	623b      	str	r3, [r7, #32]
}
 800f63a:	bf00      	nop
 800f63c:	bf00      	nop
 800f63e:	e7fd      	b.n	800f63c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f640:	4b19      	ldr	r3, [pc, #100]	@ (800f6a8 <xTimerGenericCommand+0x98>)
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d02a      	beq.n	800f69e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	2b05      	cmp	r3, #5
 800f658:	dc18      	bgt.n	800f68c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f65a:	f7ff fba5 	bl	800eda8 <xTaskGetSchedulerState>
 800f65e:	4603      	mov	r3, r0
 800f660:	2b02      	cmp	r3, #2
 800f662:	d109      	bne.n	800f678 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f664:	4b10      	ldr	r3, [pc, #64]	@ (800f6a8 <xTimerGenericCommand+0x98>)
 800f666:	6818      	ldr	r0, [r3, #0]
 800f668:	f107 0110 	add.w	r1, r7, #16
 800f66c:	2300      	movs	r3, #0
 800f66e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f670:	f7fe f808 	bl	800d684 <xQueueGenericSend>
 800f674:	6278      	str	r0, [r7, #36]	@ 0x24
 800f676:	e012      	b.n	800f69e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f678:	4b0b      	ldr	r3, [pc, #44]	@ (800f6a8 <xTimerGenericCommand+0x98>)
 800f67a:	6818      	ldr	r0, [r3, #0]
 800f67c:	f107 0110 	add.w	r1, r7, #16
 800f680:	2300      	movs	r3, #0
 800f682:	2200      	movs	r2, #0
 800f684:	f7fd fffe 	bl	800d684 <xQueueGenericSend>
 800f688:	6278      	str	r0, [r7, #36]	@ 0x24
 800f68a:	e008      	b.n	800f69e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f68c:	4b06      	ldr	r3, [pc, #24]	@ (800f6a8 <xTimerGenericCommand+0x98>)
 800f68e:	6818      	ldr	r0, [r3, #0]
 800f690:	f107 0110 	add.w	r1, r7, #16
 800f694:	2300      	movs	r3, #0
 800f696:	683a      	ldr	r2, [r7, #0]
 800f698:	f7fe f8f6 	bl	800d888 <xQueueGenericSendFromISR>
 800f69c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	3728      	adds	r7, #40	@ 0x28
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bd80      	pop	{r7, pc}
 800f6a8:	240024a4 	.word	0x240024a4

0800f6ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b088      	sub	sp, #32
 800f6b0:	af02      	add	r7, sp, #8
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6b6:	4b23      	ldr	r3, [pc, #140]	@ (800f744 <prvProcessExpiredTimer+0x98>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	68db      	ldr	r3, [r3, #12]
 800f6bc:	68db      	ldr	r3, [r3, #12]
 800f6be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	3304      	adds	r3, #4
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f7fd fdb5 	bl	800d234 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f6d0:	f003 0304 	and.w	r3, r3, #4
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d023      	beq.n	800f720 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f6d8:	697b      	ldr	r3, [r7, #20]
 800f6da:	699a      	ldr	r2, [r3, #24]
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	18d1      	adds	r1, r2, r3
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	683a      	ldr	r2, [r7, #0]
 800f6e4:	6978      	ldr	r0, [r7, #20]
 800f6e6:	f000 f8d5 	bl	800f894 <prvInsertTimerInActiveList>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d020      	beq.n	800f732 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	9300      	str	r3, [sp, #0]
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	687a      	ldr	r2, [r7, #4]
 800f6f8:	2100      	movs	r1, #0
 800f6fa:	6978      	ldr	r0, [r7, #20]
 800f6fc:	f7ff ff88 	bl	800f610 <xTimerGenericCommand>
 800f700:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f702:	693b      	ldr	r3, [r7, #16]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d114      	bne.n	800f732 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f70c:	f383 8811 	msr	BASEPRI, r3
 800f710:	f3bf 8f6f 	isb	sy
 800f714:	f3bf 8f4f 	dsb	sy
 800f718:	60fb      	str	r3, [r7, #12]
}
 800f71a:	bf00      	nop
 800f71c:	bf00      	nop
 800f71e:	e7fd      	b.n	800f71c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f726:	f023 0301 	bic.w	r3, r3, #1
 800f72a:	b2da      	uxtb	r2, r3
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	6a1b      	ldr	r3, [r3, #32]
 800f736:	6978      	ldr	r0, [r7, #20]
 800f738:	4798      	blx	r3
}
 800f73a:	bf00      	nop
 800f73c:	3718      	adds	r7, #24
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}
 800f742:	bf00      	nop
 800f744:	2400249c 	.word	0x2400249c

0800f748 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b084      	sub	sp, #16
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f750:	f107 0308 	add.w	r3, r7, #8
 800f754:	4618      	mov	r0, r3
 800f756:	f000 f859 	bl	800f80c <prvGetNextExpireTime>
 800f75a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	4619      	mov	r1, r3
 800f760:	68f8      	ldr	r0, [r7, #12]
 800f762:	f000 f805 	bl	800f770 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f766:	f000 f8d7 	bl	800f918 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f76a:	bf00      	nop
 800f76c:	e7f0      	b.n	800f750 <prvTimerTask+0x8>
	...

0800f770 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b084      	sub	sp, #16
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
 800f778:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f77a:	f7fe feff 	bl	800e57c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f77e:	f107 0308 	add.w	r3, r7, #8
 800f782:	4618      	mov	r0, r3
 800f784:	f000 f866 	bl	800f854 <prvSampleTimeNow>
 800f788:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f78a:	68bb      	ldr	r3, [r7, #8]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d130      	bne.n	800f7f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d10a      	bne.n	800f7ac <prvProcessTimerOrBlockTask+0x3c>
 800f796:	687a      	ldr	r2, [r7, #4]
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d806      	bhi.n	800f7ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f79e:	f7fe fefb 	bl	800e598 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f7a2:	68f9      	ldr	r1, [r7, #12]
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f7ff ff81 	bl	800f6ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f7aa:	e024      	b.n	800f7f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d008      	beq.n	800f7c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f7b2:	4b13      	ldr	r3, [pc, #76]	@ (800f800 <prvProcessTimerOrBlockTask+0x90>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d101      	bne.n	800f7c0 <prvProcessTimerOrBlockTask+0x50>
 800f7bc:	2301      	movs	r3, #1
 800f7be:	e000      	b.n	800f7c2 <prvProcessTimerOrBlockTask+0x52>
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f7c4:	4b0f      	ldr	r3, [pc, #60]	@ (800f804 <prvProcessTimerOrBlockTask+0x94>)
 800f7c6:	6818      	ldr	r0, [r3, #0]
 800f7c8:	687a      	ldr	r2, [r7, #4]
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	1ad3      	subs	r3, r2, r3
 800f7ce:	683a      	ldr	r2, [r7, #0]
 800f7d0:	4619      	mov	r1, r3
 800f7d2:	f7fe fc3b 	bl	800e04c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f7d6:	f7fe fedf 	bl	800e598 <xTaskResumeAll>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d10a      	bne.n	800f7f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f7e0:	4b09      	ldr	r3, [pc, #36]	@ (800f808 <prvProcessTimerOrBlockTask+0x98>)
 800f7e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f7e6:	601a      	str	r2, [r3, #0]
 800f7e8:	f3bf 8f4f 	dsb	sy
 800f7ec:	f3bf 8f6f 	isb	sy
}
 800f7f0:	e001      	b.n	800f7f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f7f2:	f7fe fed1 	bl	800e598 <xTaskResumeAll>
}
 800f7f6:	bf00      	nop
 800f7f8:	3710      	adds	r7, #16
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}
 800f7fe:	bf00      	nop
 800f800:	240024a0 	.word	0x240024a0
 800f804:	240024a4 	.word	0x240024a4
 800f808:	e000ed04 	.word	0xe000ed04

0800f80c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f80c:	b480      	push	{r7}
 800f80e:	b085      	sub	sp, #20
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f814:	4b0e      	ldr	r3, [pc, #56]	@ (800f850 <prvGetNextExpireTime+0x44>)
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d101      	bne.n	800f822 <prvGetNextExpireTime+0x16>
 800f81e:	2201      	movs	r2, #1
 800f820:	e000      	b.n	800f824 <prvGetNextExpireTime+0x18>
 800f822:	2200      	movs	r2, #0
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d105      	bne.n	800f83c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f830:	4b07      	ldr	r3, [pc, #28]	@ (800f850 <prvGetNextExpireTime+0x44>)
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	68db      	ldr	r3, [r3, #12]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	60fb      	str	r3, [r7, #12]
 800f83a:	e001      	b.n	800f840 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f83c:	2300      	movs	r3, #0
 800f83e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f840:	68fb      	ldr	r3, [r7, #12]
}
 800f842:	4618      	mov	r0, r3
 800f844:	3714      	adds	r7, #20
 800f846:	46bd      	mov	sp, r7
 800f848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84c:	4770      	bx	lr
 800f84e:	bf00      	nop
 800f850:	2400249c 	.word	0x2400249c

0800f854 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b084      	sub	sp, #16
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f85c:	f7fe ff3a 	bl	800e6d4 <xTaskGetTickCount>
 800f860:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f862:	4b0b      	ldr	r3, [pc, #44]	@ (800f890 <prvSampleTimeNow+0x3c>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	68fa      	ldr	r2, [r7, #12]
 800f868:	429a      	cmp	r2, r3
 800f86a:	d205      	bcs.n	800f878 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f86c:	f000 f93a 	bl	800fae4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2201      	movs	r2, #1
 800f874:	601a      	str	r2, [r3, #0]
 800f876:	e002      	b.n	800f87e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2200      	movs	r2, #0
 800f87c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f87e:	4a04      	ldr	r2, [pc, #16]	@ (800f890 <prvSampleTimeNow+0x3c>)
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f884:	68fb      	ldr	r3, [r7, #12]
}
 800f886:	4618      	mov	r0, r3
 800f888:	3710      	adds	r7, #16
 800f88a:	46bd      	mov	sp, r7
 800f88c:	bd80      	pop	{r7, pc}
 800f88e:	bf00      	nop
 800f890:	240024ac 	.word	0x240024ac

0800f894 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b086      	sub	sp, #24
 800f898:	af00      	add	r7, sp, #0
 800f89a:	60f8      	str	r0, [r7, #12]
 800f89c:	60b9      	str	r1, [r7, #8]
 800f89e:	607a      	str	r2, [r7, #4]
 800f8a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	68ba      	ldr	r2, [r7, #8]
 800f8aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	68fa      	ldr	r2, [r7, #12]
 800f8b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f8b2:	68ba      	ldr	r2, [r7, #8]
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	429a      	cmp	r2, r3
 800f8b8:	d812      	bhi.n	800f8e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8ba:	687a      	ldr	r2, [r7, #4]
 800f8bc:	683b      	ldr	r3, [r7, #0]
 800f8be:	1ad2      	subs	r2, r2, r3
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	699b      	ldr	r3, [r3, #24]
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d302      	bcc.n	800f8ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f8c8:	2301      	movs	r3, #1
 800f8ca:	617b      	str	r3, [r7, #20]
 800f8cc:	e01b      	b.n	800f906 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f8ce:	4b10      	ldr	r3, [pc, #64]	@ (800f910 <prvInsertTimerInActiveList+0x7c>)
 800f8d0:	681a      	ldr	r2, [r3, #0]
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	3304      	adds	r3, #4
 800f8d6:	4619      	mov	r1, r3
 800f8d8:	4610      	mov	r0, r2
 800f8da:	f7fd fc72 	bl	800d1c2 <vListInsert>
 800f8de:	e012      	b.n	800f906 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f8e0:	687a      	ldr	r2, [r7, #4]
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d206      	bcs.n	800f8f6 <prvInsertTimerInActiveList+0x62>
 800f8e8:	68ba      	ldr	r2, [r7, #8]
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	429a      	cmp	r2, r3
 800f8ee:	d302      	bcc.n	800f8f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	617b      	str	r3, [r7, #20]
 800f8f4:	e007      	b.n	800f906 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f8f6:	4b07      	ldr	r3, [pc, #28]	@ (800f914 <prvInsertTimerInActiveList+0x80>)
 800f8f8:	681a      	ldr	r2, [r3, #0]
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	3304      	adds	r3, #4
 800f8fe:	4619      	mov	r1, r3
 800f900:	4610      	mov	r0, r2
 800f902:	f7fd fc5e 	bl	800d1c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f906:	697b      	ldr	r3, [r7, #20]
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3718      	adds	r7, #24
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}
 800f910:	240024a0 	.word	0x240024a0
 800f914:	2400249c 	.word	0x2400249c

0800f918 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b08e      	sub	sp, #56	@ 0x38
 800f91c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f91e:	e0ce      	b.n	800fabe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	2b00      	cmp	r3, #0
 800f924:	da19      	bge.n	800f95a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f926:	1d3b      	adds	r3, r7, #4
 800f928:	3304      	adds	r3, #4
 800f92a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d10b      	bne.n	800f94a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f936:	f383 8811 	msr	BASEPRI, r3
 800f93a:	f3bf 8f6f 	isb	sy
 800f93e:	f3bf 8f4f 	dsb	sy
 800f942:	61fb      	str	r3, [r7, #28]
}
 800f944:	bf00      	nop
 800f946:	bf00      	nop
 800f948:	e7fd      	b.n	800f946 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f94a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f950:	6850      	ldr	r0, [r2, #4]
 800f952:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f954:	6892      	ldr	r2, [r2, #8]
 800f956:	4611      	mov	r1, r2
 800f958:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	f2c0 80ae 	blt.w	800fabe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f968:	695b      	ldr	r3, [r3, #20]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d004      	beq.n	800f978 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f96e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f970:	3304      	adds	r3, #4
 800f972:	4618      	mov	r0, r3
 800f974:	f7fd fc5e 	bl	800d234 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f978:	463b      	mov	r3, r7
 800f97a:	4618      	mov	r0, r3
 800f97c:	f7ff ff6a 	bl	800f854 <prvSampleTimeNow>
 800f980:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	2b09      	cmp	r3, #9
 800f986:	f200 8097 	bhi.w	800fab8 <prvProcessReceivedCommands+0x1a0>
 800f98a:	a201      	add	r2, pc, #4	@ (adr r2, 800f990 <prvProcessReceivedCommands+0x78>)
 800f98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f990:	0800f9b9 	.word	0x0800f9b9
 800f994:	0800f9b9 	.word	0x0800f9b9
 800f998:	0800f9b9 	.word	0x0800f9b9
 800f99c:	0800fa2f 	.word	0x0800fa2f
 800f9a0:	0800fa43 	.word	0x0800fa43
 800f9a4:	0800fa8f 	.word	0x0800fa8f
 800f9a8:	0800f9b9 	.word	0x0800f9b9
 800f9ac:	0800f9b9 	.word	0x0800f9b9
 800f9b0:	0800fa2f 	.word	0x0800fa2f
 800f9b4:	0800fa43 	.word	0x0800fa43
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f9b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f9be:	f043 0301 	orr.w	r3, r3, #1
 800f9c2:	b2da      	uxtb	r2, r3
 800f9c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f9ca:	68ba      	ldr	r2, [r7, #8]
 800f9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9ce:	699b      	ldr	r3, [r3, #24]
 800f9d0:	18d1      	adds	r1, r2, r3
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f9d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f9d8:	f7ff ff5c 	bl	800f894 <prvInsertTimerInActiveList>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d06c      	beq.n	800fabc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f9e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9e4:	6a1b      	ldr	r3, [r3, #32]
 800f9e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f9e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f9ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f9f0:	f003 0304 	and.w	r3, r3, #4
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d061      	beq.n	800fabc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f9f8:	68ba      	ldr	r2, [r7, #8]
 800f9fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9fc:	699b      	ldr	r3, [r3, #24]
 800f9fe:	441a      	add	r2, r3
 800fa00:	2300      	movs	r3, #0
 800fa02:	9300      	str	r3, [sp, #0]
 800fa04:	2300      	movs	r3, #0
 800fa06:	2100      	movs	r1, #0
 800fa08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa0a:	f7ff fe01 	bl	800f610 <xTimerGenericCommand>
 800fa0e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fa10:	6a3b      	ldr	r3, [r7, #32]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d152      	bne.n	800fabc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800fa16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa1a:	f383 8811 	msr	BASEPRI, r3
 800fa1e:	f3bf 8f6f 	isb	sy
 800fa22:	f3bf 8f4f 	dsb	sy
 800fa26:	61bb      	str	r3, [r7, #24]
}
 800fa28:	bf00      	nop
 800fa2a:	bf00      	nop
 800fa2c:	e7fd      	b.n	800fa2a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fa2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fa34:	f023 0301 	bic.w	r3, r3, #1
 800fa38:	b2da      	uxtb	r2, r3
 800fa3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800fa40:	e03d      	b.n	800fabe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fa42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fa48:	f043 0301 	orr.w	r3, r3, #1
 800fa4c:	b2da      	uxtb	r2, r3
 800fa4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa50:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fa54:	68ba      	ldr	r2, [r7, #8]
 800fa56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa58:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fa5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa5c:	699b      	ldr	r3, [r3, #24]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d10b      	bne.n	800fa7a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800fa62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa66:	f383 8811 	msr	BASEPRI, r3
 800fa6a:	f3bf 8f6f 	isb	sy
 800fa6e:	f3bf 8f4f 	dsb	sy
 800fa72:	617b      	str	r3, [r7, #20]
}
 800fa74:	bf00      	nop
 800fa76:	bf00      	nop
 800fa78:	e7fd      	b.n	800fa76 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fa7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa7c:	699a      	ldr	r2, [r3, #24]
 800fa7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa80:	18d1      	adds	r1, r2, r3
 800fa82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa88:	f7ff ff04 	bl	800f894 <prvInsertTimerInActiveList>
					break;
 800fa8c:	e017      	b.n	800fabe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fa8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fa94:	f003 0302 	and.w	r3, r3, #2
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d103      	bne.n	800faa4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800fa9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa9e:	f000 fbeb 	bl	8010278 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800faa2:	e00c      	b.n	800fabe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800faa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faa6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800faaa:	f023 0301 	bic.w	r3, r3, #1
 800faae:	b2da      	uxtb	r2, r3
 800fab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fab2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800fab6:	e002      	b.n	800fabe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800fab8:	bf00      	nop
 800faba:	e000      	b.n	800fabe <prvProcessReceivedCommands+0x1a6>
					break;
 800fabc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fabe:	4b08      	ldr	r3, [pc, #32]	@ (800fae0 <prvProcessReceivedCommands+0x1c8>)
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	1d39      	adds	r1, r7, #4
 800fac4:	2200      	movs	r2, #0
 800fac6:	4618      	mov	r0, r3
 800fac8:	f7fd ff7c 	bl	800d9c4 <xQueueReceive>
 800facc:	4603      	mov	r3, r0
 800face:	2b00      	cmp	r3, #0
 800fad0:	f47f af26 	bne.w	800f920 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800fad4:	bf00      	nop
 800fad6:	bf00      	nop
 800fad8:	3730      	adds	r7, #48	@ 0x30
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}
 800fade:	bf00      	nop
 800fae0:	240024a4 	.word	0x240024a4

0800fae4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b088      	sub	sp, #32
 800fae8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800faea:	e049      	b.n	800fb80 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800faec:	4b2e      	ldr	r3, [pc, #184]	@ (800fba8 <prvSwitchTimerLists+0xc4>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	68db      	ldr	r3, [r3, #12]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800faf6:	4b2c      	ldr	r3, [pc, #176]	@ (800fba8 <prvSwitchTimerLists+0xc4>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	68db      	ldr	r3, [r3, #12]
 800fafc:	68db      	ldr	r3, [r3, #12]
 800fafe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	3304      	adds	r3, #4
 800fb04:	4618      	mov	r0, r3
 800fb06:	f7fd fb95 	bl	800d234 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	6a1b      	ldr	r3, [r3, #32]
 800fb0e:	68f8      	ldr	r0, [r7, #12]
 800fb10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fb18:	f003 0304 	and.w	r3, r3, #4
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d02f      	beq.n	800fb80 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	699b      	ldr	r3, [r3, #24]
 800fb24:	693a      	ldr	r2, [r7, #16]
 800fb26:	4413      	add	r3, r2
 800fb28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fb2a:	68ba      	ldr	r2, [r7, #8]
 800fb2c:	693b      	ldr	r3, [r7, #16]
 800fb2e:	429a      	cmp	r2, r3
 800fb30:	d90e      	bls.n	800fb50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	68ba      	ldr	r2, [r7, #8]
 800fb36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	68fa      	ldr	r2, [r7, #12]
 800fb3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fb3e:	4b1a      	ldr	r3, [pc, #104]	@ (800fba8 <prvSwitchTimerLists+0xc4>)
 800fb40:	681a      	ldr	r2, [r3, #0]
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	3304      	adds	r3, #4
 800fb46:	4619      	mov	r1, r3
 800fb48:	4610      	mov	r0, r2
 800fb4a:	f7fd fb3a 	bl	800d1c2 <vListInsert>
 800fb4e:	e017      	b.n	800fb80 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fb50:	2300      	movs	r3, #0
 800fb52:	9300      	str	r3, [sp, #0]
 800fb54:	2300      	movs	r3, #0
 800fb56:	693a      	ldr	r2, [r7, #16]
 800fb58:	2100      	movs	r1, #0
 800fb5a:	68f8      	ldr	r0, [r7, #12]
 800fb5c:	f7ff fd58 	bl	800f610 <xTimerGenericCommand>
 800fb60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d10b      	bne.n	800fb80 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800fb68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb6c:	f383 8811 	msr	BASEPRI, r3
 800fb70:	f3bf 8f6f 	isb	sy
 800fb74:	f3bf 8f4f 	dsb	sy
 800fb78:	603b      	str	r3, [r7, #0]
}
 800fb7a:	bf00      	nop
 800fb7c:	bf00      	nop
 800fb7e:	e7fd      	b.n	800fb7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fb80:	4b09      	ldr	r3, [pc, #36]	@ (800fba8 <prvSwitchTimerLists+0xc4>)
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d1b0      	bne.n	800faec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fb8a:	4b07      	ldr	r3, [pc, #28]	@ (800fba8 <prvSwitchTimerLists+0xc4>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fb90:	4b06      	ldr	r3, [pc, #24]	@ (800fbac <prvSwitchTimerLists+0xc8>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	4a04      	ldr	r2, [pc, #16]	@ (800fba8 <prvSwitchTimerLists+0xc4>)
 800fb96:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fb98:	4a04      	ldr	r2, [pc, #16]	@ (800fbac <prvSwitchTimerLists+0xc8>)
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	6013      	str	r3, [r2, #0]
}
 800fb9e:	bf00      	nop
 800fba0:	3718      	adds	r7, #24
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}
 800fba6:	bf00      	nop
 800fba8:	2400249c 	.word	0x2400249c
 800fbac:	240024a0 	.word	0x240024a0

0800fbb0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b082      	sub	sp, #8
 800fbb4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fbb6:	f000 f96f 	bl	800fe98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fbba:	4b15      	ldr	r3, [pc, #84]	@ (800fc10 <prvCheckForValidListAndQueue+0x60>)
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d120      	bne.n	800fc04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fbc2:	4814      	ldr	r0, [pc, #80]	@ (800fc14 <prvCheckForValidListAndQueue+0x64>)
 800fbc4:	f7fd faac 	bl	800d120 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fbc8:	4813      	ldr	r0, [pc, #76]	@ (800fc18 <prvCheckForValidListAndQueue+0x68>)
 800fbca:	f7fd faa9 	bl	800d120 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fbce:	4b13      	ldr	r3, [pc, #76]	@ (800fc1c <prvCheckForValidListAndQueue+0x6c>)
 800fbd0:	4a10      	ldr	r2, [pc, #64]	@ (800fc14 <prvCheckForValidListAndQueue+0x64>)
 800fbd2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fbd4:	4b12      	ldr	r3, [pc, #72]	@ (800fc20 <prvCheckForValidListAndQueue+0x70>)
 800fbd6:	4a10      	ldr	r2, [pc, #64]	@ (800fc18 <prvCheckForValidListAndQueue+0x68>)
 800fbd8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fbda:	2300      	movs	r3, #0
 800fbdc:	9300      	str	r3, [sp, #0]
 800fbde:	4b11      	ldr	r3, [pc, #68]	@ (800fc24 <prvCheckForValidListAndQueue+0x74>)
 800fbe0:	4a11      	ldr	r2, [pc, #68]	@ (800fc28 <prvCheckForValidListAndQueue+0x78>)
 800fbe2:	2110      	movs	r1, #16
 800fbe4:	200a      	movs	r0, #10
 800fbe6:	f7fd fbb9 	bl	800d35c <xQueueGenericCreateStatic>
 800fbea:	4603      	mov	r3, r0
 800fbec:	4a08      	ldr	r2, [pc, #32]	@ (800fc10 <prvCheckForValidListAndQueue+0x60>)
 800fbee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fbf0:	4b07      	ldr	r3, [pc, #28]	@ (800fc10 <prvCheckForValidListAndQueue+0x60>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d005      	beq.n	800fc04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fbf8:	4b05      	ldr	r3, [pc, #20]	@ (800fc10 <prvCheckForValidListAndQueue+0x60>)
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	490b      	ldr	r1, [pc, #44]	@ (800fc2c <prvCheckForValidListAndQueue+0x7c>)
 800fbfe:	4618      	mov	r0, r3
 800fc00:	f7fe f9fa 	bl	800dff8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fc04:	f000 f97a 	bl	800fefc <vPortExitCritical>
}
 800fc08:	bf00      	nop
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}
 800fc0e:	bf00      	nop
 800fc10:	240024a4 	.word	0x240024a4
 800fc14:	24002474 	.word	0x24002474
 800fc18:	24002488 	.word	0x24002488
 800fc1c:	2400249c 	.word	0x2400249c
 800fc20:	240024a0 	.word	0x240024a0
 800fc24:	24002550 	.word	0x24002550
 800fc28:	240024b0 	.word	0x240024b0
 800fc2c:	08014010 	.word	0x08014010

0800fc30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fc30:	b480      	push	{r7}
 800fc32:	b085      	sub	sp, #20
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	60f8      	str	r0, [r7, #12]
 800fc38:	60b9      	str	r1, [r7, #8]
 800fc3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	3b04      	subs	r3, #4
 800fc40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fc48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	3b04      	subs	r3, #4
 800fc4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fc50:	68bb      	ldr	r3, [r7, #8]
 800fc52:	f023 0201 	bic.w	r2, r3, #1
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	3b04      	subs	r3, #4
 800fc5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fc60:	4a0c      	ldr	r2, [pc, #48]	@ (800fc94 <pxPortInitialiseStack+0x64>)
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	3b14      	subs	r3, #20
 800fc6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fc6c:	687a      	ldr	r2, [r7, #4]
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	3b04      	subs	r3, #4
 800fc76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	f06f 0202 	mvn.w	r2, #2
 800fc7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	3b20      	subs	r3, #32
 800fc84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fc86:	68fb      	ldr	r3, [r7, #12]
}
 800fc88:	4618      	mov	r0, r3
 800fc8a:	3714      	adds	r7, #20
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc92:	4770      	bx	lr
 800fc94:	0800fc99 	.word	0x0800fc99

0800fc98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fc98:	b480      	push	{r7}
 800fc9a:	b085      	sub	sp, #20
 800fc9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fc9e:	2300      	movs	r3, #0
 800fca0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fca2:	4b13      	ldr	r3, [pc, #76]	@ (800fcf0 <prvTaskExitError+0x58>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fcaa:	d00b      	beq.n	800fcc4 <prvTaskExitError+0x2c>
	__asm volatile
 800fcac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcb0:	f383 8811 	msr	BASEPRI, r3
 800fcb4:	f3bf 8f6f 	isb	sy
 800fcb8:	f3bf 8f4f 	dsb	sy
 800fcbc:	60fb      	str	r3, [r7, #12]
}
 800fcbe:	bf00      	nop
 800fcc0:	bf00      	nop
 800fcc2:	e7fd      	b.n	800fcc0 <prvTaskExitError+0x28>
	__asm volatile
 800fcc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcc8:	f383 8811 	msr	BASEPRI, r3
 800fccc:	f3bf 8f6f 	isb	sy
 800fcd0:	f3bf 8f4f 	dsb	sy
 800fcd4:	60bb      	str	r3, [r7, #8]
}
 800fcd6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fcd8:	bf00      	nop
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d0fc      	beq.n	800fcda <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fce0:	bf00      	nop
 800fce2:	bf00      	nop
 800fce4:	3714      	adds	r7, #20
 800fce6:	46bd      	mov	sp, r7
 800fce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcec:	4770      	bx	lr
 800fcee:	bf00      	nop
 800fcf0:	24000010 	.word	0x24000010
	...

0800fd00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fd00:	4b07      	ldr	r3, [pc, #28]	@ (800fd20 <pxCurrentTCBConst2>)
 800fd02:	6819      	ldr	r1, [r3, #0]
 800fd04:	6808      	ldr	r0, [r1, #0]
 800fd06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd0a:	f380 8809 	msr	PSP, r0
 800fd0e:	f3bf 8f6f 	isb	sy
 800fd12:	f04f 0000 	mov.w	r0, #0
 800fd16:	f380 8811 	msr	BASEPRI, r0
 800fd1a:	4770      	bx	lr
 800fd1c:	f3af 8000 	nop.w

0800fd20 <pxCurrentTCBConst2>:
 800fd20:	24001f74 	.word	0x24001f74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fd24:	bf00      	nop
 800fd26:	bf00      	nop

0800fd28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fd28:	4808      	ldr	r0, [pc, #32]	@ (800fd4c <prvPortStartFirstTask+0x24>)
 800fd2a:	6800      	ldr	r0, [r0, #0]
 800fd2c:	6800      	ldr	r0, [r0, #0]
 800fd2e:	f380 8808 	msr	MSP, r0
 800fd32:	f04f 0000 	mov.w	r0, #0
 800fd36:	f380 8814 	msr	CONTROL, r0
 800fd3a:	b662      	cpsie	i
 800fd3c:	b661      	cpsie	f
 800fd3e:	f3bf 8f4f 	dsb	sy
 800fd42:	f3bf 8f6f 	isb	sy
 800fd46:	df00      	svc	0
 800fd48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fd4a:	bf00      	nop
 800fd4c:	e000ed08 	.word	0xe000ed08

0800fd50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b086      	sub	sp, #24
 800fd54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fd56:	4b47      	ldr	r3, [pc, #284]	@ (800fe74 <xPortStartScheduler+0x124>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	4a47      	ldr	r2, [pc, #284]	@ (800fe78 <xPortStartScheduler+0x128>)
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	d10b      	bne.n	800fd78 <xPortStartScheduler+0x28>
	__asm volatile
 800fd60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd64:	f383 8811 	msr	BASEPRI, r3
 800fd68:	f3bf 8f6f 	isb	sy
 800fd6c:	f3bf 8f4f 	dsb	sy
 800fd70:	613b      	str	r3, [r7, #16]
}
 800fd72:	bf00      	nop
 800fd74:	bf00      	nop
 800fd76:	e7fd      	b.n	800fd74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fd78:	4b3e      	ldr	r3, [pc, #248]	@ (800fe74 <xPortStartScheduler+0x124>)
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	4a3f      	ldr	r2, [pc, #252]	@ (800fe7c <xPortStartScheduler+0x12c>)
 800fd7e:	4293      	cmp	r3, r2
 800fd80:	d10b      	bne.n	800fd9a <xPortStartScheduler+0x4a>
	__asm volatile
 800fd82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd86:	f383 8811 	msr	BASEPRI, r3
 800fd8a:	f3bf 8f6f 	isb	sy
 800fd8e:	f3bf 8f4f 	dsb	sy
 800fd92:	60fb      	str	r3, [r7, #12]
}
 800fd94:	bf00      	nop
 800fd96:	bf00      	nop
 800fd98:	e7fd      	b.n	800fd96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fd9a:	4b39      	ldr	r3, [pc, #228]	@ (800fe80 <xPortStartScheduler+0x130>)
 800fd9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	781b      	ldrb	r3, [r3, #0]
 800fda2:	b2db      	uxtb	r3, r3
 800fda4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fda6:	697b      	ldr	r3, [r7, #20]
 800fda8:	22ff      	movs	r2, #255	@ 0xff
 800fdaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fdac:	697b      	ldr	r3, [r7, #20]
 800fdae:	781b      	ldrb	r3, [r3, #0]
 800fdb0:	b2db      	uxtb	r3, r3
 800fdb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fdb4:	78fb      	ldrb	r3, [r7, #3]
 800fdb6:	b2db      	uxtb	r3, r3
 800fdb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fdbc:	b2da      	uxtb	r2, r3
 800fdbe:	4b31      	ldr	r3, [pc, #196]	@ (800fe84 <xPortStartScheduler+0x134>)
 800fdc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fdc2:	4b31      	ldr	r3, [pc, #196]	@ (800fe88 <xPortStartScheduler+0x138>)
 800fdc4:	2207      	movs	r2, #7
 800fdc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fdc8:	e009      	b.n	800fdde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fdca:	4b2f      	ldr	r3, [pc, #188]	@ (800fe88 <xPortStartScheduler+0x138>)
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	3b01      	subs	r3, #1
 800fdd0:	4a2d      	ldr	r2, [pc, #180]	@ (800fe88 <xPortStartScheduler+0x138>)
 800fdd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fdd4:	78fb      	ldrb	r3, [r7, #3]
 800fdd6:	b2db      	uxtb	r3, r3
 800fdd8:	005b      	lsls	r3, r3, #1
 800fdda:	b2db      	uxtb	r3, r3
 800fddc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fdde:	78fb      	ldrb	r3, [r7, #3]
 800fde0:	b2db      	uxtb	r3, r3
 800fde2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fde6:	2b80      	cmp	r3, #128	@ 0x80
 800fde8:	d0ef      	beq.n	800fdca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fdea:	4b27      	ldr	r3, [pc, #156]	@ (800fe88 <xPortStartScheduler+0x138>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	f1c3 0307 	rsb	r3, r3, #7
 800fdf2:	2b04      	cmp	r3, #4
 800fdf4:	d00b      	beq.n	800fe0e <xPortStartScheduler+0xbe>
	__asm volatile
 800fdf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdfa:	f383 8811 	msr	BASEPRI, r3
 800fdfe:	f3bf 8f6f 	isb	sy
 800fe02:	f3bf 8f4f 	dsb	sy
 800fe06:	60bb      	str	r3, [r7, #8]
}
 800fe08:	bf00      	nop
 800fe0a:	bf00      	nop
 800fe0c:	e7fd      	b.n	800fe0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fe0e:	4b1e      	ldr	r3, [pc, #120]	@ (800fe88 <xPortStartScheduler+0x138>)
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	021b      	lsls	r3, r3, #8
 800fe14:	4a1c      	ldr	r2, [pc, #112]	@ (800fe88 <xPortStartScheduler+0x138>)
 800fe16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fe18:	4b1b      	ldr	r3, [pc, #108]	@ (800fe88 <xPortStartScheduler+0x138>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fe20:	4a19      	ldr	r2, [pc, #100]	@ (800fe88 <xPortStartScheduler+0x138>)
 800fe22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	b2da      	uxtb	r2, r3
 800fe28:	697b      	ldr	r3, [r7, #20]
 800fe2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fe2c:	4b17      	ldr	r3, [pc, #92]	@ (800fe8c <xPortStartScheduler+0x13c>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	4a16      	ldr	r2, [pc, #88]	@ (800fe8c <xPortStartScheduler+0x13c>)
 800fe32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fe36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fe38:	4b14      	ldr	r3, [pc, #80]	@ (800fe8c <xPortStartScheduler+0x13c>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	4a13      	ldr	r2, [pc, #76]	@ (800fe8c <xPortStartScheduler+0x13c>)
 800fe3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fe42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fe44:	f000 f8da 	bl	800fffc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fe48:	4b11      	ldr	r3, [pc, #68]	@ (800fe90 <xPortStartScheduler+0x140>)
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fe4e:	f000 f8f9 	bl	8010044 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fe52:	4b10      	ldr	r3, [pc, #64]	@ (800fe94 <xPortStartScheduler+0x144>)
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	4a0f      	ldr	r2, [pc, #60]	@ (800fe94 <xPortStartScheduler+0x144>)
 800fe58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fe5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fe5e:	f7ff ff63 	bl	800fd28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fe62:	f7fe fd13 	bl	800e88c <vTaskSwitchContext>
	prvTaskExitError();
 800fe66:	f7ff ff17 	bl	800fc98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fe6a:	2300      	movs	r3, #0
}
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	3718      	adds	r7, #24
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}
 800fe74:	e000ed00 	.word	0xe000ed00
 800fe78:	410fc271 	.word	0x410fc271
 800fe7c:	410fc270 	.word	0x410fc270
 800fe80:	e000e400 	.word	0xe000e400
 800fe84:	240025a0 	.word	0x240025a0
 800fe88:	240025a4 	.word	0x240025a4
 800fe8c:	e000ed20 	.word	0xe000ed20
 800fe90:	24000010 	.word	0x24000010
 800fe94:	e000ef34 	.word	0xe000ef34

0800fe98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fe98:	b480      	push	{r7}
 800fe9a:	b083      	sub	sp, #12
 800fe9c:	af00      	add	r7, sp, #0
	__asm volatile
 800fe9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fea2:	f383 8811 	msr	BASEPRI, r3
 800fea6:	f3bf 8f6f 	isb	sy
 800feaa:	f3bf 8f4f 	dsb	sy
 800feae:	607b      	str	r3, [r7, #4]
}
 800feb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800feb2:	4b10      	ldr	r3, [pc, #64]	@ (800fef4 <vPortEnterCritical+0x5c>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	3301      	adds	r3, #1
 800feb8:	4a0e      	ldr	r2, [pc, #56]	@ (800fef4 <vPortEnterCritical+0x5c>)
 800feba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800febc:	4b0d      	ldr	r3, [pc, #52]	@ (800fef4 <vPortEnterCritical+0x5c>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	2b01      	cmp	r3, #1
 800fec2:	d110      	bne.n	800fee6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fec4:	4b0c      	ldr	r3, [pc, #48]	@ (800fef8 <vPortEnterCritical+0x60>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	b2db      	uxtb	r3, r3
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d00b      	beq.n	800fee6 <vPortEnterCritical+0x4e>
	__asm volatile
 800fece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fed2:	f383 8811 	msr	BASEPRI, r3
 800fed6:	f3bf 8f6f 	isb	sy
 800feda:	f3bf 8f4f 	dsb	sy
 800fede:	603b      	str	r3, [r7, #0]
}
 800fee0:	bf00      	nop
 800fee2:	bf00      	nop
 800fee4:	e7fd      	b.n	800fee2 <vPortEnterCritical+0x4a>
	}
}
 800fee6:	bf00      	nop
 800fee8:	370c      	adds	r7, #12
 800feea:	46bd      	mov	sp, r7
 800feec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef0:	4770      	bx	lr
 800fef2:	bf00      	nop
 800fef4:	24000010 	.word	0x24000010
 800fef8:	e000ed04 	.word	0xe000ed04

0800fefc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fefc:	b480      	push	{r7}
 800fefe:	b083      	sub	sp, #12
 800ff00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ff02:	4b12      	ldr	r3, [pc, #72]	@ (800ff4c <vPortExitCritical+0x50>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d10b      	bne.n	800ff22 <vPortExitCritical+0x26>
	__asm volatile
 800ff0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff0e:	f383 8811 	msr	BASEPRI, r3
 800ff12:	f3bf 8f6f 	isb	sy
 800ff16:	f3bf 8f4f 	dsb	sy
 800ff1a:	607b      	str	r3, [r7, #4]
}
 800ff1c:	bf00      	nop
 800ff1e:	bf00      	nop
 800ff20:	e7fd      	b.n	800ff1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ff22:	4b0a      	ldr	r3, [pc, #40]	@ (800ff4c <vPortExitCritical+0x50>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	3b01      	subs	r3, #1
 800ff28:	4a08      	ldr	r2, [pc, #32]	@ (800ff4c <vPortExitCritical+0x50>)
 800ff2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ff2c:	4b07      	ldr	r3, [pc, #28]	@ (800ff4c <vPortExitCritical+0x50>)
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d105      	bne.n	800ff40 <vPortExitCritical+0x44>
 800ff34:	2300      	movs	r3, #0
 800ff36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	f383 8811 	msr	BASEPRI, r3
}
 800ff3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ff40:	bf00      	nop
 800ff42:	370c      	adds	r7, #12
 800ff44:	46bd      	mov	sp, r7
 800ff46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4a:	4770      	bx	lr
 800ff4c:	24000010 	.word	0x24000010

0800ff50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ff50:	f3ef 8009 	mrs	r0, PSP
 800ff54:	f3bf 8f6f 	isb	sy
 800ff58:	4b15      	ldr	r3, [pc, #84]	@ (800ffb0 <pxCurrentTCBConst>)
 800ff5a:	681a      	ldr	r2, [r3, #0]
 800ff5c:	f01e 0f10 	tst.w	lr, #16
 800ff60:	bf08      	it	eq
 800ff62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ff66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff6a:	6010      	str	r0, [r2, #0]
 800ff6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ff70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ff74:	f380 8811 	msr	BASEPRI, r0
 800ff78:	f3bf 8f4f 	dsb	sy
 800ff7c:	f3bf 8f6f 	isb	sy
 800ff80:	f7fe fc84 	bl	800e88c <vTaskSwitchContext>
 800ff84:	f04f 0000 	mov.w	r0, #0
 800ff88:	f380 8811 	msr	BASEPRI, r0
 800ff8c:	bc09      	pop	{r0, r3}
 800ff8e:	6819      	ldr	r1, [r3, #0]
 800ff90:	6808      	ldr	r0, [r1, #0]
 800ff92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff96:	f01e 0f10 	tst.w	lr, #16
 800ff9a:	bf08      	it	eq
 800ff9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ffa0:	f380 8809 	msr	PSP, r0
 800ffa4:	f3bf 8f6f 	isb	sy
 800ffa8:	4770      	bx	lr
 800ffaa:	bf00      	nop
 800ffac:	f3af 8000 	nop.w

0800ffb0 <pxCurrentTCBConst>:
 800ffb0:	24001f74 	.word	0x24001f74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ffb4:	bf00      	nop
 800ffb6:	bf00      	nop

0800ffb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b082      	sub	sp, #8
 800ffbc:	af00      	add	r7, sp, #0
	__asm volatile
 800ffbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffc2:	f383 8811 	msr	BASEPRI, r3
 800ffc6:	f3bf 8f6f 	isb	sy
 800ffca:	f3bf 8f4f 	dsb	sy
 800ffce:	607b      	str	r3, [r7, #4]
}
 800ffd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ffd2:	f7fe fba1 	bl	800e718 <xTaskIncrementTick>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d003      	beq.n	800ffe4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ffdc:	4b06      	ldr	r3, [pc, #24]	@ (800fff8 <xPortSysTickHandler+0x40>)
 800ffde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ffe2:	601a      	str	r2, [r3, #0]
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	f383 8811 	msr	BASEPRI, r3
}
 800ffee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fff0:	bf00      	nop
 800fff2:	3708      	adds	r7, #8
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}
 800fff8:	e000ed04 	.word	0xe000ed04

0800fffc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fffc:	b480      	push	{r7}
 800fffe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010000:	4b0b      	ldr	r3, [pc, #44]	@ (8010030 <vPortSetupTimerInterrupt+0x34>)
 8010002:	2200      	movs	r2, #0
 8010004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010006:	4b0b      	ldr	r3, [pc, #44]	@ (8010034 <vPortSetupTimerInterrupt+0x38>)
 8010008:	2200      	movs	r2, #0
 801000a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801000c:	4b0a      	ldr	r3, [pc, #40]	@ (8010038 <vPortSetupTimerInterrupt+0x3c>)
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	4a0a      	ldr	r2, [pc, #40]	@ (801003c <vPortSetupTimerInterrupt+0x40>)
 8010012:	fba2 2303 	umull	r2, r3, r2, r3
 8010016:	099b      	lsrs	r3, r3, #6
 8010018:	4a09      	ldr	r2, [pc, #36]	@ (8010040 <vPortSetupTimerInterrupt+0x44>)
 801001a:	3b01      	subs	r3, #1
 801001c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801001e:	4b04      	ldr	r3, [pc, #16]	@ (8010030 <vPortSetupTimerInterrupt+0x34>)
 8010020:	2207      	movs	r2, #7
 8010022:	601a      	str	r2, [r3, #0]
}
 8010024:	bf00      	nop
 8010026:	46bd      	mov	sp, r7
 8010028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002c:	4770      	bx	lr
 801002e:	bf00      	nop
 8010030:	e000e010 	.word	0xe000e010
 8010034:	e000e018 	.word	0xe000e018
 8010038:	24000000 	.word	0x24000000
 801003c:	10624dd3 	.word	0x10624dd3
 8010040:	e000e014 	.word	0xe000e014

08010044 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010044:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010054 <vPortEnableVFP+0x10>
 8010048:	6801      	ldr	r1, [r0, #0]
 801004a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801004e:	6001      	str	r1, [r0, #0]
 8010050:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010052:	bf00      	nop
 8010054:	e000ed88 	.word	0xe000ed88

08010058 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010058:	b480      	push	{r7}
 801005a:	b085      	sub	sp, #20
 801005c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801005e:	f3ef 8305 	mrs	r3, IPSR
 8010062:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	2b0f      	cmp	r3, #15
 8010068:	d915      	bls.n	8010096 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801006a:	4a18      	ldr	r2, [pc, #96]	@ (80100cc <vPortValidateInterruptPriority+0x74>)
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	4413      	add	r3, r2
 8010070:	781b      	ldrb	r3, [r3, #0]
 8010072:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010074:	4b16      	ldr	r3, [pc, #88]	@ (80100d0 <vPortValidateInterruptPriority+0x78>)
 8010076:	781b      	ldrb	r3, [r3, #0]
 8010078:	7afa      	ldrb	r2, [r7, #11]
 801007a:	429a      	cmp	r2, r3
 801007c:	d20b      	bcs.n	8010096 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801007e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010082:	f383 8811 	msr	BASEPRI, r3
 8010086:	f3bf 8f6f 	isb	sy
 801008a:	f3bf 8f4f 	dsb	sy
 801008e:	607b      	str	r3, [r7, #4]
}
 8010090:	bf00      	nop
 8010092:	bf00      	nop
 8010094:	e7fd      	b.n	8010092 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010096:	4b0f      	ldr	r3, [pc, #60]	@ (80100d4 <vPortValidateInterruptPriority+0x7c>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801009e:	4b0e      	ldr	r3, [pc, #56]	@ (80100d8 <vPortValidateInterruptPriority+0x80>)
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	429a      	cmp	r2, r3
 80100a4:	d90b      	bls.n	80100be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80100a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100aa:	f383 8811 	msr	BASEPRI, r3
 80100ae:	f3bf 8f6f 	isb	sy
 80100b2:	f3bf 8f4f 	dsb	sy
 80100b6:	603b      	str	r3, [r7, #0]
}
 80100b8:	bf00      	nop
 80100ba:	bf00      	nop
 80100bc:	e7fd      	b.n	80100ba <vPortValidateInterruptPriority+0x62>
	}
 80100be:	bf00      	nop
 80100c0:	3714      	adds	r7, #20
 80100c2:	46bd      	mov	sp, r7
 80100c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c8:	4770      	bx	lr
 80100ca:	bf00      	nop
 80100cc:	e000e3f0 	.word	0xe000e3f0
 80100d0:	240025a0 	.word	0x240025a0
 80100d4:	e000ed0c 	.word	0xe000ed0c
 80100d8:	240025a4 	.word	0x240025a4

080100dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	b08a      	sub	sp, #40	@ 0x28
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80100e4:	2300      	movs	r3, #0
 80100e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80100e8:	f7fe fa48 	bl	800e57c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80100ec:	4b5c      	ldr	r3, [pc, #368]	@ (8010260 <pvPortMalloc+0x184>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d101      	bne.n	80100f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80100f4:	f000 f924 	bl	8010340 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80100f8:	4b5a      	ldr	r3, [pc, #360]	@ (8010264 <pvPortMalloc+0x188>)
 80100fa:	681a      	ldr	r2, [r3, #0]
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	4013      	ands	r3, r2
 8010100:	2b00      	cmp	r3, #0
 8010102:	f040 8095 	bne.w	8010230 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d01e      	beq.n	801014a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801010c:	2208      	movs	r2, #8
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	4413      	add	r3, r2
 8010112:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f003 0307 	and.w	r3, r3, #7
 801011a:	2b00      	cmp	r3, #0
 801011c:	d015      	beq.n	801014a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	f023 0307 	bic.w	r3, r3, #7
 8010124:	3308      	adds	r3, #8
 8010126:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	f003 0307 	and.w	r3, r3, #7
 801012e:	2b00      	cmp	r3, #0
 8010130:	d00b      	beq.n	801014a <pvPortMalloc+0x6e>
	__asm volatile
 8010132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010136:	f383 8811 	msr	BASEPRI, r3
 801013a:	f3bf 8f6f 	isb	sy
 801013e:	f3bf 8f4f 	dsb	sy
 8010142:	617b      	str	r3, [r7, #20]
}
 8010144:	bf00      	nop
 8010146:	bf00      	nop
 8010148:	e7fd      	b.n	8010146 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d06f      	beq.n	8010230 <pvPortMalloc+0x154>
 8010150:	4b45      	ldr	r3, [pc, #276]	@ (8010268 <pvPortMalloc+0x18c>)
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	687a      	ldr	r2, [r7, #4]
 8010156:	429a      	cmp	r2, r3
 8010158:	d86a      	bhi.n	8010230 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801015a:	4b44      	ldr	r3, [pc, #272]	@ (801026c <pvPortMalloc+0x190>)
 801015c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801015e:	4b43      	ldr	r3, [pc, #268]	@ (801026c <pvPortMalloc+0x190>)
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010164:	e004      	b.n	8010170 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010168:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801016a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010172:	685b      	ldr	r3, [r3, #4]
 8010174:	687a      	ldr	r2, [r7, #4]
 8010176:	429a      	cmp	r2, r3
 8010178:	d903      	bls.n	8010182 <pvPortMalloc+0xa6>
 801017a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d1f1      	bne.n	8010166 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010182:	4b37      	ldr	r3, [pc, #220]	@ (8010260 <pvPortMalloc+0x184>)
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010188:	429a      	cmp	r2, r3
 801018a:	d051      	beq.n	8010230 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801018c:	6a3b      	ldr	r3, [r7, #32]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	2208      	movs	r2, #8
 8010192:	4413      	add	r3, r2
 8010194:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010198:	681a      	ldr	r2, [r3, #0]
 801019a:	6a3b      	ldr	r3, [r7, #32]
 801019c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801019e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101a0:	685a      	ldr	r2, [r3, #4]
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	1ad2      	subs	r2, r2, r3
 80101a6:	2308      	movs	r3, #8
 80101a8:	005b      	lsls	r3, r3, #1
 80101aa:	429a      	cmp	r2, r3
 80101ac:	d920      	bls.n	80101f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80101ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	4413      	add	r3, r2
 80101b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80101b6:	69bb      	ldr	r3, [r7, #24]
 80101b8:	f003 0307 	and.w	r3, r3, #7
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d00b      	beq.n	80101d8 <pvPortMalloc+0xfc>
	__asm volatile
 80101c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101c4:	f383 8811 	msr	BASEPRI, r3
 80101c8:	f3bf 8f6f 	isb	sy
 80101cc:	f3bf 8f4f 	dsb	sy
 80101d0:	613b      	str	r3, [r7, #16]
}
 80101d2:	bf00      	nop
 80101d4:	bf00      	nop
 80101d6:	e7fd      	b.n	80101d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80101d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101da:	685a      	ldr	r2, [r3, #4]
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	1ad2      	subs	r2, r2, r3
 80101e0:	69bb      	ldr	r3, [r7, #24]
 80101e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80101e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101e6:	687a      	ldr	r2, [r7, #4]
 80101e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80101ea:	69b8      	ldr	r0, [r7, #24]
 80101ec:	f000 f90c 	bl	8010408 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80101f0:	4b1d      	ldr	r3, [pc, #116]	@ (8010268 <pvPortMalloc+0x18c>)
 80101f2:	681a      	ldr	r2, [r3, #0]
 80101f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101f6:	685b      	ldr	r3, [r3, #4]
 80101f8:	1ad3      	subs	r3, r2, r3
 80101fa:	4a1b      	ldr	r2, [pc, #108]	@ (8010268 <pvPortMalloc+0x18c>)
 80101fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80101fe:	4b1a      	ldr	r3, [pc, #104]	@ (8010268 <pvPortMalloc+0x18c>)
 8010200:	681a      	ldr	r2, [r3, #0]
 8010202:	4b1b      	ldr	r3, [pc, #108]	@ (8010270 <pvPortMalloc+0x194>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	429a      	cmp	r2, r3
 8010208:	d203      	bcs.n	8010212 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801020a:	4b17      	ldr	r3, [pc, #92]	@ (8010268 <pvPortMalloc+0x18c>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	4a18      	ldr	r2, [pc, #96]	@ (8010270 <pvPortMalloc+0x194>)
 8010210:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010214:	685a      	ldr	r2, [r3, #4]
 8010216:	4b13      	ldr	r3, [pc, #76]	@ (8010264 <pvPortMalloc+0x188>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	431a      	orrs	r2, r3
 801021c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801021e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010222:	2200      	movs	r2, #0
 8010224:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010226:	4b13      	ldr	r3, [pc, #76]	@ (8010274 <pvPortMalloc+0x198>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	3301      	adds	r3, #1
 801022c:	4a11      	ldr	r2, [pc, #68]	@ (8010274 <pvPortMalloc+0x198>)
 801022e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010230:	f7fe f9b2 	bl	800e598 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010234:	69fb      	ldr	r3, [r7, #28]
 8010236:	f003 0307 	and.w	r3, r3, #7
 801023a:	2b00      	cmp	r3, #0
 801023c:	d00b      	beq.n	8010256 <pvPortMalloc+0x17a>
	__asm volatile
 801023e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010242:	f383 8811 	msr	BASEPRI, r3
 8010246:	f3bf 8f6f 	isb	sy
 801024a:	f3bf 8f4f 	dsb	sy
 801024e:	60fb      	str	r3, [r7, #12]
}
 8010250:	bf00      	nop
 8010252:	bf00      	nop
 8010254:	e7fd      	b.n	8010252 <pvPortMalloc+0x176>
	return pvReturn;
 8010256:	69fb      	ldr	r3, [r7, #28]
}
 8010258:	4618      	mov	r0, r3
 801025a:	3728      	adds	r7, #40	@ 0x28
 801025c:	46bd      	mov	sp, r7
 801025e:	bd80      	pop	{r7, pc}
 8010260:	240332f0 	.word	0x240332f0
 8010264:	24033304 	.word	0x24033304
 8010268:	240332f4 	.word	0x240332f4
 801026c:	240332e8 	.word	0x240332e8
 8010270:	240332f8 	.word	0x240332f8
 8010274:	240332fc 	.word	0x240332fc

08010278 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b086      	sub	sp, #24
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d04f      	beq.n	801032a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801028a:	2308      	movs	r3, #8
 801028c:	425b      	negs	r3, r3
 801028e:	697a      	ldr	r2, [r7, #20]
 8010290:	4413      	add	r3, r2
 8010292:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010298:	693b      	ldr	r3, [r7, #16]
 801029a:	685a      	ldr	r2, [r3, #4]
 801029c:	4b25      	ldr	r3, [pc, #148]	@ (8010334 <vPortFree+0xbc>)
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	4013      	ands	r3, r2
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d10b      	bne.n	80102be <vPortFree+0x46>
	__asm volatile
 80102a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102aa:	f383 8811 	msr	BASEPRI, r3
 80102ae:	f3bf 8f6f 	isb	sy
 80102b2:	f3bf 8f4f 	dsb	sy
 80102b6:	60fb      	str	r3, [r7, #12]
}
 80102b8:	bf00      	nop
 80102ba:	bf00      	nop
 80102bc:	e7fd      	b.n	80102ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d00b      	beq.n	80102de <vPortFree+0x66>
	__asm volatile
 80102c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102ca:	f383 8811 	msr	BASEPRI, r3
 80102ce:	f3bf 8f6f 	isb	sy
 80102d2:	f3bf 8f4f 	dsb	sy
 80102d6:	60bb      	str	r3, [r7, #8]
}
 80102d8:	bf00      	nop
 80102da:	bf00      	nop
 80102dc:	e7fd      	b.n	80102da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80102de:	693b      	ldr	r3, [r7, #16]
 80102e0:	685a      	ldr	r2, [r3, #4]
 80102e2:	4b14      	ldr	r3, [pc, #80]	@ (8010334 <vPortFree+0xbc>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	4013      	ands	r3, r2
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d01e      	beq.n	801032a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80102ec:	693b      	ldr	r3, [r7, #16]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d11a      	bne.n	801032a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80102f4:	693b      	ldr	r3, [r7, #16]
 80102f6:	685a      	ldr	r2, [r3, #4]
 80102f8:	4b0e      	ldr	r3, [pc, #56]	@ (8010334 <vPortFree+0xbc>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	43db      	mvns	r3, r3
 80102fe:	401a      	ands	r2, r3
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010304:	f7fe f93a 	bl	800e57c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010308:	693b      	ldr	r3, [r7, #16]
 801030a:	685a      	ldr	r2, [r3, #4]
 801030c:	4b0a      	ldr	r3, [pc, #40]	@ (8010338 <vPortFree+0xc0>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	4413      	add	r3, r2
 8010312:	4a09      	ldr	r2, [pc, #36]	@ (8010338 <vPortFree+0xc0>)
 8010314:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010316:	6938      	ldr	r0, [r7, #16]
 8010318:	f000 f876 	bl	8010408 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801031c:	4b07      	ldr	r3, [pc, #28]	@ (801033c <vPortFree+0xc4>)
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	3301      	adds	r3, #1
 8010322:	4a06      	ldr	r2, [pc, #24]	@ (801033c <vPortFree+0xc4>)
 8010324:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010326:	f7fe f937 	bl	800e598 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801032a:	bf00      	nop
 801032c:	3718      	adds	r7, #24
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}
 8010332:	bf00      	nop
 8010334:	24033304 	.word	0x24033304
 8010338:	240332f4 	.word	0x240332f4
 801033c:	24033300 	.word	0x24033300

08010340 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010340:	b480      	push	{r7}
 8010342:	b085      	sub	sp, #20
 8010344:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010346:	4b29      	ldr	r3, [pc, #164]	@ (80103ec <prvHeapInit+0xac>)
 8010348:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801034a:	4b29      	ldr	r3, [pc, #164]	@ (80103f0 <prvHeapInit+0xb0>)
 801034c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	f003 0307 	and.w	r3, r3, #7
 8010354:	2b00      	cmp	r3, #0
 8010356:	d00c      	beq.n	8010372 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	3307      	adds	r3, #7
 801035c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	f023 0307 	bic.w	r3, r3, #7
 8010364:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010366:	68ba      	ldr	r2, [r7, #8]
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	1ad3      	subs	r3, r2, r3
 801036c:	4a20      	ldr	r2, [pc, #128]	@ (80103f0 <prvHeapInit+0xb0>)
 801036e:	4413      	add	r3, r2
 8010370:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010376:	4a1f      	ldr	r2, [pc, #124]	@ (80103f4 <prvHeapInit+0xb4>)
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801037c:	4b1d      	ldr	r3, [pc, #116]	@ (80103f4 <prvHeapInit+0xb4>)
 801037e:	2200      	movs	r2, #0
 8010380:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	68ba      	ldr	r2, [r7, #8]
 8010386:	4413      	add	r3, r2
 8010388:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801038a:	2208      	movs	r2, #8
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	1a9b      	subs	r3, r3, r2
 8010390:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	f023 0307 	bic.w	r3, r3, #7
 8010398:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	4a16      	ldr	r2, [pc, #88]	@ (80103f8 <prvHeapInit+0xb8>)
 801039e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80103a0:	4b15      	ldr	r3, [pc, #84]	@ (80103f8 <prvHeapInit+0xb8>)
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	2200      	movs	r2, #0
 80103a6:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80103a8:	4b13      	ldr	r3, [pc, #76]	@ (80103f8 <prvHeapInit+0xb8>)
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	2200      	movs	r2, #0
 80103ae:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	68fa      	ldr	r2, [r7, #12]
 80103b8:	1ad2      	subs	r2, r2, r3
 80103ba:	683b      	ldr	r3, [r7, #0]
 80103bc:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80103be:	4b0e      	ldr	r3, [pc, #56]	@ (80103f8 <prvHeapInit+0xb8>)
 80103c0:	681a      	ldr	r2, [r3, #0]
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	685b      	ldr	r3, [r3, #4]
 80103ca:	4a0c      	ldr	r2, [pc, #48]	@ (80103fc <prvHeapInit+0xbc>)
 80103cc:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	685b      	ldr	r3, [r3, #4]
 80103d2:	4a0b      	ldr	r2, [pc, #44]	@ (8010400 <prvHeapInit+0xc0>)
 80103d4:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80103d6:	4b0b      	ldr	r3, [pc, #44]	@ (8010404 <prvHeapInit+0xc4>)
 80103d8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80103dc:	601a      	str	r2, [r3, #0]
}
 80103de:	bf00      	nop
 80103e0:	3714      	adds	r7, #20
 80103e2:	46bd      	mov	sp, r7
 80103e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e8:	4770      	bx	lr
 80103ea:	bf00      	nop
 80103ec:	00030d40 	.word	0x00030d40
 80103f0:	240025a8 	.word	0x240025a8
 80103f4:	240332e8 	.word	0x240332e8
 80103f8:	240332f0 	.word	0x240332f0
 80103fc:	240332f8 	.word	0x240332f8
 8010400:	240332f4 	.word	0x240332f4
 8010404:	24033304 	.word	0x24033304

08010408 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010408:	b480      	push	{r7}
 801040a:	b085      	sub	sp, #20
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010410:	4b28      	ldr	r3, [pc, #160]	@ (80104b4 <prvInsertBlockIntoFreeList+0xac>)
 8010412:	60fb      	str	r3, [r7, #12]
 8010414:	e002      	b.n	801041c <prvInsertBlockIntoFreeList+0x14>
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	60fb      	str	r3, [r7, #12]
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	687a      	ldr	r2, [r7, #4]
 8010422:	429a      	cmp	r2, r3
 8010424:	d8f7      	bhi.n	8010416 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	685b      	ldr	r3, [r3, #4]
 801042e:	68ba      	ldr	r2, [r7, #8]
 8010430:	4413      	add	r3, r2
 8010432:	687a      	ldr	r2, [r7, #4]
 8010434:	429a      	cmp	r2, r3
 8010436:	d108      	bne.n	801044a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	685a      	ldr	r2, [r3, #4]
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	685b      	ldr	r3, [r3, #4]
 8010440:	441a      	add	r2, r3
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	685b      	ldr	r3, [r3, #4]
 8010452:	68ba      	ldr	r2, [r7, #8]
 8010454:	441a      	add	r2, r3
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	429a      	cmp	r2, r3
 801045c:	d118      	bne.n	8010490 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	681a      	ldr	r2, [r3, #0]
 8010462:	4b15      	ldr	r3, [pc, #84]	@ (80104b8 <prvInsertBlockIntoFreeList+0xb0>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	429a      	cmp	r2, r3
 8010468:	d00d      	beq.n	8010486 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	685a      	ldr	r2, [r3, #4]
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	685b      	ldr	r3, [r3, #4]
 8010474:	441a      	add	r2, r3
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	681a      	ldr	r2, [r3, #0]
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	601a      	str	r2, [r3, #0]
 8010484:	e008      	b.n	8010498 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010486:	4b0c      	ldr	r3, [pc, #48]	@ (80104b8 <prvInsertBlockIntoFreeList+0xb0>)
 8010488:	681a      	ldr	r2, [r3, #0]
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	601a      	str	r2, [r3, #0]
 801048e:	e003      	b.n	8010498 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	681a      	ldr	r2, [r3, #0]
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010498:	68fa      	ldr	r2, [r7, #12]
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	429a      	cmp	r2, r3
 801049e:	d002      	beq.n	80104a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	687a      	ldr	r2, [r7, #4]
 80104a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80104a6:	bf00      	nop
 80104a8:	3714      	adds	r7, #20
 80104aa:	46bd      	mov	sp, r7
 80104ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b0:	4770      	bx	lr
 80104b2:	bf00      	nop
 80104b4:	240332e8 	.word	0x240332e8
 80104b8:	240332f0 	.word	0x240332f0

080104bc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand>:
 80104bc:	4a02      	ldr	r2, [pc, #8]	@ (80104c8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0xc>)
 80104be:	4b03      	ldr	r3, [pc, #12]	@ (80104cc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x10>)
 80104c0:	6812      	ldr	r2, [r2, #0]
 80104c2:	601a      	str	r2, [r3, #0]
 80104c4:	4770      	bx	lr
 80104c6:	bf00      	nop
 80104c8:	24000d28 	.word	0x24000d28
 80104cc:	2400001c 	.word	0x2400001c

080104d0 <autoware_auto_control_msgs__msg__AckermannControlCommand__rosidl_typesupport_introspection_c__AckermannControlCommand_init_function>:
 80104d0:	f002 bb58 	b.w	8012b84 <autoware_auto_control_msgs__msg__AckermannControlCommand__init>

080104d4 <autoware_auto_control_msgs__msg__AckermannControlCommand__rosidl_typesupport_introspection_c__AckermannControlCommand_fini_function>:
 80104d4:	f002 bb94 	b.w	8012c00 <autoware_auto_control_msgs__msg__AckermannControlCommand__fini>

080104d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand>:
 80104d8:	b510      	push	{r4, lr}
 80104da:	4c0a      	ldr	r4, [pc, #40]	@ (8010504 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x2c>)
 80104dc:	f000 fff4 	bl	80114c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80104e0:	60e0      	str	r0, [r4, #12]
 80104e2:	f000 f819 	bl	8010518 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>
 80104e6:	64a0      	str	r0, [r4, #72]	@ 0x48
 80104e8:	f000 f830 	bl	801054c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>
 80104ec:	4b06      	ldr	r3, [pc, #24]	@ (8010508 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x30>)
 80104ee:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 80104f2:	681a      	ldr	r2, [r3, #0]
 80104f4:	b10a      	cbz	r2, 80104fa <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x22>
 80104f6:	4804      	ldr	r0, [pc, #16]	@ (8010508 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x30>)
 80104f8:	bd10      	pop	{r4, pc}
 80104fa:	4a04      	ldr	r2, [pc, #16]	@ (801050c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x34>)
 80104fc:	4802      	ldr	r0, [pc, #8]	@ (8010508 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x30>)
 80104fe:	6812      	ldr	r2, [r2, #0]
 8010500:	601a      	str	r2, [r3, #0]
 8010502:	bd10      	pop	{r4, pc}
 8010504:	24000028 	.word	0x24000028
 8010508:	240000dc 	.word	0x240000dc
 801050c:	24000d2c 	.word	0x24000d2c

08010510 <autoware_auto_control_msgs__msg__AckermannLateralCommand__rosidl_typesupport_introspection_c__AckermannLateralCommand_init_function>:
 8010510:	f002 bb86 	b.w	8012c20 <autoware_auto_control_msgs__msg__AckermannLateralCommand__init>

08010514 <autoware_auto_control_msgs__msg__AckermannLateralCommand__rosidl_typesupport_introspection_c__AckermannLateralCommand_fini_function>:
 8010514:	f002 bb98 	b.w	8012c48 <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>

08010518 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>:
 8010518:	b508      	push	{r3, lr}
 801051a:	f000 ffd5 	bl	80114c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801051e:	4b06      	ldr	r3, [pc, #24]	@ (8010538 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x20>)
 8010520:	4906      	ldr	r1, [pc, #24]	@ (801053c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x24>)
 8010522:	681a      	ldr	r2, [r3, #0]
 8010524:	60c8      	str	r0, [r1, #12]
 8010526:	b10a      	cbz	r2, 801052c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x14>
 8010528:	4803      	ldr	r0, [pc, #12]	@ (8010538 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x20>)
 801052a:	bd08      	pop	{r3, pc}
 801052c:	4a04      	ldr	r2, [pc, #16]	@ (8010540 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x28>)
 801052e:	4802      	ldr	r0, [pc, #8]	@ (8010538 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x20>)
 8010530:	6812      	ldr	r2, [r2, #0]
 8010532:	601a      	str	r2, [r3, #0]
 8010534:	bd08      	pop	{r3, pc}
 8010536:	bf00      	nop
 8010538:	2400019c 	.word	0x2400019c
 801053c:	240000e8 	.word	0x240000e8
 8010540:	24000d2c 	.word	0x24000d2c

08010544 <autoware_auto_control_msgs__msg__LongitudinalCommand__rosidl_typesupport_introspection_c__LongitudinalCommand_init_function>:
 8010544:	f002 bb84 	b.w	8012c50 <autoware_auto_control_msgs__msg__LongitudinalCommand__init>

08010548 <autoware_auto_control_msgs__msg__LongitudinalCommand__rosidl_typesupport_introspection_c__LongitudinalCommand_fini_function>:
 8010548:	f002 bb98 	b.w	8012c7c <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>

0801054c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>:
 801054c:	b508      	push	{r3, lr}
 801054e:	f000 ffbb 	bl	80114c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010552:	4b06      	ldr	r3, [pc, #24]	@ (801056c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x20>)
 8010554:	4906      	ldr	r1, [pc, #24]	@ (8010570 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x24>)
 8010556:	681a      	ldr	r2, [r3, #0]
 8010558:	60c8      	str	r0, [r1, #12]
 801055a:	b10a      	cbz	r2, 8010560 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x14>
 801055c:	4803      	ldr	r0, [pc, #12]	@ (801056c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x20>)
 801055e:	bd08      	pop	{r3, pc}
 8010560:	4a04      	ldr	r2, [pc, #16]	@ (8010574 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x28>)
 8010562:	4802      	ldr	r0, [pc, #8]	@ (801056c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x20>)
 8010564:	6812      	ldr	r2, [r2, #0]
 8010566:	601a      	str	r2, [r3, #0]
 8010568:	bd08      	pop	{r3, pc}
 801056a:	bf00      	nop
 801056c:	24000298 	.word	0x24000298
 8010570:	240001a8 	.word	0x240001a8
 8010574:	24000d2c 	.word	0x24000d2c

08010578 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannControlCommand>:
 8010578:	b570      	push	{r4, r5, r6, lr}
 801057a:	4604      	mov	r4, r0
 801057c:	b190      	cbz	r0, 80105a4 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannControlCommand+0x2c>
 801057e:	460e      	mov	r6, r1
 8010580:	f000 ffb0 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010584:	4605      	mov	r5, r0
 8010586:	f104 0008 	add.w	r0, r4, #8
 801058a:	4435      	add	r5, r6
 801058c:	4629      	mov	r1, r5
 801058e:	f000 f885 	bl	801069c <get_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>
 8010592:	4601      	mov	r1, r0
 8010594:	f104 0018 	add.w	r0, r4, #24
 8010598:	440d      	add	r5, r1
 801059a:	4629      	mov	r1, r5
 801059c:	f000 f90e 	bl	80107bc <get_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>
 80105a0:	1b80      	subs	r0, r0, r6
 80105a2:	4428      	add	r0, r5
 80105a4:	bd70      	pop	{r4, r5, r6, pc}
 80105a6:	bf00      	nop

080105a8 <_AckermannControlCommand__cdr_deserialize>:
 80105a8:	b570      	push	{r4, r5, r6, lr}
 80105aa:	460c      	mov	r4, r1
 80105ac:	b1e1      	cbz	r1, 80105e8 <_AckermannControlCommand__cdr_deserialize+0x40>
 80105ae:	4605      	mov	r5, r0
 80105b0:	f000 fffc 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80105b4:	4603      	mov	r3, r0
 80105b6:	4621      	mov	r1, r4
 80105b8:	4628      	mov	r0, r5
 80105ba:	685b      	ldr	r3, [r3, #4]
 80105bc:	68db      	ldr	r3, [r3, #12]
 80105be:	4798      	blx	r3
 80105c0:	f000 f8f8 	bl	80107b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>
 80105c4:	4603      	mov	r3, r0
 80105c6:	f104 0108 	add.w	r1, r4, #8
 80105ca:	4628      	mov	r0, r5
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	68db      	ldr	r3, [r3, #12]
 80105d0:	4798      	blx	r3
 80105d2:	f000 f9a1 	bl	8010918 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>
 80105d6:	4603      	mov	r3, r0
 80105d8:	f104 0118 	add.w	r1, r4, #24
 80105dc:	4628      	mov	r0, r5
 80105de:	685b      	ldr	r3, [r3, #4]
 80105e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80105e4:	68db      	ldr	r3, [r3, #12]
 80105e6:	4718      	bx	r3
 80105e8:	4608      	mov	r0, r1
 80105ea:	bd70      	pop	{r4, r5, r6, pc}

080105ec <_AckermannControlCommand__cdr_serialize>:
 80105ec:	b510      	push	{r4, lr}
 80105ee:	b082      	sub	sp, #8
 80105f0:	9101      	str	r1, [sp, #4]
 80105f2:	b1e8      	cbz	r0, 8010630 <_AckermannControlCommand__cdr_serialize+0x44>
 80105f4:	4604      	mov	r4, r0
 80105f6:	f000 ffd9 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80105fa:	4603      	mov	r3, r0
 80105fc:	9901      	ldr	r1, [sp, #4]
 80105fe:	4620      	mov	r0, r4
 8010600:	685b      	ldr	r3, [r3, #4]
 8010602:	689b      	ldr	r3, [r3, #8]
 8010604:	4798      	blx	r3
 8010606:	f000 f8d5 	bl	80107b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>
 801060a:	4603      	mov	r3, r0
 801060c:	9901      	ldr	r1, [sp, #4]
 801060e:	f104 0008 	add.w	r0, r4, #8
 8010612:	685b      	ldr	r3, [r3, #4]
 8010614:	689b      	ldr	r3, [r3, #8]
 8010616:	4798      	blx	r3
 8010618:	f000 f97e 	bl	8010918 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>
 801061c:	4603      	mov	r3, r0
 801061e:	9901      	ldr	r1, [sp, #4]
 8010620:	f104 0018 	add.w	r0, r4, #24
 8010624:	685b      	ldr	r3, [r3, #4]
 8010626:	689b      	ldr	r3, [r3, #8]
 8010628:	b002      	add	sp, #8
 801062a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801062e:	4718      	bx	r3
 8010630:	b002      	add	sp, #8
 8010632:	bd10      	pop	{r4, pc}

08010634 <_AckermannControlCommand__get_serialized_size>:
 8010634:	b538      	push	{r3, r4, r5, lr}
 8010636:	4604      	mov	r4, r0
 8010638:	b180      	cbz	r0, 801065c <_AckermannControlCommand__get_serialized_size+0x28>
 801063a:	2100      	movs	r1, #0
 801063c:	f000 ff52 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010640:	4605      	mov	r5, r0
 8010642:	f104 0008 	add.w	r0, r4, #8
 8010646:	4629      	mov	r1, r5
 8010648:	f000 f828 	bl	801069c <get_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>
 801064c:	4601      	mov	r1, r0
 801064e:	f104 0018 	add.w	r0, r4, #24
 8010652:	440d      	add	r5, r1
 8010654:	4629      	mov	r1, r5
 8010656:	f000 f8b1 	bl	80107bc <get_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>
 801065a:	4428      	add	r0, r5
 801065c:	bd38      	pop	{r3, r4, r5, pc}
 801065e:	bf00      	nop

08010660 <_AckermannControlCommand__max_serialized_size>:
 8010660:	b510      	push	{r4, lr}
 8010662:	b082      	sub	sp, #8
 8010664:	2301      	movs	r3, #1
 8010666:	2100      	movs	r1, #0
 8010668:	f10d 0007 	add.w	r0, sp, #7
 801066c:	f88d 3007 	strb.w	r3, [sp, #7]
 8010670:	f000 ff88 	bl	8011584 <max_serialized_size_builtin_interfaces__msg__Time>
 8010674:	4604      	mov	r4, r0
 8010676:	f10d 0007 	add.w	r0, sp, #7
 801067a:	4621      	mov	r1, r4
 801067c:	f000 f884 	bl	8010788 <max_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>
 8010680:	4601      	mov	r1, r0
 8010682:	f10d 0007 	add.w	r0, sp, #7
 8010686:	440c      	add	r4, r1
 8010688:	4621      	mov	r1, r4
 801068a:	f000 f929 	bl	80108e0 <max_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>
 801068e:	4420      	add	r0, r4
 8010690:	b002      	add	sp, #8
 8010692:	bd10      	pop	{r4, pc}

08010694 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand>:
 8010694:	4800      	ldr	r0, [pc, #0]	@ (8010698 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x4>)
 8010696:	4770      	bx	lr
 8010698:	240002a4 	.word	0x240002a4

0801069c <get_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>:
 801069c:	b538      	push	{r3, r4, r5, lr}
 801069e:	b188      	cbz	r0, 80106c4 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand+0x28>
 80106a0:	460d      	mov	r5, r1
 80106a2:	f000 ff1f 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 80106a6:	2104      	movs	r1, #4
 80106a8:	182c      	adds	r4, r5, r0
 80106aa:	f1c5 0504 	rsb	r5, r5, #4
 80106ae:	4620      	mov	r0, r4
 80106b0:	f001 fe3e 	bl	8012330 <ucdr_alignment>
 80106b4:	2104      	movs	r1, #4
 80106b6:	4408      	add	r0, r1
 80106b8:	4404      	add	r4, r0
 80106ba:	4620      	mov	r0, r4
 80106bc:	f001 fe38 	bl	8012330 <ucdr_alignment>
 80106c0:	4428      	add	r0, r5
 80106c2:	4420      	add	r0, r4
 80106c4:	bd38      	pop	{r3, r4, r5, pc}
 80106c6:	bf00      	nop

080106c8 <_AckermannLateralCommand__cdr_deserialize>:
 80106c8:	b538      	push	{r3, r4, r5, lr}
 80106ca:	460c      	mov	r4, r1
 80106cc:	b1a1      	cbz	r1, 80106f8 <_AckermannLateralCommand__cdr_deserialize+0x30>
 80106ce:	4605      	mov	r5, r0
 80106d0:	f000 ff6c 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80106d4:	4603      	mov	r3, r0
 80106d6:	4621      	mov	r1, r4
 80106d8:	4628      	mov	r0, r5
 80106da:	685b      	ldr	r3, [r3, #4]
 80106dc:	68db      	ldr	r3, [r3, #12]
 80106de:	4798      	blx	r3
 80106e0:	f104 0108 	add.w	r1, r4, #8
 80106e4:	4628      	mov	r0, r5
 80106e6:	f001 fbd5 	bl	8011e94 <ucdr_deserialize_float>
 80106ea:	f104 010c 	add.w	r1, r4, #12
 80106ee:	4628      	mov	r0, r5
 80106f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106f4:	f001 bbce 	b.w	8011e94 <ucdr_deserialize_float>
 80106f8:	4608      	mov	r0, r1
 80106fa:	bd38      	pop	{r3, r4, r5, pc}

080106fc <_AckermannLateralCommand__cdr_serialize>:
 80106fc:	b1b0      	cbz	r0, 801072c <_AckermannLateralCommand__cdr_serialize+0x30>
 80106fe:	b538      	push	{r3, r4, r5, lr}
 8010700:	4604      	mov	r4, r0
 8010702:	460d      	mov	r5, r1
 8010704:	f000 ff52 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010708:	4603      	mov	r3, r0
 801070a:	4629      	mov	r1, r5
 801070c:	4620      	mov	r0, r4
 801070e:	685b      	ldr	r3, [r3, #4]
 8010710:	689b      	ldr	r3, [r3, #8]
 8010712:	4798      	blx	r3
 8010714:	ed94 0a02 	vldr	s0, [r4, #8]
 8010718:	4628      	mov	r0, r5
 801071a:	f001 fb23 	bl	8011d64 <ucdr_serialize_float>
 801071e:	ed94 0a03 	vldr	s0, [r4, #12]
 8010722:	4628      	mov	r0, r5
 8010724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010728:	f001 bb1c 	b.w	8011d64 <ucdr_serialize_float>
 801072c:	4770      	bx	lr
 801072e:	bf00      	nop

08010730 <_AckermannLateralCommand__get_serialized_size>:
 8010730:	b180      	cbz	r0, 8010754 <_AckermannLateralCommand__get_serialized_size+0x24>
 8010732:	2100      	movs	r1, #0
 8010734:	b510      	push	{r4, lr}
 8010736:	f000 fed5 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 801073a:	4604      	mov	r4, r0
 801073c:	2104      	movs	r1, #4
 801073e:	f001 fdf7 	bl	8012330 <ucdr_alignment>
 8010742:	2104      	movs	r1, #4
 8010744:	4420      	add	r0, r4
 8010746:	1844      	adds	r4, r0, r1
 8010748:	4620      	mov	r0, r4
 801074a:	f001 fdf1 	bl	8012330 <ucdr_alignment>
 801074e:	3004      	adds	r0, #4
 8010750:	4420      	add	r0, r4
 8010752:	bd10      	pop	{r4, pc}
 8010754:	4770      	bx	lr
 8010756:	bf00      	nop

08010758 <_AckermannLateralCommand__max_serialized_size>:
 8010758:	b510      	push	{r4, lr}
 801075a:	b082      	sub	sp, #8
 801075c:	2301      	movs	r3, #1
 801075e:	2100      	movs	r1, #0
 8010760:	f10d 0007 	add.w	r0, sp, #7
 8010764:	f88d 3007 	strb.w	r3, [sp, #7]
 8010768:	f000 ff0c 	bl	8011584 <max_serialized_size_builtin_interfaces__msg__Time>
 801076c:	4604      	mov	r4, r0
 801076e:	2104      	movs	r1, #4
 8010770:	f001 fdde 	bl	8012330 <ucdr_alignment>
 8010774:	2104      	movs	r1, #4
 8010776:	4420      	add	r0, r4
 8010778:	1844      	adds	r4, r0, r1
 801077a:	4620      	mov	r0, r4
 801077c:	f001 fdd8 	bl	8012330 <ucdr_alignment>
 8010780:	3004      	adds	r0, #4
 8010782:	4420      	add	r0, r4
 8010784:	b002      	add	sp, #8
 8010786:	bd10      	pop	{r4, pc}

08010788 <max_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>:
 8010788:	2301      	movs	r3, #1
 801078a:	b570      	push	{r4, r5, r6, lr}
 801078c:	460c      	mov	r4, r1
 801078e:	7003      	strb	r3, [r0, #0]
 8010790:	f000 fef8 	bl	8011584 <max_serialized_size_builtin_interfaces__msg__Time>
 8010794:	2104      	movs	r1, #4
 8010796:	1826      	adds	r6, r4, r0
 8010798:	f1c4 0404 	rsb	r4, r4, #4
 801079c:	4630      	mov	r0, r6
 801079e:	f001 fdc7 	bl	8012330 <ucdr_alignment>
 80107a2:	2104      	movs	r1, #4
 80107a4:	1845      	adds	r5, r0, r1
 80107a6:	4435      	add	r5, r6
 80107a8:	4628      	mov	r0, r5
 80107aa:	f001 fdc1 	bl	8012330 <ucdr_alignment>
 80107ae:	4420      	add	r0, r4
 80107b0:	4428      	add	r0, r5
 80107b2:	bd70      	pop	{r4, r5, r6, pc}

080107b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>:
 80107b4:	4800      	ldr	r0, [pc, #0]	@ (80107b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x4>)
 80107b6:	4770      	bx	lr
 80107b8:	240002cc 	.word	0x240002cc

080107bc <get_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>:
 80107bc:	b1c8      	cbz	r0, 80107f2 <get_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand+0x36>
 80107be:	b570      	push	{r4, r5, r6, lr}
 80107c0:	460d      	mov	r5, r1
 80107c2:	f000 fe8f 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 80107c6:	2104      	movs	r1, #4
 80107c8:	182e      	adds	r6, r5, r0
 80107ca:	f1c5 0504 	rsb	r5, r5, #4
 80107ce:	4630      	mov	r0, r6
 80107d0:	f001 fdae 	bl	8012330 <ucdr_alignment>
 80107d4:	2104      	movs	r1, #4
 80107d6:	1844      	adds	r4, r0, r1
 80107d8:	4434      	add	r4, r6
 80107da:	4620      	mov	r0, r4
 80107dc:	f001 fda8 	bl	8012330 <ucdr_alignment>
 80107e0:	2104      	movs	r1, #4
 80107e2:	4408      	add	r0, r1
 80107e4:	4404      	add	r4, r0
 80107e6:	4620      	mov	r0, r4
 80107e8:	f001 fda2 	bl	8012330 <ucdr_alignment>
 80107ec:	4428      	add	r0, r5
 80107ee:	4420      	add	r0, r4
 80107f0:	bd70      	pop	{r4, r5, r6, pc}
 80107f2:	4770      	bx	lr

080107f4 <_LongitudinalCommand__cdr_deserialize>:
 80107f4:	b538      	push	{r3, r4, r5, lr}
 80107f6:	460c      	mov	r4, r1
 80107f8:	b1c9      	cbz	r1, 801082e <_LongitudinalCommand__cdr_deserialize+0x3a>
 80107fa:	4605      	mov	r5, r0
 80107fc:	f000 fed6 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010800:	4603      	mov	r3, r0
 8010802:	4621      	mov	r1, r4
 8010804:	4628      	mov	r0, r5
 8010806:	685b      	ldr	r3, [r3, #4]
 8010808:	68db      	ldr	r3, [r3, #12]
 801080a:	4798      	blx	r3
 801080c:	f104 0108 	add.w	r1, r4, #8
 8010810:	4628      	mov	r0, r5
 8010812:	f001 fb3f 	bl	8011e94 <ucdr_deserialize_float>
 8010816:	f104 010c 	add.w	r1, r4, #12
 801081a:	4628      	mov	r0, r5
 801081c:	f001 fb3a 	bl	8011e94 <ucdr_deserialize_float>
 8010820:	f104 0110 	add.w	r1, r4, #16
 8010824:	4628      	mov	r0, r5
 8010826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801082a:	f001 bb33 	b.w	8011e94 <ucdr_deserialize_float>
 801082e:	4608      	mov	r0, r1
 8010830:	bd38      	pop	{r3, r4, r5, pc}
 8010832:	bf00      	nop

08010834 <_LongitudinalCommand__cdr_serialize>:
 8010834:	b1d8      	cbz	r0, 801086e <_LongitudinalCommand__cdr_serialize+0x3a>
 8010836:	b538      	push	{r3, r4, r5, lr}
 8010838:	4604      	mov	r4, r0
 801083a:	460d      	mov	r5, r1
 801083c:	f000 feb6 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010840:	4603      	mov	r3, r0
 8010842:	4629      	mov	r1, r5
 8010844:	4620      	mov	r0, r4
 8010846:	685b      	ldr	r3, [r3, #4]
 8010848:	689b      	ldr	r3, [r3, #8]
 801084a:	4798      	blx	r3
 801084c:	ed94 0a02 	vldr	s0, [r4, #8]
 8010850:	4628      	mov	r0, r5
 8010852:	f001 fa87 	bl	8011d64 <ucdr_serialize_float>
 8010856:	ed94 0a03 	vldr	s0, [r4, #12]
 801085a:	4628      	mov	r0, r5
 801085c:	f001 fa82 	bl	8011d64 <ucdr_serialize_float>
 8010860:	ed94 0a04 	vldr	s0, [r4, #16]
 8010864:	4628      	mov	r0, r5
 8010866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801086a:	f001 ba7b 	b.w	8011d64 <ucdr_serialize_float>
 801086e:	4770      	bx	lr

08010870 <_LongitudinalCommand__get_serialized_size>:
 8010870:	b1b0      	cbz	r0, 80108a0 <_LongitudinalCommand__get_serialized_size+0x30>
 8010872:	2100      	movs	r1, #0
 8010874:	b510      	push	{r4, lr}
 8010876:	f000 fe35 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 801087a:	4604      	mov	r4, r0
 801087c:	2104      	movs	r1, #4
 801087e:	f001 fd57 	bl	8012330 <ucdr_alignment>
 8010882:	2104      	movs	r1, #4
 8010884:	4420      	add	r0, r4
 8010886:	1844      	adds	r4, r0, r1
 8010888:	4620      	mov	r0, r4
 801088a:	f001 fd51 	bl	8012330 <ucdr_alignment>
 801088e:	2104      	movs	r1, #4
 8010890:	4408      	add	r0, r1
 8010892:	4404      	add	r4, r0
 8010894:	4620      	mov	r0, r4
 8010896:	f001 fd4b 	bl	8012330 <ucdr_alignment>
 801089a:	3004      	adds	r0, #4
 801089c:	4420      	add	r0, r4
 801089e:	bd10      	pop	{r4, pc}
 80108a0:	4770      	bx	lr
 80108a2:	bf00      	nop

080108a4 <_LongitudinalCommand__max_serialized_size>:
 80108a4:	b510      	push	{r4, lr}
 80108a6:	b082      	sub	sp, #8
 80108a8:	2301      	movs	r3, #1
 80108aa:	2100      	movs	r1, #0
 80108ac:	f10d 0007 	add.w	r0, sp, #7
 80108b0:	f88d 3007 	strb.w	r3, [sp, #7]
 80108b4:	f000 fe66 	bl	8011584 <max_serialized_size_builtin_interfaces__msg__Time>
 80108b8:	4604      	mov	r4, r0
 80108ba:	2104      	movs	r1, #4
 80108bc:	f001 fd38 	bl	8012330 <ucdr_alignment>
 80108c0:	2104      	movs	r1, #4
 80108c2:	4420      	add	r0, r4
 80108c4:	1844      	adds	r4, r0, r1
 80108c6:	4620      	mov	r0, r4
 80108c8:	f001 fd32 	bl	8012330 <ucdr_alignment>
 80108cc:	2104      	movs	r1, #4
 80108ce:	4408      	add	r0, r1
 80108d0:	4404      	add	r4, r0
 80108d2:	4620      	mov	r0, r4
 80108d4:	f001 fd2c 	bl	8012330 <ucdr_alignment>
 80108d8:	3004      	adds	r0, #4
 80108da:	4420      	add	r0, r4
 80108dc:	b002      	add	sp, #8
 80108de:	bd10      	pop	{r4, pc}

080108e0 <max_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>:
 80108e0:	2301      	movs	r3, #1
 80108e2:	b570      	push	{r4, r5, r6, lr}
 80108e4:	460c      	mov	r4, r1
 80108e6:	7003      	strb	r3, [r0, #0]
 80108e8:	f000 fe4c 	bl	8011584 <max_serialized_size_builtin_interfaces__msg__Time>
 80108ec:	2104      	movs	r1, #4
 80108ee:	1826      	adds	r6, r4, r0
 80108f0:	f1c4 0404 	rsb	r4, r4, #4
 80108f4:	4630      	mov	r0, r6
 80108f6:	f001 fd1b 	bl	8012330 <ucdr_alignment>
 80108fa:	2104      	movs	r1, #4
 80108fc:	1845      	adds	r5, r0, r1
 80108fe:	4435      	add	r5, r6
 8010900:	4628      	mov	r0, r5
 8010902:	f001 fd15 	bl	8012330 <ucdr_alignment>
 8010906:	2104      	movs	r1, #4
 8010908:	4408      	add	r0, r1
 801090a:	4405      	add	r5, r0
 801090c:	4628      	mov	r0, r5
 801090e:	f001 fd0f 	bl	8012330 <ucdr_alignment>
 8010912:	4420      	add	r0, r4
 8010914:	4428      	add	r0, r5
 8010916:	bd70      	pop	{r4, r5, r6, pc}

08010918 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>:
 8010918:	4800      	ldr	r0, [pc, #0]	@ (801091c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x4>)
 801091a:	4770      	bx	lr
 801091c:	240002f4 	.word	0x240002f4

08010920 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request>:
 8010920:	4b04      	ldr	r3, [pc, #16]	@ (8010934 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x14>)
 8010922:	4805      	ldr	r0, [pc, #20]	@ (8010938 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x18>)
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	4905      	ldr	r1, [pc, #20]	@ (801093c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>)
 8010928:	4a05      	ldr	r2, [pc, #20]	@ (8010940 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 801092a:	6003      	str	r3, [r0, #0]
 801092c:	600b      	str	r3, [r1, #0]
 801092e:	6013      	str	r3, [r2, #0]
 8010930:	4770      	bx	lr
 8010932:	bf00      	nop
 8010934:	24000d28 	.word	0x24000d28
 8010938:	24000340 	.word	0x24000340
 801093c:	2400034c 	.word	0x2400034c
 8010940:	24000324 	.word	0x24000324

08010944 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport>:
 8010944:	4a02      	ldr	r2, [pc, #8]	@ (8010950 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0xc>)
 8010946:	4b03      	ldr	r3, [pc, #12]	@ (8010954 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x10>)
 8010948:	6812      	ldr	r2, [r2, #0]
 801094a:	601a      	str	r2, [r3, #0]
 801094c:	4770      	bx	lr
 801094e:	bf00      	nop
 8010950:	24000d28 	.word	0x24000d28
 8010954:	24000360 	.word	0x24000360

08010958 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand>:
 8010958:	4a02      	ldr	r2, [pc, #8]	@ (8010964 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0xc>)
 801095a:	4b03      	ldr	r3, [pc, #12]	@ (8010968 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x10>)
 801095c:	6812      	ldr	r2, [r2, #0]
 801095e:	601a      	str	r2, [r3, #0]
 8010960:	4770      	bx	lr
 8010962:	bf00      	nop
 8010964:	24000d28 	.word	0x24000d28
 8010968:	24000374 	.word	0x24000374

0801096c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport>:
 801096c:	4a02      	ldr	r2, [pc, #8]	@ (8010978 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0xc>)
 801096e:	4b03      	ldr	r3, [pc, #12]	@ (801097c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x10>)
 8010970:	6812      	ldr	r2, [r2, #0]
 8010972:	601a      	str	r2, [r3, #0]
 8010974:	4770      	bx	lr
 8010976:	bf00      	nop
 8010978:	24000d28 	.word	0x24000d28
 801097c:	24000388 	.word	0x24000388

08010980 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand>:
 8010980:	4a02      	ldr	r2, [pc, #8]	@ (801098c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0xc>)
 8010982:	4b03      	ldr	r3, [pc, #12]	@ (8010990 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x10>)
 8010984:	6812      	ldr	r2, [r2, #0]
 8010986:	601a      	str	r2, [r3, #0]
 8010988:	4770      	bx	lr
 801098a:	bf00      	nop
 801098c:	24000d28 	.word	0x24000d28
 8010990:	2400039c 	.word	0x2400039c

08010994 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport>:
 8010994:	4a02      	ldr	r2, [pc, #8]	@ (80109a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0xc>)
 8010996:	4b03      	ldr	r3, [pc, #12]	@ (80109a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x10>)
 8010998:	6812      	ldr	r2, [r2, #0]
 801099a:	601a      	str	r2, [r3, #0]
 801099c:	4770      	bx	lr
 801099e:	bf00      	nop
 80109a0:	24000d28 	.word	0x24000d28
 80109a4:	240003b0 	.word	0x240003b0

080109a8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport>:
 80109a8:	4a02      	ldr	r2, [pc, #8]	@ (80109b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0xc>)
 80109aa:	4b03      	ldr	r3, [pc, #12]	@ (80109b8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x10>)
 80109ac:	6812      	ldr	r2, [r2, #0]
 80109ae:	601a      	str	r2, [r3, #0]
 80109b0:	4770      	bx	lr
 80109b2:	bf00      	nop
 80109b4:	24000d28 	.word	0x24000d28
 80109b8:	240003c4 	.word	0x240003c4

080109bc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>:
 80109bc:	4a02      	ldr	r2, [pc, #8]	@ (80109c8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0xc>)
 80109be:	4b03      	ldr	r3, [pc, #12]	@ (80109cc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x10>)
 80109c0:	6812      	ldr	r2, [r2, #0]
 80109c2:	601a      	str	r2, [r3, #0]
 80109c4:	4770      	bx	lr
 80109c6:	bf00      	nop
 80109c8:	24000d28 	.word	0x24000d28
 80109cc:	240003d8 	.word	0x240003d8

080109d0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>:
 80109d0:	4a02      	ldr	r2, [pc, #8]	@ (80109dc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0xc>)
 80109d2:	4b03      	ldr	r3, [pc, #12]	@ (80109e0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x10>)
 80109d4:	6812      	ldr	r2, [r2, #0]
 80109d6:	601a      	str	r2, [r3, #0]
 80109d8:	4770      	bx	lr
 80109da:	bf00      	nop
 80109dc:	24000d28 	.word	0x24000d28
 80109e0:	240003ec 	.word	0x240003ec

080109e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport>:
 80109e4:	4a02      	ldr	r2, [pc, #8]	@ (80109f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0xc>)
 80109e6:	4b03      	ldr	r3, [pc, #12]	@ (80109f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x10>)
 80109e8:	6812      	ldr	r2, [r2, #0]
 80109ea:	601a      	str	r2, [r3, #0]
 80109ec:	4770      	bx	lr
 80109ee:	bf00      	nop
 80109f0:	24000d28 	.word	0x24000d28
 80109f4:	24000400 	.word	0x24000400

080109f8 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_init_function>:
 80109f8:	f002 b944 	b.w	8012c84 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__init>

080109fc <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_fini_function>:
 80109fc:	f002 b954 	b.w	8012ca8 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__fini>

08010a00 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_init_function>:
 8010a00:	f002 b956 	b.w	8012cb0 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__init>

08010a04 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_fini_function>:
 8010a04:	f002 b958 	b.w	8012cb8 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__fini>

08010a08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request>:
 8010a08:	b508      	push	{r3, lr}
 8010a0a:	f000 fd5d 	bl	80114c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010a0e:	4b06      	ldr	r3, [pc, #24]	@ (8010a28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8010a10:	4906      	ldr	r1, [pc, #24]	@ (8010a2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x24>)
 8010a12:	681a      	ldr	r2, [r3, #0]
 8010a14:	60c8      	str	r0, [r1, #12]
 8010a16:	b10a      	cbz	r2, 8010a1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x14>
 8010a18:	4803      	ldr	r0, [pc, #12]	@ (8010a28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8010a1a:	bd08      	pop	{r3, pc}
 8010a1c:	4a04      	ldr	r2, [pc, #16]	@ (8010a30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x28>)
 8010a1e:	4802      	ldr	r0, [pc, #8]	@ (8010a28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8010a20:	6812      	ldr	r2, [r2, #0]
 8010a22:	601a      	str	r2, [r3, #0]
 8010a24:	bd08      	pop	{r3, pc}
 8010a26:	bf00      	nop
 8010a28:	24000484 	.word	0x24000484
 8010a2c:	2400040c 	.word	0x2400040c
 8010a30:	24000d2c 	.word	0x24000d2c

08010a34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response>:
 8010a34:	4b04      	ldr	r3, [pc, #16]	@ (8010a48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 8010a36:	681a      	ldr	r2, [r3, #0]
 8010a38:	b10a      	cbz	r2, 8010a3e <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0xa>
 8010a3a:	4803      	ldr	r0, [pc, #12]	@ (8010a48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 8010a3c:	4770      	bx	lr
 8010a3e:	4a03      	ldr	r2, [pc, #12]	@ (8010a4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x18>)
 8010a40:	4801      	ldr	r0, [pc, #4]	@ (8010a48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 8010a42:	6812      	ldr	r2, [r2, #0]
 8010a44:	601a      	str	r2, [r3, #0]
 8010a46:	4770      	bx	lr
 8010a48:	240004cc 	.word	0x240004cc
 8010a4c:	24000d2c 	.word	0x24000d2c

08010a50 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand>:
 8010a50:	4b16      	ldr	r3, [pc, #88]	@ (8010aac <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8010a52:	681a      	ldr	r2, [r3, #0]
 8010a54:	b510      	push	{r4, lr}
 8010a56:	b132      	cbz	r2, 8010a66 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x16>
 8010a58:	685c      	ldr	r4, [r3, #4]
 8010a5a:	68a3      	ldr	r3, [r4, #8]
 8010a5c:	b153      	cbz	r3, 8010a74 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x24>
 8010a5e:	68e3      	ldr	r3, [r4, #12]
 8010a60:	b1a3      	cbz	r3, 8010a8c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x3c>
 8010a62:	4812      	ldr	r0, [pc, #72]	@ (8010aac <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8010a64:	bd10      	pop	{r4, pc}
 8010a66:	4a12      	ldr	r2, [pc, #72]	@ (8010ab0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8010a68:	685c      	ldr	r4, [r3, #4]
 8010a6a:	6812      	ldr	r2, [r2, #0]
 8010a6c:	601a      	str	r2, [r3, #0]
 8010a6e:	68a3      	ldr	r3, [r4, #8]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d1f4      	bne.n	8010a5e <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0xe>
 8010a74:	f000 fd28 	bl	80114c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010a78:	4b0e      	ldr	r3, [pc, #56]	@ (8010ab4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x64>)
 8010a7a:	490f      	ldr	r1, [pc, #60]	@ (8010ab8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x68>)
 8010a7c:	681a      	ldr	r2, [r3, #0]
 8010a7e:	60c8      	str	r0, [r1, #12]
 8010a80:	b17a      	cbz	r2, 8010aa2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x52>
 8010a82:	685b      	ldr	r3, [r3, #4]
 8010a84:	60a3      	str	r3, [r4, #8]
 8010a86:	68e3      	ldr	r3, [r4, #12]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d1ea      	bne.n	8010a62 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x12>
 8010a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8010abc <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x6c>)
 8010a8e:	681a      	ldr	r2, [r3, #0]
 8010a90:	b11a      	cbz	r2, 8010a9a <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x4a>
 8010a92:	685b      	ldr	r3, [r3, #4]
 8010a94:	4805      	ldr	r0, [pc, #20]	@ (8010aac <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8010a96:	60e3      	str	r3, [r4, #12]
 8010a98:	bd10      	pop	{r4, pc}
 8010a9a:	4a05      	ldr	r2, [pc, #20]	@ (8010ab0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8010a9c:	6812      	ldr	r2, [r2, #0]
 8010a9e:	601a      	str	r2, [r3, #0]
 8010aa0:	e7f7      	b.n	8010a92 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x42>
 8010aa2:	4a03      	ldr	r2, [pc, #12]	@ (8010ab0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8010aa4:	6812      	ldr	r2, [r2, #0]
 8010aa6:	601a      	str	r2, [r3, #0]
 8010aa8:	e7eb      	b.n	8010a82 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x32>
 8010aaa:	bf00      	nop
 8010aac:	240004e8 	.word	0x240004e8
 8010ab0:	24000d2c 	.word	0x24000d2c
 8010ab4:	24000484 	.word	0x24000484
 8010ab8:	2400040c 	.word	0x2400040c
 8010abc:	240004cc 	.word	0x240004cc

08010ac0 <autoware_auto_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_init_function>:
 8010ac0:	f002 b8fc 	b.w	8012cbc <autoware_auto_vehicle_msgs__msg__ControlModeReport__init>

08010ac4 <autoware_auto_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_fini_function>:
 8010ac4:	f002 b90e 	b.w	8012ce4 <autoware_auto_vehicle_msgs__msg__ControlModeReport__fini>

08010ac8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport>:
 8010ac8:	b508      	push	{r3, lr}
 8010aca:	f000 fcfd 	bl	80114c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010ace:	4b06      	ldr	r3, [pc, #24]	@ (8010ae8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x20>)
 8010ad0:	4906      	ldr	r1, [pc, #24]	@ (8010aec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x24>)
 8010ad2:	681a      	ldr	r2, [r3, #0]
 8010ad4:	60c8      	str	r0, [r1, #12]
 8010ad6:	b10a      	cbz	r2, 8010adc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x14>
 8010ad8:	4803      	ldr	r0, [pc, #12]	@ (8010ae8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x20>)
 8010ada:	bd08      	pop	{r3, pc}
 8010adc:	4a04      	ldr	r2, [pc, #16]	@ (8010af0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x28>)
 8010ade:	4802      	ldr	r0, [pc, #8]	@ (8010ae8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x20>)
 8010ae0:	6812      	ldr	r2, [r2, #0]
 8010ae2:	601a      	str	r2, [r3, #0]
 8010ae4:	bd08      	pop	{r3, pc}
 8010ae6:	bf00      	nop
 8010ae8:	2400056c 	.word	0x2400056c
 8010aec:	240004f4 	.word	0x240004f4
 8010af0:	24000d2c 	.word	0x24000d2c

08010af4 <autoware_auto_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_init_function>:
 8010af4:	f002 b8fa 	b.w	8012cec <autoware_auto_vehicle_msgs__msg__GearCommand__init>

08010af8 <autoware_auto_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_fini_function>:
 8010af8:	f002 b90c 	b.w	8012d14 <autoware_auto_vehicle_msgs__msg__GearCommand__fini>

08010afc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand>:
 8010afc:	b508      	push	{r3, lr}
 8010afe:	f000 fce3 	bl	80114c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010b02:	4b06      	ldr	r3, [pc, #24]	@ (8010b1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x20>)
 8010b04:	4906      	ldr	r1, [pc, #24]	@ (8010b20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x24>)
 8010b06:	681a      	ldr	r2, [r3, #0]
 8010b08:	60c8      	str	r0, [r1, #12]
 8010b0a:	b10a      	cbz	r2, 8010b10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x14>
 8010b0c:	4803      	ldr	r0, [pc, #12]	@ (8010b1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x20>)
 8010b0e:	bd08      	pop	{r3, pc}
 8010b10:	4a04      	ldr	r2, [pc, #16]	@ (8010b24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x28>)
 8010b12:	4802      	ldr	r0, [pc, #8]	@ (8010b1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x20>)
 8010b14:	6812      	ldr	r2, [r2, #0]
 8010b16:	601a      	str	r2, [r3, #0]
 8010b18:	bd08      	pop	{r3, pc}
 8010b1a:	bf00      	nop
 8010b1c:	240005f0 	.word	0x240005f0
 8010b20:	24000578 	.word	0x24000578
 8010b24:	24000d2c 	.word	0x24000d2c

08010b28 <autoware_auto_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_init_function>:
 8010b28:	f002 b8f8 	b.w	8012d1c <autoware_auto_vehicle_msgs__msg__GearReport__init>

08010b2c <autoware_auto_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_fini_function>:
 8010b2c:	f002 b90a 	b.w	8012d44 <autoware_auto_vehicle_msgs__msg__GearReport__fini>

08010b30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport>:
 8010b30:	b508      	push	{r3, lr}
 8010b32:	f000 fcc9 	bl	80114c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010b36:	4b06      	ldr	r3, [pc, #24]	@ (8010b50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x20>)
 8010b38:	4906      	ldr	r1, [pc, #24]	@ (8010b54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x24>)
 8010b3a:	681a      	ldr	r2, [r3, #0]
 8010b3c:	60c8      	str	r0, [r1, #12]
 8010b3e:	b10a      	cbz	r2, 8010b44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x14>
 8010b40:	4803      	ldr	r0, [pc, #12]	@ (8010b50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x20>)
 8010b42:	bd08      	pop	{r3, pc}
 8010b44:	4a04      	ldr	r2, [pc, #16]	@ (8010b58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x28>)
 8010b46:	4802      	ldr	r0, [pc, #8]	@ (8010b50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x20>)
 8010b48:	6812      	ldr	r2, [r2, #0]
 8010b4a:	601a      	str	r2, [r3, #0]
 8010b4c:	bd08      	pop	{r3, pc}
 8010b4e:	bf00      	nop
 8010b50:	24000674 	.word	0x24000674
 8010b54:	240005fc 	.word	0x240005fc
 8010b58:	24000d2c 	.word	0x24000d2c

08010b5c <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_init_function>:
 8010b5c:	f002 b8f6 	b.w	8012d4c <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__init>

08010b60 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_fini_function>:
 8010b60:	f002 b908 	b.w	8012d74 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__fini>

08010b64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand>:
 8010b64:	b508      	push	{r3, lr}
 8010b66:	f000 fcaf 	bl	80114c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010b6a:	4b06      	ldr	r3, [pc, #24]	@ (8010b84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8010b6c:	4906      	ldr	r1, [pc, #24]	@ (8010b88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x24>)
 8010b6e:	681a      	ldr	r2, [r3, #0]
 8010b70:	60c8      	str	r0, [r1, #12]
 8010b72:	b10a      	cbz	r2, 8010b78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x14>
 8010b74:	4803      	ldr	r0, [pc, #12]	@ (8010b84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8010b76:	bd08      	pop	{r3, pc}
 8010b78:	4a04      	ldr	r2, [pc, #16]	@ (8010b8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x28>)
 8010b7a:	4802      	ldr	r0, [pc, #8]	@ (8010b84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8010b7c:	6812      	ldr	r2, [r2, #0]
 8010b7e:	601a      	str	r2, [r3, #0]
 8010b80:	bd08      	pop	{r3, pc}
 8010b82:	bf00      	nop
 8010b84:	240006f8 	.word	0x240006f8
 8010b88:	24000680 	.word	0x24000680
 8010b8c:	24000d2c 	.word	0x24000d2c

08010b90 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_init_function>:
 8010b90:	f002 b8f4 	b.w	8012d7c <autoware_auto_vehicle_msgs__msg__HazardLightsReport__init>

08010b94 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_fini_function>:
 8010b94:	f002 b906 	b.w	8012da4 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__fini>

08010b98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport>:
 8010b98:	b508      	push	{r3, lr}
 8010b9a:	f000 fc95 	bl	80114c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010b9e:	4b06      	ldr	r3, [pc, #24]	@ (8010bb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8010ba0:	4906      	ldr	r1, [pc, #24]	@ (8010bbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x24>)
 8010ba2:	681a      	ldr	r2, [r3, #0]
 8010ba4:	60c8      	str	r0, [r1, #12]
 8010ba6:	b10a      	cbz	r2, 8010bac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x14>
 8010ba8:	4803      	ldr	r0, [pc, #12]	@ (8010bb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8010baa:	bd08      	pop	{r3, pc}
 8010bac:	4a04      	ldr	r2, [pc, #16]	@ (8010bc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x28>)
 8010bae:	4802      	ldr	r0, [pc, #8]	@ (8010bb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8010bb0:	6812      	ldr	r2, [r2, #0]
 8010bb2:	601a      	str	r2, [r3, #0]
 8010bb4:	bd08      	pop	{r3, pc}
 8010bb6:	bf00      	nop
 8010bb8:	2400077c 	.word	0x2400077c
 8010bbc:	24000704 	.word	0x24000704
 8010bc0:	24000d2c 	.word	0x24000d2c

08010bc4 <autoware_auto_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_init_function>:
 8010bc4:	f002 b8f2 	b.w	8012dac <autoware_auto_vehicle_msgs__msg__SteeringReport__init>

08010bc8 <autoware_auto_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_fini_function>:
 8010bc8:	f002 b904 	b.w	8012dd4 <autoware_auto_vehicle_msgs__msg__SteeringReport__fini>

08010bcc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport>:
 8010bcc:	b508      	push	{r3, lr}
 8010bce:	f000 fc7b 	bl	80114c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010bd2:	4b06      	ldr	r3, [pc, #24]	@ (8010bec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x20>)
 8010bd4:	4906      	ldr	r1, [pc, #24]	@ (8010bf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x24>)
 8010bd6:	681a      	ldr	r2, [r3, #0]
 8010bd8:	60c8      	str	r0, [r1, #12]
 8010bda:	b10a      	cbz	r2, 8010be0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x14>
 8010bdc:	4803      	ldr	r0, [pc, #12]	@ (8010bec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x20>)
 8010bde:	bd08      	pop	{r3, pc}
 8010be0:	4a04      	ldr	r2, [pc, #16]	@ (8010bf4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x28>)
 8010be2:	4802      	ldr	r0, [pc, #8]	@ (8010bec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x20>)
 8010be4:	6812      	ldr	r2, [r2, #0]
 8010be6:	601a      	str	r2, [r3, #0]
 8010be8:	bd08      	pop	{r3, pc}
 8010bea:	bf00      	nop
 8010bec:	24000800 	.word	0x24000800
 8010bf0:	24000788 	.word	0x24000788
 8010bf4:	24000d2c 	.word	0x24000d2c

08010bf8 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_init_function>:
 8010bf8:	f002 b8f0 	b.w	8012ddc <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__init>

08010bfc <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_fini_function>:
 8010bfc:	f002 b902 	b.w	8012e04 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__fini>

08010c00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8010c00:	b508      	push	{r3, lr}
 8010c02:	f000 fc61 	bl	80114c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010c06:	4b06      	ldr	r3, [pc, #24]	@ (8010c20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8010c08:	4906      	ldr	r1, [pc, #24]	@ (8010c24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x24>)
 8010c0a:	681a      	ldr	r2, [r3, #0]
 8010c0c:	60c8      	str	r0, [r1, #12]
 8010c0e:	b10a      	cbz	r2, 8010c14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>
 8010c10:	4803      	ldr	r0, [pc, #12]	@ (8010c20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8010c12:	bd08      	pop	{r3, pc}
 8010c14:	4a04      	ldr	r2, [pc, #16]	@ (8010c28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x28>)
 8010c16:	4802      	ldr	r0, [pc, #8]	@ (8010c20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8010c18:	6812      	ldr	r2, [r2, #0]
 8010c1a:	601a      	str	r2, [r3, #0]
 8010c1c:	bd08      	pop	{r3, pc}
 8010c1e:	bf00      	nop
 8010c20:	24000884 	.word	0x24000884
 8010c24:	2400080c 	.word	0x2400080c
 8010c28:	24000d2c 	.word	0x24000d2c

08010c2c <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_init_function>:
 8010c2c:	f002 b8ee 	b.w	8012e0c <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__init>

08010c30 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_fini_function>:
 8010c30:	f002 b900 	b.w	8012e34 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__fini>

08010c34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>:
 8010c34:	b508      	push	{r3, lr}
 8010c36:	f000 fc47 	bl	80114c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010c3a:	4b06      	ldr	r3, [pc, #24]	@ (8010c54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 8010c3c:	4906      	ldr	r1, [pc, #24]	@ (8010c58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x24>)
 8010c3e:	681a      	ldr	r2, [r3, #0]
 8010c40:	60c8      	str	r0, [r1, #12]
 8010c42:	b10a      	cbz	r2, 8010c48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x14>
 8010c44:	4803      	ldr	r0, [pc, #12]	@ (8010c54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 8010c46:	bd08      	pop	{r3, pc}
 8010c48:	4a04      	ldr	r2, [pc, #16]	@ (8010c5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x28>)
 8010c4a:	4802      	ldr	r0, [pc, #8]	@ (8010c54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 8010c4c:	6812      	ldr	r2, [r2, #0]
 8010c4e:	601a      	str	r2, [r3, #0]
 8010c50:	bd08      	pop	{r3, pc}
 8010c52:	bf00      	nop
 8010c54:	24000908 	.word	0x24000908
 8010c58:	24000890 	.word	0x24000890
 8010c5c:	24000d2c 	.word	0x24000d2c

08010c60 <autoware_auto_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_init_function>:
 8010c60:	f002 b8ec 	b.w	8012e3c <autoware_auto_vehicle_msgs__msg__VelocityReport__init>

08010c64 <autoware_auto_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_fini_function>:
 8010c64:	f002 b900 	b.w	8012e68 <autoware_auto_vehicle_msgs__msg__VelocityReport__fini>

08010c68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport>:
 8010c68:	b508      	push	{r3, lr}
 8010c6a:	f001 fcb7 	bl	80125dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010c6e:	4b06      	ldr	r3, [pc, #24]	@ (8010c88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x20>)
 8010c70:	4906      	ldr	r1, [pc, #24]	@ (8010c8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x24>)
 8010c72:	681a      	ldr	r2, [r3, #0]
 8010c74:	60c8      	str	r0, [r1, #12]
 8010c76:	b10a      	cbz	r2, 8010c7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x14>
 8010c78:	4803      	ldr	r0, [pc, #12]	@ (8010c88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x20>)
 8010c7a:	bd08      	pop	{r3, pc}
 8010c7c:	4a04      	ldr	r2, [pc, #16]	@ (8010c90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x28>)
 8010c7e:	4802      	ldr	r0, [pc, #8]	@ (8010c88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x20>)
 8010c80:	6812      	ldr	r2, [r2, #0]
 8010c82:	601a      	str	r2, [r3, #0]
 8010c84:	bd08      	pop	{r3, pc}
 8010c86:	bf00      	nop
 8010c88:	24000a04 	.word	0x24000a04
 8010c8c:	24000914 	.word	0x24000914
 8010c90:	24000d2c 	.word	0x24000d2c

08010c94 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request>:
 8010c94:	4800      	ldr	r0, [pc, #0]	@ (8010c98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x4>)
 8010c96:	4770      	bx	lr
 8010c98:	24000a2c 	.word	0x24000a2c

08010c9c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response>:
 8010c9c:	4800      	ldr	r0, [pc, #0]	@ (8010ca0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x4>)
 8010c9e:	4770      	bx	lr
 8010ca0:	24000a38 	.word	0x24000a38

08010ca4 <_ControlModeCommand_Response__max_serialized_size>:
 8010ca4:	2101      	movs	r1, #1
 8010ca6:	2000      	movs	r0, #0
 8010ca8:	b508      	push	{r3, lr}
 8010caa:	f001 fb41 	bl	8012330 <ucdr_alignment>
 8010cae:	3001      	adds	r0, #1
 8010cb0:	bd08      	pop	{r3, pc}
 8010cb2:	bf00      	nop

08010cb4 <_ControlModeCommand_Response__cdr_deserialize>:
 8010cb4:	b109      	cbz	r1, 8010cba <_ControlModeCommand_Response__cdr_deserialize+0x6>
 8010cb6:	f000 bc93 	b.w	80115e0 <ucdr_deserialize_bool>
 8010cba:	4608      	mov	r0, r1
 8010cbc:	4770      	bx	lr
 8010cbe:	bf00      	nop

08010cc0 <get_serialized_size_autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request>:
 8010cc0:	b538      	push	{r3, r4, r5, lr}
 8010cc2:	b158      	cbz	r0, 8010cdc <get_serialized_size_autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>
 8010cc4:	460d      	mov	r5, r1
 8010cc6:	f000 fc0d 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010cca:	2101      	movs	r1, #1
 8010ccc:	182c      	adds	r4, r5, r0
 8010cce:	f1c5 0501 	rsb	r5, r5, #1
 8010cd2:	4620      	mov	r0, r4
 8010cd4:	f001 fb2c 	bl	8012330 <ucdr_alignment>
 8010cd8:	4428      	add	r0, r5
 8010cda:	4420      	add	r0, r4
 8010cdc:	bd38      	pop	{r3, r4, r5, pc}
 8010cde:	bf00      	nop

08010ce0 <get_serialized_size_autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response>:
 8010ce0:	b138      	cbz	r0, 8010cf2 <get_serialized_size_autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x12>
 8010ce2:	b508      	push	{r3, lr}
 8010ce4:	460b      	mov	r3, r1
 8010ce6:	2101      	movs	r1, #1
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f001 fb21 	bl	8012330 <ucdr_alignment>
 8010cee:	3001      	adds	r0, #1
 8010cf0:	bd08      	pop	{r3, pc}
 8010cf2:	4770      	bx	lr

08010cf4 <_ControlModeCommand_Request__cdr_deserialize>:
 8010cf4:	b538      	push	{r3, r4, r5, lr}
 8010cf6:	460c      	mov	r4, r1
 8010cf8:	b179      	cbz	r1, 8010d1a <_ControlModeCommand_Request__cdr_deserialize+0x26>
 8010cfa:	4605      	mov	r5, r0
 8010cfc:	f000 fc56 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010d00:	4603      	mov	r3, r0
 8010d02:	4621      	mov	r1, r4
 8010d04:	4628      	mov	r0, r5
 8010d06:	685b      	ldr	r3, [r3, #4]
 8010d08:	68db      	ldr	r3, [r3, #12]
 8010d0a:	4798      	blx	r3
 8010d0c:	f104 0108 	add.w	r1, r4, #8
 8010d10:	4628      	mov	r0, r5
 8010d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d16:	f000 bc91 	b.w	801163c <ucdr_deserialize_uint8_t>
 8010d1a:	4608      	mov	r0, r1
 8010d1c:	bd38      	pop	{r3, r4, r5, pc}
 8010d1e:	bf00      	nop

08010d20 <_ControlModeCommand_Request__cdr_serialize>:
 8010d20:	b180      	cbz	r0, 8010d44 <_ControlModeCommand_Request__cdr_serialize+0x24>
 8010d22:	b538      	push	{r3, r4, r5, lr}
 8010d24:	4604      	mov	r4, r0
 8010d26:	460d      	mov	r5, r1
 8010d28:	f000 fc40 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	4629      	mov	r1, r5
 8010d30:	4620      	mov	r0, r4
 8010d32:	685b      	ldr	r3, [r3, #4]
 8010d34:	689b      	ldr	r3, [r3, #8]
 8010d36:	4798      	blx	r3
 8010d38:	7a21      	ldrb	r1, [r4, #8]
 8010d3a:	4628      	mov	r0, r5
 8010d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d40:	f000 bc66 	b.w	8011610 <ucdr_serialize_uint8_t>
 8010d44:	4770      	bx	lr
 8010d46:	bf00      	nop

08010d48 <_ControlModeCommand_Response__cdr_serialize>:
 8010d48:	460a      	mov	r2, r1
 8010d4a:	b118      	cbz	r0, 8010d54 <_ControlModeCommand_Response__cdr_serialize+0xc>
 8010d4c:	7801      	ldrb	r1, [r0, #0]
 8010d4e:	4610      	mov	r0, r2
 8010d50:	f000 bc30 	b.w	80115b4 <ucdr_serialize_bool>
 8010d54:	4770      	bx	lr
 8010d56:	bf00      	nop

08010d58 <_ControlModeCommand_Response__get_serialized_size>:
 8010d58:	b130      	cbz	r0, 8010d68 <_ControlModeCommand_Response__get_serialized_size+0x10>
 8010d5a:	2101      	movs	r1, #1
 8010d5c:	2000      	movs	r0, #0
 8010d5e:	b508      	push	{r3, lr}
 8010d60:	f001 fae6 	bl	8012330 <ucdr_alignment>
 8010d64:	3001      	adds	r0, #1
 8010d66:	bd08      	pop	{r3, pc}
 8010d68:	4770      	bx	lr
 8010d6a:	bf00      	nop

08010d6c <_ControlModeCommand_Request__get_serialized_size>:
 8010d6c:	b150      	cbz	r0, 8010d84 <_ControlModeCommand_Request__get_serialized_size+0x18>
 8010d6e:	2100      	movs	r1, #0
 8010d70:	b510      	push	{r4, lr}
 8010d72:	f000 fbb7 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010d76:	4604      	mov	r4, r0
 8010d78:	2101      	movs	r1, #1
 8010d7a:	f001 fad9 	bl	8012330 <ucdr_alignment>
 8010d7e:	4420      	add	r0, r4
 8010d80:	3001      	adds	r0, #1
 8010d82:	bd10      	pop	{r4, pc}
 8010d84:	4770      	bx	lr
 8010d86:	bf00      	nop

08010d88 <_ControlModeCommand_Request__max_serialized_size>:
 8010d88:	b510      	push	{r4, lr}
 8010d8a:	b082      	sub	sp, #8
 8010d8c:	2401      	movs	r4, #1
 8010d8e:	2100      	movs	r1, #0
 8010d90:	f10d 0007 	add.w	r0, sp, #7
 8010d94:	f88d 4007 	strb.w	r4, [sp, #7]
 8010d98:	f000 fbf4 	bl	8011584 <max_serialized_size_builtin_interfaces__msg__Time>
 8010d9c:	4621      	mov	r1, r4
 8010d9e:	4604      	mov	r4, r0
 8010da0:	f001 fac6 	bl	8012330 <ucdr_alignment>
 8010da4:	4420      	add	r0, r4
 8010da6:	3001      	adds	r0, #1
 8010da8:	b002      	add	sp, #8
 8010daa:	bd10      	pop	{r4, pc}

08010dac <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand>:
 8010dac:	4800      	ldr	r0, [pc, #0]	@ (8010db0 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x4>)
 8010dae:	4770      	bx	lr
 8010db0:	24000a20 	.word	0x24000a20

08010db4 <get_serialized_size_autoware_auto_vehicle_msgs__msg__ControlModeReport>:
 8010db4:	b538      	push	{r3, r4, r5, lr}
 8010db6:	b158      	cbz	r0, 8010dd0 <get_serialized_size_autoware_auto_vehicle_msgs__msg__ControlModeReport+0x1c>
 8010db8:	460d      	mov	r5, r1
 8010dba:	f000 fb93 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010dbe:	2101      	movs	r1, #1
 8010dc0:	182c      	adds	r4, r5, r0
 8010dc2:	f1c5 0501 	rsb	r5, r5, #1
 8010dc6:	4620      	mov	r0, r4
 8010dc8:	f001 fab2 	bl	8012330 <ucdr_alignment>
 8010dcc:	4428      	add	r0, r5
 8010dce:	4420      	add	r0, r4
 8010dd0:	bd38      	pop	{r3, r4, r5, pc}
 8010dd2:	bf00      	nop

08010dd4 <_ControlModeReport__cdr_deserialize>:
 8010dd4:	b538      	push	{r3, r4, r5, lr}
 8010dd6:	460c      	mov	r4, r1
 8010dd8:	b179      	cbz	r1, 8010dfa <_ControlModeReport__cdr_deserialize+0x26>
 8010dda:	4605      	mov	r5, r0
 8010ddc:	f000 fbe6 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010de0:	4603      	mov	r3, r0
 8010de2:	4621      	mov	r1, r4
 8010de4:	4628      	mov	r0, r5
 8010de6:	685b      	ldr	r3, [r3, #4]
 8010de8:	68db      	ldr	r3, [r3, #12]
 8010dea:	4798      	blx	r3
 8010dec:	f104 0108 	add.w	r1, r4, #8
 8010df0:	4628      	mov	r0, r5
 8010df2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010df6:	f000 bc21 	b.w	801163c <ucdr_deserialize_uint8_t>
 8010dfa:	4608      	mov	r0, r1
 8010dfc:	bd38      	pop	{r3, r4, r5, pc}
 8010dfe:	bf00      	nop

08010e00 <_ControlModeReport__cdr_serialize>:
 8010e00:	b180      	cbz	r0, 8010e24 <_ControlModeReport__cdr_serialize+0x24>
 8010e02:	b538      	push	{r3, r4, r5, lr}
 8010e04:	4604      	mov	r4, r0
 8010e06:	460d      	mov	r5, r1
 8010e08:	f000 fbd0 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	4629      	mov	r1, r5
 8010e10:	4620      	mov	r0, r4
 8010e12:	685b      	ldr	r3, [r3, #4]
 8010e14:	689b      	ldr	r3, [r3, #8]
 8010e16:	4798      	blx	r3
 8010e18:	7a21      	ldrb	r1, [r4, #8]
 8010e1a:	4628      	mov	r0, r5
 8010e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e20:	f000 bbf6 	b.w	8011610 <ucdr_serialize_uint8_t>
 8010e24:	4770      	bx	lr
 8010e26:	bf00      	nop

08010e28 <_ControlModeReport__get_serialized_size>:
 8010e28:	b150      	cbz	r0, 8010e40 <_ControlModeReport__get_serialized_size+0x18>
 8010e2a:	2100      	movs	r1, #0
 8010e2c:	b510      	push	{r4, lr}
 8010e2e:	f000 fb59 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010e32:	4604      	mov	r4, r0
 8010e34:	2101      	movs	r1, #1
 8010e36:	f001 fa7b 	bl	8012330 <ucdr_alignment>
 8010e3a:	4420      	add	r0, r4
 8010e3c:	3001      	adds	r0, #1
 8010e3e:	bd10      	pop	{r4, pc}
 8010e40:	4770      	bx	lr
 8010e42:	bf00      	nop

08010e44 <_ControlModeReport__max_serialized_size>:
 8010e44:	b510      	push	{r4, lr}
 8010e46:	b082      	sub	sp, #8
 8010e48:	2401      	movs	r4, #1
 8010e4a:	2100      	movs	r1, #0
 8010e4c:	f10d 0007 	add.w	r0, sp, #7
 8010e50:	f88d 4007 	strb.w	r4, [sp, #7]
 8010e54:	f000 fb96 	bl	8011584 <max_serialized_size_builtin_interfaces__msg__Time>
 8010e58:	4621      	mov	r1, r4
 8010e5a:	4604      	mov	r4, r0
 8010e5c:	f001 fa68 	bl	8012330 <ucdr_alignment>
 8010e60:	4420      	add	r0, r4
 8010e62:	3001      	adds	r0, #1
 8010e64:	b002      	add	sp, #8
 8010e66:	bd10      	pop	{r4, pc}

08010e68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport>:
 8010e68:	4800      	ldr	r0, [pc, #0]	@ (8010e6c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x4>)
 8010e6a:	4770      	bx	lr
 8010e6c:	24000a7c 	.word	0x24000a7c

08010e70 <get_serialized_size_autoware_auto_vehicle_msgs__msg__GearCommand>:
 8010e70:	b538      	push	{r3, r4, r5, lr}
 8010e72:	b158      	cbz	r0, 8010e8c <get_serialized_size_autoware_auto_vehicle_msgs__msg__GearCommand+0x1c>
 8010e74:	460d      	mov	r5, r1
 8010e76:	f000 fb35 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010e7a:	2101      	movs	r1, #1
 8010e7c:	182c      	adds	r4, r5, r0
 8010e7e:	f1c5 0501 	rsb	r5, r5, #1
 8010e82:	4620      	mov	r0, r4
 8010e84:	f001 fa54 	bl	8012330 <ucdr_alignment>
 8010e88:	4428      	add	r0, r5
 8010e8a:	4420      	add	r0, r4
 8010e8c:	bd38      	pop	{r3, r4, r5, pc}
 8010e8e:	bf00      	nop

08010e90 <_GearCommand__cdr_deserialize>:
 8010e90:	b538      	push	{r3, r4, r5, lr}
 8010e92:	460c      	mov	r4, r1
 8010e94:	b179      	cbz	r1, 8010eb6 <_GearCommand__cdr_deserialize+0x26>
 8010e96:	4605      	mov	r5, r0
 8010e98:	f000 fb88 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	4621      	mov	r1, r4
 8010ea0:	4628      	mov	r0, r5
 8010ea2:	685b      	ldr	r3, [r3, #4]
 8010ea4:	68db      	ldr	r3, [r3, #12]
 8010ea6:	4798      	blx	r3
 8010ea8:	f104 0108 	add.w	r1, r4, #8
 8010eac:	4628      	mov	r0, r5
 8010eae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010eb2:	f000 bbc3 	b.w	801163c <ucdr_deserialize_uint8_t>
 8010eb6:	4608      	mov	r0, r1
 8010eb8:	bd38      	pop	{r3, r4, r5, pc}
 8010eba:	bf00      	nop

08010ebc <_GearCommand__cdr_serialize>:
 8010ebc:	b180      	cbz	r0, 8010ee0 <_GearCommand__cdr_serialize+0x24>
 8010ebe:	b538      	push	{r3, r4, r5, lr}
 8010ec0:	4604      	mov	r4, r0
 8010ec2:	460d      	mov	r5, r1
 8010ec4:	f000 fb72 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	4629      	mov	r1, r5
 8010ecc:	4620      	mov	r0, r4
 8010ece:	685b      	ldr	r3, [r3, #4]
 8010ed0:	689b      	ldr	r3, [r3, #8]
 8010ed2:	4798      	blx	r3
 8010ed4:	7a21      	ldrb	r1, [r4, #8]
 8010ed6:	4628      	mov	r0, r5
 8010ed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010edc:	f000 bb98 	b.w	8011610 <ucdr_serialize_uint8_t>
 8010ee0:	4770      	bx	lr
 8010ee2:	bf00      	nop

08010ee4 <_GearCommand__get_serialized_size>:
 8010ee4:	b150      	cbz	r0, 8010efc <_GearCommand__get_serialized_size+0x18>
 8010ee6:	2100      	movs	r1, #0
 8010ee8:	b510      	push	{r4, lr}
 8010eea:	f000 fafb 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010eee:	4604      	mov	r4, r0
 8010ef0:	2101      	movs	r1, #1
 8010ef2:	f001 fa1d 	bl	8012330 <ucdr_alignment>
 8010ef6:	4420      	add	r0, r4
 8010ef8:	3001      	adds	r0, #1
 8010efa:	bd10      	pop	{r4, pc}
 8010efc:	4770      	bx	lr
 8010efe:	bf00      	nop

08010f00 <_GearCommand__max_serialized_size>:
 8010f00:	b510      	push	{r4, lr}
 8010f02:	b082      	sub	sp, #8
 8010f04:	2401      	movs	r4, #1
 8010f06:	2100      	movs	r1, #0
 8010f08:	f10d 0007 	add.w	r0, sp, #7
 8010f0c:	f88d 4007 	strb.w	r4, [sp, #7]
 8010f10:	f000 fb38 	bl	8011584 <max_serialized_size_builtin_interfaces__msg__Time>
 8010f14:	4621      	mov	r1, r4
 8010f16:	4604      	mov	r4, r0
 8010f18:	f001 fa0a 	bl	8012330 <ucdr_alignment>
 8010f1c:	4420      	add	r0, r4
 8010f1e:	3001      	adds	r0, #1
 8010f20:	b002      	add	sp, #8
 8010f22:	bd10      	pop	{r4, pc}

08010f24 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand>:
 8010f24:	4800      	ldr	r0, [pc, #0]	@ (8010f28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x4>)
 8010f26:	4770      	bx	lr
 8010f28:	24000aa4 	.word	0x24000aa4

08010f2c <get_serialized_size_autoware_auto_vehicle_msgs__msg__GearReport>:
 8010f2c:	b538      	push	{r3, r4, r5, lr}
 8010f2e:	b158      	cbz	r0, 8010f48 <get_serialized_size_autoware_auto_vehicle_msgs__msg__GearReport+0x1c>
 8010f30:	460d      	mov	r5, r1
 8010f32:	f000 fad7 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010f36:	2101      	movs	r1, #1
 8010f38:	182c      	adds	r4, r5, r0
 8010f3a:	f1c5 0501 	rsb	r5, r5, #1
 8010f3e:	4620      	mov	r0, r4
 8010f40:	f001 f9f6 	bl	8012330 <ucdr_alignment>
 8010f44:	4428      	add	r0, r5
 8010f46:	4420      	add	r0, r4
 8010f48:	bd38      	pop	{r3, r4, r5, pc}
 8010f4a:	bf00      	nop

08010f4c <_GearReport__cdr_deserialize>:
 8010f4c:	b538      	push	{r3, r4, r5, lr}
 8010f4e:	460c      	mov	r4, r1
 8010f50:	b179      	cbz	r1, 8010f72 <_GearReport__cdr_deserialize+0x26>
 8010f52:	4605      	mov	r5, r0
 8010f54:	f000 fb2a 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010f58:	4603      	mov	r3, r0
 8010f5a:	4621      	mov	r1, r4
 8010f5c:	4628      	mov	r0, r5
 8010f5e:	685b      	ldr	r3, [r3, #4]
 8010f60:	68db      	ldr	r3, [r3, #12]
 8010f62:	4798      	blx	r3
 8010f64:	f104 0108 	add.w	r1, r4, #8
 8010f68:	4628      	mov	r0, r5
 8010f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f6e:	f000 bb65 	b.w	801163c <ucdr_deserialize_uint8_t>
 8010f72:	4608      	mov	r0, r1
 8010f74:	bd38      	pop	{r3, r4, r5, pc}
 8010f76:	bf00      	nop

08010f78 <_GearReport__cdr_serialize>:
 8010f78:	b180      	cbz	r0, 8010f9c <_GearReport__cdr_serialize+0x24>
 8010f7a:	b538      	push	{r3, r4, r5, lr}
 8010f7c:	4604      	mov	r4, r0
 8010f7e:	460d      	mov	r5, r1
 8010f80:	f000 fb14 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010f84:	4603      	mov	r3, r0
 8010f86:	4629      	mov	r1, r5
 8010f88:	4620      	mov	r0, r4
 8010f8a:	685b      	ldr	r3, [r3, #4]
 8010f8c:	689b      	ldr	r3, [r3, #8]
 8010f8e:	4798      	blx	r3
 8010f90:	7a21      	ldrb	r1, [r4, #8]
 8010f92:	4628      	mov	r0, r5
 8010f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f98:	f000 bb3a 	b.w	8011610 <ucdr_serialize_uint8_t>
 8010f9c:	4770      	bx	lr
 8010f9e:	bf00      	nop

08010fa0 <_GearReport__get_serialized_size>:
 8010fa0:	b150      	cbz	r0, 8010fb8 <_GearReport__get_serialized_size+0x18>
 8010fa2:	2100      	movs	r1, #0
 8010fa4:	b510      	push	{r4, lr}
 8010fa6:	f000 fa9d 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010faa:	4604      	mov	r4, r0
 8010fac:	2101      	movs	r1, #1
 8010fae:	f001 f9bf 	bl	8012330 <ucdr_alignment>
 8010fb2:	4420      	add	r0, r4
 8010fb4:	3001      	adds	r0, #1
 8010fb6:	bd10      	pop	{r4, pc}
 8010fb8:	4770      	bx	lr
 8010fba:	bf00      	nop

08010fbc <_GearReport__max_serialized_size>:
 8010fbc:	b510      	push	{r4, lr}
 8010fbe:	b082      	sub	sp, #8
 8010fc0:	2401      	movs	r4, #1
 8010fc2:	2100      	movs	r1, #0
 8010fc4:	f10d 0007 	add.w	r0, sp, #7
 8010fc8:	f88d 4007 	strb.w	r4, [sp, #7]
 8010fcc:	f000 fada 	bl	8011584 <max_serialized_size_builtin_interfaces__msg__Time>
 8010fd0:	4621      	mov	r1, r4
 8010fd2:	4604      	mov	r4, r0
 8010fd4:	f001 f9ac 	bl	8012330 <ucdr_alignment>
 8010fd8:	4420      	add	r0, r4
 8010fda:	3001      	adds	r0, #1
 8010fdc:	b002      	add	sp, #8
 8010fde:	bd10      	pop	{r4, pc}

08010fe0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport>:
 8010fe0:	4800      	ldr	r0, [pc, #0]	@ (8010fe4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x4>)
 8010fe2:	4770      	bx	lr
 8010fe4:	24000acc 	.word	0x24000acc

08010fe8 <get_serialized_size_autoware_auto_vehicle_msgs__msg__HazardLightsCommand>:
 8010fe8:	b538      	push	{r3, r4, r5, lr}
 8010fea:	b158      	cbz	r0, 8011004 <get_serialized_size_autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x1c>
 8010fec:	460d      	mov	r5, r1
 8010fee:	f000 fa79 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010ff2:	2101      	movs	r1, #1
 8010ff4:	182c      	adds	r4, r5, r0
 8010ff6:	f1c5 0501 	rsb	r5, r5, #1
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	f001 f998 	bl	8012330 <ucdr_alignment>
 8011000:	4428      	add	r0, r5
 8011002:	4420      	add	r0, r4
 8011004:	bd38      	pop	{r3, r4, r5, pc}
 8011006:	bf00      	nop

08011008 <_HazardLightsCommand__cdr_deserialize>:
 8011008:	b538      	push	{r3, r4, r5, lr}
 801100a:	460c      	mov	r4, r1
 801100c:	b179      	cbz	r1, 801102e <_HazardLightsCommand__cdr_deserialize+0x26>
 801100e:	4605      	mov	r5, r0
 8011010:	f000 facc 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011014:	4603      	mov	r3, r0
 8011016:	4621      	mov	r1, r4
 8011018:	4628      	mov	r0, r5
 801101a:	685b      	ldr	r3, [r3, #4]
 801101c:	68db      	ldr	r3, [r3, #12]
 801101e:	4798      	blx	r3
 8011020:	f104 0108 	add.w	r1, r4, #8
 8011024:	4628      	mov	r0, r5
 8011026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801102a:	f000 bb07 	b.w	801163c <ucdr_deserialize_uint8_t>
 801102e:	4608      	mov	r0, r1
 8011030:	bd38      	pop	{r3, r4, r5, pc}
 8011032:	bf00      	nop

08011034 <_HazardLightsCommand__cdr_serialize>:
 8011034:	b180      	cbz	r0, 8011058 <_HazardLightsCommand__cdr_serialize+0x24>
 8011036:	b538      	push	{r3, r4, r5, lr}
 8011038:	4604      	mov	r4, r0
 801103a:	460d      	mov	r5, r1
 801103c:	f000 fab6 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011040:	4603      	mov	r3, r0
 8011042:	4629      	mov	r1, r5
 8011044:	4620      	mov	r0, r4
 8011046:	685b      	ldr	r3, [r3, #4]
 8011048:	689b      	ldr	r3, [r3, #8]
 801104a:	4798      	blx	r3
 801104c:	7a21      	ldrb	r1, [r4, #8]
 801104e:	4628      	mov	r0, r5
 8011050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011054:	f000 badc 	b.w	8011610 <ucdr_serialize_uint8_t>
 8011058:	4770      	bx	lr
 801105a:	bf00      	nop

0801105c <_HazardLightsCommand__get_serialized_size>:
 801105c:	b150      	cbz	r0, 8011074 <_HazardLightsCommand__get_serialized_size+0x18>
 801105e:	2100      	movs	r1, #0
 8011060:	b510      	push	{r4, lr}
 8011062:	f000 fa3f 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8011066:	4604      	mov	r4, r0
 8011068:	2101      	movs	r1, #1
 801106a:	f001 f961 	bl	8012330 <ucdr_alignment>
 801106e:	4420      	add	r0, r4
 8011070:	3001      	adds	r0, #1
 8011072:	bd10      	pop	{r4, pc}
 8011074:	4770      	bx	lr
 8011076:	bf00      	nop

08011078 <_HazardLightsCommand__max_serialized_size>:
 8011078:	b510      	push	{r4, lr}
 801107a:	b082      	sub	sp, #8
 801107c:	2401      	movs	r4, #1
 801107e:	2100      	movs	r1, #0
 8011080:	f10d 0007 	add.w	r0, sp, #7
 8011084:	f88d 4007 	strb.w	r4, [sp, #7]
 8011088:	f000 fa7c 	bl	8011584 <max_serialized_size_builtin_interfaces__msg__Time>
 801108c:	4621      	mov	r1, r4
 801108e:	4604      	mov	r4, r0
 8011090:	f001 f94e 	bl	8012330 <ucdr_alignment>
 8011094:	4420      	add	r0, r4
 8011096:	3001      	adds	r0, #1
 8011098:	b002      	add	sp, #8
 801109a:	bd10      	pop	{r4, pc}

0801109c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand>:
 801109c:	4800      	ldr	r0, [pc, #0]	@ (80110a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x4>)
 801109e:	4770      	bx	lr
 80110a0:	24000af4 	.word	0x24000af4

080110a4 <get_serialized_size_autoware_auto_vehicle_msgs__msg__HazardLightsReport>:
 80110a4:	b538      	push	{r3, r4, r5, lr}
 80110a6:	b158      	cbz	r0, 80110c0 <get_serialized_size_autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x1c>
 80110a8:	460d      	mov	r5, r1
 80110aa:	f000 fa1b 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 80110ae:	2101      	movs	r1, #1
 80110b0:	182c      	adds	r4, r5, r0
 80110b2:	f1c5 0501 	rsb	r5, r5, #1
 80110b6:	4620      	mov	r0, r4
 80110b8:	f001 f93a 	bl	8012330 <ucdr_alignment>
 80110bc:	4428      	add	r0, r5
 80110be:	4420      	add	r0, r4
 80110c0:	bd38      	pop	{r3, r4, r5, pc}
 80110c2:	bf00      	nop

080110c4 <_HazardLightsReport__cdr_deserialize>:
 80110c4:	b538      	push	{r3, r4, r5, lr}
 80110c6:	460c      	mov	r4, r1
 80110c8:	b179      	cbz	r1, 80110ea <_HazardLightsReport__cdr_deserialize+0x26>
 80110ca:	4605      	mov	r5, r0
 80110cc:	f000 fa6e 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80110d0:	4603      	mov	r3, r0
 80110d2:	4621      	mov	r1, r4
 80110d4:	4628      	mov	r0, r5
 80110d6:	685b      	ldr	r3, [r3, #4]
 80110d8:	68db      	ldr	r3, [r3, #12]
 80110da:	4798      	blx	r3
 80110dc:	f104 0108 	add.w	r1, r4, #8
 80110e0:	4628      	mov	r0, r5
 80110e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110e6:	f000 baa9 	b.w	801163c <ucdr_deserialize_uint8_t>
 80110ea:	4608      	mov	r0, r1
 80110ec:	bd38      	pop	{r3, r4, r5, pc}
 80110ee:	bf00      	nop

080110f0 <_HazardLightsReport__cdr_serialize>:
 80110f0:	b180      	cbz	r0, 8011114 <_HazardLightsReport__cdr_serialize+0x24>
 80110f2:	b538      	push	{r3, r4, r5, lr}
 80110f4:	4604      	mov	r4, r0
 80110f6:	460d      	mov	r5, r1
 80110f8:	f000 fa58 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80110fc:	4603      	mov	r3, r0
 80110fe:	4629      	mov	r1, r5
 8011100:	4620      	mov	r0, r4
 8011102:	685b      	ldr	r3, [r3, #4]
 8011104:	689b      	ldr	r3, [r3, #8]
 8011106:	4798      	blx	r3
 8011108:	7a21      	ldrb	r1, [r4, #8]
 801110a:	4628      	mov	r0, r5
 801110c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011110:	f000 ba7e 	b.w	8011610 <ucdr_serialize_uint8_t>
 8011114:	4770      	bx	lr
 8011116:	bf00      	nop

08011118 <_HazardLightsReport__get_serialized_size>:
 8011118:	b150      	cbz	r0, 8011130 <_HazardLightsReport__get_serialized_size+0x18>
 801111a:	2100      	movs	r1, #0
 801111c:	b510      	push	{r4, lr}
 801111e:	f000 f9e1 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8011122:	4604      	mov	r4, r0
 8011124:	2101      	movs	r1, #1
 8011126:	f001 f903 	bl	8012330 <ucdr_alignment>
 801112a:	4420      	add	r0, r4
 801112c:	3001      	adds	r0, #1
 801112e:	bd10      	pop	{r4, pc}
 8011130:	4770      	bx	lr
 8011132:	bf00      	nop

08011134 <_HazardLightsReport__max_serialized_size>:
 8011134:	b510      	push	{r4, lr}
 8011136:	b082      	sub	sp, #8
 8011138:	2401      	movs	r4, #1
 801113a:	2100      	movs	r1, #0
 801113c:	f10d 0007 	add.w	r0, sp, #7
 8011140:	f88d 4007 	strb.w	r4, [sp, #7]
 8011144:	f000 fa1e 	bl	8011584 <max_serialized_size_builtin_interfaces__msg__Time>
 8011148:	4621      	mov	r1, r4
 801114a:	4604      	mov	r4, r0
 801114c:	f001 f8f0 	bl	8012330 <ucdr_alignment>
 8011150:	4420      	add	r0, r4
 8011152:	3001      	adds	r0, #1
 8011154:	b002      	add	sp, #8
 8011156:	bd10      	pop	{r4, pc}

08011158 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport>:
 8011158:	4800      	ldr	r0, [pc, #0]	@ (801115c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x4>)
 801115a:	4770      	bx	lr
 801115c:	24000b1c 	.word	0x24000b1c

08011160 <get_serialized_size_autoware_auto_vehicle_msgs__msg__SteeringReport>:
 8011160:	b538      	push	{r3, r4, r5, lr}
 8011162:	b158      	cbz	r0, 801117c <get_serialized_size_autoware_auto_vehicle_msgs__msg__SteeringReport+0x1c>
 8011164:	460d      	mov	r5, r1
 8011166:	f000 f9bd 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 801116a:	2104      	movs	r1, #4
 801116c:	182c      	adds	r4, r5, r0
 801116e:	f1c5 0504 	rsb	r5, r5, #4
 8011172:	4620      	mov	r0, r4
 8011174:	f001 f8dc 	bl	8012330 <ucdr_alignment>
 8011178:	4428      	add	r0, r5
 801117a:	4420      	add	r0, r4
 801117c:	bd38      	pop	{r3, r4, r5, pc}
 801117e:	bf00      	nop

08011180 <_SteeringReport__cdr_deserialize>:
 8011180:	b538      	push	{r3, r4, r5, lr}
 8011182:	460c      	mov	r4, r1
 8011184:	b179      	cbz	r1, 80111a6 <_SteeringReport__cdr_deserialize+0x26>
 8011186:	4605      	mov	r5, r0
 8011188:	f000 fa10 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801118c:	4603      	mov	r3, r0
 801118e:	4621      	mov	r1, r4
 8011190:	4628      	mov	r0, r5
 8011192:	685b      	ldr	r3, [r3, #4]
 8011194:	68db      	ldr	r3, [r3, #12]
 8011196:	4798      	blx	r3
 8011198:	f104 0108 	add.w	r1, r4, #8
 801119c:	4628      	mov	r0, r5
 801119e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111a2:	f000 be77 	b.w	8011e94 <ucdr_deserialize_float>
 80111a6:	4608      	mov	r0, r1
 80111a8:	bd38      	pop	{r3, r4, r5, pc}
 80111aa:	bf00      	nop

080111ac <_SteeringReport__cdr_serialize>:
 80111ac:	b188      	cbz	r0, 80111d2 <_SteeringReport__cdr_serialize+0x26>
 80111ae:	b538      	push	{r3, r4, r5, lr}
 80111b0:	4604      	mov	r4, r0
 80111b2:	460d      	mov	r5, r1
 80111b4:	f000 f9fa 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80111b8:	4603      	mov	r3, r0
 80111ba:	4629      	mov	r1, r5
 80111bc:	4620      	mov	r0, r4
 80111be:	685b      	ldr	r3, [r3, #4]
 80111c0:	689b      	ldr	r3, [r3, #8]
 80111c2:	4798      	blx	r3
 80111c4:	ed94 0a02 	vldr	s0, [r4, #8]
 80111c8:	4628      	mov	r0, r5
 80111ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111ce:	f000 bdc9 	b.w	8011d64 <ucdr_serialize_float>
 80111d2:	4770      	bx	lr

080111d4 <_SteeringReport__get_serialized_size>:
 80111d4:	b150      	cbz	r0, 80111ec <_SteeringReport__get_serialized_size+0x18>
 80111d6:	2100      	movs	r1, #0
 80111d8:	b510      	push	{r4, lr}
 80111da:	f000 f983 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 80111de:	4604      	mov	r4, r0
 80111e0:	2104      	movs	r1, #4
 80111e2:	f001 f8a5 	bl	8012330 <ucdr_alignment>
 80111e6:	4420      	add	r0, r4
 80111e8:	3004      	adds	r0, #4
 80111ea:	bd10      	pop	{r4, pc}
 80111ec:	4770      	bx	lr
 80111ee:	bf00      	nop

080111f0 <_SteeringReport__max_serialized_size>:
 80111f0:	b510      	push	{r4, lr}
 80111f2:	b082      	sub	sp, #8
 80111f4:	2301      	movs	r3, #1
 80111f6:	2100      	movs	r1, #0
 80111f8:	f10d 0007 	add.w	r0, sp, #7
 80111fc:	f88d 3007 	strb.w	r3, [sp, #7]
 8011200:	f000 f9c0 	bl	8011584 <max_serialized_size_builtin_interfaces__msg__Time>
 8011204:	4604      	mov	r4, r0
 8011206:	2104      	movs	r1, #4
 8011208:	f001 f892 	bl	8012330 <ucdr_alignment>
 801120c:	4420      	add	r0, r4
 801120e:	3004      	adds	r0, #4
 8011210:	b002      	add	sp, #8
 8011212:	bd10      	pop	{r4, pc}

08011214 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport>:
 8011214:	4800      	ldr	r0, [pc, #0]	@ (8011218 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x4>)
 8011216:	4770      	bx	lr
 8011218:	24000b44 	.word	0x24000b44

0801121c <get_serialized_size_autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>:
 801121c:	b538      	push	{r3, r4, r5, lr}
 801121e:	b158      	cbz	r0, 8011238 <get_serialized_size_autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x1c>
 8011220:	460d      	mov	r5, r1
 8011222:	f000 f95f 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8011226:	2101      	movs	r1, #1
 8011228:	182c      	adds	r4, r5, r0
 801122a:	f1c5 0501 	rsb	r5, r5, #1
 801122e:	4620      	mov	r0, r4
 8011230:	f001 f87e 	bl	8012330 <ucdr_alignment>
 8011234:	4428      	add	r0, r5
 8011236:	4420      	add	r0, r4
 8011238:	bd38      	pop	{r3, r4, r5, pc}
 801123a:	bf00      	nop

0801123c <_TurnIndicatorsCommand__cdr_deserialize>:
 801123c:	b538      	push	{r3, r4, r5, lr}
 801123e:	460c      	mov	r4, r1
 8011240:	b179      	cbz	r1, 8011262 <_TurnIndicatorsCommand__cdr_deserialize+0x26>
 8011242:	4605      	mov	r5, r0
 8011244:	f000 f9b2 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011248:	4603      	mov	r3, r0
 801124a:	4621      	mov	r1, r4
 801124c:	4628      	mov	r0, r5
 801124e:	685b      	ldr	r3, [r3, #4]
 8011250:	68db      	ldr	r3, [r3, #12]
 8011252:	4798      	blx	r3
 8011254:	f104 0108 	add.w	r1, r4, #8
 8011258:	4628      	mov	r0, r5
 801125a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801125e:	f000 b9ed 	b.w	801163c <ucdr_deserialize_uint8_t>
 8011262:	4608      	mov	r0, r1
 8011264:	bd38      	pop	{r3, r4, r5, pc}
 8011266:	bf00      	nop

08011268 <_TurnIndicatorsCommand__cdr_serialize>:
 8011268:	b180      	cbz	r0, 801128c <_TurnIndicatorsCommand__cdr_serialize+0x24>
 801126a:	b538      	push	{r3, r4, r5, lr}
 801126c:	4604      	mov	r4, r0
 801126e:	460d      	mov	r5, r1
 8011270:	f000 f99c 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011274:	4603      	mov	r3, r0
 8011276:	4629      	mov	r1, r5
 8011278:	4620      	mov	r0, r4
 801127a:	685b      	ldr	r3, [r3, #4]
 801127c:	689b      	ldr	r3, [r3, #8]
 801127e:	4798      	blx	r3
 8011280:	7a21      	ldrb	r1, [r4, #8]
 8011282:	4628      	mov	r0, r5
 8011284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011288:	f000 b9c2 	b.w	8011610 <ucdr_serialize_uint8_t>
 801128c:	4770      	bx	lr
 801128e:	bf00      	nop

08011290 <_TurnIndicatorsCommand__get_serialized_size>:
 8011290:	b150      	cbz	r0, 80112a8 <_TurnIndicatorsCommand__get_serialized_size+0x18>
 8011292:	2100      	movs	r1, #0
 8011294:	b510      	push	{r4, lr}
 8011296:	f000 f925 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 801129a:	4604      	mov	r4, r0
 801129c:	2101      	movs	r1, #1
 801129e:	f001 f847 	bl	8012330 <ucdr_alignment>
 80112a2:	4420      	add	r0, r4
 80112a4:	3001      	adds	r0, #1
 80112a6:	bd10      	pop	{r4, pc}
 80112a8:	4770      	bx	lr
 80112aa:	bf00      	nop

080112ac <_TurnIndicatorsCommand__max_serialized_size>:
 80112ac:	b510      	push	{r4, lr}
 80112ae:	b082      	sub	sp, #8
 80112b0:	2401      	movs	r4, #1
 80112b2:	2100      	movs	r1, #0
 80112b4:	f10d 0007 	add.w	r0, sp, #7
 80112b8:	f88d 4007 	strb.w	r4, [sp, #7]
 80112bc:	f000 f962 	bl	8011584 <max_serialized_size_builtin_interfaces__msg__Time>
 80112c0:	4621      	mov	r1, r4
 80112c2:	4604      	mov	r4, r0
 80112c4:	f001 f834 	bl	8012330 <ucdr_alignment>
 80112c8:	4420      	add	r0, r4
 80112ca:	3001      	adds	r0, #1
 80112cc:	b002      	add	sp, #8
 80112ce:	bd10      	pop	{r4, pc}

080112d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>:
 80112d0:	4800      	ldr	r0, [pc, #0]	@ (80112d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x4>)
 80112d2:	4770      	bx	lr
 80112d4:	24000b6c 	.word	0x24000b6c

080112d8 <get_serialized_size_autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>:
 80112d8:	b538      	push	{r3, r4, r5, lr}
 80112da:	b158      	cbz	r0, 80112f4 <get_serialized_size_autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x1c>
 80112dc:	460d      	mov	r5, r1
 80112de:	f000 f901 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 80112e2:	2101      	movs	r1, #1
 80112e4:	182c      	adds	r4, r5, r0
 80112e6:	f1c5 0501 	rsb	r5, r5, #1
 80112ea:	4620      	mov	r0, r4
 80112ec:	f001 f820 	bl	8012330 <ucdr_alignment>
 80112f0:	4428      	add	r0, r5
 80112f2:	4420      	add	r0, r4
 80112f4:	bd38      	pop	{r3, r4, r5, pc}
 80112f6:	bf00      	nop

080112f8 <_TurnIndicatorsReport__cdr_deserialize>:
 80112f8:	b538      	push	{r3, r4, r5, lr}
 80112fa:	460c      	mov	r4, r1
 80112fc:	b179      	cbz	r1, 801131e <_TurnIndicatorsReport__cdr_deserialize+0x26>
 80112fe:	4605      	mov	r5, r0
 8011300:	f000 f954 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011304:	4603      	mov	r3, r0
 8011306:	4621      	mov	r1, r4
 8011308:	4628      	mov	r0, r5
 801130a:	685b      	ldr	r3, [r3, #4]
 801130c:	68db      	ldr	r3, [r3, #12]
 801130e:	4798      	blx	r3
 8011310:	f104 0108 	add.w	r1, r4, #8
 8011314:	4628      	mov	r0, r5
 8011316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801131a:	f000 b98f 	b.w	801163c <ucdr_deserialize_uint8_t>
 801131e:	4608      	mov	r0, r1
 8011320:	bd38      	pop	{r3, r4, r5, pc}
 8011322:	bf00      	nop

08011324 <_TurnIndicatorsReport__cdr_serialize>:
 8011324:	b180      	cbz	r0, 8011348 <_TurnIndicatorsReport__cdr_serialize+0x24>
 8011326:	b538      	push	{r3, r4, r5, lr}
 8011328:	4604      	mov	r4, r0
 801132a:	460d      	mov	r5, r1
 801132c:	f000 f93e 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011330:	4603      	mov	r3, r0
 8011332:	4629      	mov	r1, r5
 8011334:	4620      	mov	r0, r4
 8011336:	685b      	ldr	r3, [r3, #4]
 8011338:	689b      	ldr	r3, [r3, #8]
 801133a:	4798      	blx	r3
 801133c:	7a21      	ldrb	r1, [r4, #8]
 801133e:	4628      	mov	r0, r5
 8011340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011344:	f000 b964 	b.w	8011610 <ucdr_serialize_uint8_t>
 8011348:	4770      	bx	lr
 801134a:	bf00      	nop

0801134c <_TurnIndicatorsReport__get_serialized_size>:
 801134c:	b150      	cbz	r0, 8011364 <_TurnIndicatorsReport__get_serialized_size+0x18>
 801134e:	2100      	movs	r1, #0
 8011350:	b510      	push	{r4, lr}
 8011352:	f000 f8c7 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8011356:	4604      	mov	r4, r0
 8011358:	2101      	movs	r1, #1
 801135a:	f000 ffe9 	bl	8012330 <ucdr_alignment>
 801135e:	4420      	add	r0, r4
 8011360:	3001      	adds	r0, #1
 8011362:	bd10      	pop	{r4, pc}
 8011364:	4770      	bx	lr
 8011366:	bf00      	nop

08011368 <_TurnIndicatorsReport__max_serialized_size>:
 8011368:	b510      	push	{r4, lr}
 801136a:	b082      	sub	sp, #8
 801136c:	2401      	movs	r4, #1
 801136e:	2100      	movs	r1, #0
 8011370:	f10d 0007 	add.w	r0, sp, #7
 8011374:	f88d 4007 	strb.w	r4, [sp, #7]
 8011378:	f000 f904 	bl	8011584 <max_serialized_size_builtin_interfaces__msg__Time>
 801137c:	4621      	mov	r1, r4
 801137e:	4604      	mov	r4, r0
 8011380:	f000 ffd6 	bl	8012330 <ucdr_alignment>
 8011384:	4420      	add	r0, r4
 8011386:	3001      	adds	r0, #1
 8011388:	b002      	add	sp, #8
 801138a:	bd10      	pop	{r4, pc}

0801138c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>:
 801138c:	4800      	ldr	r0, [pc, #0]	@ (8011390 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x4>)
 801138e:	4770      	bx	lr
 8011390:	24000b94 	.word	0x24000b94

08011394 <get_serialized_size_autoware_auto_vehicle_msgs__msg__VelocityReport>:
 8011394:	b1c8      	cbz	r0, 80113ca <get_serialized_size_autoware_auto_vehicle_msgs__msg__VelocityReport+0x36>
 8011396:	b570      	push	{r4, r5, r6, lr}
 8011398:	460d      	mov	r5, r1
 801139a:	f001 f943 	bl	8012624 <get_serialized_size_std_msgs__msg__Header>
 801139e:	2104      	movs	r1, #4
 80113a0:	182e      	adds	r6, r5, r0
 80113a2:	f1c5 0504 	rsb	r5, r5, #4
 80113a6:	4630      	mov	r0, r6
 80113a8:	f000 ffc2 	bl	8012330 <ucdr_alignment>
 80113ac:	2104      	movs	r1, #4
 80113ae:	1844      	adds	r4, r0, r1
 80113b0:	4434      	add	r4, r6
 80113b2:	4620      	mov	r0, r4
 80113b4:	f000 ffbc 	bl	8012330 <ucdr_alignment>
 80113b8:	2104      	movs	r1, #4
 80113ba:	4408      	add	r0, r1
 80113bc:	4404      	add	r4, r0
 80113be:	4620      	mov	r0, r4
 80113c0:	f000 ffb6 	bl	8012330 <ucdr_alignment>
 80113c4:	4428      	add	r0, r5
 80113c6:	4420      	add	r0, r4
 80113c8:	bd70      	pop	{r4, r5, r6, pc}
 80113ca:	4770      	bx	lr

080113cc <_VelocityReport__cdr_deserialize>:
 80113cc:	b538      	push	{r3, r4, r5, lr}
 80113ce:	460c      	mov	r4, r1
 80113d0:	b1c9      	cbz	r1, 8011406 <_VelocityReport__cdr_deserialize+0x3a>
 80113d2:	4605      	mov	r5, r0
 80113d4:	f001 f9aa 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80113d8:	4603      	mov	r3, r0
 80113da:	4621      	mov	r1, r4
 80113dc:	4628      	mov	r0, r5
 80113de:	685b      	ldr	r3, [r3, #4]
 80113e0:	68db      	ldr	r3, [r3, #12]
 80113e2:	4798      	blx	r3
 80113e4:	f104 0114 	add.w	r1, r4, #20
 80113e8:	4628      	mov	r0, r5
 80113ea:	f000 fd53 	bl	8011e94 <ucdr_deserialize_float>
 80113ee:	f104 0118 	add.w	r1, r4, #24
 80113f2:	4628      	mov	r0, r5
 80113f4:	f000 fd4e 	bl	8011e94 <ucdr_deserialize_float>
 80113f8:	f104 011c 	add.w	r1, r4, #28
 80113fc:	4628      	mov	r0, r5
 80113fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011402:	f000 bd47 	b.w	8011e94 <ucdr_deserialize_float>
 8011406:	4608      	mov	r0, r1
 8011408:	bd38      	pop	{r3, r4, r5, pc}
 801140a:	bf00      	nop

0801140c <_VelocityReport__cdr_serialize>:
 801140c:	b1d8      	cbz	r0, 8011446 <_VelocityReport__cdr_serialize+0x3a>
 801140e:	b538      	push	{r3, r4, r5, lr}
 8011410:	4604      	mov	r4, r0
 8011412:	460d      	mov	r5, r1
 8011414:	f001 f98a 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011418:	4603      	mov	r3, r0
 801141a:	4629      	mov	r1, r5
 801141c:	4620      	mov	r0, r4
 801141e:	685b      	ldr	r3, [r3, #4]
 8011420:	689b      	ldr	r3, [r3, #8]
 8011422:	4798      	blx	r3
 8011424:	ed94 0a05 	vldr	s0, [r4, #20]
 8011428:	4628      	mov	r0, r5
 801142a:	f000 fc9b 	bl	8011d64 <ucdr_serialize_float>
 801142e:	ed94 0a06 	vldr	s0, [r4, #24]
 8011432:	4628      	mov	r0, r5
 8011434:	f000 fc96 	bl	8011d64 <ucdr_serialize_float>
 8011438:	ed94 0a07 	vldr	s0, [r4, #28]
 801143c:	4628      	mov	r0, r5
 801143e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011442:	f000 bc8f 	b.w	8011d64 <ucdr_serialize_float>
 8011446:	4770      	bx	lr

08011448 <_VelocityReport__get_serialized_size>:
 8011448:	b1b0      	cbz	r0, 8011478 <_VelocityReport__get_serialized_size+0x30>
 801144a:	2100      	movs	r1, #0
 801144c:	b510      	push	{r4, lr}
 801144e:	f001 f8e9 	bl	8012624 <get_serialized_size_std_msgs__msg__Header>
 8011452:	4604      	mov	r4, r0
 8011454:	2104      	movs	r1, #4
 8011456:	f000 ff6b 	bl	8012330 <ucdr_alignment>
 801145a:	2104      	movs	r1, #4
 801145c:	4420      	add	r0, r4
 801145e:	1844      	adds	r4, r0, r1
 8011460:	4620      	mov	r0, r4
 8011462:	f000 ff65 	bl	8012330 <ucdr_alignment>
 8011466:	2104      	movs	r1, #4
 8011468:	4408      	add	r0, r1
 801146a:	4404      	add	r4, r0
 801146c:	4620      	mov	r0, r4
 801146e:	f000 ff5f 	bl	8012330 <ucdr_alignment>
 8011472:	3004      	adds	r0, #4
 8011474:	4420      	add	r0, r4
 8011476:	bd10      	pop	{r4, pc}
 8011478:	4770      	bx	lr
 801147a:	bf00      	nop

0801147c <_VelocityReport__max_serialized_size>:
 801147c:	b510      	push	{r4, lr}
 801147e:	b082      	sub	sp, #8
 8011480:	2301      	movs	r3, #1
 8011482:	2100      	movs	r1, #0
 8011484:	f10d 0007 	add.w	r0, sp, #7
 8011488:	f88d 3007 	strb.w	r3, [sp, #7]
 801148c:	f001 f944 	bl	8012718 <max_serialized_size_std_msgs__msg__Header>
 8011490:	4604      	mov	r4, r0
 8011492:	2104      	movs	r1, #4
 8011494:	f000 ff4c 	bl	8012330 <ucdr_alignment>
 8011498:	2104      	movs	r1, #4
 801149a:	4420      	add	r0, r4
 801149c:	1844      	adds	r4, r0, r1
 801149e:	4620      	mov	r0, r4
 80114a0:	f000 ff46 	bl	8012330 <ucdr_alignment>
 80114a4:	2104      	movs	r1, #4
 80114a6:	4408      	add	r0, r1
 80114a8:	4404      	add	r4, r0
 80114aa:	4620      	mov	r0, r4
 80114ac:	f000 ff40 	bl	8012330 <ucdr_alignment>
 80114b0:	3004      	adds	r0, #4
 80114b2:	4420      	add	r0, r4
 80114b4:	b002      	add	sp, #8
 80114b6:	bd10      	pop	{r4, pc}

080114b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport>:
 80114b8:	4800      	ldr	r0, [pc, #0]	@ (80114bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x4>)
 80114ba:	4770      	bx	lr
 80114bc:	24000bbc 	.word	0x24000bbc

080114c0 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 80114c0:	f001 bcd6 	b.w	8012e70 <builtin_interfaces__msg__Time__init>

080114c4 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 80114c4:	f001 bcd8 	b.w	8012e78 <builtin_interfaces__msg__Time__fini>

080114c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 80114c8:	4b04      	ldr	r3, [pc, #16]	@ (80114dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80114ca:	681a      	ldr	r2, [r3, #0]
 80114cc:	b10a      	cbz	r2, 80114d2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 80114ce:	4803      	ldr	r0, [pc, #12]	@ (80114dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80114d0:	4770      	bx	lr
 80114d2:	4a03      	ldr	r2, [pc, #12]	@ (80114e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 80114d4:	4801      	ldr	r0, [pc, #4]	@ (80114dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80114d6:	6812      	ldr	r2, [r2, #0]
 80114d8:	601a      	str	r2, [r3, #0]
 80114da:	4770      	bx	lr
 80114dc:	24000c5c 	.word	0x24000c5c
 80114e0:	24000d2c 	.word	0x24000d2c

080114e4 <get_serialized_size_builtin_interfaces__msg__Time>:
 80114e4:	b180      	cbz	r0, 8011508 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 80114e6:	b538      	push	{r3, r4, r5, lr}
 80114e8:	460d      	mov	r5, r1
 80114ea:	2104      	movs	r1, #4
 80114ec:	4628      	mov	r0, r5
 80114ee:	f000 ff1f 	bl	8012330 <ucdr_alignment>
 80114f2:	1d2b      	adds	r3, r5, #4
 80114f4:	f1c5 0504 	rsb	r5, r5, #4
 80114f8:	2104      	movs	r1, #4
 80114fa:	181c      	adds	r4, r3, r0
 80114fc:	4620      	mov	r0, r4
 80114fe:	f000 ff17 	bl	8012330 <ucdr_alignment>
 8011502:	4428      	add	r0, r5
 8011504:	4420      	add	r0, r4
 8011506:	bd38      	pop	{r3, r4, r5, pc}
 8011508:	4770      	bx	lr
 801150a:	bf00      	nop

0801150c <_Time__cdr_deserialize>:
 801150c:	b538      	push	{r3, r4, r5, lr}
 801150e:	460c      	mov	r4, r1
 8011510:	b141      	cbz	r1, 8011524 <_Time__cdr_deserialize+0x18>
 8011512:	4605      	mov	r5, r0
 8011514:	f000 fb96 	bl	8011c44 <ucdr_deserialize_int32_t>
 8011518:	1d21      	adds	r1, r4, #4
 801151a:	4628      	mov	r0, r5
 801151c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011520:	f000 b9d2 	b.w	80118c8 <ucdr_deserialize_uint32_t>
 8011524:	4608      	mov	r0, r1
 8011526:	bd38      	pop	{r3, r4, r5, pc}

08011528 <_Time__cdr_serialize>:
 8011528:	b160      	cbz	r0, 8011544 <_Time__cdr_serialize+0x1c>
 801152a:	b538      	push	{r3, r4, r5, lr}
 801152c:	460d      	mov	r5, r1
 801152e:	4604      	mov	r4, r0
 8011530:	6801      	ldr	r1, [r0, #0]
 8011532:	4628      	mov	r0, r5
 8011534:	f000 faee 	bl	8011b14 <ucdr_serialize_int32_t>
 8011538:	6861      	ldr	r1, [r4, #4]
 801153a:	4628      	mov	r0, r5
 801153c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011540:	f000 b892 	b.w	8011668 <ucdr_serialize_uint32_t>
 8011544:	4770      	bx	lr
 8011546:	bf00      	nop

08011548 <_Time__get_serialized_size>:
 8011548:	b160      	cbz	r0, 8011564 <_Time__get_serialized_size+0x1c>
 801154a:	2104      	movs	r1, #4
 801154c:	2000      	movs	r0, #0
 801154e:	b510      	push	{r4, lr}
 8011550:	f000 feee 	bl	8012330 <ucdr_alignment>
 8011554:	2104      	movs	r1, #4
 8011556:	1844      	adds	r4, r0, r1
 8011558:	4620      	mov	r0, r4
 801155a:	f000 fee9 	bl	8012330 <ucdr_alignment>
 801155e:	3004      	adds	r0, #4
 8011560:	4420      	add	r0, r4
 8011562:	bd10      	pop	{r4, pc}
 8011564:	4770      	bx	lr
 8011566:	bf00      	nop

08011568 <_Time__max_serialized_size>:
 8011568:	b510      	push	{r4, lr}
 801156a:	2104      	movs	r1, #4
 801156c:	2000      	movs	r0, #0
 801156e:	f000 fedf 	bl	8012330 <ucdr_alignment>
 8011572:	2104      	movs	r1, #4
 8011574:	1844      	adds	r4, r0, r1
 8011576:	4620      	mov	r0, r4
 8011578:	f000 feda 	bl	8012330 <ucdr_alignment>
 801157c:	3004      	adds	r0, #4
 801157e:	4420      	add	r0, r4
 8011580:	bd10      	pop	{r4, pc}
 8011582:	bf00      	nop

08011584 <max_serialized_size_builtin_interfaces__msg__Time>:
 8011584:	b538      	push	{r3, r4, r5, lr}
 8011586:	460c      	mov	r4, r1
 8011588:	2301      	movs	r3, #1
 801158a:	2104      	movs	r1, #4
 801158c:	1d25      	adds	r5, r4, #4
 801158e:	7003      	strb	r3, [r0, #0]
 8011590:	4620      	mov	r0, r4
 8011592:	f1c4 0404 	rsb	r4, r4, #4
 8011596:	f000 fecb 	bl	8012330 <ucdr_alignment>
 801159a:	4405      	add	r5, r0
 801159c:	2104      	movs	r1, #4
 801159e:	4628      	mov	r0, r5
 80115a0:	f000 fec6 	bl	8012330 <ucdr_alignment>
 80115a4:	4420      	add	r0, r4
 80115a6:	4428      	add	r0, r5
 80115a8:	bd38      	pop	{r3, r4, r5, pc}
 80115aa:	bf00      	nop

080115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 80115ac:	4800      	ldr	r0, [pc, #0]	@ (80115b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 80115ae:	4770      	bx	lr
 80115b0:	24000c68 	.word	0x24000c68

080115b4 <ucdr_serialize_bool>:
 80115b4:	b538      	push	{r3, r4, r5, lr}
 80115b6:	460d      	mov	r5, r1
 80115b8:	2101      	movs	r1, #1
 80115ba:	4604      	mov	r4, r0
 80115bc:	f000 fe9c 	bl	80122f8 <ucdr_check_final_buffer_behavior>
 80115c0:	b148      	cbz	r0, 80115d6 <ucdr_serialize_bool+0x22>
 80115c2:	68a3      	ldr	r3, [r4, #8]
 80115c4:	2101      	movs	r1, #1
 80115c6:	701d      	strb	r5, [r3, #0]
 80115c8:	68a2      	ldr	r2, [r4, #8]
 80115ca:	6923      	ldr	r3, [r4, #16]
 80115cc:	440a      	add	r2, r1
 80115ce:	7561      	strb	r1, [r4, #21]
 80115d0:	440b      	add	r3, r1
 80115d2:	60a2      	str	r2, [r4, #8]
 80115d4:	6123      	str	r3, [r4, #16]
 80115d6:	7da0      	ldrb	r0, [r4, #22]
 80115d8:	f080 0001 	eor.w	r0, r0, #1
 80115dc:	bd38      	pop	{r3, r4, r5, pc}
 80115de:	bf00      	nop

080115e0 <ucdr_deserialize_bool>:
 80115e0:	b538      	push	{r3, r4, r5, lr}
 80115e2:	460d      	mov	r5, r1
 80115e4:	2101      	movs	r1, #1
 80115e6:	4604      	mov	r4, r0
 80115e8:	f000 fe86 	bl	80122f8 <ucdr_check_final_buffer_behavior>
 80115ec:	b160      	cbz	r0, 8011608 <ucdr_deserialize_bool+0x28>
 80115ee:	68a2      	ldr	r2, [r4, #8]
 80115f0:	2101      	movs	r1, #1
 80115f2:	6923      	ldr	r3, [r4, #16]
 80115f4:	f812 0b01 	ldrb.w	r0, [r2], #1
 80115f8:	440b      	add	r3, r1
 80115fa:	3800      	subs	r0, #0
 80115fc:	bf18      	it	ne
 80115fe:	2001      	movne	r0, #1
 8011600:	7028      	strb	r0, [r5, #0]
 8011602:	60a2      	str	r2, [r4, #8]
 8011604:	6123      	str	r3, [r4, #16]
 8011606:	7561      	strb	r1, [r4, #21]
 8011608:	7da0      	ldrb	r0, [r4, #22]
 801160a:	f080 0001 	eor.w	r0, r0, #1
 801160e:	bd38      	pop	{r3, r4, r5, pc}

08011610 <ucdr_serialize_uint8_t>:
 8011610:	b538      	push	{r3, r4, r5, lr}
 8011612:	460d      	mov	r5, r1
 8011614:	2101      	movs	r1, #1
 8011616:	4604      	mov	r4, r0
 8011618:	f000 fe6e 	bl	80122f8 <ucdr_check_final_buffer_behavior>
 801161c:	b148      	cbz	r0, 8011632 <ucdr_serialize_uint8_t+0x22>
 801161e:	68a3      	ldr	r3, [r4, #8]
 8011620:	2101      	movs	r1, #1
 8011622:	701d      	strb	r5, [r3, #0]
 8011624:	68a2      	ldr	r2, [r4, #8]
 8011626:	6923      	ldr	r3, [r4, #16]
 8011628:	440a      	add	r2, r1
 801162a:	7561      	strb	r1, [r4, #21]
 801162c:	440b      	add	r3, r1
 801162e:	60a2      	str	r2, [r4, #8]
 8011630:	6123      	str	r3, [r4, #16]
 8011632:	7da0      	ldrb	r0, [r4, #22]
 8011634:	f080 0001 	eor.w	r0, r0, #1
 8011638:	bd38      	pop	{r3, r4, r5, pc}
 801163a:	bf00      	nop

0801163c <ucdr_deserialize_uint8_t>:
 801163c:	b538      	push	{r3, r4, r5, lr}
 801163e:	460d      	mov	r5, r1
 8011640:	2101      	movs	r1, #1
 8011642:	4604      	mov	r4, r0
 8011644:	f000 fe58 	bl	80122f8 <ucdr_check_final_buffer_behavior>
 8011648:	b150      	cbz	r0, 8011660 <ucdr_deserialize_uint8_t+0x24>
 801164a:	68a3      	ldr	r3, [r4, #8]
 801164c:	2101      	movs	r1, #1
 801164e:	781b      	ldrb	r3, [r3, #0]
 8011650:	702b      	strb	r3, [r5, #0]
 8011652:	68a2      	ldr	r2, [r4, #8]
 8011654:	6923      	ldr	r3, [r4, #16]
 8011656:	440a      	add	r2, r1
 8011658:	7561      	strb	r1, [r4, #21]
 801165a:	440b      	add	r3, r1
 801165c:	60a2      	str	r2, [r4, #8]
 801165e:	6123      	str	r3, [r4, #16]
 8011660:	7da0      	ldrb	r0, [r4, #22]
 8011662:	f080 0001 	eor.w	r0, r0, #1
 8011666:	bd38      	pop	{r3, r4, r5, pc}

08011668 <ucdr_serialize_uint32_t>:
 8011668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801166c:	b082      	sub	sp, #8
 801166e:	4604      	mov	r4, r0
 8011670:	9101      	str	r1, [sp, #4]
 8011672:	2104      	movs	r1, #4
 8011674:	f000 fe64 	bl	8012340 <ucdr_buffer_alignment>
 8011678:	4601      	mov	r1, r0
 801167a:	4620      	mov	r0, r4
 801167c:	7d67      	ldrb	r7, [r4, #21]
 801167e:	f000 fea3 	bl	80123c8 <ucdr_advance_buffer>
 8011682:	2104      	movs	r1, #4
 8011684:	4620      	mov	r0, r4
 8011686:	f000 fe2b 	bl	80122e0 <ucdr_check_buffer_available_for>
 801168a:	2800      	cmp	r0, #0
 801168c:	d139      	bne.n	8011702 <ucdr_serialize_uint32_t+0x9a>
 801168e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011692:	42ab      	cmp	r3, r5
 8011694:	d930      	bls.n	80116f8 <ucdr_serialize_uint32_t+0x90>
 8011696:	1b5e      	subs	r6, r3, r5
 8011698:	60a3      	str	r3, [r4, #8]
 801169a:	6923      	ldr	r3, [r4, #16]
 801169c:	4620      	mov	r0, r4
 801169e:	f1c6 0804 	rsb	r8, r6, #4
 80116a2:	4433      	add	r3, r6
 80116a4:	4641      	mov	r1, r8
 80116a6:	6123      	str	r3, [r4, #16]
 80116a8:	f000 fe26 	bl	80122f8 <ucdr_check_final_buffer_behavior>
 80116ac:	2800      	cmp	r0, #0
 80116ae:	d04c      	beq.n	801174a <ucdr_serialize_uint32_t+0xe2>
 80116b0:	7d23      	ldrb	r3, [r4, #20]
 80116b2:	2b01      	cmp	r3, #1
 80116b4:	d063      	beq.n	801177e <ucdr_serialize_uint32_t+0x116>
 80116b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80116ba:	702b      	strb	r3, [r5, #0]
 80116bc:	2e00      	cmp	r6, #0
 80116be:	d051      	beq.n	8011764 <ucdr_serialize_uint32_t+0xfc>
 80116c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80116c4:	2e01      	cmp	r6, #1
 80116c6:	706b      	strb	r3, [r5, #1]
 80116c8:	d050      	beq.n	801176c <ucdr_serialize_uint32_t+0x104>
 80116ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80116ce:	2e02      	cmp	r6, #2
 80116d0:	70ab      	strb	r3, [r5, #2]
 80116d2:	d04f      	beq.n	8011774 <ucdr_serialize_uint32_t+0x10c>
 80116d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80116d8:	70eb      	strb	r3, [r5, #3]
 80116da:	6923      	ldr	r3, [r4, #16]
 80116dc:	2104      	movs	r1, #4
 80116de:	68a2      	ldr	r2, [r4, #8]
 80116e0:	3304      	adds	r3, #4
 80116e2:	7da0      	ldrb	r0, [r4, #22]
 80116e4:	4442      	add	r2, r8
 80116e6:	7561      	strb	r1, [r4, #21]
 80116e8:	1b9e      	subs	r6, r3, r6
 80116ea:	f080 0001 	eor.w	r0, r0, #1
 80116ee:	60a2      	str	r2, [r4, #8]
 80116f0:	6126      	str	r6, [r4, #16]
 80116f2:	b002      	add	sp, #8
 80116f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116f8:	2104      	movs	r1, #4
 80116fa:	4620      	mov	r0, r4
 80116fc:	f000 fdfc 	bl	80122f8 <ucdr_check_final_buffer_behavior>
 8011700:	b1d0      	cbz	r0, 8011738 <ucdr_serialize_uint32_t+0xd0>
 8011702:	7d23      	ldrb	r3, [r4, #20]
 8011704:	2b01      	cmp	r3, #1
 8011706:	68a3      	ldr	r3, [r4, #8]
 8011708:	d01c      	beq.n	8011744 <ucdr_serialize_uint32_t+0xdc>
 801170a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801170e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011712:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011716:	7018      	strb	r0, [r3, #0]
 8011718:	68a3      	ldr	r3, [r4, #8]
 801171a:	705a      	strb	r2, [r3, #1]
 801171c:	68a3      	ldr	r3, [r4, #8]
 801171e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011722:	7099      	strb	r1, [r3, #2]
 8011724:	68a3      	ldr	r3, [r4, #8]
 8011726:	70da      	strb	r2, [r3, #3]
 8011728:	2104      	movs	r1, #4
 801172a:	68a2      	ldr	r2, [r4, #8]
 801172c:	6923      	ldr	r3, [r4, #16]
 801172e:	440a      	add	r2, r1
 8011730:	7561      	strb	r1, [r4, #21]
 8011732:	440b      	add	r3, r1
 8011734:	60a2      	str	r2, [r4, #8]
 8011736:	6123      	str	r3, [r4, #16]
 8011738:	7da0      	ldrb	r0, [r4, #22]
 801173a:	f080 0001 	eor.w	r0, r0, #1
 801173e:	b002      	add	sp, #8
 8011740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011744:	9a01      	ldr	r2, [sp, #4]
 8011746:	601a      	str	r2, [r3, #0]
 8011748:	e7ee      	b.n	8011728 <ucdr_serialize_uint32_t+0xc0>
 801174a:	68a2      	ldr	r2, [r4, #8]
 801174c:	6923      	ldr	r3, [r4, #16]
 801174e:	7da0      	ldrb	r0, [r4, #22]
 8011750:	1b92      	subs	r2, r2, r6
 8011752:	1b9b      	subs	r3, r3, r6
 8011754:	7567      	strb	r7, [r4, #21]
 8011756:	f080 0001 	eor.w	r0, r0, #1
 801175a:	60a2      	str	r2, [r4, #8]
 801175c:	6123      	str	r3, [r4, #16]
 801175e:	b002      	add	sp, #8
 8011760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011764:	68a3      	ldr	r3, [r4, #8]
 8011766:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801176a:	701a      	strb	r2, [r3, #0]
 801176c:	68a3      	ldr	r3, [r4, #8]
 801176e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011772:	701a      	strb	r2, [r3, #0]
 8011774:	68a3      	ldr	r3, [r4, #8]
 8011776:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801177a:	701a      	strb	r2, [r3, #0]
 801177c:	e7ad      	b.n	80116da <ucdr_serialize_uint32_t+0x72>
 801177e:	4628      	mov	r0, r5
 8011780:	ad01      	add	r5, sp, #4
 8011782:	4632      	mov	r2, r6
 8011784:	4629      	mov	r1, r5
 8011786:	f002 fa7a 	bl	8013c7e <memcpy>
 801178a:	4642      	mov	r2, r8
 801178c:	19a9      	adds	r1, r5, r6
 801178e:	68a0      	ldr	r0, [r4, #8]
 8011790:	f002 fa75 	bl	8013c7e <memcpy>
 8011794:	e7a1      	b.n	80116da <ucdr_serialize_uint32_t+0x72>
 8011796:	bf00      	nop

08011798 <ucdr_serialize_endian_uint32_t>:
 8011798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801179c:	4604      	mov	r4, r0
 801179e:	b083      	sub	sp, #12
 80117a0:	460d      	mov	r5, r1
 80117a2:	2104      	movs	r1, #4
 80117a4:	9201      	str	r2, [sp, #4]
 80117a6:	f000 fdcb 	bl	8012340 <ucdr_buffer_alignment>
 80117aa:	4601      	mov	r1, r0
 80117ac:	4620      	mov	r0, r4
 80117ae:	f894 8015 	ldrb.w	r8, [r4, #21]
 80117b2:	f000 fe09 	bl	80123c8 <ucdr_advance_buffer>
 80117b6:	2104      	movs	r1, #4
 80117b8:	4620      	mov	r0, r4
 80117ba:	f000 fd91 	bl	80122e0 <ucdr_check_buffer_available_for>
 80117be:	2800      	cmp	r0, #0
 80117c0:	d138      	bne.n	8011834 <ucdr_serialize_endian_uint32_t+0x9c>
 80117c2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80117c6:	42b7      	cmp	r7, r6
 80117c8:	d92f      	bls.n	801182a <ucdr_serialize_endian_uint32_t+0x92>
 80117ca:	6923      	ldr	r3, [r4, #16]
 80117cc:	4620      	mov	r0, r4
 80117ce:	60a7      	str	r7, [r4, #8]
 80117d0:	1bbf      	subs	r7, r7, r6
 80117d2:	443b      	add	r3, r7
 80117d4:	f1c7 0904 	rsb	r9, r7, #4
 80117d8:	6123      	str	r3, [r4, #16]
 80117da:	4649      	mov	r1, r9
 80117dc:	f000 fd8c 	bl	80122f8 <ucdr_check_final_buffer_behavior>
 80117e0:	2800      	cmp	r0, #0
 80117e2:	d04a      	beq.n	801187a <ucdr_serialize_endian_uint32_t+0xe2>
 80117e4:	2d01      	cmp	r5, #1
 80117e6:	d063      	beq.n	80118b0 <ucdr_serialize_endian_uint32_t+0x118>
 80117e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80117ec:	7033      	strb	r3, [r6, #0]
 80117ee:	2f00      	cmp	r7, #0
 80117f0:	d051      	beq.n	8011896 <ucdr_serialize_endian_uint32_t+0xfe>
 80117f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80117f6:	2f01      	cmp	r7, #1
 80117f8:	7073      	strb	r3, [r6, #1]
 80117fa:	d050      	beq.n	801189e <ucdr_serialize_endian_uint32_t+0x106>
 80117fc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011800:	2f02      	cmp	r7, #2
 8011802:	70b3      	strb	r3, [r6, #2]
 8011804:	d04f      	beq.n	80118a6 <ucdr_serialize_endian_uint32_t+0x10e>
 8011806:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801180a:	70f3      	strb	r3, [r6, #3]
 801180c:	6923      	ldr	r3, [r4, #16]
 801180e:	2104      	movs	r1, #4
 8011810:	68a2      	ldr	r2, [r4, #8]
 8011812:	7da0      	ldrb	r0, [r4, #22]
 8011814:	3304      	adds	r3, #4
 8011816:	444a      	add	r2, r9
 8011818:	7561      	strb	r1, [r4, #21]
 801181a:	1bdb      	subs	r3, r3, r7
 801181c:	f080 0001 	eor.w	r0, r0, #1
 8011820:	60a2      	str	r2, [r4, #8]
 8011822:	6123      	str	r3, [r4, #16]
 8011824:	b003      	add	sp, #12
 8011826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801182a:	2104      	movs	r1, #4
 801182c:	4620      	mov	r0, r4
 801182e:	f000 fd63 	bl	80122f8 <ucdr_check_final_buffer_behavior>
 8011832:	b1c8      	cbz	r0, 8011868 <ucdr_serialize_endian_uint32_t+0xd0>
 8011834:	2d01      	cmp	r5, #1
 8011836:	68a3      	ldr	r3, [r4, #8]
 8011838:	d01c      	beq.n	8011874 <ucdr_serialize_endian_uint32_t+0xdc>
 801183a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801183e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011842:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011846:	7018      	strb	r0, [r3, #0]
 8011848:	68a3      	ldr	r3, [r4, #8]
 801184a:	705a      	strb	r2, [r3, #1]
 801184c:	68a3      	ldr	r3, [r4, #8]
 801184e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011852:	7099      	strb	r1, [r3, #2]
 8011854:	68a3      	ldr	r3, [r4, #8]
 8011856:	70da      	strb	r2, [r3, #3]
 8011858:	2104      	movs	r1, #4
 801185a:	68a2      	ldr	r2, [r4, #8]
 801185c:	6923      	ldr	r3, [r4, #16]
 801185e:	440a      	add	r2, r1
 8011860:	7561      	strb	r1, [r4, #21]
 8011862:	440b      	add	r3, r1
 8011864:	60a2      	str	r2, [r4, #8]
 8011866:	6123      	str	r3, [r4, #16]
 8011868:	7da0      	ldrb	r0, [r4, #22]
 801186a:	f080 0001 	eor.w	r0, r0, #1
 801186e:	b003      	add	sp, #12
 8011870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011874:	9a01      	ldr	r2, [sp, #4]
 8011876:	601a      	str	r2, [r3, #0]
 8011878:	e7ee      	b.n	8011858 <ucdr_serialize_endian_uint32_t+0xc0>
 801187a:	68a2      	ldr	r2, [r4, #8]
 801187c:	6923      	ldr	r3, [r4, #16]
 801187e:	7da0      	ldrb	r0, [r4, #22]
 8011880:	1bd2      	subs	r2, r2, r7
 8011882:	1bdb      	subs	r3, r3, r7
 8011884:	f884 8015 	strb.w	r8, [r4, #21]
 8011888:	f080 0001 	eor.w	r0, r0, #1
 801188c:	60a2      	str	r2, [r4, #8]
 801188e:	6123      	str	r3, [r4, #16]
 8011890:	b003      	add	sp, #12
 8011892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011896:	68a3      	ldr	r3, [r4, #8]
 8011898:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801189c:	701a      	strb	r2, [r3, #0]
 801189e:	68a3      	ldr	r3, [r4, #8]
 80118a0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80118a4:	701a      	strb	r2, [r3, #0]
 80118a6:	68a3      	ldr	r3, [r4, #8]
 80118a8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80118ac:	701a      	strb	r2, [r3, #0]
 80118ae:	e7ad      	b.n	801180c <ucdr_serialize_endian_uint32_t+0x74>
 80118b0:	ad01      	add	r5, sp, #4
 80118b2:	463a      	mov	r2, r7
 80118b4:	4630      	mov	r0, r6
 80118b6:	4629      	mov	r1, r5
 80118b8:	f002 f9e1 	bl	8013c7e <memcpy>
 80118bc:	464a      	mov	r2, r9
 80118be:	19e9      	adds	r1, r5, r7
 80118c0:	68a0      	ldr	r0, [r4, #8]
 80118c2:	f002 f9dc 	bl	8013c7e <memcpy>
 80118c6:	e7a1      	b.n	801180c <ucdr_serialize_endian_uint32_t+0x74>

080118c8 <ucdr_deserialize_uint32_t>:
 80118c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118cc:	4604      	mov	r4, r0
 80118ce:	460d      	mov	r5, r1
 80118d0:	2104      	movs	r1, #4
 80118d2:	f000 fd35 	bl	8012340 <ucdr_buffer_alignment>
 80118d6:	4601      	mov	r1, r0
 80118d8:	4620      	mov	r0, r4
 80118da:	f894 8015 	ldrb.w	r8, [r4, #21]
 80118de:	f000 fd73 	bl	80123c8 <ucdr_advance_buffer>
 80118e2:	2104      	movs	r1, #4
 80118e4:	4620      	mov	r0, r4
 80118e6:	f000 fcfb 	bl	80122e0 <ucdr_check_buffer_available_for>
 80118ea:	2800      	cmp	r0, #0
 80118ec:	d138      	bne.n	8011960 <ucdr_deserialize_uint32_t+0x98>
 80118ee:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80118f2:	42b7      	cmp	r7, r6
 80118f4:	d92f      	bls.n	8011956 <ucdr_deserialize_uint32_t+0x8e>
 80118f6:	6923      	ldr	r3, [r4, #16]
 80118f8:	4620      	mov	r0, r4
 80118fa:	60a7      	str	r7, [r4, #8]
 80118fc:	1bbf      	subs	r7, r7, r6
 80118fe:	443b      	add	r3, r7
 8011900:	f1c7 0904 	rsb	r9, r7, #4
 8011904:	6123      	str	r3, [r4, #16]
 8011906:	4649      	mov	r1, r9
 8011908:	f000 fcf6 	bl	80122f8 <ucdr_check_final_buffer_behavior>
 801190c:	2800      	cmp	r0, #0
 801190e:	d046      	beq.n	801199e <ucdr_deserialize_uint32_t+0xd6>
 8011910:	7d23      	ldrb	r3, [r4, #20]
 8011912:	2b01      	cmp	r3, #1
 8011914:	d05c      	beq.n	80119d0 <ucdr_deserialize_uint32_t+0x108>
 8011916:	78f3      	ldrb	r3, [r6, #3]
 8011918:	702b      	strb	r3, [r5, #0]
 801191a:	2f00      	cmp	r7, #0
 801191c:	d04c      	beq.n	80119b8 <ucdr_deserialize_uint32_t+0xf0>
 801191e:	78b3      	ldrb	r3, [r6, #2]
 8011920:	2f01      	cmp	r7, #1
 8011922:	706b      	strb	r3, [r5, #1]
 8011924:	f105 0302 	add.w	r3, r5, #2
 8011928:	d04a      	beq.n	80119c0 <ucdr_deserialize_uint32_t+0xf8>
 801192a:	7873      	ldrb	r3, [r6, #1]
 801192c:	2f02      	cmp	r7, #2
 801192e:	70ab      	strb	r3, [r5, #2]
 8011930:	f105 0303 	add.w	r3, r5, #3
 8011934:	d048      	beq.n	80119c8 <ucdr_deserialize_uint32_t+0x100>
 8011936:	7833      	ldrb	r3, [r6, #0]
 8011938:	70eb      	strb	r3, [r5, #3]
 801193a:	6923      	ldr	r3, [r4, #16]
 801193c:	2104      	movs	r1, #4
 801193e:	68a2      	ldr	r2, [r4, #8]
 8011940:	3304      	adds	r3, #4
 8011942:	7da0      	ldrb	r0, [r4, #22]
 8011944:	444a      	add	r2, r9
 8011946:	7561      	strb	r1, [r4, #21]
 8011948:	1bdb      	subs	r3, r3, r7
 801194a:	f080 0001 	eor.w	r0, r0, #1
 801194e:	60a2      	str	r2, [r4, #8]
 8011950:	6123      	str	r3, [r4, #16]
 8011952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011956:	2104      	movs	r1, #4
 8011958:	4620      	mov	r0, r4
 801195a:	f000 fccd 	bl	80122f8 <ucdr_check_final_buffer_behavior>
 801195e:	b1b0      	cbz	r0, 801198e <ucdr_deserialize_uint32_t+0xc6>
 8011960:	7d23      	ldrb	r3, [r4, #20]
 8011962:	2b01      	cmp	r3, #1
 8011964:	68a3      	ldr	r3, [r4, #8]
 8011966:	d017      	beq.n	8011998 <ucdr_deserialize_uint32_t+0xd0>
 8011968:	78db      	ldrb	r3, [r3, #3]
 801196a:	702b      	strb	r3, [r5, #0]
 801196c:	68a3      	ldr	r3, [r4, #8]
 801196e:	789b      	ldrb	r3, [r3, #2]
 8011970:	706b      	strb	r3, [r5, #1]
 8011972:	68a3      	ldr	r3, [r4, #8]
 8011974:	785b      	ldrb	r3, [r3, #1]
 8011976:	70ab      	strb	r3, [r5, #2]
 8011978:	68a3      	ldr	r3, [r4, #8]
 801197a:	781b      	ldrb	r3, [r3, #0]
 801197c:	70eb      	strb	r3, [r5, #3]
 801197e:	2104      	movs	r1, #4
 8011980:	68a2      	ldr	r2, [r4, #8]
 8011982:	6923      	ldr	r3, [r4, #16]
 8011984:	440a      	add	r2, r1
 8011986:	7561      	strb	r1, [r4, #21]
 8011988:	440b      	add	r3, r1
 801198a:	60a2      	str	r2, [r4, #8]
 801198c:	6123      	str	r3, [r4, #16]
 801198e:	7da0      	ldrb	r0, [r4, #22]
 8011990:	f080 0001 	eor.w	r0, r0, #1
 8011994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	602b      	str	r3, [r5, #0]
 801199c:	e7ef      	b.n	801197e <ucdr_deserialize_uint32_t+0xb6>
 801199e:	68a2      	ldr	r2, [r4, #8]
 80119a0:	6923      	ldr	r3, [r4, #16]
 80119a2:	1bd2      	subs	r2, r2, r7
 80119a4:	7da0      	ldrb	r0, [r4, #22]
 80119a6:	1bdb      	subs	r3, r3, r7
 80119a8:	f884 8015 	strb.w	r8, [r4, #21]
 80119ac:	f080 0001 	eor.w	r0, r0, #1
 80119b0:	60a2      	str	r2, [r4, #8]
 80119b2:	6123      	str	r3, [r4, #16]
 80119b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119b8:	68a3      	ldr	r3, [r4, #8]
 80119ba:	789b      	ldrb	r3, [r3, #2]
 80119bc:	706b      	strb	r3, [r5, #1]
 80119be:	1cab      	adds	r3, r5, #2
 80119c0:	68a2      	ldr	r2, [r4, #8]
 80119c2:	7852      	ldrb	r2, [r2, #1]
 80119c4:	f803 2b01 	strb.w	r2, [r3], #1
 80119c8:	68a2      	ldr	r2, [r4, #8]
 80119ca:	7812      	ldrb	r2, [r2, #0]
 80119cc:	701a      	strb	r2, [r3, #0]
 80119ce:	e7b4      	b.n	801193a <ucdr_deserialize_uint32_t+0x72>
 80119d0:	4631      	mov	r1, r6
 80119d2:	463a      	mov	r2, r7
 80119d4:	4628      	mov	r0, r5
 80119d6:	f002 f952 	bl	8013c7e <memcpy>
 80119da:	464a      	mov	r2, r9
 80119dc:	19e8      	adds	r0, r5, r7
 80119de:	68a1      	ldr	r1, [r4, #8]
 80119e0:	f002 f94d 	bl	8013c7e <memcpy>
 80119e4:	e7a9      	b.n	801193a <ucdr_deserialize_uint32_t+0x72>
 80119e6:	bf00      	nop

080119e8 <ucdr_deserialize_endian_uint32_t>:
 80119e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119ec:	4604      	mov	r4, r0
 80119ee:	460e      	mov	r6, r1
 80119f0:	2104      	movs	r1, #4
 80119f2:	4615      	mov	r5, r2
 80119f4:	f000 fca4 	bl	8012340 <ucdr_buffer_alignment>
 80119f8:	4601      	mov	r1, r0
 80119fa:	4620      	mov	r0, r4
 80119fc:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011a00:	f000 fce2 	bl	80123c8 <ucdr_advance_buffer>
 8011a04:	2104      	movs	r1, #4
 8011a06:	4620      	mov	r0, r4
 8011a08:	f000 fc6a 	bl	80122e0 <ucdr_check_buffer_available_for>
 8011a0c:	2800      	cmp	r0, #0
 8011a0e:	d13c      	bne.n	8011a8a <ucdr_deserialize_endian_uint32_t+0xa2>
 8011a10:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8011a14:	42bb      	cmp	r3, r7
 8011a16:	d933      	bls.n	8011a80 <ucdr_deserialize_endian_uint32_t+0x98>
 8011a18:	eba3 0907 	sub.w	r9, r3, r7
 8011a1c:	60a3      	str	r3, [r4, #8]
 8011a1e:	6923      	ldr	r3, [r4, #16]
 8011a20:	4620      	mov	r0, r4
 8011a22:	f1c9 0a04 	rsb	sl, r9, #4
 8011a26:	444b      	add	r3, r9
 8011a28:	4651      	mov	r1, sl
 8011a2a:	6123      	str	r3, [r4, #16]
 8011a2c:	f000 fc64 	bl	80122f8 <ucdr_check_final_buffer_behavior>
 8011a30:	2800      	cmp	r0, #0
 8011a32:	d048      	beq.n	8011ac6 <ucdr_deserialize_endian_uint32_t+0xde>
 8011a34:	2e01      	cmp	r6, #1
 8011a36:	d061      	beq.n	8011afc <ucdr_deserialize_endian_uint32_t+0x114>
 8011a38:	78fb      	ldrb	r3, [r7, #3]
 8011a3a:	702b      	strb	r3, [r5, #0]
 8011a3c:	f1b9 0f00 	cmp.w	r9, #0
 8011a40:	d050      	beq.n	8011ae4 <ucdr_deserialize_endian_uint32_t+0xfc>
 8011a42:	78bb      	ldrb	r3, [r7, #2]
 8011a44:	f1b9 0f01 	cmp.w	r9, #1
 8011a48:	706b      	strb	r3, [r5, #1]
 8011a4a:	f105 0302 	add.w	r3, r5, #2
 8011a4e:	d04d      	beq.n	8011aec <ucdr_deserialize_endian_uint32_t+0x104>
 8011a50:	787b      	ldrb	r3, [r7, #1]
 8011a52:	f1b9 0f02 	cmp.w	r9, #2
 8011a56:	70ab      	strb	r3, [r5, #2]
 8011a58:	f105 0303 	add.w	r3, r5, #3
 8011a5c:	d04a      	beq.n	8011af4 <ucdr_deserialize_endian_uint32_t+0x10c>
 8011a5e:	783b      	ldrb	r3, [r7, #0]
 8011a60:	70eb      	strb	r3, [r5, #3]
 8011a62:	6923      	ldr	r3, [r4, #16]
 8011a64:	2104      	movs	r1, #4
 8011a66:	68a2      	ldr	r2, [r4, #8]
 8011a68:	3304      	adds	r3, #4
 8011a6a:	7da0      	ldrb	r0, [r4, #22]
 8011a6c:	4452      	add	r2, sl
 8011a6e:	7561      	strb	r1, [r4, #21]
 8011a70:	eba3 0309 	sub.w	r3, r3, r9
 8011a74:	f080 0001 	eor.w	r0, r0, #1
 8011a78:	60a2      	str	r2, [r4, #8]
 8011a7a:	6123      	str	r3, [r4, #16]
 8011a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a80:	2104      	movs	r1, #4
 8011a82:	4620      	mov	r0, r4
 8011a84:	f000 fc38 	bl	80122f8 <ucdr_check_final_buffer_behavior>
 8011a88:	b1a8      	cbz	r0, 8011ab6 <ucdr_deserialize_endian_uint32_t+0xce>
 8011a8a:	2e01      	cmp	r6, #1
 8011a8c:	68a3      	ldr	r3, [r4, #8]
 8011a8e:	d017      	beq.n	8011ac0 <ucdr_deserialize_endian_uint32_t+0xd8>
 8011a90:	78db      	ldrb	r3, [r3, #3]
 8011a92:	702b      	strb	r3, [r5, #0]
 8011a94:	68a3      	ldr	r3, [r4, #8]
 8011a96:	789b      	ldrb	r3, [r3, #2]
 8011a98:	706b      	strb	r3, [r5, #1]
 8011a9a:	68a3      	ldr	r3, [r4, #8]
 8011a9c:	785b      	ldrb	r3, [r3, #1]
 8011a9e:	70ab      	strb	r3, [r5, #2]
 8011aa0:	68a3      	ldr	r3, [r4, #8]
 8011aa2:	781b      	ldrb	r3, [r3, #0]
 8011aa4:	70eb      	strb	r3, [r5, #3]
 8011aa6:	2104      	movs	r1, #4
 8011aa8:	68a2      	ldr	r2, [r4, #8]
 8011aaa:	6923      	ldr	r3, [r4, #16]
 8011aac:	440a      	add	r2, r1
 8011aae:	7561      	strb	r1, [r4, #21]
 8011ab0:	440b      	add	r3, r1
 8011ab2:	60a2      	str	r2, [r4, #8]
 8011ab4:	6123      	str	r3, [r4, #16]
 8011ab6:	7da0      	ldrb	r0, [r4, #22]
 8011ab8:	f080 0001 	eor.w	r0, r0, #1
 8011abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	602b      	str	r3, [r5, #0]
 8011ac4:	e7ef      	b.n	8011aa6 <ucdr_deserialize_endian_uint32_t+0xbe>
 8011ac6:	68a2      	ldr	r2, [r4, #8]
 8011ac8:	6923      	ldr	r3, [r4, #16]
 8011aca:	eba2 0209 	sub.w	r2, r2, r9
 8011ace:	7da0      	ldrb	r0, [r4, #22]
 8011ad0:	eba3 0309 	sub.w	r3, r3, r9
 8011ad4:	f884 8015 	strb.w	r8, [r4, #21]
 8011ad8:	f080 0001 	eor.w	r0, r0, #1
 8011adc:	60a2      	str	r2, [r4, #8]
 8011ade:	6123      	str	r3, [r4, #16]
 8011ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ae4:	68a3      	ldr	r3, [r4, #8]
 8011ae6:	789b      	ldrb	r3, [r3, #2]
 8011ae8:	706b      	strb	r3, [r5, #1]
 8011aea:	1cab      	adds	r3, r5, #2
 8011aec:	68a2      	ldr	r2, [r4, #8]
 8011aee:	7852      	ldrb	r2, [r2, #1]
 8011af0:	f803 2b01 	strb.w	r2, [r3], #1
 8011af4:	68a2      	ldr	r2, [r4, #8]
 8011af6:	7812      	ldrb	r2, [r2, #0]
 8011af8:	701a      	strb	r2, [r3, #0]
 8011afa:	e7b2      	b.n	8011a62 <ucdr_deserialize_endian_uint32_t+0x7a>
 8011afc:	4639      	mov	r1, r7
 8011afe:	464a      	mov	r2, r9
 8011b00:	4628      	mov	r0, r5
 8011b02:	f002 f8bc 	bl	8013c7e <memcpy>
 8011b06:	4652      	mov	r2, sl
 8011b08:	eb05 0009 	add.w	r0, r5, r9
 8011b0c:	68a1      	ldr	r1, [r4, #8]
 8011b0e:	f002 f8b6 	bl	8013c7e <memcpy>
 8011b12:	e7a6      	b.n	8011a62 <ucdr_deserialize_endian_uint32_t+0x7a>

08011b14 <ucdr_serialize_int32_t>:
 8011b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b18:	b082      	sub	sp, #8
 8011b1a:	4604      	mov	r4, r0
 8011b1c:	9101      	str	r1, [sp, #4]
 8011b1e:	2104      	movs	r1, #4
 8011b20:	f000 fc0e 	bl	8012340 <ucdr_buffer_alignment>
 8011b24:	4601      	mov	r1, r0
 8011b26:	4620      	mov	r0, r4
 8011b28:	7d67      	ldrb	r7, [r4, #21]
 8011b2a:	f000 fc4d 	bl	80123c8 <ucdr_advance_buffer>
 8011b2e:	2104      	movs	r1, #4
 8011b30:	4620      	mov	r0, r4
 8011b32:	f000 fbd5 	bl	80122e0 <ucdr_check_buffer_available_for>
 8011b36:	2800      	cmp	r0, #0
 8011b38:	d139      	bne.n	8011bae <ucdr_serialize_int32_t+0x9a>
 8011b3a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011b3e:	42ab      	cmp	r3, r5
 8011b40:	d930      	bls.n	8011ba4 <ucdr_serialize_int32_t+0x90>
 8011b42:	1b5e      	subs	r6, r3, r5
 8011b44:	60a3      	str	r3, [r4, #8]
 8011b46:	6923      	ldr	r3, [r4, #16]
 8011b48:	4620      	mov	r0, r4
 8011b4a:	f1c6 0804 	rsb	r8, r6, #4
 8011b4e:	4433      	add	r3, r6
 8011b50:	4641      	mov	r1, r8
 8011b52:	6123      	str	r3, [r4, #16]
 8011b54:	f000 fbd0 	bl	80122f8 <ucdr_check_final_buffer_behavior>
 8011b58:	2800      	cmp	r0, #0
 8011b5a:	d04c      	beq.n	8011bf6 <ucdr_serialize_int32_t+0xe2>
 8011b5c:	7d23      	ldrb	r3, [r4, #20]
 8011b5e:	2b01      	cmp	r3, #1
 8011b60:	d063      	beq.n	8011c2a <ucdr_serialize_int32_t+0x116>
 8011b62:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011b66:	702b      	strb	r3, [r5, #0]
 8011b68:	2e00      	cmp	r6, #0
 8011b6a:	d051      	beq.n	8011c10 <ucdr_serialize_int32_t+0xfc>
 8011b6c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011b70:	2e01      	cmp	r6, #1
 8011b72:	706b      	strb	r3, [r5, #1]
 8011b74:	d050      	beq.n	8011c18 <ucdr_serialize_int32_t+0x104>
 8011b76:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011b7a:	2e02      	cmp	r6, #2
 8011b7c:	70ab      	strb	r3, [r5, #2]
 8011b7e:	d04f      	beq.n	8011c20 <ucdr_serialize_int32_t+0x10c>
 8011b80:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011b84:	70eb      	strb	r3, [r5, #3]
 8011b86:	6923      	ldr	r3, [r4, #16]
 8011b88:	2104      	movs	r1, #4
 8011b8a:	68a2      	ldr	r2, [r4, #8]
 8011b8c:	3304      	adds	r3, #4
 8011b8e:	7da0      	ldrb	r0, [r4, #22]
 8011b90:	4442      	add	r2, r8
 8011b92:	7561      	strb	r1, [r4, #21]
 8011b94:	1b9e      	subs	r6, r3, r6
 8011b96:	f080 0001 	eor.w	r0, r0, #1
 8011b9a:	60a2      	str	r2, [r4, #8]
 8011b9c:	6126      	str	r6, [r4, #16]
 8011b9e:	b002      	add	sp, #8
 8011ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ba4:	2104      	movs	r1, #4
 8011ba6:	4620      	mov	r0, r4
 8011ba8:	f000 fba6 	bl	80122f8 <ucdr_check_final_buffer_behavior>
 8011bac:	b1d0      	cbz	r0, 8011be4 <ucdr_serialize_int32_t+0xd0>
 8011bae:	7d23      	ldrb	r3, [r4, #20]
 8011bb0:	2b01      	cmp	r3, #1
 8011bb2:	68a3      	ldr	r3, [r4, #8]
 8011bb4:	d01c      	beq.n	8011bf0 <ucdr_serialize_int32_t+0xdc>
 8011bb6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011bba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011bbe:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011bc2:	7018      	strb	r0, [r3, #0]
 8011bc4:	68a3      	ldr	r3, [r4, #8]
 8011bc6:	705a      	strb	r2, [r3, #1]
 8011bc8:	68a3      	ldr	r3, [r4, #8]
 8011bca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011bce:	7099      	strb	r1, [r3, #2]
 8011bd0:	68a3      	ldr	r3, [r4, #8]
 8011bd2:	70da      	strb	r2, [r3, #3]
 8011bd4:	2104      	movs	r1, #4
 8011bd6:	68a2      	ldr	r2, [r4, #8]
 8011bd8:	6923      	ldr	r3, [r4, #16]
 8011bda:	440a      	add	r2, r1
 8011bdc:	7561      	strb	r1, [r4, #21]
 8011bde:	440b      	add	r3, r1
 8011be0:	60a2      	str	r2, [r4, #8]
 8011be2:	6123      	str	r3, [r4, #16]
 8011be4:	7da0      	ldrb	r0, [r4, #22]
 8011be6:	f080 0001 	eor.w	r0, r0, #1
 8011bea:	b002      	add	sp, #8
 8011bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bf0:	9a01      	ldr	r2, [sp, #4]
 8011bf2:	601a      	str	r2, [r3, #0]
 8011bf4:	e7ee      	b.n	8011bd4 <ucdr_serialize_int32_t+0xc0>
 8011bf6:	68a2      	ldr	r2, [r4, #8]
 8011bf8:	6923      	ldr	r3, [r4, #16]
 8011bfa:	7da0      	ldrb	r0, [r4, #22]
 8011bfc:	1b92      	subs	r2, r2, r6
 8011bfe:	1b9b      	subs	r3, r3, r6
 8011c00:	7567      	strb	r7, [r4, #21]
 8011c02:	f080 0001 	eor.w	r0, r0, #1
 8011c06:	60a2      	str	r2, [r4, #8]
 8011c08:	6123      	str	r3, [r4, #16]
 8011c0a:	b002      	add	sp, #8
 8011c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c10:	68a3      	ldr	r3, [r4, #8]
 8011c12:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011c16:	701a      	strb	r2, [r3, #0]
 8011c18:	68a3      	ldr	r3, [r4, #8]
 8011c1a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011c1e:	701a      	strb	r2, [r3, #0]
 8011c20:	68a3      	ldr	r3, [r4, #8]
 8011c22:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011c26:	701a      	strb	r2, [r3, #0]
 8011c28:	e7ad      	b.n	8011b86 <ucdr_serialize_int32_t+0x72>
 8011c2a:	4628      	mov	r0, r5
 8011c2c:	ad01      	add	r5, sp, #4
 8011c2e:	4632      	mov	r2, r6
 8011c30:	4629      	mov	r1, r5
 8011c32:	f002 f824 	bl	8013c7e <memcpy>
 8011c36:	4642      	mov	r2, r8
 8011c38:	19a9      	adds	r1, r5, r6
 8011c3a:	68a0      	ldr	r0, [r4, #8]
 8011c3c:	f002 f81f 	bl	8013c7e <memcpy>
 8011c40:	e7a1      	b.n	8011b86 <ucdr_serialize_int32_t+0x72>
 8011c42:	bf00      	nop

08011c44 <ucdr_deserialize_int32_t>:
 8011c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c48:	4604      	mov	r4, r0
 8011c4a:	460d      	mov	r5, r1
 8011c4c:	2104      	movs	r1, #4
 8011c4e:	f000 fb77 	bl	8012340 <ucdr_buffer_alignment>
 8011c52:	4601      	mov	r1, r0
 8011c54:	4620      	mov	r0, r4
 8011c56:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011c5a:	f000 fbb5 	bl	80123c8 <ucdr_advance_buffer>
 8011c5e:	2104      	movs	r1, #4
 8011c60:	4620      	mov	r0, r4
 8011c62:	f000 fb3d 	bl	80122e0 <ucdr_check_buffer_available_for>
 8011c66:	2800      	cmp	r0, #0
 8011c68:	d138      	bne.n	8011cdc <ucdr_deserialize_int32_t+0x98>
 8011c6a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011c6e:	42b7      	cmp	r7, r6
 8011c70:	d92f      	bls.n	8011cd2 <ucdr_deserialize_int32_t+0x8e>
 8011c72:	6923      	ldr	r3, [r4, #16]
 8011c74:	4620      	mov	r0, r4
 8011c76:	60a7      	str	r7, [r4, #8]
 8011c78:	1bbf      	subs	r7, r7, r6
 8011c7a:	443b      	add	r3, r7
 8011c7c:	f1c7 0904 	rsb	r9, r7, #4
 8011c80:	6123      	str	r3, [r4, #16]
 8011c82:	4649      	mov	r1, r9
 8011c84:	f000 fb38 	bl	80122f8 <ucdr_check_final_buffer_behavior>
 8011c88:	2800      	cmp	r0, #0
 8011c8a:	d046      	beq.n	8011d1a <ucdr_deserialize_int32_t+0xd6>
 8011c8c:	7d23      	ldrb	r3, [r4, #20]
 8011c8e:	2b01      	cmp	r3, #1
 8011c90:	d05c      	beq.n	8011d4c <ucdr_deserialize_int32_t+0x108>
 8011c92:	78f3      	ldrb	r3, [r6, #3]
 8011c94:	702b      	strb	r3, [r5, #0]
 8011c96:	2f00      	cmp	r7, #0
 8011c98:	d04c      	beq.n	8011d34 <ucdr_deserialize_int32_t+0xf0>
 8011c9a:	78b3      	ldrb	r3, [r6, #2]
 8011c9c:	2f01      	cmp	r7, #1
 8011c9e:	706b      	strb	r3, [r5, #1]
 8011ca0:	f105 0302 	add.w	r3, r5, #2
 8011ca4:	d04a      	beq.n	8011d3c <ucdr_deserialize_int32_t+0xf8>
 8011ca6:	7873      	ldrb	r3, [r6, #1]
 8011ca8:	2f02      	cmp	r7, #2
 8011caa:	70ab      	strb	r3, [r5, #2]
 8011cac:	f105 0303 	add.w	r3, r5, #3
 8011cb0:	d048      	beq.n	8011d44 <ucdr_deserialize_int32_t+0x100>
 8011cb2:	7833      	ldrb	r3, [r6, #0]
 8011cb4:	70eb      	strb	r3, [r5, #3]
 8011cb6:	6923      	ldr	r3, [r4, #16]
 8011cb8:	2104      	movs	r1, #4
 8011cba:	68a2      	ldr	r2, [r4, #8]
 8011cbc:	3304      	adds	r3, #4
 8011cbe:	7da0      	ldrb	r0, [r4, #22]
 8011cc0:	444a      	add	r2, r9
 8011cc2:	7561      	strb	r1, [r4, #21]
 8011cc4:	1bdb      	subs	r3, r3, r7
 8011cc6:	f080 0001 	eor.w	r0, r0, #1
 8011cca:	60a2      	str	r2, [r4, #8]
 8011ccc:	6123      	str	r3, [r4, #16]
 8011cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cd2:	2104      	movs	r1, #4
 8011cd4:	4620      	mov	r0, r4
 8011cd6:	f000 fb0f 	bl	80122f8 <ucdr_check_final_buffer_behavior>
 8011cda:	b1b0      	cbz	r0, 8011d0a <ucdr_deserialize_int32_t+0xc6>
 8011cdc:	7d23      	ldrb	r3, [r4, #20]
 8011cde:	2b01      	cmp	r3, #1
 8011ce0:	68a3      	ldr	r3, [r4, #8]
 8011ce2:	d017      	beq.n	8011d14 <ucdr_deserialize_int32_t+0xd0>
 8011ce4:	78db      	ldrb	r3, [r3, #3]
 8011ce6:	702b      	strb	r3, [r5, #0]
 8011ce8:	68a3      	ldr	r3, [r4, #8]
 8011cea:	789b      	ldrb	r3, [r3, #2]
 8011cec:	706b      	strb	r3, [r5, #1]
 8011cee:	68a3      	ldr	r3, [r4, #8]
 8011cf0:	785b      	ldrb	r3, [r3, #1]
 8011cf2:	70ab      	strb	r3, [r5, #2]
 8011cf4:	68a3      	ldr	r3, [r4, #8]
 8011cf6:	781b      	ldrb	r3, [r3, #0]
 8011cf8:	70eb      	strb	r3, [r5, #3]
 8011cfa:	2104      	movs	r1, #4
 8011cfc:	68a2      	ldr	r2, [r4, #8]
 8011cfe:	6923      	ldr	r3, [r4, #16]
 8011d00:	440a      	add	r2, r1
 8011d02:	7561      	strb	r1, [r4, #21]
 8011d04:	440b      	add	r3, r1
 8011d06:	60a2      	str	r2, [r4, #8]
 8011d08:	6123      	str	r3, [r4, #16]
 8011d0a:	7da0      	ldrb	r0, [r4, #22]
 8011d0c:	f080 0001 	eor.w	r0, r0, #1
 8011d10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	602b      	str	r3, [r5, #0]
 8011d18:	e7ef      	b.n	8011cfa <ucdr_deserialize_int32_t+0xb6>
 8011d1a:	68a2      	ldr	r2, [r4, #8]
 8011d1c:	6923      	ldr	r3, [r4, #16]
 8011d1e:	1bd2      	subs	r2, r2, r7
 8011d20:	7da0      	ldrb	r0, [r4, #22]
 8011d22:	1bdb      	subs	r3, r3, r7
 8011d24:	f884 8015 	strb.w	r8, [r4, #21]
 8011d28:	f080 0001 	eor.w	r0, r0, #1
 8011d2c:	60a2      	str	r2, [r4, #8]
 8011d2e:	6123      	str	r3, [r4, #16]
 8011d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d34:	68a3      	ldr	r3, [r4, #8]
 8011d36:	789b      	ldrb	r3, [r3, #2]
 8011d38:	706b      	strb	r3, [r5, #1]
 8011d3a:	1cab      	adds	r3, r5, #2
 8011d3c:	68a2      	ldr	r2, [r4, #8]
 8011d3e:	7852      	ldrb	r2, [r2, #1]
 8011d40:	f803 2b01 	strb.w	r2, [r3], #1
 8011d44:	68a2      	ldr	r2, [r4, #8]
 8011d46:	7812      	ldrb	r2, [r2, #0]
 8011d48:	701a      	strb	r2, [r3, #0]
 8011d4a:	e7b4      	b.n	8011cb6 <ucdr_deserialize_int32_t+0x72>
 8011d4c:	4631      	mov	r1, r6
 8011d4e:	463a      	mov	r2, r7
 8011d50:	4628      	mov	r0, r5
 8011d52:	f001 ff94 	bl	8013c7e <memcpy>
 8011d56:	464a      	mov	r2, r9
 8011d58:	19e8      	adds	r0, r5, r7
 8011d5a:	68a1      	ldr	r1, [r4, #8]
 8011d5c:	f001 ff8f 	bl	8013c7e <memcpy>
 8011d60:	e7a9      	b.n	8011cb6 <ucdr_deserialize_int32_t+0x72>
 8011d62:	bf00      	nop

08011d64 <ucdr_serialize_float>:
 8011d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d68:	4604      	mov	r4, r0
 8011d6a:	b082      	sub	sp, #8
 8011d6c:	2104      	movs	r1, #4
 8011d6e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8011d72:	f000 fae5 	bl	8012340 <ucdr_buffer_alignment>
 8011d76:	4601      	mov	r1, r0
 8011d78:	4620      	mov	r0, r4
 8011d7a:	7d67      	ldrb	r7, [r4, #21]
 8011d7c:	f000 fb24 	bl	80123c8 <ucdr_advance_buffer>
 8011d80:	2104      	movs	r1, #4
 8011d82:	4620      	mov	r0, r4
 8011d84:	f000 faac 	bl	80122e0 <ucdr_check_buffer_available_for>
 8011d88:	2800      	cmp	r0, #0
 8011d8a:	d139      	bne.n	8011e00 <ucdr_serialize_float+0x9c>
 8011d8c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011d90:	42ab      	cmp	r3, r5
 8011d92:	d930      	bls.n	8011df6 <ucdr_serialize_float+0x92>
 8011d94:	1b5e      	subs	r6, r3, r5
 8011d96:	60a3      	str	r3, [r4, #8]
 8011d98:	6923      	ldr	r3, [r4, #16]
 8011d9a:	4620      	mov	r0, r4
 8011d9c:	f1c6 0804 	rsb	r8, r6, #4
 8011da0:	4433      	add	r3, r6
 8011da2:	4641      	mov	r1, r8
 8011da4:	6123      	str	r3, [r4, #16]
 8011da6:	f000 faa7 	bl	80122f8 <ucdr_check_final_buffer_behavior>
 8011daa:	2800      	cmp	r0, #0
 8011dac:	d04c      	beq.n	8011e48 <ucdr_serialize_float+0xe4>
 8011dae:	7d23      	ldrb	r3, [r4, #20]
 8011db0:	2b01      	cmp	r3, #1
 8011db2:	d063      	beq.n	8011e7c <ucdr_serialize_float+0x118>
 8011db4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011db8:	702b      	strb	r3, [r5, #0]
 8011dba:	2e00      	cmp	r6, #0
 8011dbc:	d051      	beq.n	8011e62 <ucdr_serialize_float+0xfe>
 8011dbe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011dc2:	2e01      	cmp	r6, #1
 8011dc4:	706b      	strb	r3, [r5, #1]
 8011dc6:	d050      	beq.n	8011e6a <ucdr_serialize_float+0x106>
 8011dc8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011dcc:	2e02      	cmp	r6, #2
 8011dce:	70ab      	strb	r3, [r5, #2]
 8011dd0:	d04f      	beq.n	8011e72 <ucdr_serialize_float+0x10e>
 8011dd2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011dd6:	70eb      	strb	r3, [r5, #3]
 8011dd8:	6923      	ldr	r3, [r4, #16]
 8011dda:	2104      	movs	r1, #4
 8011ddc:	68a2      	ldr	r2, [r4, #8]
 8011dde:	3304      	adds	r3, #4
 8011de0:	7da0      	ldrb	r0, [r4, #22]
 8011de2:	4442      	add	r2, r8
 8011de4:	7561      	strb	r1, [r4, #21]
 8011de6:	1b9e      	subs	r6, r3, r6
 8011de8:	f080 0001 	eor.w	r0, r0, #1
 8011dec:	60a2      	str	r2, [r4, #8]
 8011dee:	6126      	str	r6, [r4, #16]
 8011df0:	b002      	add	sp, #8
 8011df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011df6:	2104      	movs	r1, #4
 8011df8:	4620      	mov	r0, r4
 8011dfa:	f000 fa7d 	bl	80122f8 <ucdr_check_final_buffer_behavior>
 8011dfe:	b1d0      	cbz	r0, 8011e36 <ucdr_serialize_float+0xd2>
 8011e00:	7d23      	ldrb	r3, [r4, #20]
 8011e02:	2b01      	cmp	r3, #1
 8011e04:	68a3      	ldr	r3, [r4, #8]
 8011e06:	d01c      	beq.n	8011e42 <ucdr_serialize_float+0xde>
 8011e08:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011e0c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011e10:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011e14:	7018      	strb	r0, [r3, #0]
 8011e16:	68a3      	ldr	r3, [r4, #8]
 8011e18:	705a      	strb	r2, [r3, #1]
 8011e1a:	68a3      	ldr	r3, [r4, #8]
 8011e1c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011e20:	7099      	strb	r1, [r3, #2]
 8011e22:	68a3      	ldr	r3, [r4, #8]
 8011e24:	70da      	strb	r2, [r3, #3]
 8011e26:	2104      	movs	r1, #4
 8011e28:	68a2      	ldr	r2, [r4, #8]
 8011e2a:	6923      	ldr	r3, [r4, #16]
 8011e2c:	440a      	add	r2, r1
 8011e2e:	7561      	strb	r1, [r4, #21]
 8011e30:	440b      	add	r3, r1
 8011e32:	60a2      	str	r2, [r4, #8]
 8011e34:	6123      	str	r3, [r4, #16]
 8011e36:	7da0      	ldrb	r0, [r4, #22]
 8011e38:	f080 0001 	eor.w	r0, r0, #1
 8011e3c:	b002      	add	sp, #8
 8011e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e42:	9a01      	ldr	r2, [sp, #4]
 8011e44:	601a      	str	r2, [r3, #0]
 8011e46:	e7ee      	b.n	8011e26 <ucdr_serialize_float+0xc2>
 8011e48:	68a2      	ldr	r2, [r4, #8]
 8011e4a:	6923      	ldr	r3, [r4, #16]
 8011e4c:	7da0      	ldrb	r0, [r4, #22]
 8011e4e:	1b92      	subs	r2, r2, r6
 8011e50:	1b9b      	subs	r3, r3, r6
 8011e52:	7567      	strb	r7, [r4, #21]
 8011e54:	f080 0001 	eor.w	r0, r0, #1
 8011e58:	60a2      	str	r2, [r4, #8]
 8011e5a:	6123      	str	r3, [r4, #16]
 8011e5c:	b002      	add	sp, #8
 8011e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e62:	68a3      	ldr	r3, [r4, #8]
 8011e64:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011e68:	701a      	strb	r2, [r3, #0]
 8011e6a:	68a3      	ldr	r3, [r4, #8]
 8011e6c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011e70:	701a      	strb	r2, [r3, #0]
 8011e72:	68a3      	ldr	r3, [r4, #8]
 8011e74:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011e78:	701a      	strb	r2, [r3, #0]
 8011e7a:	e7ad      	b.n	8011dd8 <ucdr_serialize_float+0x74>
 8011e7c:	4628      	mov	r0, r5
 8011e7e:	ad01      	add	r5, sp, #4
 8011e80:	4632      	mov	r2, r6
 8011e82:	4629      	mov	r1, r5
 8011e84:	f001 fefb 	bl	8013c7e <memcpy>
 8011e88:	4642      	mov	r2, r8
 8011e8a:	19a9      	adds	r1, r5, r6
 8011e8c:	68a0      	ldr	r0, [r4, #8]
 8011e8e:	f001 fef6 	bl	8013c7e <memcpy>
 8011e92:	e7a1      	b.n	8011dd8 <ucdr_serialize_float+0x74>

08011e94 <ucdr_deserialize_float>:
 8011e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e98:	4604      	mov	r4, r0
 8011e9a:	460d      	mov	r5, r1
 8011e9c:	2104      	movs	r1, #4
 8011e9e:	f000 fa4f 	bl	8012340 <ucdr_buffer_alignment>
 8011ea2:	4601      	mov	r1, r0
 8011ea4:	4620      	mov	r0, r4
 8011ea6:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011eaa:	f000 fa8d 	bl	80123c8 <ucdr_advance_buffer>
 8011eae:	2104      	movs	r1, #4
 8011eb0:	4620      	mov	r0, r4
 8011eb2:	f000 fa15 	bl	80122e0 <ucdr_check_buffer_available_for>
 8011eb6:	2800      	cmp	r0, #0
 8011eb8:	d138      	bne.n	8011f2c <ucdr_deserialize_float+0x98>
 8011eba:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011ebe:	42b7      	cmp	r7, r6
 8011ec0:	d92f      	bls.n	8011f22 <ucdr_deserialize_float+0x8e>
 8011ec2:	6923      	ldr	r3, [r4, #16]
 8011ec4:	4620      	mov	r0, r4
 8011ec6:	60a7      	str	r7, [r4, #8]
 8011ec8:	1bbf      	subs	r7, r7, r6
 8011eca:	443b      	add	r3, r7
 8011ecc:	f1c7 0904 	rsb	r9, r7, #4
 8011ed0:	6123      	str	r3, [r4, #16]
 8011ed2:	4649      	mov	r1, r9
 8011ed4:	f000 fa10 	bl	80122f8 <ucdr_check_final_buffer_behavior>
 8011ed8:	2800      	cmp	r0, #0
 8011eda:	d046      	beq.n	8011f6a <ucdr_deserialize_float+0xd6>
 8011edc:	7d23      	ldrb	r3, [r4, #20]
 8011ede:	2b01      	cmp	r3, #1
 8011ee0:	d05c      	beq.n	8011f9c <ucdr_deserialize_float+0x108>
 8011ee2:	78f3      	ldrb	r3, [r6, #3]
 8011ee4:	702b      	strb	r3, [r5, #0]
 8011ee6:	2f00      	cmp	r7, #0
 8011ee8:	d04c      	beq.n	8011f84 <ucdr_deserialize_float+0xf0>
 8011eea:	78b3      	ldrb	r3, [r6, #2]
 8011eec:	2f01      	cmp	r7, #1
 8011eee:	706b      	strb	r3, [r5, #1]
 8011ef0:	f105 0302 	add.w	r3, r5, #2
 8011ef4:	d04a      	beq.n	8011f8c <ucdr_deserialize_float+0xf8>
 8011ef6:	7873      	ldrb	r3, [r6, #1]
 8011ef8:	2f02      	cmp	r7, #2
 8011efa:	70ab      	strb	r3, [r5, #2]
 8011efc:	f105 0303 	add.w	r3, r5, #3
 8011f00:	d048      	beq.n	8011f94 <ucdr_deserialize_float+0x100>
 8011f02:	7833      	ldrb	r3, [r6, #0]
 8011f04:	70eb      	strb	r3, [r5, #3]
 8011f06:	6923      	ldr	r3, [r4, #16]
 8011f08:	2104      	movs	r1, #4
 8011f0a:	68a2      	ldr	r2, [r4, #8]
 8011f0c:	3304      	adds	r3, #4
 8011f0e:	7da0      	ldrb	r0, [r4, #22]
 8011f10:	444a      	add	r2, r9
 8011f12:	7561      	strb	r1, [r4, #21]
 8011f14:	1bdb      	subs	r3, r3, r7
 8011f16:	f080 0001 	eor.w	r0, r0, #1
 8011f1a:	60a2      	str	r2, [r4, #8]
 8011f1c:	6123      	str	r3, [r4, #16]
 8011f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f22:	2104      	movs	r1, #4
 8011f24:	4620      	mov	r0, r4
 8011f26:	f000 f9e7 	bl	80122f8 <ucdr_check_final_buffer_behavior>
 8011f2a:	b1b0      	cbz	r0, 8011f5a <ucdr_deserialize_float+0xc6>
 8011f2c:	7d23      	ldrb	r3, [r4, #20]
 8011f2e:	2b01      	cmp	r3, #1
 8011f30:	68a3      	ldr	r3, [r4, #8]
 8011f32:	d017      	beq.n	8011f64 <ucdr_deserialize_float+0xd0>
 8011f34:	78db      	ldrb	r3, [r3, #3]
 8011f36:	702b      	strb	r3, [r5, #0]
 8011f38:	68a3      	ldr	r3, [r4, #8]
 8011f3a:	789b      	ldrb	r3, [r3, #2]
 8011f3c:	706b      	strb	r3, [r5, #1]
 8011f3e:	68a3      	ldr	r3, [r4, #8]
 8011f40:	785b      	ldrb	r3, [r3, #1]
 8011f42:	70ab      	strb	r3, [r5, #2]
 8011f44:	68a3      	ldr	r3, [r4, #8]
 8011f46:	781b      	ldrb	r3, [r3, #0]
 8011f48:	70eb      	strb	r3, [r5, #3]
 8011f4a:	2104      	movs	r1, #4
 8011f4c:	68a2      	ldr	r2, [r4, #8]
 8011f4e:	6923      	ldr	r3, [r4, #16]
 8011f50:	440a      	add	r2, r1
 8011f52:	7561      	strb	r1, [r4, #21]
 8011f54:	440b      	add	r3, r1
 8011f56:	60a2      	str	r2, [r4, #8]
 8011f58:	6123      	str	r3, [r4, #16]
 8011f5a:	7da0      	ldrb	r0, [r4, #22]
 8011f5c:	f080 0001 	eor.w	r0, r0, #1
 8011f60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	602b      	str	r3, [r5, #0]
 8011f68:	e7ef      	b.n	8011f4a <ucdr_deserialize_float+0xb6>
 8011f6a:	68a2      	ldr	r2, [r4, #8]
 8011f6c:	6923      	ldr	r3, [r4, #16]
 8011f6e:	1bd2      	subs	r2, r2, r7
 8011f70:	7da0      	ldrb	r0, [r4, #22]
 8011f72:	1bdb      	subs	r3, r3, r7
 8011f74:	f884 8015 	strb.w	r8, [r4, #21]
 8011f78:	f080 0001 	eor.w	r0, r0, #1
 8011f7c:	60a2      	str	r2, [r4, #8]
 8011f7e:	6123      	str	r3, [r4, #16]
 8011f80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f84:	68a3      	ldr	r3, [r4, #8]
 8011f86:	789b      	ldrb	r3, [r3, #2]
 8011f88:	706b      	strb	r3, [r5, #1]
 8011f8a:	1cab      	adds	r3, r5, #2
 8011f8c:	68a2      	ldr	r2, [r4, #8]
 8011f8e:	7852      	ldrb	r2, [r2, #1]
 8011f90:	f803 2b01 	strb.w	r2, [r3], #1
 8011f94:	68a2      	ldr	r2, [r4, #8]
 8011f96:	7812      	ldrb	r2, [r2, #0]
 8011f98:	701a      	strb	r2, [r3, #0]
 8011f9a:	e7b4      	b.n	8011f06 <ucdr_deserialize_float+0x72>
 8011f9c:	4631      	mov	r1, r6
 8011f9e:	463a      	mov	r2, r7
 8011fa0:	4628      	mov	r0, r5
 8011fa2:	f001 fe6c 	bl	8013c7e <memcpy>
 8011fa6:	464a      	mov	r2, r9
 8011fa8:	19e8      	adds	r0, r5, r7
 8011faa:	68a1      	ldr	r1, [r4, #8]
 8011fac:	f001 fe67 	bl	8013c7e <memcpy>
 8011fb0:	e7a9      	b.n	8011f06 <ucdr_deserialize_float+0x72>
 8011fb2:	bf00      	nop

08011fb4 <ucdr_serialize_double>:
 8011fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fb8:	4604      	mov	r4, r0
 8011fba:	b082      	sub	sp, #8
 8011fbc:	2108      	movs	r1, #8
 8011fbe:	ed8d 0b00 	vstr	d0, [sp]
 8011fc2:	f000 f9bd 	bl	8012340 <ucdr_buffer_alignment>
 8011fc6:	4601      	mov	r1, r0
 8011fc8:	4620      	mov	r0, r4
 8011fca:	7d67      	ldrb	r7, [r4, #21]
 8011fcc:	f000 f9fc 	bl	80123c8 <ucdr_advance_buffer>
 8011fd0:	2108      	movs	r1, #8
 8011fd2:	4620      	mov	r0, r4
 8011fd4:	f000 f984 	bl	80122e0 <ucdr_check_buffer_available_for>
 8011fd8:	2800      	cmp	r0, #0
 8011fda:	d14e      	bne.n	801207a <ucdr_serialize_double+0xc6>
 8011fdc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011fe0:	42ab      	cmp	r3, r5
 8011fe2:	d945      	bls.n	8012070 <ucdr_serialize_double+0xbc>
 8011fe4:	1b5e      	subs	r6, r3, r5
 8011fe6:	60a3      	str	r3, [r4, #8]
 8011fe8:	6923      	ldr	r3, [r4, #16]
 8011fea:	4620      	mov	r0, r4
 8011fec:	f1c6 0808 	rsb	r8, r6, #8
 8011ff0:	4433      	add	r3, r6
 8011ff2:	4641      	mov	r1, r8
 8011ff4:	6123      	str	r3, [r4, #16]
 8011ff6:	f000 f97f 	bl	80122f8 <ucdr_check_final_buffer_behavior>
 8011ffa:	2800      	cmp	r0, #0
 8011ffc:	d074      	beq.n	80120e8 <ucdr_serialize_double+0x134>
 8011ffe:	7d23      	ldrb	r3, [r4, #20]
 8012000:	2b01      	cmp	r3, #1
 8012002:	f000 809b 	beq.w	801213c <ucdr_serialize_double+0x188>
 8012006:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801200a:	702b      	strb	r3, [r5, #0]
 801200c:	2e00      	cmp	r6, #0
 801200e:	d078      	beq.n	8012102 <ucdr_serialize_double+0x14e>
 8012010:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012014:	2e01      	cmp	r6, #1
 8012016:	706b      	strb	r3, [r5, #1]
 8012018:	d077      	beq.n	801210a <ucdr_serialize_double+0x156>
 801201a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801201e:	2e02      	cmp	r6, #2
 8012020:	70ab      	strb	r3, [r5, #2]
 8012022:	d076      	beq.n	8012112 <ucdr_serialize_double+0x15e>
 8012024:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012028:	2e03      	cmp	r6, #3
 801202a:	70eb      	strb	r3, [r5, #3]
 801202c:	d075      	beq.n	801211a <ucdr_serialize_double+0x166>
 801202e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012032:	2e04      	cmp	r6, #4
 8012034:	712b      	strb	r3, [r5, #4]
 8012036:	d074      	beq.n	8012122 <ucdr_serialize_double+0x16e>
 8012038:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801203c:	2e05      	cmp	r6, #5
 801203e:	716b      	strb	r3, [r5, #5]
 8012040:	d073      	beq.n	801212a <ucdr_serialize_double+0x176>
 8012042:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012046:	2e06      	cmp	r6, #6
 8012048:	71ab      	strb	r3, [r5, #6]
 801204a:	d072      	beq.n	8012132 <ucdr_serialize_double+0x17e>
 801204c:	f89d 3000 	ldrb.w	r3, [sp]
 8012050:	71eb      	strb	r3, [r5, #7]
 8012052:	6923      	ldr	r3, [r4, #16]
 8012054:	2108      	movs	r1, #8
 8012056:	68a2      	ldr	r2, [r4, #8]
 8012058:	3308      	adds	r3, #8
 801205a:	7da0      	ldrb	r0, [r4, #22]
 801205c:	4442      	add	r2, r8
 801205e:	7561      	strb	r1, [r4, #21]
 8012060:	1b9e      	subs	r6, r3, r6
 8012062:	f080 0001 	eor.w	r0, r0, #1
 8012066:	60a2      	str	r2, [r4, #8]
 8012068:	6126      	str	r6, [r4, #16]
 801206a:	b002      	add	sp, #8
 801206c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012070:	2108      	movs	r1, #8
 8012072:	4620      	mov	r0, r4
 8012074:	f000 f940 	bl	80122f8 <ucdr_check_final_buffer_behavior>
 8012078:	b350      	cbz	r0, 80120d0 <ucdr_serialize_double+0x11c>
 801207a:	7d23      	ldrb	r3, [r4, #20]
 801207c:	2b01      	cmp	r3, #1
 801207e:	d02d      	beq.n	80120dc <ucdr_serialize_double+0x128>
 8012080:	68a3      	ldr	r3, [r4, #8]
 8012082:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012086:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801208a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801208e:	7018      	strb	r0, [r3, #0]
 8012090:	68a3      	ldr	r3, [r4, #8]
 8012092:	705a      	strb	r2, [r3, #1]
 8012094:	68a3      	ldr	r3, [r4, #8]
 8012096:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801209a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 801209e:	7099      	strb	r1, [r3, #2]
 80120a0:	68a3      	ldr	r3, [r4, #8]
 80120a2:	70da      	strb	r2, [r3, #3]
 80120a4:	68a3      	ldr	r3, [r4, #8]
 80120a6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80120aa:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80120ae:	7118      	strb	r0, [r3, #4]
 80120b0:	68a3      	ldr	r3, [r4, #8]
 80120b2:	715a      	strb	r2, [r3, #5]
 80120b4:	68a3      	ldr	r3, [r4, #8]
 80120b6:	f89d 2000 	ldrb.w	r2, [sp]
 80120ba:	7199      	strb	r1, [r3, #6]
 80120bc:	68a3      	ldr	r3, [r4, #8]
 80120be:	71da      	strb	r2, [r3, #7]
 80120c0:	2108      	movs	r1, #8
 80120c2:	68a2      	ldr	r2, [r4, #8]
 80120c4:	6923      	ldr	r3, [r4, #16]
 80120c6:	440a      	add	r2, r1
 80120c8:	7561      	strb	r1, [r4, #21]
 80120ca:	440b      	add	r3, r1
 80120cc:	60a2      	str	r2, [r4, #8]
 80120ce:	6123      	str	r3, [r4, #16]
 80120d0:	7da0      	ldrb	r0, [r4, #22]
 80120d2:	f080 0001 	eor.w	r0, r0, #1
 80120d6:	b002      	add	sp, #8
 80120d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120dc:	466b      	mov	r3, sp
 80120de:	68a2      	ldr	r2, [r4, #8]
 80120e0:	cb03      	ldmia	r3!, {r0, r1}
 80120e2:	6010      	str	r0, [r2, #0]
 80120e4:	6051      	str	r1, [r2, #4]
 80120e6:	e7eb      	b.n	80120c0 <ucdr_serialize_double+0x10c>
 80120e8:	68a2      	ldr	r2, [r4, #8]
 80120ea:	6923      	ldr	r3, [r4, #16]
 80120ec:	7da0      	ldrb	r0, [r4, #22]
 80120ee:	1b92      	subs	r2, r2, r6
 80120f0:	1b9b      	subs	r3, r3, r6
 80120f2:	7567      	strb	r7, [r4, #21]
 80120f4:	f080 0001 	eor.w	r0, r0, #1
 80120f8:	60a2      	str	r2, [r4, #8]
 80120fa:	6123      	str	r3, [r4, #16]
 80120fc:	b002      	add	sp, #8
 80120fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012102:	68a3      	ldr	r3, [r4, #8]
 8012104:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012108:	701a      	strb	r2, [r3, #0]
 801210a:	68a3      	ldr	r3, [r4, #8]
 801210c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012110:	701a      	strb	r2, [r3, #0]
 8012112:	68a3      	ldr	r3, [r4, #8]
 8012114:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012118:	701a      	strb	r2, [r3, #0]
 801211a:	68a3      	ldr	r3, [r4, #8]
 801211c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012120:	701a      	strb	r2, [r3, #0]
 8012122:	68a3      	ldr	r3, [r4, #8]
 8012124:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012128:	701a      	strb	r2, [r3, #0]
 801212a:	68a3      	ldr	r3, [r4, #8]
 801212c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012130:	701a      	strb	r2, [r3, #0]
 8012132:	68a3      	ldr	r3, [r4, #8]
 8012134:	f89d 2000 	ldrb.w	r2, [sp]
 8012138:	701a      	strb	r2, [r3, #0]
 801213a:	e78a      	b.n	8012052 <ucdr_serialize_double+0x9e>
 801213c:	4628      	mov	r0, r5
 801213e:	466d      	mov	r5, sp
 8012140:	4632      	mov	r2, r6
 8012142:	4629      	mov	r1, r5
 8012144:	f001 fd9b 	bl	8013c7e <memcpy>
 8012148:	4642      	mov	r2, r8
 801214a:	19a9      	adds	r1, r5, r6
 801214c:	68a0      	ldr	r0, [r4, #8]
 801214e:	f001 fd96 	bl	8013c7e <memcpy>
 8012152:	e77e      	b.n	8012052 <ucdr_serialize_double+0x9e>

08012154 <ucdr_deserialize_double>:
 8012154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012158:	4604      	mov	r4, r0
 801215a:	460d      	mov	r5, r1
 801215c:	2108      	movs	r1, #8
 801215e:	f000 f8ef 	bl	8012340 <ucdr_buffer_alignment>
 8012162:	4601      	mov	r1, r0
 8012164:	4620      	mov	r0, r4
 8012166:	f894 8015 	ldrb.w	r8, [r4, #21]
 801216a:	f000 f92d 	bl	80123c8 <ucdr_advance_buffer>
 801216e:	2108      	movs	r1, #8
 8012170:	4620      	mov	r0, r4
 8012172:	f000 f8b5 	bl	80122e0 <ucdr_check_buffer_available_for>
 8012176:	2800      	cmp	r0, #0
 8012178:	d151      	bne.n	801221e <ucdr_deserialize_double+0xca>
 801217a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801217e:	42be      	cmp	r6, r7
 8012180:	d948      	bls.n	8012214 <ucdr_deserialize_double+0xc0>
 8012182:	6923      	ldr	r3, [r4, #16]
 8012184:	4620      	mov	r0, r4
 8012186:	60a6      	str	r6, [r4, #8]
 8012188:	1bf6      	subs	r6, r6, r7
 801218a:	4433      	add	r3, r6
 801218c:	f1c6 0908 	rsb	r9, r6, #8
 8012190:	6123      	str	r3, [r4, #16]
 8012192:	4649      	mov	r1, r9
 8012194:	f000 f8b0 	bl	80122f8 <ucdr_check_final_buffer_behavior>
 8012198:	2800      	cmp	r0, #0
 801219a:	d06d      	beq.n	8012278 <ucdr_deserialize_double+0x124>
 801219c:	7d23      	ldrb	r3, [r4, #20]
 801219e:	2b01      	cmp	r3, #1
 80121a0:	f000 8093 	beq.w	80122ca <ucdr_deserialize_double+0x176>
 80121a4:	79fb      	ldrb	r3, [r7, #7]
 80121a6:	702b      	strb	r3, [r5, #0]
 80121a8:	2e00      	cmp	r6, #0
 80121aa:	d072      	beq.n	8012292 <ucdr_deserialize_double+0x13e>
 80121ac:	79bb      	ldrb	r3, [r7, #6]
 80121ae:	2e01      	cmp	r6, #1
 80121b0:	706b      	strb	r3, [r5, #1]
 80121b2:	f105 0302 	add.w	r3, r5, #2
 80121b6:	d070      	beq.n	801229a <ucdr_deserialize_double+0x146>
 80121b8:	797b      	ldrb	r3, [r7, #5]
 80121ba:	2e02      	cmp	r6, #2
 80121bc:	70ab      	strb	r3, [r5, #2]
 80121be:	f105 0303 	add.w	r3, r5, #3
 80121c2:	d06e      	beq.n	80122a2 <ucdr_deserialize_double+0x14e>
 80121c4:	793b      	ldrb	r3, [r7, #4]
 80121c6:	2e03      	cmp	r6, #3
 80121c8:	70eb      	strb	r3, [r5, #3]
 80121ca:	f105 0304 	add.w	r3, r5, #4
 80121ce:	d06c      	beq.n	80122aa <ucdr_deserialize_double+0x156>
 80121d0:	78fb      	ldrb	r3, [r7, #3]
 80121d2:	2e04      	cmp	r6, #4
 80121d4:	712b      	strb	r3, [r5, #4]
 80121d6:	f105 0305 	add.w	r3, r5, #5
 80121da:	d06a      	beq.n	80122b2 <ucdr_deserialize_double+0x15e>
 80121dc:	78bb      	ldrb	r3, [r7, #2]
 80121de:	2e05      	cmp	r6, #5
 80121e0:	716b      	strb	r3, [r5, #5]
 80121e2:	f105 0306 	add.w	r3, r5, #6
 80121e6:	d068      	beq.n	80122ba <ucdr_deserialize_double+0x166>
 80121e8:	787b      	ldrb	r3, [r7, #1]
 80121ea:	2e06      	cmp	r6, #6
 80121ec:	71ab      	strb	r3, [r5, #6]
 80121ee:	f105 0307 	add.w	r3, r5, #7
 80121f2:	d066      	beq.n	80122c2 <ucdr_deserialize_double+0x16e>
 80121f4:	783b      	ldrb	r3, [r7, #0]
 80121f6:	71eb      	strb	r3, [r5, #7]
 80121f8:	6923      	ldr	r3, [r4, #16]
 80121fa:	2108      	movs	r1, #8
 80121fc:	68a2      	ldr	r2, [r4, #8]
 80121fe:	3308      	adds	r3, #8
 8012200:	7da0      	ldrb	r0, [r4, #22]
 8012202:	444a      	add	r2, r9
 8012204:	7561      	strb	r1, [r4, #21]
 8012206:	1b9e      	subs	r6, r3, r6
 8012208:	f080 0001 	eor.w	r0, r0, #1
 801220c:	60a2      	str	r2, [r4, #8]
 801220e:	6126      	str	r6, [r4, #16]
 8012210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012214:	2108      	movs	r1, #8
 8012216:	4620      	mov	r0, r4
 8012218:	f000 f86e 	bl	80122f8 <ucdr_check_final_buffer_behavior>
 801221c:	b310      	cbz	r0, 8012264 <ucdr_deserialize_double+0x110>
 801221e:	7d23      	ldrb	r3, [r4, #20]
 8012220:	2b01      	cmp	r3, #1
 8012222:	68a3      	ldr	r3, [r4, #8]
 8012224:	d023      	beq.n	801226e <ucdr_deserialize_double+0x11a>
 8012226:	79db      	ldrb	r3, [r3, #7]
 8012228:	702b      	strb	r3, [r5, #0]
 801222a:	68a3      	ldr	r3, [r4, #8]
 801222c:	799b      	ldrb	r3, [r3, #6]
 801222e:	706b      	strb	r3, [r5, #1]
 8012230:	68a3      	ldr	r3, [r4, #8]
 8012232:	795b      	ldrb	r3, [r3, #5]
 8012234:	70ab      	strb	r3, [r5, #2]
 8012236:	68a3      	ldr	r3, [r4, #8]
 8012238:	791b      	ldrb	r3, [r3, #4]
 801223a:	70eb      	strb	r3, [r5, #3]
 801223c:	68a3      	ldr	r3, [r4, #8]
 801223e:	78db      	ldrb	r3, [r3, #3]
 8012240:	712b      	strb	r3, [r5, #4]
 8012242:	68a3      	ldr	r3, [r4, #8]
 8012244:	789b      	ldrb	r3, [r3, #2]
 8012246:	716b      	strb	r3, [r5, #5]
 8012248:	68a3      	ldr	r3, [r4, #8]
 801224a:	785b      	ldrb	r3, [r3, #1]
 801224c:	71ab      	strb	r3, [r5, #6]
 801224e:	68a3      	ldr	r3, [r4, #8]
 8012250:	781b      	ldrb	r3, [r3, #0]
 8012252:	71eb      	strb	r3, [r5, #7]
 8012254:	2108      	movs	r1, #8
 8012256:	68a2      	ldr	r2, [r4, #8]
 8012258:	6923      	ldr	r3, [r4, #16]
 801225a:	440a      	add	r2, r1
 801225c:	7561      	strb	r1, [r4, #21]
 801225e:	440b      	add	r3, r1
 8012260:	60a2      	str	r2, [r4, #8]
 8012262:	6123      	str	r3, [r4, #16]
 8012264:	7da0      	ldrb	r0, [r4, #22]
 8012266:	f080 0001 	eor.w	r0, r0, #1
 801226a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801226e:	681a      	ldr	r2, [r3, #0]
 8012270:	685b      	ldr	r3, [r3, #4]
 8012272:	602a      	str	r2, [r5, #0]
 8012274:	606b      	str	r3, [r5, #4]
 8012276:	e7ed      	b.n	8012254 <ucdr_deserialize_double+0x100>
 8012278:	68a2      	ldr	r2, [r4, #8]
 801227a:	6923      	ldr	r3, [r4, #16]
 801227c:	1b92      	subs	r2, r2, r6
 801227e:	7da0      	ldrb	r0, [r4, #22]
 8012280:	1b9b      	subs	r3, r3, r6
 8012282:	f884 8015 	strb.w	r8, [r4, #21]
 8012286:	f080 0001 	eor.w	r0, r0, #1
 801228a:	60a2      	str	r2, [r4, #8]
 801228c:	6123      	str	r3, [r4, #16]
 801228e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012292:	68a3      	ldr	r3, [r4, #8]
 8012294:	799b      	ldrb	r3, [r3, #6]
 8012296:	706b      	strb	r3, [r5, #1]
 8012298:	1cab      	adds	r3, r5, #2
 801229a:	68a2      	ldr	r2, [r4, #8]
 801229c:	7952      	ldrb	r2, [r2, #5]
 801229e:	f803 2b01 	strb.w	r2, [r3], #1
 80122a2:	68a2      	ldr	r2, [r4, #8]
 80122a4:	7912      	ldrb	r2, [r2, #4]
 80122a6:	f803 2b01 	strb.w	r2, [r3], #1
 80122aa:	68a2      	ldr	r2, [r4, #8]
 80122ac:	78d2      	ldrb	r2, [r2, #3]
 80122ae:	f803 2b01 	strb.w	r2, [r3], #1
 80122b2:	68a2      	ldr	r2, [r4, #8]
 80122b4:	7892      	ldrb	r2, [r2, #2]
 80122b6:	f803 2b01 	strb.w	r2, [r3], #1
 80122ba:	68a2      	ldr	r2, [r4, #8]
 80122bc:	7852      	ldrb	r2, [r2, #1]
 80122be:	f803 2b01 	strb.w	r2, [r3], #1
 80122c2:	68a2      	ldr	r2, [r4, #8]
 80122c4:	7812      	ldrb	r2, [r2, #0]
 80122c6:	701a      	strb	r2, [r3, #0]
 80122c8:	e796      	b.n	80121f8 <ucdr_deserialize_double+0xa4>
 80122ca:	4639      	mov	r1, r7
 80122cc:	4632      	mov	r2, r6
 80122ce:	4628      	mov	r0, r5
 80122d0:	f001 fcd5 	bl	8013c7e <memcpy>
 80122d4:	464a      	mov	r2, r9
 80122d6:	19a8      	adds	r0, r5, r6
 80122d8:	68a1      	ldr	r1, [r4, #8]
 80122da:	f001 fcd0 	bl	8013c7e <memcpy>
 80122de:	e78b      	b.n	80121f8 <ucdr_deserialize_double+0xa4>

080122e0 <ucdr_check_buffer_available_for>:
 80122e0:	7d83      	ldrb	r3, [r0, #22]
 80122e2:	b93b      	cbnz	r3, 80122f4 <ucdr_check_buffer_available_for+0x14>
 80122e4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80122e8:	4419      	add	r1, r3
 80122ea:	4288      	cmp	r0, r1
 80122ec:	bf34      	ite	cc
 80122ee:	2000      	movcc	r0, #0
 80122f0:	2001      	movcs	r0, #1
 80122f2:	4770      	bx	lr
 80122f4:	2000      	movs	r0, #0
 80122f6:	4770      	bx	lr

080122f8 <ucdr_check_final_buffer_behavior>:
 80122f8:	7d83      	ldrb	r3, [r0, #22]
 80122fa:	b943      	cbnz	r3, 801230e <ucdr_check_final_buffer_behavior+0x16>
 80122fc:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8012300:	b510      	push	{r4, lr}
 8012302:	4291      	cmp	r1, r2
 8012304:	4604      	mov	r4, r0
 8012306:	d205      	bcs.n	8012314 <ucdr_check_final_buffer_behavior+0x1c>
 8012308:	2301      	movs	r3, #1
 801230a:	4618      	mov	r0, r3
 801230c:	bd10      	pop	{r4, pc}
 801230e:	2300      	movs	r3, #0
 8012310:	4618      	mov	r0, r3
 8012312:	4770      	bx	lr
 8012314:	6982      	ldr	r2, [r0, #24]
 8012316:	b13a      	cbz	r2, 8012328 <ucdr_check_final_buffer_behavior+0x30>
 8012318:	69c1      	ldr	r1, [r0, #28]
 801231a:	4790      	blx	r2
 801231c:	f080 0301 	eor.w	r3, r0, #1
 8012320:	75a0      	strb	r0, [r4, #22]
 8012322:	b2db      	uxtb	r3, r3
 8012324:	4618      	mov	r0, r3
 8012326:	bd10      	pop	{r4, pc}
 8012328:	2001      	movs	r0, #1
 801232a:	75a0      	strb	r0, [r4, #22]
 801232c:	e7fa      	b.n	8012324 <ucdr_check_final_buffer_behavior+0x2c>
 801232e:	bf00      	nop

08012330 <ucdr_alignment>:
 8012330:	fbb0 f2f1 	udiv	r2, r0, r1
 8012334:	fb02 0011 	mls	r0, r2, r1, r0
 8012338:	1e4b      	subs	r3, r1, #1
 801233a:	1a08      	subs	r0, r1, r0
 801233c:	4018      	ands	r0, r3
 801233e:	4770      	bx	lr

08012340 <ucdr_buffer_alignment>:
 8012340:	7d43      	ldrb	r3, [r0, #21]
 8012342:	428b      	cmp	r3, r1
 8012344:	d209      	bcs.n	801235a <ucdr_buffer_alignment+0x1a>
 8012346:	6903      	ldr	r3, [r0, #16]
 8012348:	1e4a      	subs	r2, r1, #1
 801234a:	fbb3 f0f1 	udiv	r0, r3, r1
 801234e:	fb01 3010 	mls	r0, r1, r0, r3
 8012352:	1a09      	subs	r1, r1, r0
 8012354:	ea01 0002 	and.w	r0, r1, r2
 8012358:	4770      	bx	lr
 801235a:	2000      	movs	r0, #0
 801235c:	4770      	bx	lr
 801235e:	bf00      	nop

08012360 <ucdr_align_to>:
 8012360:	b538      	push	{r3, r4, r5, lr}
 8012362:	4604      	mov	r4, r0
 8012364:	460d      	mov	r5, r1
 8012366:	f7ff ffeb 	bl	8012340 <ucdr_buffer_alignment>
 801236a:	68a3      	ldr	r3, [r4, #8]
 801236c:	7565      	strb	r5, [r4, #21]
 801236e:	181a      	adds	r2, r3, r0
 8012370:	6923      	ldr	r3, [r4, #16]
 8012372:	4418      	add	r0, r3
 8012374:	6863      	ldr	r3, [r4, #4]
 8012376:	4293      	cmp	r3, r2
 8012378:	6120      	str	r0, [r4, #16]
 801237a:	bf28      	it	cs
 801237c:	4613      	movcs	r3, r2
 801237e:	60a3      	str	r3, [r4, #8]
 8012380:	bd38      	pop	{r3, r4, r5, pc}
 8012382:	bf00      	nop

08012384 <ucdr_buffer_remaining>:
 8012384:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8012388:	1a10      	subs	r0, r2, r0
 801238a:	4770      	bx	lr

0801238c <ucdr_check_final_buffer_behavior_array>:
 801238c:	b538      	push	{r3, r4, r5, lr}
 801238e:	7d83      	ldrb	r3, [r0, #22]
 8012390:	b9a3      	cbnz	r3, 80123bc <ucdr_check_final_buffer_behavior_array+0x30>
 8012392:	4604      	mov	r4, r0
 8012394:	460d      	mov	r5, r1
 8012396:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801239a:	429a      	cmp	r2, r3
 801239c:	d300      	bcc.n	80123a0 <ucdr_check_final_buffer_behavior_array+0x14>
 801239e:	b931      	cbnz	r1, 80123ae <ucdr_check_final_buffer_behavior_array+0x22>
 80123a0:	4620      	mov	r0, r4
 80123a2:	f7ff ffef 	bl	8012384 <ucdr_buffer_remaining>
 80123a6:	42a8      	cmp	r0, r5
 80123a8:	bf28      	it	cs
 80123aa:	4628      	movcs	r0, r5
 80123ac:	bd38      	pop	{r3, r4, r5, pc}
 80123ae:	6983      	ldr	r3, [r0, #24]
 80123b0:	b133      	cbz	r3, 80123c0 <ucdr_check_final_buffer_behavior_array+0x34>
 80123b2:	69c1      	ldr	r1, [r0, #28]
 80123b4:	4798      	blx	r3
 80123b6:	75a0      	strb	r0, [r4, #22]
 80123b8:	2800      	cmp	r0, #0
 80123ba:	d0f1      	beq.n	80123a0 <ucdr_check_final_buffer_behavior_array+0x14>
 80123bc:	2000      	movs	r0, #0
 80123be:	bd38      	pop	{r3, r4, r5, pc}
 80123c0:	2301      	movs	r3, #1
 80123c2:	7583      	strb	r3, [r0, #22]
 80123c4:	e7fa      	b.n	80123bc <ucdr_check_final_buffer_behavior_array+0x30>
 80123c6:	bf00      	nop

080123c8 <ucdr_advance_buffer>:
 80123c8:	b538      	push	{r3, r4, r5, lr}
 80123ca:	4604      	mov	r4, r0
 80123cc:	460d      	mov	r5, r1
 80123ce:	f7ff ff87 	bl	80122e0 <ucdr_check_buffer_available_for>
 80123d2:	b178      	cbz	r0, 80123f4 <ucdr_advance_buffer+0x2c>
 80123d4:	6923      	ldr	r3, [r4, #16]
 80123d6:	68a2      	ldr	r2, [r4, #8]
 80123d8:	442b      	add	r3, r5
 80123da:	442a      	add	r2, r5
 80123dc:	6123      	str	r3, [r4, #16]
 80123de:	2301      	movs	r3, #1
 80123e0:	60a2      	str	r2, [r4, #8]
 80123e2:	7563      	strb	r3, [r4, #21]
 80123e4:	bd38      	pop	{r3, r4, r5, pc}
 80123e6:	68a2      	ldr	r2, [r4, #8]
 80123e8:	1a2d      	subs	r5, r5, r0
 80123ea:	6923      	ldr	r3, [r4, #16]
 80123ec:	4402      	add	r2, r0
 80123ee:	4418      	add	r0, r3
 80123f0:	60a2      	str	r2, [r4, #8]
 80123f2:	6120      	str	r0, [r4, #16]
 80123f4:	4629      	mov	r1, r5
 80123f6:	2201      	movs	r2, #1
 80123f8:	4620      	mov	r0, r4
 80123fa:	f7ff ffc7 	bl	801238c <ucdr_check_final_buffer_behavior_array>
 80123fe:	2800      	cmp	r0, #0
 8012400:	d1f1      	bne.n	80123e6 <ucdr_advance_buffer+0x1e>
 8012402:	2301      	movs	r3, #1
 8012404:	7563      	strb	r3, [r4, #21]
 8012406:	bd38      	pop	{r3, r4, r5, pc}

08012408 <__default_zero_allocate>:
 8012408:	f001 b842 	b.w	8013490 <calloc>

0801240c <__default_reallocate>:
 801240c:	f001 b92c 	b.w	8013668 <realloc>

08012410 <__default_deallocate>:
 8012410:	f001 b874 	b.w	80134fc <free>

08012414 <__default_allocate>:
 8012414:	f001 b86a 	b.w	80134ec <malloc>

08012418 <rcutils_get_default_allocator>:
 8012418:	b510      	push	{r4, lr}
 801241a:	4c05      	ldr	r4, [pc, #20]	@ (8012430 <rcutils_get_default_allocator+0x18>)
 801241c:	4686      	mov	lr, r0
 801241e:	4684      	mov	ip, r0
 8012420:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012422:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012426:	6823      	ldr	r3, [r4, #0]
 8012428:	4670      	mov	r0, lr
 801242a:	f8cc 3000 	str.w	r3, [ip]
 801242e:	bd10      	pop	{r4, pc}
 8012430:	24000c90 	.word	0x24000c90

08012434 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 8012434:	4a02      	ldr	r2, [pc, #8]	@ (8012440 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0xc>)
 8012436:	4b03      	ldr	r3, [pc, #12]	@ (8012444 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x10>)
 8012438:	6812      	ldr	r2, [r2, #0]
 801243a:	601a      	str	r2, [r3, #0]
 801243c:	4770      	bx	lr
 801243e:	bf00      	nop
 8012440:	24000d28 	.word	0x24000d28
 8012444:	24000cac 	.word	0x24000cac

08012448 <rosgraph_msgs__msg__Clock__rosidl_typesupport_introspection_c__Clock_init_function>:
 8012448:	f000 bd44 	b.w	8012ed4 <rosgraph_msgs__msg__Clock__init>

0801244c <rosgraph_msgs__msg__Clock__rosidl_typesupport_introspection_c__Clock_fini_function>:
 801244c:	f000 bd54 	b.w	8012ef8 <rosgraph_msgs__msg__Clock__fini>

08012450 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 8012450:	b508      	push	{r3, lr}
 8012452:	f7ff f839 	bl	80114c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012456:	4b06      	ldr	r3, [pc, #24]	@ (8012470 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x20>)
 8012458:	4906      	ldr	r1, [pc, #24]	@ (8012474 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x24>)
 801245a:	681a      	ldr	r2, [r3, #0]
 801245c:	60c8      	str	r0, [r1, #12]
 801245e:	b10a      	cbz	r2, 8012464 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x14>
 8012460:	4803      	ldr	r0, [pc, #12]	@ (8012470 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x20>)
 8012462:	bd08      	pop	{r3, pc}
 8012464:	4a04      	ldr	r2, [pc, #16]	@ (8012478 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x28>)
 8012466:	4802      	ldr	r0, [pc, #8]	@ (8012470 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x20>)
 8012468:	6812      	ldr	r2, [r2, #0]
 801246a:	601a      	str	r2, [r3, #0]
 801246c:	bd08      	pop	{r3, pc}
 801246e:	bf00      	nop
 8012470:	24000cf4 	.word	0x24000cf4
 8012474:	24000cb8 	.word	0x24000cb8
 8012478:	24000d2c 	.word	0x24000d2c

0801247c <get_serialized_size_rosgraph_msgs__msg__Clock>:
 801247c:	b108      	cbz	r0, 8012482 <get_serialized_size_rosgraph_msgs__msg__Clock+0x6>
 801247e:	f7ff b831 	b.w	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012482:	4770      	bx	lr

08012484 <_Clock__max_serialized_size>:
 8012484:	b500      	push	{lr}
 8012486:	b083      	sub	sp, #12
 8012488:	2301      	movs	r3, #1
 801248a:	2100      	movs	r1, #0
 801248c:	f10d 0007 	add.w	r0, sp, #7
 8012490:	f88d 3007 	strb.w	r3, [sp, #7]
 8012494:	f7ff f876 	bl	8011584 <max_serialized_size_builtin_interfaces__msg__Time>
 8012498:	b003      	add	sp, #12
 801249a:	f85d fb04 	ldr.w	pc, [sp], #4
 801249e:	bf00      	nop

080124a0 <_Clock__get_serialized_size>:
 80124a0:	b110      	cbz	r0, 80124a8 <_Clock__get_serialized_size+0x8>
 80124a2:	2100      	movs	r1, #0
 80124a4:	f7ff b81e 	b.w	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 80124a8:	4770      	bx	lr
 80124aa:	bf00      	nop

080124ac <_Clock__cdr_deserialize>:
 80124ac:	b570      	push	{r4, r5, r6, lr}
 80124ae:	460c      	mov	r4, r1
 80124b0:	b151      	cbz	r1, 80124c8 <_Clock__cdr_deserialize+0x1c>
 80124b2:	4605      	mov	r5, r0
 80124b4:	f7ff f87a 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80124b8:	4603      	mov	r3, r0
 80124ba:	4621      	mov	r1, r4
 80124bc:	4628      	mov	r0, r5
 80124be:	685b      	ldr	r3, [r3, #4]
 80124c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124c4:	68db      	ldr	r3, [r3, #12]
 80124c6:	4718      	bx	r3
 80124c8:	4608      	mov	r0, r1
 80124ca:	bd70      	pop	{r4, r5, r6, pc}

080124cc <_Clock__cdr_serialize>:
 80124cc:	b160      	cbz	r0, 80124e8 <_Clock__cdr_serialize+0x1c>
 80124ce:	b570      	push	{r4, r5, r6, lr}
 80124d0:	4604      	mov	r4, r0
 80124d2:	460d      	mov	r5, r1
 80124d4:	f7ff f86a 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80124d8:	4603      	mov	r3, r0
 80124da:	4629      	mov	r1, r5
 80124dc:	4620      	mov	r0, r4
 80124de:	685b      	ldr	r3, [r3, #4]
 80124e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124e4:	689b      	ldr	r3, [r3, #8]
 80124e6:	4718      	bx	r3
 80124e8:	4770      	bx	lr
 80124ea:	bf00      	nop

080124ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 80124ec:	4800      	ldr	r0, [pc, #0]	@ (80124f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x4>)
 80124ee:	4770      	bx	lr
 80124f0:	24000d00 	.word	0x24000d00

080124f4 <get_message_typesupport_handle_function>:
 80124f4:	b510      	push	{r4, lr}
 80124f6:	4604      	mov	r4, r0
 80124f8:	6800      	ldr	r0, [r0, #0]
 80124fa:	f7ed fef1 	bl	80002e0 <strcmp>
 80124fe:	2800      	cmp	r0, #0
 8012500:	bf0c      	ite	eq
 8012502:	4620      	moveq	r0, r4
 8012504:	2000      	movne	r0, #0
 8012506:	bd10      	pop	{r4, pc}

08012508 <get_service_typesupport_handle_function>:
 8012508:	b510      	push	{r4, lr}
 801250a:	4604      	mov	r4, r0
 801250c:	6800      	ldr	r0, [r0, #0]
 801250e:	f7ed fee7 	bl	80002e0 <strcmp>
 8012512:	2800      	cmp	r0, #0
 8012514:	bf0c      	ite	eq
 8012516:	4620      	moveq	r0, r4
 8012518:	2000      	movne	r0, #0
 801251a:	bd10      	pop	{r4, pc}

0801251c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 801251c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012520:	6805      	ldr	r5, [r0, #0]
 8012522:	4604      	mov	r4, r0
 8012524:	460e      	mov	r6, r1
 8012526:	4628      	mov	r0, r5
 8012528:	f7ed feda 	bl	80002e0 <strcmp>
 801252c:	b1c8      	cbz	r0, 8012562 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801252e:	4b11      	ldr	r3, [pc, #68]	@ (8012574 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	429d      	cmp	r5, r3
 8012534:	d112      	bne.n	801255c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8012536:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801253a:	f8d8 4000 	ldr.w	r4, [r8]
 801253e:	b16c      	cbz	r4, 801255c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8012540:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8012544:	2700      	movs	r7, #0
 8012546:	3d04      	subs	r5, #4
 8012548:	4631      	mov	r1, r6
 801254a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801254e:	f7ed fec7 	bl	80002e0 <strcmp>
 8012552:	00bb      	lsls	r3, r7, #2
 8012554:	b140      	cbz	r0, 8012568 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8012556:	3701      	adds	r7, #1
 8012558:	42bc      	cmp	r4, r7
 801255a:	d1f5      	bne.n	8012548 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 801255c:	2000      	movs	r0, #0
 801255e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012562:	4620      	mov	r0, r4
 8012564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012568:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801256c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012570:	58d3      	ldr	r3, [r2, r3]
 8012572:	4718      	bx	r3
 8012574:	24000d28 	.word	0x24000d28

08012578 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 8012578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801257c:	6805      	ldr	r5, [r0, #0]
 801257e:	4604      	mov	r4, r0
 8012580:	460e      	mov	r6, r1
 8012582:	4628      	mov	r0, r5
 8012584:	f7ed feac 	bl	80002e0 <strcmp>
 8012588:	b1c8      	cbz	r0, 80125be <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 801258a:	4b11      	ldr	r3, [pc, #68]	@ (80125d0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	429d      	cmp	r5, r3
 8012590:	d112      	bne.n	80125b8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8012592:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8012596:	f8d8 4000 	ldr.w	r4, [r8]
 801259a:	b16c      	cbz	r4, 80125b8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 801259c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80125a0:	2700      	movs	r7, #0
 80125a2:	3d04      	subs	r5, #4
 80125a4:	4631      	mov	r1, r6
 80125a6:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80125aa:	f7ed fe99 	bl	80002e0 <strcmp>
 80125ae:	00bb      	lsls	r3, r7, #2
 80125b0:	b140      	cbz	r0, 80125c4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 80125b2:	3701      	adds	r7, #1
 80125b4:	42bc      	cmp	r4, r7
 80125b6:	d1f5      	bne.n	80125a4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 80125b8:	2000      	movs	r0, #0
 80125ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125be:	4620      	mov	r0, r4
 80125c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125c4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80125c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80125cc:	58d3      	ldr	r3, [r2, r3]
 80125ce:	4718      	bx	r3
 80125d0:	24000d28 	.word	0x24000d28

080125d4 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 80125d4:	f000 bc94 	b.w	8012f00 <std_msgs__msg__Header__init>

080125d8 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 80125d8:	f000 bcb6 	b.w	8012f48 <std_msgs__msg__Header__fini>

080125dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 80125dc:	b508      	push	{r3, lr}
 80125de:	f7fe ff73 	bl	80114c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80125e2:	4b06      	ldr	r3, [pc, #24]	@ (80125fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80125e4:	4906      	ldr	r1, [pc, #24]	@ (8012600 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 80125e6:	681a      	ldr	r2, [r3, #0]
 80125e8:	60c8      	str	r0, [r1, #12]
 80125ea:	b10a      	cbz	r2, 80125f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 80125ec:	4803      	ldr	r0, [pc, #12]	@ (80125fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80125ee:	bd08      	pop	{r3, pc}
 80125f0:	4a04      	ldr	r2, [pc, #16]	@ (8012604 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 80125f2:	4802      	ldr	r0, [pc, #8]	@ (80125fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80125f4:	6812      	ldr	r2, [r2, #0]
 80125f6:	601a      	str	r2, [r3, #0]
 80125f8:	bd08      	pop	{r3, pc}
 80125fa:	bf00      	nop
 80125fc:	24000da8 	.word	0x24000da8
 8012600:	24000d30 	.word	0x24000d30
 8012604:	24000d2c 	.word	0x24000d2c

08012608 <_Header__max_serialized_size>:
 8012608:	b500      	push	{lr}
 801260a:	b083      	sub	sp, #12
 801260c:	2301      	movs	r3, #1
 801260e:	2100      	movs	r1, #0
 8012610:	f10d 0007 	add.w	r0, sp, #7
 8012614:	f88d 3007 	strb.w	r3, [sp, #7]
 8012618:	f7fe ffb4 	bl	8011584 <max_serialized_size_builtin_interfaces__msg__Time>
 801261c:	b003      	add	sp, #12
 801261e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012622:	bf00      	nop

08012624 <get_serialized_size_std_msgs__msg__Header>:
 8012624:	b570      	push	{r4, r5, r6, lr}
 8012626:	4605      	mov	r5, r0
 8012628:	b168      	cbz	r0, 8012646 <get_serialized_size_std_msgs__msg__Header+0x22>
 801262a:	460c      	mov	r4, r1
 801262c:	f7fe ff5a 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012630:	2104      	movs	r1, #4
 8012632:	1826      	adds	r6, r4, r0
 8012634:	f1c4 0405 	rsb	r4, r4, #5
 8012638:	4630      	mov	r0, r6
 801263a:	f7ff fe79 	bl	8012330 <ucdr_alignment>
 801263e:	68e9      	ldr	r1, [r5, #12]
 8012640:	440c      	add	r4, r1
 8012642:	4404      	add	r4, r0
 8012644:	19a0      	adds	r0, r4, r6
 8012646:	bd70      	pop	{r4, r5, r6, pc}

08012648 <_Header__cdr_deserialize>:
 8012648:	b5f0      	push	{r4, r5, r6, r7, lr}
 801264a:	460c      	mov	r4, r1
 801264c:	b083      	sub	sp, #12
 801264e:	b1e9      	cbz	r1, 801268c <_Header__cdr_deserialize+0x44>
 8012650:	4606      	mov	r6, r0
 8012652:	f7fe ffab 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012656:	4603      	mov	r3, r0
 8012658:	4621      	mov	r1, r4
 801265a:	4630      	mov	r0, r6
 801265c:	685b      	ldr	r3, [r3, #4]
 801265e:	68db      	ldr	r3, [r3, #12]
 8012660:	4798      	blx	r3
 8012662:	6927      	ldr	r7, [r4, #16]
 8012664:	ab01      	add	r3, sp, #4
 8012666:	68a1      	ldr	r1, [r4, #8]
 8012668:	463a      	mov	r2, r7
 801266a:	4630      	mov	r0, r6
 801266c:	f000 fc18 	bl	8012ea0 <ucdr_deserialize_sequence_char>
 8012670:	9b01      	ldr	r3, [sp, #4]
 8012672:	4605      	mov	r5, r0
 8012674:	b920      	cbnz	r0, 8012680 <_Header__cdr_deserialize+0x38>
 8012676:	429f      	cmp	r7, r3
 8012678:	d30c      	bcc.n	8012694 <_Header__cdr_deserialize+0x4c>
 801267a:	4628      	mov	r0, r5
 801267c:	b003      	add	sp, #12
 801267e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012680:	b103      	cbz	r3, 8012684 <_Header__cdr_deserialize+0x3c>
 8012682:	3b01      	subs	r3, #1
 8012684:	4628      	mov	r0, r5
 8012686:	60e3      	str	r3, [r4, #12]
 8012688:	b003      	add	sp, #12
 801268a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801268c:	460d      	mov	r5, r1
 801268e:	4628      	mov	r0, r5
 8012690:	b003      	add	sp, #12
 8012692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012694:	2101      	movs	r1, #1
 8012696:	4630      	mov	r0, r6
 8012698:	75b5      	strb	r5, [r6, #22]
 801269a:	7571      	strb	r1, [r6, #21]
 801269c:	60e5      	str	r5, [r4, #12]
 801269e:	f7ff fe5f 	bl	8012360 <ucdr_align_to>
 80126a2:	4630      	mov	r0, r6
 80126a4:	9901      	ldr	r1, [sp, #4]
 80126a6:	f7ff fe8f 	bl	80123c8 <ucdr_advance_buffer>
 80126aa:	4628      	mov	r0, r5
 80126ac:	b003      	add	sp, #12
 80126ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080126b0 <_Header__cdr_serialize>:
 80126b0:	b308      	cbz	r0, 80126f6 <_Header__cdr_serialize+0x46>
 80126b2:	b570      	push	{r4, r5, r6, lr}
 80126b4:	4604      	mov	r4, r0
 80126b6:	460d      	mov	r5, r1
 80126b8:	f7fe ff78 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80126bc:	4603      	mov	r3, r0
 80126be:	4629      	mov	r1, r5
 80126c0:	4620      	mov	r0, r4
 80126c2:	685b      	ldr	r3, [r3, #4]
 80126c4:	689b      	ldr	r3, [r3, #8]
 80126c6:	4798      	blx	r3
 80126c8:	68a6      	ldr	r6, [r4, #8]
 80126ca:	b15e      	cbz	r6, 80126e4 <_Header__cdr_serialize+0x34>
 80126cc:	4630      	mov	r0, r6
 80126ce:	f7ed fe11 	bl	80002f4 <strlen>
 80126d2:	4603      	mov	r3, r0
 80126d4:	1c42      	adds	r2, r0, #1
 80126d6:	4631      	mov	r1, r6
 80126d8:	4628      	mov	r0, r5
 80126da:	60e3      	str	r3, [r4, #12]
 80126dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80126e0:	f000 bbcc 	b.w	8012e7c <ucdr_serialize_sequence_char>
 80126e4:	4633      	mov	r3, r6
 80126e6:	4632      	mov	r2, r6
 80126e8:	4631      	mov	r1, r6
 80126ea:	4628      	mov	r0, r5
 80126ec:	60e3      	str	r3, [r4, #12]
 80126ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80126f2:	f000 bbc3 	b.w	8012e7c <ucdr_serialize_sequence_char>
 80126f6:	4770      	bx	lr

080126f8 <_Header__get_serialized_size>:
 80126f8:	b538      	push	{r3, r4, r5, lr}
 80126fa:	4604      	mov	r4, r0
 80126fc:	b150      	cbz	r0, 8012714 <_Header__get_serialized_size+0x1c>
 80126fe:	2100      	movs	r1, #0
 8012700:	f7fe fef0 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012704:	2104      	movs	r1, #4
 8012706:	4605      	mov	r5, r0
 8012708:	f7ff fe12 	bl	8012330 <ucdr_alignment>
 801270c:	68e2      	ldr	r2, [r4, #12]
 801270e:	3205      	adds	r2, #5
 8012710:	1953      	adds	r3, r2, r5
 8012712:	4418      	add	r0, r3
 8012714:	bd38      	pop	{r3, r4, r5, pc}
 8012716:	bf00      	nop

08012718 <max_serialized_size_std_msgs__msg__Header>:
 8012718:	2301      	movs	r3, #1
 801271a:	b510      	push	{r4, lr}
 801271c:	7003      	strb	r3, [r0, #0]
 801271e:	4604      	mov	r4, r0
 8012720:	f7fe ff30 	bl	8011584 <max_serialized_size_builtin_interfaces__msg__Time>
 8012724:	2300      	movs	r3, #0
 8012726:	7023      	strb	r3, [r4, #0]
 8012728:	bd10      	pop	{r4, pc}
 801272a:	bf00      	nop

0801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 801272c:	4800      	ldr	r0, [pc, #0]	@ (8012730 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 801272e:	4770      	bx	lr
 8012730:	24000db4 	.word	0x24000db4

08012734 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8012734:	4a02      	ldr	r2, [pc, #8]	@ (8012740 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xc>)
 8012736:	4b03      	ldr	r3, [pc, #12]	@ (8012744 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x10>)
 8012738:	6812      	ldr	r2, [r2, #0]
 801273a:	601a      	str	r2, [r3, #0]
 801273c:	4770      	bx	lr
 801273e:	bf00      	nop
 8012740:	24000d28 	.word	0x24000d28
 8012744:	24000de4 	.word	0x24000de4

08012748 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8012748:	4a02      	ldr	r2, [pc, #8]	@ (8012754 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xc>)
 801274a:	4b03      	ldr	r3, [pc, #12]	@ (8012758 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x10>)
 801274c:	6812      	ldr	r2, [r2, #0]
 801274e:	601a      	str	r2, [r3, #0]
 8012750:	4770      	bx	lr
 8012752:	bf00      	nop
 8012754:	24000d28 	.word	0x24000d28
 8012758:	24000df8 	.word	0x24000df8

0801275c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 801275c:	4a02      	ldr	r2, [pc, #8]	@ (8012768 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xc>)
 801275e:	4b03      	ldr	r3, [pc, #12]	@ (801276c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x10>)
 8012760:	6812      	ldr	r2, [r2, #0]
 8012762:	601a      	str	r2, [r3, #0]
 8012764:	4770      	bx	lr
 8012766:	bf00      	nop
 8012768:	24000d28 	.word	0x24000d28
 801276c:	24000e0c 	.word	0x24000e0c

08012770 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8012770:	4a02      	ldr	r2, [pc, #8]	@ (801277c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xc>)
 8012772:	4b03      	ldr	r3, [pc, #12]	@ (8012780 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x10>)
 8012774:	6812      	ldr	r2, [r2, #0]
 8012776:	601a      	str	r2, [r3, #0]
 8012778:	4770      	bx	lr
 801277a:	bf00      	nop
 801277c:	24000d28 	.word	0x24000d28
 8012780:	24000e20 	.word	0x24000e20

08012784 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_init_function>:
 8012784:	f000 bbec 	b.w	8012f60 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>

08012788 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_fini_function>:
 8012788:	f000 bc0e 	b.w	8012fa8 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>

0801278c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 801278c:	b510      	push	{r4, lr}
 801278e:	4c08      	ldr	r4, [pc, #32]	@ (80127b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x24>)
 8012790:	f7ff ff24 	bl	80125dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012794:	60e0      	str	r0, [r4, #12]
 8012796:	f000 fc73 	bl	8013080 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 801279a:	4b06      	ldr	r3, [pc, #24]	@ (80127b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 801279c:	64a0      	str	r0, [r4, #72]	@ 0x48
 801279e:	681a      	ldr	r2, [r3, #0]
 80127a0:	b10a      	cbz	r2, 80127a6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1a>
 80127a2:	4804      	ldr	r0, [pc, #16]	@ (80127b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 80127a4:	bd10      	pop	{r4, pc}
 80127a6:	4a04      	ldr	r2, [pc, #16]	@ (80127b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x2c>)
 80127a8:	4802      	ldr	r0, [pc, #8]	@ (80127b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 80127aa:	6812      	ldr	r2, [r2, #0]
 80127ac:	601a      	str	r2, [r3, #0]
 80127ae:	bd10      	pop	{r4, pc}
 80127b0:	24000e2c 	.word	0x24000e2c
 80127b4:	24000ea4 	.word	0x24000ea4
 80127b8:	24000d2c 	.word	0x24000d2c

080127bc <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_init_function>:
 80127bc:	f000 bc00 	b.w	8012fc0 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>

080127c0 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_fini_function>:
 80127c0:	f000 bc22 	b.w	8013008 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>

080127c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80127c4:	b510      	push	{r4, lr}
 80127c6:	4c08      	ldr	r4, [pc, #32]	@ (80127e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x24>)
 80127c8:	f7ff ff08 	bl	80125dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 80127cc:	60e0      	str	r0, [r4, #12]
 80127ce:	f000 fc69 	bl	80130a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 80127d2:	4b06      	ldr	r3, [pc, #24]	@ (80127ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 80127d4:	64a0      	str	r0, [r4, #72]	@ 0x48
 80127d6:	681a      	ldr	r2, [r3, #0]
 80127d8:	b10a      	cbz	r2, 80127de <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1a>
 80127da:	4804      	ldr	r0, [pc, #16]	@ (80127ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 80127dc:	bd10      	pop	{r4, pc}
 80127de:	4a04      	ldr	r2, [pc, #16]	@ (80127f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x2c>)
 80127e0:	4802      	ldr	r0, [pc, #8]	@ (80127ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 80127e2:	6812      	ldr	r2, [r2, #0]
 80127e4:	601a      	str	r2, [r3, #0]
 80127e6:	bd10      	pop	{r4, pc}
 80127e8:	24000eb0 	.word	0x24000eb0
 80127ec:	24000f28 	.word	0x24000f28
 80127f0:	24000d2c 	.word	0x24000d2c

080127f4 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_init_function>:
 80127f4:	f000 bc14 	b.w	8013020 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>

080127f8 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_fini_function>:
 80127f8:	f000 bc24 	b.w	8013044 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>

080127fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80127fc:	b508      	push	{r3, lr}
 80127fe:	f7fe fe63 	bl	80114c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012802:	4b06      	ldr	r3, [pc, #24]	@ (801281c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8012804:	4906      	ldr	r1, [pc, #24]	@ (8012820 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x24>)
 8012806:	681a      	ldr	r2, [r3, #0]
 8012808:	60c8      	str	r0, [r1, #12]
 801280a:	b10a      	cbz	r2, 8012810 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>
 801280c:	4803      	ldr	r0, [pc, #12]	@ (801281c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 801280e:	bd08      	pop	{r3, pc}
 8012810:	4a04      	ldr	r2, [pc, #16]	@ (8012824 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x28>)
 8012812:	4802      	ldr	r0, [pc, #8]	@ (801281c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8012814:	6812      	ldr	r2, [r2, #0]
 8012816:	601a      	str	r2, [r3, #0]
 8012818:	bd08      	pop	{r3, pc}
 801281a:	bf00      	nop
 801281c:	24000fac 	.word	0x24000fac
 8012820:	24000f34 	.word	0x24000f34
 8012824:	24000d2c 	.word	0x24000d2c

08012828 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_init_function>:
 8012828:	f000 bc10 	b.w	801304c <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>

0801282c <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_fini_function>:
 801282c:	f000 bc20 	b.w	8013070 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>

08012830 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8012830:	b508      	push	{r3, lr}
 8012832:	f7fe fe49 	bl	80114c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012836:	4b06      	ldr	r3, [pc, #24]	@ (8012850 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8012838:	4906      	ldr	r1, [pc, #24]	@ (8012854 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x24>)
 801283a:	681a      	ldr	r2, [r3, #0]
 801283c:	60c8      	str	r0, [r1, #12]
 801283e:	b10a      	cbz	r2, 8012844 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>
 8012840:	4803      	ldr	r0, [pc, #12]	@ (8012850 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8012842:	bd08      	pop	{r3, pc}
 8012844:	4a04      	ldr	r2, [pc, #16]	@ (8012858 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x28>)
 8012846:	4802      	ldr	r0, [pc, #8]	@ (8012850 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8012848:	6812      	ldr	r2, [r2, #0]
 801284a:	601a      	str	r2, [r3, #0]
 801284c:	bd08      	pop	{r3, pc}
 801284e:	bf00      	nop
 8012850:	24001030 	.word	0x24001030
 8012854:	24000fb8 	.word	0x24000fb8
 8012858:	24000d2c 	.word	0x24000d2c

0801285c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 801285c:	b538      	push	{r3, r4, r5, lr}
 801285e:	4604      	mov	r4, r0
 8012860:	b150      	cbz	r0, 8012878 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1c>
 8012862:	460d      	mov	r5, r1
 8012864:	f7ff fede 	bl	8012624 <get_serialized_size_std_msgs__msg__Header>
 8012868:	4603      	mov	r3, r0
 801286a:	f104 0018 	add.w	r0, r4, #24
 801286e:	461c      	mov	r4, r3
 8012870:	18e9      	adds	r1, r5, r3
 8012872:	f000 fc25 	bl	80130c0 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8012876:	4420      	add	r0, r4
 8012878:	bd38      	pop	{r3, r4, r5, pc}
 801287a:	bf00      	nop

0801287c <_ActuationCommandStamped__cdr_deserialize>:
 801287c:	b570      	push	{r4, r5, r6, lr}
 801287e:	460c      	mov	r4, r1
 8012880:	b199      	cbz	r1, 80128aa <_ActuationCommandStamped__cdr_deserialize+0x2e>
 8012882:	4605      	mov	r5, r0
 8012884:	f7ff ff52 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012888:	4603      	mov	r3, r0
 801288a:	4621      	mov	r1, r4
 801288c:	4628      	mov	r0, r5
 801288e:	685b      	ldr	r3, [r3, #4]
 8012890:	68db      	ldr	r3, [r3, #12]
 8012892:	4798      	blx	r3
 8012894:	f000 fc9c 	bl	80131d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8012898:	4603      	mov	r3, r0
 801289a:	f104 0118 	add.w	r1, r4, #24
 801289e:	4628      	mov	r0, r5
 80128a0:	685b      	ldr	r3, [r3, #4]
 80128a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80128a6:	68db      	ldr	r3, [r3, #12]
 80128a8:	4718      	bx	r3
 80128aa:	4608      	mov	r0, r1
 80128ac:	bd70      	pop	{r4, r5, r6, pc}
 80128ae:	bf00      	nop

080128b0 <_ActuationCommandStamped__cdr_serialize>:
 80128b0:	b510      	push	{r4, lr}
 80128b2:	b082      	sub	sp, #8
 80128b4:	9101      	str	r1, [sp, #4]
 80128b6:	b1a0      	cbz	r0, 80128e2 <_ActuationCommandStamped__cdr_serialize+0x32>
 80128b8:	4604      	mov	r4, r0
 80128ba:	f7ff ff37 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80128be:	4603      	mov	r3, r0
 80128c0:	9901      	ldr	r1, [sp, #4]
 80128c2:	4620      	mov	r0, r4
 80128c4:	685b      	ldr	r3, [r3, #4]
 80128c6:	689b      	ldr	r3, [r3, #8]
 80128c8:	4798      	blx	r3
 80128ca:	f000 fc81 	bl	80131d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 80128ce:	4603      	mov	r3, r0
 80128d0:	9901      	ldr	r1, [sp, #4]
 80128d2:	f104 0018 	add.w	r0, r4, #24
 80128d6:	685b      	ldr	r3, [r3, #4]
 80128d8:	689b      	ldr	r3, [r3, #8]
 80128da:	b002      	add	sp, #8
 80128dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128e0:	4718      	bx	r3
 80128e2:	b002      	add	sp, #8
 80128e4:	bd10      	pop	{r4, pc}
 80128e6:	bf00      	nop

080128e8 <_ActuationCommandStamped__get_serialized_size>:
 80128e8:	b510      	push	{r4, lr}
 80128ea:	4604      	mov	r4, r0
 80128ec:	b148      	cbz	r0, 8012902 <_ActuationCommandStamped__get_serialized_size+0x1a>
 80128ee:	2100      	movs	r1, #0
 80128f0:	f7ff fe98 	bl	8012624 <get_serialized_size_std_msgs__msg__Header>
 80128f4:	4601      	mov	r1, r0
 80128f6:	f104 0018 	add.w	r0, r4, #24
 80128fa:	460c      	mov	r4, r1
 80128fc:	f000 fbe0 	bl	80130c0 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8012900:	4420      	add	r0, r4
 8012902:	bd10      	pop	{r4, pc}

08012904 <_ActuationCommandStamped__max_serialized_size>:
 8012904:	b510      	push	{r4, lr}
 8012906:	b082      	sub	sp, #8
 8012908:	2301      	movs	r3, #1
 801290a:	2100      	movs	r1, #0
 801290c:	f10d 0007 	add.w	r0, sp, #7
 8012910:	f88d 3007 	strb.w	r3, [sp, #7]
 8012914:	f7ff ff00 	bl	8012718 <max_serialized_size_std_msgs__msg__Header>
 8012918:	4604      	mov	r4, r0
 801291a:	f10d 0007 	add.w	r0, sp, #7
 801291e:	4621      	mov	r1, r4
 8012920:	f000 fc3c 	bl	801319c <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8012924:	4420      	add	r0, r4
 8012926:	b002      	add	sp, #8
 8012928:	bd10      	pop	{r4, pc}
 801292a:	bf00      	nop

0801292c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 801292c:	4800      	ldr	r0, [pc, #0]	@ (8012930 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x4>)
 801292e:	4770      	bx	lr
 8012930:	2400103c 	.word	0x2400103c

08012934 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8012934:	b538      	push	{r3, r4, r5, lr}
 8012936:	4604      	mov	r4, r0
 8012938:	b150      	cbz	r0, 8012950 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1c>
 801293a:	460d      	mov	r5, r1
 801293c:	f7ff fe72 	bl	8012624 <get_serialized_size_std_msgs__msg__Header>
 8012940:	4603      	mov	r3, r0
 8012942:	f104 0018 	add.w	r0, r4, #24
 8012946:	461c      	mov	r4, r3
 8012948:	18e9      	adds	r1, r5, r3
 801294a:	f000 fc45 	bl	80131d8 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 801294e:	4420      	add	r0, r4
 8012950:	bd38      	pop	{r3, r4, r5, pc}
 8012952:	bf00      	nop

08012954 <_ActuationStatusStamped__cdr_deserialize>:
 8012954:	b570      	push	{r4, r5, r6, lr}
 8012956:	460c      	mov	r4, r1
 8012958:	b199      	cbz	r1, 8012982 <_ActuationStatusStamped__cdr_deserialize+0x2e>
 801295a:	4605      	mov	r5, r0
 801295c:	f7ff fee6 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012960:	4603      	mov	r3, r0
 8012962:	4621      	mov	r1, r4
 8012964:	4628      	mov	r0, r5
 8012966:	685b      	ldr	r3, [r3, #4]
 8012968:	68db      	ldr	r3, [r3, #12]
 801296a:	4798      	blx	r3
 801296c:	f000 fcbc 	bl	80132e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8012970:	4603      	mov	r3, r0
 8012972:	f104 0118 	add.w	r1, r4, #24
 8012976:	4628      	mov	r0, r5
 8012978:	685b      	ldr	r3, [r3, #4]
 801297a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801297e:	68db      	ldr	r3, [r3, #12]
 8012980:	4718      	bx	r3
 8012982:	4608      	mov	r0, r1
 8012984:	bd70      	pop	{r4, r5, r6, pc}
 8012986:	bf00      	nop

08012988 <_ActuationStatusStamped__cdr_serialize>:
 8012988:	b510      	push	{r4, lr}
 801298a:	b082      	sub	sp, #8
 801298c:	9101      	str	r1, [sp, #4]
 801298e:	b1a0      	cbz	r0, 80129ba <_ActuationStatusStamped__cdr_serialize+0x32>
 8012990:	4604      	mov	r4, r0
 8012992:	f7ff fecb 	bl	801272c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012996:	4603      	mov	r3, r0
 8012998:	9901      	ldr	r1, [sp, #4]
 801299a:	4620      	mov	r0, r4
 801299c:	685b      	ldr	r3, [r3, #4]
 801299e:	689b      	ldr	r3, [r3, #8]
 80129a0:	4798      	blx	r3
 80129a2:	f000 fca1 	bl	80132e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 80129a6:	4603      	mov	r3, r0
 80129a8:	9901      	ldr	r1, [sp, #4]
 80129aa:	f104 0018 	add.w	r0, r4, #24
 80129ae:	685b      	ldr	r3, [r3, #4]
 80129b0:	689b      	ldr	r3, [r3, #8]
 80129b2:	b002      	add	sp, #8
 80129b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129b8:	4718      	bx	r3
 80129ba:	b002      	add	sp, #8
 80129bc:	bd10      	pop	{r4, pc}
 80129be:	bf00      	nop

080129c0 <_ActuationStatusStamped__get_serialized_size>:
 80129c0:	b510      	push	{r4, lr}
 80129c2:	4604      	mov	r4, r0
 80129c4:	b148      	cbz	r0, 80129da <_ActuationStatusStamped__get_serialized_size+0x1a>
 80129c6:	2100      	movs	r1, #0
 80129c8:	f7ff fe2c 	bl	8012624 <get_serialized_size_std_msgs__msg__Header>
 80129cc:	4601      	mov	r1, r0
 80129ce:	f104 0018 	add.w	r0, r4, #24
 80129d2:	460c      	mov	r4, r1
 80129d4:	f000 fc00 	bl	80131d8 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 80129d8:	4420      	add	r0, r4
 80129da:	bd10      	pop	{r4, pc}

080129dc <_ActuationStatusStamped__max_serialized_size>:
 80129dc:	b510      	push	{r4, lr}
 80129de:	b082      	sub	sp, #8
 80129e0:	2301      	movs	r3, #1
 80129e2:	2100      	movs	r1, #0
 80129e4:	f10d 0007 	add.w	r0, sp, #7
 80129e8:	f88d 3007 	strb.w	r3, [sp, #7]
 80129ec:	f7ff fe94 	bl	8012718 <max_serialized_size_std_msgs__msg__Header>
 80129f0:	4604      	mov	r4, r0
 80129f2:	f10d 0007 	add.w	r0, sp, #7
 80129f6:	4621      	mov	r1, r4
 80129f8:	f000 fc5c 	bl	80132b4 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 80129fc:	4420      	add	r0, r4
 80129fe:	b002      	add	sp, #8
 8012a00:	bd10      	pop	{r4, pc}
 8012a02:	bf00      	nop

08012a04 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8012a04:	4800      	ldr	r0, [pc, #0]	@ (8012a08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x4>)
 8012a06:	4770      	bx	lr
 8012a08:	24001064 	.word	0x24001064

08012a0c <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8012a0c:	b538      	push	{r3, r4, r5, lr}
 8012a0e:	b158      	cbz	r0, 8012a28 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x1c>
 8012a10:	460d      	mov	r5, r1
 8012a12:	f7fe fd67 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012a16:	2104      	movs	r1, #4
 8012a18:	182c      	adds	r4, r5, r0
 8012a1a:	f1c5 0504 	rsb	r5, r5, #4
 8012a1e:	4620      	mov	r0, r4
 8012a20:	f7ff fc86 	bl	8012330 <ucdr_alignment>
 8012a24:	4428      	add	r0, r5
 8012a26:	4420      	add	r0, r4
 8012a28:	bd38      	pop	{r3, r4, r5, pc}
 8012a2a:	bf00      	nop

08012a2c <_SteeringWheelStatusStamped__cdr_deserialize>:
 8012a2c:	b538      	push	{r3, r4, r5, lr}
 8012a2e:	460c      	mov	r4, r1
 8012a30:	b179      	cbz	r1, 8012a52 <_SteeringWheelStatusStamped__cdr_deserialize+0x26>
 8012a32:	4605      	mov	r5, r0
 8012a34:	f7fe fdba 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012a38:	4603      	mov	r3, r0
 8012a3a:	4621      	mov	r1, r4
 8012a3c:	4628      	mov	r0, r5
 8012a3e:	685b      	ldr	r3, [r3, #4]
 8012a40:	68db      	ldr	r3, [r3, #12]
 8012a42:	4798      	blx	r3
 8012a44:	f104 0108 	add.w	r1, r4, #8
 8012a48:	4628      	mov	r0, r5
 8012a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a4e:	f7ff ba21 	b.w	8011e94 <ucdr_deserialize_float>
 8012a52:	4608      	mov	r0, r1
 8012a54:	bd38      	pop	{r3, r4, r5, pc}
 8012a56:	bf00      	nop

08012a58 <_SteeringWheelStatusStamped__cdr_serialize>:
 8012a58:	b188      	cbz	r0, 8012a7e <_SteeringWheelStatusStamped__cdr_serialize+0x26>
 8012a5a:	b538      	push	{r3, r4, r5, lr}
 8012a5c:	4604      	mov	r4, r0
 8012a5e:	460d      	mov	r5, r1
 8012a60:	f7fe fda4 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012a64:	4603      	mov	r3, r0
 8012a66:	4629      	mov	r1, r5
 8012a68:	4620      	mov	r0, r4
 8012a6a:	685b      	ldr	r3, [r3, #4]
 8012a6c:	689b      	ldr	r3, [r3, #8]
 8012a6e:	4798      	blx	r3
 8012a70:	ed94 0a02 	vldr	s0, [r4, #8]
 8012a74:	4628      	mov	r0, r5
 8012a76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a7a:	f7ff b973 	b.w	8011d64 <ucdr_serialize_float>
 8012a7e:	4770      	bx	lr

08012a80 <_SteeringWheelStatusStamped__get_serialized_size>:
 8012a80:	b150      	cbz	r0, 8012a98 <_SteeringWheelStatusStamped__get_serialized_size+0x18>
 8012a82:	2100      	movs	r1, #0
 8012a84:	b510      	push	{r4, lr}
 8012a86:	f7fe fd2d 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012a8a:	4604      	mov	r4, r0
 8012a8c:	2104      	movs	r1, #4
 8012a8e:	f7ff fc4f 	bl	8012330 <ucdr_alignment>
 8012a92:	4420      	add	r0, r4
 8012a94:	3004      	adds	r0, #4
 8012a96:	bd10      	pop	{r4, pc}
 8012a98:	4770      	bx	lr
 8012a9a:	bf00      	nop

08012a9c <_SteeringWheelStatusStamped__max_serialized_size>:
 8012a9c:	b510      	push	{r4, lr}
 8012a9e:	b082      	sub	sp, #8
 8012aa0:	2301      	movs	r3, #1
 8012aa2:	2100      	movs	r1, #0
 8012aa4:	f10d 0007 	add.w	r0, sp, #7
 8012aa8:	f88d 3007 	strb.w	r3, [sp, #7]
 8012aac:	f7fe fd6a 	bl	8011584 <max_serialized_size_builtin_interfaces__msg__Time>
 8012ab0:	4604      	mov	r4, r0
 8012ab2:	2104      	movs	r1, #4
 8012ab4:	f7ff fc3c 	bl	8012330 <ucdr_alignment>
 8012ab8:	4420      	add	r0, r4
 8012aba:	3004      	adds	r0, #4
 8012abc:	b002      	add	sp, #8
 8012abe:	bd10      	pop	{r4, pc}

08012ac0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8012ac0:	4800      	ldr	r0, [pc, #0]	@ (8012ac4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x4>)
 8012ac2:	4770      	bx	lr
 8012ac4:	2400108c 	.word	0x2400108c

08012ac8 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8012ac8:	b538      	push	{r3, r4, r5, lr}
 8012aca:	b158      	cbz	r0, 8012ae4 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x1c>
 8012acc:	460d      	mov	r5, r1
 8012ace:	f7fe fd09 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012ad2:	2101      	movs	r1, #1
 8012ad4:	182c      	adds	r4, r5, r0
 8012ad6:	f1c5 0501 	rsb	r5, r5, #1
 8012ada:	4620      	mov	r0, r4
 8012adc:	f7ff fc28 	bl	8012330 <ucdr_alignment>
 8012ae0:	4428      	add	r0, r5
 8012ae2:	4420      	add	r0, r4
 8012ae4:	bd38      	pop	{r3, r4, r5, pc}
 8012ae6:	bf00      	nop

08012ae8 <_VehicleEmergencyStamped__cdr_deserialize>:
 8012ae8:	b538      	push	{r3, r4, r5, lr}
 8012aea:	460c      	mov	r4, r1
 8012aec:	b179      	cbz	r1, 8012b0e <_VehicleEmergencyStamped__cdr_deserialize+0x26>
 8012aee:	4605      	mov	r5, r0
 8012af0:	f7fe fd5c 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012af4:	4603      	mov	r3, r0
 8012af6:	4621      	mov	r1, r4
 8012af8:	4628      	mov	r0, r5
 8012afa:	685b      	ldr	r3, [r3, #4]
 8012afc:	68db      	ldr	r3, [r3, #12]
 8012afe:	4798      	blx	r3
 8012b00:	f104 0108 	add.w	r1, r4, #8
 8012b04:	4628      	mov	r0, r5
 8012b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b0a:	f7fe bd69 	b.w	80115e0 <ucdr_deserialize_bool>
 8012b0e:	4608      	mov	r0, r1
 8012b10:	bd38      	pop	{r3, r4, r5, pc}
 8012b12:	bf00      	nop

08012b14 <_VehicleEmergencyStamped__cdr_serialize>:
 8012b14:	b180      	cbz	r0, 8012b38 <_VehicleEmergencyStamped__cdr_serialize+0x24>
 8012b16:	b538      	push	{r3, r4, r5, lr}
 8012b18:	4604      	mov	r4, r0
 8012b1a:	460d      	mov	r5, r1
 8012b1c:	f7fe fd46 	bl	80115ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012b20:	4603      	mov	r3, r0
 8012b22:	4629      	mov	r1, r5
 8012b24:	4620      	mov	r0, r4
 8012b26:	685b      	ldr	r3, [r3, #4]
 8012b28:	689b      	ldr	r3, [r3, #8]
 8012b2a:	4798      	blx	r3
 8012b2c:	7a21      	ldrb	r1, [r4, #8]
 8012b2e:	4628      	mov	r0, r5
 8012b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b34:	f7fe bd3e 	b.w	80115b4 <ucdr_serialize_bool>
 8012b38:	4770      	bx	lr
 8012b3a:	bf00      	nop

08012b3c <_VehicleEmergencyStamped__get_serialized_size>:
 8012b3c:	b150      	cbz	r0, 8012b54 <_VehicleEmergencyStamped__get_serialized_size+0x18>
 8012b3e:	2100      	movs	r1, #0
 8012b40:	b510      	push	{r4, lr}
 8012b42:	f7fe fccf 	bl	80114e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012b46:	4604      	mov	r4, r0
 8012b48:	2101      	movs	r1, #1
 8012b4a:	f7ff fbf1 	bl	8012330 <ucdr_alignment>
 8012b4e:	4420      	add	r0, r4
 8012b50:	3001      	adds	r0, #1
 8012b52:	bd10      	pop	{r4, pc}
 8012b54:	4770      	bx	lr
 8012b56:	bf00      	nop

08012b58 <_VehicleEmergencyStamped__max_serialized_size>:
 8012b58:	b510      	push	{r4, lr}
 8012b5a:	b082      	sub	sp, #8
 8012b5c:	2401      	movs	r4, #1
 8012b5e:	2100      	movs	r1, #0
 8012b60:	f10d 0007 	add.w	r0, sp, #7
 8012b64:	f88d 4007 	strb.w	r4, [sp, #7]
 8012b68:	f7fe fd0c 	bl	8011584 <max_serialized_size_builtin_interfaces__msg__Time>
 8012b6c:	4621      	mov	r1, r4
 8012b6e:	4604      	mov	r4, r0
 8012b70:	f7ff fbde 	bl	8012330 <ucdr_alignment>
 8012b74:	4420      	add	r0, r4
 8012b76:	3001      	adds	r0, #1
 8012b78:	b002      	add	sp, #8
 8012b7a:	bd10      	pop	{r4, pc}

08012b7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8012b7c:	4800      	ldr	r0, [pc, #0]	@ (8012b80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x4>)
 8012b7e:	4770      	bx	lr
 8012b80:	240010b4 	.word	0x240010b4

08012b84 <autoware_auto_control_msgs__msg__AckermannControlCommand__init>:
 8012b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b86:	4605      	mov	r5, r0
 8012b88:	b300      	cbz	r0, 8012bcc <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x48>
 8012b8a:	f000 f971 	bl	8012e70 <builtin_interfaces__msg__Time__init>
 8012b8e:	4604      	mov	r4, r0
 8012b90:	b178      	cbz	r0, 8012bb2 <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x2e>
 8012b92:	f105 0608 	add.w	r6, r5, #8
 8012b96:	4630      	mov	r0, r6
 8012b98:	f000 f842 	bl	8012c20 <autoware_auto_control_msgs__msg__AckermannLateralCommand__init>
 8012b9c:	4604      	mov	r4, r0
 8012b9e:	b1c0      	cbz	r0, 8012bd2 <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x4e>
 8012ba0:	f105 0718 	add.w	r7, r5, #24
 8012ba4:	4638      	mov	r0, r7
 8012ba6:	f000 f853 	bl	8012c50 <autoware_auto_control_msgs__msg__LongitudinalCommand__init>
 8012baa:	4604      	mov	r4, r0
 8012bac:	b1e8      	cbz	r0, 8012bea <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x66>
 8012bae:	4620      	mov	r0, r4
 8012bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bb2:	4628      	mov	r0, r5
 8012bb4:	f000 f960 	bl	8012e78 <builtin_interfaces__msg__Time__fini>
 8012bb8:	f105 0008 	add.w	r0, r5, #8
 8012bbc:	f000 f844 	bl	8012c48 <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>
 8012bc0:	f105 0018 	add.w	r0, r5, #24
 8012bc4:	f000 f85a 	bl	8012c7c <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>
 8012bc8:	4620      	mov	r0, r4
 8012bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bcc:	4604      	mov	r4, r0
 8012bce:	4620      	mov	r0, r4
 8012bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bd2:	4628      	mov	r0, r5
 8012bd4:	f000 f950 	bl	8012e78 <builtin_interfaces__msg__Time__fini>
 8012bd8:	4630      	mov	r0, r6
 8012bda:	f000 f835 	bl	8012c48 <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>
 8012bde:	f105 0018 	add.w	r0, r5, #24
 8012be2:	f000 f84b 	bl	8012c7c <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>
 8012be6:	4620      	mov	r0, r4
 8012be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bea:	4628      	mov	r0, r5
 8012bec:	f000 f944 	bl	8012e78 <builtin_interfaces__msg__Time__fini>
 8012bf0:	4630      	mov	r0, r6
 8012bf2:	f000 f829 	bl	8012c48 <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>
 8012bf6:	4638      	mov	r0, r7
 8012bf8:	f000 f840 	bl	8012c7c <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>
 8012bfc:	e7d7      	b.n	8012bae <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x2a>
 8012bfe:	bf00      	nop

08012c00 <autoware_auto_control_msgs__msg__AckermannControlCommand__fini>:
 8012c00:	b168      	cbz	r0, 8012c1e <autoware_auto_control_msgs__msg__AckermannControlCommand__fini+0x1e>
 8012c02:	b510      	push	{r4, lr}
 8012c04:	4604      	mov	r4, r0
 8012c06:	f000 f937 	bl	8012e78 <builtin_interfaces__msg__Time__fini>
 8012c0a:	f104 0008 	add.w	r0, r4, #8
 8012c0e:	f000 f81b 	bl	8012c48 <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>
 8012c12:	f104 0018 	add.w	r0, r4, #24
 8012c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c1a:	f000 b82f 	b.w	8012c7c <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>
 8012c1e:	4770      	bx	lr

08012c20 <autoware_auto_control_msgs__msg__AckermannLateralCommand__init>:
 8012c20:	b538      	push	{r3, r4, r5, lr}
 8012c22:	4604      	mov	r4, r0
 8012c24:	b140      	cbz	r0, 8012c38 <autoware_auto_control_msgs__msg__AckermannLateralCommand__init+0x18>
 8012c26:	f000 f923 	bl	8012e70 <builtin_interfaces__msg__Time__init>
 8012c2a:	4605      	mov	r5, r0
 8012c2c:	b138      	cbz	r0, 8012c3e <autoware_auto_control_msgs__msg__AckermannLateralCommand__init+0x1e>
 8012c2e:	2300      	movs	r3, #0
 8012c30:	4628      	mov	r0, r5
 8012c32:	60a3      	str	r3, [r4, #8]
 8012c34:	60e3      	str	r3, [r4, #12]
 8012c36:	bd38      	pop	{r3, r4, r5, pc}
 8012c38:	4605      	mov	r5, r0
 8012c3a:	4628      	mov	r0, r5
 8012c3c:	bd38      	pop	{r3, r4, r5, pc}
 8012c3e:	4620      	mov	r0, r4
 8012c40:	f000 f91a 	bl	8012e78 <builtin_interfaces__msg__Time__fini>
 8012c44:	4628      	mov	r0, r5
 8012c46:	bd38      	pop	{r3, r4, r5, pc}

08012c48 <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>:
 8012c48:	b108      	cbz	r0, 8012c4e <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini+0x6>
 8012c4a:	f000 b915 	b.w	8012e78 <builtin_interfaces__msg__Time__fini>
 8012c4e:	4770      	bx	lr

08012c50 <autoware_auto_control_msgs__msg__LongitudinalCommand__init>:
 8012c50:	b538      	push	{r3, r4, r5, lr}
 8012c52:	4604      	mov	r4, r0
 8012c54:	b148      	cbz	r0, 8012c6a <autoware_auto_control_msgs__msg__LongitudinalCommand__init+0x1a>
 8012c56:	f000 f90b 	bl	8012e70 <builtin_interfaces__msg__Time__init>
 8012c5a:	4605      	mov	r5, r0
 8012c5c:	b140      	cbz	r0, 8012c70 <autoware_auto_control_msgs__msg__LongitudinalCommand__init+0x20>
 8012c5e:	2300      	movs	r3, #0
 8012c60:	4628      	mov	r0, r5
 8012c62:	60a3      	str	r3, [r4, #8]
 8012c64:	60e3      	str	r3, [r4, #12]
 8012c66:	6123      	str	r3, [r4, #16]
 8012c68:	bd38      	pop	{r3, r4, r5, pc}
 8012c6a:	4605      	mov	r5, r0
 8012c6c:	4628      	mov	r0, r5
 8012c6e:	bd38      	pop	{r3, r4, r5, pc}
 8012c70:	4620      	mov	r0, r4
 8012c72:	f000 f901 	bl	8012e78 <builtin_interfaces__msg__Time__fini>
 8012c76:	4628      	mov	r0, r5
 8012c78:	bd38      	pop	{r3, r4, r5, pc}
 8012c7a:	bf00      	nop

08012c7c <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>:
 8012c7c:	b108      	cbz	r0, 8012c82 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini+0x6>
 8012c7e:	f000 b8fb 	b.w	8012e78 <builtin_interfaces__msg__Time__fini>
 8012c82:	4770      	bx	lr

08012c84 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__init>:
 8012c84:	b538      	push	{r3, r4, r5, lr}
 8012c86:	4604      	mov	r4, r0
 8012c88:	b128      	cbz	r0, 8012c96 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__init+0x12>
 8012c8a:	f000 f8f1 	bl	8012e70 <builtin_interfaces__msg__Time__init>
 8012c8e:	4605      	mov	r5, r0
 8012c90:	b120      	cbz	r0, 8012c9c <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__init+0x18>
 8012c92:	4628      	mov	r0, r5
 8012c94:	bd38      	pop	{r3, r4, r5, pc}
 8012c96:	4605      	mov	r5, r0
 8012c98:	4628      	mov	r0, r5
 8012c9a:	bd38      	pop	{r3, r4, r5, pc}
 8012c9c:	4620      	mov	r0, r4
 8012c9e:	f000 f8eb 	bl	8012e78 <builtin_interfaces__msg__Time__fini>
 8012ca2:	4628      	mov	r0, r5
 8012ca4:	bd38      	pop	{r3, r4, r5, pc}
 8012ca6:	bf00      	nop

08012ca8 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__fini>:
 8012ca8:	b108      	cbz	r0, 8012cae <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__fini+0x6>
 8012caa:	f000 b8e5 	b.w	8012e78 <builtin_interfaces__msg__Time__fini>
 8012cae:	4770      	bx	lr

08012cb0 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__init>:
 8012cb0:	3800      	subs	r0, #0
 8012cb2:	bf18      	it	ne
 8012cb4:	2001      	movne	r0, #1
 8012cb6:	4770      	bx	lr

08012cb8 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__fini>:
 8012cb8:	4770      	bx	lr
 8012cba:	bf00      	nop

08012cbc <autoware_auto_vehicle_msgs__msg__ControlModeReport__init>:
 8012cbc:	b538      	push	{r3, r4, r5, lr}
 8012cbe:	4604      	mov	r4, r0
 8012cc0:	b138      	cbz	r0, 8012cd2 <autoware_auto_vehicle_msgs__msg__ControlModeReport__init+0x16>
 8012cc2:	f000 f8d5 	bl	8012e70 <builtin_interfaces__msg__Time__init>
 8012cc6:	4605      	mov	r5, r0
 8012cc8:	b130      	cbz	r0, 8012cd8 <autoware_auto_vehicle_msgs__msg__ControlModeReport__init+0x1c>
 8012cca:	2300      	movs	r3, #0
 8012ccc:	4628      	mov	r0, r5
 8012cce:	7223      	strb	r3, [r4, #8]
 8012cd0:	bd38      	pop	{r3, r4, r5, pc}
 8012cd2:	4605      	mov	r5, r0
 8012cd4:	4628      	mov	r0, r5
 8012cd6:	bd38      	pop	{r3, r4, r5, pc}
 8012cd8:	4620      	mov	r0, r4
 8012cda:	f000 f8cd 	bl	8012e78 <builtin_interfaces__msg__Time__fini>
 8012cde:	4628      	mov	r0, r5
 8012ce0:	bd38      	pop	{r3, r4, r5, pc}
 8012ce2:	bf00      	nop

08012ce4 <autoware_auto_vehicle_msgs__msg__ControlModeReport__fini>:
 8012ce4:	b108      	cbz	r0, 8012cea <autoware_auto_vehicle_msgs__msg__ControlModeReport__fini+0x6>
 8012ce6:	f000 b8c7 	b.w	8012e78 <builtin_interfaces__msg__Time__fini>
 8012cea:	4770      	bx	lr

08012cec <autoware_auto_vehicle_msgs__msg__GearCommand__init>:
 8012cec:	b538      	push	{r3, r4, r5, lr}
 8012cee:	4604      	mov	r4, r0
 8012cf0:	b138      	cbz	r0, 8012d02 <autoware_auto_vehicle_msgs__msg__GearCommand__init+0x16>
 8012cf2:	f000 f8bd 	bl	8012e70 <builtin_interfaces__msg__Time__init>
 8012cf6:	4605      	mov	r5, r0
 8012cf8:	b130      	cbz	r0, 8012d08 <autoware_auto_vehicle_msgs__msg__GearCommand__init+0x1c>
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	4628      	mov	r0, r5
 8012cfe:	7223      	strb	r3, [r4, #8]
 8012d00:	bd38      	pop	{r3, r4, r5, pc}
 8012d02:	4605      	mov	r5, r0
 8012d04:	4628      	mov	r0, r5
 8012d06:	bd38      	pop	{r3, r4, r5, pc}
 8012d08:	4620      	mov	r0, r4
 8012d0a:	f000 f8b5 	bl	8012e78 <builtin_interfaces__msg__Time__fini>
 8012d0e:	4628      	mov	r0, r5
 8012d10:	bd38      	pop	{r3, r4, r5, pc}
 8012d12:	bf00      	nop

08012d14 <autoware_auto_vehicle_msgs__msg__GearCommand__fini>:
 8012d14:	b108      	cbz	r0, 8012d1a <autoware_auto_vehicle_msgs__msg__GearCommand__fini+0x6>
 8012d16:	f000 b8af 	b.w	8012e78 <builtin_interfaces__msg__Time__fini>
 8012d1a:	4770      	bx	lr

08012d1c <autoware_auto_vehicle_msgs__msg__GearReport__init>:
 8012d1c:	b538      	push	{r3, r4, r5, lr}
 8012d1e:	4604      	mov	r4, r0
 8012d20:	b138      	cbz	r0, 8012d32 <autoware_auto_vehicle_msgs__msg__GearReport__init+0x16>
 8012d22:	f000 f8a5 	bl	8012e70 <builtin_interfaces__msg__Time__init>
 8012d26:	4605      	mov	r5, r0
 8012d28:	b130      	cbz	r0, 8012d38 <autoware_auto_vehicle_msgs__msg__GearReport__init+0x1c>
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	4628      	mov	r0, r5
 8012d2e:	7223      	strb	r3, [r4, #8]
 8012d30:	bd38      	pop	{r3, r4, r5, pc}
 8012d32:	4605      	mov	r5, r0
 8012d34:	4628      	mov	r0, r5
 8012d36:	bd38      	pop	{r3, r4, r5, pc}
 8012d38:	4620      	mov	r0, r4
 8012d3a:	f000 f89d 	bl	8012e78 <builtin_interfaces__msg__Time__fini>
 8012d3e:	4628      	mov	r0, r5
 8012d40:	bd38      	pop	{r3, r4, r5, pc}
 8012d42:	bf00      	nop

08012d44 <autoware_auto_vehicle_msgs__msg__GearReport__fini>:
 8012d44:	b108      	cbz	r0, 8012d4a <autoware_auto_vehicle_msgs__msg__GearReport__fini+0x6>
 8012d46:	f000 b897 	b.w	8012e78 <builtin_interfaces__msg__Time__fini>
 8012d4a:	4770      	bx	lr

08012d4c <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__init>:
 8012d4c:	b538      	push	{r3, r4, r5, lr}
 8012d4e:	4604      	mov	r4, r0
 8012d50:	b138      	cbz	r0, 8012d62 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__init+0x16>
 8012d52:	f000 f88d 	bl	8012e70 <builtin_interfaces__msg__Time__init>
 8012d56:	4605      	mov	r5, r0
 8012d58:	b130      	cbz	r0, 8012d68 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__init+0x1c>
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	4628      	mov	r0, r5
 8012d5e:	7223      	strb	r3, [r4, #8]
 8012d60:	bd38      	pop	{r3, r4, r5, pc}
 8012d62:	4605      	mov	r5, r0
 8012d64:	4628      	mov	r0, r5
 8012d66:	bd38      	pop	{r3, r4, r5, pc}
 8012d68:	4620      	mov	r0, r4
 8012d6a:	f000 f885 	bl	8012e78 <builtin_interfaces__msg__Time__fini>
 8012d6e:	4628      	mov	r0, r5
 8012d70:	bd38      	pop	{r3, r4, r5, pc}
 8012d72:	bf00      	nop

08012d74 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__fini>:
 8012d74:	b108      	cbz	r0, 8012d7a <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__fini+0x6>
 8012d76:	f000 b87f 	b.w	8012e78 <builtin_interfaces__msg__Time__fini>
 8012d7a:	4770      	bx	lr

08012d7c <autoware_auto_vehicle_msgs__msg__HazardLightsReport__init>:
 8012d7c:	b538      	push	{r3, r4, r5, lr}
 8012d7e:	4604      	mov	r4, r0
 8012d80:	b138      	cbz	r0, 8012d92 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__init+0x16>
 8012d82:	f000 f875 	bl	8012e70 <builtin_interfaces__msg__Time__init>
 8012d86:	4605      	mov	r5, r0
 8012d88:	b130      	cbz	r0, 8012d98 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__init+0x1c>
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	4628      	mov	r0, r5
 8012d8e:	7223      	strb	r3, [r4, #8]
 8012d90:	bd38      	pop	{r3, r4, r5, pc}
 8012d92:	4605      	mov	r5, r0
 8012d94:	4628      	mov	r0, r5
 8012d96:	bd38      	pop	{r3, r4, r5, pc}
 8012d98:	4620      	mov	r0, r4
 8012d9a:	f000 f86d 	bl	8012e78 <builtin_interfaces__msg__Time__fini>
 8012d9e:	4628      	mov	r0, r5
 8012da0:	bd38      	pop	{r3, r4, r5, pc}
 8012da2:	bf00      	nop

08012da4 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__fini>:
 8012da4:	b108      	cbz	r0, 8012daa <autoware_auto_vehicle_msgs__msg__HazardLightsReport__fini+0x6>
 8012da6:	f000 b867 	b.w	8012e78 <builtin_interfaces__msg__Time__fini>
 8012daa:	4770      	bx	lr

08012dac <autoware_auto_vehicle_msgs__msg__SteeringReport__init>:
 8012dac:	b538      	push	{r3, r4, r5, lr}
 8012dae:	4604      	mov	r4, r0
 8012db0:	b138      	cbz	r0, 8012dc2 <autoware_auto_vehicle_msgs__msg__SteeringReport__init+0x16>
 8012db2:	f000 f85d 	bl	8012e70 <builtin_interfaces__msg__Time__init>
 8012db6:	4605      	mov	r5, r0
 8012db8:	b130      	cbz	r0, 8012dc8 <autoware_auto_vehicle_msgs__msg__SteeringReport__init+0x1c>
 8012dba:	2300      	movs	r3, #0
 8012dbc:	4628      	mov	r0, r5
 8012dbe:	60a3      	str	r3, [r4, #8]
 8012dc0:	bd38      	pop	{r3, r4, r5, pc}
 8012dc2:	4605      	mov	r5, r0
 8012dc4:	4628      	mov	r0, r5
 8012dc6:	bd38      	pop	{r3, r4, r5, pc}
 8012dc8:	4620      	mov	r0, r4
 8012dca:	f000 f855 	bl	8012e78 <builtin_interfaces__msg__Time__fini>
 8012dce:	4628      	mov	r0, r5
 8012dd0:	bd38      	pop	{r3, r4, r5, pc}
 8012dd2:	bf00      	nop

08012dd4 <autoware_auto_vehicle_msgs__msg__SteeringReport__fini>:
 8012dd4:	b108      	cbz	r0, 8012dda <autoware_auto_vehicle_msgs__msg__SteeringReport__fini+0x6>
 8012dd6:	f000 b84f 	b.w	8012e78 <builtin_interfaces__msg__Time__fini>
 8012dda:	4770      	bx	lr

08012ddc <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__init>:
 8012ddc:	b538      	push	{r3, r4, r5, lr}
 8012dde:	4604      	mov	r4, r0
 8012de0:	b138      	cbz	r0, 8012df2 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x16>
 8012de2:	f000 f845 	bl	8012e70 <builtin_interfaces__msg__Time__init>
 8012de6:	4605      	mov	r5, r0
 8012de8:	b130      	cbz	r0, 8012df8 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x1c>
 8012dea:	2300      	movs	r3, #0
 8012dec:	4628      	mov	r0, r5
 8012dee:	7223      	strb	r3, [r4, #8]
 8012df0:	bd38      	pop	{r3, r4, r5, pc}
 8012df2:	4605      	mov	r5, r0
 8012df4:	4628      	mov	r0, r5
 8012df6:	bd38      	pop	{r3, r4, r5, pc}
 8012df8:	4620      	mov	r0, r4
 8012dfa:	f000 f83d 	bl	8012e78 <builtin_interfaces__msg__Time__fini>
 8012dfe:	4628      	mov	r0, r5
 8012e00:	bd38      	pop	{r3, r4, r5, pc}
 8012e02:	bf00      	nop

08012e04 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__fini>:
 8012e04:	b108      	cbz	r0, 8012e0a <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__fini+0x6>
 8012e06:	f000 b837 	b.w	8012e78 <builtin_interfaces__msg__Time__fini>
 8012e0a:	4770      	bx	lr

08012e0c <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__init>:
 8012e0c:	b538      	push	{r3, r4, r5, lr}
 8012e0e:	4604      	mov	r4, r0
 8012e10:	b138      	cbz	r0, 8012e22 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__init+0x16>
 8012e12:	f000 f82d 	bl	8012e70 <builtin_interfaces__msg__Time__init>
 8012e16:	4605      	mov	r5, r0
 8012e18:	b130      	cbz	r0, 8012e28 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__init+0x1c>
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	4628      	mov	r0, r5
 8012e1e:	7223      	strb	r3, [r4, #8]
 8012e20:	bd38      	pop	{r3, r4, r5, pc}
 8012e22:	4605      	mov	r5, r0
 8012e24:	4628      	mov	r0, r5
 8012e26:	bd38      	pop	{r3, r4, r5, pc}
 8012e28:	4620      	mov	r0, r4
 8012e2a:	f000 f825 	bl	8012e78 <builtin_interfaces__msg__Time__fini>
 8012e2e:	4628      	mov	r0, r5
 8012e30:	bd38      	pop	{r3, r4, r5, pc}
 8012e32:	bf00      	nop

08012e34 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__fini>:
 8012e34:	b108      	cbz	r0, 8012e3a <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__fini+0x6>
 8012e36:	f000 b81f 	b.w	8012e78 <builtin_interfaces__msg__Time__fini>
 8012e3a:	4770      	bx	lr

08012e3c <autoware_auto_vehicle_msgs__msg__VelocityReport__init>:
 8012e3c:	b538      	push	{r3, r4, r5, lr}
 8012e3e:	4604      	mov	r4, r0
 8012e40:	b148      	cbz	r0, 8012e56 <autoware_auto_vehicle_msgs__msg__VelocityReport__init+0x1a>
 8012e42:	f000 f85d 	bl	8012f00 <std_msgs__msg__Header__init>
 8012e46:	4605      	mov	r5, r0
 8012e48:	b140      	cbz	r0, 8012e5c <autoware_auto_vehicle_msgs__msg__VelocityReport__init+0x20>
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	4628      	mov	r0, r5
 8012e4e:	6163      	str	r3, [r4, #20]
 8012e50:	61a3      	str	r3, [r4, #24]
 8012e52:	61e3      	str	r3, [r4, #28]
 8012e54:	bd38      	pop	{r3, r4, r5, pc}
 8012e56:	4605      	mov	r5, r0
 8012e58:	4628      	mov	r0, r5
 8012e5a:	bd38      	pop	{r3, r4, r5, pc}
 8012e5c:	4620      	mov	r0, r4
 8012e5e:	f000 f873 	bl	8012f48 <std_msgs__msg__Header__fini>
 8012e62:	4628      	mov	r0, r5
 8012e64:	bd38      	pop	{r3, r4, r5, pc}
 8012e66:	bf00      	nop

08012e68 <autoware_auto_vehicle_msgs__msg__VelocityReport__fini>:
 8012e68:	b108      	cbz	r0, 8012e6e <autoware_auto_vehicle_msgs__msg__VelocityReport__fini+0x6>
 8012e6a:	f000 b86d 	b.w	8012f48 <std_msgs__msg__Header__fini>
 8012e6e:	4770      	bx	lr

08012e70 <builtin_interfaces__msg__Time__init>:
 8012e70:	3800      	subs	r0, #0
 8012e72:	bf18      	it	ne
 8012e74:	2001      	movne	r0, #1
 8012e76:	4770      	bx	lr

08012e78 <builtin_interfaces__msg__Time__fini>:
 8012e78:	4770      	bx	lr
 8012e7a:	bf00      	nop

08012e7c <ucdr_serialize_sequence_char>:
 8012e7c:	b570      	push	{r4, r5, r6, lr}
 8012e7e:	4615      	mov	r5, r2
 8012e80:	460e      	mov	r6, r1
 8012e82:	7d01      	ldrb	r1, [r0, #20]
 8012e84:	4604      	mov	r4, r0
 8012e86:	f7fe fc87 	bl	8011798 <ucdr_serialize_endian_uint32_t>
 8012e8a:	b90d      	cbnz	r5, 8012e90 <ucdr_serialize_sequence_char+0x14>
 8012e8c:	2001      	movs	r0, #1
 8012e8e:	bd70      	pop	{r4, r5, r6, pc}
 8012e90:	462b      	mov	r3, r5
 8012e92:	4632      	mov	r2, r6
 8012e94:	7d21      	ldrb	r1, [r4, #20]
 8012e96:	4620      	mov	r0, r4
 8012e98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e9c:	f000 ba28 	b.w	80132f0 <ucdr_serialize_endian_array_char>

08012ea0 <ucdr_deserialize_sequence_char>:
 8012ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ea4:	461d      	mov	r5, r3
 8012ea6:	4616      	mov	r6, r2
 8012ea8:	460f      	mov	r7, r1
 8012eaa:	461a      	mov	r2, r3
 8012eac:	7d01      	ldrb	r1, [r0, #20]
 8012eae:	4604      	mov	r4, r0
 8012eb0:	f7fe fd9a 	bl	80119e8 <ucdr_deserialize_endian_uint32_t>
 8012eb4:	682b      	ldr	r3, [r5, #0]
 8012eb6:	429e      	cmp	r6, r3
 8012eb8:	d201      	bcs.n	8012ebe <ucdr_deserialize_sequence_char+0x1e>
 8012eba:	2201      	movs	r2, #1
 8012ebc:	75a2      	strb	r2, [r4, #22]
 8012ebe:	b913      	cbnz	r3, 8012ec6 <ucdr_deserialize_sequence_char+0x26>
 8012ec0:	2001      	movs	r0, #1
 8012ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ec6:	463a      	mov	r2, r7
 8012ec8:	7d21      	ldrb	r1, [r4, #20]
 8012eca:	4620      	mov	r0, r4
 8012ecc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ed0:	f000 ba40 	b.w	8013354 <ucdr_deserialize_endian_array_char>

08012ed4 <rosgraph_msgs__msg__Clock__init>:
 8012ed4:	b538      	push	{r3, r4, r5, lr}
 8012ed6:	4604      	mov	r4, r0
 8012ed8:	b128      	cbz	r0, 8012ee6 <rosgraph_msgs__msg__Clock__init+0x12>
 8012eda:	f7ff ffc9 	bl	8012e70 <builtin_interfaces__msg__Time__init>
 8012ede:	4605      	mov	r5, r0
 8012ee0:	b120      	cbz	r0, 8012eec <rosgraph_msgs__msg__Clock__init+0x18>
 8012ee2:	4628      	mov	r0, r5
 8012ee4:	bd38      	pop	{r3, r4, r5, pc}
 8012ee6:	4605      	mov	r5, r0
 8012ee8:	4628      	mov	r0, r5
 8012eea:	bd38      	pop	{r3, r4, r5, pc}
 8012eec:	4620      	mov	r0, r4
 8012eee:	f7ff ffc3 	bl	8012e78 <builtin_interfaces__msg__Time__fini>
 8012ef2:	4628      	mov	r0, r5
 8012ef4:	bd38      	pop	{r3, r4, r5, pc}
 8012ef6:	bf00      	nop

08012ef8 <rosgraph_msgs__msg__Clock__fini>:
 8012ef8:	b108      	cbz	r0, 8012efe <rosgraph_msgs__msg__Clock__fini+0x6>
 8012efa:	f7ff bfbd 	b.w	8012e78 <builtin_interfaces__msg__Time__fini>
 8012efe:	4770      	bx	lr

08012f00 <std_msgs__msg__Header__init>:
 8012f00:	b570      	push	{r4, r5, r6, lr}
 8012f02:	4605      	mov	r5, r0
 8012f04:	b1a8      	cbz	r0, 8012f32 <std_msgs__msg__Header__init+0x32>
 8012f06:	f7ff ffb3 	bl	8012e70 <builtin_interfaces__msg__Time__init>
 8012f0a:	4604      	mov	r4, r0
 8012f0c:	b140      	cbz	r0, 8012f20 <std_msgs__msg__Header__init+0x20>
 8012f0e:	f105 0608 	add.w	r6, r5, #8
 8012f12:	4630      	mov	r0, r6
 8012f14:	f000 fa52 	bl	80133bc <rosidl_runtime_c__String__init>
 8012f18:	4604      	mov	r4, r0
 8012f1a:	b168      	cbz	r0, 8012f38 <std_msgs__msg__Header__init+0x38>
 8012f1c:	4620      	mov	r0, r4
 8012f1e:	bd70      	pop	{r4, r5, r6, pc}
 8012f20:	4628      	mov	r0, r5
 8012f22:	f7ff ffa9 	bl	8012e78 <builtin_interfaces__msg__Time__fini>
 8012f26:	f105 0008 	add.w	r0, r5, #8
 8012f2a:	f000 fa5d 	bl	80133e8 <rosidl_runtime_c__String__fini>
 8012f2e:	4620      	mov	r0, r4
 8012f30:	bd70      	pop	{r4, r5, r6, pc}
 8012f32:	4604      	mov	r4, r0
 8012f34:	4620      	mov	r0, r4
 8012f36:	bd70      	pop	{r4, r5, r6, pc}
 8012f38:	4628      	mov	r0, r5
 8012f3a:	f7ff ff9d 	bl	8012e78 <builtin_interfaces__msg__Time__fini>
 8012f3e:	4630      	mov	r0, r6
 8012f40:	f000 fa52 	bl	80133e8 <rosidl_runtime_c__String__fini>
 8012f44:	e7ea      	b.n	8012f1c <std_msgs__msg__Header__init+0x1c>
 8012f46:	bf00      	nop

08012f48 <std_msgs__msg__Header__fini>:
 8012f48:	b148      	cbz	r0, 8012f5e <std_msgs__msg__Header__fini+0x16>
 8012f4a:	b510      	push	{r4, lr}
 8012f4c:	4604      	mov	r4, r0
 8012f4e:	f7ff ff93 	bl	8012e78 <builtin_interfaces__msg__Time__fini>
 8012f52:	f104 0008 	add.w	r0, r4, #8
 8012f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f5a:	f000 ba45 	b.w	80133e8 <rosidl_runtime_c__String__fini>
 8012f5e:	4770      	bx	lr

08012f60 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>:
 8012f60:	b570      	push	{r4, r5, r6, lr}
 8012f62:	4605      	mov	r5, r0
 8012f64:	b1a8      	cbz	r0, 8012f92 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x32>
 8012f66:	f7ff ffcb 	bl	8012f00 <std_msgs__msg__Header__init>
 8012f6a:	4604      	mov	r4, r0
 8012f6c:	b140      	cbz	r0, 8012f80 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x20>
 8012f6e:	f105 0618 	add.w	r6, r5, #24
 8012f72:	4630      	mov	r0, r6
 8012f74:	f000 fa80 	bl	8013478 <tier4_vehicle_msgs__msg__ActuationCommand__init>
 8012f78:	4604      	mov	r4, r0
 8012f7a:	b168      	cbz	r0, 8012f98 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x38>
 8012f7c:	4620      	mov	r0, r4
 8012f7e:	bd70      	pop	{r4, r5, r6, pc}
 8012f80:	4628      	mov	r0, r5
 8012f82:	f7ff ffe1 	bl	8012f48 <std_msgs__msg__Header__fini>
 8012f86:	f105 0018 	add.w	r0, r5, #24
 8012f8a:	f000 fa79 	bl	8013480 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 8012f8e:	4620      	mov	r0, r4
 8012f90:	bd70      	pop	{r4, r5, r6, pc}
 8012f92:	4604      	mov	r4, r0
 8012f94:	4620      	mov	r0, r4
 8012f96:	bd70      	pop	{r4, r5, r6, pc}
 8012f98:	4628      	mov	r0, r5
 8012f9a:	f7ff ffd5 	bl	8012f48 <std_msgs__msg__Header__fini>
 8012f9e:	4630      	mov	r0, r6
 8012fa0:	f000 fa6e 	bl	8013480 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 8012fa4:	e7ea      	b.n	8012f7c <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x1c>
 8012fa6:	bf00      	nop

08012fa8 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>:
 8012fa8:	b148      	cbz	r0, 8012fbe <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini+0x16>
 8012faa:	b510      	push	{r4, lr}
 8012fac:	4604      	mov	r4, r0
 8012fae:	f7ff ffcb 	bl	8012f48 <std_msgs__msg__Header__fini>
 8012fb2:	f104 0018 	add.w	r0, r4, #24
 8012fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012fba:	f000 ba61 	b.w	8013480 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 8012fbe:	4770      	bx	lr

08012fc0 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>:
 8012fc0:	b570      	push	{r4, r5, r6, lr}
 8012fc2:	4605      	mov	r5, r0
 8012fc4:	b1a8      	cbz	r0, 8012ff2 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x32>
 8012fc6:	f7ff ff9b 	bl	8012f00 <std_msgs__msg__Header__init>
 8012fca:	4604      	mov	r4, r0
 8012fcc:	b140      	cbz	r0, 8012fe0 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x20>
 8012fce:	f105 0618 	add.w	r6, r5, #24
 8012fd2:	4630      	mov	r0, r6
 8012fd4:	f000 fa56 	bl	8013484 <tier4_vehicle_msgs__msg__ActuationStatus__init>
 8012fd8:	4604      	mov	r4, r0
 8012fda:	b168      	cbz	r0, 8012ff8 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x38>
 8012fdc:	4620      	mov	r0, r4
 8012fde:	bd70      	pop	{r4, r5, r6, pc}
 8012fe0:	4628      	mov	r0, r5
 8012fe2:	f7ff ffb1 	bl	8012f48 <std_msgs__msg__Header__fini>
 8012fe6:	f105 0018 	add.w	r0, r5, #24
 8012fea:	f000 fa4f 	bl	801348c <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 8012fee:	4620      	mov	r0, r4
 8012ff0:	bd70      	pop	{r4, r5, r6, pc}
 8012ff2:	4604      	mov	r4, r0
 8012ff4:	4620      	mov	r0, r4
 8012ff6:	bd70      	pop	{r4, r5, r6, pc}
 8012ff8:	4628      	mov	r0, r5
 8012ffa:	f7ff ffa5 	bl	8012f48 <std_msgs__msg__Header__fini>
 8012ffe:	4630      	mov	r0, r6
 8013000:	f000 fa44 	bl	801348c <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 8013004:	e7ea      	b.n	8012fdc <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x1c>
 8013006:	bf00      	nop

08013008 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>:
 8013008:	b148      	cbz	r0, 801301e <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini+0x16>
 801300a:	b510      	push	{r4, lr}
 801300c:	4604      	mov	r4, r0
 801300e:	f7ff ff9b 	bl	8012f48 <std_msgs__msg__Header__fini>
 8013012:	f104 0018 	add.w	r0, r4, #24
 8013016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801301a:	f000 ba37 	b.w	801348c <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801301e:	4770      	bx	lr

08013020 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>:
 8013020:	b538      	push	{r3, r4, r5, lr}
 8013022:	4604      	mov	r4, r0
 8013024:	b128      	cbz	r0, 8013032 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x12>
 8013026:	f7ff ff23 	bl	8012e70 <builtin_interfaces__msg__Time__init>
 801302a:	4605      	mov	r5, r0
 801302c:	b120      	cbz	r0, 8013038 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x18>
 801302e:	4628      	mov	r0, r5
 8013030:	bd38      	pop	{r3, r4, r5, pc}
 8013032:	4605      	mov	r5, r0
 8013034:	4628      	mov	r0, r5
 8013036:	bd38      	pop	{r3, r4, r5, pc}
 8013038:	4620      	mov	r0, r4
 801303a:	f7ff ff1d 	bl	8012e78 <builtin_interfaces__msg__Time__fini>
 801303e:	4628      	mov	r0, r5
 8013040:	bd38      	pop	{r3, r4, r5, pc}
 8013042:	bf00      	nop

08013044 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>:
 8013044:	b108      	cbz	r0, 801304a <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini+0x6>
 8013046:	f7ff bf17 	b.w	8012e78 <builtin_interfaces__msg__Time__fini>
 801304a:	4770      	bx	lr

0801304c <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>:
 801304c:	b538      	push	{r3, r4, r5, lr}
 801304e:	4604      	mov	r4, r0
 8013050:	b128      	cbz	r0, 801305e <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x12>
 8013052:	f7ff ff0d 	bl	8012e70 <builtin_interfaces__msg__Time__init>
 8013056:	4605      	mov	r5, r0
 8013058:	b120      	cbz	r0, 8013064 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x18>
 801305a:	4628      	mov	r0, r5
 801305c:	bd38      	pop	{r3, r4, r5, pc}
 801305e:	4605      	mov	r5, r0
 8013060:	4628      	mov	r0, r5
 8013062:	bd38      	pop	{r3, r4, r5, pc}
 8013064:	4620      	mov	r0, r4
 8013066:	f7ff ff07 	bl	8012e78 <builtin_interfaces__msg__Time__fini>
 801306a:	4628      	mov	r0, r5
 801306c:	bd38      	pop	{r3, r4, r5, pc}
 801306e:	bf00      	nop

08013070 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>:
 8013070:	b108      	cbz	r0, 8013076 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini+0x6>
 8013072:	f7ff bf01 	b.w	8012e78 <builtin_interfaces__msg__Time__fini>
 8013076:	4770      	bx	lr

08013078 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_init_function>:
 8013078:	f000 b9fe 	b.w	8013478 <tier4_vehicle_msgs__msg__ActuationCommand__init>

0801307c <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_fini_function>:
 801307c:	f000 ba00 	b.w	8013480 <tier4_vehicle_msgs__msg__ActuationCommand__fini>

08013080 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 8013080:	4b04      	ldr	r3, [pc, #16]	@ (8013094 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 8013082:	681a      	ldr	r2, [r3, #0]
 8013084:	b10a      	cbz	r2, 801308a <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0xa>
 8013086:	4803      	ldr	r0, [pc, #12]	@ (8013094 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 8013088:	4770      	bx	lr
 801308a:	4a03      	ldr	r2, [pc, #12]	@ (8013098 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x18>)
 801308c:	4801      	ldr	r0, [pc, #4]	@ (8013094 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801308e:	6812      	ldr	r2, [r2, #0]
 8013090:	601a      	str	r2, [r3, #0]
 8013092:	4770      	bx	lr
 8013094:	24001190 	.word	0x24001190
 8013098:	24000d2c 	.word	0x24000d2c

0801309c <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_init_function>:
 801309c:	f000 b9f2 	b.w	8013484 <tier4_vehicle_msgs__msg__ActuationStatus__init>

080130a0 <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_fini_function>:
 80130a0:	f000 b9f4 	b.w	801348c <tier4_vehicle_msgs__msg__ActuationStatus__fini>

080130a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 80130a4:	4b04      	ldr	r3, [pc, #16]	@ (80130b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 80130a6:	681a      	ldr	r2, [r3, #0]
 80130a8:	b10a      	cbz	r2, 80130ae <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0xa>
 80130aa:	4803      	ldr	r0, [pc, #12]	@ (80130b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 80130ac:	4770      	bx	lr
 80130ae:	4a03      	ldr	r2, [pc, #12]	@ (80130bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x18>)
 80130b0:	4801      	ldr	r0, [pc, #4]	@ (80130b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 80130b2:	6812      	ldr	r2, [r2, #0]
 80130b4:	601a      	str	r2, [r3, #0]
 80130b6:	4770      	bx	lr
 80130b8:	24001250 	.word	0x24001250
 80130bc:	24000d2c 	.word	0x24000d2c

080130c0 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 80130c0:	b1b8      	cbz	r0, 80130f2 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand+0x32>
 80130c2:	b538      	push	{r3, r4, r5, lr}
 80130c4:	460d      	mov	r5, r1
 80130c6:	2108      	movs	r1, #8
 80130c8:	4628      	mov	r0, r5
 80130ca:	f7ff f931 	bl	8012330 <ucdr_alignment>
 80130ce:	f105 0308 	add.w	r3, r5, #8
 80130d2:	2108      	movs	r1, #8
 80130d4:	f1c5 0508 	rsb	r5, r5, #8
 80130d8:	181c      	adds	r4, r3, r0
 80130da:	4620      	mov	r0, r4
 80130dc:	f7ff f928 	bl	8012330 <ucdr_alignment>
 80130e0:	2108      	movs	r1, #8
 80130e2:	4408      	add	r0, r1
 80130e4:	4404      	add	r4, r0
 80130e6:	4620      	mov	r0, r4
 80130e8:	f7ff f922 	bl	8012330 <ucdr_alignment>
 80130ec:	4428      	add	r0, r5
 80130ee:	4420      	add	r0, r4
 80130f0:	bd38      	pop	{r3, r4, r5, pc}
 80130f2:	4770      	bx	lr

080130f4 <_ActuationCommand__cdr_deserialize>:
 80130f4:	b538      	push	{r3, r4, r5, lr}
 80130f6:	460c      	mov	r4, r1
 80130f8:	b171      	cbz	r1, 8013118 <_ActuationCommand__cdr_deserialize+0x24>
 80130fa:	4605      	mov	r5, r0
 80130fc:	f7ff f82a 	bl	8012154 <ucdr_deserialize_double>
 8013100:	f104 0108 	add.w	r1, r4, #8
 8013104:	4628      	mov	r0, r5
 8013106:	f7ff f825 	bl	8012154 <ucdr_deserialize_double>
 801310a:	f104 0110 	add.w	r1, r4, #16
 801310e:	4628      	mov	r0, r5
 8013110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013114:	f7ff b81e 	b.w	8012154 <ucdr_deserialize_double>
 8013118:	4608      	mov	r0, r1
 801311a:	bd38      	pop	{r3, r4, r5, pc}

0801311c <_ActuationCommand__cdr_serialize>:
 801311c:	b198      	cbz	r0, 8013146 <_ActuationCommand__cdr_serialize+0x2a>
 801311e:	b538      	push	{r3, r4, r5, lr}
 8013120:	460d      	mov	r5, r1
 8013122:	4604      	mov	r4, r0
 8013124:	ed90 0b00 	vldr	d0, [r0]
 8013128:	4608      	mov	r0, r1
 801312a:	f7fe ff43 	bl	8011fb4 <ucdr_serialize_double>
 801312e:	4628      	mov	r0, r5
 8013130:	ed94 0b02 	vldr	d0, [r4, #8]
 8013134:	f7fe ff3e 	bl	8011fb4 <ucdr_serialize_double>
 8013138:	4628      	mov	r0, r5
 801313a:	ed94 0b04 	vldr	d0, [r4, #16]
 801313e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013142:	f7fe bf37 	b.w	8011fb4 <ucdr_serialize_double>
 8013146:	4770      	bx	lr

08013148 <_ActuationCommand__get_serialized_size>:
 8013148:	b190      	cbz	r0, 8013170 <_ActuationCommand__get_serialized_size+0x28>
 801314a:	2108      	movs	r1, #8
 801314c:	2000      	movs	r0, #0
 801314e:	b510      	push	{r4, lr}
 8013150:	f7ff f8ee 	bl	8012330 <ucdr_alignment>
 8013154:	2108      	movs	r1, #8
 8013156:	1844      	adds	r4, r0, r1
 8013158:	4620      	mov	r0, r4
 801315a:	f7ff f8e9 	bl	8012330 <ucdr_alignment>
 801315e:	2108      	movs	r1, #8
 8013160:	4408      	add	r0, r1
 8013162:	4404      	add	r4, r0
 8013164:	4620      	mov	r0, r4
 8013166:	f7ff f8e3 	bl	8012330 <ucdr_alignment>
 801316a:	3008      	adds	r0, #8
 801316c:	4420      	add	r0, r4
 801316e:	bd10      	pop	{r4, pc}
 8013170:	4770      	bx	lr
 8013172:	bf00      	nop

08013174 <_ActuationCommand__max_serialized_size>:
 8013174:	b538      	push	{r3, r4, r5, lr}
 8013176:	2108      	movs	r1, #8
 8013178:	2000      	movs	r0, #0
 801317a:	f7ff f8d9 	bl	8012330 <ucdr_alignment>
 801317e:	2108      	movs	r1, #8
 8013180:	1845      	adds	r5, r0, r1
 8013182:	4628      	mov	r0, r5
 8013184:	f7ff f8d4 	bl	8012330 <ucdr_alignment>
 8013188:	2108      	movs	r1, #8
 801318a:	1844      	adds	r4, r0, r1
 801318c:	442c      	add	r4, r5
 801318e:	4620      	mov	r0, r4
 8013190:	f7ff f8ce 	bl	8012330 <ucdr_alignment>
 8013194:	3008      	adds	r0, #8
 8013196:	4420      	add	r0, r4
 8013198:	bd38      	pop	{r3, r4, r5, pc}
 801319a:	bf00      	nop

0801319c <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 801319c:	b570      	push	{r4, r5, r6, lr}
 801319e:	460c      	mov	r4, r1
 80131a0:	2301      	movs	r3, #1
 80131a2:	2108      	movs	r1, #8
 80131a4:	f104 0508 	add.w	r5, r4, #8
 80131a8:	7003      	strb	r3, [r0, #0]
 80131aa:	4620      	mov	r0, r4
 80131ac:	f1c4 0408 	rsb	r4, r4, #8
 80131b0:	f7ff f8be 	bl	8012330 <ucdr_alignment>
 80131b4:	1946      	adds	r6, r0, r5
 80131b6:	2108      	movs	r1, #8
 80131b8:	4630      	mov	r0, r6
 80131ba:	f7ff f8b9 	bl	8012330 <ucdr_alignment>
 80131be:	2108      	movs	r1, #8
 80131c0:	1845      	adds	r5, r0, r1
 80131c2:	4435      	add	r5, r6
 80131c4:	4628      	mov	r0, r5
 80131c6:	f7ff f8b3 	bl	8012330 <ucdr_alignment>
 80131ca:	4420      	add	r0, r4
 80131cc:	4428      	add	r0, r5
 80131ce:	bd70      	pop	{r4, r5, r6, pc}

080131d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 80131d0:	4800      	ldr	r0, [pc, #0]	@ (80131d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x4>)
 80131d2:	4770      	bx	lr
 80131d4:	2400125c 	.word	0x2400125c

080131d8 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 80131d8:	b1b8      	cbz	r0, 801320a <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus+0x32>
 80131da:	b538      	push	{r3, r4, r5, lr}
 80131dc:	460d      	mov	r5, r1
 80131de:	2108      	movs	r1, #8
 80131e0:	4628      	mov	r0, r5
 80131e2:	f7ff f8a5 	bl	8012330 <ucdr_alignment>
 80131e6:	f105 0308 	add.w	r3, r5, #8
 80131ea:	2108      	movs	r1, #8
 80131ec:	f1c5 0508 	rsb	r5, r5, #8
 80131f0:	181c      	adds	r4, r3, r0
 80131f2:	4620      	mov	r0, r4
 80131f4:	f7ff f89c 	bl	8012330 <ucdr_alignment>
 80131f8:	2108      	movs	r1, #8
 80131fa:	4408      	add	r0, r1
 80131fc:	4404      	add	r4, r0
 80131fe:	4620      	mov	r0, r4
 8013200:	f7ff f896 	bl	8012330 <ucdr_alignment>
 8013204:	4428      	add	r0, r5
 8013206:	4420      	add	r0, r4
 8013208:	bd38      	pop	{r3, r4, r5, pc}
 801320a:	4770      	bx	lr

0801320c <_ActuationStatus__cdr_deserialize>:
 801320c:	b538      	push	{r3, r4, r5, lr}
 801320e:	460c      	mov	r4, r1
 8013210:	b171      	cbz	r1, 8013230 <_ActuationStatus__cdr_deserialize+0x24>
 8013212:	4605      	mov	r5, r0
 8013214:	f7fe ff9e 	bl	8012154 <ucdr_deserialize_double>
 8013218:	f104 0108 	add.w	r1, r4, #8
 801321c:	4628      	mov	r0, r5
 801321e:	f7fe ff99 	bl	8012154 <ucdr_deserialize_double>
 8013222:	f104 0110 	add.w	r1, r4, #16
 8013226:	4628      	mov	r0, r5
 8013228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801322c:	f7fe bf92 	b.w	8012154 <ucdr_deserialize_double>
 8013230:	4608      	mov	r0, r1
 8013232:	bd38      	pop	{r3, r4, r5, pc}

08013234 <_ActuationStatus__cdr_serialize>:
 8013234:	b198      	cbz	r0, 801325e <_ActuationStatus__cdr_serialize+0x2a>
 8013236:	b538      	push	{r3, r4, r5, lr}
 8013238:	460d      	mov	r5, r1
 801323a:	4604      	mov	r4, r0
 801323c:	ed90 0b00 	vldr	d0, [r0]
 8013240:	4608      	mov	r0, r1
 8013242:	f7fe feb7 	bl	8011fb4 <ucdr_serialize_double>
 8013246:	4628      	mov	r0, r5
 8013248:	ed94 0b02 	vldr	d0, [r4, #8]
 801324c:	f7fe feb2 	bl	8011fb4 <ucdr_serialize_double>
 8013250:	4628      	mov	r0, r5
 8013252:	ed94 0b04 	vldr	d0, [r4, #16]
 8013256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801325a:	f7fe beab 	b.w	8011fb4 <ucdr_serialize_double>
 801325e:	4770      	bx	lr

08013260 <_ActuationStatus__get_serialized_size>:
 8013260:	b190      	cbz	r0, 8013288 <_ActuationStatus__get_serialized_size+0x28>
 8013262:	2108      	movs	r1, #8
 8013264:	2000      	movs	r0, #0
 8013266:	b510      	push	{r4, lr}
 8013268:	f7ff f862 	bl	8012330 <ucdr_alignment>
 801326c:	2108      	movs	r1, #8
 801326e:	1844      	adds	r4, r0, r1
 8013270:	4620      	mov	r0, r4
 8013272:	f7ff f85d 	bl	8012330 <ucdr_alignment>
 8013276:	2108      	movs	r1, #8
 8013278:	4408      	add	r0, r1
 801327a:	4404      	add	r4, r0
 801327c:	4620      	mov	r0, r4
 801327e:	f7ff f857 	bl	8012330 <ucdr_alignment>
 8013282:	3008      	adds	r0, #8
 8013284:	4420      	add	r0, r4
 8013286:	bd10      	pop	{r4, pc}
 8013288:	4770      	bx	lr
 801328a:	bf00      	nop

0801328c <_ActuationStatus__max_serialized_size>:
 801328c:	b538      	push	{r3, r4, r5, lr}
 801328e:	2108      	movs	r1, #8
 8013290:	2000      	movs	r0, #0
 8013292:	f7ff f84d 	bl	8012330 <ucdr_alignment>
 8013296:	2108      	movs	r1, #8
 8013298:	1845      	adds	r5, r0, r1
 801329a:	4628      	mov	r0, r5
 801329c:	f7ff f848 	bl	8012330 <ucdr_alignment>
 80132a0:	2108      	movs	r1, #8
 80132a2:	1844      	adds	r4, r0, r1
 80132a4:	442c      	add	r4, r5
 80132a6:	4620      	mov	r0, r4
 80132a8:	f7ff f842 	bl	8012330 <ucdr_alignment>
 80132ac:	3008      	adds	r0, #8
 80132ae:	4420      	add	r0, r4
 80132b0:	bd38      	pop	{r3, r4, r5, pc}
 80132b2:	bf00      	nop

080132b4 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 80132b4:	b570      	push	{r4, r5, r6, lr}
 80132b6:	460c      	mov	r4, r1
 80132b8:	2301      	movs	r3, #1
 80132ba:	2108      	movs	r1, #8
 80132bc:	f104 0508 	add.w	r5, r4, #8
 80132c0:	7003      	strb	r3, [r0, #0]
 80132c2:	4620      	mov	r0, r4
 80132c4:	f1c4 0408 	rsb	r4, r4, #8
 80132c8:	f7ff f832 	bl	8012330 <ucdr_alignment>
 80132cc:	1946      	adds	r6, r0, r5
 80132ce:	2108      	movs	r1, #8
 80132d0:	4630      	mov	r0, r6
 80132d2:	f7ff f82d 	bl	8012330 <ucdr_alignment>
 80132d6:	2108      	movs	r1, #8
 80132d8:	1845      	adds	r5, r0, r1
 80132da:	4435      	add	r5, r6
 80132dc:	4628      	mov	r0, r5
 80132de:	f7ff f827 	bl	8012330 <ucdr_alignment>
 80132e2:	4420      	add	r0, r4
 80132e4:	4428      	add	r0, r5
 80132e6:	bd70      	pop	{r4, r5, r6, pc}

080132e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 80132e8:	4800      	ldr	r0, [pc, #0]	@ (80132ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x4>)
 80132ea:	4770      	bx	lr
 80132ec:	24001284 	.word	0x24001284

080132f0 <ucdr_serialize_endian_array_char>:
 80132f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132f4:	4619      	mov	r1, r3
 80132f6:	461f      	mov	r7, r3
 80132f8:	4605      	mov	r5, r0
 80132fa:	4690      	mov	r8, r2
 80132fc:	f7fe fff0 	bl	80122e0 <ucdr_check_buffer_available_for>
 8013300:	b9e0      	cbnz	r0, 801333c <ucdr_serialize_endian_array_char+0x4c>
 8013302:	463e      	mov	r6, r7
 8013304:	e00b      	b.n	801331e <ucdr_serialize_endian_array_char+0x2e>
 8013306:	4441      	add	r1, r8
 8013308:	68a8      	ldr	r0, [r5, #8]
 801330a:	4622      	mov	r2, r4
 801330c:	1b36      	subs	r6, r6, r4
 801330e:	f000 fcb6 	bl	8013c7e <memcpy>
 8013312:	68ab      	ldr	r3, [r5, #8]
 8013314:	6928      	ldr	r0, [r5, #16]
 8013316:	4423      	add	r3, r4
 8013318:	4420      	add	r0, r4
 801331a:	60ab      	str	r3, [r5, #8]
 801331c:	6128      	str	r0, [r5, #16]
 801331e:	4631      	mov	r1, r6
 8013320:	2201      	movs	r2, #1
 8013322:	4628      	mov	r0, r5
 8013324:	f7ff f832 	bl	801238c <ucdr_check_final_buffer_behavior_array>
 8013328:	1bb9      	subs	r1, r7, r6
 801332a:	4604      	mov	r4, r0
 801332c:	2800      	cmp	r0, #0
 801332e:	d1ea      	bne.n	8013306 <ucdr_serialize_endian_array_char+0x16>
 8013330:	2301      	movs	r3, #1
 8013332:	7da8      	ldrb	r0, [r5, #22]
 8013334:	756b      	strb	r3, [r5, #21]
 8013336:	4058      	eors	r0, r3
 8013338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801333c:	463a      	mov	r2, r7
 801333e:	4641      	mov	r1, r8
 8013340:	68a8      	ldr	r0, [r5, #8]
 8013342:	f000 fc9c 	bl	8013c7e <memcpy>
 8013346:	68aa      	ldr	r2, [r5, #8]
 8013348:	692b      	ldr	r3, [r5, #16]
 801334a:	443a      	add	r2, r7
 801334c:	443b      	add	r3, r7
 801334e:	60aa      	str	r2, [r5, #8]
 8013350:	612b      	str	r3, [r5, #16]
 8013352:	e7ed      	b.n	8013330 <ucdr_serialize_endian_array_char+0x40>

08013354 <ucdr_deserialize_endian_array_char>:
 8013354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013358:	4619      	mov	r1, r3
 801335a:	461f      	mov	r7, r3
 801335c:	4605      	mov	r5, r0
 801335e:	4690      	mov	r8, r2
 8013360:	f7fe ffbe 	bl	80122e0 <ucdr_check_buffer_available_for>
 8013364:	b9e8      	cbnz	r0, 80133a2 <ucdr_deserialize_endian_array_char+0x4e>
 8013366:	463e      	mov	r6, r7
 8013368:	e00c      	b.n	8013384 <ucdr_deserialize_endian_array_char+0x30>
 801336a:	eb08 0003 	add.w	r0, r8, r3
 801336e:	68a9      	ldr	r1, [r5, #8]
 8013370:	4622      	mov	r2, r4
 8013372:	1b36      	subs	r6, r6, r4
 8013374:	f000 fc83 	bl	8013c7e <memcpy>
 8013378:	68ab      	ldr	r3, [r5, #8]
 801337a:	6928      	ldr	r0, [r5, #16]
 801337c:	4423      	add	r3, r4
 801337e:	4420      	add	r0, r4
 8013380:	60ab      	str	r3, [r5, #8]
 8013382:	6128      	str	r0, [r5, #16]
 8013384:	4631      	mov	r1, r6
 8013386:	2201      	movs	r2, #1
 8013388:	4628      	mov	r0, r5
 801338a:	f7fe ffff 	bl	801238c <ucdr_check_final_buffer_behavior_array>
 801338e:	1bbb      	subs	r3, r7, r6
 8013390:	4604      	mov	r4, r0
 8013392:	2800      	cmp	r0, #0
 8013394:	d1e9      	bne.n	801336a <ucdr_deserialize_endian_array_char+0x16>
 8013396:	2301      	movs	r3, #1
 8013398:	7da8      	ldrb	r0, [r5, #22]
 801339a:	756b      	strb	r3, [r5, #21]
 801339c:	4058      	eors	r0, r3
 801339e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133a2:	463a      	mov	r2, r7
 80133a4:	68a9      	ldr	r1, [r5, #8]
 80133a6:	4640      	mov	r0, r8
 80133a8:	f000 fc69 	bl	8013c7e <memcpy>
 80133ac:	68aa      	ldr	r2, [r5, #8]
 80133ae:	692b      	ldr	r3, [r5, #16]
 80133b0:	443a      	add	r2, r7
 80133b2:	443b      	add	r3, r7
 80133b4:	60aa      	str	r2, [r5, #8]
 80133b6:	612b      	str	r3, [r5, #16]
 80133b8:	e7ed      	b.n	8013396 <ucdr_deserialize_endian_array_char+0x42>
 80133ba:	bf00      	nop

080133bc <rosidl_runtime_c__String__init>:
 80133bc:	b510      	push	{r4, lr}
 80133be:	4604      	mov	r4, r0
 80133c0:	b086      	sub	sp, #24
 80133c2:	b170      	cbz	r0, 80133e2 <rosidl_runtime_c__String__init+0x26>
 80133c4:	a801      	add	r0, sp, #4
 80133c6:	f7ff f827 	bl	8012418 <rcutils_get_default_allocator>
 80133ca:	9b01      	ldr	r3, [sp, #4]
 80133cc:	9905      	ldr	r1, [sp, #20]
 80133ce:	2001      	movs	r0, #1
 80133d0:	4798      	blx	r3
 80133d2:	6020      	str	r0, [r4, #0]
 80133d4:	b128      	cbz	r0, 80133e2 <rosidl_runtime_c__String__init+0x26>
 80133d6:	2100      	movs	r1, #0
 80133d8:	2201      	movs	r2, #1
 80133da:	7001      	strb	r1, [r0, #0]
 80133dc:	4610      	mov	r0, r2
 80133de:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80133e2:	b006      	add	sp, #24
 80133e4:	bd10      	pop	{r4, pc}
 80133e6:	bf00      	nop

080133e8 <rosidl_runtime_c__String__fini>:
 80133e8:	b320      	cbz	r0, 8013434 <rosidl_runtime_c__String__fini+0x4c>
 80133ea:	6803      	ldr	r3, [r0, #0]
 80133ec:	b510      	push	{r4, lr}
 80133ee:	4604      	mov	r4, r0
 80133f0:	b086      	sub	sp, #24
 80133f2:	b173      	cbz	r3, 8013412 <rosidl_runtime_c__String__fini+0x2a>
 80133f4:	6883      	ldr	r3, [r0, #8]
 80133f6:	b1f3      	cbz	r3, 8013436 <rosidl_runtime_c__String__fini+0x4e>
 80133f8:	a801      	add	r0, sp, #4
 80133fa:	f7ff f80d 	bl	8012418 <rcutils_get_default_allocator>
 80133fe:	9b02      	ldr	r3, [sp, #8]
 8013400:	9905      	ldr	r1, [sp, #20]
 8013402:	6820      	ldr	r0, [r4, #0]
 8013404:	4798      	blx	r3
 8013406:	2300      	movs	r3, #0
 8013408:	e9c4 3300 	strd	r3, r3, [r4]
 801340c:	60a3      	str	r3, [r4, #8]
 801340e:	b006      	add	sp, #24
 8013410:	bd10      	pop	{r4, pc}
 8013412:	6843      	ldr	r3, [r0, #4]
 8013414:	b9db      	cbnz	r3, 801344e <rosidl_runtime_c__String__fini+0x66>
 8013416:	6883      	ldr	r3, [r0, #8]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d0f8      	beq.n	801340e <rosidl_runtime_c__String__fini+0x26>
 801341c:	4b12      	ldr	r3, [pc, #72]	@ (8013468 <rosidl_runtime_c__String__fini+0x80>)
 801341e:	2251      	movs	r2, #81	@ 0x51
 8013420:	2101      	movs	r1, #1
 8013422:	4812      	ldr	r0, [pc, #72]	@ (801346c <rosidl_runtime_c__String__fini+0x84>)
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	68db      	ldr	r3, [r3, #12]
 8013428:	f000 fa62 	bl	80138f0 <fwrite>
 801342c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013430:	f000 f84a 	bl	80134c8 <exit>
 8013434:	4770      	bx	lr
 8013436:	4b0c      	ldr	r3, [pc, #48]	@ (8013468 <rosidl_runtime_c__String__fini+0x80>)
 8013438:	224c      	movs	r2, #76	@ 0x4c
 801343a:	2101      	movs	r1, #1
 801343c:	480c      	ldr	r0, [pc, #48]	@ (8013470 <rosidl_runtime_c__String__fini+0x88>)
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	68db      	ldr	r3, [r3, #12]
 8013442:	f000 fa55 	bl	80138f0 <fwrite>
 8013446:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801344a:	f000 f83d 	bl	80134c8 <exit>
 801344e:	4b06      	ldr	r3, [pc, #24]	@ (8013468 <rosidl_runtime_c__String__fini+0x80>)
 8013450:	224e      	movs	r2, #78	@ 0x4e
 8013452:	2101      	movs	r1, #1
 8013454:	4807      	ldr	r0, [pc, #28]	@ (8013474 <rosidl_runtime_c__String__fini+0x8c>)
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	68db      	ldr	r3, [r3, #12]
 801345a:	f000 fa49 	bl	80138f0 <fwrite>
 801345e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013462:	f000 f831 	bl	80134c8 <exit>
 8013466:	bf00      	nop
 8013468:	240012b8 	.word	0x240012b8
 801346c:	08015c94 	.word	0x08015c94
 8013470:	08015bf4 	.word	0x08015bf4
 8013474:	08015c44 	.word	0x08015c44

08013478 <tier4_vehicle_msgs__msg__ActuationCommand__init>:
 8013478:	3800      	subs	r0, #0
 801347a:	bf18      	it	ne
 801347c:	2001      	movne	r0, #1
 801347e:	4770      	bx	lr

08013480 <tier4_vehicle_msgs__msg__ActuationCommand__fini>:
 8013480:	4770      	bx	lr
 8013482:	bf00      	nop

08013484 <tier4_vehicle_msgs__msg__ActuationStatus__init>:
 8013484:	3800      	subs	r0, #0
 8013486:	bf18      	it	ne
 8013488:	2001      	movne	r0, #1
 801348a:	4770      	bx	lr

0801348c <tier4_vehicle_msgs__msg__ActuationStatus__fini>:
 801348c:	4770      	bx	lr
 801348e:	bf00      	nop

08013490 <calloc>:
 8013490:	4b02      	ldr	r3, [pc, #8]	@ (801349c <calloc+0xc>)
 8013492:	460a      	mov	r2, r1
 8013494:	4601      	mov	r1, r0
 8013496:	6818      	ldr	r0, [r3, #0]
 8013498:	f000 b802 	b.w	80134a0 <_calloc_r>
 801349c:	240012b8 	.word	0x240012b8

080134a0 <_calloc_r>:
 80134a0:	b570      	push	{r4, r5, r6, lr}
 80134a2:	fba1 5402 	umull	r5, r4, r1, r2
 80134a6:	b93c      	cbnz	r4, 80134b8 <_calloc_r+0x18>
 80134a8:	4629      	mov	r1, r5
 80134aa:	f000 f851 	bl	8013550 <_malloc_r>
 80134ae:	4606      	mov	r6, r0
 80134b0:	b928      	cbnz	r0, 80134be <_calloc_r+0x1e>
 80134b2:	2600      	movs	r6, #0
 80134b4:	4630      	mov	r0, r6
 80134b6:	bd70      	pop	{r4, r5, r6, pc}
 80134b8:	220c      	movs	r2, #12
 80134ba:	6002      	str	r2, [r0, #0]
 80134bc:	e7f9      	b.n	80134b2 <_calloc_r+0x12>
 80134be:	462a      	mov	r2, r5
 80134c0:	4621      	mov	r1, r4
 80134c2:	f000 fafb 	bl	8013abc <memset>
 80134c6:	e7f5      	b.n	80134b4 <_calloc_r+0x14>

080134c8 <exit>:
 80134c8:	b508      	push	{r3, lr}
 80134ca:	4b06      	ldr	r3, [pc, #24]	@ (80134e4 <exit+0x1c>)
 80134cc:	4604      	mov	r4, r0
 80134ce:	b113      	cbz	r3, 80134d6 <exit+0xe>
 80134d0:	2100      	movs	r1, #0
 80134d2:	f3af 8000 	nop.w
 80134d6:	4b04      	ldr	r3, [pc, #16]	@ (80134e8 <exit+0x20>)
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	b103      	cbz	r3, 80134de <exit+0x16>
 80134dc:	4798      	blx	r3
 80134de:	4620      	mov	r0, r4
 80134e0:	f7ed ff16 	bl	8001310 <_exit>
 80134e4:	00000000 	.word	0x00000000
 80134e8:	24033448 	.word	0x24033448

080134ec <malloc>:
 80134ec:	4b02      	ldr	r3, [pc, #8]	@ (80134f8 <malloc+0xc>)
 80134ee:	4601      	mov	r1, r0
 80134f0:	6818      	ldr	r0, [r3, #0]
 80134f2:	f000 b82d 	b.w	8013550 <_malloc_r>
 80134f6:	bf00      	nop
 80134f8:	240012b8 	.word	0x240012b8

080134fc <free>:
 80134fc:	4b02      	ldr	r3, [pc, #8]	@ (8013508 <free+0xc>)
 80134fe:	4601      	mov	r1, r0
 8013500:	6818      	ldr	r0, [r3, #0]
 8013502:	f000 bbcb 	b.w	8013c9c <_free_r>
 8013506:	bf00      	nop
 8013508:	240012b8 	.word	0x240012b8

0801350c <sbrk_aligned>:
 801350c:	b570      	push	{r4, r5, r6, lr}
 801350e:	4e0f      	ldr	r6, [pc, #60]	@ (801354c <sbrk_aligned+0x40>)
 8013510:	460c      	mov	r4, r1
 8013512:	6831      	ldr	r1, [r6, #0]
 8013514:	4605      	mov	r5, r0
 8013516:	b911      	cbnz	r1, 801351e <sbrk_aligned+0x12>
 8013518:	f000 fb62 	bl	8013be0 <_sbrk_r>
 801351c:	6030      	str	r0, [r6, #0]
 801351e:	4621      	mov	r1, r4
 8013520:	4628      	mov	r0, r5
 8013522:	f000 fb5d 	bl	8013be0 <_sbrk_r>
 8013526:	1c43      	adds	r3, r0, #1
 8013528:	d103      	bne.n	8013532 <sbrk_aligned+0x26>
 801352a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801352e:	4620      	mov	r0, r4
 8013530:	bd70      	pop	{r4, r5, r6, pc}
 8013532:	1cc4      	adds	r4, r0, #3
 8013534:	f024 0403 	bic.w	r4, r4, #3
 8013538:	42a0      	cmp	r0, r4
 801353a:	d0f8      	beq.n	801352e <sbrk_aligned+0x22>
 801353c:	1a21      	subs	r1, r4, r0
 801353e:	4628      	mov	r0, r5
 8013540:	f000 fb4e 	bl	8013be0 <_sbrk_r>
 8013544:	3001      	adds	r0, #1
 8013546:	d1f2      	bne.n	801352e <sbrk_aligned+0x22>
 8013548:	e7ef      	b.n	801352a <sbrk_aligned+0x1e>
 801354a:	bf00      	nop
 801354c:	24033308 	.word	0x24033308

08013550 <_malloc_r>:
 8013550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013554:	1ccd      	adds	r5, r1, #3
 8013556:	f025 0503 	bic.w	r5, r5, #3
 801355a:	3508      	adds	r5, #8
 801355c:	2d0c      	cmp	r5, #12
 801355e:	bf38      	it	cc
 8013560:	250c      	movcc	r5, #12
 8013562:	2d00      	cmp	r5, #0
 8013564:	4606      	mov	r6, r0
 8013566:	db01      	blt.n	801356c <_malloc_r+0x1c>
 8013568:	42a9      	cmp	r1, r5
 801356a:	d904      	bls.n	8013576 <_malloc_r+0x26>
 801356c:	230c      	movs	r3, #12
 801356e:	6033      	str	r3, [r6, #0]
 8013570:	2000      	movs	r0, #0
 8013572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013576:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801364c <_malloc_r+0xfc>
 801357a:	f000 f869 	bl	8013650 <__malloc_lock>
 801357e:	f8d8 3000 	ldr.w	r3, [r8]
 8013582:	461c      	mov	r4, r3
 8013584:	bb44      	cbnz	r4, 80135d8 <_malloc_r+0x88>
 8013586:	4629      	mov	r1, r5
 8013588:	4630      	mov	r0, r6
 801358a:	f7ff ffbf 	bl	801350c <sbrk_aligned>
 801358e:	1c43      	adds	r3, r0, #1
 8013590:	4604      	mov	r4, r0
 8013592:	d158      	bne.n	8013646 <_malloc_r+0xf6>
 8013594:	f8d8 4000 	ldr.w	r4, [r8]
 8013598:	4627      	mov	r7, r4
 801359a:	2f00      	cmp	r7, #0
 801359c:	d143      	bne.n	8013626 <_malloc_r+0xd6>
 801359e:	2c00      	cmp	r4, #0
 80135a0:	d04b      	beq.n	801363a <_malloc_r+0xea>
 80135a2:	6823      	ldr	r3, [r4, #0]
 80135a4:	4639      	mov	r1, r7
 80135a6:	4630      	mov	r0, r6
 80135a8:	eb04 0903 	add.w	r9, r4, r3
 80135ac:	f000 fb18 	bl	8013be0 <_sbrk_r>
 80135b0:	4581      	cmp	r9, r0
 80135b2:	d142      	bne.n	801363a <_malloc_r+0xea>
 80135b4:	6821      	ldr	r1, [r4, #0]
 80135b6:	1a6d      	subs	r5, r5, r1
 80135b8:	4629      	mov	r1, r5
 80135ba:	4630      	mov	r0, r6
 80135bc:	f7ff ffa6 	bl	801350c <sbrk_aligned>
 80135c0:	3001      	adds	r0, #1
 80135c2:	d03a      	beq.n	801363a <_malloc_r+0xea>
 80135c4:	6823      	ldr	r3, [r4, #0]
 80135c6:	442b      	add	r3, r5
 80135c8:	6023      	str	r3, [r4, #0]
 80135ca:	f8d8 3000 	ldr.w	r3, [r8]
 80135ce:	685a      	ldr	r2, [r3, #4]
 80135d0:	bb62      	cbnz	r2, 801362c <_malloc_r+0xdc>
 80135d2:	f8c8 7000 	str.w	r7, [r8]
 80135d6:	e00f      	b.n	80135f8 <_malloc_r+0xa8>
 80135d8:	6822      	ldr	r2, [r4, #0]
 80135da:	1b52      	subs	r2, r2, r5
 80135dc:	d420      	bmi.n	8013620 <_malloc_r+0xd0>
 80135de:	2a0b      	cmp	r2, #11
 80135e0:	d917      	bls.n	8013612 <_malloc_r+0xc2>
 80135e2:	1961      	adds	r1, r4, r5
 80135e4:	42a3      	cmp	r3, r4
 80135e6:	6025      	str	r5, [r4, #0]
 80135e8:	bf18      	it	ne
 80135ea:	6059      	strne	r1, [r3, #4]
 80135ec:	6863      	ldr	r3, [r4, #4]
 80135ee:	bf08      	it	eq
 80135f0:	f8c8 1000 	streq.w	r1, [r8]
 80135f4:	5162      	str	r2, [r4, r5]
 80135f6:	604b      	str	r3, [r1, #4]
 80135f8:	4630      	mov	r0, r6
 80135fa:	f000 f82f 	bl	801365c <__malloc_unlock>
 80135fe:	f104 000b 	add.w	r0, r4, #11
 8013602:	1d23      	adds	r3, r4, #4
 8013604:	f020 0007 	bic.w	r0, r0, #7
 8013608:	1ac2      	subs	r2, r0, r3
 801360a:	bf1c      	itt	ne
 801360c:	1a1b      	subne	r3, r3, r0
 801360e:	50a3      	strne	r3, [r4, r2]
 8013610:	e7af      	b.n	8013572 <_malloc_r+0x22>
 8013612:	6862      	ldr	r2, [r4, #4]
 8013614:	42a3      	cmp	r3, r4
 8013616:	bf0c      	ite	eq
 8013618:	f8c8 2000 	streq.w	r2, [r8]
 801361c:	605a      	strne	r2, [r3, #4]
 801361e:	e7eb      	b.n	80135f8 <_malloc_r+0xa8>
 8013620:	4623      	mov	r3, r4
 8013622:	6864      	ldr	r4, [r4, #4]
 8013624:	e7ae      	b.n	8013584 <_malloc_r+0x34>
 8013626:	463c      	mov	r4, r7
 8013628:	687f      	ldr	r7, [r7, #4]
 801362a:	e7b6      	b.n	801359a <_malloc_r+0x4a>
 801362c:	461a      	mov	r2, r3
 801362e:	685b      	ldr	r3, [r3, #4]
 8013630:	42a3      	cmp	r3, r4
 8013632:	d1fb      	bne.n	801362c <_malloc_r+0xdc>
 8013634:	2300      	movs	r3, #0
 8013636:	6053      	str	r3, [r2, #4]
 8013638:	e7de      	b.n	80135f8 <_malloc_r+0xa8>
 801363a:	230c      	movs	r3, #12
 801363c:	6033      	str	r3, [r6, #0]
 801363e:	4630      	mov	r0, r6
 8013640:	f000 f80c 	bl	801365c <__malloc_unlock>
 8013644:	e794      	b.n	8013570 <_malloc_r+0x20>
 8013646:	6005      	str	r5, [r0, #0]
 8013648:	e7d6      	b.n	80135f8 <_malloc_r+0xa8>
 801364a:	bf00      	nop
 801364c:	2403330c 	.word	0x2403330c

08013650 <__malloc_lock>:
 8013650:	4801      	ldr	r0, [pc, #4]	@ (8013658 <__malloc_lock+0x8>)
 8013652:	f000 bb12 	b.w	8013c7a <__retarget_lock_acquire_recursive>
 8013656:	bf00      	nop
 8013658:	24033450 	.word	0x24033450

0801365c <__malloc_unlock>:
 801365c:	4801      	ldr	r0, [pc, #4]	@ (8013664 <__malloc_unlock+0x8>)
 801365e:	f000 bb0d 	b.w	8013c7c <__retarget_lock_release_recursive>
 8013662:	bf00      	nop
 8013664:	24033450 	.word	0x24033450

08013668 <realloc>:
 8013668:	4b02      	ldr	r3, [pc, #8]	@ (8013674 <realloc+0xc>)
 801366a:	460a      	mov	r2, r1
 801366c:	4601      	mov	r1, r0
 801366e:	6818      	ldr	r0, [r3, #0]
 8013670:	f000 b802 	b.w	8013678 <_realloc_r>
 8013674:	240012b8 	.word	0x240012b8

08013678 <_realloc_r>:
 8013678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801367c:	4680      	mov	r8, r0
 801367e:	4615      	mov	r5, r2
 8013680:	460c      	mov	r4, r1
 8013682:	b921      	cbnz	r1, 801368e <_realloc_r+0x16>
 8013684:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013688:	4611      	mov	r1, r2
 801368a:	f7ff bf61 	b.w	8013550 <_malloc_r>
 801368e:	b92a      	cbnz	r2, 801369c <_realloc_r+0x24>
 8013690:	f000 fb04 	bl	8013c9c <_free_r>
 8013694:	2400      	movs	r4, #0
 8013696:	4620      	mov	r0, r4
 8013698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801369c:	f000 fb48 	bl	8013d30 <_malloc_usable_size_r>
 80136a0:	4285      	cmp	r5, r0
 80136a2:	4606      	mov	r6, r0
 80136a4:	d802      	bhi.n	80136ac <_realloc_r+0x34>
 80136a6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80136aa:	d8f4      	bhi.n	8013696 <_realloc_r+0x1e>
 80136ac:	4629      	mov	r1, r5
 80136ae:	4640      	mov	r0, r8
 80136b0:	f7ff ff4e 	bl	8013550 <_malloc_r>
 80136b4:	4607      	mov	r7, r0
 80136b6:	2800      	cmp	r0, #0
 80136b8:	d0ec      	beq.n	8013694 <_realloc_r+0x1c>
 80136ba:	42b5      	cmp	r5, r6
 80136bc:	462a      	mov	r2, r5
 80136be:	4621      	mov	r1, r4
 80136c0:	bf28      	it	cs
 80136c2:	4632      	movcs	r2, r6
 80136c4:	f000 fadb 	bl	8013c7e <memcpy>
 80136c8:	4621      	mov	r1, r4
 80136ca:	4640      	mov	r0, r8
 80136cc:	f000 fae6 	bl	8013c9c <_free_r>
 80136d0:	463c      	mov	r4, r7
 80136d2:	e7e0      	b.n	8013696 <_realloc_r+0x1e>

080136d4 <std>:
 80136d4:	2300      	movs	r3, #0
 80136d6:	b510      	push	{r4, lr}
 80136d8:	4604      	mov	r4, r0
 80136da:	e9c0 3300 	strd	r3, r3, [r0]
 80136de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80136e2:	6083      	str	r3, [r0, #8]
 80136e4:	8181      	strh	r1, [r0, #12]
 80136e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80136e8:	81c2      	strh	r2, [r0, #14]
 80136ea:	6183      	str	r3, [r0, #24]
 80136ec:	4619      	mov	r1, r3
 80136ee:	2208      	movs	r2, #8
 80136f0:	305c      	adds	r0, #92	@ 0x5c
 80136f2:	f000 f9e3 	bl	8013abc <memset>
 80136f6:	4b0d      	ldr	r3, [pc, #52]	@ (801372c <std+0x58>)
 80136f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80136fa:	4b0d      	ldr	r3, [pc, #52]	@ (8013730 <std+0x5c>)
 80136fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80136fe:	4b0d      	ldr	r3, [pc, #52]	@ (8013734 <std+0x60>)
 8013700:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013702:	4b0d      	ldr	r3, [pc, #52]	@ (8013738 <std+0x64>)
 8013704:	6323      	str	r3, [r4, #48]	@ 0x30
 8013706:	4b0d      	ldr	r3, [pc, #52]	@ (801373c <std+0x68>)
 8013708:	6224      	str	r4, [r4, #32]
 801370a:	429c      	cmp	r4, r3
 801370c:	d006      	beq.n	801371c <std+0x48>
 801370e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013712:	4294      	cmp	r4, r2
 8013714:	d002      	beq.n	801371c <std+0x48>
 8013716:	33d0      	adds	r3, #208	@ 0xd0
 8013718:	429c      	cmp	r4, r3
 801371a:	d105      	bne.n	8013728 <std+0x54>
 801371c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013724:	f000 baa8 	b.w	8013c78 <__retarget_lock_init_recursive>
 8013728:	bd10      	pop	{r4, pc}
 801372a:	bf00      	nop
 801372c:	0801390d 	.word	0x0801390d
 8013730:	0801392f 	.word	0x0801392f
 8013734:	08013967 	.word	0x08013967
 8013738:	0801398b 	.word	0x0801398b
 801373c:	24033310 	.word	0x24033310

08013740 <stdio_exit_handler>:
 8013740:	4a02      	ldr	r2, [pc, #8]	@ (801374c <stdio_exit_handler+0xc>)
 8013742:	4903      	ldr	r1, [pc, #12]	@ (8013750 <stdio_exit_handler+0x10>)
 8013744:	4803      	ldr	r0, [pc, #12]	@ (8013754 <stdio_exit_handler+0x14>)
 8013746:	f000 b869 	b.w	801381c <_fwalk_sglue>
 801374a:	bf00      	nop
 801374c:	240012ac 	.word	0x240012ac
 8013750:	08013e49 	.word	0x08013e49
 8013754:	240012bc 	.word	0x240012bc

08013758 <cleanup_stdio>:
 8013758:	6841      	ldr	r1, [r0, #4]
 801375a:	4b0c      	ldr	r3, [pc, #48]	@ (801378c <cleanup_stdio+0x34>)
 801375c:	4299      	cmp	r1, r3
 801375e:	b510      	push	{r4, lr}
 8013760:	4604      	mov	r4, r0
 8013762:	d001      	beq.n	8013768 <cleanup_stdio+0x10>
 8013764:	f000 fb70 	bl	8013e48 <_fflush_r>
 8013768:	68a1      	ldr	r1, [r4, #8]
 801376a:	4b09      	ldr	r3, [pc, #36]	@ (8013790 <cleanup_stdio+0x38>)
 801376c:	4299      	cmp	r1, r3
 801376e:	d002      	beq.n	8013776 <cleanup_stdio+0x1e>
 8013770:	4620      	mov	r0, r4
 8013772:	f000 fb69 	bl	8013e48 <_fflush_r>
 8013776:	68e1      	ldr	r1, [r4, #12]
 8013778:	4b06      	ldr	r3, [pc, #24]	@ (8013794 <cleanup_stdio+0x3c>)
 801377a:	4299      	cmp	r1, r3
 801377c:	d004      	beq.n	8013788 <cleanup_stdio+0x30>
 801377e:	4620      	mov	r0, r4
 8013780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013784:	f000 bb60 	b.w	8013e48 <_fflush_r>
 8013788:	bd10      	pop	{r4, pc}
 801378a:	bf00      	nop
 801378c:	24033310 	.word	0x24033310
 8013790:	24033378 	.word	0x24033378
 8013794:	240333e0 	.word	0x240333e0

08013798 <global_stdio_init.part.0>:
 8013798:	b510      	push	{r4, lr}
 801379a:	4b0b      	ldr	r3, [pc, #44]	@ (80137c8 <global_stdio_init.part.0+0x30>)
 801379c:	4c0b      	ldr	r4, [pc, #44]	@ (80137cc <global_stdio_init.part.0+0x34>)
 801379e:	4a0c      	ldr	r2, [pc, #48]	@ (80137d0 <global_stdio_init.part.0+0x38>)
 80137a0:	601a      	str	r2, [r3, #0]
 80137a2:	4620      	mov	r0, r4
 80137a4:	2200      	movs	r2, #0
 80137a6:	2104      	movs	r1, #4
 80137a8:	f7ff ff94 	bl	80136d4 <std>
 80137ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80137b0:	2201      	movs	r2, #1
 80137b2:	2109      	movs	r1, #9
 80137b4:	f7ff ff8e 	bl	80136d4 <std>
 80137b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80137bc:	2202      	movs	r2, #2
 80137be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80137c2:	2112      	movs	r1, #18
 80137c4:	f7ff bf86 	b.w	80136d4 <std>
 80137c8:	24033448 	.word	0x24033448
 80137cc:	24033310 	.word	0x24033310
 80137d0:	08013741 	.word	0x08013741

080137d4 <__sfp_lock_acquire>:
 80137d4:	4801      	ldr	r0, [pc, #4]	@ (80137dc <__sfp_lock_acquire+0x8>)
 80137d6:	f000 ba50 	b.w	8013c7a <__retarget_lock_acquire_recursive>
 80137da:	bf00      	nop
 80137dc:	24033451 	.word	0x24033451

080137e0 <__sfp_lock_release>:
 80137e0:	4801      	ldr	r0, [pc, #4]	@ (80137e8 <__sfp_lock_release+0x8>)
 80137e2:	f000 ba4b 	b.w	8013c7c <__retarget_lock_release_recursive>
 80137e6:	bf00      	nop
 80137e8:	24033451 	.word	0x24033451

080137ec <__sinit>:
 80137ec:	b510      	push	{r4, lr}
 80137ee:	4604      	mov	r4, r0
 80137f0:	f7ff fff0 	bl	80137d4 <__sfp_lock_acquire>
 80137f4:	6a23      	ldr	r3, [r4, #32]
 80137f6:	b11b      	cbz	r3, 8013800 <__sinit+0x14>
 80137f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80137fc:	f7ff bff0 	b.w	80137e0 <__sfp_lock_release>
 8013800:	4b04      	ldr	r3, [pc, #16]	@ (8013814 <__sinit+0x28>)
 8013802:	6223      	str	r3, [r4, #32]
 8013804:	4b04      	ldr	r3, [pc, #16]	@ (8013818 <__sinit+0x2c>)
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d1f5      	bne.n	80137f8 <__sinit+0xc>
 801380c:	f7ff ffc4 	bl	8013798 <global_stdio_init.part.0>
 8013810:	e7f2      	b.n	80137f8 <__sinit+0xc>
 8013812:	bf00      	nop
 8013814:	08013759 	.word	0x08013759
 8013818:	24033448 	.word	0x24033448

0801381c <_fwalk_sglue>:
 801381c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013820:	4607      	mov	r7, r0
 8013822:	4688      	mov	r8, r1
 8013824:	4614      	mov	r4, r2
 8013826:	2600      	movs	r6, #0
 8013828:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801382c:	f1b9 0901 	subs.w	r9, r9, #1
 8013830:	d505      	bpl.n	801383e <_fwalk_sglue+0x22>
 8013832:	6824      	ldr	r4, [r4, #0]
 8013834:	2c00      	cmp	r4, #0
 8013836:	d1f7      	bne.n	8013828 <_fwalk_sglue+0xc>
 8013838:	4630      	mov	r0, r6
 801383a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801383e:	89ab      	ldrh	r3, [r5, #12]
 8013840:	2b01      	cmp	r3, #1
 8013842:	d907      	bls.n	8013854 <_fwalk_sglue+0x38>
 8013844:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013848:	3301      	adds	r3, #1
 801384a:	d003      	beq.n	8013854 <_fwalk_sglue+0x38>
 801384c:	4629      	mov	r1, r5
 801384e:	4638      	mov	r0, r7
 8013850:	47c0      	blx	r8
 8013852:	4306      	orrs	r6, r0
 8013854:	3568      	adds	r5, #104	@ 0x68
 8013856:	e7e9      	b.n	801382c <_fwalk_sglue+0x10>

08013858 <_fwrite_r>:
 8013858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801385c:	9c08      	ldr	r4, [sp, #32]
 801385e:	468a      	mov	sl, r1
 8013860:	4690      	mov	r8, r2
 8013862:	fb02 f903 	mul.w	r9, r2, r3
 8013866:	4606      	mov	r6, r0
 8013868:	b118      	cbz	r0, 8013872 <_fwrite_r+0x1a>
 801386a:	6a03      	ldr	r3, [r0, #32]
 801386c:	b90b      	cbnz	r3, 8013872 <_fwrite_r+0x1a>
 801386e:	f7ff ffbd 	bl	80137ec <__sinit>
 8013872:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013874:	07dd      	lsls	r5, r3, #31
 8013876:	d405      	bmi.n	8013884 <_fwrite_r+0x2c>
 8013878:	89a3      	ldrh	r3, [r4, #12]
 801387a:	0598      	lsls	r0, r3, #22
 801387c:	d402      	bmi.n	8013884 <_fwrite_r+0x2c>
 801387e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013880:	f000 f9fb 	bl	8013c7a <__retarget_lock_acquire_recursive>
 8013884:	89a3      	ldrh	r3, [r4, #12]
 8013886:	0719      	lsls	r1, r3, #28
 8013888:	d516      	bpl.n	80138b8 <_fwrite_r+0x60>
 801388a:	6923      	ldr	r3, [r4, #16]
 801388c:	b1a3      	cbz	r3, 80138b8 <_fwrite_r+0x60>
 801388e:	2500      	movs	r5, #0
 8013890:	454d      	cmp	r5, r9
 8013892:	d01f      	beq.n	80138d4 <_fwrite_r+0x7c>
 8013894:	68a7      	ldr	r7, [r4, #8]
 8013896:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801389a:	3f01      	subs	r7, #1
 801389c:	2f00      	cmp	r7, #0
 801389e:	60a7      	str	r7, [r4, #8]
 80138a0:	da04      	bge.n	80138ac <_fwrite_r+0x54>
 80138a2:	69a3      	ldr	r3, [r4, #24]
 80138a4:	429f      	cmp	r7, r3
 80138a6:	db0f      	blt.n	80138c8 <_fwrite_r+0x70>
 80138a8:	290a      	cmp	r1, #10
 80138aa:	d00d      	beq.n	80138c8 <_fwrite_r+0x70>
 80138ac:	6823      	ldr	r3, [r4, #0]
 80138ae:	1c5a      	adds	r2, r3, #1
 80138b0:	6022      	str	r2, [r4, #0]
 80138b2:	7019      	strb	r1, [r3, #0]
 80138b4:	3501      	adds	r5, #1
 80138b6:	e7eb      	b.n	8013890 <_fwrite_r+0x38>
 80138b8:	4621      	mov	r1, r4
 80138ba:	4630      	mov	r0, r6
 80138bc:	f000 f8a8 	bl	8013a10 <__swsetup_r>
 80138c0:	2800      	cmp	r0, #0
 80138c2:	d0e4      	beq.n	801388e <_fwrite_r+0x36>
 80138c4:	2500      	movs	r5, #0
 80138c6:	e005      	b.n	80138d4 <_fwrite_r+0x7c>
 80138c8:	4622      	mov	r2, r4
 80138ca:	4630      	mov	r0, r6
 80138cc:	f000 f861 	bl	8013992 <__swbuf_r>
 80138d0:	3001      	adds	r0, #1
 80138d2:	d1ef      	bne.n	80138b4 <_fwrite_r+0x5c>
 80138d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80138d6:	07da      	lsls	r2, r3, #31
 80138d8:	d405      	bmi.n	80138e6 <_fwrite_r+0x8e>
 80138da:	89a3      	ldrh	r3, [r4, #12]
 80138dc:	059b      	lsls	r3, r3, #22
 80138de:	d402      	bmi.n	80138e6 <_fwrite_r+0x8e>
 80138e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80138e2:	f000 f9cb 	bl	8013c7c <__retarget_lock_release_recursive>
 80138e6:	fbb5 f0f8 	udiv	r0, r5, r8
 80138ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080138f0 <fwrite>:
 80138f0:	b507      	push	{r0, r1, r2, lr}
 80138f2:	9300      	str	r3, [sp, #0]
 80138f4:	4613      	mov	r3, r2
 80138f6:	460a      	mov	r2, r1
 80138f8:	4601      	mov	r1, r0
 80138fa:	4803      	ldr	r0, [pc, #12]	@ (8013908 <fwrite+0x18>)
 80138fc:	6800      	ldr	r0, [r0, #0]
 80138fe:	f7ff ffab 	bl	8013858 <_fwrite_r>
 8013902:	b003      	add	sp, #12
 8013904:	f85d fb04 	ldr.w	pc, [sp], #4
 8013908:	240012b8 	.word	0x240012b8

0801390c <__sread>:
 801390c:	b510      	push	{r4, lr}
 801390e:	460c      	mov	r4, r1
 8013910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013914:	f000 f952 	bl	8013bbc <_read_r>
 8013918:	2800      	cmp	r0, #0
 801391a:	bfab      	itete	ge
 801391c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801391e:	89a3      	ldrhlt	r3, [r4, #12]
 8013920:	181b      	addge	r3, r3, r0
 8013922:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013926:	bfac      	ite	ge
 8013928:	6563      	strge	r3, [r4, #84]	@ 0x54
 801392a:	81a3      	strhlt	r3, [r4, #12]
 801392c:	bd10      	pop	{r4, pc}

0801392e <__swrite>:
 801392e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013932:	461f      	mov	r7, r3
 8013934:	898b      	ldrh	r3, [r1, #12]
 8013936:	05db      	lsls	r3, r3, #23
 8013938:	4605      	mov	r5, r0
 801393a:	460c      	mov	r4, r1
 801393c:	4616      	mov	r6, r2
 801393e:	d505      	bpl.n	801394c <__swrite+0x1e>
 8013940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013944:	2302      	movs	r3, #2
 8013946:	2200      	movs	r2, #0
 8013948:	f000 f926 	bl	8013b98 <_lseek_r>
 801394c:	89a3      	ldrh	r3, [r4, #12]
 801394e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013952:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013956:	81a3      	strh	r3, [r4, #12]
 8013958:	4632      	mov	r2, r6
 801395a:	463b      	mov	r3, r7
 801395c:	4628      	mov	r0, r5
 801395e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013962:	f000 b94d 	b.w	8013c00 <_write_r>

08013966 <__sseek>:
 8013966:	b510      	push	{r4, lr}
 8013968:	460c      	mov	r4, r1
 801396a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801396e:	f000 f913 	bl	8013b98 <_lseek_r>
 8013972:	1c43      	adds	r3, r0, #1
 8013974:	89a3      	ldrh	r3, [r4, #12]
 8013976:	bf15      	itete	ne
 8013978:	6560      	strne	r0, [r4, #84]	@ 0x54
 801397a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801397e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013982:	81a3      	strheq	r3, [r4, #12]
 8013984:	bf18      	it	ne
 8013986:	81a3      	strhne	r3, [r4, #12]
 8013988:	bd10      	pop	{r4, pc}

0801398a <__sclose>:
 801398a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801398e:	f000 b89d 	b.w	8013acc <_close_r>

08013992 <__swbuf_r>:
 8013992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013994:	460e      	mov	r6, r1
 8013996:	4614      	mov	r4, r2
 8013998:	4605      	mov	r5, r0
 801399a:	b118      	cbz	r0, 80139a4 <__swbuf_r+0x12>
 801399c:	6a03      	ldr	r3, [r0, #32]
 801399e:	b90b      	cbnz	r3, 80139a4 <__swbuf_r+0x12>
 80139a0:	f7ff ff24 	bl	80137ec <__sinit>
 80139a4:	69a3      	ldr	r3, [r4, #24]
 80139a6:	60a3      	str	r3, [r4, #8]
 80139a8:	89a3      	ldrh	r3, [r4, #12]
 80139aa:	071a      	lsls	r2, r3, #28
 80139ac:	d501      	bpl.n	80139b2 <__swbuf_r+0x20>
 80139ae:	6923      	ldr	r3, [r4, #16]
 80139b0:	b943      	cbnz	r3, 80139c4 <__swbuf_r+0x32>
 80139b2:	4621      	mov	r1, r4
 80139b4:	4628      	mov	r0, r5
 80139b6:	f000 f82b 	bl	8013a10 <__swsetup_r>
 80139ba:	b118      	cbz	r0, 80139c4 <__swbuf_r+0x32>
 80139bc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80139c0:	4638      	mov	r0, r7
 80139c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139c4:	6823      	ldr	r3, [r4, #0]
 80139c6:	6922      	ldr	r2, [r4, #16]
 80139c8:	1a98      	subs	r0, r3, r2
 80139ca:	6963      	ldr	r3, [r4, #20]
 80139cc:	b2f6      	uxtb	r6, r6
 80139ce:	4283      	cmp	r3, r0
 80139d0:	4637      	mov	r7, r6
 80139d2:	dc05      	bgt.n	80139e0 <__swbuf_r+0x4e>
 80139d4:	4621      	mov	r1, r4
 80139d6:	4628      	mov	r0, r5
 80139d8:	f000 fa36 	bl	8013e48 <_fflush_r>
 80139dc:	2800      	cmp	r0, #0
 80139de:	d1ed      	bne.n	80139bc <__swbuf_r+0x2a>
 80139e0:	68a3      	ldr	r3, [r4, #8]
 80139e2:	3b01      	subs	r3, #1
 80139e4:	60a3      	str	r3, [r4, #8]
 80139e6:	6823      	ldr	r3, [r4, #0]
 80139e8:	1c5a      	adds	r2, r3, #1
 80139ea:	6022      	str	r2, [r4, #0]
 80139ec:	701e      	strb	r6, [r3, #0]
 80139ee:	6962      	ldr	r2, [r4, #20]
 80139f0:	1c43      	adds	r3, r0, #1
 80139f2:	429a      	cmp	r2, r3
 80139f4:	d004      	beq.n	8013a00 <__swbuf_r+0x6e>
 80139f6:	89a3      	ldrh	r3, [r4, #12]
 80139f8:	07db      	lsls	r3, r3, #31
 80139fa:	d5e1      	bpl.n	80139c0 <__swbuf_r+0x2e>
 80139fc:	2e0a      	cmp	r6, #10
 80139fe:	d1df      	bne.n	80139c0 <__swbuf_r+0x2e>
 8013a00:	4621      	mov	r1, r4
 8013a02:	4628      	mov	r0, r5
 8013a04:	f000 fa20 	bl	8013e48 <_fflush_r>
 8013a08:	2800      	cmp	r0, #0
 8013a0a:	d0d9      	beq.n	80139c0 <__swbuf_r+0x2e>
 8013a0c:	e7d6      	b.n	80139bc <__swbuf_r+0x2a>
	...

08013a10 <__swsetup_r>:
 8013a10:	b538      	push	{r3, r4, r5, lr}
 8013a12:	4b29      	ldr	r3, [pc, #164]	@ (8013ab8 <__swsetup_r+0xa8>)
 8013a14:	4605      	mov	r5, r0
 8013a16:	6818      	ldr	r0, [r3, #0]
 8013a18:	460c      	mov	r4, r1
 8013a1a:	b118      	cbz	r0, 8013a24 <__swsetup_r+0x14>
 8013a1c:	6a03      	ldr	r3, [r0, #32]
 8013a1e:	b90b      	cbnz	r3, 8013a24 <__swsetup_r+0x14>
 8013a20:	f7ff fee4 	bl	80137ec <__sinit>
 8013a24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a28:	0719      	lsls	r1, r3, #28
 8013a2a:	d422      	bmi.n	8013a72 <__swsetup_r+0x62>
 8013a2c:	06da      	lsls	r2, r3, #27
 8013a2e:	d407      	bmi.n	8013a40 <__swsetup_r+0x30>
 8013a30:	2209      	movs	r2, #9
 8013a32:	602a      	str	r2, [r5, #0]
 8013a34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013a38:	81a3      	strh	r3, [r4, #12]
 8013a3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013a3e:	e033      	b.n	8013aa8 <__swsetup_r+0x98>
 8013a40:	0758      	lsls	r0, r3, #29
 8013a42:	d512      	bpl.n	8013a6a <__swsetup_r+0x5a>
 8013a44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013a46:	b141      	cbz	r1, 8013a5a <__swsetup_r+0x4a>
 8013a48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013a4c:	4299      	cmp	r1, r3
 8013a4e:	d002      	beq.n	8013a56 <__swsetup_r+0x46>
 8013a50:	4628      	mov	r0, r5
 8013a52:	f000 f923 	bl	8013c9c <_free_r>
 8013a56:	2300      	movs	r3, #0
 8013a58:	6363      	str	r3, [r4, #52]	@ 0x34
 8013a5a:	89a3      	ldrh	r3, [r4, #12]
 8013a5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013a60:	81a3      	strh	r3, [r4, #12]
 8013a62:	2300      	movs	r3, #0
 8013a64:	6063      	str	r3, [r4, #4]
 8013a66:	6923      	ldr	r3, [r4, #16]
 8013a68:	6023      	str	r3, [r4, #0]
 8013a6a:	89a3      	ldrh	r3, [r4, #12]
 8013a6c:	f043 0308 	orr.w	r3, r3, #8
 8013a70:	81a3      	strh	r3, [r4, #12]
 8013a72:	6923      	ldr	r3, [r4, #16]
 8013a74:	b94b      	cbnz	r3, 8013a8a <__swsetup_r+0x7a>
 8013a76:	89a3      	ldrh	r3, [r4, #12]
 8013a78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013a7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013a80:	d003      	beq.n	8013a8a <__swsetup_r+0x7a>
 8013a82:	4621      	mov	r1, r4
 8013a84:	4628      	mov	r0, r5
 8013a86:	f000 fa2d 	bl	8013ee4 <__smakebuf_r>
 8013a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a8e:	f013 0201 	ands.w	r2, r3, #1
 8013a92:	d00a      	beq.n	8013aaa <__swsetup_r+0x9a>
 8013a94:	2200      	movs	r2, #0
 8013a96:	60a2      	str	r2, [r4, #8]
 8013a98:	6962      	ldr	r2, [r4, #20]
 8013a9a:	4252      	negs	r2, r2
 8013a9c:	61a2      	str	r2, [r4, #24]
 8013a9e:	6922      	ldr	r2, [r4, #16]
 8013aa0:	b942      	cbnz	r2, 8013ab4 <__swsetup_r+0xa4>
 8013aa2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013aa6:	d1c5      	bne.n	8013a34 <__swsetup_r+0x24>
 8013aa8:	bd38      	pop	{r3, r4, r5, pc}
 8013aaa:	0799      	lsls	r1, r3, #30
 8013aac:	bf58      	it	pl
 8013aae:	6962      	ldrpl	r2, [r4, #20]
 8013ab0:	60a2      	str	r2, [r4, #8]
 8013ab2:	e7f4      	b.n	8013a9e <__swsetup_r+0x8e>
 8013ab4:	2000      	movs	r0, #0
 8013ab6:	e7f7      	b.n	8013aa8 <__swsetup_r+0x98>
 8013ab8:	240012b8 	.word	0x240012b8

08013abc <memset>:
 8013abc:	4402      	add	r2, r0
 8013abe:	4603      	mov	r3, r0
 8013ac0:	4293      	cmp	r3, r2
 8013ac2:	d100      	bne.n	8013ac6 <memset+0xa>
 8013ac4:	4770      	bx	lr
 8013ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8013aca:	e7f9      	b.n	8013ac0 <memset+0x4>

08013acc <_close_r>:
 8013acc:	b538      	push	{r3, r4, r5, lr}
 8013ace:	4d06      	ldr	r5, [pc, #24]	@ (8013ae8 <_close_r+0x1c>)
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	4604      	mov	r4, r0
 8013ad4:	4608      	mov	r0, r1
 8013ad6:	602b      	str	r3, [r5, #0]
 8013ad8:	f7ed fc5e 	bl	8001398 <_close>
 8013adc:	1c43      	adds	r3, r0, #1
 8013ade:	d102      	bne.n	8013ae6 <_close_r+0x1a>
 8013ae0:	682b      	ldr	r3, [r5, #0]
 8013ae2:	b103      	cbz	r3, 8013ae6 <_close_r+0x1a>
 8013ae4:	6023      	str	r3, [r4, #0]
 8013ae6:	bd38      	pop	{r3, r4, r5, pc}
 8013ae8:	2403344c 	.word	0x2403344c

08013aec <_reclaim_reent>:
 8013aec:	4b29      	ldr	r3, [pc, #164]	@ (8013b94 <_reclaim_reent+0xa8>)
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	4283      	cmp	r3, r0
 8013af2:	b570      	push	{r4, r5, r6, lr}
 8013af4:	4604      	mov	r4, r0
 8013af6:	d04b      	beq.n	8013b90 <_reclaim_reent+0xa4>
 8013af8:	69c3      	ldr	r3, [r0, #28]
 8013afa:	b1ab      	cbz	r3, 8013b28 <_reclaim_reent+0x3c>
 8013afc:	68db      	ldr	r3, [r3, #12]
 8013afe:	b16b      	cbz	r3, 8013b1c <_reclaim_reent+0x30>
 8013b00:	2500      	movs	r5, #0
 8013b02:	69e3      	ldr	r3, [r4, #28]
 8013b04:	68db      	ldr	r3, [r3, #12]
 8013b06:	5959      	ldr	r1, [r3, r5]
 8013b08:	2900      	cmp	r1, #0
 8013b0a:	d13b      	bne.n	8013b84 <_reclaim_reent+0x98>
 8013b0c:	3504      	adds	r5, #4
 8013b0e:	2d80      	cmp	r5, #128	@ 0x80
 8013b10:	d1f7      	bne.n	8013b02 <_reclaim_reent+0x16>
 8013b12:	69e3      	ldr	r3, [r4, #28]
 8013b14:	4620      	mov	r0, r4
 8013b16:	68d9      	ldr	r1, [r3, #12]
 8013b18:	f000 f8c0 	bl	8013c9c <_free_r>
 8013b1c:	69e3      	ldr	r3, [r4, #28]
 8013b1e:	6819      	ldr	r1, [r3, #0]
 8013b20:	b111      	cbz	r1, 8013b28 <_reclaim_reent+0x3c>
 8013b22:	4620      	mov	r0, r4
 8013b24:	f000 f8ba 	bl	8013c9c <_free_r>
 8013b28:	6961      	ldr	r1, [r4, #20]
 8013b2a:	b111      	cbz	r1, 8013b32 <_reclaim_reent+0x46>
 8013b2c:	4620      	mov	r0, r4
 8013b2e:	f000 f8b5 	bl	8013c9c <_free_r>
 8013b32:	69e1      	ldr	r1, [r4, #28]
 8013b34:	b111      	cbz	r1, 8013b3c <_reclaim_reent+0x50>
 8013b36:	4620      	mov	r0, r4
 8013b38:	f000 f8b0 	bl	8013c9c <_free_r>
 8013b3c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013b3e:	b111      	cbz	r1, 8013b46 <_reclaim_reent+0x5a>
 8013b40:	4620      	mov	r0, r4
 8013b42:	f000 f8ab 	bl	8013c9c <_free_r>
 8013b46:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013b48:	b111      	cbz	r1, 8013b50 <_reclaim_reent+0x64>
 8013b4a:	4620      	mov	r0, r4
 8013b4c:	f000 f8a6 	bl	8013c9c <_free_r>
 8013b50:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8013b52:	b111      	cbz	r1, 8013b5a <_reclaim_reent+0x6e>
 8013b54:	4620      	mov	r0, r4
 8013b56:	f000 f8a1 	bl	8013c9c <_free_r>
 8013b5a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8013b5c:	b111      	cbz	r1, 8013b64 <_reclaim_reent+0x78>
 8013b5e:	4620      	mov	r0, r4
 8013b60:	f000 f89c 	bl	8013c9c <_free_r>
 8013b64:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8013b66:	b111      	cbz	r1, 8013b6e <_reclaim_reent+0x82>
 8013b68:	4620      	mov	r0, r4
 8013b6a:	f000 f897 	bl	8013c9c <_free_r>
 8013b6e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013b70:	b111      	cbz	r1, 8013b78 <_reclaim_reent+0x8c>
 8013b72:	4620      	mov	r0, r4
 8013b74:	f000 f892 	bl	8013c9c <_free_r>
 8013b78:	6a23      	ldr	r3, [r4, #32]
 8013b7a:	b14b      	cbz	r3, 8013b90 <_reclaim_reent+0xa4>
 8013b7c:	4620      	mov	r0, r4
 8013b7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b82:	4718      	bx	r3
 8013b84:	680e      	ldr	r6, [r1, #0]
 8013b86:	4620      	mov	r0, r4
 8013b88:	f000 f888 	bl	8013c9c <_free_r>
 8013b8c:	4631      	mov	r1, r6
 8013b8e:	e7bb      	b.n	8013b08 <_reclaim_reent+0x1c>
 8013b90:	bd70      	pop	{r4, r5, r6, pc}
 8013b92:	bf00      	nop
 8013b94:	240012b8 	.word	0x240012b8

08013b98 <_lseek_r>:
 8013b98:	b538      	push	{r3, r4, r5, lr}
 8013b9a:	4d07      	ldr	r5, [pc, #28]	@ (8013bb8 <_lseek_r+0x20>)
 8013b9c:	4604      	mov	r4, r0
 8013b9e:	4608      	mov	r0, r1
 8013ba0:	4611      	mov	r1, r2
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	602a      	str	r2, [r5, #0]
 8013ba6:	461a      	mov	r2, r3
 8013ba8:	f7ed fc1d 	bl	80013e6 <_lseek>
 8013bac:	1c43      	adds	r3, r0, #1
 8013bae:	d102      	bne.n	8013bb6 <_lseek_r+0x1e>
 8013bb0:	682b      	ldr	r3, [r5, #0]
 8013bb2:	b103      	cbz	r3, 8013bb6 <_lseek_r+0x1e>
 8013bb4:	6023      	str	r3, [r4, #0]
 8013bb6:	bd38      	pop	{r3, r4, r5, pc}
 8013bb8:	2403344c 	.word	0x2403344c

08013bbc <_read_r>:
 8013bbc:	b538      	push	{r3, r4, r5, lr}
 8013bbe:	4d07      	ldr	r5, [pc, #28]	@ (8013bdc <_read_r+0x20>)
 8013bc0:	4604      	mov	r4, r0
 8013bc2:	4608      	mov	r0, r1
 8013bc4:	4611      	mov	r1, r2
 8013bc6:	2200      	movs	r2, #0
 8013bc8:	602a      	str	r2, [r5, #0]
 8013bca:	461a      	mov	r2, r3
 8013bcc:	f7ed fbab 	bl	8001326 <_read>
 8013bd0:	1c43      	adds	r3, r0, #1
 8013bd2:	d102      	bne.n	8013bda <_read_r+0x1e>
 8013bd4:	682b      	ldr	r3, [r5, #0]
 8013bd6:	b103      	cbz	r3, 8013bda <_read_r+0x1e>
 8013bd8:	6023      	str	r3, [r4, #0]
 8013bda:	bd38      	pop	{r3, r4, r5, pc}
 8013bdc:	2403344c 	.word	0x2403344c

08013be0 <_sbrk_r>:
 8013be0:	b538      	push	{r3, r4, r5, lr}
 8013be2:	4d06      	ldr	r5, [pc, #24]	@ (8013bfc <_sbrk_r+0x1c>)
 8013be4:	2300      	movs	r3, #0
 8013be6:	4604      	mov	r4, r0
 8013be8:	4608      	mov	r0, r1
 8013bea:	602b      	str	r3, [r5, #0]
 8013bec:	f7ed fc08 	bl	8001400 <_sbrk>
 8013bf0:	1c43      	adds	r3, r0, #1
 8013bf2:	d102      	bne.n	8013bfa <_sbrk_r+0x1a>
 8013bf4:	682b      	ldr	r3, [r5, #0]
 8013bf6:	b103      	cbz	r3, 8013bfa <_sbrk_r+0x1a>
 8013bf8:	6023      	str	r3, [r4, #0]
 8013bfa:	bd38      	pop	{r3, r4, r5, pc}
 8013bfc:	2403344c 	.word	0x2403344c

08013c00 <_write_r>:
 8013c00:	b538      	push	{r3, r4, r5, lr}
 8013c02:	4d07      	ldr	r5, [pc, #28]	@ (8013c20 <_write_r+0x20>)
 8013c04:	4604      	mov	r4, r0
 8013c06:	4608      	mov	r0, r1
 8013c08:	4611      	mov	r1, r2
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	602a      	str	r2, [r5, #0]
 8013c0e:	461a      	mov	r2, r3
 8013c10:	f7ed fba6 	bl	8001360 <_write>
 8013c14:	1c43      	adds	r3, r0, #1
 8013c16:	d102      	bne.n	8013c1e <_write_r+0x1e>
 8013c18:	682b      	ldr	r3, [r5, #0]
 8013c1a:	b103      	cbz	r3, 8013c1e <_write_r+0x1e>
 8013c1c:	6023      	str	r3, [r4, #0]
 8013c1e:	bd38      	pop	{r3, r4, r5, pc}
 8013c20:	2403344c 	.word	0x2403344c

08013c24 <__errno>:
 8013c24:	4b01      	ldr	r3, [pc, #4]	@ (8013c2c <__errno+0x8>)
 8013c26:	6818      	ldr	r0, [r3, #0]
 8013c28:	4770      	bx	lr
 8013c2a:	bf00      	nop
 8013c2c:	240012b8 	.word	0x240012b8

08013c30 <__libc_init_array>:
 8013c30:	b570      	push	{r4, r5, r6, lr}
 8013c32:	4d0d      	ldr	r5, [pc, #52]	@ (8013c68 <__libc_init_array+0x38>)
 8013c34:	4c0d      	ldr	r4, [pc, #52]	@ (8013c6c <__libc_init_array+0x3c>)
 8013c36:	1b64      	subs	r4, r4, r5
 8013c38:	10a4      	asrs	r4, r4, #2
 8013c3a:	2600      	movs	r6, #0
 8013c3c:	42a6      	cmp	r6, r4
 8013c3e:	d109      	bne.n	8013c54 <__libc_init_array+0x24>
 8013c40:	4d0b      	ldr	r5, [pc, #44]	@ (8013c70 <__libc_init_array+0x40>)
 8013c42:	4c0c      	ldr	r4, [pc, #48]	@ (8013c74 <__libc_init_array+0x44>)
 8013c44:	f000 f9ac 	bl	8013fa0 <_init>
 8013c48:	1b64      	subs	r4, r4, r5
 8013c4a:	10a4      	asrs	r4, r4, #2
 8013c4c:	2600      	movs	r6, #0
 8013c4e:	42a6      	cmp	r6, r4
 8013c50:	d105      	bne.n	8013c5e <__libc_init_array+0x2e>
 8013c52:	bd70      	pop	{r4, r5, r6, pc}
 8013c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8013c58:	4798      	blx	r3
 8013c5a:	3601      	adds	r6, #1
 8013c5c:	e7ee      	b.n	8013c3c <__libc_init_array+0xc>
 8013c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013c62:	4798      	blx	r3
 8013c64:	3601      	adds	r6, #1
 8013c66:	e7f2      	b.n	8013c4e <__libc_init_array+0x1e>
 8013c68:	08015cf0 	.word	0x08015cf0
 8013c6c:	08015cf0 	.word	0x08015cf0
 8013c70:	08015cf0 	.word	0x08015cf0
 8013c74:	08015d34 	.word	0x08015d34

08013c78 <__retarget_lock_init_recursive>:
 8013c78:	4770      	bx	lr

08013c7a <__retarget_lock_acquire_recursive>:
 8013c7a:	4770      	bx	lr

08013c7c <__retarget_lock_release_recursive>:
 8013c7c:	4770      	bx	lr

08013c7e <memcpy>:
 8013c7e:	440a      	add	r2, r1
 8013c80:	4291      	cmp	r1, r2
 8013c82:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8013c86:	d100      	bne.n	8013c8a <memcpy+0xc>
 8013c88:	4770      	bx	lr
 8013c8a:	b510      	push	{r4, lr}
 8013c8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013c90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013c94:	4291      	cmp	r1, r2
 8013c96:	d1f9      	bne.n	8013c8c <memcpy+0xe>
 8013c98:	bd10      	pop	{r4, pc}
	...

08013c9c <_free_r>:
 8013c9c:	b538      	push	{r3, r4, r5, lr}
 8013c9e:	4605      	mov	r5, r0
 8013ca0:	2900      	cmp	r1, #0
 8013ca2:	d041      	beq.n	8013d28 <_free_r+0x8c>
 8013ca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ca8:	1f0c      	subs	r4, r1, #4
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	bfb8      	it	lt
 8013cae:	18e4      	addlt	r4, r4, r3
 8013cb0:	f7ff fcce 	bl	8013650 <__malloc_lock>
 8013cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8013d2c <_free_r+0x90>)
 8013cb6:	6813      	ldr	r3, [r2, #0]
 8013cb8:	b933      	cbnz	r3, 8013cc8 <_free_r+0x2c>
 8013cba:	6063      	str	r3, [r4, #4]
 8013cbc:	6014      	str	r4, [r2, #0]
 8013cbe:	4628      	mov	r0, r5
 8013cc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013cc4:	f7ff bcca 	b.w	801365c <__malloc_unlock>
 8013cc8:	42a3      	cmp	r3, r4
 8013cca:	d908      	bls.n	8013cde <_free_r+0x42>
 8013ccc:	6820      	ldr	r0, [r4, #0]
 8013cce:	1821      	adds	r1, r4, r0
 8013cd0:	428b      	cmp	r3, r1
 8013cd2:	bf01      	itttt	eq
 8013cd4:	6819      	ldreq	r1, [r3, #0]
 8013cd6:	685b      	ldreq	r3, [r3, #4]
 8013cd8:	1809      	addeq	r1, r1, r0
 8013cda:	6021      	streq	r1, [r4, #0]
 8013cdc:	e7ed      	b.n	8013cba <_free_r+0x1e>
 8013cde:	461a      	mov	r2, r3
 8013ce0:	685b      	ldr	r3, [r3, #4]
 8013ce2:	b10b      	cbz	r3, 8013ce8 <_free_r+0x4c>
 8013ce4:	42a3      	cmp	r3, r4
 8013ce6:	d9fa      	bls.n	8013cde <_free_r+0x42>
 8013ce8:	6811      	ldr	r1, [r2, #0]
 8013cea:	1850      	adds	r0, r2, r1
 8013cec:	42a0      	cmp	r0, r4
 8013cee:	d10b      	bne.n	8013d08 <_free_r+0x6c>
 8013cf0:	6820      	ldr	r0, [r4, #0]
 8013cf2:	4401      	add	r1, r0
 8013cf4:	1850      	adds	r0, r2, r1
 8013cf6:	4283      	cmp	r3, r0
 8013cf8:	6011      	str	r1, [r2, #0]
 8013cfa:	d1e0      	bne.n	8013cbe <_free_r+0x22>
 8013cfc:	6818      	ldr	r0, [r3, #0]
 8013cfe:	685b      	ldr	r3, [r3, #4]
 8013d00:	6053      	str	r3, [r2, #4]
 8013d02:	4408      	add	r0, r1
 8013d04:	6010      	str	r0, [r2, #0]
 8013d06:	e7da      	b.n	8013cbe <_free_r+0x22>
 8013d08:	d902      	bls.n	8013d10 <_free_r+0x74>
 8013d0a:	230c      	movs	r3, #12
 8013d0c:	602b      	str	r3, [r5, #0]
 8013d0e:	e7d6      	b.n	8013cbe <_free_r+0x22>
 8013d10:	6820      	ldr	r0, [r4, #0]
 8013d12:	1821      	adds	r1, r4, r0
 8013d14:	428b      	cmp	r3, r1
 8013d16:	bf04      	itt	eq
 8013d18:	6819      	ldreq	r1, [r3, #0]
 8013d1a:	685b      	ldreq	r3, [r3, #4]
 8013d1c:	6063      	str	r3, [r4, #4]
 8013d1e:	bf04      	itt	eq
 8013d20:	1809      	addeq	r1, r1, r0
 8013d22:	6021      	streq	r1, [r4, #0]
 8013d24:	6054      	str	r4, [r2, #4]
 8013d26:	e7ca      	b.n	8013cbe <_free_r+0x22>
 8013d28:	bd38      	pop	{r3, r4, r5, pc}
 8013d2a:	bf00      	nop
 8013d2c:	2403330c 	.word	0x2403330c

08013d30 <_malloc_usable_size_r>:
 8013d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d34:	1f18      	subs	r0, r3, #4
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	bfbc      	itt	lt
 8013d3a:	580b      	ldrlt	r3, [r1, r0]
 8013d3c:	18c0      	addlt	r0, r0, r3
 8013d3e:	4770      	bx	lr

08013d40 <__sflush_r>:
 8013d40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d48:	0716      	lsls	r6, r2, #28
 8013d4a:	4605      	mov	r5, r0
 8013d4c:	460c      	mov	r4, r1
 8013d4e:	d454      	bmi.n	8013dfa <__sflush_r+0xba>
 8013d50:	684b      	ldr	r3, [r1, #4]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	dc02      	bgt.n	8013d5c <__sflush_r+0x1c>
 8013d56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	dd48      	ble.n	8013dee <__sflush_r+0xae>
 8013d5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013d5e:	2e00      	cmp	r6, #0
 8013d60:	d045      	beq.n	8013dee <__sflush_r+0xae>
 8013d62:	2300      	movs	r3, #0
 8013d64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013d68:	682f      	ldr	r7, [r5, #0]
 8013d6a:	6a21      	ldr	r1, [r4, #32]
 8013d6c:	602b      	str	r3, [r5, #0]
 8013d6e:	d030      	beq.n	8013dd2 <__sflush_r+0x92>
 8013d70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013d72:	89a3      	ldrh	r3, [r4, #12]
 8013d74:	0759      	lsls	r1, r3, #29
 8013d76:	d505      	bpl.n	8013d84 <__sflush_r+0x44>
 8013d78:	6863      	ldr	r3, [r4, #4]
 8013d7a:	1ad2      	subs	r2, r2, r3
 8013d7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013d7e:	b10b      	cbz	r3, 8013d84 <__sflush_r+0x44>
 8013d80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013d82:	1ad2      	subs	r2, r2, r3
 8013d84:	2300      	movs	r3, #0
 8013d86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013d88:	6a21      	ldr	r1, [r4, #32]
 8013d8a:	4628      	mov	r0, r5
 8013d8c:	47b0      	blx	r6
 8013d8e:	1c43      	adds	r3, r0, #1
 8013d90:	89a3      	ldrh	r3, [r4, #12]
 8013d92:	d106      	bne.n	8013da2 <__sflush_r+0x62>
 8013d94:	6829      	ldr	r1, [r5, #0]
 8013d96:	291d      	cmp	r1, #29
 8013d98:	d82b      	bhi.n	8013df2 <__sflush_r+0xb2>
 8013d9a:	4a2a      	ldr	r2, [pc, #168]	@ (8013e44 <__sflush_r+0x104>)
 8013d9c:	410a      	asrs	r2, r1
 8013d9e:	07d6      	lsls	r6, r2, #31
 8013da0:	d427      	bmi.n	8013df2 <__sflush_r+0xb2>
 8013da2:	2200      	movs	r2, #0
 8013da4:	6062      	str	r2, [r4, #4]
 8013da6:	04d9      	lsls	r1, r3, #19
 8013da8:	6922      	ldr	r2, [r4, #16]
 8013daa:	6022      	str	r2, [r4, #0]
 8013dac:	d504      	bpl.n	8013db8 <__sflush_r+0x78>
 8013dae:	1c42      	adds	r2, r0, #1
 8013db0:	d101      	bne.n	8013db6 <__sflush_r+0x76>
 8013db2:	682b      	ldr	r3, [r5, #0]
 8013db4:	b903      	cbnz	r3, 8013db8 <__sflush_r+0x78>
 8013db6:	6560      	str	r0, [r4, #84]	@ 0x54
 8013db8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013dba:	602f      	str	r7, [r5, #0]
 8013dbc:	b1b9      	cbz	r1, 8013dee <__sflush_r+0xae>
 8013dbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013dc2:	4299      	cmp	r1, r3
 8013dc4:	d002      	beq.n	8013dcc <__sflush_r+0x8c>
 8013dc6:	4628      	mov	r0, r5
 8013dc8:	f7ff ff68 	bl	8013c9c <_free_r>
 8013dcc:	2300      	movs	r3, #0
 8013dce:	6363      	str	r3, [r4, #52]	@ 0x34
 8013dd0:	e00d      	b.n	8013dee <__sflush_r+0xae>
 8013dd2:	2301      	movs	r3, #1
 8013dd4:	4628      	mov	r0, r5
 8013dd6:	47b0      	blx	r6
 8013dd8:	4602      	mov	r2, r0
 8013dda:	1c50      	adds	r0, r2, #1
 8013ddc:	d1c9      	bne.n	8013d72 <__sflush_r+0x32>
 8013dde:	682b      	ldr	r3, [r5, #0]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d0c6      	beq.n	8013d72 <__sflush_r+0x32>
 8013de4:	2b1d      	cmp	r3, #29
 8013de6:	d001      	beq.n	8013dec <__sflush_r+0xac>
 8013de8:	2b16      	cmp	r3, #22
 8013dea:	d11e      	bne.n	8013e2a <__sflush_r+0xea>
 8013dec:	602f      	str	r7, [r5, #0]
 8013dee:	2000      	movs	r0, #0
 8013df0:	e022      	b.n	8013e38 <__sflush_r+0xf8>
 8013df2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013df6:	b21b      	sxth	r3, r3
 8013df8:	e01b      	b.n	8013e32 <__sflush_r+0xf2>
 8013dfa:	690f      	ldr	r7, [r1, #16]
 8013dfc:	2f00      	cmp	r7, #0
 8013dfe:	d0f6      	beq.n	8013dee <__sflush_r+0xae>
 8013e00:	0793      	lsls	r3, r2, #30
 8013e02:	680e      	ldr	r6, [r1, #0]
 8013e04:	bf08      	it	eq
 8013e06:	694b      	ldreq	r3, [r1, #20]
 8013e08:	600f      	str	r7, [r1, #0]
 8013e0a:	bf18      	it	ne
 8013e0c:	2300      	movne	r3, #0
 8013e0e:	eba6 0807 	sub.w	r8, r6, r7
 8013e12:	608b      	str	r3, [r1, #8]
 8013e14:	f1b8 0f00 	cmp.w	r8, #0
 8013e18:	dde9      	ble.n	8013dee <__sflush_r+0xae>
 8013e1a:	6a21      	ldr	r1, [r4, #32]
 8013e1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013e1e:	4643      	mov	r3, r8
 8013e20:	463a      	mov	r2, r7
 8013e22:	4628      	mov	r0, r5
 8013e24:	47b0      	blx	r6
 8013e26:	2800      	cmp	r0, #0
 8013e28:	dc08      	bgt.n	8013e3c <__sflush_r+0xfc>
 8013e2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013e32:	81a3      	strh	r3, [r4, #12]
 8013e34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e3c:	4407      	add	r7, r0
 8013e3e:	eba8 0800 	sub.w	r8, r8, r0
 8013e42:	e7e7      	b.n	8013e14 <__sflush_r+0xd4>
 8013e44:	dfbffffe 	.word	0xdfbffffe

08013e48 <_fflush_r>:
 8013e48:	b538      	push	{r3, r4, r5, lr}
 8013e4a:	690b      	ldr	r3, [r1, #16]
 8013e4c:	4605      	mov	r5, r0
 8013e4e:	460c      	mov	r4, r1
 8013e50:	b913      	cbnz	r3, 8013e58 <_fflush_r+0x10>
 8013e52:	2500      	movs	r5, #0
 8013e54:	4628      	mov	r0, r5
 8013e56:	bd38      	pop	{r3, r4, r5, pc}
 8013e58:	b118      	cbz	r0, 8013e62 <_fflush_r+0x1a>
 8013e5a:	6a03      	ldr	r3, [r0, #32]
 8013e5c:	b90b      	cbnz	r3, 8013e62 <_fflush_r+0x1a>
 8013e5e:	f7ff fcc5 	bl	80137ec <__sinit>
 8013e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d0f3      	beq.n	8013e52 <_fflush_r+0xa>
 8013e6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013e6c:	07d0      	lsls	r0, r2, #31
 8013e6e:	d404      	bmi.n	8013e7a <_fflush_r+0x32>
 8013e70:	0599      	lsls	r1, r3, #22
 8013e72:	d402      	bmi.n	8013e7a <_fflush_r+0x32>
 8013e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013e76:	f7ff ff00 	bl	8013c7a <__retarget_lock_acquire_recursive>
 8013e7a:	4628      	mov	r0, r5
 8013e7c:	4621      	mov	r1, r4
 8013e7e:	f7ff ff5f 	bl	8013d40 <__sflush_r>
 8013e82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013e84:	07da      	lsls	r2, r3, #31
 8013e86:	4605      	mov	r5, r0
 8013e88:	d4e4      	bmi.n	8013e54 <_fflush_r+0xc>
 8013e8a:	89a3      	ldrh	r3, [r4, #12]
 8013e8c:	059b      	lsls	r3, r3, #22
 8013e8e:	d4e1      	bmi.n	8013e54 <_fflush_r+0xc>
 8013e90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013e92:	f7ff fef3 	bl	8013c7c <__retarget_lock_release_recursive>
 8013e96:	e7dd      	b.n	8013e54 <_fflush_r+0xc>

08013e98 <__swhatbuf_r>:
 8013e98:	b570      	push	{r4, r5, r6, lr}
 8013e9a:	460c      	mov	r4, r1
 8013e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ea0:	2900      	cmp	r1, #0
 8013ea2:	b096      	sub	sp, #88	@ 0x58
 8013ea4:	4615      	mov	r5, r2
 8013ea6:	461e      	mov	r6, r3
 8013ea8:	da0d      	bge.n	8013ec6 <__swhatbuf_r+0x2e>
 8013eaa:	89a3      	ldrh	r3, [r4, #12]
 8013eac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013eb0:	f04f 0100 	mov.w	r1, #0
 8013eb4:	bf14      	ite	ne
 8013eb6:	2340      	movne	r3, #64	@ 0x40
 8013eb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013ebc:	2000      	movs	r0, #0
 8013ebe:	6031      	str	r1, [r6, #0]
 8013ec0:	602b      	str	r3, [r5, #0]
 8013ec2:	b016      	add	sp, #88	@ 0x58
 8013ec4:	bd70      	pop	{r4, r5, r6, pc}
 8013ec6:	466a      	mov	r2, sp
 8013ec8:	f000 f848 	bl	8013f5c <_fstat_r>
 8013ecc:	2800      	cmp	r0, #0
 8013ece:	dbec      	blt.n	8013eaa <__swhatbuf_r+0x12>
 8013ed0:	9901      	ldr	r1, [sp, #4]
 8013ed2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013ed6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013eda:	4259      	negs	r1, r3
 8013edc:	4159      	adcs	r1, r3
 8013ede:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013ee2:	e7eb      	b.n	8013ebc <__swhatbuf_r+0x24>

08013ee4 <__smakebuf_r>:
 8013ee4:	898b      	ldrh	r3, [r1, #12]
 8013ee6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013ee8:	079d      	lsls	r5, r3, #30
 8013eea:	4606      	mov	r6, r0
 8013eec:	460c      	mov	r4, r1
 8013eee:	d507      	bpl.n	8013f00 <__smakebuf_r+0x1c>
 8013ef0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013ef4:	6023      	str	r3, [r4, #0]
 8013ef6:	6123      	str	r3, [r4, #16]
 8013ef8:	2301      	movs	r3, #1
 8013efa:	6163      	str	r3, [r4, #20]
 8013efc:	b003      	add	sp, #12
 8013efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f00:	ab01      	add	r3, sp, #4
 8013f02:	466a      	mov	r2, sp
 8013f04:	f7ff ffc8 	bl	8013e98 <__swhatbuf_r>
 8013f08:	9f00      	ldr	r7, [sp, #0]
 8013f0a:	4605      	mov	r5, r0
 8013f0c:	4639      	mov	r1, r7
 8013f0e:	4630      	mov	r0, r6
 8013f10:	f7ff fb1e 	bl	8013550 <_malloc_r>
 8013f14:	b948      	cbnz	r0, 8013f2a <__smakebuf_r+0x46>
 8013f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f1a:	059a      	lsls	r2, r3, #22
 8013f1c:	d4ee      	bmi.n	8013efc <__smakebuf_r+0x18>
 8013f1e:	f023 0303 	bic.w	r3, r3, #3
 8013f22:	f043 0302 	orr.w	r3, r3, #2
 8013f26:	81a3      	strh	r3, [r4, #12]
 8013f28:	e7e2      	b.n	8013ef0 <__smakebuf_r+0xc>
 8013f2a:	89a3      	ldrh	r3, [r4, #12]
 8013f2c:	6020      	str	r0, [r4, #0]
 8013f2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013f32:	81a3      	strh	r3, [r4, #12]
 8013f34:	9b01      	ldr	r3, [sp, #4]
 8013f36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013f3a:	b15b      	cbz	r3, 8013f54 <__smakebuf_r+0x70>
 8013f3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f40:	4630      	mov	r0, r6
 8013f42:	f000 f81d 	bl	8013f80 <_isatty_r>
 8013f46:	b128      	cbz	r0, 8013f54 <__smakebuf_r+0x70>
 8013f48:	89a3      	ldrh	r3, [r4, #12]
 8013f4a:	f023 0303 	bic.w	r3, r3, #3
 8013f4e:	f043 0301 	orr.w	r3, r3, #1
 8013f52:	81a3      	strh	r3, [r4, #12]
 8013f54:	89a3      	ldrh	r3, [r4, #12]
 8013f56:	431d      	orrs	r5, r3
 8013f58:	81a5      	strh	r5, [r4, #12]
 8013f5a:	e7cf      	b.n	8013efc <__smakebuf_r+0x18>

08013f5c <_fstat_r>:
 8013f5c:	b538      	push	{r3, r4, r5, lr}
 8013f5e:	4d07      	ldr	r5, [pc, #28]	@ (8013f7c <_fstat_r+0x20>)
 8013f60:	2300      	movs	r3, #0
 8013f62:	4604      	mov	r4, r0
 8013f64:	4608      	mov	r0, r1
 8013f66:	4611      	mov	r1, r2
 8013f68:	602b      	str	r3, [r5, #0]
 8013f6a:	f7ed fa21 	bl	80013b0 <_fstat>
 8013f6e:	1c43      	adds	r3, r0, #1
 8013f70:	d102      	bne.n	8013f78 <_fstat_r+0x1c>
 8013f72:	682b      	ldr	r3, [r5, #0]
 8013f74:	b103      	cbz	r3, 8013f78 <_fstat_r+0x1c>
 8013f76:	6023      	str	r3, [r4, #0]
 8013f78:	bd38      	pop	{r3, r4, r5, pc}
 8013f7a:	bf00      	nop
 8013f7c:	2403344c 	.word	0x2403344c

08013f80 <_isatty_r>:
 8013f80:	b538      	push	{r3, r4, r5, lr}
 8013f82:	4d06      	ldr	r5, [pc, #24]	@ (8013f9c <_isatty_r+0x1c>)
 8013f84:	2300      	movs	r3, #0
 8013f86:	4604      	mov	r4, r0
 8013f88:	4608      	mov	r0, r1
 8013f8a:	602b      	str	r3, [r5, #0]
 8013f8c:	f7ed fa20 	bl	80013d0 <_isatty>
 8013f90:	1c43      	adds	r3, r0, #1
 8013f92:	d102      	bne.n	8013f9a <_isatty_r+0x1a>
 8013f94:	682b      	ldr	r3, [r5, #0]
 8013f96:	b103      	cbz	r3, 8013f9a <_isatty_r+0x1a>
 8013f98:	6023      	str	r3, [r4, #0]
 8013f9a:	bd38      	pop	{r3, r4, r5, pc}
 8013f9c:	2403344c 	.word	0x2403344c

08013fa0 <_init>:
 8013fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fa2:	bf00      	nop
 8013fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013fa6:	bc08      	pop	{r3}
 8013fa8:	469e      	mov	lr, r3
 8013faa:	4770      	bx	lr

08013fac <_fini>:
 8013fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fae:	bf00      	nop
 8013fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013fb2:	bc08      	pop	{r3}
 8013fb4:	469e      	mov	lr, r3
 8013fb6:	4770      	bx	lr
