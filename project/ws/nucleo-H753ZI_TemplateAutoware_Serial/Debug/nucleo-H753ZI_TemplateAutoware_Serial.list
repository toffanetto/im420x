
nucleo-H753ZI_TemplateAutoware_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022ee4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b64  08023188  08023188  00024188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08025cec  08025cec  00026cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000044  08025cf4  08025cf4  00026cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08025d38  08025d38  00026d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000130c  24000000  08025d3c  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000683e0  24001310  08027048  00028310  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240696f0  08027048  000286f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002830c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002fa4e  00000000  00000000  0002833a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005d7c  00000000  00000000  00057d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001fe0  00000000  00000000  0005db08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001883  00000000  00000000  0005fae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000445cc  00000000  00000000  0006136b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00037629  00000000  00000000  000a5937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00192819  00000000  00000000  000dcf60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000076  00000000  00000000  0026f779  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009354  00000000  00000000  0026f7f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007f  00000000  00000000  00278b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24001310 	.word	0x24001310
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802316c 	.word	0x0802316c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24001314 	.word	0x24001314
 80002dc:	0802316c 	.word	0x0802316c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003ce:	f000 b9b5 	b.w	800073c <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000464:	f000 b96a 	b.w	800073c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	460c      	mov	r4, r1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d14e      	bne.n	800052a <__udivmoddi4+0xaa>
 800048c:	4694      	mov	ip, r2
 800048e:	458c      	cmp	ip, r1
 8000490:	4686      	mov	lr, r0
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	d962      	bls.n	800055e <__udivmoddi4+0xde>
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	4091      	lsls	r1, r2
 80004a0:	fa20 f303 	lsr.w	r3, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	4319      	orrs	r1, r3
 80004aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f f68c 	uxth.w	r6, ip
 80004b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004be:	fb07 1114 	mls	r1, r7, r4, r1
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb04 f106 	mul.w	r1, r4, r6
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004d6:	f080 8112 	bcs.w	80006fe <__udivmoddi4+0x27e>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 810f 	bls.w	80006fe <__udivmoddi4+0x27e>
 80004e0:	3c02      	subs	r4, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	fa1f f38e 	uxth.w	r3, lr
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1110 	mls	r1, r7, r0, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb00 f606 	mul.w	r6, r0, r6
 80004fa:	429e      	cmp	r6, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x94>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000506:	f080 80fc 	bcs.w	8000702 <__udivmoddi4+0x282>
 800050a:	429e      	cmp	r6, r3
 800050c:	f240 80f9 	bls.w	8000702 <__udivmoddi4+0x282>
 8000510:	4463      	add	r3, ip
 8000512:	3802      	subs	r0, #2
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800051a:	2100      	movs	r1, #0
 800051c:	b11d      	cbz	r5, 8000526 <__udivmoddi4+0xa6>
 800051e:	40d3      	lsrs	r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	e9c5 3200 	strd	r3, r2, [r5]
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d905      	bls.n	800053a <__udivmoddi4+0xba>
 800052e:	b10d      	cbz	r5, 8000534 <__udivmoddi4+0xb4>
 8000530:	e9c5 0100 	strd	r0, r1, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	4608      	mov	r0, r1
 8000538:	e7f5      	b.n	8000526 <__udivmoddi4+0xa6>
 800053a:	fab3 f183 	clz	r1, r3
 800053e:	2900      	cmp	r1, #0
 8000540:	d146      	bne.n	80005d0 <__udivmoddi4+0x150>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d302      	bcc.n	800054c <__udivmoddi4+0xcc>
 8000546:	4290      	cmp	r0, r2
 8000548:	f0c0 80f0 	bcc.w	800072c <__udivmoddi4+0x2ac>
 800054c:	1a86      	subs	r6, r0, r2
 800054e:	eb64 0303 	sbc.w	r3, r4, r3
 8000552:	2001      	movs	r0, #1
 8000554:	2d00      	cmp	r5, #0
 8000556:	d0e6      	beq.n	8000526 <__udivmoddi4+0xa6>
 8000558:	e9c5 6300 	strd	r6, r3, [r5]
 800055c:	e7e3      	b.n	8000526 <__udivmoddi4+0xa6>
 800055e:	2a00      	cmp	r2, #0
 8000560:	f040 8090 	bne.w	8000684 <__udivmoddi4+0x204>
 8000564:	eba1 040c 	sub.w	r4, r1, ip
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	2101      	movs	r1, #1
 8000572:	fbb4 f6f8 	udiv	r6, r4, r8
 8000576:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057a:	fb08 4416 	mls	r4, r8, r6, r4
 800057e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000582:	fb07 f006 	mul.w	r0, r7, r6
 8000586:	4298      	cmp	r0, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x11c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000592:	d202      	bcs.n	800059a <__udivmoddi4+0x11a>
 8000594:	4298      	cmp	r0, r3
 8000596:	f200 80cd 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 800059a:	4626      	mov	r6, r4
 800059c:	1a1c      	subs	r4, r3, r0
 800059e:	fa1f f38e 	uxth.w	r3, lr
 80005a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005a6:	fb08 4410 	mls	r4, r8, r0, r4
 80005aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005ae:	fb00 f707 	mul.w	r7, r0, r7
 80005b2:	429f      	cmp	r7, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x148>
 80005b6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005be:	d202      	bcs.n	80005c6 <__udivmoddi4+0x146>
 80005c0:	429f      	cmp	r7, r3
 80005c2:	f200 80b0 	bhi.w	8000726 <__udivmoddi4+0x2a6>
 80005c6:	4620      	mov	r0, r4
 80005c8:	1bdb      	subs	r3, r3, r7
 80005ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005ce:	e7a5      	b.n	800051c <__udivmoddi4+0x9c>
 80005d0:	f1c1 0620 	rsb	r6, r1, #32
 80005d4:	408b      	lsls	r3, r1
 80005d6:	fa22 f706 	lsr.w	r7, r2, r6
 80005da:	431f      	orrs	r7, r3
 80005dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e0:	fa04 f301 	lsl.w	r3, r4, r1
 80005e4:	ea43 030c 	orr.w	r3, r3, ip
 80005e8:	40f4      	lsrs	r4, r6
 80005ea:	fa00 f801 	lsl.w	r8, r0, r1
 80005ee:	0c38      	lsrs	r0, r7, #16
 80005f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005f4:	fbb4 fef0 	udiv	lr, r4, r0
 80005f8:	fa1f fc87 	uxth.w	ip, r7
 80005fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000600:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000604:	fb0e f90c 	mul.w	r9, lr, ip
 8000608:	45a1      	cmp	r9, r4
 800060a:	fa02 f201 	lsl.w	r2, r2, r1
 800060e:	d90a      	bls.n	8000626 <__udivmoddi4+0x1a6>
 8000610:	193c      	adds	r4, r7, r4
 8000612:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000616:	f080 8084 	bcs.w	8000722 <__udivmoddi4+0x2a2>
 800061a:	45a1      	cmp	r9, r4
 800061c:	f240 8081 	bls.w	8000722 <__udivmoddi4+0x2a2>
 8000620:	f1ae 0e02 	sub.w	lr, lr, #2
 8000624:	443c      	add	r4, r7
 8000626:	eba4 0409 	sub.w	r4, r4, r9
 800062a:	fa1f f983 	uxth.w	r9, r3
 800062e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000632:	fb00 4413 	mls	r4, r0, r3, r4
 8000636:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800063a:	fb03 fc0c 	mul.w	ip, r3, ip
 800063e:	45a4      	cmp	ip, r4
 8000640:	d907      	bls.n	8000652 <__udivmoddi4+0x1d2>
 8000642:	193c      	adds	r4, r7, r4
 8000644:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000648:	d267      	bcs.n	800071a <__udivmoddi4+0x29a>
 800064a:	45a4      	cmp	ip, r4
 800064c:	d965      	bls.n	800071a <__udivmoddi4+0x29a>
 800064e:	3b02      	subs	r3, #2
 8000650:	443c      	add	r4, r7
 8000652:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000656:	fba0 9302 	umull	r9, r3, r0, r2
 800065a:	eba4 040c 	sub.w	r4, r4, ip
 800065e:	429c      	cmp	r4, r3
 8000660:	46ce      	mov	lr, r9
 8000662:	469c      	mov	ip, r3
 8000664:	d351      	bcc.n	800070a <__udivmoddi4+0x28a>
 8000666:	d04e      	beq.n	8000706 <__udivmoddi4+0x286>
 8000668:	b155      	cbz	r5, 8000680 <__udivmoddi4+0x200>
 800066a:	ebb8 030e 	subs.w	r3, r8, lr
 800066e:	eb64 040c 	sbc.w	r4, r4, ip
 8000672:	fa04 f606 	lsl.w	r6, r4, r6
 8000676:	40cb      	lsrs	r3, r1
 8000678:	431e      	orrs	r6, r3
 800067a:	40cc      	lsrs	r4, r1
 800067c:	e9c5 6400 	strd	r6, r4, [r5]
 8000680:	2100      	movs	r1, #0
 8000682:	e750      	b.n	8000526 <__udivmoddi4+0xa6>
 8000684:	f1c2 0320 	rsb	r3, r2, #32
 8000688:	fa20 f103 	lsr.w	r1, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	fa24 f303 	lsr.w	r3, r4, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	430c      	orrs	r4, r1
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a0:	fa1f f78c 	uxth.w	r7, ip
 80006a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a8:	fb08 3110 	mls	r1, r8, r0, r3
 80006ac:	0c23      	lsrs	r3, r4, #16
 80006ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b2:	fb00 f107 	mul.w	r1, r0, r7
 80006b6:	4299      	cmp	r1, r3
 80006b8:	d908      	bls.n	80006cc <__udivmoddi4+0x24c>
 80006ba:	eb1c 0303 	adds.w	r3, ip, r3
 80006be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006c2:	d22c      	bcs.n	800071e <__udivmoddi4+0x29e>
 80006c4:	4299      	cmp	r1, r3
 80006c6:	d92a      	bls.n	800071e <__udivmoddi4+0x29e>
 80006c8:	3802      	subs	r0, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006d4:	fb08 3311 	mls	r3, r8, r1, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb01 f307 	mul.w	r3, r1, r7
 80006e0:	42a3      	cmp	r3, r4
 80006e2:	d908      	bls.n	80006f6 <__udivmoddi4+0x276>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006ec:	d213      	bcs.n	8000716 <__udivmoddi4+0x296>
 80006ee:	42a3      	cmp	r3, r4
 80006f0:	d911      	bls.n	8000716 <__udivmoddi4+0x296>
 80006f2:	3902      	subs	r1, #2
 80006f4:	4464      	add	r4, ip
 80006f6:	1ae4      	subs	r4, r4, r3
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e739      	b.n	8000572 <__udivmoddi4+0xf2>
 80006fe:	4604      	mov	r4, r0
 8000700:	e6f0      	b.n	80004e4 <__udivmoddi4+0x64>
 8000702:	4608      	mov	r0, r1
 8000704:	e706      	b.n	8000514 <__udivmoddi4+0x94>
 8000706:	45c8      	cmp	r8, r9
 8000708:	d2ae      	bcs.n	8000668 <__udivmoddi4+0x1e8>
 800070a:	ebb9 0e02 	subs.w	lr, r9, r2
 800070e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000712:	3801      	subs	r0, #1
 8000714:	e7a8      	b.n	8000668 <__udivmoddi4+0x1e8>
 8000716:	4631      	mov	r1, r6
 8000718:	e7ed      	b.n	80006f6 <__udivmoddi4+0x276>
 800071a:	4603      	mov	r3, r0
 800071c:	e799      	b.n	8000652 <__udivmoddi4+0x1d2>
 800071e:	4630      	mov	r0, r6
 8000720:	e7d4      	b.n	80006cc <__udivmoddi4+0x24c>
 8000722:	46d6      	mov	lr, sl
 8000724:	e77f      	b.n	8000626 <__udivmoddi4+0x1a6>
 8000726:	4463      	add	r3, ip
 8000728:	3802      	subs	r0, #2
 800072a:	e74d      	b.n	80005c8 <__udivmoddi4+0x148>
 800072c:	4606      	mov	r6, r0
 800072e:	4623      	mov	r3, r4
 8000730:	4608      	mov	r0, r1
 8000732:	e70f      	b.n	8000554 <__udivmoddi4+0xd4>
 8000734:	3e02      	subs	r6, #2
 8000736:	4463      	add	r3, ip
 8000738:	e730      	b.n	800059c <__udivmoddi4+0x11c>
 800073a:	bf00      	nop

0800073c <__aeabi_idiv0>:
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	@ 0x28
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
 8000760:	615a      	str	r2, [r3, #20]
 8000762:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000764:	4b37      	ldr	r3, [pc, #220]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000766:	4a38      	ldr	r2, [pc, #224]	@ (8000848 <MX_ADC1_Init+0x108>)
 8000768:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800076a:	4b36      	ldr	r3, [pc, #216]	@ (8000844 <MX_ADC1_Init+0x104>)
 800076c:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000770:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000772:	4b34      	ldr	r3, [pc, #208]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000778:	4b32      	ldr	r3, [pc, #200]	@ (8000844 <MX_ADC1_Init+0x104>)
 800077a:	2201      	movs	r2, #1
 800077c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077e:	4b31      	ldr	r3, [pc, #196]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000780:	2204      	movs	r2, #4
 8000782:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000784:	4b2f      	ldr	r3, [pc, #188]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000786:	2200      	movs	r2, #0
 8000788:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800078a:	4b2e      	ldr	r3, [pc, #184]	@ (8000844 <MX_ADC1_Init+0x104>)
 800078c:	2201      	movs	r2, #1
 800078e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000790:	4b2c      	ldr	r3, [pc, #176]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000792:	2202      	movs	r2, #2
 8000794:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000796:	4b2b      	ldr	r3, [pc, #172]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000798:	2200      	movs	r2, #0
 800079a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079c:	4b29      	ldr	r3, [pc, #164]	@ (8000844 <MX_ADC1_Init+0x104>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a2:	4b28      	ldr	r3, [pc, #160]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80007a8:	4b26      	ldr	r3, [pc, #152]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007aa:	2203      	movs	r2, #3
 80007ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ae:	4b25      	ldr	r3, [pc, #148]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007b4:	4b23      	ldr	r3, [pc, #140]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007ba:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007bc:	2200      	movs	r2, #0
 80007be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c2:	4820      	ldr	r0, [pc, #128]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007c4:	f003 f8a4 	bl	8003910 <HAL_ADC_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007ce:	f001 f9d1 	bl	8001b74 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	4819      	ldr	r0, [pc, #100]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007de:	f004 f8c7 	bl	8004970 <HAL_ADCEx_MultiModeConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007e8:	f001 f9c4 	bl	8001b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007ec:	4b17      	ldr	r3, [pc, #92]	@ (800084c <MX_ADC1_Init+0x10c>)
 80007ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f0:	2306      	movs	r3, #6
 80007f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80007f4:	2306      	movs	r3, #6
 80007f6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80007fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007fe:	2304      	movs	r3, #4
 8000800:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080a:	463b      	mov	r3, r7
 800080c:	4619      	mov	r1, r3
 800080e:	480d      	ldr	r0, [pc, #52]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000810:	f003 fb02 	bl	8003e18 <HAL_ADC_ConfigChannel>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800081a:	f001 f9ab 	bl	8001b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800081e:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <MX_ADC1_Init+0x110>)
 8000820:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000822:	230c      	movs	r3, #12
 8000824:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000826:	463b      	mov	r3, r7
 8000828:	4619      	mov	r1, r3
 800082a:	4806      	ldr	r0, [pc, #24]	@ (8000844 <MX_ADC1_Init+0x104>)
 800082c:	f003 faf4 	bl	8003e18 <HAL_ADC_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000836:	f001 f99d 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	@ 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2400132c 	.word	0x2400132c
 8000848:	40022000 	.word	0x40022000
 800084c:	19200040 	.word	0x19200040
 8000850:	08600004 	.word	0x08600004

08000854 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b0ba      	sub	sp, #232	@ 0xe8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	22c0      	movs	r2, #192	@ 0xc0
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f021 fd1b 	bl	80222b0 <memset>
  if(adcHandle->Instance==ADC1)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a45      	ldr	r2, [pc, #276]	@ (8000994 <HAL_ADC_MspInit+0x140>)
 8000880:	4293      	cmp	r3, r2
 8000882:	f040 8083 	bne.w	800098c <HAL_ADC_MspInit+0x138>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000886:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800088a:	f04f 0300 	mov.w	r3, #0
 800088e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 37;
 8000896:	2325      	movs	r3, #37	@ 0x25
 8000898:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800089a:	2302      	movs	r3, #2
 800089c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800089e:	2302      	movs	r3, #2
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80008a6:	2380      	movs	r3, #128	@ 0x80
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80008aa:	2320      	movs	r3, #32
 80008ac:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 80008ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	4618      	mov	r0, r3
 80008c0:	f008 faa2 	bl	8008e08 <HAL_RCCEx_PeriphCLKConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 80008ca:	f001 f953 	bl	8001b74 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008ce:	4b32      	ldr	r3, [pc, #200]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008d4:	4a30      	ldr	r2, [pc, #192]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008d6:	f043 0320 	orr.w	r3, r3, #32
 80008da:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80008de:	4b2e      	ldr	r3, [pc, #184]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008e4:	f003 0320 	and.w	r3, r3, #32
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f2:	4a29      	ldr	r2, [pc, #164]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008f4:	f043 0320 	orr.w	r3, r3, #32
 80008f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008fc:	4b26      	ldr	r3, [pc, #152]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000902:	f003 0320 	and.w	r3, r3, #32
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800090a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800090e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000912:	2303      	movs	r3, #3
 8000914:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800091e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000922:	4619      	mov	r1, r3
 8000924:	481d      	ldr	r0, [pc, #116]	@ (800099c <HAL_ADC_MspInit+0x148>)
 8000926:	f007 f829 	bl	800797c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800092a:	4b1d      	ldr	r3, [pc, #116]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800092c:	4a1d      	ldr	r2, [pc, #116]	@ (80009a4 <HAL_ADC_MspInit+0x150>)
 800092e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000930:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000932:	2209      	movs	r2, #9
 8000934:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800093c:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000944:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000948:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800094c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000950:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000952:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000954:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000958:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800095c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000960:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000962:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000964:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000968:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000970:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000972:	f004 f9bb 	bl	8004cec <HAL_DMA_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 800097c:	f001 f8fa 	bl	8001b74 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a07      	ldr	r2, [pc, #28]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000984:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000986:	4a06      	ldr	r2, [pc, #24]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800098c:	bf00      	nop
 800098e:	37e8      	adds	r7, #232	@ 0xe8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40022000 	.word	0x40022000
 8000998:	58024400 	.word	0x58024400
 800099c:	58021400 	.word	0x58021400
 80009a0:	24001390 	.word	0x24001390
 80009a4:	40020410 	.word	0x40020410

080009a8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	@ 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80009b4:	f00f f864 	bl	800fa80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80009b8:	4b5a      	ldr	r3, [pc, #360]	@ (8000b24 <pvPortMallocMicroROS+0x17c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d101      	bne.n	80009c4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80009c0:	f000 f986 	bl	8000cd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80009c4:	4b58      	ldr	r3, [pc, #352]	@ (8000b28 <pvPortMallocMicroROS+0x180>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4013      	ands	r3, r2
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	f040 8090 	bne.w	8000af2 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d01e      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80009d8:	2208      	movs	r2, #8
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d015      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f023 0307 	bic.w	r3, r3, #7
 80009f0:	3308      	adds	r3, #8
 80009f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d00b      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80009fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a02:	f383 8811 	msr	BASEPRI, r3
 8000a06:	f3bf 8f6f 	isb	sy
 8000a0a:	f3bf 8f4f 	dsb	sy
 8000a0e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000a10:	bf00      	nop
 8000a12:	bf00      	nop
 8000a14:	e7fd      	b.n	8000a12 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d06a      	beq.n	8000af2 <pvPortMallocMicroROS+0x14a>
 8000a1c:	4b43      	ldr	r3, [pc, #268]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d865      	bhi.n	8000af2 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000a26:	4b42      	ldr	r3, [pc, #264]	@ (8000b30 <pvPortMallocMicroROS+0x188>)
 8000a28:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000a2a:	4b41      	ldr	r3, [pc, #260]	@ (8000b30 <pvPortMallocMicroROS+0x188>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a30:	e004      	b.n	8000a3c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a34:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d903      	bls.n	8000a4e <pvPortMallocMicroROS+0xa6>
 8000a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d1f1      	bne.n	8000a32 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000a4e:	4b35      	ldr	r3, [pc, #212]	@ (8000b24 <pvPortMallocMicroROS+0x17c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d04c      	beq.n	8000af2 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2208      	movs	r2, #8
 8000a5e:	4413      	add	r3, r2
 8000a60:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	6a3b      	ldr	r3, [r7, #32]
 8000a68:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	1ad2      	subs	r2, r2, r3
 8000a72:	2308      	movs	r3, #8
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d920      	bls.n	8000abc <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	f003 0307 	and.w	r3, r3, #7
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d00b      	beq.n	8000aa4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a90:	f383 8811 	msr	BASEPRI, r3
 8000a94:	f3bf 8f6f 	isb	sy
 8000a98:	f3bf 8f4f 	dsb	sy
 8000a9c:	613b      	str	r3, [r7, #16]
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa6:	685a      	ldr	r2, [r3, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	1ad2      	subs	r2, r2, r3
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000ab6:	69b8      	ldr	r0, [r7, #24]
 8000ab8:	f000 f96e 	bl	8000d98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	4a19      	ldr	r2, [pc, #100]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000ac8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000aca:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <pvPortMallocMicroROS+0x18c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d203      	bcs.n	8000ade <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a16      	ldr	r2, [pc, #88]	@ (8000b34 <pvPortMallocMicroROS+0x18c>)
 8000adc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <pvPortMallocMicroROS+0x180>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000af2:	f00e ffd3 	bl	800fa9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	f003 0307 	and.w	r3, r3, #7
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d00b      	beq.n	8000b18 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b04:	f383 8811 	msr	BASEPRI, r3
 8000b08:	f3bf 8f6f 	isb	sy
 8000b0c:	f3bf 8f4f 	dsb	sy
 8000b10:	60fb      	str	r3, [r7, #12]
}
 8000b12:	bf00      	nop
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000b18:	69fb      	ldr	r3, [r7, #28]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3728      	adds	r7, #40	@ 0x28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	24032150 	.word	0x24032150
 8000b28:	2403215c 	.word	0x2403215c
 8000b2c:	24032154 	.word	0x24032154
 8000b30:	24032148 	.word	0x24032148
 8000b34:	24032158 	.word	0x24032158

08000b38 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d04a      	beq.n	8000be0 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	425b      	negs	r3, r3
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	4413      	add	r3, r2
 8000b52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	685a      	ldr	r2, [r3, #4]
 8000b5c:	4b22      	ldr	r3, [pc, #136]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4013      	ands	r3, r2
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d10b      	bne.n	8000b7e <vPortFreeMicroROS+0x46>
	__asm volatile
 8000b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b6a:	f383 8811 	msr	BASEPRI, r3
 8000b6e:	f3bf 8f6f 	isb	sy
 8000b72:	f3bf 8f4f 	dsb	sy
 8000b76:	60fb      	str	r3, [r7, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	e7fd      	b.n	8000b7a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d00b      	beq.n	8000b9e <vPortFreeMicroROS+0x66>
	__asm volatile
 8000b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b8a:	f383 8811 	msr	BASEPRI, r3
 8000b8e:	f3bf 8f6f 	isb	sy
 8000b92:	f3bf 8f4f 	dsb	sy
 8000b96:	60bb      	str	r3, [r7, #8]
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	e7fd      	b.n	8000b9a <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d019      	beq.n	8000be0 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d115      	bne.n	8000be0 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000bc4:	f00e ff5c 	bl	800fa80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	685a      	ldr	r2, [r3, #4]
 8000bcc:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <vPortFreeMicroROS+0xb4>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a06      	ldr	r2, [pc, #24]	@ (8000bec <vPortFreeMicroROS+0xb4>)
 8000bd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000bd6:	6938      	ldr	r0, [r7, #16]
 8000bd8:	f000 f8de 	bl	8000d98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000bdc:	f00e ff5e 	bl	800fa9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000be0:	bf00      	nop
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	2403215c 	.word	0x2403215c
 8000bec:	24032154 	.word	0x24032154

08000bf0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b087      	sub	sp, #28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	425b      	negs	r3, r3
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	4413      	add	r3, r2
 8000c04:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <getBlockSize+0x38>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	4013      	ands	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]

	return count;
 8000c18:	68fb      	ldr	r3, [r7, #12]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	371c      	adds	r7, #28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	2403215c 	.word	0x2403215c

08000c2c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c36:	f00e ff23 	bl	800fa80 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000c3a:	6838      	ldr	r0, [r7, #0]
 8000c3c:	f7ff feb4 	bl	80009a8 <pvPortMallocMicroROS>
 8000c40:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d017      	beq.n	8000c78 <pvPortReallocMicroROS+0x4c>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d014      	beq.n	8000c78 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ffce 	bl	8000bf0 <getBlockSize>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2208      	movs	r2, #8
 8000c58:	1a9b      	subs	r3, r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d201      	bcs.n	8000c68 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	68b8      	ldr	r0, [r7, #8]
 8000c6e:	f021 fc3e 	bl	80224ee <memcpy>

		vPortFreeMicroROS(pv);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff ff60 	bl	8000b38 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000c78:	f00e ff10 	bl	800fa9c <xTaskResumeAll>

	return newmem;
 8000c7c:	68bb      	ldr	r3, [r7, #8]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c90:	f00e fef6 	bl	800fa80 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	fb02 f303 	mul.w	r3, r2, r3
 8000c9c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff fe82 	bl	80009a8 <pvPortMallocMicroROS>
 8000ca4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000caa:	e004      	b.n	8000cb6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	613a      	str	r2, [r7, #16]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	1e5a      	subs	r2, r3, #1
 8000cba:	617a      	str	r2, [r7, #20]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d1f5      	bne.n	8000cac <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000cc0:	f00e feec 	bl	800fa9c <xTaskResumeAll>
  	return mem;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000cd6:	4b29      	ldr	r3, [pc, #164]	@ (8000d7c <prvHeapInit+0xac>)
 8000cd8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000cda:	4b29      	ldr	r3, [pc, #164]	@ (8000d80 <prvHeapInit+0xb0>)
 8000cdc:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f003 0307 	and.w	r3, r3, #7
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00c      	beq.n	8000d02 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	3307      	adds	r3, #7
 8000cec:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f023 0307 	bic.w	r3, r3, #7
 8000cf4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	4a20      	ldr	r2, [pc, #128]	@ (8000d80 <prvHeapInit+0xb0>)
 8000cfe:	4413      	add	r3, r2
 8000d00:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000d06:	4a1f      	ldr	r2, [pc, #124]	@ (8000d84 <prvHeapInit+0xb4>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <prvHeapInit+0xb4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68ba      	ldr	r2, [r7, #8]
 8000d16:	4413      	add	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000d1a:	2208      	movs	r2, #8
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	1a9b      	subs	r3, r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f023 0307 	bic.w	r3, r3, #7
 8000d28:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	4a16      	ldr	r2, [pc, #88]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d2e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000d30:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2200      	movs	r2, #0
 8000d36:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000d38:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	1ad2      	subs	r2, r2, r3
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8000d8c <prvHeapInit+0xbc>)
 8000d5c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	4a0b      	ldr	r2, [pc, #44]	@ (8000d90 <prvHeapInit+0xc0>)
 8000d64:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000d66:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <prvHeapInit+0xc4>)
 8000d68:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000d6c:	601a      	str	r2, [r3, #0]
}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	00030d40 	.word	0x00030d40
 8000d80:	24001408 	.word	0x24001408
 8000d84:	24032148 	.word	0x24032148
 8000d88:	24032150 	.word	0x24032150
 8000d8c:	24032158 	.word	0x24032158
 8000d90:	24032154 	.word	0x24032154
 8000d94:	2403215c 	.word	0x2403215c

08000d98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000da0:	4b28      	ldr	r3, [pc, #160]	@ (8000e44 <prvInsertBlockIntoFreeList+0xac>)
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	e002      	b.n	8000dac <prvInsertBlockIntoFreeList+0x14>
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d8f7      	bhi.n	8000da6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d108      	bne.n	8000dda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	441a      	add	r2, r3
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	441a      	add	r2, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d118      	bne.n	8000e20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <prvInsertBlockIntoFreeList+0xb0>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d00d      	beq.n	8000e16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	441a      	add	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	e008      	b.n	8000e28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000e16:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <prvInsertBlockIntoFreeList+0xb0>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	e003      	b.n	8000e28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d002      	beq.n	8000e36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	24032148 	.word	0x24032148
 8000e48:	24032150 	.word	0x24032150

08000e4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e52:	4b21      	ldr	r3, [pc, #132]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e58:	4a1f      	ldr	r2, [pc, #124]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e62:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e70:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e76:	4a18      	ldr	r2, [pc, #96]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e80:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2105      	movs	r1, #5
 8000e92:	200b      	movs	r0, #11
 8000e94:	f003 ff02 	bl	8004c9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e98:	200b      	movs	r0, #11
 8000e9a:	f003 ff19 	bl	8004cd0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2105      	movs	r1, #5
 8000ea2:	200c      	movs	r0, #12
 8000ea4:	f003 fefa 	bl	8004c9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ea8:	200c      	movs	r0, #12
 8000eaa:	f003 ff11 	bl	8004cd0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2105      	movs	r1, #5
 8000eb2:	2039      	movs	r0, #57	@ 0x39
 8000eb4:	f003 fef2 	bl	8004c9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000eb8:	2039      	movs	r0, #57	@ 0x39
 8000eba:	f003 ff09 	bl	8004cd0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2105      	movs	r1, #5
 8000ec2:	203a      	movs	r0, #58	@ 0x3a
 8000ec4:	f003 feea 	bl	8004c9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000ec8:	203a      	movs	r0, #58	@ 0x3a
 8000eca:	f003 ff01 	bl	8004cd0 <HAL_NVIC_EnableIRQ>

}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	58024400 	.word	0x58024400

08000edc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000eea:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000eec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ef0:	4904      	ldr	r1, [pc, #16]	@ (8000f04 <cubemx_transport_open+0x28>)
 8000ef2:	68f8      	ldr	r0, [r7, #12]
 8000ef4:	f00b f824 	bl	800bf40 <HAL_UART_Receive_DMA>
    return true;
 8000ef8:	2301      	movs	r3, #1
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	24032160 	.word	0x24032160

08000f08 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f16:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f00b f85d 	bl	800bfd8 <HAL_UART_DMAStop>
    return true;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f3c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f44:	2b20      	cmp	r3, #32
 8000f46:	d11b      	bne.n	8000f80 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	68b9      	ldr	r1, [r7, #8]
 8000f50:	6978      	ldr	r0, [r7, #20]
 8000f52:	f00a ff75 	bl	800be40 <HAL_UART_Transmit_DMA>
 8000f56:	4603      	mov	r3, r0
 8000f58:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000f5a:	e002      	b.n	8000f62 <cubemx_transport_write+0x3a>
            osDelay(1);
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f00d fa03 	bl	800e368 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000f62:	7cfb      	ldrb	r3, [r7, #19]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d104      	bne.n	8000f72 <cubemx_transport_write+0x4a>
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f6e:	2b20      	cmp	r3, #32
 8000f70:	d1f4      	bne.n	8000f5c <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000f72:	7cfb      	ldrb	r3, [r7, #19]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <cubemx_transport_write+0x54>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	e002      	b.n	8000f82 <cubemx_transport_write+0x5a>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	e000      	b.n	8000f82 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000f80:	2300      	movs	r3, #0
    }
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000fa0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa6:	b672      	cpsid	i
}
 8000fa8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a5a      	ldr	r2, [pc, #360]	@ (800111c <cubemx_transport_read+0x190>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d068      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a57      	ldr	r2, [pc, #348]	@ (8001120 <cubemx_transport_read+0x194>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d061      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a55      	ldr	r2, [pc, #340]	@ (8001124 <cubemx_transport_read+0x198>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d05a      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a52      	ldr	r2, [pc, #328]	@ (8001128 <cubemx_transport_read+0x19c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d053      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a50      	ldr	r2, [pc, #320]	@ (800112c <cubemx_transport_read+0x1a0>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d04c      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a4d      	ldr	r2, [pc, #308]	@ (8001130 <cubemx_transport_read+0x1a4>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d045      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a4b      	ldr	r2, [pc, #300]	@ (8001134 <cubemx_transport_read+0x1a8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d03e      	beq.n	800108a <cubemx_transport_read+0xfe>
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a48      	ldr	r2, [pc, #288]	@ (8001138 <cubemx_transport_read+0x1ac>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d037      	beq.n	800108a <cubemx_transport_read+0xfe>
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a46      	ldr	r2, [pc, #280]	@ (800113c <cubemx_transport_read+0x1b0>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d030      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a43      	ldr	r2, [pc, #268]	@ (8001140 <cubemx_transport_read+0x1b4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d029      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a41      	ldr	r2, [pc, #260]	@ (8001144 <cubemx_transport_read+0x1b8>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d022      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a3e      	ldr	r2, [pc, #248]	@ (8001148 <cubemx_transport_read+0x1bc>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d01b      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a3c      	ldr	r2, [pc, #240]	@ (800114c <cubemx_transport_read+0x1c0>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d014      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a39      	ldr	r2, [pc, #228]	@ (8001150 <cubemx_transport_read+0x1c4>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d00d      	beq.n	800108a <cubemx_transport_read+0xfe>
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a37      	ldr	r2, [pc, #220]	@ (8001154 <cubemx_transport_read+0x1c8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d006      	beq.n	800108a <cubemx_transport_read+0xfe>
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a34      	ldr	r2, [pc, #208]	@ (8001158 <cubemx_transport_read+0x1cc>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d107      	bne.n	800109a <cubemx_transport_read+0x10e>
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001098:	e006      	b.n	80010a8 <cubemx_transport_read+0x11c>
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80010a8:	4a2c      	ldr	r2, [pc, #176]	@ (800115c <cubemx_transport_read+0x1d0>)
 80010aa:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80010ac:	b662      	cpsie	i
}
 80010ae:	bf00      	nop
        __enable_irq();
        ms_used++;
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	3301      	adds	r3, #1
 80010b4:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f00d f956 	bl	800e368 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80010bc:	4b28      	ldr	r3, [pc, #160]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b26      	ldr	r3, [pc, #152]	@ (800115c <cubemx_transport_read+0x1d0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d104      	bne.n	80010d2 <cubemx_transport_read+0x146>
 80010c8:	69fa      	ldr	r2, [r7, #28]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	f6ff af6a 	blt.w	8000fa6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80010d6:	e011      	b.n	80010fc <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 80010d8:	4b21      	ldr	r3, [pc, #132]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	440b      	add	r3, r1
 80010e2:	4920      	ldr	r1, [pc, #128]	@ (8001164 <cubemx_transport_read+0x1d8>)
 80010e4:	5c8a      	ldrb	r2, [r1, r2]
 80010e6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80010e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010f4:	6013      	str	r3, [r2, #0]
        wrote++;
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	3301      	adds	r3, #1
 80010fa:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80010fc:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b16      	ldr	r3, [pc, #88]	@ (800115c <cubemx_transport_read+0x1d0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	d003      	beq.n	8001110 <cubemx_transport_read+0x184>
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	429a      	cmp	r2, r3
 800110e:	d3e3      	bcc.n	80010d8 <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 8001110:	69bb      	ldr	r3, [r7, #24]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40020010 	.word	0x40020010
 8001120:	40020028 	.word	0x40020028
 8001124:	40020040 	.word	0x40020040
 8001128:	40020058 	.word	0x40020058
 800112c:	40020070 	.word	0x40020070
 8001130:	40020088 	.word	0x40020088
 8001134:	400200a0 	.word	0x400200a0
 8001138:	400200b8 	.word	0x400200b8
 800113c:	40020410 	.word	0x40020410
 8001140:	40020428 	.word	0x40020428
 8001144:	40020440 	.word	0x40020440
 8001148:	40020458 	.word	0x40020458
 800114c:	40020470 	.word	0x40020470
 8001150:	40020488 	.word	0x40020488
 8001154:	400204a0 	.word	0x400204a0
 8001158:	400204b8 	.word	0x400204b8
 800115c:	24032964 	.word	0x24032964
 8001160:	24032960 	.word	0x24032960
 8001164:	24032160 	.word	0x24032160

08001168 <timer_watchdog_agent_callback>:
extern osThreadId_t TaskMicroAutowaHandle;

// Timer callbacks

void timer_watchdog_agent_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	e9c7 2300 	strd	r2, r3, [r7]
	
  if(RMW_RET_OK != rmw_uros_ping_agent(20, 1)) 
 8001174:	2101      	movs	r1, #1
 8001176:	2014      	movs	r0, #20
 8001178:	f014 fa3c 	bl	80155f4 <rmw_uros_ping_agent>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00b      	beq.n	800119a <timer_watchdog_agent_callback+0x32>
  {
    osThreadFlagsSet(TaskControleHandle, TO_MANUAL_MODE_FLAG);
 8001182:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <timer_watchdog_agent_callback+0x3c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2110      	movs	r1, #16
 8001188:	4618      	mov	r0, r3
 800118a:	f00c fffd 	bl	800e188 <osThreadFlagsSet>
    osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <timer_watchdog_agent_callback+0x40>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2110      	movs	r1, #16
 8001194:	4618      	mov	r0, r3
 8001196:	f00c fff7 	bl	800e188 <osThreadFlagsSet>
  } 

}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	24032968 	.word	0x24032968
 80011a8:	2403296c 	.word	0x2403296c

080011ac <clock_callback>:
  * @brief  ROS topic subscriber callback to recieve current timestamp
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void clock_callback(const void * xMsgIn)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  const rosgraph_msgs__msg__Clock * clock_msg_ = (const rosgraph_msgs__msg__Clock * )xMsgIn;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0b1 << 0);
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <clock_callback+0x28>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4b04      	ldr	r3, [pc, #16]	@ (80011d4 <clock_callback+0x28>)
 80011c4:	701a      	strb	r2, [r3, #0]
}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	240329ea 	.word	0x240329ea

080011d8 <control_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the control commands and save in control_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void control_cmd_callback(const void * xMsgIn)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  const autoware_auto_control_msgs__msg__AckermannControlCommand * control_cmd_msg_ = (const autoware_auto_control_msgs__msg__AckermannControlCommand * )xMsgIn;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0b1 << 1);
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <control_cmd_callback+0x28>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <control_cmd_callback+0x28>)
 80011f0:	701a      	strb	r2, [r3, #0]
}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	240329ea 	.word	0x240329ea

08001204 <gear_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the gear command and save in gear_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void gear_cmd_callback(const void * xMsgIn)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  const autoware_auto_vehicle_msgs__msg__GearCommand * gear_cmd_msg_ = (const autoware_auto_vehicle_msgs__msg__GearCommand * )xMsgIn;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0b1 << 2);
 8001210:	4b06      	ldr	r3, [pc, #24]	@ (800122c <gear_cmd_callback+0x28>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4b04      	ldr	r3, [pc, #16]	@ (800122c <gear_cmd_callback+0x28>)
 800121c:	701a      	strb	r2, [r3, #0]
}
 800121e:	bf00      	nop
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	240329ea 	.word	0x240329ea

08001230 <turn_indicators_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the turn lights commands and save in turn_indicators_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void turn_indicators_cmd_callback(const void * xMsgIn)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  const autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand * turn_indicators_cmd_msg_ = (const autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand * )xMsgIn;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0b1 << 3);
 800123c:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <turn_indicators_cmd_callback+0x28>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	f043 0308 	orr.w	r3, r3, #8
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b04      	ldr	r3, [pc, #16]	@ (8001258 <turn_indicators_cmd_callback+0x28>)
 8001248:	701a      	strb	r2, [r3, #0]
}
 800124a:	bf00      	nop
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	240329ea 	.word	0x240329ea

0800125c <hazard_lights_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the hazard lights commands and save in hazard_lights_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void hazard_lights_cmd_callback(const void * xMsgIn)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  const autoware_auto_vehicle_msgs__msg__HazardLightsCommand * hazard_lights_cmd_msg_ = (const autoware_auto_vehicle_msgs__msg__HazardLightsCommand * )xMsgIn;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0b1 << 4);
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <hazard_lights_cmd_callback+0x28>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	f043 0310 	orr.w	r3, r3, #16
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4b04      	ldr	r3, [pc, #16]	@ (8001284 <hazard_lights_cmd_callback+0x28>)
 8001274:	701a      	strb	r2, [r3, #0]
}
 8001276:	bf00      	nop
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	240329ea 	.word	0x240329ea

08001288 <actuation_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the control commands and save in actuation_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void actuation_cmd_callback(const void * xMsgIn)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  const tier4_vehicle_msgs__msg__ActuationCommandStamped * actuation_cmd_msg_ = (const tier4_vehicle_msgs__msg__ActuationCommandStamped * )xMsgIn;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0b1 << 5);
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <actuation_cmd_callback+0x28>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	f043 0320 	orr.w	r3, r3, #32
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <actuation_cmd_callback+0x28>)
 80012a0:	701a      	strb	r2, [r3, #0]
}
 80012a2:	bf00      	nop
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	240329ea 	.word	0x240329ea

080012b4 <emergency_callback>:
  * @brief  ROS topic subscriber callback to recieve the control commands and save in emergency_msg_ 
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void emergency_callback(const void * xMsgIn)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  const tier4_vehicle_msgs__msg__VehicleEmergencyStamped * emergency_msg_ = (const tier4_vehicle_msgs__msg__VehicleEmergencyStamped * )xMsgIn;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0b1 << 6);
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <emergency_callback+0x28>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <emergency_callback+0x28>)
 80012cc:	701a      	strb	r2, [r3, #0]
}
 80012ce:	bf00      	nop
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	240329ea 	.word	0x240329ea

080012e0 <control_mode_cmd_callback>:
  * @param  xRequestMsg: pointer to the request made for the server.
  * @param  xResponseMsg: pointer to the response gave by the server.
  * @retval None
  */
void control_mode_cmd_callback(const void * xRequestMsg, autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response * xResponseMsg)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  const autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request * control_mode_request_msg_ = (const autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request * )xRequestMsg;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	60fb      	str	r3, [r7, #12]

  if(AUTOWARE == control_mode_request_msg_->mode)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	7a1b      	ldrb	r3, [r3, #8]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d10c      	bne.n	8001310 <control_mode_cmd_callback+0x30>
  {
    osThreadFlagsSet(TaskControleHandle, TO_AUTOWARE_MODE_FLAG);
 80012f6:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <control_mode_cmd_callback+0x60>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2101      	movs	r1, #1
 80012fc:	4618      	mov	r0, r3
 80012fe:	f00c ff43 	bl	800e188 <osThreadFlagsSet>
    osThreadFlagsSet(TaskMicroAutowaHandle, TO_AUTOWARE_MODE_FLAG);
 8001302:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <control_mode_cmd_callback+0x64>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2101      	movs	r1, #1
 8001308:	4618      	mov	r0, r3
 800130a:	f00c ff3d 	bl	800e188 <osThreadFlagsSet>
 800130e:	e00f      	b.n	8001330 <control_mode_cmd_callback+0x50>
  }
  else if(MANUAL == control_mode_request_msg_->mode)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	7a1b      	ldrb	r3, [r3, #8]
 8001314:	2b04      	cmp	r3, #4
 8001316:	d10b      	bne.n	8001330 <control_mode_cmd_callback+0x50>
  {
    osThreadFlagsSet(TaskControleHandle, TO_MANUAL_MODE_FLAG);
 8001318:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <control_mode_cmd_callback+0x60>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2110      	movs	r1, #16
 800131e:	4618      	mov	r0, r3
 8001320:	f00c ff32 	bl	800e188 <osThreadFlagsSet>
    osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 8001324:	4b07      	ldr	r3, [pc, #28]	@ (8001344 <control_mode_cmd_callback+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2110      	movs	r1, #16
 800132a:	4618      	mov	r0, r3
 800132c:	f00c ff2c 	bl	800e188 <osThreadFlagsSet>
  }

  xResponseMsg->success = true;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
}
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	24032968 	.word	0x24032968
 8001344:	2403296c 	.word	0x2403296c

08001348 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexControlSignal */
  MutexControlSignalHandle = osMutexNew(&MutexControlSignal_attributes);
 800134c:	480e      	ldr	r0, [pc, #56]	@ (8001388 <MX_FREERTOS_Init+0x40>)
 800134e:	f00d f826 	bl	800e39e <osMutexNew>
 8001352:	4603      	mov	r3, r0
 8001354:	4a0d      	ldr	r2, [pc, #52]	@ (800138c <MX_FREERTOS_Init+0x44>)
 8001356:	6013      	str	r3, [r2, #0]

  /* creation of MutexControlAction */
  MutexControlActionHandle = osMutexNew(&MutexControlAction_attributes);
 8001358:	480d      	ldr	r0, [pc, #52]	@ (8001390 <MX_FREERTOS_Init+0x48>)
 800135a:	f00d f820 	bl	800e39e <osMutexNew>
 800135e:	4603      	mov	r3, r0
 8001360:	4a0c      	ldr	r2, [pc, #48]	@ (8001394 <MX_FREERTOS_Init+0x4c>)
 8001362:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskControle */
  TaskControleHandle = osThreadNew(StartTaskControle, NULL, &TaskControle_attributes);
 8001364:	4a0c      	ldr	r2, [pc, #48]	@ (8001398 <MX_FREERTOS_Init+0x50>)
 8001366:	2100      	movs	r1, #0
 8001368:	480c      	ldr	r0, [pc, #48]	@ (800139c <MX_FREERTOS_Init+0x54>)
 800136a:	f00c fe7a 	bl	800e062 <osThreadNew>
 800136e:	4603      	mov	r3, r0
 8001370:	4a0b      	ldr	r2, [pc, #44]	@ (80013a0 <MX_FREERTOS_Init+0x58>)
 8001372:	6013      	str	r3, [r2, #0]

  /* creation of TaskMicroAutowa */
  TaskMicroAutowaHandle = osThreadNew(StartMicroAutoware, NULL, &TaskMicroAutowa_attributes);
 8001374:	4a0b      	ldr	r2, [pc, #44]	@ (80013a4 <MX_FREERTOS_Init+0x5c>)
 8001376:	2100      	movs	r1, #0
 8001378:	480b      	ldr	r0, [pc, #44]	@ (80013a8 <MX_FREERTOS_Init+0x60>)
 800137a:	f00c fe72 	bl	800e062 <osThreadNew>
 800137e:	4603      	mov	r3, r0
 8001380:	4a0a      	ldr	r2, [pc, #40]	@ (80013ac <MX_FREERTOS_Init+0x64>)
 8001382:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	08023488 	.word	0x08023488
 800138c:	24032970 	.word	0x24032970
 8001390:	08023498 	.word	0x08023498
 8001394:	24032974 	.word	0x24032974
 8001398:	08023440 	.word	0x08023440
 800139c:	0800293d 	.word	0x0800293d
 80013a0:	24032968 	.word	0x24032968
 80013a4:	08023464 	.word	0x08023464
 80013a8:	08001b81 	.word	0x08001b81
 80013ac:	2403296c 	.word	0x2403296c

080013b0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08e      	sub	sp, #56	@ 0x38
 80013b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c6:	4b9e      	ldr	r3, [pc, #632]	@ (8001640 <MX_GPIO_Init+0x290>)
 80013c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013cc:	4a9c      	ldr	r2, [pc, #624]	@ (8001640 <MX_GPIO_Init+0x290>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d6:	4b9a      	ldr	r3, [pc, #616]	@ (8001640 <MX_GPIO_Init+0x290>)
 80013d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	623b      	str	r3, [r7, #32]
 80013e2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e4:	4b96      	ldr	r3, [pc, #600]	@ (8001640 <MX_GPIO_Init+0x290>)
 80013e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ea:	4a95      	ldr	r2, [pc, #596]	@ (8001640 <MX_GPIO_Init+0x290>)
 80013ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013f4:	4b92      	ldr	r3, [pc, #584]	@ (8001640 <MX_GPIO_Init+0x290>)
 80013f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013fe:	61fb      	str	r3, [r7, #28]
 8001400:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	4b8f      	ldr	r3, [pc, #572]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001408:	4a8d      	ldr	r2, [pc, #564]	@ (8001640 <MX_GPIO_Init+0x290>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001412:	4b8b      	ldr	r3, [pc, #556]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	61bb      	str	r3, [r7, #24]
 800141e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001420:	4b87      	ldr	r3, [pc, #540]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001426:	4a86      	ldr	r2, [pc, #536]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001430:	4b83      	ldr	r3, [pc, #524]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800143e:	4b80      	ldr	r3, [pc, #512]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001444:	4a7e      	ldr	r2, [pc, #504]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001446:	f043 0320 	orr.w	r3, r3, #32
 800144a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800144e:	4b7c      	ldr	r3, [pc, #496]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001454:	f003 0320 	and.w	r3, r3, #32
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800145c:	4b78      	ldr	r3, [pc, #480]	@ (8001640 <MX_GPIO_Init+0x290>)
 800145e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001462:	4a77      	ldr	r2, [pc, #476]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001464:	f043 0308 	orr.w	r3, r3, #8
 8001468:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800146c:	4b74      	ldr	r3, [pc, #464]	@ (8001640 <MX_GPIO_Init+0x290>)
 800146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800147a:	4b71      	ldr	r3, [pc, #452]	@ (8001640 <MX_GPIO_Init+0x290>)
 800147c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001480:	4a6f      	ldr	r2, [pc, #444]	@ (8001640 <MX_GPIO_Init+0x290>)
 8001482:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001486:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800148a:	4b6d      	ldr	r3, [pc, #436]	@ (8001640 <MX_GPIO_Init+0x290>)
 800148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001498:	4b69      	ldr	r3, [pc, #420]	@ (8001640 <MX_GPIO_Init+0x290>)
 800149a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800149e:	4a68      	ldr	r2, [pc, #416]	@ (8001640 <MX_GPIO_Init+0x290>)
 80014a0:	f043 0310 	orr.w	r3, r3, #16
 80014a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014a8:	4b65      	ldr	r3, [pc, #404]	@ (8001640 <MX_GPIO_Init+0x290>)
 80014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ae:	f003 0310 	and.w	r3, r3, #16
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	f244 0101 	movw	r1, #16385	@ 0x4001
 80014bc:	4861      	ldr	r0, [pc, #388]	@ (8001644 <MX_GPIO_Init+0x294>)
 80014be:	f006 fc0d 	bl	8007cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014c8:	485f      	ldr	r0, [pc, #380]	@ (8001648 <MX_GPIO_Init+0x298>)
 80014ca:	f006 fc07 	bl	8007cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2102      	movs	r1, #2
 80014d2:	485e      	ldr	r0, [pc, #376]	@ (800164c <MX_GPIO_Init+0x29c>)
 80014d4:	f006 fc02 	bl	8007cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014de:	2300      	movs	r3, #0
 80014e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ea:	4619      	mov	r1, r3
 80014ec:	4858      	ldr	r0, [pc, #352]	@ (8001650 <MX_GPIO_Init+0x2a0>)
 80014ee:	f006 fa45 	bl	800797c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80014f2:	2332      	movs	r3, #50	@ 0x32
 80014f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001502:	230b      	movs	r3, #11
 8001504:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150a:	4619      	mov	r1, r3
 800150c:	4850      	ldr	r0, [pc, #320]	@ (8001650 <MX_GPIO_Init+0x2a0>)
 800150e:	f006 fa35 	bl	800797c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001512:	2386      	movs	r3, #134	@ 0x86
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001522:	230b      	movs	r3, #11
 8001524:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152a:	4619      	mov	r1, r3
 800152c:	4849      	ldr	r0, [pc, #292]	@ (8001654 <MX_GPIO_Init+0x2a4>)
 800152e:	f006 fa25 	bl	800797c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001532:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001536:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001538:	2301      	movs	r3, #1
 800153a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001544:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001548:	4619      	mov	r1, r3
 800154a:	483e      	ldr	r0, [pc, #248]	@ (8001644 <MX_GPIO_Init+0x294>)
 800154c:	f006 fa16 	bl	800797c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JoySW_Pin;
 8001550:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001554:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001556:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800155a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800155c:	2301      	movs	r3, #1
 800155e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(JoySW_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001564:	4619      	mov	r1, r3
 8001566:	483c      	ldr	r0, [pc, #240]	@ (8001658 <MX_GPIO_Init+0x2a8>)
 8001568:	f006 fa08 	bl	800797c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800156c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800157e:	230b      	movs	r3, #11
 8001580:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001586:	4619      	mov	r1, r3
 8001588:	482e      	ldr	r0, [pc, #184]	@ (8001644 <MX_GPIO_Init+0x294>)
 800158a:	f006 f9f7 	bl	800797c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800158e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001594:	2301      	movs	r3, #1
 8001596:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a4:	4619      	mov	r1, r3
 80015a6:	4828      	ldr	r0, [pc, #160]	@ (8001648 <MX_GPIO_Init+0x298>)
 80015a8:	f006 f9e8 	bl	800797c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80015ac:	2380      	movs	r3, #128	@ 0x80
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015be:	4619      	mov	r1, r3
 80015c0:	4826      	ldr	r0, [pc, #152]	@ (800165c <MX_GPIO_Init+0x2ac>)
 80015c2:	f006 f9db 	bl	800797c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80015c6:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80015d8:	230a      	movs	r3, #10
 80015da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e0:	4619      	mov	r1, r3
 80015e2:	481c      	ldr	r0, [pc, #112]	@ (8001654 <MX_GPIO_Init+0x2a4>)
 80015e4:	f006 f9ca 	bl	800797c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80015e8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80015ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015fa:	230b      	movs	r3, #11
 80015fc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001602:	4619      	mov	r1, r3
 8001604:	4815      	ldr	r0, [pc, #84]	@ (800165c <MX_GPIO_Init+0x2ac>)
 8001606:	f006 f9b9 	bl	800797c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800160a:	2302      	movs	r3, #2
 800160c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800161a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800161e:	4619      	mov	r1, r3
 8001620:	480a      	ldr	r0, [pc, #40]	@ (800164c <MX_GPIO_Init+0x29c>)
 8001622:	f006 f9ab 	bl	800797c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2107      	movs	r1, #7
 800162a:	2028      	movs	r0, #40	@ 0x28
 800162c:	f003 fb36 	bl	8004c9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001630:	2028      	movs	r0, #40	@ 0x28
 8001632:	f003 fb4d 	bl	8004cd0 <HAL_NVIC_EnableIRQ>

}
 8001636:	bf00      	nop
 8001638:	3738      	adds	r7, #56	@ 0x38
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	58024400 	.word	0x58024400
 8001644:	58020400 	.word	0x58020400
 8001648:	58020c00 	.word	0x58020c00
 800164c:	58021000 	.word	0x58021000
 8001650:	58020800 	.word	0x58020800
 8001654:	58020000 	.word	0x58020000
 8001658:	58021400 	.word	0x58021400
 800165c:	58021800 	.word	0x58021800

08001660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001664:	f001 fee0 	bl	8003428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001668:	f000 f81c 	bl	80016a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800166c:	f7ff fea0 	bl	80013b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001670:	f7ff fbec 	bl	8000e4c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001674:	f001 fba0 	bl	8002db8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001678:	f7ff f862 	bl	8000740 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800167c:	f001 fb50 	bl	8002d20 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Starting ADC1 reading by DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t * ) uiADC1Buffer, 2);
 8001680:	2202      	movs	r2, #2
 8001682:	4906      	ldr	r1, [pc, #24]	@ (800169c <main+0x3c>)
 8001684:	4806      	ldr	r0, [pc, #24]	@ (80016a0 <main+0x40>)
 8001686:	f002 fae5 	bl	8003c54 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800168a:	f00c fc8b 	bl	800dfa4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800168e:	f7ff fe5b 	bl	8001348 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001692:	f00c fcab 	bl	800dfec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001696:	bf00      	nop
 8001698:	e7fd      	b.n	8001696 <main+0x36>
 800169a:	bf00      	nop
 800169c:	2403297c 	.word	0x2403297c
 80016a0:	2400132c 	.word	0x2400132c

080016a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b09e      	sub	sp, #120	@ 0x78
 80016a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016ae:	224c      	movs	r2, #76	@ 0x4c
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f020 fdfc 	bl	80222b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	2220      	movs	r2, #32
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f020 fdf5 	bl	80222b0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80016c6:	2002      	movs	r0, #2
 80016c8:	f006 fb3c 	bl	8007d44 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	4b49      	ldr	r3, [pc, #292]	@ (80017f8 <SystemClock_Config+0x154>)
 80016d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d4:	4a48      	ldr	r2, [pc, #288]	@ (80017f8 <SystemClock_Config+0x154>)
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80016dc:	4b46      	ldr	r3, [pc, #280]	@ (80017f8 <SystemClock_Config+0x154>)
 80016de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	4b45      	ldr	r3, [pc, #276]	@ (80017fc <SystemClock_Config+0x158>)
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	4a44      	ldr	r2, [pc, #272]	@ (80017fc <SystemClock_Config+0x158>)
 80016ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016f0:	6193      	str	r3, [r2, #24]
 80016f2:	4b42      	ldr	r3, [pc, #264]	@ (80017fc <SystemClock_Config+0x158>)
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80016fe:	bf00      	nop
 8001700:	4b3e      	ldr	r3, [pc, #248]	@ (80017fc <SystemClock_Config+0x158>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001708:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800170c:	d1f8      	bne.n	8001700 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170e:	4b3c      	ldr	r3, [pc, #240]	@ (8001800 <SystemClock_Config+0x15c>)
 8001710:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001714:	4a3a      	ldr	r2, [pc, #232]	@ (8001800 <SystemClock_Config+0x15c>)
 8001716:	f043 0302 	orr.w	r3, r3, #2
 800171a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800171e:	4b38      	ldr	r3, [pc, #224]	@ (8001800 <SystemClock_Config+0x15c>)
 8001720:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800172c:	2300      	movs	r3, #0
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	4b32      	ldr	r3, [pc, #200]	@ (80017fc <SystemClock_Config+0x158>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4a31      	ldr	r2, [pc, #196]	@ (80017fc <SystemClock_Config+0x158>)
 8001736:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800173a:	6193      	str	r3, [r2, #24]
 800173c:	4b2f      	ldr	r3, [pc, #188]	@ (80017fc <SystemClock_Config+0x158>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001744:	603b      	str	r3, [r7, #0]
 8001746:	4b2c      	ldr	r3, [pc, #176]	@ (80017f8 <SystemClock_Config+0x154>)
 8001748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800174a:	4a2b      	ldr	r2, [pc, #172]	@ (80017f8 <SystemClock_Config+0x154>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001752:	4b29      	ldr	r3, [pc, #164]	@ (80017f8 <SystemClock_Config+0x154>)
 8001754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800175e:	bf00      	nop
 8001760:	4b26      	ldr	r3, [pc, #152]	@ (80017fc <SystemClock_Config+0x158>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001768:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800176c:	d1f8      	bne.n	8001760 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 800176e:	2310      	movs	r3, #16
 8001770:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8001772:	2380      	movs	r3, #128	@ 0x80
 8001774:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8001776:	2320      	movs	r3, #32
 8001778:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800177a:	2302      	movs	r3, #2
 800177c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 800177e:	2301      	movs	r3, #1
 8001780:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001782:	2301      	movs	r3, #1
 8001784:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001786:	23f0      	movs	r3, #240	@ 0xf0
 8001788:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800178a:	2302      	movs	r3, #2
 800178c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800178e:	2304      	movs	r3, #4
 8001790:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001792:	2302      	movs	r3, #2
 8001794:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001796:	2308      	movs	r3, #8
 8001798:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800179a:	2300      	movs	r3, #0
 800179c:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017a6:	4618      	mov	r0, r3
 80017a8:	f006 fb06 	bl	8007db8 <HAL_RCC_OscConfig>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <SystemClock_Config+0x112>
  {
    Error_Handler();
 80017b2:	f000 f9df 	bl	8001b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b6:	233f      	movs	r3, #63	@ 0x3f
 80017b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ba:	2303      	movs	r3, #3
 80017bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80017c2:	2308      	movs	r3, #8
 80017c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80017c6:	2340      	movs	r3, #64	@ 0x40
 80017c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80017ca:	2340      	movs	r3, #64	@ 0x40
 80017cc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80017ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80017d4:	2340      	movs	r3, #64	@ 0x40
 80017d6:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	2104      	movs	r1, #4
 80017de:	4618      	mov	r0, r3
 80017e0:	f006 ff44 	bl	800866c <HAL_RCC_ClockConfig>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SystemClock_Config+0x14a>
  {
    Error_Handler();
 80017ea:	f000 f9c3 	bl	8001b74 <Error_Handler>
  }
}
 80017ee:	bf00      	nop
 80017f0:	3778      	adds	r7, #120	@ 0x78
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	58000400 	.word	0x58000400
 80017fc:	58024800 	.word	0x58024800
 8001800:	58024400 	.word	0x58024400

08001804 <HAL_GPIO_EXTI_Callback>:
  * @brief  ISR callback for the JoySW, switching the control mode.
  * @param  GPIO_Pin: EXTI pin.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) 
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
  if(JoySW_Pin == GPIO_Pin){
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001814:	d11a      	bne.n	800184c <HAL_GPIO_EXTI_Callback+0x48>

    unsigned int uiTick = osKernelGetTickCount();
 8001816:	f00c fc0f 	bl	800e038 <osKernelGetTickCount>
 800181a:	60f8      	str	r0, [r7, #12]

    if(uiTick > (uiJoySWTickOnPress + DEBOUNCE_TICKS)) // DEBOUNCE_TICKS debounce
 800181c:	4b0d      	ldr	r3, [pc, #52]	@ (8001854 <HAL_GPIO_EXTI_Callback+0x50>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	429a      	cmp	r2, r3
 8001828:	d910      	bls.n	800184c <HAL_GPIO_EXTI_Callback+0x48>
    {
      ucButtonState ^= 1;
 800182a:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <HAL_GPIO_EXTI_Callback+0x54>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	f083 0301 	eor.w	r3, r3, #1
 8001832:	b2da      	uxtb	r2, r3
 8001834:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <HAL_GPIO_EXTI_Callback+0x54>)
 8001836:	701a      	strb	r2, [r3, #0]
      uiJoySWTickOnPress = uiTick;
 8001838:	4a06      	ldr	r2, [pc, #24]	@ (8001854 <HAL_GPIO_EXTI_Callback+0x50>)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6013      	str	r3, [r2, #0]
      osThreadFlagsSet(TaskControleHandle, 0x1000);
 800183e:	4b07      	ldr	r3, [pc, #28]	@ (800185c <HAL_GPIO_EXTI_Callback+0x58>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001846:	4618      	mov	r0, r3
 8001848:	f00c fc9e 	bl	800e188 <osThreadFlagsSet>
    }
  }
}
 800184c:	bf00      	nop
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	24032984 	.word	0x24032984
 8001858:	24032978 	.word	0x24032978
 800185c:	24032968 	.word	0x24032968

08001860 <HAL_UART_RxCpltCallback>:
  * @brief  ISR callback for reading msg from UART with UART2_DMA_BUFFER_SIZE bytes.
  * @param  huart: Handle for serial UART
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if(&huart2 == huart)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4ab5      	ldr	r2, [pc, #724]	@ (8001b40 <HAL_UART_RxCpltCallback+0x2e0>)
 800186c:	4293      	cmp	r3, r2
 800186e:	f040 8163 	bne.w	8001b38 <HAL_UART_RxCpltCallback+0x2d8>
  {

    // State machine state
    unsigned int ucSmState = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]

    for(unsigned char i = 0; i<UART2_DMA_BUFFER_SIZE; i++)
 8001876:	2300      	movs	r3, #0
 8001878:	72fb      	strb	r3, [r7, #11]
 800187a:	e154      	b.n	8001b26 <HAL_UART_RxCpltCallback+0x2c6>
    {
      switch (ucSmState)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2b2b      	cmp	r3, #43	@ 0x2b
 8001880:	f200 814a 	bhi.w	8001b18 <HAL_UART_RxCpltCallback+0x2b8>
 8001884:	a201      	add	r2, pc, #4	@ (adr r2, 800188c <HAL_UART_RxCpltCallback+0x2c>)
 8001886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800188a:	bf00      	nop
 800188c:	0800193d 	.word	0x0800193d
 8001890:	0800194f 	.word	0x0800194f
 8001894:	08001b19 	.word	0x08001b19
 8001898:	08001b19 	.word	0x08001b19
 800189c:	08001b19 	.word	0x08001b19
 80018a0:	08001b19 	.word	0x08001b19
 80018a4:	08001b19 	.word	0x08001b19
 80018a8:	08001b19 	.word	0x08001b19
 80018ac:	08001b19 	.word	0x08001b19
 80018b0:	08001b19 	.word	0x08001b19
 80018b4:	08001a19 	.word	0x08001a19
 80018b8:	08001a29 	.word	0x08001a29
 80018bc:	08001a39 	.word	0x08001a39
 80018c0:	08001a49 	.word	0x08001a49
 80018c4:	08001b19 	.word	0x08001b19
 80018c8:	08001b19 	.word	0x08001b19
 80018cc:	08001b19 	.word	0x08001b19
 80018d0:	08001b19 	.word	0x08001b19
 80018d4:	08001b19 	.word	0x08001b19
 80018d8:	08001b19 	.word	0x08001b19
 80018dc:	08001a59 	.word	0x08001a59
 80018e0:	08001a69 	.word	0x08001a69
 80018e4:	08001a79 	.word	0x08001a79
 80018e8:	08001a89 	.word	0x08001a89
 80018ec:	08001b19 	.word	0x08001b19
 80018f0:	08001b19 	.word	0x08001b19
 80018f4:	08001b19 	.word	0x08001b19
 80018f8:	08001b19 	.word	0x08001b19
 80018fc:	08001b19 	.word	0x08001b19
 8001900:	08001b19 	.word	0x08001b19
 8001904:	08001a99 	.word	0x08001a99
 8001908:	08001aa9 	.word	0x08001aa9
 800190c:	08001ab9 	.word	0x08001ab9
 8001910:	08001ac9 	.word	0x08001ac9
 8001914:	08001b19 	.word	0x08001b19
 8001918:	08001b19 	.word	0x08001b19
 800191c:	08001b19 	.word	0x08001b19
 8001920:	08001b19 	.word	0x08001b19
 8001924:	08001b19 	.word	0x08001b19
 8001928:	08001b19 	.word	0x08001b19
 800192c:	08001ad9 	.word	0x08001ad9
 8001930:	08001ae9 	.word	0x08001ae9
 8001934:	08001af9 	.word	0x08001af9
 8001938:	08001b09 	.word	0x08001b09
      {
        case 0:
          if('#' == ucDmaBuffer[i])
 800193c:	7afb      	ldrb	r3, [r7, #11]
 800193e:	4a81      	ldr	r2, [pc, #516]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001940:	5cd3      	ldrb	r3, [r2, r3]
 8001942:	2b23      	cmp	r3, #35	@ 0x23
 8001944:	f040 80eb 	bne.w	8001b1e <HAL_UART_RxCpltCallback+0x2be>
          {
            ucSmState = 1;
 8001948:	2301      	movs	r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
          }
          break;
 800194c:	e0e7      	b.n	8001b1e <HAL_UART_RxCpltCallback+0x2be>

        case 1:
          switch (ucDmaBuffer[i])
 800194e:	7afb      	ldrb	r3, [r7, #11]
 8001950:	4a7c      	ldr	r2, [pc, #496]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001952:	5cd3      	ldrb	r3, [r2, r3]
 8001954:	3b24      	subs	r3, #36	@ 0x24
 8001956:	2b20      	cmp	r3, #32
 8001958:	d85a      	bhi.n	8001a10 <HAL_UART_RxCpltCallback+0x1b0>
 800195a:	a201      	add	r2, pc, #4	@ (adr r2, 8001960 <HAL_UART_RxCpltCallback+0x100>)
 800195c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001960:	080019fd 	.word	0x080019fd
 8001964:	08001a11 	.word	0x08001a11
 8001968:	08001a11 	.word	0x08001a11
 800196c:	08001a11 	.word	0x08001a11
 8001970:	08001a11 	.word	0x08001a11
 8001974:	08001a11 	.word	0x08001a11
 8001978:	08001a11 	.word	0x08001a11
 800197c:	08001a11 	.word	0x08001a11
 8001980:	08001a11 	.word	0x08001a11
 8001984:	08001a11 	.word	0x08001a11
 8001988:	08001a11 	.word	0x08001a11
 800198c:	08001a11 	.word	0x08001a11
 8001990:	08001a11 	.word	0x08001a11
 8001994:	08001a11 	.word	0x08001a11
 8001998:	08001a11 	.word	0x08001a11
 800199c:	08001a11 	.word	0x08001a11
 80019a0:	08001a11 	.word	0x08001a11
 80019a4:	08001a11 	.word	0x08001a11
 80019a8:	08001a11 	.word	0x08001a11
 80019ac:	08001a11 	.word	0x08001a11
 80019b0:	08001a11 	.word	0x08001a11
 80019b4:	08001a11 	.word	0x08001a11
 80019b8:	08001a11 	.word	0x08001a11
 80019bc:	08001a11 	.word	0x08001a11
 80019c0:	08001a11 	.word	0x08001a11
 80019c4:	08001a11 	.word	0x08001a11
 80019c8:	08001a11 	.word	0x08001a11
 80019cc:	08001a11 	.word	0x08001a11
 80019d0:	08001a11 	.word	0x08001a11
 80019d4:	080019e5 	.word	0x080019e5
 80019d8:	080019eb 	.word	0x080019eb
 80019dc:	080019f1 	.word	0x080019f1
 80019e0:	080019f7 	.word	0x080019f7
          {
            case 'A':
              ucSmState = 10;
 80019e4:	230a      	movs	r3, #10
 80019e6:	60fb      	str	r3, [r7, #12]
              break;
 80019e8:	e015      	b.n	8001a16 <HAL_UART_RxCpltCallback+0x1b6>

            case 'B':
              ucSmState = 20;
 80019ea:	2314      	movs	r3, #20
 80019ec:	60fb      	str	r3, [r7, #12]
              break;
 80019ee:	e012      	b.n	8001a16 <HAL_UART_RxCpltCallback+0x1b6>

            case 'C':
              ucSmState = 30;
 80019f0:	231e      	movs	r3, #30
 80019f2:	60fb      	str	r3, [r7, #12]
              break;
 80019f4:	e00f      	b.n	8001a16 <HAL_UART_RxCpltCallback+0x1b6>

            case 'D':
              ucSmState = 40;
 80019f6:	2328      	movs	r3, #40	@ 0x28
 80019f8:	60fb      	str	r3, [r7, #12]
              break;
 80019fa:	e00c      	b.n	8001a16 <HAL_UART_RxCpltCallback+0x1b6>

            case '$':
              ucSmState = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]

              // Message fully received, setting TaskControle ThreadFlag for sync.
              osThreadFlagsSet(TaskControleHandle, 0x10000);
 8001a00:	4b51      	ldr	r3, [pc, #324]	@ (8001b48 <HAL_UART_RxCpltCallback+0x2e8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f00c fbbd 	bl	800e188 <osThreadFlagsSet>
              break;
 8001a0e:	e002      	b.n	8001a16 <HAL_UART_RxCpltCallback+0x1b6>

            default:
              ucSmState = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
              break;
 8001a14:	bf00      	nop
          }
          break;
 8001a16:	e083      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 10:
          xVehicleStatus.xLongSpeed.ucBytes[0] = ucDmaBuffer[i];
 8001a18:	7afb      	ldrb	r3, [r7, #11]
 8001a1a:	4a4a      	ldr	r2, [pc, #296]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a1c:	5cd2      	ldrb	r2, [r2, r3]
 8001a1e:	4b4b      	ldr	r3, [pc, #300]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a20:	701a      	strb	r2, [r3, #0]
          ucSmState = 11;
 8001a22:	230b      	movs	r3, #11
 8001a24:	60fb      	str	r3, [r7, #12]
          break;
 8001a26:	e07b      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 11:
          xVehicleStatus.xLongSpeed.ucBytes[1] = ucDmaBuffer[i];
 8001a28:	7afb      	ldrb	r3, [r7, #11]
 8001a2a:	4a46      	ldr	r2, [pc, #280]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a2c:	5cd2      	ldrb	r2, [r2, r3]
 8001a2e:	4b47      	ldr	r3, [pc, #284]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a30:	705a      	strb	r2, [r3, #1]
          ucSmState = 12;
 8001a32:	230c      	movs	r3, #12
 8001a34:	60fb      	str	r3, [r7, #12]
          break;
 8001a36:	e073      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 12:
          xVehicleStatus.xLongSpeed.ucBytes[2] = ucDmaBuffer[i];
 8001a38:	7afb      	ldrb	r3, [r7, #11]
 8001a3a:	4a42      	ldr	r2, [pc, #264]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a3c:	5cd2      	ldrb	r2, [r2, r3]
 8001a3e:	4b43      	ldr	r3, [pc, #268]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a40:	709a      	strb	r2, [r3, #2]
          ucSmState = 13;
 8001a42:	230d      	movs	r3, #13
 8001a44:	60fb      	str	r3, [r7, #12]
          break;
 8001a46:	e06b      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 13:
          xVehicleStatus.xLongSpeed.ucBytes[3] = ucDmaBuffer[i];
 8001a48:	7afb      	ldrb	r3, [r7, #11]
 8001a4a:	4a3e      	ldr	r2, [pc, #248]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a4c:	5cd2      	ldrb	r2, [r2, r3]
 8001a4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a50:	70da      	strb	r2, [r3, #3]
          ucSmState = 1;
 8001a52:	2301      	movs	r3, #1
 8001a54:	60fb      	str	r3, [r7, #12]
          break;
 8001a56:	e063      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 20:
          xVehicleStatus.xLatSpeed.ucBytes[0] = ucDmaBuffer[i];
 8001a58:	7afb      	ldrb	r3, [r7, #11]
 8001a5a:	4a3a      	ldr	r2, [pc, #232]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a5c:	5cd2      	ldrb	r2, [r2, r3]
 8001a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a60:	711a      	strb	r2, [r3, #4]
          ucSmState = 21;
 8001a62:	2315      	movs	r3, #21
 8001a64:	60fb      	str	r3, [r7, #12]
          break;
 8001a66:	e05b      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 21:
          xVehicleStatus.xLatSpeed.ucBytes[1] = ucDmaBuffer[i];
 8001a68:	7afb      	ldrb	r3, [r7, #11]
 8001a6a:	4a36      	ldr	r2, [pc, #216]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a6c:	5cd2      	ldrb	r2, [r2, r3]
 8001a6e:	4b37      	ldr	r3, [pc, #220]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a70:	715a      	strb	r2, [r3, #5]
          ucSmState = 22;
 8001a72:	2316      	movs	r3, #22
 8001a74:	60fb      	str	r3, [r7, #12]
          break;
 8001a76:	e053      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 22:
          xVehicleStatus.xLatSpeed.ucBytes[2] = ucDmaBuffer[i];
 8001a78:	7afb      	ldrb	r3, [r7, #11]
 8001a7a:	4a32      	ldr	r2, [pc, #200]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a7c:	5cd2      	ldrb	r2, [r2, r3]
 8001a7e:	4b33      	ldr	r3, [pc, #204]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a80:	719a      	strb	r2, [r3, #6]
          ucSmState = 23;
 8001a82:	2317      	movs	r3, #23
 8001a84:	60fb      	str	r3, [r7, #12]
          break;
 8001a86:	e04b      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 23:
          xVehicleStatus.xLatSpeed.ucBytes[3] = ucDmaBuffer[i];
 8001a88:	7afb      	ldrb	r3, [r7, #11]
 8001a8a:	4a2e      	ldr	r2, [pc, #184]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a8c:	5cd2      	ldrb	r2, [r2, r3]
 8001a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a90:	71da      	strb	r2, [r3, #7]
          ucSmState = 1;
 8001a92:	2301      	movs	r3, #1
 8001a94:	60fb      	str	r3, [r7, #12]
          break;
 8001a96:	e043      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 30:
          xVehicleStatus.xHeadingRate.ucBytes[0] = ucDmaBuffer[i];
 8001a98:	7afb      	ldrb	r3, [r7, #11]
 8001a9a:	4a2a      	ldr	r2, [pc, #168]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a9c:	5cd2      	ldrb	r2, [r2, r3]
 8001a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001aa0:	721a      	strb	r2, [r3, #8]
          ucSmState = 31;
 8001aa2:	231f      	movs	r3, #31
 8001aa4:	60fb      	str	r3, [r7, #12]
          break;
 8001aa6:	e03b      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 31:
          xVehicleStatus.xHeadingRate.ucBytes[1] = ucDmaBuffer[i];
 8001aa8:	7afb      	ldrb	r3, [r7, #11]
 8001aaa:	4a26      	ldr	r2, [pc, #152]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001aac:	5cd2      	ldrb	r2, [r2, r3]
 8001aae:	4b27      	ldr	r3, [pc, #156]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001ab0:	725a      	strb	r2, [r3, #9]
          ucSmState = 32;
 8001ab2:	2320      	movs	r3, #32
 8001ab4:	60fb      	str	r3, [r7, #12]
          break;
 8001ab6:	e033      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 32:
          xVehicleStatus.xHeadingRate.ucBytes[2] = ucDmaBuffer[i];
 8001ab8:	7afb      	ldrb	r3, [r7, #11]
 8001aba:	4a22      	ldr	r2, [pc, #136]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001abc:	5cd2      	ldrb	r2, [r2, r3]
 8001abe:	4b23      	ldr	r3, [pc, #140]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001ac0:	729a      	strb	r2, [r3, #10]
          ucSmState = 33;
 8001ac2:	2321      	movs	r3, #33	@ 0x21
 8001ac4:	60fb      	str	r3, [r7, #12]
          break;
 8001ac6:	e02b      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 33:
          xVehicleStatus.xHeadingRate.ucBytes[3] = ucDmaBuffer[i];
 8001ac8:	7afb      	ldrb	r3, [r7, #11]
 8001aca:	4a1e      	ldr	r2, [pc, #120]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001acc:	5cd2      	ldrb	r2, [r2, r3]
 8001ace:	4b1f      	ldr	r3, [pc, #124]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001ad0:	72da      	strb	r2, [r3, #11]
          ucSmState = 1;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
          break;
 8001ad6:	e023      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 40:
          xVehicleStatus.xSteeringStatus.ucBytes[0] = ucDmaBuffer[i];
 8001ad8:	7afb      	ldrb	r3, [r7, #11]
 8001ada:	4a1a      	ldr	r2, [pc, #104]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001adc:	5cd2      	ldrb	r2, [r2, r3]
 8001ade:	4b1b      	ldr	r3, [pc, #108]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001ae0:	731a      	strb	r2, [r3, #12]
          ucSmState = 41;
 8001ae2:	2329      	movs	r3, #41	@ 0x29
 8001ae4:	60fb      	str	r3, [r7, #12]
          break;
 8001ae6:	e01b      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 41:
          xVehicleStatus.xSteeringStatus.ucBytes[1] = ucDmaBuffer[i];
 8001ae8:	7afb      	ldrb	r3, [r7, #11]
 8001aea:	4a16      	ldr	r2, [pc, #88]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001aec:	5cd2      	ldrb	r2, [r2, r3]
 8001aee:	4b17      	ldr	r3, [pc, #92]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001af0:	735a      	strb	r2, [r3, #13]
          ucSmState = 42;
 8001af2:	232a      	movs	r3, #42	@ 0x2a
 8001af4:	60fb      	str	r3, [r7, #12]
          break;
 8001af6:	e013      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 42:
          xVehicleStatus.xSteeringStatus.ucBytes[2] = ucDmaBuffer[i];
 8001af8:	7afb      	ldrb	r3, [r7, #11]
 8001afa:	4a12      	ldr	r2, [pc, #72]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001afc:	5cd2      	ldrb	r2, [r2, r3]
 8001afe:	4b13      	ldr	r3, [pc, #76]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001b00:	739a      	strb	r2, [r3, #14]
          ucSmState = 43;
 8001b02:	232b      	movs	r3, #43	@ 0x2b
 8001b04:	60fb      	str	r3, [r7, #12]
          break;
 8001b06:	e00b      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        case 43:
          xVehicleStatus.xSteeringStatus.ucBytes[3] = ucDmaBuffer[i];
 8001b08:	7afb      	ldrb	r3, [r7, #11]
 8001b0a:	4a0e      	ldr	r2, [pc, #56]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001b0c:	5cd2      	ldrb	r2, [r2, r3]
 8001b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b4c <HAL_UART_RxCpltCallback+0x2ec>)
 8001b10:	73da      	strb	r2, [r3, #15]
          ucSmState = 1;
 8001b12:	2301      	movs	r3, #1
 8001b14:	60fb      	str	r3, [r7, #12]
          break;
 8001b16:	e003      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>

        default:
		      ucSmState = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
          break;
 8001b1c:	e000      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x2c0>
          break;
 8001b1e:	bf00      	nop
    for(unsigned char i = 0; i<UART2_DMA_BUFFER_SIZE; i++)
 8001b20:	7afb      	ldrb	r3, [r7, #11]
 8001b22:	3301      	adds	r3, #1
 8001b24:	72fb      	strb	r3, [r7, #11]
 8001b26:	7afb      	ldrb	r3, [r7, #11]
 8001b28:	2b15      	cmp	r3, #21
 8001b2a:	f67f aea7 	bls.w	800187c <HAL_UART_RxCpltCallback+0x1c>
      }
    }
    // Starting other UART reading
    HAL_UART_Receive_DMA(&huart2, ucDmaBuffer, UART2_DMA_BUFFER_SIZE);
 8001b2e:	2216      	movs	r2, #22
 8001b30:	4904      	ldr	r1, [pc, #16]	@ (8001b44 <HAL_UART_RxCpltCallback+0x2e4>)
 8001b32:	4803      	ldr	r0, [pc, #12]	@ (8001b40 <HAL_UART_RxCpltCallback+0x2e0>)
 8001b34:	f00a fa04 	bl	800bf40 <HAL_UART_Receive_DMA>
  }
}
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	24032a48 	.word	0x24032a48
 8001b44:	240329d4 	.word	0x240329d4
 8001b48:	24032968 	.word	0x24032968
 8001b4c:	240329c4 	.word	0x240329c4

08001b50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a04      	ldr	r2, [pc, #16]	@ (8001b70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d101      	bne.n	8001b66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b62:	f001 fc9d 	bl	80034a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40001000 	.word	0x40001000

08001b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b78:	b672      	cpsid	i
}
 8001b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <Error_Handler+0x8>

08001b80 <StartMicroAutoware>:
  * @brief  MicroAutoware task function.
  * @param  argument : not used.
  * @retval None
  */
void StartMicroAutoware(void * argument)
{
 8001b80:	b5b0      	push	{r4, r5, r7, lr}
 8001b82:	f5ad 7d4e 	sub.w	sp, sp, #824	@ 0x338
 8001b86:	af02      	add	r7, sp, #8
 8001b88:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001b8c:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001b90:	6018      	str	r0, [r3, #0]

  // Variables -- START

  unsigned int uiFlags;
  unsigned char ucControlMode = AUTOWARE;
 8001b92:	2301      	movs	r3, #1
 8001b94:	f887 332f 	strb.w	r3, [r7, #815]	@ 0x32f

  // micro-ros QoS
  const rmw_qos_profile_t * qos_autoware = &rmw_qos_profile_autoware;
 8001b98:	4bd5      	ldr	r3, [pc, #852]	@ (8001ef0 <StartMicroAutoware+0x370>)
 8001b9a:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
  // Variables -- END

  // micro-ROS configuration

  // Setting transport layer
  rmw_uros_set_custom_transport(
 8001b9e:	4bd5      	ldr	r3, [pc, #852]	@ (8001ef4 <StartMicroAutoware+0x374>)
 8001ba0:	9301      	str	r3, [sp, #4]
 8001ba2:	4bd5      	ldr	r3, [pc, #852]	@ (8001ef8 <StartMicroAutoware+0x378>)
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	4bd5      	ldr	r3, [pc, #852]	@ (8001efc <StartMicroAutoware+0x37c>)
 8001ba8:	4ad5      	ldr	r2, [pc, #852]	@ (8001f00 <StartMicroAutoware+0x380>)
 8001baa:	49d6      	ldr	r1, [pc, #856]	@ (8001f04 <StartMicroAutoware+0x384>)
 8001bac:	2001      	movs	r0, #1
 8001bae:	f013 fd0b 	bl	80155c8 <rmw_uros_set_custom_transport>
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  // Setting memory allocation methods
  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001bb2:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001bb6:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f013 fc58 	bl	8015470 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8001bc0:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001bc4:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001bc8:	4acf      	ldr	r2, [pc, #828]	@ (8001f08 <StartMicroAutoware+0x388>)
 8001bca:	601a      	str	r2, [r3, #0]
  freeRTOS_allocator.deallocate = microros_deallocate;
 8001bcc:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001bd0:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001bd4:	4acd      	ldr	r2, [pc, #820]	@ (8001f0c <StartMicroAutoware+0x38c>)
 8001bd6:	605a      	str	r2, [r3, #4]
  freeRTOS_allocator.reallocate = microros_reallocate;
 8001bd8:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001bdc:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001be0:	4acb      	ldr	r2, [pc, #812]	@ (8001f10 <StartMicroAutoware+0x390>)
 8001be2:	609a      	str	r2, [r3, #8]
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001be4:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001be8:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001bec:	4ac9      	ldr	r2, [pc, #804]	@ (8001f14 <StartMicroAutoware+0x394>)
 8001bee:	60da      	str	r2, [r3, #12]

  // micro-ROS app

  executor = rclc_executor_get_zero_initialized_executor();
 8001bf0:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001bf4:	f5a3 741c 	sub.w	r4, r3, #624	@ 0x270
 8001bf8:	463b      	mov	r3, r7
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f012 ff84 	bl	8014b08 <rclc_executor_get_zero_initialized_executor>
 8001c00:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001c04:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8001c08:	4620      	mov	r0, r4
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	2388      	movs	r3, #136	@ 0x88
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f020 fc6d 	bl	80224ee <memcpy>

  allocator = rcl_get_default_allocator();
 8001c14:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001c18:	f5a3 74f2 	sub.w	r4, r3, #484	@ 0x1e4
 8001c1c:	463b      	mov	r3, r7
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f013 fc34 	bl	801548c <rcutils_get_default_allocator>
 8001c24:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001c28:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8001c2c:	461d      	mov	r5, r3
 8001c2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c32:	682b      	ldr	r3, [r5, #0]
 8001c34:	6023      	str	r3, [r4, #0]

  //create init_options
  rclc_support_init(&support, 0, NULL, &allocator);
 8001c36:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8001c3a:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2100      	movs	r1, #0
 8001c42:	f013 fa91 	bl	8015168 <rclc_support_init>

  // create node
  rclc_node_init_default(&VehicleInterfaceNode, NODE_NAME, "microautoware", &support);
 8001c46:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001c4a:	f507 70ca 	add.w	r0, r7, #404	@ 0x194
 8001c4e:	4ab2      	ldr	r2, [pc, #712]	@ (8001f18 <StartMicroAutoware+0x398>)
 8001c50:	49b2      	ldr	r1, [pc, #712]	@ (8001f1c <StartMicroAutoware+0x39c>)
 8001c52:	f013 fad3 	bl	80151fc <rclc_node_init_default>

  // create executor
  rclc_executor_init(&executor, &support.context, 1, &allocator);
 8001c56:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8001c5a:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8001c5e:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001c62:	2201      	movs	r2, #1
 8001c64:	f012 ff5c 	bl	8014b20 <rclc_executor_init>

  // create timers
  rclc_timer_init_default(&timer_watchdog_agent, &support, WATCHDOG_AGENT_TIMEOUT, timer_watchdog_agent_callback);
 8001c68:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8001c6c:	f507 7037 	add.w	r0, r7, #732	@ 0x2dc
 8001c70:	4bab      	ldr	r3, [pc, #684]	@ (8001f20 <StartMicroAutoware+0x3a0>)
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	f013 fbc0 	bl	8015400 <rclc_timer_init_default>

  // create subscribers
  rclc_subscription_init(
 8001c80:	f014 fae8 	bl	8016254 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>
 8001c84:	4602      	mov	r2, r0
 8001c86:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001c8a:	f507 7047 	add.w	r0, r7, #796	@ 0x31c
 8001c8e:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	4ba3      	ldr	r3, [pc, #652]	@ (8001f24 <StartMicroAutoware+0x3a4>)
 8001c96:	f013 fb73 	bl	8015380 <rclc_subscription_init>
    		&clock_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(rosgraph_msgs, msg, Clock),
    		"/clock", qos_autoware);
        
  rclc_subscription_init(
 8001c9a:	f00f feb7 	bl	8011a0c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001ca4:	f507 7046 	add.w	r0, r7, #792	@ 0x318
 8001ca8:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	4b9e      	ldr	r3, [pc, #632]	@ (8001f28 <StartMicroAutoware+0x3a8>)
 8001cb0:	f013 fb66 	bl	8015380 <rclc_subscription_init>
    		&control_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_control_msgs, msg, AckermannControlCommand),
    		"/control/command/control_cmd", qos_autoware);

  rclc_subscription_init(
 8001cb4:	f010 f922 	bl	8011efc <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001cbe:	f507 7045 	add.w	r0, r7, #788	@ 0x314
 8001cc2:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	4b98      	ldr	r3, [pc, #608]	@ (8001f2c <StartMicroAutoware+0x3ac>)
 8001cca:	f013 fb59 	bl	8015380 <rclc_subscription_init>
    		&gear_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, GearCommand),
    		"/control/command/gear_cmd", qos_autoware);

  rclc_subscription_init(
 8001cce:	f010 f98d 	bl	8011fec <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001cd8:	f507 7044 	add.w	r0, r7, #784	@ 0x310
 8001cdc:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	4b93      	ldr	r3, [pc, #588]	@ (8001f30 <StartMicroAutoware+0x3b0>)
 8001ce4:	f013 fb4c 	bl	8015380 <rclc_subscription_init>
    		&turn_indicators_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, TurnIndicatorsCommand),
    		"/control/command/turn_indicators_cmd", qos_autoware);

  rclc_subscription_init(
 8001ce8:	f010 f938 	bl	8011f5c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand>
 8001cec:	4602      	mov	r2, r0
 8001cee:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001cf2:	f507 7043 	add.w	r0, r7, #780	@ 0x30c
 8001cf6:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	4b8d      	ldr	r3, [pc, #564]	@ (8001f34 <StartMicroAutoware+0x3b4>)
 8001cfe:	f013 fb3f 	bl	8015380 <rclc_subscription_init>
    		&hazard_lights_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, HazardLightsCommand ),
    		"/control/command/hazard_lights_cmd", qos_autoware);

  rclc_subscription_init(
 8001d02:	f014 fc39 	bl	8016578 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>
 8001d06:	4602      	mov	r2, r0
 8001d08:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001d0c:	f507 7042 	add.w	r0, r7, #776	@ 0x308
 8001d10:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	4b88      	ldr	r3, [pc, #544]	@ (8001f38 <StartMicroAutoware+0x3b8>)
 8001d18:	f013 fb32 	bl	8015380 <rclc_subscription_init>
    		&actuation_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, ActuationCommandStamped),
    		"/control/command/actuation_cmd", qos_autoware);

  rclc_subscription_init(
 8001d1c:	f014 fc74 	bl	8016608 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>
 8001d20:	4602      	mov	r2, r0
 8001d22:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001d26:	f507 7041 	add.w	r0, r7, #772	@ 0x304
 8001d2a:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	4b82      	ldr	r3, [pc, #520]	@ (8001f3c <StartMicroAutoware+0x3bc>)
 8001d32:	f013 fb25 	bl	8015380 <rclc_subscription_init>
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, VehicleEmergencyStamped),
    		"/control/command/emergency_cmd", qos_autoware);

  // create publishers
  rclc_publisher_init(
 8001d36:	f010 f8c9 	bl	8011ecc <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001d40:	f507 7040 	add.w	r0, r7, #768	@ 0x300
 8001d44:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	4b7d      	ldr	r3, [pc, #500]	@ (8001f40 <StartMicroAutoware+0x3c0>)
 8001d4c:	f013 fa98 	bl	8015280 <rclc_publisher_init>
        &control_mode_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, ControlModeReport),
        "/vehicle/status/control_mode", qos_autoware);

  rclc_publisher_init(
 8001d50:	f010 f97c 	bl	801204c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001d5a:	f507 703f 	add.w	r0, r7, #764	@ 0x2fc
 8001d5e:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	4b77      	ldr	r3, [pc, #476]	@ (8001f44 <StartMicroAutoware+0x3c4>)
 8001d66:	f013 fa8b 	bl	8015280 <rclc_publisher_init>
		    &vehicle_twist_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, VelocityReport),
        "/vehicle/status/velocity_status", qos_autoware);

  rclc_publisher_init(
 8001d6a:	f010 f927 	bl	8011fbc <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001d74:	f507 703e 	add.w	r0, r7, #760	@ 0x2f8
 8001d78:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	4b72      	ldr	r3, [pc, #456]	@ (8001f48 <StartMicroAutoware+0x3c8>)
 8001d80:	f013 fa7e 	bl	8015280 <rclc_publisher_init>
        &steering_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, SteeringReport),
        "/vehicle/status/steering_status", qos_autoware);

  rclc_publisher_init(
 8001d84:	f010 f8d2 	bl	8011f2c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001d8e:	f507 703d 	add.w	r0, r7, #756	@ 0x2f4
 8001d92:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	4b6c      	ldr	r3, [pc, #432]	@ (8001f4c <StartMicroAutoware+0x3cc>)
 8001d9a:	f013 fa71 	bl	8015280 <rclc_publisher_init>
        &gear_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, GearReport),
        "/vehicle/status/gear_status", qos_autoware);

  rclc_publisher_init(
 8001d9e:	f010 f93d 	bl	801201c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>
 8001da2:	4602      	mov	r2, r0
 8001da4:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001da8:	f507 703c 	add.w	r0, r7, #752	@ 0x2f0
 8001dac:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	4b67      	ldr	r3, [pc, #412]	@ (8001f50 <StartMicroAutoware+0x3d0>)
 8001db4:	f013 fa64 	bl	8015280 <rclc_publisher_init>
        &turn_indicators_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, TurnIndicatorsReport),
        "/vehicle/status/turn_indicators_status", qos_autoware);

  rclc_publisher_init(
 8001db8:	f010 f8e8 	bl	8011f8c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001dc2:	f507 703b 	add.w	r0, r7, #748	@ 0x2ec
 8001dc6:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	4b61      	ldr	r3, [pc, #388]	@ (8001f54 <StartMicroAutoware+0x3d4>)
 8001dce:	f013 fa57 	bl	8015280 <rclc_publisher_init>
        &hazard_lights_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, HazardLightsReport),
        "/vehicle/status/hazard_lights_status", qos_autoware);

  rclc_publisher_init(
 8001dd2:	f014 fbe9 	bl	80165a8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001ddc:	f507 703a 	add.w	r0, r7, #744	@ 0x2e8
 8001de0:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	4b5c      	ldr	r3, [pc, #368]	@ (8001f58 <StartMicroAutoware+0x3d8>)
 8001de8:	f013 fa4a 	bl	8015280 <rclc_publisher_init>
        &actuation_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, ActuationStatusStamped),
        "/vehicle/status/actuation_status", qos_autoware);

  rclc_publisher_init(
 8001dec:	f014 fbf4 	bl	80165d8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>
 8001df0:	4602      	mov	r2, r0
 8001df2:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001df6:	f507 7039 	add.w	r0, r7, #740	@ 0x2e4
 8001dfa:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	4b56      	ldr	r3, [pc, #344]	@ (8001f5c <StartMicroAutoware+0x3dc>)
 8001e02:	f013 fa3d 	bl	8015280 <rclc_publisher_init>
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, SteeringWheelStatusStamped),
        "/vehicle/status/steering_wheel_status", qos_autoware);

  // creating servers
  rclc_service_init(
 8001e06:	f010 f841 	bl	8011e8c <rosidl_typesupport_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001e10:	f507 7038 	add.w	r0, r7, #736	@ 0x2e0
 8001e14:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	4b51      	ldr	r3, [pc, #324]	@ (8001f60 <StartMicroAutoware+0x3e0>)
 8001e1c:	f013 fa70 	bl	8015300 <rclc_service_init>
        ROSIDL_GET_SRV_TYPE_SUPPORT(autoware_auto_vehicle_msgs, srv, ControlModeCommand),
        "/control/control_mode_request", qos_autoware);


  // adding callbacks to executor
  rclc_executor_add_subscription(&executor, &clock_sub_, &clock_msg_, &clock_callback, ON_NEW_DATA);
 8001e20:	f507 7235 	add.w	r2, r7, #724	@ 0x2d4
 8001e24:	f507 7147 	add.w	r1, r7, #796	@ 0x31c
 8001e28:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	4b4c      	ldr	r3, [pc, #304]	@ (8001f64 <StartMicroAutoware+0x3e4>)
 8001e32:	f012 fef1 	bl	8014c18 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &control_cmd_sub_, &control_cmd_msg_, &control_cmd_callback, ON_NEW_DATA);
 8001e36:	f507 722a 	add.w	r2, r7, #680	@ 0x2a8
 8001e3a:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 8001e3e:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001e42:	2300      	movs	r3, #0
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	4b48      	ldr	r3, [pc, #288]	@ (8001f68 <StartMicroAutoware+0x3e8>)
 8001e48:	f012 fee6 	bl	8014c18 <rclc_executor_add_subscription>
  
  rclc_executor_add_service(&executor, &control_mode_server_, &control_mode_request_msg_, &control_mode_response_msg_, control_mode_cmd_callback);
 8001e4c:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8001e50:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 8001e54:	f507 7138 	add.w	r1, r7, #736	@ 0x2e0
 8001e58:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001e5c:	4c43      	ldr	r4, [pc, #268]	@ (8001f6c <StartMicroAutoware+0x3ec>)
 8001e5e:	9400      	str	r4, [sp, #0]
 8001e60:	f012 ff18 	bl	8014c94 <rclc_executor_add_service>

  rclc_executor_add_subscription(&executor, &gear_cmd_sub_, &gear_cmd_msg_, &gear_cmd_callback, ON_NEW_DATA);
 8001e64:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8001e68:	f507 7145 	add.w	r1, r7, #788	@ 0x314
 8001e6c:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001e70:	2300      	movs	r3, #0
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	4b3e      	ldr	r3, [pc, #248]	@ (8001f70 <StartMicroAutoware+0x3f0>)
 8001e76:	f012 fecf 	bl	8014c18 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &turn_indicators_cmd_sub_, &turn_indicators_cmd_msg_, &turn_indicators_cmd_callback, ON_NEW_DATA);
 8001e7a:	f507 7224 	add.w	r2, r7, #656	@ 0x290
 8001e7e:	f507 7144 	add.w	r1, r7, #784	@ 0x310
 8001e82:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001e86:	2300      	movs	r3, #0
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f74 <StartMicroAutoware+0x3f4>)
 8001e8c:	f012 fec4 	bl	8014c18 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &hazard_lights_cmd_sub_, &hazard_lights_cmd_msg_, &hazard_lights_cmd_callback, ON_NEW_DATA);
 8001e90:	f507 7221 	add.w	r2, r7, #644	@ 0x284
 8001e94:	f507 7143 	add.w	r1, r7, #780	@ 0x30c
 8001e98:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	4b35      	ldr	r3, [pc, #212]	@ (8001f78 <StartMicroAutoware+0x3f8>)
 8001ea2:	f012 feb9 	bl	8014c18 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &actuation_cmd_sub_, &actuation_cmd_msg_, &actuation_cmd_callback, ON_NEW_DATA);
 8001ea6:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8001eaa:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 8001eae:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	4b31      	ldr	r3, [pc, #196]	@ (8001f7c <StartMicroAutoware+0x3fc>)
 8001eb8:	f012 feae 	bl	8014c18 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &emergency_sub_, &emergency_msg_, &emergency_callback, ON_NEW_DATA);
 8001ebc:	f507 7211 	add.w	r2, r7, #580	@ 0x244
 8001ec0:	f507 7141 	add.w	r1, r7, #772	@ 0x304
 8001ec4:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001ec8:	2300      	movs	r3, #0
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	4b2c      	ldr	r3, [pc, #176]	@ (8001f80 <StartMicroAutoware+0x400>)
 8001ece:	f012 fea3 	bl	8014c18 <rclc_executor_add_subscription>


  // pinging micro-ros agent
  rmw_ret_t xPingResult = rmw_uros_ping_agent(1000, 20);
 8001ed2:	2114      	movs	r1, #20
 8001ed4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ed8:	f013 fb8c 	bl	80155f4 <rmw_uros_ping_agent>
 8001edc:	f8c7 0324 	str.w	r0, [r7, #804]	@ 0x324

  // Setting flag on TaskControle to enable autonomus mode
  osThreadFlagsSet(TaskControleHandle, MICRO_ROS_AGENT_ONLINE_FLAG);
 8001ee0:	4b28      	ldr	r3, [pc, #160]	@ (8001f84 <StartMicroAutoware+0x404>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f00c f94d 	bl	800e188 <osThreadFlagsSet>
 8001eee:	e04b      	b.n	8001f88 <StartMicroAutoware+0x408>
 8001ef0:	080234a8 	.word	0x080234a8
 8001ef4:	08000f8d 	.word	0x08000f8d
 8001ef8:	08000f29 	.word	0x08000f29
 8001efc:	08000f09 	.word	0x08000f09
 8001f00:	08000edd 	.word	0x08000edd
 8001f04:	24032adc 	.word	0x24032adc
 8001f08:	080021ed 	.word	0x080021ed
 8001f0c:	08002231 	.word	0x08002231
 8001f10:	08002269 	.word	0x08002269
 8001f14:	080022d5 	.word	0x080022d5
 8001f18:	080231d0 	.word	0x080231d0
 8001f1c:	080231e0 	.word	0x080231e0
 8001f20:	08001169 	.word	0x08001169
 8001f24:	080231f4 	.word	0x080231f4
 8001f28:	080231fc 	.word	0x080231fc
 8001f2c:	0802321c 	.word	0x0802321c
 8001f30:	08023238 	.word	0x08023238
 8001f34:	08023260 	.word	0x08023260
 8001f38:	08023284 	.word	0x08023284
 8001f3c:	080232a4 	.word	0x080232a4
 8001f40:	080232c4 	.word	0x080232c4
 8001f44:	080232e4 	.word	0x080232e4
 8001f48:	08023304 	.word	0x08023304
 8001f4c:	08023324 	.word	0x08023324
 8001f50:	08023340 	.word	0x08023340
 8001f54:	08023368 	.word	0x08023368
 8001f58:	08023390 	.word	0x08023390
 8001f5c:	080233b4 	.word	0x080233b4
 8001f60:	080233dc 	.word	0x080233dc
 8001f64:	080011ad 	.word	0x080011ad
 8001f68:	080011d9 	.word	0x080011d9
 8001f6c:	080012e1 	.word	0x080012e1
 8001f70:	08001205 	.word	0x08001205
 8001f74:	08001231 	.word	0x08001231
 8001f78:	0800125d 	.word	0x0800125d
 8001f7c:	08001289 	.word	0x08001289
 8001f80:	080012b5 	.word	0x080012b5
 8001f84:	24032968 	.word	0x24032968
  // Task loop
  for (;;)
  {

    // Sync time with ROS
    rmw_uros_sync_session(TIMEOUT_TS_SYNC);
 8001f88:	2064      	movs	r0, #100	@ 0x64
 8001f8a:	f013 fd4d 	bl	8015a28 <rmw_uros_sync_session>

    rclc_executor_spin_some(&executor, EXECUTOR_SPIN_PERIOD * (1000 * 1000)); // Spinning executor for EXECUTOR_SPIN_PERIOD * (1000 * 1000) ns.
 8001f8e:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8001f92:	a394      	add	r3, pc, #592	@ (adr r3, 80021e4 <StartMicroAutoware+0x664>)
 8001f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f98:	4608      	mov	r0, r1
 8001f9a:	f013 f8ab 	bl	80150f4 <rclc_executor_spin_some>

    // Checking if control mode has changed by vehicle or Autoware.
    uiFlags = osThreadFlagsGet();
 8001f9e:	f00c f941 	bl	800e224 <osThreadFlagsGet>
 8001fa2:	f8c7 0320 	str.w	r0, [r7, #800]	@ 0x320
    uiFlags = osThreadFlagsWait(TO_AUTOWARE_MODE_FLAG | TO_MANUAL_MODE_FLAG, osFlagsWaitAny, 0);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2100      	movs	r1, #0
 8001faa:	2011      	movs	r0, #17
 8001fac:	f00c f95b 	bl	800e266 <osThreadFlagsWait>
 8001fb0:	f8c7 0320 	str.w	r0, [r7, #800]	@ 0x320

    if(TO_AUTOWARE_MODE_FLAG == uiFlags)
 8001fb4:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d103      	bne.n	8001fc4 <StartMicroAutoware+0x444>
    {
      ucControlMode = AUTOWARE;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	f887 332f 	strb.w	r3, [r7, #815]	@ 0x32f
 8001fc2:	e00e      	b.n	8001fe2 <StartMicroAutoware+0x462>
    }
    else if(TO_MANUAL_MODE_FLAG == uiFlags)
 8001fc4:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 8001fc8:	2b10      	cmp	r3, #16
 8001fca:	d103      	bne.n	8001fd4 <StartMicroAutoware+0x454>
    {
      ucControlMode = MANUAL;
 8001fcc:	2304      	movs	r3, #4
 8001fce:	f887 332f 	strb.w	r3, [r7, #815]	@ 0x32f
 8001fd2:	e006      	b.n	8001fe2 <StartMicroAutoware+0x462>
    }
    else if((TO_AUTOWARE_MODE_FLAG | TO_MANUAL_MODE_FLAG) == uiFlags)
 8001fd4:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 8001fd8:	2b11      	cmp	r3, #17
 8001fda:	d102      	bne.n	8001fe2 <StartMicroAutoware+0x462>
    {
      ucControlMode = MANUAL;
 8001fdc:	2304      	movs	r3, #4
 8001fde:	f887 332f 	strb.w	r3, [r7, #815]	@ 0x32f
    }

    control_mode_msg_.stamp = clock_msg_.clock;
 8001fe2:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001fe6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001fea:	461a      	mov	r2, r3
 8001fec:	f507 7335 	add.w	r3, r7, #724	@ 0x2d4
 8001ff0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ff4:	e882 0003 	stmia.w	r2, {r0, r1}
    control_mode_msg_.mode = ucControlMode;
 8001ff8:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001ffc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002000:	f897 232f 	ldrb.w	r2, [r7, #815]	@ 0x32f
 8002004:	721a      	strb	r2, [r3, #8]
    rcl_publish(&control_mode_pub_, &control_mode_msg_, NULL);
 8002006:	f507 710a 	add.w	r1, r7, #552	@ 0x228
 800200a:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 800200e:	2200      	movs	r2, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f012 f9eb 	bl	80143ec <rcl_publish>

    // All topics are recieved (maybe not all...)
    if(0b1 & (ucSubscribersRecieved >> 1)) // Checking if control_cmd_sub_ data arrives (second bit of ucSubscribersRecieved)
 8002016:	4b6c      	ldr	r3, [pc, #432]	@ (80021c8 <StartMicroAutoware+0x648>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d03f      	beq.n	80020a4 <StartMicroAutoware+0x524>
    {
      // Autonomous mode: Gather all subs data, then compact and send to TaskControle.
      if(AUTOWARE == ucControlMode)
 8002024:	f897 332f 	ldrb.w	r3, [r7, #815]	@ 0x32f
 8002028:	2b01      	cmp	r3, #1
 800202a:	d13b      	bne.n	80020a4 <StartMicroAutoware+0x524>
      {
        osMutexAcquire(MutexControlActionHandle, osWaitForever);
 800202c:	4b67      	ldr	r3, [pc, #412]	@ (80021cc <StartMicroAutoware+0x64c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002034:	4618      	mov	r0, r3
 8002036:	f00c fa38 	bl	800e4aa <osMutexAcquire>
        xControlAction.xSteeringAngle.fFloat = control_cmd_msg_.lateral.steering_tire_angle * 1.2;
 800203a:	edd7 7aae 	vldr	s15, [r7, #696]	@ 0x2b8
 800203e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002042:	ed9f 6b5f 	vldr	d6, [pc, #380]	@ 80021c0 <StartMicroAutoware+0x640>
 8002046:	ee27 7b06 	vmul.f64	d7, d7, d6
 800204a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800204e:	4b60      	ldr	r3, [pc, #384]	@ (80021d0 <StartMicroAutoware+0x650>)
 8002050:	edc3 7a00 	vstr	s15, [r3]
        xControlAction.xSteeringVelocity.fFloat = control_cmd_msg_.lateral.steering_tire_rotation_rate * 1.2;
 8002054:	edd7 7aaf 	vldr	s15, [r7, #700]	@ 0x2bc
 8002058:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800205c:	ed9f 6b58 	vldr	d6, [pc, #352]	@ 80021c0 <StartMicroAutoware+0x640>
 8002060:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002064:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002068:	4b59      	ldr	r3, [pc, #356]	@ (80021d0 <StartMicroAutoware+0x650>)
 800206a:	edc3 7a01 	vstr	s15, [r3, #4]
        xControlAction.xSpeed.fFloat = control_cmd_msg_.longitudinal.speed;
 800206e:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 8002072:	4a57      	ldr	r2, [pc, #348]	@ (80021d0 <StartMicroAutoware+0x650>)
 8002074:	6093      	str	r3, [r2, #8]
        xControlAction.xAcceleration.fFloat = control_cmd_msg_.longitudinal.acceleration;
 8002076:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 800207a:	4a55      	ldr	r2, [pc, #340]	@ (80021d0 <StartMicroAutoware+0x650>)
 800207c:	60d3      	str	r3, [r2, #12]
        xControlAction.xJerk.fFloat = control_cmd_msg_.longitudinal.jerk;
 800207e:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 8002082:	4a53      	ldr	r2, [pc, #332]	@ (80021d0 <StartMicroAutoware+0x650>)
 8002084:	6113      	str	r3, [r2, #16]
        xControlAction.ucControlMode = AUTOWARE;
 8002086:	4b52      	ldr	r3, [pc, #328]	@ (80021d0 <StartMicroAutoware+0x650>)
 8002088:	2201      	movs	r2, #1
 800208a:	751a      	strb	r2, [r3, #20]
        osMutexRelease(MutexControlSignalHandle);
 800208c:	4b51      	ldr	r3, [pc, #324]	@ (80021d4 <StartMicroAutoware+0x654>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f00c fa55 	bl	800e540 <osMutexRelease>

        osThreadFlagsSet(TaskControleHandle, DATA_UPDATED_FLAG);
 8002096:	4b50      	ldr	r3, [pc, #320]	@ (80021d8 <StartMicroAutoware+0x658>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800209e:	4618      	mov	r0, r3
 80020a0:	f00c f872 	bl	800e188 <osThreadFlagsSet>
      }

    }

    // WAIT for flag to sync xControlSignal update
    uiFlags = osThreadFlagsGet();
 80020a4:	f00c f8be 	bl	800e224 <osThreadFlagsGet>
 80020a8:	f8c7 0320 	str.w	r0, [r7, #800]	@ 0x320
    uiFlags = osThreadFlagsWait(DATA_UPDATED_FLAG, osFlagsWaitAll, TIMEOUT_GET_CONTROL_SIGNAL);
 80020ac:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80020b0:	2101      	movs	r1, #1
 80020b2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80020b6:	f00c f8d6 	bl	800e266 <osThreadFlagsWait>
 80020ba:	f8c7 0320 	str.w	r0, [r7, #800]	@ 0x320
    {

    }

    // xControlSignal updated
    if(0x100 == uiFlags)
 80020be:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 80020c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020c6:	f47f af5f 	bne.w	8001f88 <StartMicroAutoware+0x408>
    {
      // Assembling microAutoware msgs
      osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 80020ca:	4b42      	ldr	r3, [pc, #264]	@ (80021d4 <StartMicroAutoware+0x654>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020d2:	4618      	mov	r0, r3
 80020d4:	f00c f9e9 	bl	800e4aa <osMutexAcquire>

      // vehicle_twist_msg_ data

      rosidl_runtime_c__String xFrameId;
      char cFrame[10] = "base_link";
 80020d8:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80020dc:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 80020e0:	4a3e      	ldr	r2, [pc, #248]	@ (80021dc <StartMicroAutoware+0x65c>)
 80020e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80020e4:	c303      	stmia	r3!, {r0, r1}
 80020e6:	801a      	strh	r2, [r3, #0]
      xFrameId.data = cFrame;
 80020e8:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80020ec:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80020f0:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 80020f4:	601a      	str	r2, [r3, #0]
      xFrameId.size = 9;
 80020f6:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80020fa:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80020fe:	2209      	movs	r2, #9
 8002100:	605a      	str	r2, [r3, #4]
      xFrameId.capacity = 9;
 8002102:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8002106:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 800210a:	2209      	movs	r2, #9
 800210c:	609a      	str	r2, [r3, #8]

      vehicle_twist_msg_.header.stamp = clock_msg_.clock;
 800210e:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8002112:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002116:	461a      	mov	r2, r3
 8002118:	f507 7335 	add.w	r3, r7, #724	@ 0x2d4
 800211c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002120:	e882 0003 	stmia.w	r2, {r0, r1}
      vehicle_twist_msg_.header.frame_id = xFrameId;
 8002124:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8002128:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800212c:	f507 724c 	add.w	r2, r7, #816	@ 0x330
 8002130:	f5a2 7224 	sub.w	r2, r2, #656	@ 0x290
 8002134:	3308      	adds	r3, #8
 8002136:	ca07      	ldmia	r2, {r0, r1, r2}
 8002138:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      vehicle_twist_msg_.heading_rate = xControlSignal.fHeadingRate;
 800213c:	4b28      	ldr	r3, [pc, #160]	@ (80021e0 <StartMicroAutoware+0x660>)
 800213e:	69da      	ldr	r2, [r3, #28]
 8002140:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8002144:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002148:	61da      	str	r2, [r3, #28]
      vehicle_twist_msg_.lateral_velocity = xControlSignal.fLatSpeed;
 800214a:	4b25      	ldr	r3, [pc, #148]	@ (80021e0 <StartMicroAutoware+0x660>)
 800214c:	699a      	ldr	r2, [r3, #24]
 800214e:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8002152:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002156:	619a      	str	r2, [r3, #24]
      vehicle_twist_msg_.longitudinal_velocity = xControlSignal.fLongSpeed;
 8002158:	4b21      	ldr	r3, [pc, #132]	@ (80021e0 <StartMicroAutoware+0x660>)
 800215a:	695a      	ldr	r2, [r3, #20]
 800215c:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8002160:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002164:	615a      	str	r2, [r3, #20]

      // steering_status_msg_ data
      steering_status_msg_.stamp = clock_msg_.clock;
 8002166:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800216a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800216e:	461a      	mov	r2, r3
 8002170:	f507 7335 	add.w	r3, r7, #724	@ 0x2d4
 8002174:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002178:	e882 0003 	stmia.w	r2, {r0, r1}
      steering_status_msg_.steering_tire_angle = xControlSignal.fSteeringStatus;
 800217c:	4b18      	ldr	r3, [pc, #96]	@ (80021e0 <StartMicroAutoware+0x660>)
 800217e:	6a1a      	ldr	r2, [r3, #32]
 8002180:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8002184:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002188:	609a      	str	r2, [r3, #8]

      osMutexRelease(MutexControlSignalHandle);
 800218a:	4b12      	ldr	r3, [pc, #72]	@ (80021d4 <StartMicroAutoware+0x654>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f00c f9d6 	bl	800e540 <osMutexRelease>

      // Publishing in Autoware topics
      rcl_publish(&vehicle_twist_pub_, &vehicle_twist_msg_, NULL);
 8002194:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 8002198:	f507 733f 	add.w	r3, r7, #764	@ 0x2fc
 800219c:	2200      	movs	r2, #0
 800219e:	4618      	mov	r0, r3
 80021a0:	f012 f924 	bl	80143ec <rcl_publish>
      rcl_publish(&steering_status_pub_, &steering_status_msg_, NULL);
 80021a4:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 80021a8:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80021ac:	2200      	movs	r2, #0
 80021ae:	4618      	mov	r0, r3
 80021b0:	f012 f91c 	bl	80143ec <rcl_publish>
      // Reseting subscribers flags
      ucSubscribersRecieved = 0;
 80021b4:	4b04      	ldr	r3, [pc, #16]	@ (80021c8 <StartMicroAutoware+0x648>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	701a      	strb	r2, [r3, #0]
    rmw_uros_sync_session(TIMEOUT_TS_SYNC);
 80021ba:	e6e5      	b.n	8001f88 <StartMicroAutoware+0x408>
 80021bc:	f3af 8000 	nop.w
 80021c0:	33333333 	.word	0x33333333
 80021c4:	3ff33333 	.word	0x3ff33333
 80021c8:	240329ea 	.word	0x240329ea
 80021cc:	24032974 	.word	0x24032974
 80021d0:	24032988 	.word	0x24032988
 80021d4:	24032970 	.word	0x24032970
 80021d8:	24032968 	.word	0x24032968
 80021dc:	080233fc 	.word	0x080233fc
 80021e0:	240329a0 	.word	0x240329a0
 80021e4:	0bebc200 	.word	0x0bebc200
 80021e8:	00000000 	.word	0x00000000

080021ec <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80021f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002228 <microros_allocate+0x3c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	461a      	mov	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4413      	add	r3, r2
 8002200:	461a      	mov	r2, r3
 8002202:	4b09      	ldr	r3, [pc, #36]	@ (8002228 <microros_allocate+0x3c>)
 8002204:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002206:	4b09      	ldr	r3, [pc, #36]	@ (800222c <microros_allocate+0x40>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	461a      	mov	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4413      	add	r3, r2
 8002210:	461a      	mov	r2, r3
 8002212:	4b06      	ldr	r3, [pc, #24]	@ (800222c <microros_allocate+0x40>)
 8002214:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7fe fbc6 	bl	80009a8 <pvPortMallocMicroROS>
 800221c:	4603      	mov	r3, r0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	240329ec 	.word	0x240329ec
 800222c:	240329f0 	.word	0x240329f0

08002230 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00c      	beq.n	800225a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7fe fcd5 	bl	8000bf0 <getBlockSize>
 8002246:	4603      	mov	r3, r0
 8002248:	4a06      	ldr	r2, [pc, #24]	@ (8002264 <microros_deallocate+0x34>)
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	461a      	mov	r2, r3
 8002250:	4b04      	ldr	r3, [pc, #16]	@ (8002264 <microros_deallocate+0x34>)
 8002252:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7fe fc6f 	bl	8000b38 <vPortFreeMicroROS>
  }
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	240329f0 	.word	0x240329f0

08002268 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002274:	4b15      	ldr	r3, [pc, #84]	@ (80022cc <microros_reallocate+0x64>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	4413      	add	r3, r2
 800227e:	461a      	mov	r2, r3
 8002280:	4b12      	ldr	r3, [pc, #72]	@ (80022cc <microros_reallocate+0x64>)
 8002282:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002284:	4b12      	ldr	r3, [pc, #72]	@ (80022d0 <microros_reallocate+0x68>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	461a      	mov	r2, r3
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	4413      	add	r3, r2
 800228e:	461a      	mov	r2, r3
 8002290:	4b0f      	ldr	r3, [pc, #60]	@ (80022d0 <microros_reallocate+0x68>)
 8002292:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d104      	bne.n	80022a4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800229a:	68b8      	ldr	r0, [r7, #8]
 800229c:	f7fe fb84 	bl	80009a8 <pvPortMallocMicroROS>
 80022a0:	4603      	mov	r3, r0
 80022a2:	e00e      	b.n	80022c2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f7fe fca3 	bl	8000bf0 <getBlockSize>
 80022aa:	4603      	mov	r3, r0
 80022ac:	4a08      	ldr	r2, [pc, #32]	@ (80022d0 <microros_reallocate+0x68>)
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	461a      	mov	r2, r3
 80022b4:	4b06      	ldr	r3, [pc, #24]	@ (80022d0 <microros_reallocate+0x68>)
 80022b6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80022b8:	68b9      	ldr	r1, [r7, #8]
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f7fe fcb6 	bl	8000c2c <pvPortReallocMicroROS>
 80022c0:	4603      	mov	r3, r0
  }
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	240329ec 	.word	0x240329ec
 80022d0:	240329f0 	.word	0x240329f0

080022d4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	fb02 f303 	mul.w	r3, r2, r3
 80022e8:	4a0c      	ldr	r2, [pc, #48]	@ (800231c <microros_zero_allocate+0x48>)
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	4413      	add	r3, r2
 80022ee:	461a      	mov	r2, r3
 80022f0:	4b0a      	ldr	r3, [pc, #40]	@ (800231c <microros_zero_allocate+0x48>)
 80022f2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	fb02 f303 	mul.w	r3, r2, r3
 80022fc:	4a08      	ldr	r2, [pc, #32]	@ (8002320 <microros_zero_allocate+0x4c>)
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	4413      	add	r3, r2
 8002302:	461a      	mov	r2, r3
 8002304:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <microros_zero_allocate+0x4c>)
 8002306:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f7fe fcbb 	bl	8000c86 <pvPortCallocMicroROS>
 8002310:	4603      	mov	r3, r0
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	240329ec 	.word	0x240329ec
 8002320:	240329f0 	.word	0x240329f0
 8002324:	00000000 	.word	0x00000000

08002328 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002328:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800233a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800233e:	a320      	add	r3, pc, #128	@ (adr r3, 80023c0 <UTILS_NanosecondsToTimespec+0x98>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	f7fe f834 	bl	80003b0 <__aeabi_ldivmod>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002352:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002356:	a31a      	add	r3, pc, #104	@ (adr r3, 80023c0 <UTILS_NanosecondsToTimespec+0x98>)
 8002358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235c:	f7fe f828 	bl	80003b0 <__aeabi_ldivmod>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	da20      	bge.n	80023ae <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	4a11      	ldr	r2, [pc, #68]	@ (80023b8 <UTILS_NanosecondsToTimespec+0x90>)
 8002372:	fb82 1203 	smull	r1, r2, r2, r3
 8002376:	1712      	asrs	r2, r2, #28
 8002378:	17db      	asrs	r3, r3, #31
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	3301      	adds	r3, #1
 800237e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002386:	6979      	ldr	r1, [r7, #20]
 8002388:	17c8      	asrs	r0, r1, #31
 800238a:	460c      	mov	r4, r1
 800238c:	4605      	mov	r5, r0
 800238e:	ebb2 0804 	subs.w	r8, r2, r4
 8002392:	eb63 0905 	sbc.w	r9, r3, r5
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	4906      	ldr	r1, [pc, #24]	@ (80023bc <UTILS_NanosecondsToTimespec+0x94>)
 80023a4:	fb01 f303 	mul.w	r3, r1, r3
 80023a8:	441a      	add	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	609a      	str	r2, [r3, #8]
    }
}
 80023ae:	bf00      	nop
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80023b8:	44b82fa1 	.word	0x44b82fa1
 80023bc:	3b9aca00 	.word	0x3b9aca00
 80023c0:	3b9aca00 	.word	0x3b9aca00
 80023c4:	00000000 	.word	0x00000000

080023c8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80023c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023cc:	b08e      	sub	sp, #56	@ 0x38
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80023d2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80023d4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80023d8:	2300      	movs	r3, #0
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	f04f 0300 	mov.w	r3, #0
 80023e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80023ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023ee:	4618      	mov	r0, r3
 80023f0:	f00d fdea 	bl	800ffc8 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80023f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f6:	17da      	asrs	r2, r3, #31
 80023f8:	61bb      	str	r3, [r7, #24]
 80023fa:	61fa      	str	r2, [r7, #28]
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	69b9      	ldr	r1, [r7, #24]
 8002406:	000b      	movs	r3, r1
 8002408:	2200      	movs	r2, #0
 800240a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800240e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002410:	2200      	movs	r2, #0
 8002412:	461c      	mov	r4, r3
 8002414:	4615      	mov	r5, r2
 8002416:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800241a:	1911      	adds	r1, r2, r4
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	416b      	adcs	r3, r5
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002426:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800242a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	f04f 0400 	mov.w	r4, #0
 8002436:	f04f 0500 	mov.w	r5, #0
 800243a:	015d      	lsls	r5, r3, #5
 800243c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002440:	0154      	lsls	r4, r2, #5
 8002442:	4622      	mov	r2, r4
 8002444:	462b      	mov	r3, r5
 8002446:	ebb2 0800 	subs.w	r8, r2, r0
 800244a:	eb63 0901 	sbc.w	r9, r3, r1
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800245a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800245e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002462:	4690      	mov	r8, r2
 8002464:	4699      	mov	r9, r3
 8002466:	eb18 0a00 	adds.w	sl, r8, r0
 800246a:	eb49 0b01 	adc.w	fp, r9, r1
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800247a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800247e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002482:	ebb2 040a 	subs.w	r4, r2, sl
 8002486:	603c      	str	r4, [r7, #0]
 8002488:	eb63 030b 	sbc.w	r3, r3, fp
 800248c:	607b      	str	r3, [r7, #4]
 800248e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002492:	4623      	mov	r3, r4
 8002494:	181b      	adds	r3, r3, r0
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	462b      	mov	r3, r5
 800249a:	eb41 0303 	adc.w	r3, r1, r3
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	6a3a      	ldr	r2, [r7, #32]
 80024a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024a6:	f7ff ff3f 	bl	8002328 <UTILS_NanosecondsToTimespec>

    return 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	4618      	mov	r0, r3
 80024ae:	3738      	adds	r7, #56	@ 0x38
 80024b0:	46bd      	mov	sp, r7
 80024b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080024b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024be:	4b0c      	ldr	r3, [pc, #48]	@ (80024f0 <HAL_MspInit+0x38>)
 80024c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024c4:	4a0a      	ldr	r2, [pc, #40]	@ (80024f0 <HAL_MspInit+0x38>)
 80024c6:	f043 0302 	orr.w	r3, r3, #2
 80024ca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80024ce:	4b08      	ldr	r3, [pc, #32]	@ (80024f0 <HAL_MspInit+0x38>)
 80024d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	607b      	str	r3, [r7, #4]
 80024da:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024dc:	2200      	movs	r2, #0
 80024de:	210f      	movs	r1, #15
 80024e0:	f06f 0001 	mvn.w	r0, #1
 80024e4:	f002 fbda 	bl	8004c9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	58024400 	.word	0x58024400

080024f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b090      	sub	sp, #64	@ 0x40
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b0f      	cmp	r3, #15
 8002500:	d827      	bhi.n	8002552 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002502:	2200      	movs	r2, #0
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	2036      	movs	r0, #54	@ 0x36
 8002508:	f002 fbc8 	bl	8004c9c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800250c:	2036      	movs	r0, #54	@ 0x36
 800250e:	f002 fbdf 	bl	8004cd0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002512:	4a29      	ldr	r2, [pc, #164]	@ (80025b8 <HAL_InitTick+0xc4>)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002518:	4b28      	ldr	r3, [pc, #160]	@ (80025bc <HAL_InitTick+0xc8>)
 800251a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800251e:	4a27      	ldr	r2, [pc, #156]	@ (80025bc <HAL_InitTick+0xc8>)
 8002520:	f043 0310 	orr.w	r3, r3, #16
 8002524:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002528:	4b24      	ldr	r3, [pc, #144]	@ (80025bc <HAL_InitTick+0xc8>)
 800252a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800252e:	f003 0310 	and.w	r3, r3, #16
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002536:	f107 0210 	add.w	r2, r7, #16
 800253a:	f107 0314 	add.w	r3, r7, #20
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f006 fc1f 	bl	8008d84 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002548:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800254a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800254c:	2b00      	cmp	r3, #0
 800254e:	d106      	bne.n	800255e <HAL_InitTick+0x6a>
 8002550:	e001      	b.n	8002556 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e02b      	b.n	80025ae <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002556:	f006 fbe9 	bl	8008d2c <HAL_RCC_GetPCLK1Freq>
 800255a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800255c:	e004      	b.n	8002568 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800255e:	f006 fbe5 	bl	8008d2c <HAL_RCC_GetPCLK1Freq>
 8002562:	4603      	mov	r3, r0
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800256a:	4a15      	ldr	r2, [pc, #84]	@ (80025c0 <HAL_InitTick+0xcc>)
 800256c:	fba2 2303 	umull	r2, r3, r2, r3
 8002570:	0c9b      	lsrs	r3, r3, #18
 8002572:	3b01      	subs	r3, #1
 8002574:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002576:	4b13      	ldr	r3, [pc, #76]	@ (80025c4 <HAL_InitTick+0xd0>)
 8002578:	4a13      	ldr	r2, [pc, #76]	@ (80025c8 <HAL_InitTick+0xd4>)
 800257a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800257c:	4b11      	ldr	r3, [pc, #68]	@ (80025c4 <HAL_InitTick+0xd0>)
 800257e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002582:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002584:	4a0f      	ldr	r2, [pc, #60]	@ (80025c4 <HAL_InitTick+0xd0>)
 8002586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002588:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800258a:	4b0e      	ldr	r3, [pc, #56]	@ (80025c4 <HAL_InitTick+0xd0>)
 800258c:	2200      	movs	r2, #0
 800258e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002590:	4b0c      	ldr	r3, [pc, #48]	@ (80025c4 <HAL_InitTick+0xd0>)
 8002592:	2200      	movs	r2, #0
 8002594:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002596:	480b      	ldr	r0, [pc, #44]	@ (80025c4 <HAL_InitTick+0xd0>)
 8002598:	f009 f934 	bl	800b804 <HAL_TIM_Base_Init>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d104      	bne.n	80025ac <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80025a2:	4808      	ldr	r0, [pc, #32]	@ (80025c4 <HAL_InitTick+0xd0>)
 80025a4:	f009 f990 	bl	800b8c8 <HAL_TIM_Base_Start_IT>
 80025a8:	4603      	mov	r3, r0
 80025aa:	e000      	b.n	80025ae <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3740      	adds	r7, #64	@ 0x40
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	2400000c 	.word	0x2400000c
 80025bc:	58024400 	.word	0x58024400
 80025c0:	431bde83 	.word	0x431bde83
 80025c4:	240329f4 	.word	0x240329f4
 80025c8:	40001000 	.word	0x40001000

080025cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025d0:	bf00      	nop
 80025d2:	e7fd      	b.n	80025d0 <NMI_Handler+0x4>

080025d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025d8:	bf00      	nop
 80025da:	e7fd      	b.n	80025d8 <HardFault_Handler+0x4>

080025dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025e0:	bf00      	nop
 80025e2:	e7fd      	b.n	80025e0 <MemManage_Handler+0x4>

080025e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025e8:	bf00      	nop
 80025ea:	e7fd      	b.n	80025e8 <BusFault_Handler+0x4>

080025ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025f0:	bf00      	nop
 80025f2:	e7fd      	b.n	80025f0 <UsageFault_Handler+0x4>

080025f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002608:	4802      	ldr	r0, [pc, #8]	@ (8002614 <DMA1_Stream0_IRQHandler+0x10>)
 800260a:	f003 fe99 	bl	8006340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	24032c60 	.word	0x24032c60

08002618 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800261c:	4802      	ldr	r0, [pc, #8]	@ (8002628 <DMA1_Stream1_IRQHandler+0x10>)
 800261e:	f003 fe8f 	bl	8006340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	24032cd8 	.word	0x24032cd8

0800262c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002630:	4802      	ldr	r0, [pc, #8]	@ (800263c <USART2_IRQHandler+0x10>)
 8002632:	f009 fd67 	bl	800c104 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	24032a48 	.word	0x24032a48

08002640 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002644:	4802      	ldr	r0, [pc, #8]	@ (8002650 <USART3_IRQHandler+0x10>)
 8002646:	f009 fd5d 	bl	800c104 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	24032adc 	.word	0x24032adc

08002654 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JoySW_Pin);
 8002658:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800265c:	f005 fb57 	bl	8007d0e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}

08002664 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002668:	4802      	ldr	r0, [pc, #8]	@ (8002674 <TIM6_DAC_IRQHandler+0x10>)
 800266a:	f009 f9a5 	bl	800b9b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	240329f4 	.word	0x240329f4

08002678 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800267c:	4802      	ldr	r0, [pc, #8]	@ (8002688 <DMA2_Stream1_IRQHandler+0x10>)
 800267e:	f003 fe5f 	bl	8006340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	24032b70 	.word	0x24032b70

0800268c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002690:	4802      	ldr	r0, [pc, #8]	@ (800269c <DMA2_Stream2_IRQHandler+0x10>)
 8002692:	f003 fe55 	bl	8006340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	24032be8 	.word	0x24032be8

080026a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return 1;
 80026a4:	2301      	movs	r3, #1
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <_kill>:

int _kill(int pid, int sig)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026ba:	f01f fee3 	bl	8022484 <__errno>
 80026be:	4603      	mov	r3, r0
 80026c0:	2216      	movs	r2, #22
 80026c2:	601a      	str	r2, [r3, #0]
  return -1;
 80026c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <_exit>:

void _exit (int status)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff ffe7 	bl	80026b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026e2:	bf00      	nop
 80026e4:	e7fd      	b.n	80026e2 <_exit+0x12>

080026e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b086      	sub	sp, #24
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
 80026f6:	e00a      	b.n	800270e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026f8:	f3af 8000 	nop.w
 80026fc:	4601      	mov	r1, r0
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	60ba      	str	r2, [r7, #8]
 8002704:	b2ca      	uxtb	r2, r1
 8002706:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	3301      	adds	r3, #1
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	429a      	cmp	r2, r3
 8002714:	dbf0      	blt.n	80026f8 <_read+0x12>
  }

  return len;
 8002716:	687b      	ldr	r3, [r7, #4]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	e009      	b.n	8002746 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	60ba      	str	r2, [r7, #8]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	3301      	adds	r3, #1
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	429a      	cmp	r2, r3
 800274c:	dbf1      	blt.n	8002732 <_write+0x12>
  }
  return len;
 800274e:	687b      	ldr	r3, [r7, #4]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <_close>:

int _close(int file)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002760:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002764:	4618      	mov	r0, r3
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002780:	605a      	str	r2, [r3, #4]
  return 0;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <_isatty>:

int _isatty(int file)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002798:	2301      	movs	r3, #1
}
 800279a:	4618      	mov	r0, r3
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b085      	sub	sp, #20
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027c8:	4a14      	ldr	r2, [pc, #80]	@ (800281c <_sbrk+0x5c>)
 80027ca:	4b15      	ldr	r3, [pc, #84]	@ (8002820 <_sbrk+0x60>)
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027d4:	4b13      	ldr	r3, [pc, #76]	@ (8002824 <_sbrk+0x64>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d102      	bne.n	80027e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027dc:	4b11      	ldr	r3, [pc, #68]	@ (8002824 <_sbrk+0x64>)
 80027de:	4a12      	ldr	r2, [pc, #72]	@ (8002828 <_sbrk+0x68>)
 80027e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027e2:	4b10      	ldr	r3, [pc, #64]	@ (8002824 <_sbrk+0x64>)
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4413      	add	r3, r2
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d207      	bcs.n	8002800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027f0:	f01f fe48 	bl	8022484 <__errno>
 80027f4:	4603      	mov	r3, r0
 80027f6:	220c      	movs	r2, #12
 80027f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027fe:	e009      	b.n	8002814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002800:	4b08      	ldr	r3, [pc, #32]	@ (8002824 <_sbrk+0x64>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002806:	4b07      	ldr	r3, [pc, #28]	@ (8002824 <_sbrk+0x64>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	4a05      	ldr	r2, [pc, #20]	@ (8002824 <_sbrk+0x64>)
 8002810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002812:	68fb      	ldr	r3, [r7, #12]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	24080000 	.word	0x24080000
 8002820:	00000400 	.word	0x00000400
 8002824:	24032a44 	.word	0x24032a44
 8002828:	240696f0 	.word	0x240696f0

0800282c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002830:	4b37      	ldr	r3, [pc, #220]	@ (8002910 <SystemInit+0xe4>)
 8002832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002836:	4a36      	ldr	r2, [pc, #216]	@ (8002910 <SystemInit+0xe4>)
 8002838:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800283c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002840:	4b34      	ldr	r3, [pc, #208]	@ (8002914 <SystemInit+0xe8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 030f 	and.w	r3, r3, #15
 8002848:	2b06      	cmp	r3, #6
 800284a:	d807      	bhi.n	800285c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800284c:	4b31      	ldr	r3, [pc, #196]	@ (8002914 <SystemInit+0xe8>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f023 030f 	bic.w	r3, r3, #15
 8002854:	4a2f      	ldr	r2, [pc, #188]	@ (8002914 <SystemInit+0xe8>)
 8002856:	f043 0307 	orr.w	r3, r3, #7
 800285a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800285c:	4b2e      	ldr	r3, [pc, #184]	@ (8002918 <SystemInit+0xec>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a2d      	ldr	r2, [pc, #180]	@ (8002918 <SystemInit+0xec>)
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002868:	4b2b      	ldr	r3, [pc, #172]	@ (8002918 <SystemInit+0xec>)
 800286a:	2200      	movs	r2, #0
 800286c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800286e:	4b2a      	ldr	r3, [pc, #168]	@ (8002918 <SystemInit+0xec>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	4929      	ldr	r1, [pc, #164]	@ (8002918 <SystemInit+0xec>)
 8002874:	4b29      	ldr	r3, [pc, #164]	@ (800291c <SystemInit+0xf0>)
 8002876:	4013      	ands	r3, r2
 8002878:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800287a:	4b26      	ldr	r3, [pc, #152]	@ (8002914 <SystemInit+0xe8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b00      	cmp	r3, #0
 8002884:	d007      	beq.n	8002896 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002886:	4b23      	ldr	r3, [pc, #140]	@ (8002914 <SystemInit+0xe8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 030f 	bic.w	r3, r3, #15
 800288e:	4a21      	ldr	r2, [pc, #132]	@ (8002914 <SystemInit+0xe8>)
 8002890:	f043 0307 	orr.w	r3, r3, #7
 8002894:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002896:	4b20      	ldr	r3, [pc, #128]	@ (8002918 <SystemInit+0xec>)
 8002898:	2200      	movs	r2, #0
 800289a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800289c:	4b1e      	ldr	r3, [pc, #120]	@ (8002918 <SystemInit+0xec>)
 800289e:	2200      	movs	r2, #0
 80028a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80028a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002918 <SystemInit+0xec>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80028a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002918 <SystemInit+0xec>)
 80028aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002920 <SystemInit+0xf4>)
 80028ac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80028ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002918 <SystemInit+0xec>)
 80028b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002924 <SystemInit+0xf8>)
 80028b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80028b4:	4b18      	ldr	r3, [pc, #96]	@ (8002918 <SystemInit+0xec>)
 80028b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002928 <SystemInit+0xfc>)
 80028b8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80028ba:	4b17      	ldr	r3, [pc, #92]	@ (8002918 <SystemInit+0xec>)
 80028bc:	2200      	movs	r2, #0
 80028be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80028c0:	4b15      	ldr	r3, [pc, #84]	@ (8002918 <SystemInit+0xec>)
 80028c2:	4a19      	ldr	r2, [pc, #100]	@ (8002928 <SystemInit+0xfc>)
 80028c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80028c6:	4b14      	ldr	r3, [pc, #80]	@ (8002918 <SystemInit+0xec>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80028cc:	4b12      	ldr	r3, [pc, #72]	@ (8002918 <SystemInit+0xec>)
 80028ce:	4a16      	ldr	r2, [pc, #88]	@ (8002928 <SystemInit+0xfc>)
 80028d0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80028d2:	4b11      	ldr	r3, [pc, #68]	@ (8002918 <SystemInit+0xec>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002918 <SystemInit+0xec>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a0e      	ldr	r2, [pc, #56]	@ (8002918 <SystemInit+0xec>)
 80028de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80028e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002918 <SystemInit+0xec>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80028ea:	4b10      	ldr	r3, [pc, #64]	@ (800292c <SystemInit+0x100>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	4b10      	ldr	r3, [pc, #64]	@ (8002930 <SystemInit+0x104>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028f6:	d202      	bcs.n	80028fe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80028f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002934 <SystemInit+0x108>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80028fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002938 <SystemInit+0x10c>)
 8002900:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002904:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002906:	bf00      	nop
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000ed00 	.word	0xe000ed00
 8002914:	52002000 	.word	0x52002000
 8002918:	58024400 	.word	0x58024400
 800291c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002920:	02020200 	.word	0x02020200
 8002924:	01ff0000 	.word	0x01ff0000
 8002928:	01010280 	.word	0x01010280
 800292c:	5c001000 	.word	0x5c001000
 8002930:	ffff0000 	.word	0xffff0000
 8002934:	51008108 	.word	0x51008108
 8002938:	52004000 	.word	0x52004000

0800293c <StartTaskControle>:
  * @brief  TaskControle task function.
  * @param  argument: not used.
  * @retval None
  */
void StartTaskControle(void * argument)
{
 800293c:	b590      	push	{r4, r7, lr}
 800293e:	b099      	sub	sp, #100	@ 0x64
 8002940:	af04      	add	r7, sp, #16
 8002942:	6078      	str	r0, [r7, #4]
  // Local variables -- START
  unsigned char ucControlMode;
  unsigned char ucFlagFullMsg;

  // Joystick calibration
  unsigned int uiX0   = 33970;
 8002944:	f248 43b2 	movw	r3, #33970	@ 0x84b2
 8002948:	64bb      	str	r3, [r7, #72]	@ 0x48
  unsigned int uiXMin = 1057;
 800294a:	f240 4321 	movw	r3, #1057	@ 0x421
 800294e:	647b      	str	r3, [r7, #68]	@ 0x44
  unsigned int uiXMax = 65535;
 8002950:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002954:	643b      	str	r3, [r7, #64]	@ 0x40
  unsigned int uiY0   = 33580;
 8002956:	f248 332c 	movw	r3, #33580	@ 0x832c
 800295a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  unsigned int uiYMin = 1062;
 800295c:	f240 4326 	movw	r3, #1062	@ 0x426
 8002960:	63bb      	str	r3, [r7, #56]	@ 0x38
  unsigned int uiYMax = 65535;
 8002962:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002966:	637b      	str	r3, [r7, #52]	@ 0x34

  // Return flags
  unsigned int uiFlags = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	633b      	str	r3, [r7, #48]	@ 0x30
  unsigned char ucTxMsgToCarla[MSG_TO_CARLA_SIZE];

  // Local variables -- END

  // Initialization of DMA RX in circular mode
  HAL_UART_Receive_DMA(&huart2, ucDmaBuffer, UART2_DMA_BUFFER_SIZE);
 800296c:	2216      	movs	r2, #22
 800296e:	498e      	ldr	r1, [pc, #568]	@ (8002ba8 <StartTaskControle+0x26c>)
 8002970:	488e      	ldr	r0, [pc, #568]	@ (8002bac <StartTaskControle+0x270>)
 8002972:	f009 fae5 	bl	800bf40 <HAL_UART_Receive_DMA>

  // Initialization of operation mode
  ucControlMode = MANUAL; // ! MANUAL to test communication with carla
 8002976:	2304      	movs	r3, #4
 8002978:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 800297c:	4b8c      	ldr	r3, [pc, #560]	@ (8002bb0 <StartTaskControle+0x274>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2110      	movs	r1, #16
 8002982:	4618      	mov	r0, r3
 8002984:	f00b fc00 	bl	800e188 <osThreadFlagsSet>

  
  //uiFlags = osThreadFlagsGet();
  //uiFlags = osThreadFlagsWait(MICRO_ROS_AGENT_ONLINE_FLAG, osFlagsWaitAny, 1000 * 20); // Wait 20 seconds for uROS init

  if(osFlagsErrorTimeout == uiFlags)
 8002988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800298a:	f113 0f02 	cmn.w	r3, #2
 800298e:	d102      	bne.n	8002996 <StartTaskControle+0x5a>
  {
    ucControlMode = MANUAL;
 8002990:	2304      	movs	r3, #4
 8002992:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  // Task loop
  for(;;)
  {

    // Looking fot operation mode change by Autoware -- START
	  uiFlags = osThreadFlagsGet();
 8002996:	f00b fc45 	bl	800e224 <osThreadFlagsGet>
 800299a:	6338      	str	r0, [r7, #48]	@ 0x30
    uiFlags = osThreadFlagsWait(TO_AUTOWARE_MODE_FLAG | TO_MANUAL_MODE_FLAG, osFlagsWaitAny, 0);
 800299c:	2200      	movs	r2, #0
 800299e:	2100      	movs	r1, #0
 80029a0:	2011      	movs	r0, #17
 80029a2:	f00b fc60 	bl	800e266 <osThreadFlagsWait>
 80029a6:	6338      	str	r0, [r7, #48]	@ 0x30

    if(TO_AUTOWARE_MODE_FLAG == uiFlags)
 80029a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d103      	bne.n	80029b6 <StartTaskControle+0x7a>
    {
      ucControlMode = AUTOWARE;
 80029ae:	2301      	movs	r3, #1
 80029b0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80029b4:	e00c      	b.n	80029d0 <StartTaskControle+0x94>
    }
    else if(TO_MANUAL_MODE_FLAG == uiFlags)
 80029b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b8:	2b10      	cmp	r3, #16
 80029ba:	d103      	bne.n	80029c4 <StartTaskControle+0x88>
    {
      ucControlMode = MANUAL;
 80029bc:	2304      	movs	r3, #4
 80029be:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80029c2:	e005      	b.n	80029d0 <StartTaskControle+0x94>
    }
    else if((TO_AUTOWARE_MODE_FLAG | TO_MANUAL_MODE_FLAG) == uiFlags)
 80029c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c6:	2b11      	cmp	r3, #17
 80029c8:	d102      	bne.n	80029d0 <StartTaskControle+0x94>
    {
      ucControlMode = MANUAL;
 80029ca:	2304      	movs	r3, #4
 80029cc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }
    // Looking for operation mode change by Autoware -- END

    // Looking for operation mode change by JoySW -- START
    uiFlags = osThreadFlagsGet();
 80029d0:	f00b fc28 	bl	800e224 <osThreadFlagsGet>
 80029d4:	6338      	str	r0, [r7, #48]	@ 0x30
    uiFlags = osThreadFlagsWait(JOYSW_FLAG, osFlagsWaitAll, 0);
 80029d6:	2200      	movs	r2, #0
 80029d8:	2101      	movs	r1, #1
 80029da:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80029de:	f00b fc42 	bl	800e266 <osThreadFlagsWait>
 80029e2:	6338      	str	r0, [r7, #48]	@ 0x30

    if(JOYSW_FLAG == uiFlags)
 80029e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029ea:	d11a      	bne.n	8002a22 <StartTaskControle+0xe6>
    {
      if(AUTOWARE == ucControlMode)
 80029ec:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d109      	bne.n	8002a08 <StartTaskControle+0xcc>
      {
        ucControlMode = MANUAL;
 80029f4:	2304      	movs	r3, #4
 80029f6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 80029fa:	4b6d      	ldr	r3, [pc, #436]	@ (8002bb0 <StartTaskControle+0x274>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2110      	movs	r1, #16
 8002a00:	4618      	mov	r0, r3
 8002a02:	f00b fbc1 	bl	800e188 <osThreadFlagsSet>
 8002a06:	e00c      	b.n	8002a22 <StartTaskControle+0xe6>
      }
      else if(MANUAL == ucControlMode)
 8002a08:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d108      	bne.n	8002a22 <StartTaskControle+0xe6>
      {
        ucControlMode = AUTOWARE;
 8002a10:	2301      	movs	r3, #1
 8002a12:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        osThreadFlagsSet(TaskMicroAutowaHandle, TO_AUTOWARE_MODE_FLAG);
 8002a16:	4b66      	ldr	r3, [pc, #408]	@ (8002bb0 <StartTaskControle+0x274>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f00b fbb3 	bl	800e188 <osThreadFlagsSet>
      }
    }
    // Looking for operation mode change by JoySW -- END

    // Autonomous mode (AUTOWARE) routine -- START
    if(AUTOWARE == ucControlMode)
 8002a22:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d176      	bne.n	8002b18 <StartTaskControle+0x1dc>
    {
      // Setting driving mode lights
	    vDrivingModeLights(ucControlMode);
 8002a2a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 fc86 	bl	8003340 <vDrivingModeLights>

      // WAIT for flag to sync xControlAction update
  	  uiFlags = osThreadFlagsGet();
 8002a34:	f00b fbf6 	bl	800e224 <osThreadFlagsGet>
 8002a38:	6338      	str	r0, [r7, #48]	@ 0x30
      uiFlags = osThreadFlagsWait(DATA_UPDATED_FLAG, osFlagsWaitAll, TIMEOUT_GET_CONTROL_ACTION);
 8002a3a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002a3e:	2101      	movs	r1, #1
 8002a40:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002a44:	f00b fc0f 	bl	800e266 <osThreadFlagsWait>
 8002a48:	6338      	str	r0, [r7, #48]	@ 0x30

      // Timeout error
      if(osFlagsErrorTimeout == uiFlags)
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4c:	f113 0f02 	cmn.w	r3, #2
 8002a50:	d108      	bne.n	8002a64 <StartTaskControle+0x128>
      {
        ucControlMode = MANUAL;
 8002a52:	2304      	movs	r3, #4
 8002a54:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 8002a58:	4b55      	ldr	r3, [pc, #340]	@ (8002bb0 <StartTaskControle+0x274>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2110      	movs	r1, #16
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f00b fb92 	bl	800e188 <osThreadFlagsSet>
      }

      if(DATA_UPDATED_FLAG == uiFlags)
 8002a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a6a:	d155      	bne.n	8002b18 <StartTaskControle+0x1dc>
      {
        osMutexAcquire(MutexControlActionHandle, osWaitForever);
 8002a6c:	4b51      	ldr	r3, [pc, #324]	@ (8002bb4 <StartTaskControle+0x278>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a74:	4618      	mov	r0, r3
 8002a76:	f00b fd18 	bl	800e4aa <osMutexAcquire>
        vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 8002a7a:	4b4f      	ldr	r3, [pc, #316]	@ (8002bb8 <StartTaskControle+0x27c>)
 8002a7c:	f107 0208 	add.w	r2, r7, #8
 8002a80:	9202      	str	r2, [sp, #8]
 8002a82:	466c      	mov	r4, sp
 8002a84:	f103 0210 	add.w	r2, r3, #16
 8002a88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a8c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002a90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a92:	f000 fbd1 	bl	8003238 <vGetStringFromControlAction>
        osMutexRelease(MutexControlActionHandle);
 8002a96:	4b47      	ldr	r3, [pc, #284]	@ (8002bb4 <StartTaskControle+0x278>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f00b fd50 	bl	800e540 <osMutexRelease>

        // Send cTxMsgToCarla to CARLA
        HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 8002aa0:	f107 0308 	add.w	r3, r7, #8
 8002aa4:	221e      	movs	r2, #30
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4840      	ldr	r0, [pc, #256]	@ (8002bac <StartTaskControle+0x270>)
 8002aaa:	f009 f9c9 	bl	800be40 <HAL_UART_Transmit_DMA>

        // Wait CARLA full msg xVehicleStatusRx
        uiFlags = osThreadFlagsGet();
 8002aae:	f00b fbb9 	bl	800e224 <osThreadFlagsGet>
 8002ab2:	6338      	str	r0, [r7, #48]	@ 0x30
        uiFlags = osThreadFlagsWait(UART_NEW_DATA_FLAG, osFlagsWaitAll, TIMEOUT_GET_CARLA_RX);
 8002ab4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002ab8:	2101      	movs	r1, #1
 8002aba:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8002abe:	f00b fbd2 	bl	800e266 <osThreadFlagsWait>
 8002ac2:	6338      	str	r0, [r7, #48]	@ 0x30

        // Timeout error
        if(osFlagsErrorTimeout == uiFlags)
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac6:	f113 0f02 	cmn.w	r3, #2
 8002aca:	d102      	bne.n	8002ad2 <StartTaskControle+0x196>
        {
          ucControlMode = EMERGENCY;
 8002acc:	2300      	movs	r3, #0
 8002ace:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        }

        osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 8002ad2:	4b3a      	ldr	r3, [pc, #232]	@ (8002bbc <StartTaskControle+0x280>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ada:	4618      	mov	r0, r3
 8002adc:	f00b fce5 	bl	800e4aa <osMutexAcquire>

        xControlSignal.fLongSpeed = xVehicleStatus.xLongSpeed.fFloat;
 8002ae0:	4b37      	ldr	r3, [pc, #220]	@ (8002bc0 <StartTaskControle+0x284>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a37      	ldr	r2, [pc, #220]	@ (8002bc4 <StartTaskControle+0x288>)
 8002ae6:	6153      	str	r3, [r2, #20]
        xControlSignal.fLatSpeed = xVehicleStatus.xLatSpeed.fFloat;
 8002ae8:	4b35      	ldr	r3, [pc, #212]	@ (8002bc0 <StartTaskControle+0x284>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	4a35      	ldr	r2, [pc, #212]	@ (8002bc4 <StartTaskControle+0x288>)
 8002aee:	6193      	str	r3, [r2, #24]
        xControlSignal.fHeadingRate = xVehicleStatus.xHeadingRate.fFloat;
 8002af0:	4b33      	ldr	r3, [pc, #204]	@ (8002bc0 <StartTaskControle+0x284>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	4a33      	ldr	r2, [pc, #204]	@ (8002bc4 <StartTaskControle+0x288>)
 8002af6:	61d3      	str	r3, [r2, #28]
        xControlSignal.fSteeringStatus = xVehicleStatus.xSteeringStatus.fFloat;
 8002af8:	4b31      	ldr	r3, [pc, #196]	@ (8002bc0 <StartTaskControle+0x284>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4a31      	ldr	r2, [pc, #196]	@ (8002bc4 <StartTaskControle+0x288>)
 8002afe:	6213      	str	r3, [r2, #32]

        osMutexRelease(MutexControlSignalHandle);
 8002b00:	4b2e      	ldr	r3, [pc, #184]	@ (8002bbc <StartTaskControle+0x280>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f00b fd1b 	bl	800e540 <osMutexRelease>

        osThreadFlagsSet(TaskMicroAutowaHandle, DATA_UPDATED_FLAG);
 8002b0a:	4b29      	ldr	r3, [pc, #164]	@ (8002bb0 <StartTaskControle+0x274>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b12:	4618      	mov	r0, r3
 8002b14:	f00b fb38 	bl	800e188 <osThreadFlagsSet>
    }
    // Autonomous mode (AUTOWARE) routine -- END


    // Manual mode (MANUAL) routine -- START
    if(MANUAL == ucControlMode)
 8002b18:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	f040 80ae 	bne.w	8002c7e <StartTaskControle+0x342>
    {
      // Setting driving mode lights
  	  vDrivingModeLights(ucControlMode);
 8002b22:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 fc0a 	bl	8003340 <vDrivingModeLights>

      // Joystick read block -- START
      fJoyXAxis = fGetJoyPostition((unsigned int) uiADC1Buffer[0], uiX0, uiXMax, uiXMin);
 8002b2c:	4b26      	ldr	r3, [pc, #152]	@ (8002bc8 <StartTaskControle+0x28c>)
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b34:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002b36:	f000 fb4b 	bl	80031d0 <fGetJoyPostition>
 8002b3a:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
      fJoyYAxis = fGetJoyPostition((unsigned int) uiADC1Buffer[1], uiY0, uiYMax, uiYMin);
 8002b3e:	4b22      	ldr	r3, [pc, #136]	@ (8002bc8 <StartTaskControle+0x28c>)
 8002b40:	6858      	ldr	r0, [r3, #4]
 8002b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b48:	f000 fb42 	bl	80031d0 <fGetJoyPostition>
 8002b4c:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28

      // Assembling xControlAction
      osMutexAcquire(MutexControlActionHandle, osWaitForever);
 8002b50:	4b18      	ldr	r3, [pc, #96]	@ (8002bb4 <StartTaskControle+0x278>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f00b fca6 	bl	800e4aa <osMutexAcquire>
      xControlAction.xSteeringAngle.fFloat = -fJoyXAxis*MAX_STEERING_ANGLE;
 8002b5e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002b62:	eef1 7a67 	vneg.f32	s15, s15
 8002b66:	4b14      	ldr	r3, [pc, #80]	@ (8002bb8 <StartTaskControle+0x27c>)
 8002b68:	edc3 7a00 	vstr	s15, [r3]
      xControlAction.xSteeringVelocity.fFloat = 0;
 8002b6c:	4b12      	ldr	r3, [pc, #72]	@ (8002bb8 <StartTaskControle+0x27c>)
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	605a      	str	r2, [r3, #4]
      xControlAction.xSpeed.fFloat = (fJoyYAxis > 0) ? fJoyYAxis*MAX_TROTTLE : 0.0;
 8002b74:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002b78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b80:	dd01      	ble.n	8002b86 <StartTaskControle+0x24a>
 8002b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b84:	e001      	b.n	8002b8a <StartTaskControle+0x24e>
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	4a0b      	ldr	r2, [pc, #44]	@ (8002bb8 <StartTaskControle+0x27c>)
 8002b8c:	6093      	str	r3, [r2, #8]
      xControlAction.xAcceleration.fFloat = (fJoyYAxis < 0) ? -fJoyYAxis*MAX_BRAKE : 0.0;
 8002b8e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002b92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9a:	d519      	bpl.n	8002bd0 <StartTaskControle+0x294>
 8002b9c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002ba0:	eef1 7a67 	vneg.f32	s15, s15
 8002ba4:	e016      	b.n	8002bd4 <StartTaskControle+0x298>
 8002ba6:	bf00      	nop
 8002ba8:	240329d4 	.word	0x240329d4
 8002bac:	24032a48 	.word	0x24032a48
 8002bb0:	2403296c 	.word	0x2403296c
 8002bb4:	24032974 	.word	0x24032974
 8002bb8:	24032988 	.word	0x24032988
 8002bbc:	24032970 	.word	0x24032970
 8002bc0:	240329c4 	.word	0x240329c4
 8002bc4:	240329a0 	.word	0x240329a0
 8002bc8:	2403297c 	.word	0x2403297c
 8002bcc:	00000000 	.word	0x00000000
 8002bd0:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 8002bcc <StartTaskControle+0x290>
 8002bd4:	4b4b      	ldr	r3, [pc, #300]	@ (8002d04 <StartTaskControle+0x3c8>)
 8002bd6:	edc3 7a03 	vstr	s15, [r3, #12]
      xControlAction.xJerk.fFloat = 0;
 8002bda:	4b4a      	ldr	r3, [pc, #296]	@ (8002d04 <StartTaskControle+0x3c8>)
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	611a      	str	r2, [r3, #16]
      xControlAction.ucControlMode = MANUAL;
 8002be2:	4b48      	ldr	r3, [pc, #288]	@ (8002d04 <StartTaskControle+0x3c8>)
 8002be4:	2204      	movs	r2, #4
 8002be6:	751a      	strb	r2, [r3, #20]
      vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 8002be8:	4b46      	ldr	r3, [pc, #280]	@ (8002d04 <StartTaskControle+0x3c8>)
 8002bea:	f107 0208 	add.w	r2, r7, #8
 8002bee:	9202      	str	r2, [sp, #8]
 8002bf0:	466c      	mov	r4, sp
 8002bf2:	f103 0210 	add.w	r2, r3, #16
 8002bf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bfa:	e884 0003 	stmia.w	r4, {r0, r1}
 8002bfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c00:	f000 fb1a 	bl	8003238 <vGetStringFromControlAction>

      osMutexRelease(MutexControlActionHandle);
 8002c04:	4b40      	ldr	r3, [pc, #256]	@ (8002d08 <StartTaskControle+0x3cc>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f00b fc99 	bl	800e540 <osMutexRelease>

      // Send cTxMsgToCarla to CARLA
      HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 8002c0e:	f107 0308 	add.w	r3, r7, #8
 8002c12:	221e      	movs	r2, #30
 8002c14:	4619      	mov	r1, r3
 8002c16:	483d      	ldr	r0, [pc, #244]	@ (8002d0c <StartTaskControle+0x3d0>)
 8002c18:	f009 f912 	bl	800be40 <HAL_UART_Transmit_DMA>

      // Wait CARLA full msg xVehicleStatusRx
  	  uiFlags = osThreadFlagsGet();
 8002c1c:	f00b fb02 	bl	800e224 <osThreadFlagsGet>
 8002c20:	6338      	str	r0, [r7, #48]	@ 0x30
      uiFlags = osThreadFlagsWait(UART_NEW_DATA_FLAG, osFlagsWaitAll, TIMEOUT_GET_CARLA_RX);
 8002c22:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002c26:	2101      	movs	r1, #1
 8002c28:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8002c2c:	f00b fb1b 	bl	800e266 <osThreadFlagsWait>
 8002c30:	6338      	str	r0, [r7, #48]	@ 0x30
      {
        //ucControlMode = EMERGENCY;
      }

      // Assembling xControlSignal
      osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 8002c32:	4b37      	ldr	r3, [pc, #220]	@ (8002d10 <StartTaskControle+0x3d4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f00b fc35 	bl	800e4aa <osMutexAcquire>

      xControlSignal.fLongSpeed = xVehicleStatus.xLongSpeed.fFloat;
 8002c40:	4b34      	ldr	r3, [pc, #208]	@ (8002d14 <StartTaskControle+0x3d8>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a34      	ldr	r2, [pc, #208]	@ (8002d18 <StartTaskControle+0x3dc>)
 8002c46:	6153      	str	r3, [r2, #20]
      xControlSignal.fLatSpeed = xVehicleStatus.xLatSpeed.fFloat;
 8002c48:	4b32      	ldr	r3, [pc, #200]	@ (8002d14 <StartTaskControle+0x3d8>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	4a32      	ldr	r2, [pc, #200]	@ (8002d18 <StartTaskControle+0x3dc>)
 8002c4e:	6193      	str	r3, [r2, #24]
      xControlSignal.fHeadingRate = xVehicleStatus.xHeadingRate.fFloat;
 8002c50:	4b30      	ldr	r3, [pc, #192]	@ (8002d14 <StartTaskControle+0x3d8>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	4a30      	ldr	r2, [pc, #192]	@ (8002d18 <StartTaskControle+0x3dc>)
 8002c56:	61d3      	str	r3, [r2, #28]
      xControlSignal.fSteeringStatus = xVehicleStatus.xSteeringStatus.fFloat;
 8002c58:	4b2e      	ldr	r3, [pc, #184]	@ (8002d14 <StartTaskControle+0x3d8>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4a2e      	ldr	r2, [pc, #184]	@ (8002d18 <StartTaskControle+0x3dc>)
 8002c5e:	6213      	str	r3, [r2, #32]

      osMutexRelease(MutexControlSignalHandle);
 8002c60:	4b2b      	ldr	r3, [pc, #172]	@ (8002d10 <StartTaskControle+0x3d4>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f00b fc6b 	bl	800e540 <osMutexRelease>

      osThreadFlagsSet(TaskMicroAutowaHandle, DATA_UPDATED_FLAG);
 8002c6a:	4b2c      	ldr	r3, [pc, #176]	@ (8002d1c <StartTaskControle+0x3e0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c72:	4618      	mov	r0, r3
 8002c74:	f00b fa88 	bl	800e188 <osThreadFlagsSet>

      // WAIT
      osDelay(MANUAL_CONTROL_TIME_COMMAND);
 8002c78:	20c8      	movs	r0, #200	@ 0xc8
 8002c7a:	f00b fb75 	bl	800e368 <osDelay>
    }
    // Manual mode (MANUAL) routine -- END

    // Emergency mode (EMERGENCY) routine -- START
    if(EMERGENCY == ucControlMode)
 8002c7e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f47f ae87 	bne.w	8002996 <StartTaskControle+0x5a>
    {
      // Setting driving mode lights
  	  vDrivingModeLights(ucControlMode);
 8002c88:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 fb57 	bl	8003340 <vDrivingModeLights>
    
      osMutexAcquire(MutexControlActionHandle, osWaitForever);
 8002c92:	4b1d      	ldr	r3, [pc, #116]	@ (8002d08 <StartTaskControle+0x3cc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f00b fc05 	bl	800e4aa <osMutexAcquire>

      xControlAction.xSteeringAngle.fFloat = 0;
 8002ca0:	4b18      	ldr	r3, [pc, #96]	@ (8002d04 <StartTaskControle+0x3c8>)
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
      xControlAction.xSteeringVelocity.fFloat = 0;
 8002ca8:	4b16      	ldr	r3, [pc, #88]	@ (8002d04 <StartTaskControle+0x3c8>)
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	605a      	str	r2, [r3, #4]
      xControlAction.xSpeed.fFloat = 0;
 8002cb0:	4b14      	ldr	r3, [pc, #80]	@ (8002d04 <StartTaskControle+0x3c8>)
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	609a      	str	r2, [r3, #8]
      xControlAction.xAcceleration.fFloat = 0;
 8002cb8:	4b12      	ldr	r3, [pc, #72]	@ (8002d04 <StartTaskControle+0x3c8>)
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	60da      	str	r2, [r3, #12]
      xControlAction.xJerk.fFloat = 0;
 8002cc0:	4b10      	ldr	r3, [pc, #64]	@ (8002d04 <StartTaskControle+0x3c8>)
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	611a      	str	r2, [r3, #16]
      xControlAction.ucControlMode = EMERGENCY;
 8002cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002d04 <StartTaskControle+0x3c8>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	751a      	strb	r2, [r3, #20]
      vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 8002cce:	4b0d      	ldr	r3, [pc, #52]	@ (8002d04 <StartTaskControle+0x3c8>)
 8002cd0:	f107 0208 	add.w	r2, r7, #8
 8002cd4:	9202      	str	r2, [sp, #8]
 8002cd6:	466c      	mov	r4, sp
 8002cd8:	f103 0210 	add.w	r2, r3, #16
 8002cdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ce0:	e884 0003 	stmia.w	r4, {r0, r1}
 8002ce4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ce6:	f000 faa7 	bl	8003238 <vGetStringFromControlAction>

      // Try to stop the car whatever it takes
      while(1)
      {

        HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 8002cea:	f107 0308 	add.w	r3, r7, #8
 8002cee:	221e      	movs	r2, #30
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4806      	ldr	r0, [pc, #24]	@ (8002d0c <StartTaskControle+0x3d0>)
 8002cf4:	f009 f8a4 	bl	800be40 <HAL_UART_Transmit_DMA>

        HAL_Delay(MANUAL_CONTROL_TIME_COMMAND);
 8002cf8:	20c8      	movs	r0, #200	@ 0xc8
 8002cfa:	f000 fbf1 	bl	80034e0 <HAL_Delay>
        HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 8002cfe:	bf00      	nop
 8002d00:	e7f3      	b.n	8002cea <StartTaskControle+0x3ae>
 8002d02:	bf00      	nop
 8002d04:	24032988 	.word	0x24032988
 8002d08:	24032974 	.word	0x24032974
 8002d0c:	24032a48 	.word	0x24032a48
 8002d10:	24032970 	.word	0x24032970
 8002d14:	240329c4 	.word	0x240329c4
 8002d18:	240329a0 	.word	0x240329a0
 8002d1c:	2403296c 	.word	0x2403296c

08002d20 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d24:	4b22      	ldr	r3, [pc, #136]	@ (8002db0 <MX_USART2_UART_Init+0x90>)
 8002d26:	4a23      	ldr	r2, [pc, #140]	@ (8002db4 <MX_USART2_UART_Init+0x94>)
 8002d28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8002d2a:	4b21      	ldr	r3, [pc, #132]	@ (8002db0 <MX_USART2_UART_Init+0x90>)
 8002d2c:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002d30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d32:	4b1f      	ldr	r3, [pc, #124]	@ (8002db0 <MX_USART2_UART_Init+0x90>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d38:	4b1d      	ldr	r3, [pc, #116]	@ (8002db0 <MX_USART2_UART_Init+0x90>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d3e:	4b1c      	ldr	r3, [pc, #112]	@ (8002db0 <MX_USART2_UART_Init+0x90>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d44:	4b1a      	ldr	r3, [pc, #104]	@ (8002db0 <MX_USART2_UART_Init+0x90>)
 8002d46:	220c      	movs	r2, #12
 8002d48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d4a:	4b19      	ldr	r3, [pc, #100]	@ (8002db0 <MX_USART2_UART_Init+0x90>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d50:	4b17      	ldr	r3, [pc, #92]	@ (8002db0 <MX_USART2_UART_Init+0x90>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d56:	4b16      	ldr	r3, [pc, #88]	@ (8002db0 <MX_USART2_UART_Init+0x90>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d5c:	4b14      	ldr	r3, [pc, #80]	@ (8002db0 <MX_USART2_UART_Init+0x90>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d62:	4b13      	ldr	r3, [pc, #76]	@ (8002db0 <MX_USART2_UART_Init+0x90>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d68:	4811      	ldr	r0, [pc, #68]	@ (8002db0 <MX_USART2_UART_Init+0x90>)
 8002d6a:	f009 f819 	bl	800bda0 <HAL_UART_Init>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002d74:	f7fe fefe 	bl	8001b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d78:	2100      	movs	r1, #0
 8002d7a:	480d      	ldr	r0, [pc, #52]	@ (8002db0 <MX_USART2_UART_Init+0x90>)
 8002d7c:	f00b f804 	bl	800dd88 <HAL_UARTEx_SetTxFifoThreshold>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002d86:	f7fe fef5 	bl	8001b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4808      	ldr	r0, [pc, #32]	@ (8002db0 <MX_USART2_UART_Init+0x90>)
 8002d8e:	f00b f839 	bl	800de04 <HAL_UARTEx_SetRxFifoThreshold>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002d98:	f7fe feec 	bl	8001b74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002d9c:	4804      	ldr	r0, [pc, #16]	@ (8002db0 <MX_USART2_UART_Init+0x90>)
 8002d9e:	f00a ffba 	bl	800dd16 <HAL_UARTEx_DisableFifoMode>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002da8:	f7fe fee4 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002dac:	bf00      	nop
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	24032a48 	.word	0x24032a48
 8002db4:	40004400 	.word	0x40004400

08002db8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002dbc:	4b22      	ldr	r3, [pc, #136]	@ (8002e48 <MX_USART3_UART_Init+0x90>)
 8002dbe:	4a23      	ldr	r2, [pc, #140]	@ (8002e4c <MX_USART3_UART_Init+0x94>)
 8002dc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8002dc2:	4b21      	ldr	r3, [pc, #132]	@ (8002e48 <MX_USART3_UART_Init+0x90>)
 8002dc4:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002dc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002dca:	4b1f      	ldr	r3, [pc, #124]	@ (8002e48 <MX_USART3_UART_Init+0x90>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e48 <MX_USART3_UART_Init+0x90>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8002e48 <MX_USART3_UART_Init+0x90>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8002e48 <MX_USART3_UART_Init+0x90>)
 8002dde:	220c      	movs	r2, #12
 8002de0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002de2:	4b19      	ldr	r3, [pc, #100]	@ (8002e48 <MX_USART3_UART_Init+0x90>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002de8:	4b17      	ldr	r3, [pc, #92]	@ (8002e48 <MX_USART3_UART_Init+0x90>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dee:	4b16      	ldr	r3, [pc, #88]	@ (8002e48 <MX_USART3_UART_Init+0x90>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002df4:	4b14      	ldr	r3, [pc, #80]	@ (8002e48 <MX_USART3_UART_Init+0x90>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dfa:	4b13      	ldr	r3, [pc, #76]	@ (8002e48 <MX_USART3_UART_Init+0x90>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e00:	4811      	ldr	r0, [pc, #68]	@ (8002e48 <MX_USART3_UART_Init+0x90>)
 8002e02:	f008 ffcd 	bl	800bda0 <HAL_UART_Init>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002e0c:	f7fe feb2 	bl	8001b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e10:	2100      	movs	r1, #0
 8002e12:	480d      	ldr	r0, [pc, #52]	@ (8002e48 <MX_USART3_UART_Init+0x90>)
 8002e14:	f00a ffb8 	bl	800dd88 <HAL_UARTEx_SetTxFifoThreshold>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002e1e:	f7fe fea9 	bl	8001b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e22:	2100      	movs	r1, #0
 8002e24:	4808      	ldr	r0, [pc, #32]	@ (8002e48 <MX_USART3_UART_Init+0x90>)
 8002e26:	f00a ffed 	bl	800de04 <HAL_UARTEx_SetRxFifoThreshold>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002e30:	f7fe fea0 	bl	8001b74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002e34:	4804      	ldr	r0, [pc, #16]	@ (8002e48 <MX_USART3_UART_Init+0x90>)
 8002e36:	f00a ff6e 	bl	800dd16 <HAL_UARTEx_DisableFifoMode>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002e40:	f7fe fe98 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	24032adc 	.word	0x24032adc
 8002e4c:	40004800 	.word	0x40004800

08002e50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b0be      	sub	sp, #248	@ 0xf8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e58:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e68:	f107 0320 	add.w	r3, r7, #32
 8002e6c:	22c0      	movs	r2, #192	@ 0xc0
 8002e6e:	2100      	movs	r1, #0
 8002e70:	4618      	mov	r0, r3
 8002e72:	f01f fa1d 	bl	80222b0 <memset>
  if(uartHandle->Instance==USART2)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a6a      	ldr	r2, [pc, #424]	@ (8003024 <HAL_UART_MspInit+0x1d4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	f040 80e1 	bne.w	8003044 <HAL_UART_MspInit+0x1f4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002e82:	f04f 0202 	mov.w	r2, #2
 8002e86:	f04f 0300 	mov.w	r3, #0
 8002e8a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e94:	f107 0320 	add.w	r3, r7, #32
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f005 ffb5 	bl	8008e08 <HAL_RCCEx_PeriphCLKConfig>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8002ea4:	f7fe fe66 	bl	8001b74 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ea8:	4b5f      	ldr	r3, [pc, #380]	@ (8003028 <HAL_UART_MspInit+0x1d8>)
 8002eaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002eae:	4a5e      	ldr	r2, [pc, #376]	@ (8003028 <HAL_UART_MspInit+0x1d8>)
 8002eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eb4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002eb8:	4b5b      	ldr	r3, [pc, #364]	@ (8003028 <HAL_UART_MspInit+0x1d8>)
 8002eba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec2:	61fb      	str	r3, [r7, #28]
 8002ec4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec6:	4b58      	ldr	r3, [pc, #352]	@ (8003028 <HAL_UART_MspInit+0x1d8>)
 8002ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ecc:	4a56      	ldr	r2, [pc, #344]	@ (8003028 <HAL_UART_MspInit+0x1d8>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ed6:	4b54      	ldr	r3, [pc, #336]	@ (8003028 <HAL_UART_MspInit+0x1d8>)
 8002ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	61bb      	str	r3, [r7, #24]
 8002ee2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ee4:	4b50      	ldr	r3, [pc, #320]	@ (8003028 <HAL_UART_MspInit+0x1d8>)
 8002ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eea:	4a4f      	ldr	r2, [pc, #316]	@ (8003028 <HAL_UART_MspInit+0x1d8>)
 8002eec:	f043 0308 	orr.w	r3, r3, #8
 8002ef0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ef4:	4b4c      	ldr	r3, [pc, #304]	@ (8003028 <HAL_UART_MspInit+0x1d8>)
 8002ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f02:	2308      	movs	r3, #8
 8002f04:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f14:	2300      	movs	r3, #0
 8002f16:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f1a:	2307      	movs	r3, #7
 8002f1c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f20:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002f24:	4619      	mov	r1, r3
 8002f26:	4841      	ldr	r0, [pc, #260]	@ (800302c <HAL_UART_MspInit+0x1dc>)
 8002f28:	f004 fd28 	bl	800797c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002f2c:	2320      	movs	r3, #32
 8002f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f32:	2302      	movs	r3, #2
 8002f34:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f44:	2307      	movs	r3, #7
 8002f46:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f4a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4837      	ldr	r0, [pc, #220]	@ (8003030 <HAL_UART_MspInit+0x1e0>)
 8002f52:	f004 fd13 	bl	800797c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Stream1;
 8002f56:	4b37      	ldr	r3, [pc, #220]	@ (8003034 <HAL_UART_MspInit+0x1e4>)
 8002f58:	4a37      	ldr	r2, [pc, #220]	@ (8003038 <HAL_UART_MspInit+0x1e8>)
 8002f5a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002f5c:	4b35      	ldr	r3, [pc, #212]	@ (8003034 <HAL_UART_MspInit+0x1e4>)
 8002f5e:	222b      	movs	r2, #43	@ 0x2b
 8002f60:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f62:	4b34      	ldr	r3, [pc, #208]	@ (8003034 <HAL_UART_MspInit+0x1e4>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f68:	4b32      	ldr	r3, [pc, #200]	@ (8003034 <HAL_UART_MspInit+0x1e4>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f6e:	4b31      	ldr	r3, [pc, #196]	@ (8003034 <HAL_UART_MspInit+0x1e4>)
 8002f70:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f74:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f76:	4b2f      	ldr	r3, [pc, #188]	@ (8003034 <HAL_UART_MspInit+0x1e4>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8003034 <HAL_UART_MspInit+0x1e4>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002f82:	4b2c      	ldr	r3, [pc, #176]	@ (8003034 <HAL_UART_MspInit+0x1e4>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002f88:	4b2a      	ldr	r3, [pc, #168]	@ (8003034 <HAL_UART_MspInit+0x1e4>)
 8002f8a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002f8e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f90:	4b28      	ldr	r3, [pc, #160]	@ (8003034 <HAL_UART_MspInit+0x1e4>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002f96:	4827      	ldr	r0, [pc, #156]	@ (8003034 <HAL_UART_MspInit+0x1e4>)
 8002f98:	f001 fea8 	bl	8004cec <HAL_DMA_Init>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 8002fa2:	f7fe fde7 	bl	8001b74 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a22      	ldr	r2, [pc, #136]	@ (8003034 <HAL_UART_MspInit+0x1e4>)
 8002faa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002fae:	4a21      	ldr	r2, [pc, #132]	@ (8003034 <HAL_UART_MspInit+0x1e4>)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA2_Stream2;
 8002fb4:	4b21      	ldr	r3, [pc, #132]	@ (800303c <HAL_UART_MspInit+0x1ec>)
 8002fb6:	4a22      	ldr	r2, [pc, #136]	@ (8003040 <HAL_UART_MspInit+0x1f0>)
 8002fb8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002fba:	4b20      	ldr	r3, [pc, #128]	@ (800303c <HAL_UART_MspInit+0x1ec>)
 8002fbc:	222c      	movs	r2, #44	@ 0x2c
 8002fbe:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fc0:	4b1e      	ldr	r3, [pc, #120]	@ (800303c <HAL_UART_MspInit+0x1ec>)
 8002fc2:	2240      	movs	r2, #64	@ 0x40
 8002fc4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800303c <HAL_UART_MspInit+0x1ec>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800303c <HAL_UART_MspInit+0x1ec>)
 8002fce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fd2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fd4:	4b19      	ldr	r3, [pc, #100]	@ (800303c <HAL_UART_MspInit+0x1ec>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fda:	4b18      	ldr	r3, [pc, #96]	@ (800303c <HAL_UART_MspInit+0x1ec>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002fe0:	4b16      	ldr	r3, [pc, #88]	@ (800303c <HAL_UART_MspInit+0x1ec>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002fe6:	4b15      	ldr	r3, [pc, #84]	@ (800303c <HAL_UART_MspInit+0x1ec>)
 8002fe8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002fec:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fee:	4b13      	ldr	r3, [pc, #76]	@ (800303c <HAL_UART_MspInit+0x1ec>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002ff4:	4811      	ldr	r0, [pc, #68]	@ (800303c <HAL_UART_MspInit+0x1ec>)
 8002ff6:	f001 fe79 	bl	8004cec <HAL_DMA_Init>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_UART_MspInit+0x1b4>
    {
      Error_Handler();
 8003000:	f7fe fdb8 	bl	8001b74 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a0d      	ldr	r2, [pc, #52]	@ (800303c <HAL_UART_MspInit+0x1ec>)
 8003008:	67da      	str	r2, [r3, #124]	@ 0x7c
 800300a:	4a0c      	ldr	r2, [pc, #48]	@ (800303c <HAL_UART_MspInit+0x1ec>)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003010:	2200      	movs	r2, #0
 8003012:	2105      	movs	r1, #5
 8003014:	2026      	movs	r0, #38	@ 0x26
 8003016:	f001 fe41 	bl	8004c9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800301a:	2026      	movs	r0, #38	@ 0x26
 800301c:	f001 fe58 	bl	8004cd0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003020:	e0c3      	b.n	80031aa <HAL_UART_MspInit+0x35a>
 8003022:	bf00      	nop
 8003024:	40004400 	.word	0x40004400
 8003028:	58024400 	.word	0x58024400
 800302c:	58020000 	.word	0x58020000
 8003030:	58020c00 	.word	0x58020c00
 8003034:	24032b70 	.word	0x24032b70
 8003038:	40020428 	.word	0x40020428
 800303c:	24032be8 	.word	0x24032be8
 8003040:	40020440 	.word	0x40020440
  else if(uartHandle->Instance==USART3)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a5a      	ldr	r2, [pc, #360]	@ (80031b4 <HAL_UART_MspInit+0x364>)
 800304a:	4293      	cmp	r3, r2
 800304c:	f040 80ad 	bne.w	80031aa <HAL_UART_MspInit+0x35a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003050:	f04f 0202 	mov.w	r2, #2
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800305c:	2300      	movs	r3, #0
 800305e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003062:	f107 0320 	add.w	r3, r7, #32
 8003066:	4618      	mov	r0, r3
 8003068:	f005 fece 	bl	8008e08 <HAL_RCCEx_PeriphCLKConfig>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_UART_MspInit+0x226>
      Error_Handler();
 8003072:	f7fe fd7f 	bl	8001b74 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003076:	4b50      	ldr	r3, [pc, #320]	@ (80031b8 <HAL_UART_MspInit+0x368>)
 8003078:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800307c:	4a4e      	ldr	r2, [pc, #312]	@ (80031b8 <HAL_UART_MspInit+0x368>)
 800307e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003082:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003086:	4b4c      	ldr	r3, [pc, #304]	@ (80031b8 <HAL_UART_MspInit+0x368>)
 8003088:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800308c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003094:	4b48      	ldr	r3, [pc, #288]	@ (80031b8 <HAL_UART_MspInit+0x368>)
 8003096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800309a:	4a47      	ldr	r2, [pc, #284]	@ (80031b8 <HAL_UART_MspInit+0x368>)
 800309c:	f043 0308 	orr.w	r3, r3, #8
 80030a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030a4:	4b44      	ldr	r3, [pc, #272]	@ (80031b8 <HAL_UART_MspInit+0x368>)
 80030a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80030b2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80030b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ba:	2302      	movs	r3, #2
 80030bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c6:	2300      	movs	r3, #0
 80030c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030cc:	2307      	movs	r3, #7
 80030ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030d2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80030d6:	4619      	mov	r1, r3
 80030d8:	4838      	ldr	r0, [pc, #224]	@ (80031bc <HAL_UART_MspInit+0x36c>)
 80030da:	f004 fc4f 	bl	800797c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80030de:	4b38      	ldr	r3, [pc, #224]	@ (80031c0 <HAL_UART_MspInit+0x370>)
 80030e0:	4a38      	ldr	r2, [pc, #224]	@ (80031c4 <HAL_UART_MspInit+0x374>)
 80030e2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80030e4:	4b36      	ldr	r3, [pc, #216]	@ (80031c0 <HAL_UART_MspInit+0x370>)
 80030e6:	222d      	movs	r2, #45	@ 0x2d
 80030e8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030ea:	4b35      	ldr	r3, [pc, #212]	@ (80031c0 <HAL_UART_MspInit+0x370>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030f0:	4b33      	ldr	r3, [pc, #204]	@ (80031c0 <HAL_UART_MspInit+0x370>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030f6:	4b32      	ldr	r3, [pc, #200]	@ (80031c0 <HAL_UART_MspInit+0x370>)
 80030f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030fc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030fe:	4b30      	ldr	r3, [pc, #192]	@ (80031c0 <HAL_UART_MspInit+0x370>)
 8003100:	2200      	movs	r2, #0
 8003102:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003104:	4b2e      	ldr	r3, [pc, #184]	@ (80031c0 <HAL_UART_MspInit+0x370>)
 8003106:	2200      	movs	r2, #0
 8003108:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800310a:	4b2d      	ldr	r3, [pc, #180]	@ (80031c0 <HAL_UART_MspInit+0x370>)
 800310c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003110:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003112:	4b2b      	ldr	r3, [pc, #172]	@ (80031c0 <HAL_UART_MspInit+0x370>)
 8003114:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003118:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800311a:	4b29      	ldr	r3, [pc, #164]	@ (80031c0 <HAL_UART_MspInit+0x370>)
 800311c:	2200      	movs	r2, #0
 800311e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003120:	4827      	ldr	r0, [pc, #156]	@ (80031c0 <HAL_UART_MspInit+0x370>)
 8003122:	f001 fde3 	bl	8004cec <HAL_DMA_Init>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_UART_MspInit+0x2e0>
      Error_Handler();
 800312c:	f7fe fd22 	bl	8001b74 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a23      	ldr	r2, [pc, #140]	@ (80031c0 <HAL_UART_MspInit+0x370>)
 8003134:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003138:	4a21      	ldr	r2, [pc, #132]	@ (80031c0 <HAL_UART_MspInit+0x370>)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream1;
 800313e:	4b22      	ldr	r3, [pc, #136]	@ (80031c8 <HAL_UART_MspInit+0x378>)
 8003140:	4a22      	ldr	r2, [pc, #136]	@ (80031cc <HAL_UART_MspInit+0x37c>)
 8003142:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8003144:	4b20      	ldr	r3, [pc, #128]	@ (80031c8 <HAL_UART_MspInit+0x378>)
 8003146:	222e      	movs	r2, #46	@ 0x2e
 8003148:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800314a:	4b1f      	ldr	r3, [pc, #124]	@ (80031c8 <HAL_UART_MspInit+0x378>)
 800314c:	2240      	movs	r2, #64	@ 0x40
 800314e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003150:	4b1d      	ldr	r3, [pc, #116]	@ (80031c8 <HAL_UART_MspInit+0x378>)
 8003152:	2200      	movs	r2, #0
 8003154:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003156:	4b1c      	ldr	r3, [pc, #112]	@ (80031c8 <HAL_UART_MspInit+0x378>)
 8003158:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800315c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800315e:	4b1a      	ldr	r3, [pc, #104]	@ (80031c8 <HAL_UART_MspInit+0x378>)
 8003160:	2200      	movs	r2, #0
 8003162:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003164:	4b18      	ldr	r3, [pc, #96]	@ (80031c8 <HAL_UART_MspInit+0x378>)
 8003166:	2200      	movs	r2, #0
 8003168:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800316a:	4b17      	ldr	r3, [pc, #92]	@ (80031c8 <HAL_UART_MspInit+0x378>)
 800316c:	2200      	movs	r2, #0
 800316e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003170:	4b15      	ldr	r3, [pc, #84]	@ (80031c8 <HAL_UART_MspInit+0x378>)
 8003172:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003176:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003178:	4b13      	ldr	r3, [pc, #76]	@ (80031c8 <HAL_UART_MspInit+0x378>)
 800317a:	2200      	movs	r2, #0
 800317c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800317e:	4812      	ldr	r0, [pc, #72]	@ (80031c8 <HAL_UART_MspInit+0x378>)
 8003180:	f001 fdb4 	bl	8004cec <HAL_DMA_Init>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_UART_MspInit+0x33e>
      Error_Handler();
 800318a:	f7fe fcf3 	bl	8001b74 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a0d      	ldr	r2, [pc, #52]	@ (80031c8 <HAL_UART_MspInit+0x378>)
 8003192:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003194:	4a0c      	ldr	r2, [pc, #48]	@ (80031c8 <HAL_UART_MspInit+0x378>)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 800319a:	2200      	movs	r2, #0
 800319c:	2108      	movs	r1, #8
 800319e:	2027      	movs	r0, #39	@ 0x27
 80031a0:	f001 fd7c 	bl	8004c9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80031a4:	2027      	movs	r0, #39	@ 0x27
 80031a6:	f001 fd93 	bl	8004cd0 <HAL_NVIC_EnableIRQ>
}
 80031aa:	bf00      	nop
 80031ac:	37f8      	adds	r7, #248	@ 0xf8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40004800 	.word	0x40004800
 80031b8:	58024400 	.word	0x58024400
 80031bc:	58020c00 	.word	0x58020c00
 80031c0:	24032c60 	.word	0x24032c60
 80031c4:	40020010 	.word	0x40020010
 80031c8:	24032cd8 	.word	0x24032cd8
 80031cc:	40020028 	.word	0x40020028

080031d0 <fGetJoyPostition>:
  * @param  uiRefMax: Analog value for axis maximum limit.
  * @param  uiRefMin: Analog value for axis minimum limit.
  * @retval Float value with joystick position between -1 and 1.
  */
float fGetJoyPostition(unsigned int uiValue, unsigned int uiRef0, unsigned int uiRefMax, unsigned int uiRefMin)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
 80031dc:	603b      	str	r3, [r7, #0]
  return ((int)(uiValue - uiRef0) > 0) ? ((int)(uiValue - uiRef0))/((float)(uiRefMax - uiRef0)) : ((int)(uiValue - uiRef0))/((float)(uiRef0 - uiRefMin));
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	dd10      	ble.n	800320a <fGetJoyPostition+0x3a>
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	ee07 3a90 	vmov	s15, r3
 80031f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	ee07 3a90 	vmov	s15, r3
 8003200:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003208:	e00f      	b.n	800322a <fGetJoyPostition+0x5a>
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	ee07 3a90 	vmov	s15, r3
 8003214:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	ee07 3a90 	vmov	s15, r3
 8003222:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003226:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 800322a:	eeb0 0a67 	vmov.f32	s0, s15
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <vGetStringFromControlAction>:
  * @param  xControlActionTx: Compressed data with information to CARLA.
  * @param  ucTxMsg: Formated msg to be transmitted.
  * @retval None.
  */
void vGetStringFromControlAction(control_action xControlActionTx, unsigned char * ucTxMsg)
{
 8003238:	b084      	sub	sp, #16
 800323a:	b490      	push	{r4, r7}
 800323c:	af00      	add	r7, sp, #0
 800323e:	f107 0408 	add.w	r4, r7, #8
 8003242:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ucTxMsg[0]  = (unsigned char)'#';
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	2223      	movs	r2, #35	@ 0x23
 800324a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[1]  = (unsigned char)'S';
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	3301      	adds	r3, #1
 8003250:	2253      	movs	r2, #83	@ 0x53
 8003252:	701a      	strb	r2, [r3, #0]
  ucTxMsg[2]  = xControlActionTx.xSteeringAngle.ucBytes[0];
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	3302      	adds	r3, #2
 8003258:	7a3a      	ldrb	r2, [r7, #8]
 800325a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[3]  = xControlActionTx.xSteeringAngle.ucBytes[1];
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	3303      	adds	r3, #3
 8003260:	7a7a      	ldrb	r2, [r7, #9]
 8003262:	701a      	strb	r2, [r3, #0]
  ucTxMsg[4]  = xControlActionTx.xSteeringAngle.ucBytes[2];
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	3304      	adds	r3, #4
 8003268:	7aba      	ldrb	r2, [r7, #10]
 800326a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[5]  = xControlActionTx.xSteeringAngle.ucBytes[3];
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	3305      	adds	r3, #5
 8003270:	7afa      	ldrb	r2, [r7, #11]
 8003272:	701a      	strb	r2, [r3, #0]
  ucTxMsg[6]  = (unsigned char)'W';
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	3306      	adds	r3, #6
 8003278:	2257      	movs	r2, #87	@ 0x57
 800327a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[7]  = xControlActionTx.xSteeringVelocity.ucBytes[0];
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	3307      	adds	r3, #7
 8003280:	7b3a      	ldrb	r2, [r7, #12]
 8003282:	701a      	strb	r2, [r3, #0]
  ucTxMsg[8]  = xControlActionTx.xSteeringVelocity.ucBytes[1];
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	3308      	adds	r3, #8
 8003288:	7b7a      	ldrb	r2, [r7, #13]
 800328a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[9]  = xControlActionTx.xSteeringVelocity.ucBytes[2];
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	3309      	adds	r3, #9
 8003290:	7bba      	ldrb	r2, [r7, #14]
 8003292:	701a      	strb	r2, [r3, #0]
  ucTxMsg[10] = xControlActionTx.xSteeringVelocity.ucBytes[3];
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	330a      	adds	r3, #10
 8003298:	7bfa      	ldrb	r2, [r7, #15]
 800329a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[11] = (unsigned char)'V';
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	330b      	adds	r3, #11
 80032a0:	2256      	movs	r2, #86	@ 0x56
 80032a2:	701a      	strb	r2, [r3, #0]
  ucTxMsg[12] = xControlActionTx.xSpeed.ucBytes[0];
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	330c      	adds	r3, #12
 80032a8:	7c3a      	ldrb	r2, [r7, #16]
 80032aa:	701a      	strb	r2, [r3, #0]
  ucTxMsg[13] = xControlActionTx.xSpeed.ucBytes[1];
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	330d      	adds	r3, #13
 80032b0:	7c7a      	ldrb	r2, [r7, #17]
 80032b2:	701a      	strb	r2, [r3, #0]
  ucTxMsg[14] = xControlActionTx.xSpeed.ucBytes[2];
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	330e      	adds	r3, #14
 80032b8:	7cba      	ldrb	r2, [r7, #18]
 80032ba:	701a      	strb	r2, [r3, #0]
  ucTxMsg[15] = xControlActionTx.xSpeed.ucBytes[3];
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	330f      	adds	r3, #15
 80032c0:	7cfa      	ldrb	r2, [r7, #19]
 80032c2:	701a      	strb	r2, [r3, #0]
  ucTxMsg[16] = (unsigned char)'A';
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	3310      	adds	r3, #16
 80032c8:	2241      	movs	r2, #65	@ 0x41
 80032ca:	701a      	strb	r2, [r3, #0]
  ucTxMsg[17] = xControlActionTx.xAcceleration.ucBytes[0];
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	3311      	adds	r3, #17
 80032d0:	7d3a      	ldrb	r2, [r7, #20]
 80032d2:	701a      	strb	r2, [r3, #0]
  ucTxMsg[18] = xControlActionTx.xAcceleration.ucBytes[1];
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	3312      	adds	r3, #18
 80032d8:	7d7a      	ldrb	r2, [r7, #21]
 80032da:	701a      	strb	r2, [r3, #0]
  ucTxMsg[19] = xControlActionTx.xAcceleration.ucBytes[2];
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	3313      	adds	r3, #19
 80032e0:	7dba      	ldrb	r2, [r7, #22]
 80032e2:	701a      	strb	r2, [r3, #0]
  ucTxMsg[20] = xControlActionTx.xAcceleration.ucBytes[3];
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	3314      	adds	r3, #20
 80032e8:	7dfa      	ldrb	r2, [r7, #23]
 80032ea:	701a      	strb	r2, [r3, #0]
  ucTxMsg[21] = (unsigned char)'J';
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	3315      	adds	r3, #21
 80032f0:	224a      	movs	r2, #74	@ 0x4a
 80032f2:	701a      	strb	r2, [r3, #0]
  ucTxMsg[22] = xControlActionTx.xJerk.ucBytes[0];
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	3316      	adds	r3, #22
 80032f8:	7e3a      	ldrb	r2, [r7, #24]
 80032fa:	701a      	strb	r2, [r3, #0]
  ucTxMsg[23] = xControlActionTx.xJerk.ucBytes[1];
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	3317      	adds	r3, #23
 8003300:	7e7a      	ldrb	r2, [r7, #25]
 8003302:	701a      	strb	r2, [r3, #0]
  ucTxMsg[24] = xControlActionTx.xJerk.ucBytes[2];
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	3318      	adds	r3, #24
 8003308:	7eba      	ldrb	r2, [r7, #26]
 800330a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[25] = xControlActionTx.xJerk.ucBytes[3];
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	3319      	adds	r3, #25
 8003310:	7efa      	ldrb	r2, [r7, #27]
 8003312:	701a      	strb	r2, [r3, #0]
  ucTxMsg[26] = (unsigned char)'M';
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	331a      	adds	r3, #26
 8003318:	224d      	movs	r2, #77	@ 0x4d
 800331a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[27] = xControlActionTx.ucControlMode;
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	331b      	adds	r3, #27
 8003320:	7f3a      	ldrb	r2, [r7, #28]
 8003322:	701a      	strb	r2, [r3, #0]
  ucTxMsg[28] = (unsigned char)'$';
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	331c      	adds	r3, #28
 8003328:	2224      	movs	r2, #36	@ 0x24
 800332a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[29] = (unsigned char)'\0';
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	331d      	adds	r3, #29
 8003330:	2200      	movs	r2, #0
 8003332:	701a      	strb	r2, [r3, #0]
  
}
 8003334:	bf00      	nop
 8003336:	46bd      	mov	sp, r7
 8003338:	bc90      	pop	{r4, r7}
 800333a:	b004      	add	sp, #16
 800333c:	4770      	bx	lr
	...

08003340 <vDrivingModeLights>:
  * @brief  Update driving mode signaling lights
  * @param  ucDrivingMode:  Driving mode
  * @retval None
  */
void vDrivingModeLights(unsigned char ucDrivingMode)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	71fb      	strb	r3, [r7, #7]
  switch (ucDrivingMode)
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	2b04      	cmp	r3, #4
 800334e:	d016      	beq.n	800337e <vDrivingModeLights+0x3e>
 8003350:	2b04      	cmp	r3, #4
 8003352:	dc36      	bgt.n	80033c2 <vDrivingModeLights+0x82>
 8003354:	2b00      	cmp	r3, #0
 8003356:	d023      	beq.n	80033a0 <vDrivingModeLights+0x60>
 8003358:	2b01      	cmp	r3, #1
 800335a:	d132      	bne.n	80033c2 <vDrivingModeLights+0x82>
  {
    case AUTOWARE:
      HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, 0); // Green LED
 800335c:	2200      	movs	r2, #0
 800335e:	2101      	movs	r1, #1
 8003360:	481a      	ldr	r0, [pc, #104]	@ (80033cc <vDrivingModeLights+0x8c>)
 8003362:	f004 fcbb 	bl	8007cdc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 1); // Ambar LED
 8003366:	2201      	movs	r2, #1
 8003368:	2102      	movs	r1, #2
 800336a:	4819      	ldr	r0, [pc, #100]	@ (80033d0 <vDrivingModeLights+0x90>)
 800336c:	f004 fcb6 	bl	8007cdc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 0); // Red LED
 8003370:	2200      	movs	r2, #0
 8003372:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003376:	4815      	ldr	r0, [pc, #84]	@ (80033cc <vDrivingModeLights+0x8c>)
 8003378:	f004 fcb0 	bl	8007cdc <HAL_GPIO_WritePin>
      break;
 800337c:	e022      	b.n	80033c4 <vDrivingModeLights+0x84>

    case MANUAL:
      HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, 1); // Green LED
 800337e:	2201      	movs	r2, #1
 8003380:	2101      	movs	r1, #1
 8003382:	4812      	ldr	r0, [pc, #72]	@ (80033cc <vDrivingModeLights+0x8c>)
 8003384:	f004 fcaa 	bl	8007cdc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0); // Ambar LED
 8003388:	2200      	movs	r2, #0
 800338a:	2102      	movs	r1, #2
 800338c:	4810      	ldr	r0, [pc, #64]	@ (80033d0 <vDrivingModeLights+0x90>)
 800338e:	f004 fca5 	bl	8007cdc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 0); // Red LED
 8003392:	2200      	movs	r2, #0
 8003394:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003398:	480c      	ldr	r0, [pc, #48]	@ (80033cc <vDrivingModeLights+0x8c>)
 800339a:	f004 fc9f 	bl	8007cdc <HAL_GPIO_WritePin>
      break;
 800339e:	e011      	b.n	80033c4 <vDrivingModeLights+0x84>

    case EMERGENCY:
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0); // Green LED
 80033a0:	2200      	movs	r2, #0
 80033a2:	2102      	movs	r1, #2
 80033a4:	480a      	ldr	r0, [pc, #40]	@ (80033d0 <vDrivingModeLights+0x90>)
 80033a6:	f004 fc99 	bl	8007cdc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, 0); // Ambar LED
 80033aa:	2200      	movs	r2, #0
 80033ac:	2101      	movs	r1, #1
 80033ae:	4807      	ldr	r0, [pc, #28]	@ (80033cc <vDrivingModeLights+0x8c>)
 80033b0:	f004 fc94 	bl	8007cdc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 1); // Red LED
 80033b4:	2201      	movs	r2, #1
 80033b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80033ba:	4804      	ldr	r0, [pc, #16]	@ (80033cc <vDrivingModeLights+0x8c>)
 80033bc:	f004 fc8e 	bl	8007cdc <HAL_GPIO_WritePin>
      break;
 80033c0:	e000      	b.n	80033c4 <vDrivingModeLights+0x84>

    default:
      break;
 80033c2:	bf00      	nop
  }

}
 80033c4:	bf00      	nop
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	58020400 	.word	0x58020400
 80033d0:	58021000 	.word	0x58021000

080033d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80033d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800340c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80033d8:	f7ff fa28 	bl	800282c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033dc:	480c      	ldr	r0, [pc, #48]	@ (8003410 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80033de:	490d      	ldr	r1, [pc, #52]	@ (8003414 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80033e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003418 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80033e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033e4:	e002      	b.n	80033ec <LoopCopyDataInit>

080033e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ea:	3304      	adds	r3, #4

080033ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033f0:	d3f9      	bcc.n	80033e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033f2:	4a0a      	ldr	r2, [pc, #40]	@ (800341c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80033f4:	4c0a      	ldr	r4, [pc, #40]	@ (8003420 <LoopFillZerobss+0x22>)
  movs r3, #0
 80033f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033f8:	e001      	b.n	80033fe <LoopFillZerobss>

080033fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033fc:	3204      	adds	r2, #4

080033fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003400:	d3fb      	bcc.n	80033fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003402:	f01f f845 	bl	8022490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003406:	f7fe f92b 	bl	8001660 <main>
  bx  lr
 800340a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800340c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003410:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003414:	2400130c 	.word	0x2400130c
  ldr r2, =_sidata
 8003418:	08025d3c 	.word	0x08025d3c
  ldr r2, =_sbss
 800341c:	24001310 	.word	0x24001310
  ldr r4, =_ebss
 8003420:	240696f0 	.word	0x240696f0

08003424 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003424:	e7fe      	b.n	8003424 <ADC3_IRQHandler>
	...

08003428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800342e:	2003      	movs	r0, #3
 8003430:	f001 fc29 	bl	8004c86 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003434:	f005 fad0 	bl	80089d8 <HAL_RCC_GetSysClockFreq>
 8003438:	4602      	mov	r2, r0
 800343a:	4b15      	ldr	r3, [pc, #84]	@ (8003490 <HAL_Init+0x68>)
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	0a1b      	lsrs	r3, r3, #8
 8003440:	f003 030f 	and.w	r3, r3, #15
 8003444:	4913      	ldr	r1, [pc, #76]	@ (8003494 <HAL_Init+0x6c>)
 8003446:	5ccb      	ldrb	r3, [r1, r3]
 8003448:	f003 031f 	and.w	r3, r3, #31
 800344c:	fa22 f303 	lsr.w	r3, r2, r3
 8003450:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003452:	4b0f      	ldr	r3, [pc, #60]	@ (8003490 <HAL_Init+0x68>)
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	4a0e      	ldr	r2, [pc, #56]	@ (8003494 <HAL_Init+0x6c>)
 800345c:	5cd3      	ldrb	r3, [r2, r3]
 800345e:	f003 031f 	and.w	r3, r3, #31
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	fa22 f303 	lsr.w	r3, r2, r3
 8003468:	4a0b      	ldr	r2, [pc, #44]	@ (8003498 <HAL_Init+0x70>)
 800346a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800346c:	4a0b      	ldr	r2, [pc, #44]	@ (800349c <HAL_Init+0x74>)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003472:	200f      	movs	r0, #15
 8003474:	f7ff f83e 	bl	80024f4 <HAL_InitTick>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e002      	b.n	8003488 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003482:	f7ff f819 	bl	80024b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	58024400 	.word	0x58024400
 8003494:	080234f8 	.word	0x080234f8
 8003498:	24000008 	.word	0x24000008
 800349c:	24000004 	.word	0x24000004

080034a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80034a4:	4b06      	ldr	r3, [pc, #24]	@ (80034c0 <HAL_IncTick+0x20>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	461a      	mov	r2, r3
 80034aa:	4b06      	ldr	r3, [pc, #24]	@ (80034c4 <HAL_IncTick+0x24>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4413      	add	r3, r2
 80034b0:	4a04      	ldr	r2, [pc, #16]	@ (80034c4 <HAL_IncTick+0x24>)
 80034b2:	6013      	str	r3, [r2, #0]
}
 80034b4:	bf00      	nop
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	24000010 	.word	0x24000010
 80034c4:	24032d50 	.word	0x24032d50

080034c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  return uwTick;
 80034cc:	4b03      	ldr	r3, [pc, #12]	@ (80034dc <HAL_GetTick+0x14>)
 80034ce:	681b      	ldr	r3, [r3, #0]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	24032d50 	.word	0x24032d50

080034e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034e8:	f7ff ffee 	bl	80034c8 <HAL_GetTick>
 80034ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034f8:	d005      	beq.n	8003506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003524 <HAL_Delay+0x44>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4413      	add	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003506:	bf00      	nop
 8003508:	f7ff ffde 	bl	80034c8 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	429a      	cmp	r2, r3
 8003516:	d8f7      	bhi.n	8003508 <HAL_Delay+0x28>
  {
  }
}
 8003518:	bf00      	nop
 800351a:	bf00      	nop
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	24000010 	.word	0x24000010

08003528 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800352c:	4b03      	ldr	r3, [pc, #12]	@ (800353c <HAL_GetREVID+0x14>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	0c1b      	lsrs	r3, r3, #16
}
 8003532:	4618      	mov	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	5c001000 	.word	0x5c001000

08003540 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	431a      	orrs	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	609a      	str	r2, [r3, #8]
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	609a      	str	r2, [r3, #8]
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800359c:	4618      	mov	r0, r3
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	3360      	adds	r3, #96	@ 0x60
 80035ba:	461a      	mov	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	430b      	orrs	r3, r1
 80035d6:	431a      	orrs	r2, r3
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80035dc:	bf00      	nop
 80035de:	371c      	adds	r7, #28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f003 031f 	and.w	r3, r3, #31
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	fa01 f303 	lsl.w	r3, r1, r3
 8003608:	431a      	orrs	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	611a      	str	r2, [r3, #16]
}
 800360e:	bf00      	nop
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800361a:	b480      	push	{r7}
 800361c:	b087      	sub	sp, #28
 800361e:	af00      	add	r7, sp, #0
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	3360      	adds	r3, #96	@ 0x60
 800362a:	461a      	mov	r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	431a      	orrs	r2, r3
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	601a      	str	r2, [r3, #0]
  }
}
 8003644:	bf00      	nop
 8003646:	371c      	adds	r7, #28
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003664:	2301      	movs	r3, #1
 8003666:	e000      	b.n	800366a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003676:	b480      	push	{r7}
 8003678:	b087      	sub	sp, #28
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	3330      	adds	r3, #48	@ 0x30
 8003686:	461a      	mov	r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	0a1b      	lsrs	r3, r3, #8
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	f003 030c 	and.w	r3, r3, #12
 8003692:	4413      	add	r3, r2
 8003694:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	f003 031f 	and.w	r3, r3, #31
 80036a0:	211f      	movs	r1, #31
 80036a2:	fa01 f303 	lsl.w	r3, r1, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	401a      	ands	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	0e9b      	lsrs	r3, r3, #26
 80036ae:	f003 011f 	and.w	r1, r3, #31
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	fa01 f303 	lsl.w	r3, r1, r3
 80036bc:	431a      	orrs	r2, r3
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80036c2:	bf00      	nop
 80036c4:	371c      	adds	r7, #28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f023 0203 	bic.w	r2, r3, #3
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	60da      	str	r2, [r3, #12]
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b087      	sub	sp, #28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	3314      	adds	r3, #20
 8003704:	461a      	mov	r2, r3
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	0e5b      	lsrs	r3, r3, #25
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	4413      	add	r3, r2
 8003712:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	0d1b      	lsrs	r3, r3, #20
 800371c:	f003 031f 	and.w	r3, r3, #31
 8003720:	2107      	movs	r1, #7
 8003722:	fa01 f303 	lsl.w	r3, r1, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	401a      	ands	r2, r3
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	0d1b      	lsrs	r3, r3, #20
 800372e:	f003 031f 	and.w	r3, r3, #31
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	fa01 f303 	lsl.w	r3, r1, r3
 8003738:	431a      	orrs	r2, r3
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800373e:	bf00      	nop
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
	...

0800374c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003764:	43db      	mvns	r3, r3
 8003766:	401a      	ands	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f003 0318 	and.w	r3, r3, #24
 800376e:	4908      	ldr	r1, [pc, #32]	@ (8003790 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003770:	40d9      	lsrs	r1, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	400b      	ands	r3, r1
 8003776:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800377a:	431a      	orrs	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003782:	bf00      	nop
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	000fffff 	.word	0x000fffff

08003794 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 031f 	and.w	r3, r3, #31
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	4b04      	ldr	r3, [pc, #16]	@ (80037d0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80037be:	4013      	ands	r3, r2
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6093      	str	r3, [r2, #8]
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	5fffffc0 	.word	0x5fffffc0

080037d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037e8:	d101      	bne.n	80037ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	4b05      	ldr	r3, [pc, #20]	@ (8003820 <LL_ADC_EnableInternalRegulator+0x24>)
 800380a:	4013      	ands	r3, r2
 800380c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	6fffffc0 	.word	0x6fffffc0

08003824 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003834:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003838:	d101      	bne.n	800383e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	4b05      	ldr	r3, [pc, #20]	@ (8003870 <LL_ADC_Enable+0x24>)
 800385a:	4013      	ands	r3, r2
 800385c:	f043 0201 	orr.w	r2, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	7fffffc0 	.word	0x7fffffc0

08003874 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <LL_ADC_IsEnabled+0x18>
 8003888:	2301      	movs	r3, #1
 800388a:	e000      	b.n	800388e <LL_ADC_IsEnabled+0x1a>
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
	...

0800389c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	4b05      	ldr	r3, [pc, #20]	@ (80038c0 <LL_ADC_REG_StartConversion+0x24>)
 80038aa:	4013      	ands	r3, r2
 80038ac:	f043 0204 	orr.w	r2, r3, #4
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	7fffffc0 	.word	0x7fffffc0

080038c4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d101      	bne.n	80038dc <LL_ADC_REG_IsConversionOngoing+0x18>
 80038d8:	2301      	movs	r3, #1
 80038da:	e000      	b.n	80038de <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr

080038ea <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80038ea:	b480      	push	{r7}
 80038ec:	b083      	sub	sp, #12
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d101      	bne.n	8003902 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003910:	b590      	push	{r4, r7, lr}
 8003912:	b089      	sub	sp, #36	@ 0x24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800391c:	2300      	movs	r3, #0
 800391e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e18f      	b.n	8003c4a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003934:	2b00      	cmp	r3, #0
 8003936:	d109      	bne.n	800394c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7fc ff8b 	bl	8000854 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff ff3f 	bl	80037d4 <LL_ADC_IsDeepPowerDownEnabled>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d004      	beq.n	8003966 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff ff25 	bl	80037b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff ff5a 	bl	8003824 <LL_ADC_IsInternalRegulatorEnabled>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d114      	bne.n	80039a0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff ff3e 	bl	80037fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003980:	4b87      	ldr	r3, [pc, #540]	@ (8003ba0 <HAL_ADC_Init+0x290>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	099b      	lsrs	r3, r3, #6
 8003986:	4a87      	ldr	r2, [pc, #540]	@ (8003ba4 <HAL_ADC_Init+0x294>)
 8003988:	fba2 2303 	umull	r2, r3, r2, r3
 800398c:	099b      	lsrs	r3, r3, #6
 800398e:	3301      	adds	r3, #1
 8003990:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003992:	e002      	b.n	800399a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	3b01      	subs	r3, #1
 8003998:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1f9      	bne.n	8003994 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff ff3d 	bl	8003824 <LL_ADC_IsInternalRegulatorEnabled>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10d      	bne.n	80039cc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b4:	f043 0210 	orr.w	r2, r3, #16
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c0:	f043 0201 	orr.w	r2, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff ff77 	bl	80038c4 <LL_ADC_REG_IsConversionOngoing>
 80039d6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039dc:	f003 0310 	and.w	r3, r3, #16
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f040 8129 	bne.w	8003c38 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f040 8125 	bne.w	8003c38 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80039f6:	f043 0202 	orr.w	r2, r3, #2
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff ff36 	bl	8003874 <LL_ADC_IsEnabled>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d136      	bne.n	8003a7c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a65      	ldr	r2, [pc, #404]	@ (8003ba8 <HAL_ADC_Init+0x298>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d004      	beq.n	8003a22 <HAL_ADC_Init+0x112>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a63      	ldr	r2, [pc, #396]	@ (8003bac <HAL_ADC_Init+0x29c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d10e      	bne.n	8003a40 <HAL_ADC_Init+0x130>
 8003a22:	4861      	ldr	r0, [pc, #388]	@ (8003ba8 <HAL_ADC_Init+0x298>)
 8003a24:	f7ff ff26 	bl	8003874 <LL_ADC_IsEnabled>
 8003a28:	4604      	mov	r4, r0
 8003a2a:	4860      	ldr	r0, [pc, #384]	@ (8003bac <HAL_ADC_Init+0x29c>)
 8003a2c:	f7ff ff22 	bl	8003874 <LL_ADC_IsEnabled>
 8003a30:	4603      	mov	r3, r0
 8003a32:	4323      	orrs	r3, r4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	bf0c      	ite	eq
 8003a38:	2301      	moveq	r3, #1
 8003a3a:	2300      	movne	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	e008      	b.n	8003a52 <HAL_ADC_Init+0x142>
 8003a40:	485b      	ldr	r0, [pc, #364]	@ (8003bb0 <HAL_ADC_Init+0x2a0>)
 8003a42:	f7ff ff17 	bl	8003874 <LL_ADC_IsEnabled>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	bf0c      	ite	eq
 8003a4c:	2301      	moveq	r3, #1
 8003a4e:	2300      	movne	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d012      	beq.n	8003a7c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a53      	ldr	r2, [pc, #332]	@ (8003ba8 <HAL_ADC_Init+0x298>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d004      	beq.n	8003a6a <HAL_ADC_Init+0x15a>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a51      	ldr	r2, [pc, #324]	@ (8003bac <HAL_ADC_Init+0x29c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d101      	bne.n	8003a6e <HAL_ADC_Init+0x15e>
 8003a6a:	4a52      	ldr	r2, [pc, #328]	@ (8003bb4 <HAL_ADC_Init+0x2a4>)
 8003a6c:	e000      	b.n	8003a70 <HAL_ADC_Init+0x160>
 8003a6e:	4a52      	ldr	r2, [pc, #328]	@ (8003bb8 <HAL_ADC_Init+0x2a8>)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	4619      	mov	r1, r3
 8003a76:	4610      	mov	r0, r2
 8003a78:	f7ff fd62 	bl	8003540 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003a7c:	f7ff fd54 	bl	8003528 <HAL_GetREVID>
 8003a80:	4603      	mov	r3, r0
 8003a82:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d914      	bls.n	8003ab4 <HAL_ADC_Init+0x1a4>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	2b10      	cmp	r3, #16
 8003a90:	d110      	bne.n	8003ab4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	7d5b      	ldrb	r3, [r3, #21]
 8003a96:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a9c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003aa2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	7f1b      	ldrb	r3, [r3, #28]
 8003aa8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003aaa:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003aac:	f043 030c 	orr.w	r3, r3, #12
 8003ab0:	61bb      	str	r3, [r7, #24]
 8003ab2:	e00d      	b.n	8003ad0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	7d5b      	ldrb	r3, [r3, #21]
 8003ab8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003abe:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003ac4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	7f1b      	ldrb	r3, [r3, #28]
 8003aca:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003acc:	4313      	orrs	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	7f1b      	ldrb	r3, [r3, #28]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d106      	bne.n	8003ae6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	3b01      	subs	r3, #1
 8003ade:	045b      	lsls	r3, r3, #17
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d009      	beq.n	8003b02 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003afa:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	4b2c      	ldr	r3, [pc, #176]	@ (8003bbc <HAL_ADC_Init+0x2ac>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6812      	ldr	r2, [r2, #0]
 8003b10:	69b9      	ldr	r1, [r7, #24]
 8003b12:	430b      	orrs	r3, r1
 8003b14:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff fed2 	bl	80038c4 <LL_ADC_REG_IsConversionOngoing>
 8003b20:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff fedf 	bl	80038ea <LL_ADC_INJ_IsConversionOngoing>
 8003b2c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d15f      	bne.n	8003bf4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d15c      	bne.n	8003bf4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	7d1b      	ldrb	r3, [r3, #20]
 8003b3e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003b44:	4313      	orrs	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8003bc0 <HAL_ADC_Init+0x2b0>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6812      	ldr	r2, [r2, #0]
 8003b56:	69b9      	ldr	r1, [r7, #24]
 8003b58:	430b      	orrs	r3, r1
 8003b5a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d130      	bne.n	8003bc8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691a      	ldr	r2, [r3, #16]
 8003b72:	4b14      	ldr	r3, [pc, #80]	@ (8003bc4 <HAL_ADC_Init+0x2b4>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b7a:	3a01      	subs	r2, #1
 8003b7c:	0411      	lsls	r1, r2, #16
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003b82:	4311      	orrs	r1, r2
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003b88:	4311      	orrs	r1, r2
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0201 	orr.w	r2, r2, #1
 8003b9a:	611a      	str	r2, [r3, #16]
 8003b9c:	e01c      	b.n	8003bd8 <HAL_ADC_Init+0x2c8>
 8003b9e:	bf00      	nop
 8003ba0:	24000004 	.word	0x24000004
 8003ba4:	053e2d63 	.word	0x053e2d63
 8003ba8:	40022000 	.word	0x40022000
 8003bac:	40022100 	.word	0x40022100
 8003bb0:	58026000 	.word	0x58026000
 8003bb4:	40022300 	.word	0x40022300
 8003bb8:	58026300 	.word	0x58026300
 8003bbc:	fff0c003 	.word	0xfff0c003
 8003bc0:	ffffbffc 	.word	0xffffbffc
 8003bc4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691a      	ldr	r2, [r3, #16]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0201 	bic.w	r2, r2, #1
 8003bd6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fd8c 	bl	800470c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d10c      	bne.n	8003c16 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c02:	f023 010f 	bic.w	r1, r3, #15
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	1e5a      	subs	r2, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c14:	e007      	b.n	8003c26 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 020f 	bic.w	r2, r2, #15
 8003c24:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c2a:	f023 0303 	bic.w	r3, r3, #3
 8003c2e:	f043 0201 	orr.w	r2, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	655a      	str	r2, [r3, #84]	@ 0x54
 8003c36:	e007      	b.n	8003c48 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c3c:	f043 0210 	orr.w	r2, r3, #16
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c48:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3724      	adds	r7, #36	@ 0x24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd90      	pop	{r4, r7, pc}
 8003c52:	bf00      	nop

08003c54 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a55      	ldr	r2, [pc, #340]	@ (8003dbc <HAL_ADC_Start_DMA+0x168>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d004      	beq.n	8003c74 <HAL_ADC_Start_DMA+0x20>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a54      	ldr	r2, [pc, #336]	@ (8003dc0 <HAL_ADC_Start_DMA+0x16c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d101      	bne.n	8003c78 <HAL_ADC_Start_DMA+0x24>
 8003c74:	4b53      	ldr	r3, [pc, #332]	@ (8003dc4 <HAL_ADC_Start_DMA+0x170>)
 8003c76:	e000      	b.n	8003c7a <HAL_ADC_Start_DMA+0x26>
 8003c78:	4b53      	ldr	r3, [pc, #332]	@ (8003dc8 <HAL_ADC_Start_DMA+0x174>)
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7ff fd8a 	bl	8003794 <LL_ADC_GetMultimode>
 8003c80:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff fe1c 	bl	80038c4 <LL_ADC_REG_IsConversionOngoing>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f040 808c 	bne.w	8003dac <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <HAL_ADC_Start_DMA+0x4e>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e087      	b.n	8003db2 <HAL_ADC_Start_DMA+0x15e>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	2b05      	cmp	r3, #5
 8003cb4:	d002      	beq.n	8003cbc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	2b09      	cmp	r3, #9
 8003cba:	d170      	bne.n	8003d9e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 fc07 	bl	80044d0 <ADC_Enable>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003cc6:	7dfb      	ldrb	r3, [r7, #23]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d163      	bne.n	8003d94 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003cd0:	4b3e      	ldr	r3, [pc, #248]	@ (8003dcc <HAL_ADC_Start_DMA+0x178>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a37      	ldr	r2, [pc, #220]	@ (8003dc0 <HAL_ADC_Start_DMA+0x16c>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d002      	beq.n	8003cec <HAL_ADC_Start_DMA+0x98>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	e000      	b.n	8003cee <HAL_ADC_Start_DMA+0x9a>
 8003cec:	4b33      	ldr	r3, [pc, #204]	@ (8003dbc <HAL_ADC_Start_DMA+0x168>)
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	6812      	ldr	r2, [r2, #0]
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d002      	beq.n	8003cfc <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d105      	bne.n	8003d08 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d00:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d006      	beq.n	8003d22 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d18:	f023 0206 	bic.w	r2, r3, #6
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d20:	e002      	b.n	8003d28 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d2c:	4a28      	ldr	r2, [pc, #160]	@ (8003dd0 <HAL_ADC_Start_DMA+0x17c>)
 8003d2e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d34:	4a27      	ldr	r2, [pc, #156]	@ (8003dd4 <HAL_ADC_Start_DMA+0x180>)
 8003d36:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d3c:	4a26      	ldr	r2, [pc, #152]	@ (8003dd8 <HAL_ADC_Start_DMA+0x184>)
 8003d3e:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	221c      	movs	r2, #28
 8003d46:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0210 	orr.w	r2, r2, #16
 8003d5e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	f7ff fcaf 	bl	80036ce <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3340      	adds	r3, #64	@ 0x40
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f001 fb10 	bl	80053a4 <HAL_DMA_Start_IT>
 8003d84:	4603      	mov	r3, r0
 8003d86:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff fd85 	bl	800389c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003d92:	e00d      	b.n	8003db0 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8003d9c:	e008      	b.n	8003db0 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003daa:	e001      	b.n	8003db0 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003dac:	2302      	movs	r3, #2
 8003dae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3718      	adds	r7, #24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40022000 	.word	0x40022000
 8003dc0:	40022100 	.word	0x40022100
 8003dc4:	40022300 	.word	0x40022300
 8003dc8:	58026300 	.word	0x58026300
 8003dcc:	fffff0fe 	.word	0xfffff0fe
 8003dd0:	080045e5 	.word	0x080045e5
 8003dd4:	080046bd 	.word	0x080046bd
 8003dd8:	080046d9 	.word	0x080046d9

08003ddc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003e18:	b590      	push	{r4, r7, lr}
 8003e1a:	b0a1      	sub	sp, #132	@ 0x84
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	4a65      	ldr	r2, [pc, #404]	@ (8003fc8 <HAL_ADC_ConfigChannel+0x1b0>)
 8003e32:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_ADC_ConfigChannel+0x2a>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e32e      	b.n	80044a0 <HAL_ADC_ConfigChannel+0x688>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff fd38 	bl	80038c4 <LL_ADC_REG_IsConversionOngoing>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f040 8313 	bne.w	8004482 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	db2c      	blt.n	8003ebe <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d108      	bne.n	8003e82 <HAL_ADC_ConfigChannel+0x6a>
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	0e9b      	lsrs	r3, r3, #26
 8003e76:	f003 031f 	and.w	r3, r3, #31
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	e016      	b.n	8003eb0 <HAL_ADC_ConfigChannel+0x98>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e8a:	fa93 f3a3 	rbit	r3, r3
 8003e8e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e92:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003e9a:	2320      	movs	r3, #32
 8003e9c:	e003      	b.n	8003ea6 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003e9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ea0:	fab3 f383 	clz	r3, r3
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	f003 031f 	and.w	r3, r3, #31
 8003eaa:	2201      	movs	r2, #1
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6812      	ldr	r2, [r2, #0]
 8003eb4:	69d1      	ldr	r1, [r2, #28]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6812      	ldr	r2, [r2, #0]
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	6859      	ldr	r1, [r3, #4]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	f7ff fbd3 	bl	8003676 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff fcf5 	bl	80038c4 <LL_ADC_REG_IsConversionOngoing>
 8003eda:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff fd02 	bl	80038ea <LL_ADC_INJ_IsConversionOngoing>
 8003ee6:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ee8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f040 80b8 	bne.w	8004060 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ef0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f040 80b4 	bne.w	8004060 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	6819      	ldr	r1, [r3, #0]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	461a      	mov	r2, r3
 8003f06:	f7ff fbf5 	bl	80036f4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003f0a:	4b30      	ldr	r3, [pc, #192]	@ (8003fcc <HAL_ADC_ConfigChannel+0x1b4>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003f12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f16:	d10b      	bne.n	8003f30 <HAL_ADC_ConfigChannel+0x118>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	695a      	ldr	r2, [r3, #20]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	089b      	lsrs	r3, r3, #2
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	e01d      	b.n	8003f6c <HAL_ADC_ConfigChannel+0x154>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f003 0310 	and.w	r3, r3, #16
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10b      	bne.n	8003f56 <HAL_ADC_ConfigChannel+0x13e>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	695a      	ldr	r2, [r3, #20]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	089b      	lsrs	r3, r3, #2
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	e00a      	b.n	8003f6c <HAL_ADC_ConfigChannel+0x154>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	695a      	ldr	r2, [r3, #20]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	089b      	lsrs	r3, r3, #2
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d02c      	beq.n	8003fd0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6818      	ldr	r0, [r3, #0]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	6919      	ldr	r1, [r3, #16]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f84:	f7ff fb10 	bl	80035a8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	6919      	ldr	r1, [r3, #16]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	7e5b      	ldrb	r3, [r3, #25]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d102      	bne.n	8003f9e <HAL_ADC_ConfigChannel+0x186>
 8003f98:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003f9c:	e000      	b.n	8003fa0 <HAL_ADC_ConfigChannel+0x188>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	f7ff fb3a 	bl	800361a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6818      	ldr	r0, [r3, #0]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	6919      	ldr	r1, [r3, #16]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	7e1b      	ldrb	r3, [r3, #24]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d102      	bne.n	8003fbc <HAL_ADC_ConfigChannel+0x1a4>
 8003fb6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003fba:	e000      	b.n	8003fbe <HAL_ADC_ConfigChannel+0x1a6>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	f7ff fb12 	bl	80035e8 <LL_ADC_SetDataRightShift>
 8003fc4:	e04c      	b.n	8004060 <HAL_ADC_ConfigChannel+0x248>
 8003fc6:	bf00      	nop
 8003fc8:	47ff0000 	.word	0x47ff0000
 8003fcc:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	069b      	lsls	r3, r3, #26
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d107      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003ff2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ffa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	069b      	lsls	r3, r3, #26
 8004004:	429a      	cmp	r2, r3
 8004006:	d107      	bne.n	8004018 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004016:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800401e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	069b      	lsls	r3, r3, #26
 8004028:	429a      	cmp	r2, r3
 800402a:	d107      	bne.n	800403c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800403a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004042:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	069b      	lsls	r3, r3, #26
 800404c:	429a      	cmp	r2, r3
 800404e:	d107      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800405e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff fc05 	bl	8003874 <LL_ADC_IsEnabled>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	f040 8211 	bne.w	8004494 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	6819      	ldr	r1, [r3, #0]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	461a      	mov	r2, r3
 8004080:	f7ff fb64 	bl	800374c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	4aa1      	ldr	r2, [pc, #644]	@ (8004310 <HAL_ADC_ConfigChannel+0x4f8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	f040 812e 	bne.w	80042ec <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10b      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x2a0>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	0e9b      	lsrs	r3, r3, #26
 80040a6:	3301      	adds	r3, #1
 80040a8:	f003 031f 	and.w	r3, r3, #31
 80040ac:	2b09      	cmp	r3, #9
 80040ae:	bf94      	ite	ls
 80040b0:	2301      	movls	r3, #1
 80040b2:	2300      	movhi	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	e019      	b.n	80040ec <HAL_ADC_ConfigChannel+0x2d4>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040c0:	fa93 f3a3 	rbit	r3, r3
 80040c4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80040c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80040ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80040d0:	2320      	movs	r3, #32
 80040d2:	e003      	b.n	80040dc <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80040d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040d6:	fab3 f383 	clz	r3, r3
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	3301      	adds	r3, #1
 80040de:	f003 031f 	and.w	r3, r3, #31
 80040e2:	2b09      	cmp	r3, #9
 80040e4:	bf94      	ite	ls
 80040e6:	2301      	movls	r3, #1
 80040e8:	2300      	movhi	r3, #0
 80040ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d079      	beq.n	80041e4 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d107      	bne.n	800410c <HAL_ADC_ConfigChannel+0x2f4>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	0e9b      	lsrs	r3, r3, #26
 8004102:	3301      	adds	r3, #1
 8004104:	069b      	lsls	r3, r3, #26
 8004106:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800410a:	e015      	b.n	8004138 <HAL_ADC_ConfigChannel+0x320>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004112:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004114:	fa93 f3a3 	rbit	r3, r3
 8004118:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800411a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800411c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800411e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004124:	2320      	movs	r3, #32
 8004126:	e003      	b.n	8004130 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004128:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800412a:	fab3 f383 	clz	r3, r3
 800412e:	b2db      	uxtb	r3, r3
 8004130:	3301      	adds	r3, #1
 8004132:	069b      	lsls	r3, r3, #26
 8004134:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004140:	2b00      	cmp	r3, #0
 8004142:	d109      	bne.n	8004158 <HAL_ADC_ConfigChannel+0x340>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	0e9b      	lsrs	r3, r3, #26
 800414a:	3301      	adds	r3, #1
 800414c:	f003 031f 	and.w	r3, r3, #31
 8004150:	2101      	movs	r1, #1
 8004152:	fa01 f303 	lsl.w	r3, r1, r3
 8004156:	e017      	b.n	8004188 <HAL_ADC_ConfigChannel+0x370>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004160:	fa93 f3a3 	rbit	r3, r3
 8004164:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004168:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800416a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004170:	2320      	movs	r3, #32
 8004172:	e003      	b.n	800417c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004174:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004176:	fab3 f383 	clz	r3, r3
 800417a:	b2db      	uxtb	r3, r3
 800417c:	3301      	adds	r3, #1
 800417e:	f003 031f 	and.w	r3, r3, #31
 8004182:	2101      	movs	r1, #1
 8004184:	fa01 f303 	lsl.w	r3, r1, r3
 8004188:	ea42 0103 	orr.w	r1, r2, r3
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10a      	bne.n	80041ae <HAL_ADC_ConfigChannel+0x396>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	0e9b      	lsrs	r3, r3, #26
 800419e:	3301      	adds	r3, #1
 80041a0:	f003 021f 	and.w	r2, r3, #31
 80041a4:	4613      	mov	r3, r2
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	4413      	add	r3, r2
 80041aa:	051b      	lsls	r3, r3, #20
 80041ac:	e018      	b.n	80041e0 <HAL_ADC_ConfigChannel+0x3c8>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041b6:	fa93 f3a3 	rbit	r3, r3
 80041ba:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80041bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041be:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80041c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80041c6:	2320      	movs	r3, #32
 80041c8:	e003      	b.n	80041d2 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80041ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041cc:	fab3 f383 	clz	r3, r3
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	3301      	adds	r3, #1
 80041d4:	f003 021f 	and.w	r2, r3, #31
 80041d8:	4613      	mov	r3, r2
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	4413      	add	r3, r2
 80041de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041e0:	430b      	orrs	r3, r1
 80041e2:	e07e      	b.n	80042e2 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d107      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x3e8>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	0e9b      	lsrs	r3, r3, #26
 80041f6:	3301      	adds	r3, #1
 80041f8:	069b      	lsls	r3, r3, #26
 80041fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041fe:	e015      	b.n	800422c <HAL_ADC_ConfigChannel+0x414>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004208:	fa93 f3a3 	rbit	r3, r3
 800420c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004218:	2320      	movs	r3, #32
 800421a:	e003      	b.n	8004224 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 800421c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800421e:	fab3 f383 	clz	r3, r3
 8004222:	b2db      	uxtb	r3, r3
 8004224:	3301      	adds	r3, #1
 8004226:	069b      	lsls	r3, r3, #26
 8004228:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004234:	2b00      	cmp	r3, #0
 8004236:	d109      	bne.n	800424c <HAL_ADC_ConfigChannel+0x434>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	0e9b      	lsrs	r3, r3, #26
 800423e:	3301      	adds	r3, #1
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	2101      	movs	r1, #1
 8004246:	fa01 f303 	lsl.w	r3, r1, r3
 800424a:	e017      	b.n	800427c <HAL_ADC_ConfigChannel+0x464>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	fa93 f3a3 	rbit	r3, r3
 8004258:	61bb      	str	r3, [r7, #24]
  return result;
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004264:	2320      	movs	r3, #32
 8004266:	e003      	b.n	8004270 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	fab3 f383 	clz	r3, r3
 800426e:	b2db      	uxtb	r3, r3
 8004270:	3301      	adds	r3, #1
 8004272:	f003 031f 	and.w	r3, r3, #31
 8004276:	2101      	movs	r1, #1
 8004278:	fa01 f303 	lsl.w	r3, r1, r3
 800427c:	ea42 0103 	orr.w	r1, r2, r3
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10d      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x490>
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	0e9b      	lsrs	r3, r3, #26
 8004292:	3301      	adds	r3, #1
 8004294:	f003 021f 	and.w	r2, r3, #31
 8004298:	4613      	mov	r3, r2
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	4413      	add	r3, r2
 800429e:	3b1e      	subs	r3, #30
 80042a0:	051b      	lsls	r3, r3, #20
 80042a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80042a6:	e01b      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x4c8>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	fa93 f3a3 	rbit	r3, r3
 80042b4:	60fb      	str	r3, [r7, #12]
  return result;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80042c0:	2320      	movs	r3, #32
 80042c2:	e003      	b.n	80042cc <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	fab3 f383 	clz	r3, r3
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	3301      	adds	r3, #1
 80042ce:	f003 021f 	and.w	r2, r3, #31
 80042d2:	4613      	mov	r3, r2
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	4413      	add	r3, r2
 80042d8:	3b1e      	subs	r3, #30
 80042da:	051b      	lsls	r3, r3, #20
 80042dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042e0:	430b      	orrs	r3, r1
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	6892      	ldr	r2, [r2, #8]
 80042e6:	4619      	mov	r1, r3
 80042e8:	f7ff fa04 	bl	80036f4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f280 80cf 	bge.w	8004494 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a06      	ldr	r2, [pc, #24]	@ (8004314 <HAL_ADC_ConfigChannel+0x4fc>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d004      	beq.n	800430a <HAL_ADC_ConfigChannel+0x4f2>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a04      	ldr	r2, [pc, #16]	@ (8004318 <HAL_ADC_ConfigChannel+0x500>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d10a      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x508>
 800430a:	4b04      	ldr	r3, [pc, #16]	@ (800431c <HAL_ADC_ConfigChannel+0x504>)
 800430c:	e009      	b.n	8004322 <HAL_ADC_ConfigChannel+0x50a>
 800430e:	bf00      	nop
 8004310:	47ff0000 	.word	0x47ff0000
 8004314:	40022000 	.word	0x40022000
 8004318:	40022100 	.word	0x40022100
 800431c:	40022300 	.word	0x40022300
 8004320:	4b61      	ldr	r3, [pc, #388]	@ (80044a8 <HAL_ADC_ConfigChannel+0x690>)
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff f932 	bl	800358c <LL_ADC_GetCommonPathInternalCh>
 8004328:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a5f      	ldr	r2, [pc, #380]	@ (80044ac <HAL_ADC_ConfigChannel+0x694>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d004      	beq.n	800433e <HAL_ADC_ConfigChannel+0x526>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a5d      	ldr	r2, [pc, #372]	@ (80044b0 <HAL_ADC_ConfigChannel+0x698>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d10e      	bne.n	800435c <HAL_ADC_ConfigChannel+0x544>
 800433e:	485b      	ldr	r0, [pc, #364]	@ (80044ac <HAL_ADC_ConfigChannel+0x694>)
 8004340:	f7ff fa98 	bl	8003874 <LL_ADC_IsEnabled>
 8004344:	4604      	mov	r4, r0
 8004346:	485a      	ldr	r0, [pc, #360]	@ (80044b0 <HAL_ADC_ConfigChannel+0x698>)
 8004348:	f7ff fa94 	bl	8003874 <LL_ADC_IsEnabled>
 800434c:	4603      	mov	r3, r0
 800434e:	4323      	orrs	r3, r4
 8004350:	2b00      	cmp	r3, #0
 8004352:	bf0c      	ite	eq
 8004354:	2301      	moveq	r3, #1
 8004356:	2300      	movne	r3, #0
 8004358:	b2db      	uxtb	r3, r3
 800435a:	e008      	b.n	800436e <HAL_ADC_ConfigChannel+0x556>
 800435c:	4855      	ldr	r0, [pc, #340]	@ (80044b4 <HAL_ADC_ConfigChannel+0x69c>)
 800435e:	f7ff fa89 	bl	8003874 <LL_ADC_IsEnabled>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	bf0c      	ite	eq
 8004368:	2301      	moveq	r3, #1
 800436a:	2300      	movne	r3, #0
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d07d      	beq.n	800446e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a50      	ldr	r2, [pc, #320]	@ (80044b8 <HAL_ADC_ConfigChannel+0x6a0>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d130      	bne.n	80043de <HAL_ADC_ConfigChannel+0x5c6>
 800437c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800437e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d12b      	bne.n	80043de <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a4a      	ldr	r2, [pc, #296]	@ (80044b4 <HAL_ADC_ConfigChannel+0x69c>)
 800438c:	4293      	cmp	r3, r2
 800438e:	f040 8081 	bne.w	8004494 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a45      	ldr	r2, [pc, #276]	@ (80044ac <HAL_ADC_ConfigChannel+0x694>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d004      	beq.n	80043a6 <HAL_ADC_ConfigChannel+0x58e>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a43      	ldr	r2, [pc, #268]	@ (80044b0 <HAL_ADC_ConfigChannel+0x698>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d101      	bne.n	80043aa <HAL_ADC_ConfigChannel+0x592>
 80043a6:	4a45      	ldr	r2, [pc, #276]	@ (80044bc <HAL_ADC_ConfigChannel+0x6a4>)
 80043a8:	e000      	b.n	80043ac <HAL_ADC_ConfigChannel+0x594>
 80043aa:	4a3f      	ldr	r2, [pc, #252]	@ (80044a8 <HAL_ADC_ConfigChannel+0x690>)
 80043ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043ae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80043b2:	4619      	mov	r1, r3
 80043b4:	4610      	mov	r0, r2
 80043b6:	f7ff f8d6 	bl	8003566 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043ba:	4b41      	ldr	r3, [pc, #260]	@ (80044c0 <HAL_ADC_ConfigChannel+0x6a8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	099b      	lsrs	r3, r3, #6
 80043c0:	4a40      	ldr	r2, [pc, #256]	@ (80044c4 <HAL_ADC_ConfigChannel+0x6ac>)
 80043c2:	fba2 2303 	umull	r2, r3, r2, r3
 80043c6:	099b      	lsrs	r3, r3, #6
 80043c8:	3301      	adds	r3, #1
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80043ce:	e002      	b.n	80043d6 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1f9      	bne.n	80043d0 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043dc:	e05a      	b.n	8004494 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a39      	ldr	r2, [pc, #228]	@ (80044c8 <HAL_ADC_ConfigChannel+0x6b0>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d11e      	bne.n	8004426 <HAL_ADC_ConfigChannel+0x60e>
 80043e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d119      	bne.n	8004426 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a2f      	ldr	r2, [pc, #188]	@ (80044b4 <HAL_ADC_ConfigChannel+0x69c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d14b      	bne.n	8004494 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a2a      	ldr	r2, [pc, #168]	@ (80044ac <HAL_ADC_ConfigChannel+0x694>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d004      	beq.n	8004410 <HAL_ADC_ConfigChannel+0x5f8>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a29      	ldr	r2, [pc, #164]	@ (80044b0 <HAL_ADC_ConfigChannel+0x698>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d101      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x5fc>
 8004410:	4a2a      	ldr	r2, [pc, #168]	@ (80044bc <HAL_ADC_ConfigChannel+0x6a4>)
 8004412:	e000      	b.n	8004416 <HAL_ADC_ConfigChannel+0x5fe>
 8004414:	4a24      	ldr	r2, [pc, #144]	@ (80044a8 <HAL_ADC_ConfigChannel+0x690>)
 8004416:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004418:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800441c:	4619      	mov	r1, r3
 800441e:	4610      	mov	r0, r2
 8004420:	f7ff f8a1 	bl	8003566 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004424:	e036      	b.n	8004494 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a28      	ldr	r2, [pc, #160]	@ (80044cc <HAL_ADC_ConfigChannel+0x6b4>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d131      	bne.n	8004494 <HAL_ADC_ConfigChannel+0x67c>
 8004430:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004432:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d12c      	bne.n	8004494 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a1d      	ldr	r2, [pc, #116]	@ (80044b4 <HAL_ADC_ConfigChannel+0x69c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d127      	bne.n	8004494 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a18      	ldr	r2, [pc, #96]	@ (80044ac <HAL_ADC_ConfigChannel+0x694>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d004      	beq.n	8004458 <HAL_ADC_ConfigChannel+0x640>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a17      	ldr	r2, [pc, #92]	@ (80044b0 <HAL_ADC_ConfigChannel+0x698>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d101      	bne.n	800445c <HAL_ADC_ConfigChannel+0x644>
 8004458:	4a18      	ldr	r2, [pc, #96]	@ (80044bc <HAL_ADC_ConfigChannel+0x6a4>)
 800445a:	e000      	b.n	800445e <HAL_ADC_ConfigChannel+0x646>
 800445c:	4a12      	ldr	r2, [pc, #72]	@ (80044a8 <HAL_ADC_ConfigChannel+0x690>)
 800445e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004460:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004464:	4619      	mov	r1, r3
 8004466:	4610      	mov	r0, r2
 8004468:	f7ff f87d 	bl	8003566 <LL_ADC_SetCommonPathInternalCh>
 800446c:	e012      	b.n	8004494 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004472:	f043 0220 	orr.w	r2, r3, #32
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004480:	e008      	b.n	8004494 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004486:	f043 0220 	orr.w	r2, r3, #32
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800449c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3784      	adds	r7, #132	@ 0x84
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd90      	pop	{r4, r7, pc}
 80044a8:	58026300 	.word	0x58026300
 80044ac:	40022000 	.word	0x40022000
 80044b0:	40022100 	.word	0x40022100
 80044b4:	58026000 	.word	0x58026000
 80044b8:	cb840000 	.word	0xcb840000
 80044bc:	40022300 	.word	0x40022300
 80044c0:	24000004 	.word	0x24000004
 80044c4:	053e2d63 	.word	0x053e2d63
 80044c8:	c7520000 	.word	0xc7520000
 80044cc:	cfb80000 	.word	0xcfb80000

080044d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4618      	mov	r0, r3
 80044de:	f7ff f9c9 	bl	8003874 <LL_ADC_IsEnabled>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d16e      	bne.n	80045c6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	4b38      	ldr	r3, [pc, #224]	@ (80045d0 <ADC_Enable+0x100>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00d      	beq.n	8004512 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044fa:	f043 0210 	orr.w	r2, r3, #16
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004506:	f043 0201 	orr.w	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e05a      	b.n	80045c8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff f998 	bl	800384c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800451c:	f7fe ffd4 	bl	80034c8 <HAL_GetTick>
 8004520:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a2b      	ldr	r2, [pc, #172]	@ (80045d4 <ADC_Enable+0x104>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d004      	beq.n	8004536 <ADC_Enable+0x66>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a29      	ldr	r2, [pc, #164]	@ (80045d8 <ADC_Enable+0x108>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d101      	bne.n	800453a <ADC_Enable+0x6a>
 8004536:	4b29      	ldr	r3, [pc, #164]	@ (80045dc <ADC_Enable+0x10c>)
 8004538:	e000      	b.n	800453c <ADC_Enable+0x6c>
 800453a:	4b29      	ldr	r3, [pc, #164]	@ (80045e0 <ADC_Enable+0x110>)
 800453c:	4618      	mov	r0, r3
 800453e:	f7ff f929 	bl	8003794 <LL_ADC_GetMultimode>
 8004542:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a23      	ldr	r2, [pc, #140]	@ (80045d8 <ADC_Enable+0x108>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d002      	beq.n	8004554 <ADC_Enable+0x84>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	e000      	b.n	8004556 <ADC_Enable+0x86>
 8004554:	4b1f      	ldr	r3, [pc, #124]	@ (80045d4 <ADC_Enable+0x104>)
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6812      	ldr	r2, [r2, #0]
 800455a:	4293      	cmp	r3, r2
 800455c:	d02c      	beq.n	80045b8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d130      	bne.n	80045c6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004564:	e028      	b.n	80045b8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff f982 	bl	8003874 <LL_ADC_IsEnabled>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d104      	bne.n	8004580 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	f7ff f966 	bl	800384c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004580:	f7fe ffa2 	bl	80034c8 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d914      	bls.n	80045b8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b01      	cmp	r3, #1
 800459a:	d00d      	beq.n	80045b8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a0:	f043 0210 	orr.w	r2, r3, #16
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ac:	f043 0201 	orr.w	r2, r3, #1
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e007      	b.n	80045c8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d1cf      	bne.n	8004566 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	8000003f 	.word	0x8000003f
 80045d4:	40022000 	.word	0x40022000
 80045d8:	40022100 	.word	0x40022100
 80045dc:	40022300 	.word	0x40022300
 80045e0:	58026300 	.word	0x58026300

080045e4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d14b      	bne.n	8004696 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004602:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0308 	and.w	r3, r3, #8
 8004614:	2b00      	cmp	r3, #0
 8004616:	d021      	beq.n	800465c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff f817 	bl	8003650 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d032      	beq.n	800468e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d12b      	bne.n	800468e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800463a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004646:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d11f      	bne.n	800468e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004652:	f043 0201 	orr.w	r2, r3, #1
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	655a      	str	r2, [r3, #84]	@ 0x54
 800465a:	e018      	b.n	800468e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d111      	bne.n	800468e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800466e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800467a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d105      	bne.n	800468e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004686:	f043 0201 	orr.w	r2, r3, #1
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f7ff fba4 	bl	8003ddc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004694:	e00e      	b.n	80046b4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800469a:	f003 0310 	and.w	r3, r3, #16
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f7ff fbae 	bl	8003e04 <HAL_ADC_ErrorCallback>
}
 80046a8:	e004      	b.n	80046b4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	4798      	blx	r3
}
 80046b4:	bf00      	nop
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f7ff fb90 	bl	8003df0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046d0:	bf00      	nop
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f6:	f043 0204 	orr.w	r2, r3, #4
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f7ff fb80 	bl	8003e04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004704:	bf00      	nop
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a7a      	ldr	r2, [pc, #488]	@ (8004904 <ADC_ConfigureBoostMode+0x1f8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d004      	beq.n	8004728 <ADC_ConfigureBoostMode+0x1c>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a79      	ldr	r2, [pc, #484]	@ (8004908 <ADC_ConfigureBoostMode+0x1fc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d109      	bne.n	800473c <ADC_ConfigureBoostMode+0x30>
 8004728:	4b78      	ldr	r3, [pc, #480]	@ (800490c <ADC_ConfigureBoostMode+0x200>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004730:	2b00      	cmp	r3, #0
 8004732:	bf14      	ite	ne
 8004734:	2301      	movne	r3, #1
 8004736:	2300      	moveq	r3, #0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	e008      	b.n	800474e <ADC_ConfigureBoostMode+0x42>
 800473c:	4b74      	ldr	r3, [pc, #464]	@ (8004910 <ADC_ConfigureBoostMode+0x204>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004744:	2b00      	cmp	r3, #0
 8004746:	bf14      	ite	ne
 8004748:	2301      	movne	r3, #1
 800474a:	2300      	moveq	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d01c      	beq.n	800478c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004752:	f004 fabb 	bl	8008ccc <HAL_RCC_GetHCLKFreq>
 8004756:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004760:	d010      	beq.n	8004784 <ADC_ConfigureBoostMode+0x78>
 8004762:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004766:	d873      	bhi.n	8004850 <ADC_ConfigureBoostMode+0x144>
 8004768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800476c:	d002      	beq.n	8004774 <ADC_ConfigureBoostMode+0x68>
 800476e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004772:	d16d      	bne.n	8004850 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	0c1b      	lsrs	r3, r3, #16
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004780:	60fb      	str	r3, [r7, #12]
        break;
 8004782:	e068      	b.n	8004856 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	089b      	lsrs	r3, r3, #2
 8004788:	60fb      	str	r3, [r7, #12]
        break;
 800478a:	e064      	b.n	8004856 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800478c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004790:	f04f 0100 	mov.w	r1, #0
 8004794:	f005 fd42 	bl	800a21c <HAL_RCCEx_GetPeriphCLKFreq>
 8004798:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80047a2:	d051      	beq.n	8004848 <ADC_ConfigureBoostMode+0x13c>
 80047a4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80047a8:	d854      	bhi.n	8004854 <ADC_ConfigureBoostMode+0x148>
 80047aa:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80047ae:	d047      	beq.n	8004840 <ADC_ConfigureBoostMode+0x134>
 80047b0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80047b4:	d84e      	bhi.n	8004854 <ADC_ConfigureBoostMode+0x148>
 80047b6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80047ba:	d03d      	beq.n	8004838 <ADC_ConfigureBoostMode+0x12c>
 80047bc:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80047c0:	d848      	bhi.n	8004854 <ADC_ConfigureBoostMode+0x148>
 80047c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047c6:	d033      	beq.n	8004830 <ADC_ConfigureBoostMode+0x124>
 80047c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047cc:	d842      	bhi.n	8004854 <ADC_ConfigureBoostMode+0x148>
 80047ce:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80047d2:	d029      	beq.n	8004828 <ADC_ConfigureBoostMode+0x11c>
 80047d4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80047d8:	d83c      	bhi.n	8004854 <ADC_ConfigureBoostMode+0x148>
 80047da:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80047de:	d01a      	beq.n	8004816 <ADC_ConfigureBoostMode+0x10a>
 80047e0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80047e4:	d836      	bhi.n	8004854 <ADC_ConfigureBoostMode+0x148>
 80047e6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80047ea:	d014      	beq.n	8004816 <ADC_ConfigureBoostMode+0x10a>
 80047ec:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80047f0:	d830      	bhi.n	8004854 <ADC_ConfigureBoostMode+0x148>
 80047f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047f6:	d00e      	beq.n	8004816 <ADC_ConfigureBoostMode+0x10a>
 80047f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047fc:	d82a      	bhi.n	8004854 <ADC_ConfigureBoostMode+0x148>
 80047fe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004802:	d008      	beq.n	8004816 <ADC_ConfigureBoostMode+0x10a>
 8004804:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004808:	d824      	bhi.n	8004854 <ADC_ConfigureBoostMode+0x148>
 800480a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800480e:	d002      	beq.n	8004816 <ADC_ConfigureBoostMode+0x10a>
 8004810:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004814:	d11e      	bne.n	8004854 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	0c9b      	lsrs	r3, r3, #18
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	fbb2 f3f3 	udiv	r3, r2, r3
 8004824:	60fb      	str	r3, [r7, #12]
        break;
 8004826:	e016      	b.n	8004856 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	091b      	lsrs	r3, r3, #4
 800482c:	60fb      	str	r3, [r7, #12]
        break;
 800482e:	e012      	b.n	8004856 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	60fb      	str	r3, [r7, #12]
        break;
 8004836:	e00e      	b.n	8004856 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	099b      	lsrs	r3, r3, #6
 800483c:	60fb      	str	r3, [r7, #12]
        break;
 800483e:	e00a      	b.n	8004856 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	09db      	lsrs	r3, r3, #7
 8004844:	60fb      	str	r3, [r7, #12]
        break;
 8004846:	e006      	b.n	8004856 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	0a1b      	lsrs	r3, r3, #8
 800484c:	60fb      	str	r3, [r7, #12]
        break;
 800484e:	e002      	b.n	8004856 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004850:	bf00      	nop
 8004852:	e000      	b.n	8004856 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004854:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004856:	f7fe fe67 	bl	8003528 <HAL_GetREVID>
 800485a:	4603      	mov	r3, r0
 800485c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004860:	4293      	cmp	r3, r2
 8004862:	d815      	bhi.n	8004890 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4a2b      	ldr	r2, [pc, #172]	@ (8004914 <ADC_ConfigureBoostMode+0x208>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d908      	bls.n	800487e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800487a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800487c:	e03e      	b.n	80048fc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800488c:	609a      	str	r2, [r3, #8]
}
 800488e:	e035      	b.n	80048fc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	085b      	lsrs	r3, r3, #1
 8004894:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	4a1f      	ldr	r2, [pc, #124]	@ (8004918 <ADC_ConfigureBoostMode+0x20c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d808      	bhi.n	80048b0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80048ac:	609a      	str	r2, [r3, #8]
}
 80048ae:	e025      	b.n	80048fc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4a1a      	ldr	r2, [pc, #104]	@ (800491c <ADC_ConfigureBoostMode+0x210>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d80a      	bhi.n	80048ce <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048ca:	609a      	str	r2, [r3, #8]
}
 80048cc:	e016      	b.n	80048fc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	4a13      	ldr	r2, [pc, #76]	@ (8004920 <ADC_ConfigureBoostMode+0x214>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d80a      	bhi.n	80048ec <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048e8:	609a      	str	r2, [r3, #8]
}
 80048ea:	e007      	b.n	80048fc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80048fa:	609a      	str	r2, [r3, #8]
}
 80048fc:	bf00      	nop
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	40022000 	.word	0x40022000
 8004908:	40022100 	.word	0x40022100
 800490c:	40022300 	.word	0x40022300
 8004910:	58026300 	.word	0x58026300
 8004914:	01312d00 	.word	0x01312d00
 8004918:	005f5e10 	.word	0x005f5e10
 800491c:	00bebc20 	.word	0x00bebc20
 8004920:	017d7840 	.word	0x017d7840

08004924 <LL_ADC_IsEnabled>:
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b01      	cmp	r3, #1
 8004936:	d101      	bne.n	800493c <LL_ADC_IsEnabled+0x18>
 8004938:	2301      	movs	r3, #1
 800493a:	e000      	b.n	800493e <LL_ADC_IsEnabled+0x1a>
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <LL_ADC_REG_IsConversionOngoing>:
{
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 0304 	and.w	r3, r3, #4
 800495a:	2b04      	cmp	r3, #4
 800495c:	d101      	bne.n	8004962 <LL_ADC_REG_IsConversionOngoing+0x18>
 800495e:	2301      	movs	r3, #1
 8004960:	e000      	b.n	8004964 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004970:	b590      	push	{r4, r7, lr}
 8004972:	b09f      	sub	sp, #124	@ 0x7c
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800498a:	2302      	movs	r3, #2
 800498c:	e0be      	b.n	8004b0c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004996:	2300      	movs	r3, #0
 8004998:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800499a:	2300      	movs	r3, #0
 800499c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a5c      	ldr	r2, [pc, #368]	@ (8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d102      	bne.n	80049ae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80049a8:	4b5b      	ldr	r3, [pc, #364]	@ (8004b18 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80049aa:	60bb      	str	r3, [r7, #8]
 80049ac:	e001      	b.n	80049b2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80049ae:	2300      	movs	r3, #0
 80049b0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10b      	bne.n	80049d0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049bc:	f043 0220 	orr.w	r2, r3, #32
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e09d      	b.n	8004b0c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff ffb9 	bl	800494a <LL_ADC_REG_IsConversionOngoing>
 80049d8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff ffb3 	bl	800494a <LL_ADC_REG_IsConversionOngoing>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d17f      	bne.n	8004aea <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80049ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d17c      	bne.n	8004aea <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a47      	ldr	r2, [pc, #284]	@ (8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d004      	beq.n	8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a46      	ldr	r2, [pc, #280]	@ (8004b18 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d101      	bne.n	8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004a04:	4b45      	ldr	r3, [pc, #276]	@ (8004b1c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a06:	e000      	b.n	8004a0a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004a08:	4b45      	ldr	r3, [pc, #276]	@ (8004b20 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a0a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d039      	beq.n	8004a88 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004a14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	431a      	orrs	r2, r3
 8004a22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a24:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a3a      	ldr	r2, [pc, #232]	@ (8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d004      	beq.n	8004a3a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a38      	ldr	r2, [pc, #224]	@ (8004b18 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d10e      	bne.n	8004a58 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004a3a:	4836      	ldr	r0, [pc, #216]	@ (8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004a3c:	f7ff ff72 	bl	8004924 <LL_ADC_IsEnabled>
 8004a40:	4604      	mov	r4, r0
 8004a42:	4835      	ldr	r0, [pc, #212]	@ (8004b18 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004a44:	f7ff ff6e 	bl	8004924 <LL_ADC_IsEnabled>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	4323      	orrs	r3, r4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	bf0c      	ite	eq
 8004a50:	2301      	moveq	r3, #1
 8004a52:	2300      	movne	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	e008      	b.n	8004a6a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004a58:	4832      	ldr	r0, [pc, #200]	@ (8004b24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004a5a:	f7ff ff63 	bl	8004924 <LL_ADC_IsEnabled>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	bf0c      	ite	eq
 8004a64:	2301      	moveq	r3, #1
 8004a66:	2300      	movne	r3, #0
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d047      	beq.n	8004afe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004a6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a70:	689a      	ldr	r2, [r3, #8]
 8004a72:	4b2d      	ldr	r3, [pc, #180]	@ (8004b28 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	6811      	ldr	r1, [r2, #0]
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	6892      	ldr	r2, [r2, #8]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	431a      	orrs	r2, r3
 8004a82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a84:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a86:	e03a      	b.n	8004afe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004a88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a92:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a1e      	ldr	r2, [pc, #120]	@ (8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d004      	beq.n	8004aa8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a1d      	ldr	r2, [pc, #116]	@ (8004b18 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d10e      	bne.n	8004ac6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004aa8:	481a      	ldr	r0, [pc, #104]	@ (8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004aaa:	f7ff ff3b 	bl	8004924 <LL_ADC_IsEnabled>
 8004aae:	4604      	mov	r4, r0
 8004ab0:	4819      	ldr	r0, [pc, #100]	@ (8004b18 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004ab2:	f7ff ff37 	bl	8004924 <LL_ADC_IsEnabled>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	4323      	orrs	r3, r4
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	bf0c      	ite	eq
 8004abe:	2301      	moveq	r3, #1
 8004ac0:	2300      	movne	r3, #0
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	e008      	b.n	8004ad8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004ac6:	4817      	ldr	r0, [pc, #92]	@ (8004b24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004ac8:	f7ff ff2c 	bl	8004924 <LL_ADC_IsEnabled>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	bf0c      	ite	eq
 8004ad2:	2301      	moveq	r3, #1
 8004ad4:	2300      	movne	r3, #0
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d010      	beq.n	8004afe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004adc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	4b11      	ldr	r3, [pc, #68]	@ (8004b28 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004ae6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ae8:	e009      	b.n	8004afe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aee:	f043 0220 	orr.w	r2, r3, #32
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004afc:	e000      	b.n	8004b00 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004afe:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004b08:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	377c      	adds	r7, #124	@ 0x7c
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd90      	pop	{r4, r7, pc}
 8004b14:	40022000 	.word	0x40022000
 8004b18:	40022100 	.word	0x40022100
 8004b1c:	40022300 	.word	0x40022300
 8004b20:	58026300 	.word	0x58026300
 8004b24:	58026000 	.word	0x58026000
 8004b28:	fffff0e0 	.word	0xfffff0e0

08004b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b6c <__NVIC_SetPriorityGrouping+0x40>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b48:	4013      	ands	r3, r2
 8004b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b54:	4b06      	ldr	r3, [pc, #24]	@ (8004b70 <__NVIC_SetPriorityGrouping+0x44>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b5a:	4a04      	ldr	r2, [pc, #16]	@ (8004b6c <__NVIC_SetPriorityGrouping+0x40>)
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	60d3      	str	r3, [r2, #12]
}
 8004b60:	bf00      	nop
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	e000ed00 	.word	0xe000ed00
 8004b70:	05fa0000 	.word	0x05fa0000

08004b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b78:	4b04      	ldr	r3, [pc, #16]	@ (8004b8c <__NVIC_GetPriorityGrouping+0x18>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	0a1b      	lsrs	r3, r3, #8
 8004b7e:	f003 0307 	and.w	r3, r3, #7
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	e000ed00 	.word	0xe000ed00

08004b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	4603      	mov	r3, r0
 8004b98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	db0b      	blt.n	8004bba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ba2:	88fb      	ldrh	r3, [r7, #6]
 8004ba4:	f003 021f 	and.w	r2, r3, #31
 8004ba8:	4907      	ldr	r1, [pc, #28]	@ (8004bc8 <__NVIC_EnableIRQ+0x38>)
 8004baa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bae:	095b      	lsrs	r3, r3, #5
 8004bb0:	2001      	movs	r0, #1
 8004bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8004bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	e000e100 	.word	0xe000e100

08004bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	6039      	str	r1, [r7, #0]
 8004bd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	db0a      	blt.n	8004bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	490c      	ldr	r1, [pc, #48]	@ (8004c18 <__NVIC_SetPriority+0x4c>)
 8004be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bea:	0112      	lsls	r2, r2, #4
 8004bec:	b2d2      	uxtb	r2, r2
 8004bee:	440b      	add	r3, r1
 8004bf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bf4:	e00a      	b.n	8004c0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	4908      	ldr	r1, [pc, #32]	@ (8004c1c <__NVIC_SetPriority+0x50>)
 8004bfc:	88fb      	ldrh	r3, [r7, #6]
 8004bfe:	f003 030f 	and.w	r3, r3, #15
 8004c02:	3b04      	subs	r3, #4
 8004c04:	0112      	lsls	r2, r2, #4
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	440b      	add	r3, r1
 8004c0a:	761a      	strb	r2, [r3, #24]
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	e000e100 	.word	0xe000e100
 8004c1c:	e000ed00 	.word	0xe000ed00

08004c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b089      	sub	sp, #36	@ 0x24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	f1c3 0307 	rsb	r3, r3, #7
 8004c3a:	2b04      	cmp	r3, #4
 8004c3c:	bf28      	it	cs
 8004c3e:	2304      	movcs	r3, #4
 8004c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	3304      	adds	r3, #4
 8004c46:	2b06      	cmp	r3, #6
 8004c48:	d902      	bls.n	8004c50 <NVIC_EncodePriority+0x30>
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	3b03      	subs	r3, #3
 8004c4e:	e000      	b.n	8004c52 <NVIC_EncodePriority+0x32>
 8004c50:	2300      	movs	r3, #0
 8004c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5e:	43da      	mvns	r2, r3
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	401a      	ands	r2, r3
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c68:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c72:	43d9      	mvns	r1, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c78:	4313      	orrs	r3, r2
         );
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3724      	adds	r7, #36	@ 0x24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b082      	sub	sp, #8
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7ff ff4c 	bl	8004b2c <__NVIC_SetPriorityGrouping>
}
 8004c94:	bf00      	nop
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
 8004ca8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004caa:	f7ff ff63 	bl	8004b74 <__NVIC_GetPriorityGrouping>
 8004cae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	68b9      	ldr	r1, [r7, #8]
 8004cb4:	6978      	ldr	r0, [r7, #20]
 8004cb6:	f7ff ffb3 	bl	8004c20 <NVIC_EncodePriority>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004cc0:	4611      	mov	r1, r2
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff ff82 	bl	8004bcc <__NVIC_SetPriority>
}
 8004cc8:	bf00      	nop
 8004cca:	3718      	adds	r7, #24
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7ff ff56 	bl	8004b90 <__NVIC_EnableIRQ>
}
 8004ce4:	bf00      	nop
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004cf4:	f7fe fbe8 	bl	80034c8 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e316      	b.n	8005332 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a66      	ldr	r2, [pc, #408]	@ (8004ea4 <HAL_DMA_Init+0x1b8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d04a      	beq.n	8004da4 <HAL_DMA_Init+0xb8>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a65      	ldr	r2, [pc, #404]	@ (8004ea8 <HAL_DMA_Init+0x1bc>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d045      	beq.n	8004da4 <HAL_DMA_Init+0xb8>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a63      	ldr	r2, [pc, #396]	@ (8004eac <HAL_DMA_Init+0x1c0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d040      	beq.n	8004da4 <HAL_DMA_Init+0xb8>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a62      	ldr	r2, [pc, #392]	@ (8004eb0 <HAL_DMA_Init+0x1c4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d03b      	beq.n	8004da4 <HAL_DMA_Init+0xb8>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a60      	ldr	r2, [pc, #384]	@ (8004eb4 <HAL_DMA_Init+0x1c8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d036      	beq.n	8004da4 <HAL_DMA_Init+0xb8>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a5f      	ldr	r2, [pc, #380]	@ (8004eb8 <HAL_DMA_Init+0x1cc>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d031      	beq.n	8004da4 <HAL_DMA_Init+0xb8>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a5d      	ldr	r2, [pc, #372]	@ (8004ebc <HAL_DMA_Init+0x1d0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d02c      	beq.n	8004da4 <HAL_DMA_Init+0xb8>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a5c      	ldr	r2, [pc, #368]	@ (8004ec0 <HAL_DMA_Init+0x1d4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d027      	beq.n	8004da4 <HAL_DMA_Init+0xb8>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a5a      	ldr	r2, [pc, #360]	@ (8004ec4 <HAL_DMA_Init+0x1d8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d022      	beq.n	8004da4 <HAL_DMA_Init+0xb8>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a59      	ldr	r2, [pc, #356]	@ (8004ec8 <HAL_DMA_Init+0x1dc>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d01d      	beq.n	8004da4 <HAL_DMA_Init+0xb8>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a57      	ldr	r2, [pc, #348]	@ (8004ecc <HAL_DMA_Init+0x1e0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d018      	beq.n	8004da4 <HAL_DMA_Init+0xb8>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a56      	ldr	r2, [pc, #344]	@ (8004ed0 <HAL_DMA_Init+0x1e4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d013      	beq.n	8004da4 <HAL_DMA_Init+0xb8>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a54      	ldr	r2, [pc, #336]	@ (8004ed4 <HAL_DMA_Init+0x1e8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00e      	beq.n	8004da4 <HAL_DMA_Init+0xb8>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a53      	ldr	r2, [pc, #332]	@ (8004ed8 <HAL_DMA_Init+0x1ec>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d009      	beq.n	8004da4 <HAL_DMA_Init+0xb8>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a51      	ldr	r2, [pc, #324]	@ (8004edc <HAL_DMA_Init+0x1f0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d004      	beq.n	8004da4 <HAL_DMA_Init+0xb8>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a50      	ldr	r2, [pc, #320]	@ (8004ee0 <HAL_DMA_Init+0x1f4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d101      	bne.n	8004da8 <HAL_DMA_Init+0xbc>
 8004da4:	2301      	movs	r3, #1
 8004da6:	e000      	b.n	8004daa <HAL_DMA_Init+0xbe>
 8004da8:	2300      	movs	r3, #0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 813b 	beq.w	8005026 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a37      	ldr	r2, [pc, #220]	@ (8004ea4 <HAL_DMA_Init+0x1b8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d04a      	beq.n	8004e60 <HAL_DMA_Init+0x174>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a36      	ldr	r2, [pc, #216]	@ (8004ea8 <HAL_DMA_Init+0x1bc>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d045      	beq.n	8004e60 <HAL_DMA_Init+0x174>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a34      	ldr	r2, [pc, #208]	@ (8004eac <HAL_DMA_Init+0x1c0>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d040      	beq.n	8004e60 <HAL_DMA_Init+0x174>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a33      	ldr	r2, [pc, #204]	@ (8004eb0 <HAL_DMA_Init+0x1c4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d03b      	beq.n	8004e60 <HAL_DMA_Init+0x174>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a31      	ldr	r2, [pc, #196]	@ (8004eb4 <HAL_DMA_Init+0x1c8>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d036      	beq.n	8004e60 <HAL_DMA_Init+0x174>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a30      	ldr	r2, [pc, #192]	@ (8004eb8 <HAL_DMA_Init+0x1cc>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d031      	beq.n	8004e60 <HAL_DMA_Init+0x174>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a2e      	ldr	r2, [pc, #184]	@ (8004ebc <HAL_DMA_Init+0x1d0>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d02c      	beq.n	8004e60 <HAL_DMA_Init+0x174>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a2d      	ldr	r2, [pc, #180]	@ (8004ec0 <HAL_DMA_Init+0x1d4>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d027      	beq.n	8004e60 <HAL_DMA_Init+0x174>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a2b      	ldr	r2, [pc, #172]	@ (8004ec4 <HAL_DMA_Init+0x1d8>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d022      	beq.n	8004e60 <HAL_DMA_Init+0x174>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a2a      	ldr	r2, [pc, #168]	@ (8004ec8 <HAL_DMA_Init+0x1dc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d01d      	beq.n	8004e60 <HAL_DMA_Init+0x174>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a28      	ldr	r2, [pc, #160]	@ (8004ecc <HAL_DMA_Init+0x1e0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d018      	beq.n	8004e60 <HAL_DMA_Init+0x174>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a27      	ldr	r2, [pc, #156]	@ (8004ed0 <HAL_DMA_Init+0x1e4>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d013      	beq.n	8004e60 <HAL_DMA_Init+0x174>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a25      	ldr	r2, [pc, #148]	@ (8004ed4 <HAL_DMA_Init+0x1e8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00e      	beq.n	8004e60 <HAL_DMA_Init+0x174>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a24      	ldr	r2, [pc, #144]	@ (8004ed8 <HAL_DMA_Init+0x1ec>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d009      	beq.n	8004e60 <HAL_DMA_Init+0x174>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a22      	ldr	r2, [pc, #136]	@ (8004edc <HAL_DMA_Init+0x1f0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d004      	beq.n	8004e60 <HAL_DMA_Init+0x174>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a21      	ldr	r2, [pc, #132]	@ (8004ee0 <HAL_DMA_Init+0x1f4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d108      	bne.n	8004e72 <HAL_DMA_Init+0x186>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0201 	bic.w	r2, r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	e007      	b.n	8004e82 <HAL_DMA_Init+0x196>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0201 	bic.w	r2, r2, #1
 8004e80:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e82:	e02f      	b.n	8004ee4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e84:	f7fe fb20 	bl	80034c8 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b05      	cmp	r3, #5
 8004e90:	d928      	bls.n	8004ee4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2220      	movs	r2, #32
 8004e96:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2203      	movs	r2, #3
 8004e9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e246      	b.n	8005332 <HAL_DMA_Init+0x646>
 8004ea4:	40020010 	.word	0x40020010
 8004ea8:	40020028 	.word	0x40020028
 8004eac:	40020040 	.word	0x40020040
 8004eb0:	40020058 	.word	0x40020058
 8004eb4:	40020070 	.word	0x40020070
 8004eb8:	40020088 	.word	0x40020088
 8004ebc:	400200a0 	.word	0x400200a0
 8004ec0:	400200b8 	.word	0x400200b8
 8004ec4:	40020410 	.word	0x40020410
 8004ec8:	40020428 	.word	0x40020428
 8004ecc:	40020440 	.word	0x40020440
 8004ed0:	40020458 	.word	0x40020458
 8004ed4:	40020470 	.word	0x40020470
 8004ed8:	40020488 	.word	0x40020488
 8004edc:	400204a0 	.word	0x400204a0
 8004ee0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1c8      	bne.n	8004e84 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	4b83      	ldr	r3, [pc, #524]	@ (800510c <HAL_DMA_Init+0x420>)
 8004efe:	4013      	ands	r3, r2
 8004f00:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004f0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f16:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f22:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f34:	2b04      	cmp	r3, #4
 8004f36:	d107      	bne.n	8004f48 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f40:	4313      	orrs	r3, r2
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004f48:	4b71      	ldr	r3, [pc, #452]	@ (8005110 <HAL_DMA_Init+0x424>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	4b71      	ldr	r3, [pc, #452]	@ (8005114 <HAL_DMA_Init+0x428>)
 8004f4e:	4013      	ands	r3, r2
 8004f50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f54:	d328      	bcc.n	8004fa8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2b28      	cmp	r3, #40	@ 0x28
 8004f5c:	d903      	bls.n	8004f66 <HAL_DMA_Init+0x27a>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f64:	d917      	bls.n	8004f96 <HAL_DMA_Init+0x2aa>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f6c:	d903      	bls.n	8004f76 <HAL_DMA_Init+0x28a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b42      	cmp	r3, #66	@ 0x42
 8004f74:	d90f      	bls.n	8004f96 <HAL_DMA_Init+0x2aa>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2b46      	cmp	r3, #70	@ 0x46
 8004f7c:	d903      	bls.n	8004f86 <HAL_DMA_Init+0x29a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b48      	cmp	r3, #72	@ 0x48
 8004f84:	d907      	bls.n	8004f96 <HAL_DMA_Init+0x2aa>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b4e      	cmp	r3, #78	@ 0x4e
 8004f8c:	d905      	bls.n	8004f9a <HAL_DMA_Init+0x2ae>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	2b52      	cmp	r3, #82	@ 0x52
 8004f94:	d801      	bhi.n	8004f9a <HAL_DMA_Init+0x2ae>
 8004f96:	2301      	movs	r3, #1
 8004f98:	e000      	b.n	8004f9c <HAL_DMA_Init+0x2b0>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d003      	beq.n	8004fa8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fa6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f023 0307 	bic.w	r3, r3, #7
 8004fbe:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fce:	2b04      	cmp	r3, #4
 8004fd0:	d117      	bne.n	8005002 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00e      	beq.n	8005002 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f002 fb3f 	bl	8007668 <DMA_CheckFifoParam>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d008      	beq.n	8005002 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2240      	movs	r2, #64	@ 0x40
 8004ff4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e197      	b.n	8005332 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f002 fa7a 	bl	8007504 <DMA_CalcBaseAndBitshift>
 8005010:	4603      	mov	r3, r0
 8005012:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005018:	f003 031f 	and.w	r3, r3, #31
 800501c:	223f      	movs	r2, #63	@ 0x3f
 800501e:	409a      	lsls	r2, r3
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	609a      	str	r2, [r3, #8]
 8005024:	e0cd      	b.n	80051c2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a3b      	ldr	r2, [pc, #236]	@ (8005118 <HAL_DMA_Init+0x42c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d022      	beq.n	8005076 <HAL_DMA_Init+0x38a>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a39      	ldr	r2, [pc, #228]	@ (800511c <HAL_DMA_Init+0x430>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d01d      	beq.n	8005076 <HAL_DMA_Init+0x38a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a38      	ldr	r2, [pc, #224]	@ (8005120 <HAL_DMA_Init+0x434>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d018      	beq.n	8005076 <HAL_DMA_Init+0x38a>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a36      	ldr	r2, [pc, #216]	@ (8005124 <HAL_DMA_Init+0x438>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d013      	beq.n	8005076 <HAL_DMA_Init+0x38a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a35      	ldr	r2, [pc, #212]	@ (8005128 <HAL_DMA_Init+0x43c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d00e      	beq.n	8005076 <HAL_DMA_Init+0x38a>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a33      	ldr	r2, [pc, #204]	@ (800512c <HAL_DMA_Init+0x440>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d009      	beq.n	8005076 <HAL_DMA_Init+0x38a>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a32      	ldr	r2, [pc, #200]	@ (8005130 <HAL_DMA_Init+0x444>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d004      	beq.n	8005076 <HAL_DMA_Init+0x38a>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a30      	ldr	r2, [pc, #192]	@ (8005134 <HAL_DMA_Init+0x448>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d101      	bne.n	800507a <HAL_DMA_Init+0x38e>
 8005076:	2301      	movs	r3, #1
 8005078:	e000      	b.n	800507c <HAL_DMA_Init+0x390>
 800507a:	2300      	movs	r3, #0
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 8097 	beq.w	80051b0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a24      	ldr	r2, [pc, #144]	@ (8005118 <HAL_DMA_Init+0x42c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d021      	beq.n	80050d0 <HAL_DMA_Init+0x3e4>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a22      	ldr	r2, [pc, #136]	@ (800511c <HAL_DMA_Init+0x430>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d01c      	beq.n	80050d0 <HAL_DMA_Init+0x3e4>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a21      	ldr	r2, [pc, #132]	@ (8005120 <HAL_DMA_Init+0x434>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d017      	beq.n	80050d0 <HAL_DMA_Init+0x3e4>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a1f      	ldr	r2, [pc, #124]	@ (8005124 <HAL_DMA_Init+0x438>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d012      	beq.n	80050d0 <HAL_DMA_Init+0x3e4>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a1e      	ldr	r2, [pc, #120]	@ (8005128 <HAL_DMA_Init+0x43c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d00d      	beq.n	80050d0 <HAL_DMA_Init+0x3e4>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a1c      	ldr	r2, [pc, #112]	@ (800512c <HAL_DMA_Init+0x440>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d008      	beq.n	80050d0 <HAL_DMA_Init+0x3e4>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005130 <HAL_DMA_Init+0x444>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d003      	beq.n	80050d0 <HAL_DMA_Init+0x3e4>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a19      	ldr	r2, [pc, #100]	@ (8005134 <HAL_DMA_Init+0x448>)
 80050ce:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	4b13      	ldr	r3, [pc, #76]	@ (8005138 <HAL_DMA_Init+0x44c>)
 80050ec:	4013      	ands	r3, r2
 80050ee:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	2b40      	cmp	r3, #64	@ 0x40
 80050f6:	d021      	beq.n	800513c <HAL_DMA_Init+0x450>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	2b80      	cmp	r3, #128	@ 0x80
 80050fe:	d102      	bne.n	8005106 <HAL_DMA_Init+0x41a>
 8005100:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005104:	e01b      	b.n	800513e <HAL_DMA_Init+0x452>
 8005106:	2300      	movs	r3, #0
 8005108:	e019      	b.n	800513e <HAL_DMA_Init+0x452>
 800510a:	bf00      	nop
 800510c:	fe10803f 	.word	0xfe10803f
 8005110:	5c001000 	.word	0x5c001000
 8005114:	ffff0000 	.word	0xffff0000
 8005118:	58025408 	.word	0x58025408
 800511c:	5802541c 	.word	0x5802541c
 8005120:	58025430 	.word	0x58025430
 8005124:	58025444 	.word	0x58025444
 8005128:	58025458 	.word	0x58025458
 800512c:	5802546c 	.word	0x5802546c
 8005130:	58025480 	.word	0x58025480
 8005134:	58025494 	.word	0x58025494
 8005138:	fffe000f 	.word	0xfffe000f
 800513c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	68d2      	ldr	r2, [r2, #12]
 8005142:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005144:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800514c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005154:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800515c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005164:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800516c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	461a      	mov	r2, r3
 8005182:	4b6e      	ldr	r3, [pc, #440]	@ (800533c <HAL_DMA_Init+0x650>)
 8005184:	4413      	add	r3, r2
 8005186:	4a6e      	ldr	r2, [pc, #440]	@ (8005340 <HAL_DMA_Init+0x654>)
 8005188:	fba2 2303 	umull	r2, r3, r2, r3
 800518c:	091b      	lsrs	r3, r3, #4
 800518e:	009a      	lsls	r2, r3, #2
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f002 f9b5 	bl	8007504 <DMA_CalcBaseAndBitshift>
 800519a:	4603      	mov	r3, r0
 800519c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051a2:	f003 031f 	and.w	r3, r3, #31
 80051a6:	2201      	movs	r2, #1
 80051a8:	409a      	lsls	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	605a      	str	r2, [r3, #4]
 80051ae:	e008      	b.n	80051c2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2240      	movs	r2, #64	@ 0x40
 80051b4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2203      	movs	r2, #3
 80051ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e0b7      	b.n	8005332 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a5f      	ldr	r2, [pc, #380]	@ (8005344 <HAL_DMA_Init+0x658>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d072      	beq.n	80052b2 <HAL_DMA_Init+0x5c6>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a5d      	ldr	r2, [pc, #372]	@ (8005348 <HAL_DMA_Init+0x65c>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d06d      	beq.n	80052b2 <HAL_DMA_Init+0x5c6>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a5c      	ldr	r2, [pc, #368]	@ (800534c <HAL_DMA_Init+0x660>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d068      	beq.n	80052b2 <HAL_DMA_Init+0x5c6>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a5a      	ldr	r2, [pc, #360]	@ (8005350 <HAL_DMA_Init+0x664>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d063      	beq.n	80052b2 <HAL_DMA_Init+0x5c6>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a59      	ldr	r2, [pc, #356]	@ (8005354 <HAL_DMA_Init+0x668>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d05e      	beq.n	80052b2 <HAL_DMA_Init+0x5c6>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a57      	ldr	r2, [pc, #348]	@ (8005358 <HAL_DMA_Init+0x66c>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d059      	beq.n	80052b2 <HAL_DMA_Init+0x5c6>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a56      	ldr	r2, [pc, #344]	@ (800535c <HAL_DMA_Init+0x670>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d054      	beq.n	80052b2 <HAL_DMA_Init+0x5c6>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a54      	ldr	r2, [pc, #336]	@ (8005360 <HAL_DMA_Init+0x674>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d04f      	beq.n	80052b2 <HAL_DMA_Init+0x5c6>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a53      	ldr	r2, [pc, #332]	@ (8005364 <HAL_DMA_Init+0x678>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d04a      	beq.n	80052b2 <HAL_DMA_Init+0x5c6>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a51      	ldr	r2, [pc, #324]	@ (8005368 <HAL_DMA_Init+0x67c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d045      	beq.n	80052b2 <HAL_DMA_Init+0x5c6>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a50      	ldr	r2, [pc, #320]	@ (800536c <HAL_DMA_Init+0x680>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d040      	beq.n	80052b2 <HAL_DMA_Init+0x5c6>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a4e      	ldr	r2, [pc, #312]	@ (8005370 <HAL_DMA_Init+0x684>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d03b      	beq.n	80052b2 <HAL_DMA_Init+0x5c6>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a4d      	ldr	r2, [pc, #308]	@ (8005374 <HAL_DMA_Init+0x688>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d036      	beq.n	80052b2 <HAL_DMA_Init+0x5c6>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a4b      	ldr	r2, [pc, #300]	@ (8005378 <HAL_DMA_Init+0x68c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d031      	beq.n	80052b2 <HAL_DMA_Init+0x5c6>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a4a      	ldr	r2, [pc, #296]	@ (800537c <HAL_DMA_Init+0x690>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d02c      	beq.n	80052b2 <HAL_DMA_Init+0x5c6>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a48      	ldr	r2, [pc, #288]	@ (8005380 <HAL_DMA_Init+0x694>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d027      	beq.n	80052b2 <HAL_DMA_Init+0x5c6>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a47      	ldr	r2, [pc, #284]	@ (8005384 <HAL_DMA_Init+0x698>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d022      	beq.n	80052b2 <HAL_DMA_Init+0x5c6>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a45      	ldr	r2, [pc, #276]	@ (8005388 <HAL_DMA_Init+0x69c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d01d      	beq.n	80052b2 <HAL_DMA_Init+0x5c6>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a44      	ldr	r2, [pc, #272]	@ (800538c <HAL_DMA_Init+0x6a0>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d018      	beq.n	80052b2 <HAL_DMA_Init+0x5c6>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a42      	ldr	r2, [pc, #264]	@ (8005390 <HAL_DMA_Init+0x6a4>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d013      	beq.n	80052b2 <HAL_DMA_Init+0x5c6>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a41      	ldr	r2, [pc, #260]	@ (8005394 <HAL_DMA_Init+0x6a8>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d00e      	beq.n	80052b2 <HAL_DMA_Init+0x5c6>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a3f      	ldr	r2, [pc, #252]	@ (8005398 <HAL_DMA_Init+0x6ac>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d009      	beq.n	80052b2 <HAL_DMA_Init+0x5c6>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a3e      	ldr	r2, [pc, #248]	@ (800539c <HAL_DMA_Init+0x6b0>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d004      	beq.n	80052b2 <HAL_DMA_Init+0x5c6>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a3c      	ldr	r2, [pc, #240]	@ (80053a0 <HAL_DMA_Init+0x6b4>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d101      	bne.n	80052b6 <HAL_DMA_Init+0x5ca>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e000      	b.n	80052b8 <HAL_DMA_Init+0x5cc>
 80052b6:	2300      	movs	r3, #0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d032      	beq.n	8005322 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f002 fa4f 	bl	8007760 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	2b80      	cmp	r3, #128	@ 0x80
 80052c8:	d102      	bne.n	80052d0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80052e4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d010      	beq.n	8005310 <HAL_DMA_Init+0x624>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2b08      	cmp	r3, #8
 80052f4:	d80c      	bhi.n	8005310 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f002 facc 	bl	8007894 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005300:	2200      	movs	r2, #0
 8005302:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800530c:	605a      	str	r2, [r3, #4]
 800530e:	e008      	b.n	8005322 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	a7fdabf8 	.word	0xa7fdabf8
 8005340:	cccccccd 	.word	0xcccccccd
 8005344:	40020010 	.word	0x40020010
 8005348:	40020028 	.word	0x40020028
 800534c:	40020040 	.word	0x40020040
 8005350:	40020058 	.word	0x40020058
 8005354:	40020070 	.word	0x40020070
 8005358:	40020088 	.word	0x40020088
 800535c:	400200a0 	.word	0x400200a0
 8005360:	400200b8 	.word	0x400200b8
 8005364:	40020410 	.word	0x40020410
 8005368:	40020428 	.word	0x40020428
 800536c:	40020440 	.word	0x40020440
 8005370:	40020458 	.word	0x40020458
 8005374:	40020470 	.word	0x40020470
 8005378:	40020488 	.word	0x40020488
 800537c:	400204a0 	.word	0x400204a0
 8005380:	400204b8 	.word	0x400204b8
 8005384:	58025408 	.word	0x58025408
 8005388:	5802541c 	.word	0x5802541c
 800538c:	58025430 	.word	0x58025430
 8005390:	58025444 	.word	0x58025444
 8005394:	58025458 	.word	0x58025458
 8005398:	5802546c 	.word	0x5802546c
 800539c:	58025480 	.word	0x58025480
 80053a0:	58025494 	.word	0x58025494

080053a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e226      	b.n	800580e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d101      	bne.n	80053ce <HAL_DMA_Start_IT+0x2a>
 80053ca:	2302      	movs	r3, #2
 80053cc:	e21f      	b.n	800580e <HAL_DMA_Start_IT+0x46a>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b01      	cmp	r3, #1
 80053e0:	f040 820a 	bne.w	80057f8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a68      	ldr	r2, [pc, #416]	@ (8005598 <HAL_DMA_Start_IT+0x1f4>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d04a      	beq.n	8005492 <HAL_DMA_Start_IT+0xee>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a66      	ldr	r2, [pc, #408]	@ (800559c <HAL_DMA_Start_IT+0x1f8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d045      	beq.n	8005492 <HAL_DMA_Start_IT+0xee>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a65      	ldr	r2, [pc, #404]	@ (80055a0 <HAL_DMA_Start_IT+0x1fc>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d040      	beq.n	8005492 <HAL_DMA_Start_IT+0xee>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a63      	ldr	r2, [pc, #396]	@ (80055a4 <HAL_DMA_Start_IT+0x200>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d03b      	beq.n	8005492 <HAL_DMA_Start_IT+0xee>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a62      	ldr	r2, [pc, #392]	@ (80055a8 <HAL_DMA_Start_IT+0x204>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d036      	beq.n	8005492 <HAL_DMA_Start_IT+0xee>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a60      	ldr	r2, [pc, #384]	@ (80055ac <HAL_DMA_Start_IT+0x208>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d031      	beq.n	8005492 <HAL_DMA_Start_IT+0xee>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a5f      	ldr	r2, [pc, #380]	@ (80055b0 <HAL_DMA_Start_IT+0x20c>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d02c      	beq.n	8005492 <HAL_DMA_Start_IT+0xee>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a5d      	ldr	r2, [pc, #372]	@ (80055b4 <HAL_DMA_Start_IT+0x210>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d027      	beq.n	8005492 <HAL_DMA_Start_IT+0xee>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a5c      	ldr	r2, [pc, #368]	@ (80055b8 <HAL_DMA_Start_IT+0x214>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d022      	beq.n	8005492 <HAL_DMA_Start_IT+0xee>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a5a      	ldr	r2, [pc, #360]	@ (80055bc <HAL_DMA_Start_IT+0x218>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d01d      	beq.n	8005492 <HAL_DMA_Start_IT+0xee>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a59      	ldr	r2, [pc, #356]	@ (80055c0 <HAL_DMA_Start_IT+0x21c>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d018      	beq.n	8005492 <HAL_DMA_Start_IT+0xee>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a57      	ldr	r2, [pc, #348]	@ (80055c4 <HAL_DMA_Start_IT+0x220>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d013      	beq.n	8005492 <HAL_DMA_Start_IT+0xee>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a56      	ldr	r2, [pc, #344]	@ (80055c8 <HAL_DMA_Start_IT+0x224>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d00e      	beq.n	8005492 <HAL_DMA_Start_IT+0xee>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a54      	ldr	r2, [pc, #336]	@ (80055cc <HAL_DMA_Start_IT+0x228>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d009      	beq.n	8005492 <HAL_DMA_Start_IT+0xee>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a53      	ldr	r2, [pc, #332]	@ (80055d0 <HAL_DMA_Start_IT+0x22c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d004      	beq.n	8005492 <HAL_DMA_Start_IT+0xee>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a51      	ldr	r2, [pc, #324]	@ (80055d4 <HAL_DMA_Start_IT+0x230>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d108      	bne.n	80054a4 <HAL_DMA_Start_IT+0x100>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0201 	bic.w	r2, r2, #1
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	e007      	b.n	80054b4 <HAL_DMA_Start_IT+0x110>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 0201 	bic.w	r2, r2, #1
 80054b2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	68b9      	ldr	r1, [r7, #8]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f001 fe76 	bl	80071ac <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a34      	ldr	r2, [pc, #208]	@ (8005598 <HAL_DMA_Start_IT+0x1f4>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d04a      	beq.n	8005560 <HAL_DMA_Start_IT+0x1bc>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a33      	ldr	r2, [pc, #204]	@ (800559c <HAL_DMA_Start_IT+0x1f8>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d045      	beq.n	8005560 <HAL_DMA_Start_IT+0x1bc>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a31      	ldr	r2, [pc, #196]	@ (80055a0 <HAL_DMA_Start_IT+0x1fc>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d040      	beq.n	8005560 <HAL_DMA_Start_IT+0x1bc>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a30      	ldr	r2, [pc, #192]	@ (80055a4 <HAL_DMA_Start_IT+0x200>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d03b      	beq.n	8005560 <HAL_DMA_Start_IT+0x1bc>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a2e      	ldr	r2, [pc, #184]	@ (80055a8 <HAL_DMA_Start_IT+0x204>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d036      	beq.n	8005560 <HAL_DMA_Start_IT+0x1bc>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a2d      	ldr	r2, [pc, #180]	@ (80055ac <HAL_DMA_Start_IT+0x208>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d031      	beq.n	8005560 <HAL_DMA_Start_IT+0x1bc>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a2b      	ldr	r2, [pc, #172]	@ (80055b0 <HAL_DMA_Start_IT+0x20c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d02c      	beq.n	8005560 <HAL_DMA_Start_IT+0x1bc>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a2a      	ldr	r2, [pc, #168]	@ (80055b4 <HAL_DMA_Start_IT+0x210>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d027      	beq.n	8005560 <HAL_DMA_Start_IT+0x1bc>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a28      	ldr	r2, [pc, #160]	@ (80055b8 <HAL_DMA_Start_IT+0x214>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d022      	beq.n	8005560 <HAL_DMA_Start_IT+0x1bc>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a27      	ldr	r2, [pc, #156]	@ (80055bc <HAL_DMA_Start_IT+0x218>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d01d      	beq.n	8005560 <HAL_DMA_Start_IT+0x1bc>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a25      	ldr	r2, [pc, #148]	@ (80055c0 <HAL_DMA_Start_IT+0x21c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d018      	beq.n	8005560 <HAL_DMA_Start_IT+0x1bc>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a24      	ldr	r2, [pc, #144]	@ (80055c4 <HAL_DMA_Start_IT+0x220>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d013      	beq.n	8005560 <HAL_DMA_Start_IT+0x1bc>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a22      	ldr	r2, [pc, #136]	@ (80055c8 <HAL_DMA_Start_IT+0x224>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00e      	beq.n	8005560 <HAL_DMA_Start_IT+0x1bc>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a21      	ldr	r2, [pc, #132]	@ (80055cc <HAL_DMA_Start_IT+0x228>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d009      	beq.n	8005560 <HAL_DMA_Start_IT+0x1bc>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a1f      	ldr	r2, [pc, #124]	@ (80055d0 <HAL_DMA_Start_IT+0x22c>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d004      	beq.n	8005560 <HAL_DMA_Start_IT+0x1bc>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a1e      	ldr	r2, [pc, #120]	@ (80055d4 <HAL_DMA_Start_IT+0x230>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d101      	bne.n	8005564 <HAL_DMA_Start_IT+0x1c0>
 8005560:	2301      	movs	r3, #1
 8005562:	e000      	b.n	8005566 <HAL_DMA_Start_IT+0x1c2>
 8005564:	2300      	movs	r3, #0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d036      	beq.n	80055d8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f023 021e 	bic.w	r2, r3, #30
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f042 0216 	orr.w	r2, r2, #22
 800557c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005582:	2b00      	cmp	r3, #0
 8005584:	d03e      	beq.n	8005604 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f042 0208 	orr.w	r2, r2, #8
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	e035      	b.n	8005604 <HAL_DMA_Start_IT+0x260>
 8005598:	40020010 	.word	0x40020010
 800559c:	40020028 	.word	0x40020028
 80055a0:	40020040 	.word	0x40020040
 80055a4:	40020058 	.word	0x40020058
 80055a8:	40020070 	.word	0x40020070
 80055ac:	40020088 	.word	0x40020088
 80055b0:	400200a0 	.word	0x400200a0
 80055b4:	400200b8 	.word	0x400200b8
 80055b8:	40020410 	.word	0x40020410
 80055bc:	40020428 	.word	0x40020428
 80055c0:	40020440 	.word	0x40020440
 80055c4:	40020458 	.word	0x40020458
 80055c8:	40020470 	.word	0x40020470
 80055cc:	40020488 	.word	0x40020488
 80055d0:	400204a0 	.word	0x400204a0
 80055d4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f023 020e 	bic.w	r2, r3, #14
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f042 020a 	orr.w	r2, r2, #10
 80055ea:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d007      	beq.n	8005604 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f042 0204 	orr.w	r2, r2, #4
 8005602:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a83      	ldr	r2, [pc, #524]	@ (8005818 <HAL_DMA_Start_IT+0x474>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d072      	beq.n	80056f4 <HAL_DMA_Start_IT+0x350>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a82      	ldr	r2, [pc, #520]	@ (800581c <HAL_DMA_Start_IT+0x478>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d06d      	beq.n	80056f4 <HAL_DMA_Start_IT+0x350>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a80      	ldr	r2, [pc, #512]	@ (8005820 <HAL_DMA_Start_IT+0x47c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d068      	beq.n	80056f4 <HAL_DMA_Start_IT+0x350>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a7f      	ldr	r2, [pc, #508]	@ (8005824 <HAL_DMA_Start_IT+0x480>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d063      	beq.n	80056f4 <HAL_DMA_Start_IT+0x350>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a7d      	ldr	r2, [pc, #500]	@ (8005828 <HAL_DMA_Start_IT+0x484>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d05e      	beq.n	80056f4 <HAL_DMA_Start_IT+0x350>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a7c      	ldr	r2, [pc, #496]	@ (800582c <HAL_DMA_Start_IT+0x488>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d059      	beq.n	80056f4 <HAL_DMA_Start_IT+0x350>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a7a      	ldr	r2, [pc, #488]	@ (8005830 <HAL_DMA_Start_IT+0x48c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d054      	beq.n	80056f4 <HAL_DMA_Start_IT+0x350>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a79      	ldr	r2, [pc, #484]	@ (8005834 <HAL_DMA_Start_IT+0x490>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d04f      	beq.n	80056f4 <HAL_DMA_Start_IT+0x350>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a77      	ldr	r2, [pc, #476]	@ (8005838 <HAL_DMA_Start_IT+0x494>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d04a      	beq.n	80056f4 <HAL_DMA_Start_IT+0x350>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a76      	ldr	r2, [pc, #472]	@ (800583c <HAL_DMA_Start_IT+0x498>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d045      	beq.n	80056f4 <HAL_DMA_Start_IT+0x350>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a74      	ldr	r2, [pc, #464]	@ (8005840 <HAL_DMA_Start_IT+0x49c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d040      	beq.n	80056f4 <HAL_DMA_Start_IT+0x350>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a73      	ldr	r2, [pc, #460]	@ (8005844 <HAL_DMA_Start_IT+0x4a0>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d03b      	beq.n	80056f4 <HAL_DMA_Start_IT+0x350>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a71      	ldr	r2, [pc, #452]	@ (8005848 <HAL_DMA_Start_IT+0x4a4>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d036      	beq.n	80056f4 <HAL_DMA_Start_IT+0x350>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a70      	ldr	r2, [pc, #448]	@ (800584c <HAL_DMA_Start_IT+0x4a8>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d031      	beq.n	80056f4 <HAL_DMA_Start_IT+0x350>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a6e      	ldr	r2, [pc, #440]	@ (8005850 <HAL_DMA_Start_IT+0x4ac>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d02c      	beq.n	80056f4 <HAL_DMA_Start_IT+0x350>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a6d      	ldr	r2, [pc, #436]	@ (8005854 <HAL_DMA_Start_IT+0x4b0>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d027      	beq.n	80056f4 <HAL_DMA_Start_IT+0x350>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a6b      	ldr	r2, [pc, #428]	@ (8005858 <HAL_DMA_Start_IT+0x4b4>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d022      	beq.n	80056f4 <HAL_DMA_Start_IT+0x350>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a6a      	ldr	r2, [pc, #424]	@ (800585c <HAL_DMA_Start_IT+0x4b8>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d01d      	beq.n	80056f4 <HAL_DMA_Start_IT+0x350>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a68      	ldr	r2, [pc, #416]	@ (8005860 <HAL_DMA_Start_IT+0x4bc>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d018      	beq.n	80056f4 <HAL_DMA_Start_IT+0x350>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a67      	ldr	r2, [pc, #412]	@ (8005864 <HAL_DMA_Start_IT+0x4c0>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d013      	beq.n	80056f4 <HAL_DMA_Start_IT+0x350>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a65      	ldr	r2, [pc, #404]	@ (8005868 <HAL_DMA_Start_IT+0x4c4>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00e      	beq.n	80056f4 <HAL_DMA_Start_IT+0x350>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a64      	ldr	r2, [pc, #400]	@ (800586c <HAL_DMA_Start_IT+0x4c8>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d009      	beq.n	80056f4 <HAL_DMA_Start_IT+0x350>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a62      	ldr	r2, [pc, #392]	@ (8005870 <HAL_DMA_Start_IT+0x4cc>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d004      	beq.n	80056f4 <HAL_DMA_Start_IT+0x350>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a61      	ldr	r2, [pc, #388]	@ (8005874 <HAL_DMA_Start_IT+0x4d0>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d101      	bne.n	80056f8 <HAL_DMA_Start_IT+0x354>
 80056f4:	2301      	movs	r3, #1
 80056f6:	e000      	b.n	80056fa <HAL_DMA_Start_IT+0x356>
 80056f8:	2300      	movs	r3, #0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d01a      	beq.n	8005734 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d007      	beq.n	800571c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005716:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800571a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005720:	2b00      	cmp	r3, #0
 8005722:	d007      	beq.n	8005734 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800572e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005732:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a37      	ldr	r2, [pc, #220]	@ (8005818 <HAL_DMA_Start_IT+0x474>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d04a      	beq.n	80057d4 <HAL_DMA_Start_IT+0x430>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a36      	ldr	r2, [pc, #216]	@ (800581c <HAL_DMA_Start_IT+0x478>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d045      	beq.n	80057d4 <HAL_DMA_Start_IT+0x430>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a34      	ldr	r2, [pc, #208]	@ (8005820 <HAL_DMA_Start_IT+0x47c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d040      	beq.n	80057d4 <HAL_DMA_Start_IT+0x430>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a33      	ldr	r2, [pc, #204]	@ (8005824 <HAL_DMA_Start_IT+0x480>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d03b      	beq.n	80057d4 <HAL_DMA_Start_IT+0x430>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a31      	ldr	r2, [pc, #196]	@ (8005828 <HAL_DMA_Start_IT+0x484>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d036      	beq.n	80057d4 <HAL_DMA_Start_IT+0x430>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a30      	ldr	r2, [pc, #192]	@ (800582c <HAL_DMA_Start_IT+0x488>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d031      	beq.n	80057d4 <HAL_DMA_Start_IT+0x430>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a2e      	ldr	r2, [pc, #184]	@ (8005830 <HAL_DMA_Start_IT+0x48c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d02c      	beq.n	80057d4 <HAL_DMA_Start_IT+0x430>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a2d      	ldr	r2, [pc, #180]	@ (8005834 <HAL_DMA_Start_IT+0x490>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d027      	beq.n	80057d4 <HAL_DMA_Start_IT+0x430>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a2b      	ldr	r2, [pc, #172]	@ (8005838 <HAL_DMA_Start_IT+0x494>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d022      	beq.n	80057d4 <HAL_DMA_Start_IT+0x430>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a2a      	ldr	r2, [pc, #168]	@ (800583c <HAL_DMA_Start_IT+0x498>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d01d      	beq.n	80057d4 <HAL_DMA_Start_IT+0x430>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a28      	ldr	r2, [pc, #160]	@ (8005840 <HAL_DMA_Start_IT+0x49c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d018      	beq.n	80057d4 <HAL_DMA_Start_IT+0x430>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a27      	ldr	r2, [pc, #156]	@ (8005844 <HAL_DMA_Start_IT+0x4a0>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d013      	beq.n	80057d4 <HAL_DMA_Start_IT+0x430>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a25      	ldr	r2, [pc, #148]	@ (8005848 <HAL_DMA_Start_IT+0x4a4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d00e      	beq.n	80057d4 <HAL_DMA_Start_IT+0x430>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a24      	ldr	r2, [pc, #144]	@ (800584c <HAL_DMA_Start_IT+0x4a8>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d009      	beq.n	80057d4 <HAL_DMA_Start_IT+0x430>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a22      	ldr	r2, [pc, #136]	@ (8005850 <HAL_DMA_Start_IT+0x4ac>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d004      	beq.n	80057d4 <HAL_DMA_Start_IT+0x430>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a21      	ldr	r2, [pc, #132]	@ (8005854 <HAL_DMA_Start_IT+0x4b0>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d108      	bne.n	80057e6 <HAL_DMA_Start_IT+0x442>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0201 	orr.w	r2, r2, #1
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	e012      	b.n	800580c <HAL_DMA_Start_IT+0x468>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f042 0201 	orr.w	r2, r2, #1
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	e009      	b.n	800580c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057fe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800580c:	7dfb      	ldrb	r3, [r7, #23]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3718      	adds	r7, #24
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	40020010 	.word	0x40020010
 800581c:	40020028 	.word	0x40020028
 8005820:	40020040 	.word	0x40020040
 8005824:	40020058 	.word	0x40020058
 8005828:	40020070 	.word	0x40020070
 800582c:	40020088 	.word	0x40020088
 8005830:	400200a0 	.word	0x400200a0
 8005834:	400200b8 	.word	0x400200b8
 8005838:	40020410 	.word	0x40020410
 800583c:	40020428 	.word	0x40020428
 8005840:	40020440 	.word	0x40020440
 8005844:	40020458 	.word	0x40020458
 8005848:	40020470 	.word	0x40020470
 800584c:	40020488 	.word	0x40020488
 8005850:	400204a0 	.word	0x400204a0
 8005854:	400204b8 	.word	0x400204b8
 8005858:	58025408 	.word	0x58025408
 800585c:	5802541c 	.word	0x5802541c
 8005860:	58025430 	.word	0x58025430
 8005864:	58025444 	.word	0x58025444
 8005868:	58025458 	.word	0x58025458
 800586c:	5802546c 	.word	0x5802546c
 8005870:	58025480 	.word	0x58025480
 8005874:	58025494 	.word	0x58025494

08005878 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005880:	f7fd fe22 	bl	80034c8 <HAL_GetTick>
 8005884:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e2dc      	b.n	8005e4a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d008      	beq.n	80058ae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2280      	movs	r2, #128	@ 0x80
 80058a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e2cd      	b.n	8005e4a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a76      	ldr	r2, [pc, #472]	@ (8005a8c <HAL_DMA_Abort+0x214>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d04a      	beq.n	800594e <HAL_DMA_Abort+0xd6>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a74      	ldr	r2, [pc, #464]	@ (8005a90 <HAL_DMA_Abort+0x218>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d045      	beq.n	800594e <HAL_DMA_Abort+0xd6>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a73      	ldr	r2, [pc, #460]	@ (8005a94 <HAL_DMA_Abort+0x21c>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d040      	beq.n	800594e <HAL_DMA_Abort+0xd6>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a71      	ldr	r2, [pc, #452]	@ (8005a98 <HAL_DMA_Abort+0x220>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d03b      	beq.n	800594e <HAL_DMA_Abort+0xd6>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a70      	ldr	r2, [pc, #448]	@ (8005a9c <HAL_DMA_Abort+0x224>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d036      	beq.n	800594e <HAL_DMA_Abort+0xd6>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a6e      	ldr	r2, [pc, #440]	@ (8005aa0 <HAL_DMA_Abort+0x228>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d031      	beq.n	800594e <HAL_DMA_Abort+0xd6>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a6d      	ldr	r2, [pc, #436]	@ (8005aa4 <HAL_DMA_Abort+0x22c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d02c      	beq.n	800594e <HAL_DMA_Abort+0xd6>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a6b      	ldr	r2, [pc, #428]	@ (8005aa8 <HAL_DMA_Abort+0x230>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d027      	beq.n	800594e <HAL_DMA_Abort+0xd6>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a6a      	ldr	r2, [pc, #424]	@ (8005aac <HAL_DMA_Abort+0x234>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d022      	beq.n	800594e <HAL_DMA_Abort+0xd6>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a68      	ldr	r2, [pc, #416]	@ (8005ab0 <HAL_DMA_Abort+0x238>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d01d      	beq.n	800594e <HAL_DMA_Abort+0xd6>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a67      	ldr	r2, [pc, #412]	@ (8005ab4 <HAL_DMA_Abort+0x23c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d018      	beq.n	800594e <HAL_DMA_Abort+0xd6>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a65      	ldr	r2, [pc, #404]	@ (8005ab8 <HAL_DMA_Abort+0x240>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d013      	beq.n	800594e <HAL_DMA_Abort+0xd6>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a64      	ldr	r2, [pc, #400]	@ (8005abc <HAL_DMA_Abort+0x244>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d00e      	beq.n	800594e <HAL_DMA_Abort+0xd6>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a62      	ldr	r2, [pc, #392]	@ (8005ac0 <HAL_DMA_Abort+0x248>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d009      	beq.n	800594e <HAL_DMA_Abort+0xd6>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a61      	ldr	r2, [pc, #388]	@ (8005ac4 <HAL_DMA_Abort+0x24c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d004      	beq.n	800594e <HAL_DMA_Abort+0xd6>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a5f      	ldr	r2, [pc, #380]	@ (8005ac8 <HAL_DMA_Abort+0x250>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d101      	bne.n	8005952 <HAL_DMA_Abort+0xda>
 800594e:	2301      	movs	r3, #1
 8005950:	e000      	b.n	8005954 <HAL_DMA_Abort+0xdc>
 8005952:	2300      	movs	r3, #0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d013      	beq.n	8005980 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 021e 	bic.w	r2, r2, #30
 8005966:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	695a      	ldr	r2, [r3, #20]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005976:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	617b      	str	r3, [r7, #20]
 800597e:	e00a      	b.n	8005996 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 020e 	bic.w	r2, r2, #14
 800598e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a3c      	ldr	r2, [pc, #240]	@ (8005a8c <HAL_DMA_Abort+0x214>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d072      	beq.n	8005a86 <HAL_DMA_Abort+0x20e>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a3a      	ldr	r2, [pc, #232]	@ (8005a90 <HAL_DMA_Abort+0x218>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d06d      	beq.n	8005a86 <HAL_DMA_Abort+0x20e>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a39      	ldr	r2, [pc, #228]	@ (8005a94 <HAL_DMA_Abort+0x21c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d068      	beq.n	8005a86 <HAL_DMA_Abort+0x20e>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a37      	ldr	r2, [pc, #220]	@ (8005a98 <HAL_DMA_Abort+0x220>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d063      	beq.n	8005a86 <HAL_DMA_Abort+0x20e>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a36      	ldr	r2, [pc, #216]	@ (8005a9c <HAL_DMA_Abort+0x224>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d05e      	beq.n	8005a86 <HAL_DMA_Abort+0x20e>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a34      	ldr	r2, [pc, #208]	@ (8005aa0 <HAL_DMA_Abort+0x228>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d059      	beq.n	8005a86 <HAL_DMA_Abort+0x20e>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a33      	ldr	r2, [pc, #204]	@ (8005aa4 <HAL_DMA_Abort+0x22c>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d054      	beq.n	8005a86 <HAL_DMA_Abort+0x20e>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a31      	ldr	r2, [pc, #196]	@ (8005aa8 <HAL_DMA_Abort+0x230>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d04f      	beq.n	8005a86 <HAL_DMA_Abort+0x20e>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a30      	ldr	r2, [pc, #192]	@ (8005aac <HAL_DMA_Abort+0x234>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d04a      	beq.n	8005a86 <HAL_DMA_Abort+0x20e>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a2e      	ldr	r2, [pc, #184]	@ (8005ab0 <HAL_DMA_Abort+0x238>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d045      	beq.n	8005a86 <HAL_DMA_Abort+0x20e>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a2d      	ldr	r2, [pc, #180]	@ (8005ab4 <HAL_DMA_Abort+0x23c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d040      	beq.n	8005a86 <HAL_DMA_Abort+0x20e>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a2b      	ldr	r2, [pc, #172]	@ (8005ab8 <HAL_DMA_Abort+0x240>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d03b      	beq.n	8005a86 <HAL_DMA_Abort+0x20e>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a2a      	ldr	r2, [pc, #168]	@ (8005abc <HAL_DMA_Abort+0x244>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d036      	beq.n	8005a86 <HAL_DMA_Abort+0x20e>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a28      	ldr	r2, [pc, #160]	@ (8005ac0 <HAL_DMA_Abort+0x248>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d031      	beq.n	8005a86 <HAL_DMA_Abort+0x20e>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a27      	ldr	r2, [pc, #156]	@ (8005ac4 <HAL_DMA_Abort+0x24c>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d02c      	beq.n	8005a86 <HAL_DMA_Abort+0x20e>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a25      	ldr	r2, [pc, #148]	@ (8005ac8 <HAL_DMA_Abort+0x250>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d027      	beq.n	8005a86 <HAL_DMA_Abort+0x20e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a24      	ldr	r2, [pc, #144]	@ (8005acc <HAL_DMA_Abort+0x254>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d022      	beq.n	8005a86 <HAL_DMA_Abort+0x20e>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a22      	ldr	r2, [pc, #136]	@ (8005ad0 <HAL_DMA_Abort+0x258>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d01d      	beq.n	8005a86 <HAL_DMA_Abort+0x20e>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a21      	ldr	r2, [pc, #132]	@ (8005ad4 <HAL_DMA_Abort+0x25c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d018      	beq.n	8005a86 <HAL_DMA_Abort+0x20e>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a1f      	ldr	r2, [pc, #124]	@ (8005ad8 <HAL_DMA_Abort+0x260>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d013      	beq.n	8005a86 <HAL_DMA_Abort+0x20e>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a1e      	ldr	r2, [pc, #120]	@ (8005adc <HAL_DMA_Abort+0x264>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d00e      	beq.n	8005a86 <HAL_DMA_Abort+0x20e>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ae0 <HAL_DMA_Abort+0x268>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d009      	beq.n	8005a86 <HAL_DMA_Abort+0x20e>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a1b      	ldr	r2, [pc, #108]	@ (8005ae4 <HAL_DMA_Abort+0x26c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d004      	beq.n	8005a86 <HAL_DMA_Abort+0x20e>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a19      	ldr	r2, [pc, #100]	@ (8005ae8 <HAL_DMA_Abort+0x270>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d132      	bne.n	8005aec <HAL_DMA_Abort+0x274>
 8005a86:	2301      	movs	r3, #1
 8005a88:	e031      	b.n	8005aee <HAL_DMA_Abort+0x276>
 8005a8a:	bf00      	nop
 8005a8c:	40020010 	.word	0x40020010
 8005a90:	40020028 	.word	0x40020028
 8005a94:	40020040 	.word	0x40020040
 8005a98:	40020058 	.word	0x40020058
 8005a9c:	40020070 	.word	0x40020070
 8005aa0:	40020088 	.word	0x40020088
 8005aa4:	400200a0 	.word	0x400200a0
 8005aa8:	400200b8 	.word	0x400200b8
 8005aac:	40020410 	.word	0x40020410
 8005ab0:	40020428 	.word	0x40020428
 8005ab4:	40020440 	.word	0x40020440
 8005ab8:	40020458 	.word	0x40020458
 8005abc:	40020470 	.word	0x40020470
 8005ac0:	40020488 	.word	0x40020488
 8005ac4:	400204a0 	.word	0x400204a0
 8005ac8:	400204b8 	.word	0x400204b8
 8005acc:	58025408 	.word	0x58025408
 8005ad0:	5802541c 	.word	0x5802541c
 8005ad4:	58025430 	.word	0x58025430
 8005ad8:	58025444 	.word	0x58025444
 8005adc:	58025458 	.word	0x58025458
 8005ae0:	5802546c 	.word	0x5802546c
 8005ae4:	58025480 	.word	0x58025480
 8005ae8:	58025494 	.word	0x58025494
 8005aec:	2300      	movs	r3, #0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d007      	beq.n	8005b02 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005afc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b00:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a6d      	ldr	r2, [pc, #436]	@ (8005cbc <HAL_DMA_Abort+0x444>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d04a      	beq.n	8005ba2 <HAL_DMA_Abort+0x32a>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a6b      	ldr	r2, [pc, #428]	@ (8005cc0 <HAL_DMA_Abort+0x448>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d045      	beq.n	8005ba2 <HAL_DMA_Abort+0x32a>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a6a      	ldr	r2, [pc, #424]	@ (8005cc4 <HAL_DMA_Abort+0x44c>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d040      	beq.n	8005ba2 <HAL_DMA_Abort+0x32a>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a68      	ldr	r2, [pc, #416]	@ (8005cc8 <HAL_DMA_Abort+0x450>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d03b      	beq.n	8005ba2 <HAL_DMA_Abort+0x32a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a67      	ldr	r2, [pc, #412]	@ (8005ccc <HAL_DMA_Abort+0x454>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d036      	beq.n	8005ba2 <HAL_DMA_Abort+0x32a>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a65      	ldr	r2, [pc, #404]	@ (8005cd0 <HAL_DMA_Abort+0x458>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d031      	beq.n	8005ba2 <HAL_DMA_Abort+0x32a>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a64      	ldr	r2, [pc, #400]	@ (8005cd4 <HAL_DMA_Abort+0x45c>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d02c      	beq.n	8005ba2 <HAL_DMA_Abort+0x32a>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a62      	ldr	r2, [pc, #392]	@ (8005cd8 <HAL_DMA_Abort+0x460>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d027      	beq.n	8005ba2 <HAL_DMA_Abort+0x32a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a61      	ldr	r2, [pc, #388]	@ (8005cdc <HAL_DMA_Abort+0x464>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d022      	beq.n	8005ba2 <HAL_DMA_Abort+0x32a>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a5f      	ldr	r2, [pc, #380]	@ (8005ce0 <HAL_DMA_Abort+0x468>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d01d      	beq.n	8005ba2 <HAL_DMA_Abort+0x32a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a5e      	ldr	r2, [pc, #376]	@ (8005ce4 <HAL_DMA_Abort+0x46c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d018      	beq.n	8005ba2 <HAL_DMA_Abort+0x32a>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a5c      	ldr	r2, [pc, #368]	@ (8005ce8 <HAL_DMA_Abort+0x470>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d013      	beq.n	8005ba2 <HAL_DMA_Abort+0x32a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a5b      	ldr	r2, [pc, #364]	@ (8005cec <HAL_DMA_Abort+0x474>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d00e      	beq.n	8005ba2 <HAL_DMA_Abort+0x32a>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a59      	ldr	r2, [pc, #356]	@ (8005cf0 <HAL_DMA_Abort+0x478>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d009      	beq.n	8005ba2 <HAL_DMA_Abort+0x32a>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a58      	ldr	r2, [pc, #352]	@ (8005cf4 <HAL_DMA_Abort+0x47c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d004      	beq.n	8005ba2 <HAL_DMA_Abort+0x32a>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a56      	ldr	r2, [pc, #344]	@ (8005cf8 <HAL_DMA_Abort+0x480>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d108      	bne.n	8005bb4 <HAL_DMA_Abort+0x33c>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0201 	bic.w	r2, r2, #1
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	e007      	b.n	8005bc4 <HAL_DMA_Abort+0x34c>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0201 	bic.w	r2, r2, #1
 8005bc2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005bc4:	e013      	b.n	8005bee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005bc6:	f7fd fc7f 	bl	80034c8 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b05      	cmp	r3, #5
 8005bd2:	d90c      	bls.n	8005bee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2203      	movs	r2, #3
 8005bde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e12d      	b.n	8005e4a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1e5      	bne.n	8005bc6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a2f      	ldr	r2, [pc, #188]	@ (8005cbc <HAL_DMA_Abort+0x444>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d04a      	beq.n	8005c9a <HAL_DMA_Abort+0x422>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a2d      	ldr	r2, [pc, #180]	@ (8005cc0 <HAL_DMA_Abort+0x448>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d045      	beq.n	8005c9a <HAL_DMA_Abort+0x422>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a2c      	ldr	r2, [pc, #176]	@ (8005cc4 <HAL_DMA_Abort+0x44c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d040      	beq.n	8005c9a <HAL_DMA_Abort+0x422>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a2a      	ldr	r2, [pc, #168]	@ (8005cc8 <HAL_DMA_Abort+0x450>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d03b      	beq.n	8005c9a <HAL_DMA_Abort+0x422>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a29      	ldr	r2, [pc, #164]	@ (8005ccc <HAL_DMA_Abort+0x454>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d036      	beq.n	8005c9a <HAL_DMA_Abort+0x422>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a27      	ldr	r2, [pc, #156]	@ (8005cd0 <HAL_DMA_Abort+0x458>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d031      	beq.n	8005c9a <HAL_DMA_Abort+0x422>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a26      	ldr	r2, [pc, #152]	@ (8005cd4 <HAL_DMA_Abort+0x45c>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d02c      	beq.n	8005c9a <HAL_DMA_Abort+0x422>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a24      	ldr	r2, [pc, #144]	@ (8005cd8 <HAL_DMA_Abort+0x460>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d027      	beq.n	8005c9a <HAL_DMA_Abort+0x422>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a23      	ldr	r2, [pc, #140]	@ (8005cdc <HAL_DMA_Abort+0x464>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d022      	beq.n	8005c9a <HAL_DMA_Abort+0x422>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a21      	ldr	r2, [pc, #132]	@ (8005ce0 <HAL_DMA_Abort+0x468>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d01d      	beq.n	8005c9a <HAL_DMA_Abort+0x422>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a20      	ldr	r2, [pc, #128]	@ (8005ce4 <HAL_DMA_Abort+0x46c>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d018      	beq.n	8005c9a <HAL_DMA_Abort+0x422>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a1e      	ldr	r2, [pc, #120]	@ (8005ce8 <HAL_DMA_Abort+0x470>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d013      	beq.n	8005c9a <HAL_DMA_Abort+0x422>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a1d      	ldr	r2, [pc, #116]	@ (8005cec <HAL_DMA_Abort+0x474>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d00e      	beq.n	8005c9a <HAL_DMA_Abort+0x422>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a1b      	ldr	r2, [pc, #108]	@ (8005cf0 <HAL_DMA_Abort+0x478>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d009      	beq.n	8005c9a <HAL_DMA_Abort+0x422>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a1a      	ldr	r2, [pc, #104]	@ (8005cf4 <HAL_DMA_Abort+0x47c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d004      	beq.n	8005c9a <HAL_DMA_Abort+0x422>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a18      	ldr	r2, [pc, #96]	@ (8005cf8 <HAL_DMA_Abort+0x480>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d101      	bne.n	8005c9e <HAL_DMA_Abort+0x426>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e000      	b.n	8005ca0 <HAL_DMA_Abort+0x428>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d02b      	beq.n	8005cfc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ca8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cae:	f003 031f 	and.w	r3, r3, #31
 8005cb2:	223f      	movs	r2, #63	@ 0x3f
 8005cb4:	409a      	lsls	r2, r3
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	609a      	str	r2, [r3, #8]
 8005cba:	e02a      	b.n	8005d12 <HAL_DMA_Abort+0x49a>
 8005cbc:	40020010 	.word	0x40020010
 8005cc0:	40020028 	.word	0x40020028
 8005cc4:	40020040 	.word	0x40020040
 8005cc8:	40020058 	.word	0x40020058
 8005ccc:	40020070 	.word	0x40020070
 8005cd0:	40020088 	.word	0x40020088
 8005cd4:	400200a0 	.word	0x400200a0
 8005cd8:	400200b8 	.word	0x400200b8
 8005cdc:	40020410 	.word	0x40020410
 8005ce0:	40020428 	.word	0x40020428
 8005ce4:	40020440 	.word	0x40020440
 8005ce8:	40020458 	.word	0x40020458
 8005cec:	40020470 	.word	0x40020470
 8005cf0:	40020488 	.word	0x40020488
 8005cf4:	400204a0 	.word	0x400204a0
 8005cf8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d00:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d06:	f003 031f 	and.w	r3, r3, #31
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	409a      	lsls	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a4f      	ldr	r2, [pc, #316]	@ (8005e54 <HAL_DMA_Abort+0x5dc>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d072      	beq.n	8005e02 <HAL_DMA_Abort+0x58a>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a4d      	ldr	r2, [pc, #308]	@ (8005e58 <HAL_DMA_Abort+0x5e0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d06d      	beq.n	8005e02 <HAL_DMA_Abort+0x58a>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a4c      	ldr	r2, [pc, #304]	@ (8005e5c <HAL_DMA_Abort+0x5e4>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d068      	beq.n	8005e02 <HAL_DMA_Abort+0x58a>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a4a      	ldr	r2, [pc, #296]	@ (8005e60 <HAL_DMA_Abort+0x5e8>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d063      	beq.n	8005e02 <HAL_DMA_Abort+0x58a>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a49      	ldr	r2, [pc, #292]	@ (8005e64 <HAL_DMA_Abort+0x5ec>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d05e      	beq.n	8005e02 <HAL_DMA_Abort+0x58a>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a47      	ldr	r2, [pc, #284]	@ (8005e68 <HAL_DMA_Abort+0x5f0>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d059      	beq.n	8005e02 <HAL_DMA_Abort+0x58a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a46      	ldr	r2, [pc, #280]	@ (8005e6c <HAL_DMA_Abort+0x5f4>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d054      	beq.n	8005e02 <HAL_DMA_Abort+0x58a>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a44      	ldr	r2, [pc, #272]	@ (8005e70 <HAL_DMA_Abort+0x5f8>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d04f      	beq.n	8005e02 <HAL_DMA_Abort+0x58a>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a43      	ldr	r2, [pc, #268]	@ (8005e74 <HAL_DMA_Abort+0x5fc>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d04a      	beq.n	8005e02 <HAL_DMA_Abort+0x58a>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a41      	ldr	r2, [pc, #260]	@ (8005e78 <HAL_DMA_Abort+0x600>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d045      	beq.n	8005e02 <HAL_DMA_Abort+0x58a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a40      	ldr	r2, [pc, #256]	@ (8005e7c <HAL_DMA_Abort+0x604>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d040      	beq.n	8005e02 <HAL_DMA_Abort+0x58a>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a3e      	ldr	r2, [pc, #248]	@ (8005e80 <HAL_DMA_Abort+0x608>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d03b      	beq.n	8005e02 <HAL_DMA_Abort+0x58a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a3d      	ldr	r2, [pc, #244]	@ (8005e84 <HAL_DMA_Abort+0x60c>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d036      	beq.n	8005e02 <HAL_DMA_Abort+0x58a>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a3b      	ldr	r2, [pc, #236]	@ (8005e88 <HAL_DMA_Abort+0x610>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d031      	beq.n	8005e02 <HAL_DMA_Abort+0x58a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a3a      	ldr	r2, [pc, #232]	@ (8005e8c <HAL_DMA_Abort+0x614>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d02c      	beq.n	8005e02 <HAL_DMA_Abort+0x58a>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a38      	ldr	r2, [pc, #224]	@ (8005e90 <HAL_DMA_Abort+0x618>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d027      	beq.n	8005e02 <HAL_DMA_Abort+0x58a>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a37      	ldr	r2, [pc, #220]	@ (8005e94 <HAL_DMA_Abort+0x61c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d022      	beq.n	8005e02 <HAL_DMA_Abort+0x58a>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a35      	ldr	r2, [pc, #212]	@ (8005e98 <HAL_DMA_Abort+0x620>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d01d      	beq.n	8005e02 <HAL_DMA_Abort+0x58a>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a34      	ldr	r2, [pc, #208]	@ (8005e9c <HAL_DMA_Abort+0x624>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d018      	beq.n	8005e02 <HAL_DMA_Abort+0x58a>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a32      	ldr	r2, [pc, #200]	@ (8005ea0 <HAL_DMA_Abort+0x628>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d013      	beq.n	8005e02 <HAL_DMA_Abort+0x58a>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a31      	ldr	r2, [pc, #196]	@ (8005ea4 <HAL_DMA_Abort+0x62c>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d00e      	beq.n	8005e02 <HAL_DMA_Abort+0x58a>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a2f      	ldr	r2, [pc, #188]	@ (8005ea8 <HAL_DMA_Abort+0x630>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d009      	beq.n	8005e02 <HAL_DMA_Abort+0x58a>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a2e      	ldr	r2, [pc, #184]	@ (8005eac <HAL_DMA_Abort+0x634>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d004      	beq.n	8005e02 <HAL_DMA_Abort+0x58a>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a2c      	ldr	r2, [pc, #176]	@ (8005eb0 <HAL_DMA_Abort+0x638>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d101      	bne.n	8005e06 <HAL_DMA_Abort+0x58e>
 8005e02:	2301      	movs	r3, #1
 8005e04:	e000      	b.n	8005e08 <HAL_DMA_Abort+0x590>
 8005e06:	2300      	movs	r3, #0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d015      	beq.n	8005e38 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005e14:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00c      	beq.n	8005e38 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e2c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005e36:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	40020010 	.word	0x40020010
 8005e58:	40020028 	.word	0x40020028
 8005e5c:	40020040 	.word	0x40020040
 8005e60:	40020058 	.word	0x40020058
 8005e64:	40020070 	.word	0x40020070
 8005e68:	40020088 	.word	0x40020088
 8005e6c:	400200a0 	.word	0x400200a0
 8005e70:	400200b8 	.word	0x400200b8
 8005e74:	40020410 	.word	0x40020410
 8005e78:	40020428 	.word	0x40020428
 8005e7c:	40020440 	.word	0x40020440
 8005e80:	40020458 	.word	0x40020458
 8005e84:	40020470 	.word	0x40020470
 8005e88:	40020488 	.word	0x40020488
 8005e8c:	400204a0 	.word	0x400204a0
 8005e90:	400204b8 	.word	0x400204b8
 8005e94:	58025408 	.word	0x58025408
 8005e98:	5802541c 	.word	0x5802541c
 8005e9c:	58025430 	.word	0x58025430
 8005ea0:	58025444 	.word	0x58025444
 8005ea4:	58025458 	.word	0x58025458
 8005ea8:	5802546c 	.word	0x5802546c
 8005eac:	58025480 	.word	0x58025480
 8005eb0:	58025494 	.word	0x58025494

08005eb4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e237      	b.n	8006336 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d004      	beq.n	8005edc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2280      	movs	r2, #128	@ 0x80
 8005ed6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e22c      	b.n	8006336 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a5c      	ldr	r2, [pc, #368]	@ (8006054 <HAL_DMA_Abort_IT+0x1a0>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d04a      	beq.n	8005f7c <HAL_DMA_Abort_IT+0xc8>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a5b      	ldr	r2, [pc, #364]	@ (8006058 <HAL_DMA_Abort_IT+0x1a4>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d045      	beq.n	8005f7c <HAL_DMA_Abort_IT+0xc8>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a59      	ldr	r2, [pc, #356]	@ (800605c <HAL_DMA_Abort_IT+0x1a8>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d040      	beq.n	8005f7c <HAL_DMA_Abort_IT+0xc8>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a58      	ldr	r2, [pc, #352]	@ (8006060 <HAL_DMA_Abort_IT+0x1ac>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d03b      	beq.n	8005f7c <HAL_DMA_Abort_IT+0xc8>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a56      	ldr	r2, [pc, #344]	@ (8006064 <HAL_DMA_Abort_IT+0x1b0>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d036      	beq.n	8005f7c <HAL_DMA_Abort_IT+0xc8>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a55      	ldr	r2, [pc, #340]	@ (8006068 <HAL_DMA_Abort_IT+0x1b4>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d031      	beq.n	8005f7c <HAL_DMA_Abort_IT+0xc8>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a53      	ldr	r2, [pc, #332]	@ (800606c <HAL_DMA_Abort_IT+0x1b8>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d02c      	beq.n	8005f7c <HAL_DMA_Abort_IT+0xc8>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a52      	ldr	r2, [pc, #328]	@ (8006070 <HAL_DMA_Abort_IT+0x1bc>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d027      	beq.n	8005f7c <HAL_DMA_Abort_IT+0xc8>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a50      	ldr	r2, [pc, #320]	@ (8006074 <HAL_DMA_Abort_IT+0x1c0>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d022      	beq.n	8005f7c <HAL_DMA_Abort_IT+0xc8>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a4f      	ldr	r2, [pc, #316]	@ (8006078 <HAL_DMA_Abort_IT+0x1c4>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d01d      	beq.n	8005f7c <HAL_DMA_Abort_IT+0xc8>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a4d      	ldr	r2, [pc, #308]	@ (800607c <HAL_DMA_Abort_IT+0x1c8>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d018      	beq.n	8005f7c <HAL_DMA_Abort_IT+0xc8>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a4c      	ldr	r2, [pc, #304]	@ (8006080 <HAL_DMA_Abort_IT+0x1cc>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d013      	beq.n	8005f7c <HAL_DMA_Abort_IT+0xc8>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a4a      	ldr	r2, [pc, #296]	@ (8006084 <HAL_DMA_Abort_IT+0x1d0>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d00e      	beq.n	8005f7c <HAL_DMA_Abort_IT+0xc8>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a49      	ldr	r2, [pc, #292]	@ (8006088 <HAL_DMA_Abort_IT+0x1d4>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d009      	beq.n	8005f7c <HAL_DMA_Abort_IT+0xc8>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a47      	ldr	r2, [pc, #284]	@ (800608c <HAL_DMA_Abort_IT+0x1d8>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d004      	beq.n	8005f7c <HAL_DMA_Abort_IT+0xc8>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a46      	ldr	r2, [pc, #280]	@ (8006090 <HAL_DMA_Abort_IT+0x1dc>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d101      	bne.n	8005f80 <HAL_DMA_Abort_IT+0xcc>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e000      	b.n	8005f82 <HAL_DMA_Abort_IT+0xce>
 8005f80:	2300      	movs	r3, #0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f000 8086 	beq.w	8006094 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2204      	movs	r2, #4
 8005f8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a2f      	ldr	r2, [pc, #188]	@ (8006054 <HAL_DMA_Abort_IT+0x1a0>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d04a      	beq.n	8006030 <HAL_DMA_Abort_IT+0x17c>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a2e      	ldr	r2, [pc, #184]	@ (8006058 <HAL_DMA_Abort_IT+0x1a4>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d045      	beq.n	8006030 <HAL_DMA_Abort_IT+0x17c>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a2c      	ldr	r2, [pc, #176]	@ (800605c <HAL_DMA_Abort_IT+0x1a8>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d040      	beq.n	8006030 <HAL_DMA_Abort_IT+0x17c>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a2b      	ldr	r2, [pc, #172]	@ (8006060 <HAL_DMA_Abort_IT+0x1ac>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d03b      	beq.n	8006030 <HAL_DMA_Abort_IT+0x17c>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a29      	ldr	r2, [pc, #164]	@ (8006064 <HAL_DMA_Abort_IT+0x1b0>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d036      	beq.n	8006030 <HAL_DMA_Abort_IT+0x17c>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a28      	ldr	r2, [pc, #160]	@ (8006068 <HAL_DMA_Abort_IT+0x1b4>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d031      	beq.n	8006030 <HAL_DMA_Abort_IT+0x17c>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a26      	ldr	r2, [pc, #152]	@ (800606c <HAL_DMA_Abort_IT+0x1b8>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d02c      	beq.n	8006030 <HAL_DMA_Abort_IT+0x17c>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a25      	ldr	r2, [pc, #148]	@ (8006070 <HAL_DMA_Abort_IT+0x1bc>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d027      	beq.n	8006030 <HAL_DMA_Abort_IT+0x17c>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a23      	ldr	r2, [pc, #140]	@ (8006074 <HAL_DMA_Abort_IT+0x1c0>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d022      	beq.n	8006030 <HAL_DMA_Abort_IT+0x17c>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a22      	ldr	r2, [pc, #136]	@ (8006078 <HAL_DMA_Abort_IT+0x1c4>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d01d      	beq.n	8006030 <HAL_DMA_Abort_IT+0x17c>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a20      	ldr	r2, [pc, #128]	@ (800607c <HAL_DMA_Abort_IT+0x1c8>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d018      	beq.n	8006030 <HAL_DMA_Abort_IT+0x17c>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a1f      	ldr	r2, [pc, #124]	@ (8006080 <HAL_DMA_Abort_IT+0x1cc>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d013      	beq.n	8006030 <HAL_DMA_Abort_IT+0x17c>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a1d      	ldr	r2, [pc, #116]	@ (8006084 <HAL_DMA_Abort_IT+0x1d0>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d00e      	beq.n	8006030 <HAL_DMA_Abort_IT+0x17c>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a1c      	ldr	r2, [pc, #112]	@ (8006088 <HAL_DMA_Abort_IT+0x1d4>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d009      	beq.n	8006030 <HAL_DMA_Abort_IT+0x17c>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a1a      	ldr	r2, [pc, #104]	@ (800608c <HAL_DMA_Abort_IT+0x1d8>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d004      	beq.n	8006030 <HAL_DMA_Abort_IT+0x17c>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a19      	ldr	r2, [pc, #100]	@ (8006090 <HAL_DMA_Abort_IT+0x1dc>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d108      	bne.n	8006042 <HAL_DMA_Abort_IT+0x18e>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 0201 	bic.w	r2, r2, #1
 800603e:	601a      	str	r2, [r3, #0]
 8006040:	e178      	b.n	8006334 <HAL_DMA_Abort_IT+0x480>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0201 	bic.w	r2, r2, #1
 8006050:	601a      	str	r2, [r3, #0]
 8006052:	e16f      	b.n	8006334 <HAL_DMA_Abort_IT+0x480>
 8006054:	40020010 	.word	0x40020010
 8006058:	40020028 	.word	0x40020028
 800605c:	40020040 	.word	0x40020040
 8006060:	40020058 	.word	0x40020058
 8006064:	40020070 	.word	0x40020070
 8006068:	40020088 	.word	0x40020088
 800606c:	400200a0 	.word	0x400200a0
 8006070:	400200b8 	.word	0x400200b8
 8006074:	40020410 	.word	0x40020410
 8006078:	40020428 	.word	0x40020428
 800607c:	40020440 	.word	0x40020440
 8006080:	40020458 	.word	0x40020458
 8006084:	40020470 	.word	0x40020470
 8006088:	40020488 	.word	0x40020488
 800608c:	400204a0 	.word	0x400204a0
 8006090:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f022 020e 	bic.w	r2, r2, #14
 80060a2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a6c      	ldr	r2, [pc, #432]	@ (800625c <HAL_DMA_Abort_IT+0x3a8>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d04a      	beq.n	8006144 <HAL_DMA_Abort_IT+0x290>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a6b      	ldr	r2, [pc, #428]	@ (8006260 <HAL_DMA_Abort_IT+0x3ac>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d045      	beq.n	8006144 <HAL_DMA_Abort_IT+0x290>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a69      	ldr	r2, [pc, #420]	@ (8006264 <HAL_DMA_Abort_IT+0x3b0>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d040      	beq.n	8006144 <HAL_DMA_Abort_IT+0x290>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a68      	ldr	r2, [pc, #416]	@ (8006268 <HAL_DMA_Abort_IT+0x3b4>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d03b      	beq.n	8006144 <HAL_DMA_Abort_IT+0x290>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a66      	ldr	r2, [pc, #408]	@ (800626c <HAL_DMA_Abort_IT+0x3b8>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d036      	beq.n	8006144 <HAL_DMA_Abort_IT+0x290>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a65      	ldr	r2, [pc, #404]	@ (8006270 <HAL_DMA_Abort_IT+0x3bc>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d031      	beq.n	8006144 <HAL_DMA_Abort_IT+0x290>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a63      	ldr	r2, [pc, #396]	@ (8006274 <HAL_DMA_Abort_IT+0x3c0>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d02c      	beq.n	8006144 <HAL_DMA_Abort_IT+0x290>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a62      	ldr	r2, [pc, #392]	@ (8006278 <HAL_DMA_Abort_IT+0x3c4>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d027      	beq.n	8006144 <HAL_DMA_Abort_IT+0x290>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a60      	ldr	r2, [pc, #384]	@ (800627c <HAL_DMA_Abort_IT+0x3c8>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d022      	beq.n	8006144 <HAL_DMA_Abort_IT+0x290>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a5f      	ldr	r2, [pc, #380]	@ (8006280 <HAL_DMA_Abort_IT+0x3cc>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d01d      	beq.n	8006144 <HAL_DMA_Abort_IT+0x290>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a5d      	ldr	r2, [pc, #372]	@ (8006284 <HAL_DMA_Abort_IT+0x3d0>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d018      	beq.n	8006144 <HAL_DMA_Abort_IT+0x290>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a5c      	ldr	r2, [pc, #368]	@ (8006288 <HAL_DMA_Abort_IT+0x3d4>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d013      	beq.n	8006144 <HAL_DMA_Abort_IT+0x290>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a5a      	ldr	r2, [pc, #360]	@ (800628c <HAL_DMA_Abort_IT+0x3d8>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d00e      	beq.n	8006144 <HAL_DMA_Abort_IT+0x290>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a59      	ldr	r2, [pc, #356]	@ (8006290 <HAL_DMA_Abort_IT+0x3dc>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d009      	beq.n	8006144 <HAL_DMA_Abort_IT+0x290>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a57      	ldr	r2, [pc, #348]	@ (8006294 <HAL_DMA_Abort_IT+0x3e0>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d004      	beq.n	8006144 <HAL_DMA_Abort_IT+0x290>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a56      	ldr	r2, [pc, #344]	@ (8006298 <HAL_DMA_Abort_IT+0x3e4>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d108      	bne.n	8006156 <HAL_DMA_Abort_IT+0x2a2>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 0201 	bic.w	r2, r2, #1
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	e007      	b.n	8006166 <HAL_DMA_Abort_IT+0x2b2>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f022 0201 	bic.w	r2, r2, #1
 8006164:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a3c      	ldr	r2, [pc, #240]	@ (800625c <HAL_DMA_Abort_IT+0x3a8>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d072      	beq.n	8006256 <HAL_DMA_Abort_IT+0x3a2>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a3a      	ldr	r2, [pc, #232]	@ (8006260 <HAL_DMA_Abort_IT+0x3ac>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d06d      	beq.n	8006256 <HAL_DMA_Abort_IT+0x3a2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a39      	ldr	r2, [pc, #228]	@ (8006264 <HAL_DMA_Abort_IT+0x3b0>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d068      	beq.n	8006256 <HAL_DMA_Abort_IT+0x3a2>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a37      	ldr	r2, [pc, #220]	@ (8006268 <HAL_DMA_Abort_IT+0x3b4>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d063      	beq.n	8006256 <HAL_DMA_Abort_IT+0x3a2>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a36      	ldr	r2, [pc, #216]	@ (800626c <HAL_DMA_Abort_IT+0x3b8>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d05e      	beq.n	8006256 <HAL_DMA_Abort_IT+0x3a2>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a34      	ldr	r2, [pc, #208]	@ (8006270 <HAL_DMA_Abort_IT+0x3bc>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d059      	beq.n	8006256 <HAL_DMA_Abort_IT+0x3a2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a33      	ldr	r2, [pc, #204]	@ (8006274 <HAL_DMA_Abort_IT+0x3c0>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d054      	beq.n	8006256 <HAL_DMA_Abort_IT+0x3a2>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a31      	ldr	r2, [pc, #196]	@ (8006278 <HAL_DMA_Abort_IT+0x3c4>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d04f      	beq.n	8006256 <HAL_DMA_Abort_IT+0x3a2>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a30      	ldr	r2, [pc, #192]	@ (800627c <HAL_DMA_Abort_IT+0x3c8>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d04a      	beq.n	8006256 <HAL_DMA_Abort_IT+0x3a2>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a2e      	ldr	r2, [pc, #184]	@ (8006280 <HAL_DMA_Abort_IT+0x3cc>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d045      	beq.n	8006256 <HAL_DMA_Abort_IT+0x3a2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a2d      	ldr	r2, [pc, #180]	@ (8006284 <HAL_DMA_Abort_IT+0x3d0>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d040      	beq.n	8006256 <HAL_DMA_Abort_IT+0x3a2>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a2b      	ldr	r2, [pc, #172]	@ (8006288 <HAL_DMA_Abort_IT+0x3d4>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d03b      	beq.n	8006256 <HAL_DMA_Abort_IT+0x3a2>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a2a      	ldr	r2, [pc, #168]	@ (800628c <HAL_DMA_Abort_IT+0x3d8>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d036      	beq.n	8006256 <HAL_DMA_Abort_IT+0x3a2>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a28      	ldr	r2, [pc, #160]	@ (8006290 <HAL_DMA_Abort_IT+0x3dc>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d031      	beq.n	8006256 <HAL_DMA_Abort_IT+0x3a2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a27      	ldr	r2, [pc, #156]	@ (8006294 <HAL_DMA_Abort_IT+0x3e0>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d02c      	beq.n	8006256 <HAL_DMA_Abort_IT+0x3a2>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a25      	ldr	r2, [pc, #148]	@ (8006298 <HAL_DMA_Abort_IT+0x3e4>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d027      	beq.n	8006256 <HAL_DMA_Abort_IT+0x3a2>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a24      	ldr	r2, [pc, #144]	@ (800629c <HAL_DMA_Abort_IT+0x3e8>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d022      	beq.n	8006256 <HAL_DMA_Abort_IT+0x3a2>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a22      	ldr	r2, [pc, #136]	@ (80062a0 <HAL_DMA_Abort_IT+0x3ec>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d01d      	beq.n	8006256 <HAL_DMA_Abort_IT+0x3a2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a21      	ldr	r2, [pc, #132]	@ (80062a4 <HAL_DMA_Abort_IT+0x3f0>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d018      	beq.n	8006256 <HAL_DMA_Abort_IT+0x3a2>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a1f      	ldr	r2, [pc, #124]	@ (80062a8 <HAL_DMA_Abort_IT+0x3f4>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d013      	beq.n	8006256 <HAL_DMA_Abort_IT+0x3a2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a1e      	ldr	r2, [pc, #120]	@ (80062ac <HAL_DMA_Abort_IT+0x3f8>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d00e      	beq.n	8006256 <HAL_DMA_Abort_IT+0x3a2>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a1c      	ldr	r2, [pc, #112]	@ (80062b0 <HAL_DMA_Abort_IT+0x3fc>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d009      	beq.n	8006256 <HAL_DMA_Abort_IT+0x3a2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a1b      	ldr	r2, [pc, #108]	@ (80062b4 <HAL_DMA_Abort_IT+0x400>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d004      	beq.n	8006256 <HAL_DMA_Abort_IT+0x3a2>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a19      	ldr	r2, [pc, #100]	@ (80062b8 <HAL_DMA_Abort_IT+0x404>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d132      	bne.n	80062bc <HAL_DMA_Abort_IT+0x408>
 8006256:	2301      	movs	r3, #1
 8006258:	e031      	b.n	80062be <HAL_DMA_Abort_IT+0x40a>
 800625a:	bf00      	nop
 800625c:	40020010 	.word	0x40020010
 8006260:	40020028 	.word	0x40020028
 8006264:	40020040 	.word	0x40020040
 8006268:	40020058 	.word	0x40020058
 800626c:	40020070 	.word	0x40020070
 8006270:	40020088 	.word	0x40020088
 8006274:	400200a0 	.word	0x400200a0
 8006278:	400200b8 	.word	0x400200b8
 800627c:	40020410 	.word	0x40020410
 8006280:	40020428 	.word	0x40020428
 8006284:	40020440 	.word	0x40020440
 8006288:	40020458 	.word	0x40020458
 800628c:	40020470 	.word	0x40020470
 8006290:	40020488 	.word	0x40020488
 8006294:	400204a0 	.word	0x400204a0
 8006298:	400204b8 	.word	0x400204b8
 800629c:	58025408 	.word	0x58025408
 80062a0:	5802541c 	.word	0x5802541c
 80062a4:	58025430 	.word	0x58025430
 80062a8:	58025444 	.word	0x58025444
 80062ac:	58025458 	.word	0x58025458
 80062b0:	5802546c 	.word	0x5802546c
 80062b4:	58025480 	.word	0x58025480
 80062b8:	58025494 	.word	0x58025494
 80062bc:	2300      	movs	r3, #0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d028      	beq.n	8006314 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062d0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062d6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062dc:	f003 031f 	and.w	r3, r3, #31
 80062e0:	2201      	movs	r2, #1
 80062e2:	409a      	lsls	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80062f0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00c      	beq.n	8006314 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006304:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006308:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006312:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006328:	2b00      	cmp	r3, #0
 800632a:	d003      	beq.n	8006334 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop

08006340 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b08a      	sub	sp, #40	@ 0x28
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006348:	2300      	movs	r3, #0
 800634a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800634c:	4b67      	ldr	r3, [pc, #412]	@ (80064ec <HAL_DMA_IRQHandler+0x1ac>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a67      	ldr	r2, [pc, #412]	@ (80064f0 <HAL_DMA_IRQHandler+0x1b0>)
 8006352:	fba2 2303 	umull	r2, r3, r2, r3
 8006356:	0a9b      	lsrs	r3, r3, #10
 8006358:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006364:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a5f      	ldr	r2, [pc, #380]	@ (80064f4 <HAL_DMA_IRQHandler+0x1b4>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d04a      	beq.n	8006412 <HAL_DMA_IRQHandler+0xd2>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a5d      	ldr	r2, [pc, #372]	@ (80064f8 <HAL_DMA_IRQHandler+0x1b8>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d045      	beq.n	8006412 <HAL_DMA_IRQHandler+0xd2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a5c      	ldr	r2, [pc, #368]	@ (80064fc <HAL_DMA_IRQHandler+0x1bc>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d040      	beq.n	8006412 <HAL_DMA_IRQHandler+0xd2>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a5a      	ldr	r2, [pc, #360]	@ (8006500 <HAL_DMA_IRQHandler+0x1c0>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d03b      	beq.n	8006412 <HAL_DMA_IRQHandler+0xd2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a59      	ldr	r2, [pc, #356]	@ (8006504 <HAL_DMA_IRQHandler+0x1c4>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d036      	beq.n	8006412 <HAL_DMA_IRQHandler+0xd2>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a57      	ldr	r2, [pc, #348]	@ (8006508 <HAL_DMA_IRQHandler+0x1c8>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d031      	beq.n	8006412 <HAL_DMA_IRQHandler+0xd2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a56      	ldr	r2, [pc, #344]	@ (800650c <HAL_DMA_IRQHandler+0x1cc>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d02c      	beq.n	8006412 <HAL_DMA_IRQHandler+0xd2>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a54      	ldr	r2, [pc, #336]	@ (8006510 <HAL_DMA_IRQHandler+0x1d0>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d027      	beq.n	8006412 <HAL_DMA_IRQHandler+0xd2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a53      	ldr	r2, [pc, #332]	@ (8006514 <HAL_DMA_IRQHandler+0x1d4>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d022      	beq.n	8006412 <HAL_DMA_IRQHandler+0xd2>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a51      	ldr	r2, [pc, #324]	@ (8006518 <HAL_DMA_IRQHandler+0x1d8>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d01d      	beq.n	8006412 <HAL_DMA_IRQHandler+0xd2>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a50      	ldr	r2, [pc, #320]	@ (800651c <HAL_DMA_IRQHandler+0x1dc>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d018      	beq.n	8006412 <HAL_DMA_IRQHandler+0xd2>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a4e      	ldr	r2, [pc, #312]	@ (8006520 <HAL_DMA_IRQHandler+0x1e0>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d013      	beq.n	8006412 <HAL_DMA_IRQHandler+0xd2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a4d      	ldr	r2, [pc, #308]	@ (8006524 <HAL_DMA_IRQHandler+0x1e4>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d00e      	beq.n	8006412 <HAL_DMA_IRQHandler+0xd2>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a4b      	ldr	r2, [pc, #300]	@ (8006528 <HAL_DMA_IRQHandler+0x1e8>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d009      	beq.n	8006412 <HAL_DMA_IRQHandler+0xd2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a4a      	ldr	r2, [pc, #296]	@ (800652c <HAL_DMA_IRQHandler+0x1ec>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d004      	beq.n	8006412 <HAL_DMA_IRQHandler+0xd2>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a48      	ldr	r2, [pc, #288]	@ (8006530 <HAL_DMA_IRQHandler+0x1f0>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d101      	bne.n	8006416 <HAL_DMA_IRQHandler+0xd6>
 8006412:	2301      	movs	r3, #1
 8006414:	e000      	b.n	8006418 <HAL_DMA_IRQHandler+0xd8>
 8006416:	2300      	movs	r3, #0
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 842b 	beq.w	8006c74 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006422:	f003 031f 	and.w	r3, r3, #31
 8006426:	2208      	movs	r2, #8
 8006428:	409a      	lsls	r2, r3
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	4013      	ands	r3, r2
 800642e:	2b00      	cmp	r3, #0
 8006430:	f000 80a2 	beq.w	8006578 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a2e      	ldr	r2, [pc, #184]	@ (80064f4 <HAL_DMA_IRQHandler+0x1b4>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d04a      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x194>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a2d      	ldr	r2, [pc, #180]	@ (80064f8 <HAL_DMA_IRQHandler+0x1b8>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d045      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x194>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a2b      	ldr	r2, [pc, #172]	@ (80064fc <HAL_DMA_IRQHandler+0x1bc>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d040      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x194>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a2a      	ldr	r2, [pc, #168]	@ (8006500 <HAL_DMA_IRQHandler+0x1c0>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d03b      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x194>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a28      	ldr	r2, [pc, #160]	@ (8006504 <HAL_DMA_IRQHandler+0x1c4>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d036      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x194>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a27      	ldr	r2, [pc, #156]	@ (8006508 <HAL_DMA_IRQHandler+0x1c8>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d031      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x194>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a25      	ldr	r2, [pc, #148]	@ (800650c <HAL_DMA_IRQHandler+0x1cc>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d02c      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x194>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a24      	ldr	r2, [pc, #144]	@ (8006510 <HAL_DMA_IRQHandler+0x1d0>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d027      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x194>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a22      	ldr	r2, [pc, #136]	@ (8006514 <HAL_DMA_IRQHandler+0x1d4>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d022      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x194>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a21      	ldr	r2, [pc, #132]	@ (8006518 <HAL_DMA_IRQHandler+0x1d8>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d01d      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x194>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a1f      	ldr	r2, [pc, #124]	@ (800651c <HAL_DMA_IRQHandler+0x1dc>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d018      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x194>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a1e      	ldr	r2, [pc, #120]	@ (8006520 <HAL_DMA_IRQHandler+0x1e0>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d013      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x194>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a1c      	ldr	r2, [pc, #112]	@ (8006524 <HAL_DMA_IRQHandler+0x1e4>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d00e      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x194>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a1b      	ldr	r2, [pc, #108]	@ (8006528 <HAL_DMA_IRQHandler+0x1e8>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d009      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x194>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a19      	ldr	r2, [pc, #100]	@ (800652c <HAL_DMA_IRQHandler+0x1ec>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d004      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x194>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a18      	ldr	r2, [pc, #96]	@ (8006530 <HAL_DMA_IRQHandler+0x1f0>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d12f      	bne.n	8006534 <HAL_DMA_IRQHandler+0x1f4>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0304 	and.w	r3, r3, #4
 80064de:	2b00      	cmp	r3, #0
 80064e0:	bf14      	ite	ne
 80064e2:	2301      	movne	r3, #1
 80064e4:	2300      	moveq	r3, #0
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	e02e      	b.n	8006548 <HAL_DMA_IRQHandler+0x208>
 80064ea:	bf00      	nop
 80064ec:	24000004 	.word	0x24000004
 80064f0:	1b4e81b5 	.word	0x1b4e81b5
 80064f4:	40020010 	.word	0x40020010
 80064f8:	40020028 	.word	0x40020028
 80064fc:	40020040 	.word	0x40020040
 8006500:	40020058 	.word	0x40020058
 8006504:	40020070 	.word	0x40020070
 8006508:	40020088 	.word	0x40020088
 800650c:	400200a0 	.word	0x400200a0
 8006510:	400200b8 	.word	0x400200b8
 8006514:	40020410 	.word	0x40020410
 8006518:	40020428 	.word	0x40020428
 800651c:	40020440 	.word	0x40020440
 8006520:	40020458 	.word	0x40020458
 8006524:	40020470 	.word	0x40020470
 8006528:	40020488 	.word	0x40020488
 800652c:	400204a0 	.word	0x400204a0
 8006530:	400204b8 	.word	0x400204b8
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0308 	and.w	r3, r3, #8
 800653e:	2b00      	cmp	r3, #0
 8006540:	bf14      	ite	ne
 8006542:	2301      	movne	r3, #1
 8006544:	2300      	moveq	r3, #0
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d015      	beq.n	8006578 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f022 0204 	bic.w	r2, r2, #4
 800655a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006560:	f003 031f 	and.w	r3, r3, #31
 8006564:	2208      	movs	r2, #8
 8006566:	409a      	lsls	r2, r3
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006570:	f043 0201 	orr.w	r2, r3, #1
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800657c:	f003 031f 	and.w	r3, r3, #31
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	fa22 f303 	lsr.w	r3, r2, r3
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	d06e      	beq.n	800666c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a69      	ldr	r2, [pc, #420]	@ (8006738 <HAL_DMA_IRQHandler+0x3f8>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d04a      	beq.n	800662e <HAL_DMA_IRQHandler+0x2ee>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a67      	ldr	r2, [pc, #412]	@ (800673c <HAL_DMA_IRQHandler+0x3fc>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d045      	beq.n	800662e <HAL_DMA_IRQHandler+0x2ee>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a66      	ldr	r2, [pc, #408]	@ (8006740 <HAL_DMA_IRQHandler+0x400>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d040      	beq.n	800662e <HAL_DMA_IRQHandler+0x2ee>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a64      	ldr	r2, [pc, #400]	@ (8006744 <HAL_DMA_IRQHandler+0x404>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d03b      	beq.n	800662e <HAL_DMA_IRQHandler+0x2ee>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a63      	ldr	r2, [pc, #396]	@ (8006748 <HAL_DMA_IRQHandler+0x408>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d036      	beq.n	800662e <HAL_DMA_IRQHandler+0x2ee>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a61      	ldr	r2, [pc, #388]	@ (800674c <HAL_DMA_IRQHandler+0x40c>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d031      	beq.n	800662e <HAL_DMA_IRQHandler+0x2ee>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a60      	ldr	r2, [pc, #384]	@ (8006750 <HAL_DMA_IRQHandler+0x410>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d02c      	beq.n	800662e <HAL_DMA_IRQHandler+0x2ee>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a5e      	ldr	r2, [pc, #376]	@ (8006754 <HAL_DMA_IRQHandler+0x414>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d027      	beq.n	800662e <HAL_DMA_IRQHandler+0x2ee>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a5d      	ldr	r2, [pc, #372]	@ (8006758 <HAL_DMA_IRQHandler+0x418>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d022      	beq.n	800662e <HAL_DMA_IRQHandler+0x2ee>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a5b      	ldr	r2, [pc, #364]	@ (800675c <HAL_DMA_IRQHandler+0x41c>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d01d      	beq.n	800662e <HAL_DMA_IRQHandler+0x2ee>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a5a      	ldr	r2, [pc, #360]	@ (8006760 <HAL_DMA_IRQHandler+0x420>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d018      	beq.n	800662e <HAL_DMA_IRQHandler+0x2ee>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a58      	ldr	r2, [pc, #352]	@ (8006764 <HAL_DMA_IRQHandler+0x424>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d013      	beq.n	800662e <HAL_DMA_IRQHandler+0x2ee>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a57      	ldr	r2, [pc, #348]	@ (8006768 <HAL_DMA_IRQHandler+0x428>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d00e      	beq.n	800662e <HAL_DMA_IRQHandler+0x2ee>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a55      	ldr	r2, [pc, #340]	@ (800676c <HAL_DMA_IRQHandler+0x42c>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d009      	beq.n	800662e <HAL_DMA_IRQHandler+0x2ee>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a54      	ldr	r2, [pc, #336]	@ (8006770 <HAL_DMA_IRQHandler+0x430>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d004      	beq.n	800662e <HAL_DMA_IRQHandler+0x2ee>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a52      	ldr	r2, [pc, #328]	@ (8006774 <HAL_DMA_IRQHandler+0x434>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d10a      	bne.n	8006644 <HAL_DMA_IRQHandler+0x304>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006638:	2b00      	cmp	r3, #0
 800663a:	bf14      	ite	ne
 800663c:	2301      	movne	r3, #1
 800663e:	2300      	moveq	r3, #0
 8006640:	b2db      	uxtb	r3, r3
 8006642:	e003      	b.n	800664c <HAL_DMA_IRQHandler+0x30c>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2300      	movs	r3, #0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00d      	beq.n	800666c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006654:	f003 031f 	and.w	r3, r3, #31
 8006658:	2201      	movs	r2, #1
 800665a:	409a      	lsls	r2, r3
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006664:	f043 0202 	orr.w	r2, r3, #2
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006670:	f003 031f 	and.w	r3, r3, #31
 8006674:	2204      	movs	r2, #4
 8006676:	409a      	lsls	r2, r3
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	4013      	ands	r3, r2
 800667c:	2b00      	cmp	r3, #0
 800667e:	f000 808f 	beq.w	80067a0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a2c      	ldr	r2, [pc, #176]	@ (8006738 <HAL_DMA_IRQHandler+0x3f8>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d04a      	beq.n	8006722 <HAL_DMA_IRQHandler+0x3e2>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a2a      	ldr	r2, [pc, #168]	@ (800673c <HAL_DMA_IRQHandler+0x3fc>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d045      	beq.n	8006722 <HAL_DMA_IRQHandler+0x3e2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a29      	ldr	r2, [pc, #164]	@ (8006740 <HAL_DMA_IRQHandler+0x400>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d040      	beq.n	8006722 <HAL_DMA_IRQHandler+0x3e2>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a27      	ldr	r2, [pc, #156]	@ (8006744 <HAL_DMA_IRQHandler+0x404>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d03b      	beq.n	8006722 <HAL_DMA_IRQHandler+0x3e2>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a26      	ldr	r2, [pc, #152]	@ (8006748 <HAL_DMA_IRQHandler+0x408>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d036      	beq.n	8006722 <HAL_DMA_IRQHandler+0x3e2>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a24      	ldr	r2, [pc, #144]	@ (800674c <HAL_DMA_IRQHandler+0x40c>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d031      	beq.n	8006722 <HAL_DMA_IRQHandler+0x3e2>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a23      	ldr	r2, [pc, #140]	@ (8006750 <HAL_DMA_IRQHandler+0x410>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d02c      	beq.n	8006722 <HAL_DMA_IRQHandler+0x3e2>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a21      	ldr	r2, [pc, #132]	@ (8006754 <HAL_DMA_IRQHandler+0x414>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d027      	beq.n	8006722 <HAL_DMA_IRQHandler+0x3e2>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a20      	ldr	r2, [pc, #128]	@ (8006758 <HAL_DMA_IRQHandler+0x418>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d022      	beq.n	8006722 <HAL_DMA_IRQHandler+0x3e2>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a1e      	ldr	r2, [pc, #120]	@ (800675c <HAL_DMA_IRQHandler+0x41c>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d01d      	beq.n	8006722 <HAL_DMA_IRQHandler+0x3e2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a1d      	ldr	r2, [pc, #116]	@ (8006760 <HAL_DMA_IRQHandler+0x420>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d018      	beq.n	8006722 <HAL_DMA_IRQHandler+0x3e2>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a1b      	ldr	r2, [pc, #108]	@ (8006764 <HAL_DMA_IRQHandler+0x424>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d013      	beq.n	8006722 <HAL_DMA_IRQHandler+0x3e2>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a1a      	ldr	r2, [pc, #104]	@ (8006768 <HAL_DMA_IRQHandler+0x428>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d00e      	beq.n	8006722 <HAL_DMA_IRQHandler+0x3e2>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a18      	ldr	r2, [pc, #96]	@ (800676c <HAL_DMA_IRQHandler+0x42c>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d009      	beq.n	8006722 <HAL_DMA_IRQHandler+0x3e2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a17      	ldr	r2, [pc, #92]	@ (8006770 <HAL_DMA_IRQHandler+0x430>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d004      	beq.n	8006722 <HAL_DMA_IRQHandler+0x3e2>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a15      	ldr	r2, [pc, #84]	@ (8006774 <HAL_DMA_IRQHandler+0x434>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d12a      	bne.n	8006778 <HAL_DMA_IRQHandler+0x438>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	2b00      	cmp	r3, #0
 800672e:	bf14      	ite	ne
 8006730:	2301      	movne	r3, #1
 8006732:	2300      	moveq	r3, #0
 8006734:	b2db      	uxtb	r3, r3
 8006736:	e023      	b.n	8006780 <HAL_DMA_IRQHandler+0x440>
 8006738:	40020010 	.word	0x40020010
 800673c:	40020028 	.word	0x40020028
 8006740:	40020040 	.word	0x40020040
 8006744:	40020058 	.word	0x40020058
 8006748:	40020070 	.word	0x40020070
 800674c:	40020088 	.word	0x40020088
 8006750:	400200a0 	.word	0x400200a0
 8006754:	400200b8 	.word	0x400200b8
 8006758:	40020410 	.word	0x40020410
 800675c:	40020428 	.word	0x40020428
 8006760:	40020440 	.word	0x40020440
 8006764:	40020458 	.word	0x40020458
 8006768:	40020470 	.word	0x40020470
 800676c:	40020488 	.word	0x40020488
 8006770:	400204a0 	.word	0x400204a0
 8006774:	400204b8 	.word	0x400204b8
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2300      	movs	r3, #0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00d      	beq.n	80067a0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006788:	f003 031f 	and.w	r3, r3, #31
 800678c:	2204      	movs	r2, #4
 800678e:	409a      	lsls	r2, r3
 8006790:	6a3b      	ldr	r3, [r7, #32]
 8006792:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006798:	f043 0204 	orr.w	r2, r3, #4
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067a4:	f003 031f 	and.w	r3, r3, #31
 80067a8:	2210      	movs	r2, #16
 80067aa:	409a      	lsls	r2, r3
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	4013      	ands	r3, r2
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 80a6 	beq.w	8006902 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a85      	ldr	r2, [pc, #532]	@ (80069d0 <HAL_DMA_IRQHandler+0x690>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d04a      	beq.n	8006856 <HAL_DMA_IRQHandler+0x516>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a83      	ldr	r2, [pc, #524]	@ (80069d4 <HAL_DMA_IRQHandler+0x694>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d045      	beq.n	8006856 <HAL_DMA_IRQHandler+0x516>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a82      	ldr	r2, [pc, #520]	@ (80069d8 <HAL_DMA_IRQHandler+0x698>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d040      	beq.n	8006856 <HAL_DMA_IRQHandler+0x516>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a80      	ldr	r2, [pc, #512]	@ (80069dc <HAL_DMA_IRQHandler+0x69c>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d03b      	beq.n	8006856 <HAL_DMA_IRQHandler+0x516>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a7f      	ldr	r2, [pc, #508]	@ (80069e0 <HAL_DMA_IRQHandler+0x6a0>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d036      	beq.n	8006856 <HAL_DMA_IRQHandler+0x516>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a7d      	ldr	r2, [pc, #500]	@ (80069e4 <HAL_DMA_IRQHandler+0x6a4>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d031      	beq.n	8006856 <HAL_DMA_IRQHandler+0x516>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a7c      	ldr	r2, [pc, #496]	@ (80069e8 <HAL_DMA_IRQHandler+0x6a8>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d02c      	beq.n	8006856 <HAL_DMA_IRQHandler+0x516>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a7a      	ldr	r2, [pc, #488]	@ (80069ec <HAL_DMA_IRQHandler+0x6ac>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d027      	beq.n	8006856 <HAL_DMA_IRQHandler+0x516>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a79      	ldr	r2, [pc, #484]	@ (80069f0 <HAL_DMA_IRQHandler+0x6b0>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d022      	beq.n	8006856 <HAL_DMA_IRQHandler+0x516>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a77      	ldr	r2, [pc, #476]	@ (80069f4 <HAL_DMA_IRQHandler+0x6b4>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d01d      	beq.n	8006856 <HAL_DMA_IRQHandler+0x516>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a76      	ldr	r2, [pc, #472]	@ (80069f8 <HAL_DMA_IRQHandler+0x6b8>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d018      	beq.n	8006856 <HAL_DMA_IRQHandler+0x516>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a74      	ldr	r2, [pc, #464]	@ (80069fc <HAL_DMA_IRQHandler+0x6bc>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d013      	beq.n	8006856 <HAL_DMA_IRQHandler+0x516>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a73      	ldr	r2, [pc, #460]	@ (8006a00 <HAL_DMA_IRQHandler+0x6c0>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d00e      	beq.n	8006856 <HAL_DMA_IRQHandler+0x516>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a71      	ldr	r2, [pc, #452]	@ (8006a04 <HAL_DMA_IRQHandler+0x6c4>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d009      	beq.n	8006856 <HAL_DMA_IRQHandler+0x516>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a70      	ldr	r2, [pc, #448]	@ (8006a08 <HAL_DMA_IRQHandler+0x6c8>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d004      	beq.n	8006856 <HAL_DMA_IRQHandler+0x516>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a6e      	ldr	r2, [pc, #440]	@ (8006a0c <HAL_DMA_IRQHandler+0x6cc>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d10a      	bne.n	800686c <HAL_DMA_IRQHandler+0x52c>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0308 	and.w	r3, r3, #8
 8006860:	2b00      	cmp	r3, #0
 8006862:	bf14      	ite	ne
 8006864:	2301      	movne	r3, #1
 8006866:	2300      	moveq	r3, #0
 8006868:	b2db      	uxtb	r3, r3
 800686a:	e009      	b.n	8006880 <HAL_DMA_IRQHandler+0x540>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0304 	and.w	r3, r3, #4
 8006876:	2b00      	cmp	r3, #0
 8006878:	bf14      	ite	ne
 800687a:	2301      	movne	r3, #1
 800687c:	2300      	moveq	r3, #0
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	d03e      	beq.n	8006902 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006888:	f003 031f 	and.w	r3, r3, #31
 800688c:	2210      	movs	r2, #16
 800688e:	409a      	lsls	r2, r3
 8006890:	6a3b      	ldr	r3, [r7, #32]
 8006892:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d018      	beq.n	80068d4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d108      	bne.n	80068c2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d024      	beq.n	8006902 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	4798      	blx	r3
 80068c0:	e01f      	b.n	8006902 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d01b      	beq.n	8006902 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	4798      	blx	r3
 80068d2:	e016      	b.n	8006902 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d107      	bne.n	80068f2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f022 0208 	bic.w	r2, r2, #8
 80068f0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006906:	f003 031f 	and.w	r3, r3, #31
 800690a:	2220      	movs	r2, #32
 800690c:	409a      	lsls	r2, r3
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	4013      	ands	r3, r2
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 8110 	beq.w	8006b38 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a2c      	ldr	r2, [pc, #176]	@ (80069d0 <HAL_DMA_IRQHandler+0x690>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d04a      	beq.n	80069b8 <HAL_DMA_IRQHandler+0x678>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a2b      	ldr	r2, [pc, #172]	@ (80069d4 <HAL_DMA_IRQHandler+0x694>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d045      	beq.n	80069b8 <HAL_DMA_IRQHandler+0x678>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a29      	ldr	r2, [pc, #164]	@ (80069d8 <HAL_DMA_IRQHandler+0x698>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d040      	beq.n	80069b8 <HAL_DMA_IRQHandler+0x678>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a28      	ldr	r2, [pc, #160]	@ (80069dc <HAL_DMA_IRQHandler+0x69c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d03b      	beq.n	80069b8 <HAL_DMA_IRQHandler+0x678>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a26      	ldr	r2, [pc, #152]	@ (80069e0 <HAL_DMA_IRQHandler+0x6a0>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d036      	beq.n	80069b8 <HAL_DMA_IRQHandler+0x678>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a25      	ldr	r2, [pc, #148]	@ (80069e4 <HAL_DMA_IRQHandler+0x6a4>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d031      	beq.n	80069b8 <HAL_DMA_IRQHandler+0x678>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a23      	ldr	r2, [pc, #140]	@ (80069e8 <HAL_DMA_IRQHandler+0x6a8>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d02c      	beq.n	80069b8 <HAL_DMA_IRQHandler+0x678>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a22      	ldr	r2, [pc, #136]	@ (80069ec <HAL_DMA_IRQHandler+0x6ac>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d027      	beq.n	80069b8 <HAL_DMA_IRQHandler+0x678>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a20      	ldr	r2, [pc, #128]	@ (80069f0 <HAL_DMA_IRQHandler+0x6b0>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d022      	beq.n	80069b8 <HAL_DMA_IRQHandler+0x678>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a1f      	ldr	r2, [pc, #124]	@ (80069f4 <HAL_DMA_IRQHandler+0x6b4>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d01d      	beq.n	80069b8 <HAL_DMA_IRQHandler+0x678>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a1d      	ldr	r2, [pc, #116]	@ (80069f8 <HAL_DMA_IRQHandler+0x6b8>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d018      	beq.n	80069b8 <HAL_DMA_IRQHandler+0x678>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a1c      	ldr	r2, [pc, #112]	@ (80069fc <HAL_DMA_IRQHandler+0x6bc>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d013      	beq.n	80069b8 <HAL_DMA_IRQHandler+0x678>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a1a      	ldr	r2, [pc, #104]	@ (8006a00 <HAL_DMA_IRQHandler+0x6c0>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d00e      	beq.n	80069b8 <HAL_DMA_IRQHandler+0x678>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a19      	ldr	r2, [pc, #100]	@ (8006a04 <HAL_DMA_IRQHandler+0x6c4>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d009      	beq.n	80069b8 <HAL_DMA_IRQHandler+0x678>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a17      	ldr	r2, [pc, #92]	@ (8006a08 <HAL_DMA_IRQHandler+0x6c8>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d004      	beq.n	80069b8 <HAL_DMA_IRQHandler+0x678>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a16      	ldr	r2, [pc, #88]	@ (8006a0c <HAL_DMA_IRQHandler+0x6cc>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d12b      	bne.n	8006a10 <HAL_DMA_IRQHandler+0x6d0>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0310 	and.w	r3, r3, #16
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	bf14      	ite	ne
 80069c6:	2301      	movne	r3, #1
 80069c8:	2300      	moveq	r3, #0
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	e02a      	b.n	8006a24 <HAL_DMA_IRQHandler+0x6e4>
 80069ce:	bf00      	nop
 80069d0:	40020010 	.word	0x40020010
 80069d4:	40020028 	.word	0x40020028
 80069d8:	40020040 	.word	0x40020040
 80069dc:	40020058 	.word	0x40020058
 80069e0:	40020070 	.word	0x40020070
 80069e4:	40020088 	.word	0x40020088
 80069e8:	400200a0 	.word	0x400200a0
 80069ec:	400200b8 	.word	0x400200b8
 80069f0:	40020410 	.word	0x40020410
 80069f4:	40020428 	.word	0x40020428
 80069f8:	40020440 	.word	0x40020440
 80069fc:	40020458 	.word	0x40020458
 8006a00:	40020470 	.word	0x40020470
 8006a04:	40020488 	.word	0x40020488
 8006a08:	400204a0 	.word	0x400204a0
 8006a0c:	400204b8 	.word	0x400204b8
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	bf14      	ite	ne
 8006a1e:	2301      	movne	r3, #1
 8006a20:	2300      	moveq	r3, #0
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 8087 	beq.w	8006b38 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a2e:	f003 031f 	and.w	r3, r3, #31
 8006a32:	2220      	movs	r2, #32
 8006a34:	409a      	lsls	r2, r3
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b04      	cmp	r3, #4
 8006a44:	d139      	bne.n	8006aba <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 0216 	bic.w	r2, r2, #22
 8006a54:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	695a      	ldr	r2, [r3, #20]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a64:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d103      	bne.n	8006a76 <HAL_DMA_IRQHandler+0x736>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d007      	beq.n	8006a86 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 0208 	bic.w	r2, r2, #8
 8006a84:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a8a:	f003 031f 	and.w	r3, r3, #31
 8006a8e:	223f      	movs	r2, #63	@ 0x3f
 8006a90:	409a      	lsls	r2, r3
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f000 834a 	beq.w	8007144 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	4798      	blx	r3
          }
          return;
 8006ab8:	e344      	b.n	8007144 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d018      	beq.n	8006afa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d108      	bne.n	8006ae8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d02c      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	4798      	blx	r3
 8006ae6:	e027      	b.n	8006b38 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d023      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	4798      	blx	r3
 8006af8:	e01e      	b.n	8006b38 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10f      	bne.n	8006b28 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f022 0210 	bic.w	r2, r2, #16
 8006b16:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d003      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 8306 	beq.w	800714e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f000 8088 	beq.w	8006c60 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2204      	movs	r2, #4
 8006b54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a7a      	ldr	r2, [pc, #488]	@ (8006d48 <HAL_DMA_IRQHandler+0xa08>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d04a      	beq.n	8006bf8 <HAL_DMA_IRQHandler+0x8b8>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a79      	ldr	r2, [pc, #484]	@ (8006d4c <HAL_DMA_IRQHandler+0xa0c>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d045      	beq.n	8006bf8 <HAL_DMA_IRQHandler+0x8b8>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a77      	ldr	r2, [pc, #476]	@ (8006d50 <HAL_DMA_IRQHandler+0xa10>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d040      	beq.n	8006bf8 <HAL_DMA_IRQHandler+0x8b8>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a76      	ldr	r2, [pc, #472]	@ (8006d54 <HAL_DMA_IRQHandler+0xa14>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d03b      	beq.n	8006bf8 <HAL_DMA_IRQHandler+0x8b8>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a74      	ldr	r2, [pc, #464]	@ (8006d58 <HAL_DMA_IRQHandler+0xa18>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d036      	beq.n	8006bf8 <HAL_DMA_IRQHandler+0x8b8>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a73      	ldr	r2, [pc, #460]	@ (8006d5c <HAL_DMA_IRQHandler+0xa1c>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d031      	beq.n	8006bf8 <HAL_DMA_IRQHandler+0x8b8>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a71      	ldr	r2, [pc, #452]	@ (8006d60 <HAL_DMA_IRQHandler+0xa20>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d02c      	beq.n	8006bf8 <HAL_DMA_IRQHandler+0x8b8>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a70      	ldr	r2, [pc, #448]	@ (8006d64 <HAL_DMA_IRQHandler+0xa24>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d027      	beq.n	8006bf8 <HAL_DMA_IRQHandler+0x8b8>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a6e      	ldr	r2, [pc, #440]	@ (8006d68 <HAL_DMA_IRQHandler+0xa28>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d022      	beq.n	8006bf8 <HAL_DMA_IRQHandler+0x8b8>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a6d      	ldr	r2, [pc, #436]	@ (8006d6c <HAL_DMA_IRQHandler+0xa2c>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d01d      	beq.n	8006bf8 <HAL_DMA_IRQHandler+0x8b8>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a6b      	ldr	r2, [pc, #428]	@ (8006d70 <HAL_DMA_IRQHandler+0xa30>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d018      	beq.n	8006bf8 <HAL_DMA_IRQHandler+0x8b8>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a6a      	ldr	r2, [pc, #424]	@ (8006d74 <HAL_DMA_IRQHandler+0xa34>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d013      	beq.n	8006bf8 <HAL_DMA_IRQHandler+0x8b8>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a68      	ldr	r2, [pc, #416]	@ (8006d78 <HAL_DMA_IRQHandler+0xa38>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d00e      	beq.n	8006bf8 <HAL_DMA_IRQHandler+0x8b8>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a67      	ldr	r2, [pc, #412]	@ (8006d7c <HAL_DMA_IRQHandler+0xa3c>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d009      	beq.n	8006bf8 <HAL_DMA_IRQHandler+0x8b8>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a65      	ldr	r2, [pc, #404]	@ (8006d80 <HAL_DMA_IRQHandler+0xa40>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d004      	beq.n	8006bf8 <HAL_DMA_IRQHandler+0x8b8>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a64      	ldr	r2, [pc, #400]	@ (8006d84 <HAL_DMA_IRQHandler+0xa44>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d108      	bne.n	8006c0a <HAL_DMA_IRQHandler+0x8ca>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f022 0201 	bic.w	r2, r2, #1
 8006c06:	601a      	str	r2, [r3, #0]
 8006c08:	e007      	b.n	8006c1a <HAL_DMA_IRQHandler+0x8da>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 0201 	bic.w	r2, r2, #1
 8006c18:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	60fb      	str	r3, [r7, #12]
 8006c20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d307      	bcc.n	8006c36 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0301 	and.w	r3, r3, #1
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1f2      	bne.n	8006c1a <HAL_DMA_IRQHandler+0x8da>
 8006c34:	e000      	b.n	8006c38 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006c36:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0301 	and.w	r3, r3, #1
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d004      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2203      	movs	r2, #3
 8006c4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006c4e:	e003      	b.n	8006c58 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 8272 	beq.w	800714e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	4798      	blx	r3
 8006c72:	e26c      	b.n	800714e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a43      	ldr	r2, [pc, #268]	@ (8006d88 <HAL_DMA_IRQHandler+0xa48>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d022      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0x984>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a42      	ldr	r2, [pc, #264]	@ (8006d8c <HAL_DMA_IRQHandler+0xa4c>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d01d      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0x984>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a40      	ldr	r2, [pc, #256]	@ (8006d90 <HAL_DMA_IRQHandler+0xa50>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d018      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0x984>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a3f      	ldr	r2, [pc, #252]	@ (8006d94 <HAL_DMA_IRQHandler+0xa54>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d013      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0x984>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a3d      	ldr	r2, [pc, #244]	@ (8006d98 <HAL_DMA_IRQHandler+0xa58>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d00e      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0x984>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a3c      	ldr	r2, [pc, #240]	@ (8006d9c <HAL_DMA_IRQHandler+0xa5c>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d009      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0x984>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a3a      	ldr	r2, [pc, #232]	@ (8006da0 <HAL_DMA_IRQHandler+0xa60>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d004      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0x984>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a39      	ldr	r2, [pc, #228]	@ (8006da4 <HAL_DMA_IRQHandler+0xa64>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d101      	bne.n	8006cc8 <HAL_DMA_IRQHandler+0x988>
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e000      	b.n	8006cca <HAL_DMA_IRQHandler+0x98a>
 8006cc8:	2300      	movs	r3, #0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 823f 	beq.w	800714e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cdc:	f003 031f 	and.w	r3, r3, #31
 8006ce0:	2204      	movs	r2, #4
 8006ce2:	409a      	lsls	r2, r3
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 80cd 	beq.w	8006e88 <HAL_DMA_IRQHandler+0xb48>
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	f003 0304 	and.w	r3, r3, #4
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 80c7 	beq.w	8006e88 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cfe:	f003 031f 	and.w	r3, r3, #31
 8006d02:	2204      	movs	r2, #4
 8006d04:	409a      	lsls	r2, r3
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d049      	beq.n	8006da8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d109      	bne.n	8006d32 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 8210 	beq.w	8007148 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d30:	e20a      	b.n	8007148 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f000 8206 	beq.w	8007148 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d44:	e200      	b.n	8007148 <HAL_DMA_IRQHandler+0xe08>
 8006d46:	bf00      	nop
 8006d48:	40020010 	.word	0x40020010
 8006d4c:	40020028 	.word	0x40020028
 8006d50:	40020040 	.word	0x40020040
 8006d54:	40020058 	.word	0x40020058
 8006d58:	40020070 	.word	0x40020070
 8006d5c:	40020088 	.word	0x40020088
 8006d60:	400200a0 	.word	0x400200a0
 8006d64:	400200b8 	.word	0x400200b8
 8006d68:	40020410 	.word	0x40020410
 8006d6c:	40020428 	.word	0x40020428
 8006d70:	40020440 	.word	0x40020440
 8006d74:	40020458 	.word	0x40020458
 8006d78:	40020470 	.word	0x40020470
 8006d7c:	40020488 	.word	0x40020488
 8006d80:	400204a0 	.word	0x400204a0
 8006d84:	400204b8 	.word	0x400204b8
 8006d88:	58025408 	.word	0x58025408
 8006d8c:	5802541c 	.word	0x5802541c
 8006d90:	58025430 	.word	0x58025430
 8006d94:	58025444 	.word	0x58025444
 8006d98:	58025458 	.word	0x58025458
 8006d9c:	5802546c 	.word	0x5802546c
 8006da0:	58025480 	.word	0x58025480
 8006da4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	f003 0320 	and.w	r3, r3, #32
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d160      	bne.n	8006e74 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a7f      	ldr	r2, [pc, #508]	@ (8006fb4 <HAL_DMA_IRQHandler+0xc74>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d04a      	beq.n	8006e52 <HAL_DMA_IRQHandler+0xb12>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a7d      	ldr	r2, [pc, #500]	@ (8006fb8 <HAL_DMA_IRQHandler+0xc78>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d045      	beq.n	8006e52 <HAL_DMA_IRQHandler+0xb12>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a7c      	ldr	r2, [pc, #496]	@ (8006fbc <HAL_DMA_IRQHandler+0xc7c>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d040      	beq.n	8006e52 <HAL_DMA_IRQHandler+0xb12>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a7a      	ldr	r2, [pc, #488]	@ (8006fc0 <HAL_DMA_IRQHandler+0xc80>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d03b      	beq.n	8006e52 <HAL_DMA_IRQHandler+0xb12>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a79      	ldr	r2, [pc, #484]	@ (8006fc4 <HAL_DMA_IRQHandler+0xc84>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d036      	beq.n	8006e52 <HAL_DMA_IRQHandler+0xb12>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a77      	ldr	r2, [pc, #476]	@ (8006fc8 <HAL_DMA_IRQHandler+0xc88>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d031      	beq.n	8006e52 <HAL_DMA_IRQHandler+0xb12>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a76      	ldr	r2, [pc, #472]	@ (8006fcc <HAL_DMA_IRQHandler+0xc8c>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d02c      	beq.n	8006e52 <HAL_DMA_IRQHandler+0xb12>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a74      	ldr	r2, [pc, #464]	@ (8006fd0 <HAL_DMA_IRQHandler+0xc90>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d027      	beq.n	8006e52 <HAL_DMA_IRQHandler+0xb12>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a73      	ldr	r2, [pc, #460]	@ (8006fd4 <HAL_DMA_IRQHandler+0xc94>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d022      	beq.n	8006e52 <HAL_DMA_IRQHandler+0xb12>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a71      	ldr	r2, [pc, #452]	@ (8006fd8 <HAL_DMA_IRQHandler+0xc98>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d01d      	beq.n	8006e52 <HAL_DMA_IRQHandler+0xb12>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a70      	ldr	r2, [pc, #448]	@ (8006fdc <HAL_DMA_IRQHandler+0xc9c>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d018      	beq.n	8006e52 <HAL_DMA_IRQHandler+0xb12>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a6e      	ldr	r2, [pc, #440]	@ (8006fe0 <HAL_DMA_IRQHandler+0xca0>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d013      	beq.n	8006e52 <HAL_DMA_IRQHandler+0xb12>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a6d      	ldr	r2, [pc, #436]	@ (8006fe4 <HAL_DMA_IRQHandler+0xca4>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d00e      	beq.n	8006e52 <HAL_DMA_IRQHandler+0xb12>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a6b      	ldr	r2, [pc, #428]	@ (8006fe8 <HAL_DMA_IRQHandler+0xca8>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d009      	beq.n	8006e52 <HAL_DMA_IRQHandler+0xb12>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a6a      	ldr	r2, [pc, #424]	@ (8006fec <HAL_DMA_IRQHandler+0xcac>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d004      	beq.n	8006e52 <HAL_DMA_IRQHandler+0xb12>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a68      	ldr	r2, [pc, #416]	@ (8006ff0 <HAL_DMA_IRQHandler+0xcb0>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d108      	bne.n	8006e64 <HAL_DMA_IRQHandler+0xb24>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f022 0208 	bic.w	r2, r2, #8
 8006e60:	601a      	str	r2, [r3, #0]
 8006e62:	e007      	b.n	8006e74 <HAL_DMA_IRQHandler+0xb34>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f022 0204 	bic.w	r2, r2, #4
 8006e72:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f000 8165 	beq.w	8007148 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e86:	e15f      	b.n	8007148 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e8c:	f003 031f 	and.w	r3, r3, #31
 8006e90:	2202      	movs	r2, #2
 8006e92:	409a      	lsls	r2, r3
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	4013      	ands	r3, r2
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 80c5 	beq.w	8007028 <HAL_DMA_IRQHandler+0xce8>
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	f003 0302 	and.w	r3, r3, #2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f000 80bf 	beq.w	8007028 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eae:	f003 031f 	and.w	r3, r3, #31
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	409a      	lsls	r2, r3
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d018      	beq.n	8006ef6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d109      	bne.n	8006ee2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f000 813a 	beq.w	800714c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ee0:	e134      	b.n	800714c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 8130 	beq.w	800714c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ef4:	e12a      	b.n	800714c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	f003 0320 	and.w	r3, r3, #32
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f040 8089 	bne.w	8007014 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a2b      	ldr	r2, [pc, #172]	@ (8006fb4 <HAL_DMA_IRQHandler+0xc74>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d04a      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0xc62>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a29      	ldr	r2, [pc, #164]	@ (8006fb8 <HAL_DMA_IRQHandler+0xc78>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d045      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0xc62>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a28      	ldr	r2, [pc, #160]	@ (8006fbc <HAL_DMA_IRQHandler+0xc7c>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d040      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0xc62>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a26      	ldr	r2, [pc, #152]	@ (8006fc0 <HAL_DMA_IRQHandler+0xc80>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d03b      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0xc62>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a25      	ldr	r2, [pc, #148]	@ (8006fc4 <HAL_DMA_IRQHandler+0xc84>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d036      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0xc62>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a23      	ldr	r2, [pc, #140]	@ (8006fc8 <HAL_DMA_IRQHandler+0xc88>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d031      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0xc62>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a22      	ldr	r2, [pc, #136]	@ (8006fcc <HAL_DMA_IRQHandler+0xc8c>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d02c      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0xc62>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a20      	ldr	r2, [pc, #128]	@ (8006fd0 <HAL_DMA_IRQHandler+0xc90>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d027      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0xc62>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a1f      	ldr	r2, [pc, #124]	@ (8006fd4 <HAL_DMA_IRQHandler+0xc94>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d022      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0xc62>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a1d      	ldr	r2, [pc, #116]	@ (8006fd8 <HAL_DMA_IRQHandler+0xc98>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d01d      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0xc62>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a1c      	ldr	r2, [pc, #112]	@ (8006fdc <HAL_DMA_IRQHandler+0xc9c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d018      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0xc62>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a1a      	ldr	r2, [pc, #104]	@ (8006fe0 <HAL_DMA_IRQHandler+0xca0>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d013      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0xc62>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a19      	ldr	r2, [pc, #100]	@ (8006fe4 <HAL_DMA_IRQHandler+0xca4>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d00e      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0xc62>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a17      	ldr	r2, [pc, #92]	@ (8006fe8 <HAL_DMA_IRQHandler+0xca8>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d009      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0xc62>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a16      	ldr	r2, [pc, #88]	@ (8006fec <HAL_DMA_IRQHandler+0xcac>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d004      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0xc62>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a14      	ldr	r2, [pc, #80]	@ (8006ff0 <HAL_DMA_IRQHandler+0xcb0>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d128      	bne.n	8006ff4 <HAL_DMA_IRQHandler+0xcb4>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f022 0214 	bic.w	r2, r2, #20
 8006fb0:	601a      	str	r2, [r3, #0]
 8006fb2:	e027      	b.n	8007004 <HAL_DMA_IRQHandler+0xcc4>
 8006fb4:	40020010 	.word	0x40020010
 8006fb8:	40020028 	.word	0x40020028
 8006fbc:	40020040 	.word	0x40020040
 8006fc0:	40020058 	.word	0x40020058
 8006fc4:	40020070 	.word	0x40020070
 8006fc8:	40020088 	.word	0x40020088
 8006fcc:	400200a0 	.word	0x400200a0
 8006fd0:	400200b8 	.word	0x400200b8
 8006fd4:	40020410 	.word	0x40020410
 8006fd8:	40020428 	.word	0x40020428
 8006fdc:	40020440 	.word	0x40020440
 8006fe0:	40020458 	.word	0x40020458
 8006fe4:	40020470 	.word	0x40020470
 8006fe8:	40020488 	.word	0x40020488
 8006fec:	400204a0 	.word	0x400204a0
 8006ff0:	400204b8 	.word	0x400204b8
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f022 020a 	bic.w	r2, r2, #10
 8007002:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007018:	2b00      	cmp	r3, #0
 800701a:	f000 8097 	beq.w	800714c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007026:	e091      	b.n	800714c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800702c:	f003 031f 	and.w	r3, r3, #31
 8007030:	2208      	movs	r2, #8
 8007032:	409a      	lsls	r2, r3
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	4013      	ands	r3, r2
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 8088 	beq.w	800714e <HAL_DMA_IRQHandler+0xe0e>
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	f003 0308 	and.w	r3, r3, #8
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 8082 	beq.w	800714e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a41      	ldr	r2, [pc, #260]	@ (8007154 <HAL_DMA_IRQHandler+0xe14>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d04a      	beq.n	80070ea <HAL_DMA_IRQHandler+0xdaa>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a3f      	ldr	r2, [pc, #252]	@ (8007158 <HAL_DMA_IRQHandler+0xe18>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d045      	beq.n	80070ea <HAL_DMA_IRQHandler+0xdaa>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a3e      	ldr	r2, [pc, #248]	@ (800715c <HAL_DMA_IRQHandler+0xe1c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d040      	beq.n	80070ea <HAL_DMA_IRQHandler+0xdaa>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a3c      	ldr	r2, [pc, #240]	@ (8007160 <HAL_DMA_IRQHandler+0xe20>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d03b      	beq.n	80070ea <HAL_DMA_IRQHandler+0xdaa>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a3b      	ldr	r2, [pc, #236]	@ (8007164 <HAL_DMA_IRQHandler+0xe24>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d036      	beq.n	80070ea <HAL_DMA_IRQHandler+0xdaa>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a39      	ldr	r2, [pc, #228]	@ (8007168 <HAL_DMA_IRQHandler+0xe28>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d031      	beq.n	80070ea <HAL_DMA_IRQHandler+0xdaa>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a38      	ldr	r2, [pc, #224]	@ (800716c <HAL_DMA_IRQHandler+0xe2c>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d02c      	beq.n	80070ea <HAL_DMA_IRQHandler+0xdaa>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a36      	ldr	r2, [pc, #216]	@ (8007170 <HAL_DMA_IRQHandler+0xe30>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d027      	beq.n	80070ea <HAL_DMA_IRQHandler+0xdaa>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a35      	ldr	r2, [pc, #212]	@ (8007174 <HAL_DMA_IRQHandler+0xe34>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d022      	beq.n	80070ea <HAL_DMA_IRQHandler+0xdaa>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a33      	ldr	r2, [pc, #204]	@ (8007178 <HAL_DMA_IRQHandler+0xe38>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d01d      	beq.n	80070ea <HAL_DMA_IRQHandler+0xdaa>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a32      	ldr	r2, [pc, #200]	@ (800717c <HAL_DMA_IRQHandler+0xe3c>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d018      	beq.n	80070ea <HAL_DMA_IRQHandler+0xdaa>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a30      	ldr	r2, [pc, #192]	@ (8007180 <HAL_DMA_IRQHandler+0xe40>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d013      	beq.n	80070ea <HAL_DMA_IRQHandler+0xdaa>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a2f      	ldr	r2, [pc, #188]	@ (8007184 <HAL_DMA_IRQHandler+0xe44>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d00e      	beq.n	80070ea <HAL_DMA_IRQHandler+0xdaa>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a2d      	ldr	r2, [pc, #180]	@ (8007188 <HAL_DMA_IRQHandler+0xe48>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d009      	beq.n	80070ea <HAL_DMA_IRQHandler+0xdaa>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a2c      	ldr	r2, [pc, #176]	@ (800718c <HAL_DMA_IRQHandler+0xe4c>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d004      	beq.n	80070ea <HAL_DMA_IRQHandler+0xdaa>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a2a      	ldr	r2, [pc, #168]	@ (8007190 <HAL_DMA_IRQHandler+0xe50>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d108      	bne.n	80070fc <HAL_DMA_IRQHandler+0xdbc>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f022 021c 	bic.w	r2, r2, #28
 80070f8:	601a      	str	r2, [r3, #0]
 80070fa:	e007      	b.n	800710c <HAL_DMA_IRQHandler+0xdcc>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f022 020e 	bic.w	r2, r2, #14
 800710a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007110:	f003 031f 	and.w	r3, r3, #31
 8007114:	2201      	movs	r2, #1
 8007116:	409a      	lsls	r2, r3
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007136:	2b00      	cmp	r3, #0
 8007138:	d009      	beq.n	800714e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	4798      	blx	r3
 8007142:	e004      	b.n	800714e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007144:	bf00      	nop
 8007146:	e002      	b.n	800714e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007148:	bf00      	nop
 800714a:	e000      	b.n	800714e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800714c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800714e:	3728      	adds	r7, #40	@ 0x28
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	40020010 	.word	0x40020010
 8007158:	40020028 	.word	0x40020028
 800715c:	40020040 	.word	0x40020040
 8007160:	40020058 	.word	0x40020058
 8007164:	40020070 	.word	0x40020070
 8007168:	40020088 	.word	0x40020088
 800716c:	400200a0 	.word	0x400200a0
 8007170:	400200b8 	.word	0x400200b8
 8007174:	40020410 	.word	0x40020410
 8007178:	40020428 	.word	0x40020428
 800717c:	40020440 	.word	0x40020440
 8007180:	40020458 	.word	0x40020458
 8007184:	40020470 	.word	0x40020470
 8007188:	40020488 	.word	0x40020488
 800718c:	400204a0 	.word	0x400204a0
 8007190:	400204b8 	.word	0x400204b8

08007194 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
 80071b8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071be:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071c4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a7f      	ldr	r2, [pc, #508]	@ (80073c8 <DMA_SetConfig+0x21c>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d072      	beq.n	80072b6 <DMA_SetConfig+0x10a>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a7d      	ldr	r2, [pc, #500]	@ (80073cc <DMA_SetConfig+0x220>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d06d      	beq.n	80072b6 <DMA_SetConfig+0x10a>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a7c      	ldr	r2, [pc, #496]	@ (80073d0 <DMA_SetConfig+0x224>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d068      	beq.n	80072b6 <DMA_SetConfig+0x10a>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a7a      	ldr	r2, [pc, #488]	@ (80073d4 <DMA_SetConfig+0x228>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d063      	beq.n	80072b6 <DMA_SetConfig+0x10a>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a79      	ldr	r2, [pc, #484]	@ (80073d8 <DMA_SetConfig+0x22c>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d05e      	beq.n	80072b6 <DMA_SetConfig+0x10a>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a77      	ldr	r2, [pc, #476]	@ (80073dc <DMA_SetConfig+0x230>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d059      	beq.n	80072b6 <DMA_SetConfig+0x10a>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a76      	ldr	r2, [pc, #472]	@ (80073e0 <DMA_SetConfig+0x234>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d054      	beq.n	80072b6 <DMA_SetConfig+0x10a>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a74      	ldr	r2, [pc, #464]	@ (80073e4 <DMA_SetConfig+0x238>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d04f      	beq.n	80072b6 <DMA_SetConfig+0x10a>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a73      	ldr	r2, [pc, #460]	@ (80073e8 <DMA_SetConfig+0x23c>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d04a      	beq.n	80072b6 <DMA_SetConfig+0x10a>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a71      	ldr	r2, [pc, #452]	@ (80073ec <DMA_SetConfig+0x240>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d045      	beq.n	80072b6 <DMA_SetConfig+0x10a>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a70      	ldr	r2, [pc, #448]	@ (80073f0 <DMA_SetConfig+0x244>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d040      	beq.n	80072b6 <DMA_SetConfig+0x10a>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a6e      	ldr	r2, [pc, #440]	@ (80073f4 <DMA_SetConfig+0x248>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d03b      	beq.n	80072b6 <DMA_SetConfig+0x10a>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a6d      	ldr	r2, [pc, #436]	@ (80073f8 <DMA_SetConfig+0x24c>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d036      	beq.n	80072b6 <DMA_SetConfig+0x10a>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a6b      	ldr	r2, [pc, #428]	@ (80073fc <DMA_SetConfig+0x250>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d031      	beq.n	80072b6 <DMA_SetConfig+0x10a>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a6a      	ldr	r2, [pc, #424]	@ (8007400 <DMA_SetConfig+0x254>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d02c      	beq.n	80072b6 <DMA_SetConfig+0x10a>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a68      	ldr	r2, [pc, #416]	@ (8007404 <DMA_SetConfig+0x258>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d027      	beq.n	80072b6 <DMA_SetConfig+0x10a>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a67      	ldr	r2, [pc, #412]	@ (8007408 <DMA_SetConfig+0x25c>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d022      	beq.n	80072b6 <DMA_SetConfig+0x10a>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a65      	ldr	r2, [pc, #404]	@ (800740c <DMA_SetConfig+0x260>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d01d      	beq.n	80072b6 <DMA_SetConfig+0x10a>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a64      	ldr	r2, [pc, #400]	@ (8007410 <DMA_SetConfig+0x264>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d018      	beq.n	80072b6 <DMA_SetConfig+0x10a>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a62      	ldr	r2, [pc, #392]	@ (8007414 <DMA_SetConfig+0x268>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d013      	beq.n	80072b6 <DMA_SetConfig+0x10a>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a61      	ldr	r2, [pc, #388]	@ (8007418 <DMA_SetConfig+0x26c>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d00e      	beq.n	80072b6 <DMA_SetConfig+0x10a>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a5f      	ldr	r2, [pc, #380]	@ (800741c <DMA_SetConfig+0x270>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d009      	beq.n	80072b6 <DMA_SetConfig+0x10a>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a5e      	ldr	r2, [pc, #376]	@ (8007420 <DMA_SetConfig+0x274>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d004      	beq.n	80072b6 <DMA_SetConfig+0x10a>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a5c      	ldr	r2, [pc, #368]	@ (8007424 <DMA_SetConfig+0x278>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d101      	bne.n	80072ba <DMA_SetConfig+0x10e>
 80072b6:	2301      	movs	r3, #1
 80072b8:	e000      	b.n	80072bc <DMA_SetConfig+0x110>
 80072ba:	2300      	movs	r3, #0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00d      	beq.n	80072dc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80072c8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d004      	beq.n	80072dc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80072da:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a39      	ldr	r2, [pc, #228]	@ (80073c8 <DMA_SetConfig+0x21c>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d04a      	beq.n	800737c <DMA_SetConfig+0x1d0>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a38      	ldr	r2, [pc, #224]	@ (80073cc <DMA_SetConfig+0x220>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d045      	beq.n	800737c <DMA_SetConfig+0x1d0>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a36      	ldr	r2, [pc, #216]	@ (80073d0 <DMA_SetConfig+0x224>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d040      	beq.n	800737c <DMA_SetConfig+0x1d0>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a35      	ldr	r2, [pc, #212]	@ (80073d4 <DMA_SetConfig+0x228>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d03b      	beq.n	800737c <DMA_SetConfig+0x1d0>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a33      	ldr	r2, [pc, #204]	@ (80073d8 <DMA_SetConfig+0x22c>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d036      	beq.n	800737c <DMA_SetConfig+0x1d0>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a32      	ldr	r2, [pc, #200]	@ (80073dc <DMA_SetConfig+0x230>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d031      	beq.n	800737c <DMA_SetConfig+0x1d0>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a30      	ldr	r2, [pc, #192]	@ (80073e0 <DMA_SetConfig+0x234>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d02c      	beq.n	800737c <DMA_SetConfig+0x1d0>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a2f      	ldr	r2, [pc, #188]	@ (80073e4 <DMA_SetConfig+0x238>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d027      	beq.n	800737c <DMA_SetConfig+0x1d0>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a2d      	ldr	r2, [pc, #180]	@ (80073e8 <DMA_SetConfig+0x23c>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d022      	beq.n	800737c <DMA_SetConfig+0x1d0>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a2c      	ldr	r2, [pc, #176]	@ (80073ec <DMA_SetConfig+0x240>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d01d      	beq.n	800737c <DMA_SetConfig+0x1d0>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a2a      	ldr	r2, [pc, #168]	@ (80073f0 <DMA_SetConfig+0x244>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d018      	beq.n	800737c <DMA_SetConfig+0x1d0>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a29      	ldr	r2, [pc, #164]	@ (80073f4 <DMA_SetConfig+0x248>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d013      	beq.n	800737c <DMA_SetConfig+0x1d0>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a27      	ldr	r2, [pc, #156]	@ (80073f8 <DMA_SetConfig+0x24c>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d00e      	beq.n	800737c <DMA_SetConfig+0x1d0>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a26      	ldr	r2, [pc, #152]	@ (80073fc <DMA_SetConfig+0x250>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d009      	beq.n	800737c <DMA_SetConfig+0x1d0>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a24      	ldr	r2, [pc, #144]	@ (8007400 <DMA_SetConfig+0x254>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d004      	beq.n	800737c <DMA_SetConfig+0x1d0>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a23      	ldr	r2, [pc, #140]	@ (8007404 <DMA_SetConfig+0x258>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d101      	bne.n	8007380 <DMA_SetConfig+0x1d4>
 800737c:	2301      	movs	r3, #1
 800737e:	e000      	b.n	8007382 <DMA_SetConfig+0x1d6>
 8007380:	2300      	movs	r3, #0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d059      	beq.n	800743a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800738a:	f003 031f 	and.w	r3, r3, #31
 800738e:	223f      	movs	r2, #63	@ 0x3f
 8007390:	409a      	lsls	r2, r3
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80073a4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	683a      	ldr	r2, [r7, #0]
 80073ac:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	2b40      	cmp	r3, #64	@ 0x40
 80073b4:	d138      	bne.n	8007428 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80073c6:	e086      	b.n	80074d6 <DMA_SetConfig+0x32a>
 80073c8:	40020010 	.word	0x40020010
 80073cc:	40020028 	.word	0x40020028
 80073d0:	40020040 	.word	0x40020040
 80073d4:	40020058 	.word	0x40020058
 80073d8:	40020070 	.word	0x40020070
 80073dc:	40020088 	.word	0x40020088
 80073e0:	400200a0 	.word	0x400200a0
 80073e4:	400200b8 	.word	0x400200b8
 80073e8:	40020410 	.word	0x40020410
 80073ec:	40020428 	.word	0x40020428
 80073f0:	40020440 	.word	0x40020440
 80073f4:	40020458 	.word	0x40020458
 80073f8:	40020470 	.word	0x40020470
 80073fc:	40020488 	.word	0x40020488
 8007400:	400204a0 	.word	0x400204a0
 8007404:	400204b8 	.word	0x400204b8
 8007408:	58025408 	.word	0x58025408
 800740c:	5802541c 	.word	0x5802541c
 8007410:	58025430 	.word	0x58025430
 8007414:	58025444 	.word	0x58025444
 8007418:	58025458 	.word	0x58025458
 800741c:	5802546c 	.word	0x5802546c
 8007420:	58025480 	.word	0x58025480
 8007424:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	60da      	str	r2, [r3, #12]
}
 8007438:	e04d      	b.n	80074d6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a29      	ldr	r2, [pc, #164]	@ (80074e4 <DMA_SetConfig+0x338>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d022      	beq.n	800748a <DMA_SetConfig+0x2de>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a27      	ldr	r2, [pc, #156]	@ (80074e8 <DMA_SetConfig+0x33c>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d01d      	beq.n	800748a <DMA_SetConfig+0x2de>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a26      	ldr	r2, [pc, #152]	@ (80074ec <DMA_SetConfig+0x340>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d018      	beq.n	800748a <DMA_SetConfig+0x2de>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a24      	ldr	r2, [pc, #144]	@ (80074f0 <DMA_SetConfig+0x344>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d013      	beq.n	800748a <DMA_SetConfig+0x2de>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a23      	ldr	r2, [pc, #140]	@ (80074f4 <DMA_SetConfig+0x348>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d00e      	beq.n	800748a <DMA_SetConfig+0x2de>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a21      	ldr	r2, [pc, #132]	@ (80074f8 <DMA_SetConfig+0x34c>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d009      	beq.n	800748a <DMA_SetConfig+0x2de>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a20      	ldr	r2, [pc, #128]	@ (80074fc <DMA_SetConfig+0x350>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d004      	beq.n	800748a <DMA_SetConfig+0x2de>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a1e      	ldr	r2, [pc, #120]	@ (8007500 <DMA_SetConfig+0x354>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d101      	bne.n	800748e <DMA_SetConfig+0x2e2>
 800748a:	2301      	movs	r3, #1
 800748c:	e000      	b.n	8007490 <DMA_SetConfig+0x2e4>
 800748e:	2300      	movs	r3, #0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d020      	beq.n	80074d6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007498:	f003 031f 	and.w	r3, r3, #31
 800749c:	2201      	movs	r2, #1
 800749e:	409a      	lsls	r2, r3
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	683a      	ldr	r2, [r7, #0]
 80074aa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	2b40      	cmp	r3, #64	@ 0x40
 80074b2:	d108      	bne.n	80074c6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	60da      	str	r2, [r3, #12]
}
 80074c4:	e007      	b.n	80074d6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	60da      	str	r2, [r3, #12]
}
 80074d6:	bf00      	nop
 80074d8:	371c      	adds	r7, #28
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	58025408 	.word	0x58025408
 80074e8:	5802541c 	.word	0x5802541c
 80074ec:	58025430 	.word	0x58025430
 80074f0:	58025444 	.word	0x58025444
 80074f4:	58025458 	.word	0x58025458
 80074f8:	5802546c 	.word	0x5802546c
 80074fc:	58025480 	.word	0x58025480
 8007500:	58025494 	.word	0x58025494

08007504 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a42      	ldr	r2, [pc, #264]	@ (800761c <DMA_CalcBaseAndBitshift+0x118>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d04a      	beq.n	80075ac <DMA_CalcBaseAndBitshift+0xa8>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a41      	ldr	r2, [pc, #260]	@ (8007620 <DMA_CalcBaseAndBitshift+0x11c>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d045      	beq.n	80075ac <DMA_CalcBaseAndBitshift+0xa8>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a3f      	ldr	r2, [pc, #252]	@ (8007624 <DMA_CalcBaseAndBitshift+0x120>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d040      	beq.n	80075ac <DMA_CalcBaseAndBitshift+0xa8>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a3e      	ldr	r2, [pc, #248]	@ (8007628 <DMA_CalcBaseAndBitshift+0x124>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d03b      	beq.n	80075ac <DMA_CalcBaseAndBitshift+0xa8>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a3c      	ldr	r2, [pc, #240]	@ (800762c <DMA_CalcBaseAndBitshift+0x128>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d036      	beq.n	80075ac <DMA_CalcBaseAndBitshift+0xa8>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a3b      	ldr	r2, [pc, #236]	@ (8007630 <DMA_CalcBaseAndBitshift+0x12c>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d031      	beq.n	80075ac <DMA_CalcBaseAndBitshift+0xa8>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a39      	ldr	r2, [pc, #228]	@ (8007634 <DMA_CalcBaseAndBitshift+0x130>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d02c      	beq.n	80075ac <DMA_CalcBaseAndBitshift+0xa8>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a38      	ldr	r2, [pc, #224]	@ (8007638 <DMA_CalcBaseAndBitshift+0x134>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d027      	beq.n	80075ac <DMA_CalcBaseAndBitshift+0xa8>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a36      	ldr	r2, [pc, #216]	@ (800763c <DMA_CalcBaseAndBitshift+0x138>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d022      	beq.n	80075ac <DMA_CalcBaseAndBitshift+0xa8>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a35      	ldr	r2, [pc, #212]	@ (8007640 <DMA_CalcBaseAndBitshift+0x13c>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d01d      	beq.n	80075ac <DMA_CalcBaseAndBitshift+0xa8>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a33      	ldr	r2, [pc, #204]	@ (8007644 <DMA_CalcBaseAndBitshift+0x140>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d018      	beq.n	80075ac <DMA_CalcBaseAndBitshift+0xa8>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a32      	ldr	r2, [pc, #200]	@ (8007648 <DMA_CalcBaseAndBitshift+0x144>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d013      	beq.n	80075ac <DMA_CalcBaseAndBitshift+0xa8>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a30      	ldr	r2, [pc, #192]	@ (800764c <DMA_CalcBaseAndBitshift+0x148>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d00e      	beq.n	80075ac <DMA_CalcBaseAndBitshift+0xa8>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a2f      	ldr	r2, [pc, #188]	@ (8007650 <DMA_CalcBaseAndBitshift+0x14c>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d009      	beq.n	80075ac <DMA_CalcBaseAndBitshift+0xa8>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a2d      	ldr	r2, [pc, #180]	@ (8007654 <DMA_CalcBaseAndBitshift+0x150>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d004      	beq.n	80075ac <DMA_CalcBaseAndBitshift+0xa8>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a2c      	ldr	r2, [pc, #176]	@ (8007658 <DMA_CalcBaseAndBitshift+0x154>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d101      	bne.n	80075b0 <DMA_CalcBaseAndBitshift+0xac>
 80075ac:	2301      	movs	r3, #1
 80075ae:	e000      	b.n	80075b2 <DMA_CalcBaseAndBitshift+0xae>
 80075b0:	2300      	movs	r3, #0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d024      	beq.n	8007600 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	3b10      	subs	r3, #16
 80075be:	4a27      	ldr	r2, [pc, #156]	@ (800765c <DMA_CalcBaseAndBitshift+0x158>)
 80075c0:	fba2 2303 	umull	r2, r3, r2, r3
 80075c4:	091b      	lsrs	r3, r3, #4
 80075c6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f003 0307 	and.w	r3, r3, #7
 80075ce:	4a24      	ldr	r2, [pc, #144]	@ (8007660 <DMA_CalcBaseAndBitshift+0x15c>)
 80075d0:	5cd3      	ldrb	r3, [r2, r3]
 80075d2:	461a      	mov	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2b03      	cmp	r3, #3
 80075dc:	d908      	bls.n	80075f0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	461a      	mov	r2, r3
 80075e4:	4b1f      	ldr	r3, [pc, #124]	@ (8007664 <DMA_CalcBaseAndBitshift+0x160>)
 80075e6:	4013      	ands	r3, r2
 80075e8:	1d1a      	adds	r2, r3, #4
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	659a      	str	r2, [r3, #88]	@ 0x58
 80075ee:	e00d      	b.n	800760c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	461a      	mov	r2, r3
 80075f6:	4b1b      	ldr	r3, [pc, #108]	@ (8007664 <DMA_CalcBaseAndBitshift+0x160>)
 80075f8:	4013      	ands	r3, r2
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80075fe:	e005      	b.n	800760c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007610:	4618      	mov	r0, r3
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	40020010 	.word	0x40020010
 8007620:	40020028 	.word	0x40020028
 8007624:	40020040 	.word	0x40020040
 8007628:	40020058 	.word	0x40020058
 800762c:	40020070 	.word	0x40020070
 8007630:	40020088 	.word	0x40020088
 8007634:	400200a0 	.word	0x400200a0
 8007638:	400200b8 	.word	0x400200b8
 800763c:	40020410 	.word	0x40020410
 8007640:	40020428 	.word	0x40020428
 8007644:	40020440 	.word	0x40020440
 8007648:	40020458 	.word	0x40020458
 800764c:	40020470 	.word	0x40020470
 8007650:	40020488 	.word	0x40020488
 8007654:	400204a0 	.word	0x400204a0
 8007658:	400204b8 	.word	0x400204b8
 800765c:	aaaaaaab 	.word	0xaaaaaaab
 8007660:	08023508 	.word	0x08023508
 8007664:	fffffc00 	.word	0xfffffc00

08007668 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007670:	2300      	movs	r3, #0
 8007672:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d120      	bne.n	80076be <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007680:	2b03      	cmp	r3, #3
 8007682:	d858      	bhi.n	8007736 <DMA_CheckFifoParam+0xce>
 8007684:	a201      	add	r2, pc, #4	@ (adr r2, 800768c <DMA_CheckFifoParam+0x24>)
 8007686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768a:	bf00      	nop
 800768c:	0800769d 	.word	0x0800769d
 8007690:	080076af 	.word	0x080076af
 8007694:	0800769d 	.word	0x0800769d
 8007698:	08007737 	.word	0x08007737
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d048      	beq.n	800773a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076ac:	e045      	b.n	800773a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80076b6:	d142      	bne.n	800773e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076bc:	e03f      	b.n	800773e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076c6:	d123      	bne.n	8007710 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076cc:	2b03      	cmp	r3, #3
 80076ce:	d838      	bhi.n	8007742 <DMA_CheckFifoParam+0xda>
 80076d0:	a201      	add	r2, pc, #4	@ (adr r2, 80076d8 <DMA_CheckFifoParam+0x70>)
 80076d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d6:	bf00      	nop
 80076d8:	080076e9 	.word	0x080076e9
 80076dc:	080076ef 	.word	0x080076ef
 80076e0:	080076e9 	.word	0x080076e9
 80076e4:	08007701 	.word	0x08007701
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	73fb      	strb	r3, [r7, #15]
        break;
 80076ec:	e030      	b.n	8007750 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d025      	beq.n	8007746 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076fe:	e022      	b.n	8007746 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007704:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007708:	d11f      	bne.n	800774a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800770e:	e01c      	b.n	800774a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007714:	2b02      	cmp	r3, #2
 8007716:	d902      	bls.n	800771e <DMA_CheckFifoParam+0xb6>
 8007718:	2b03      	cmp	r3, #3
 800771a:	d003      	beq.n	8007724 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800771c:	e018      	b.n	8007750 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	73fb      	strb	r3, [r7, #15]
        break;
 8007722:	e015      	b.n	8007750 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007728:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00e      	beq.n	800774e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	73fb      	strb	r3, [r7, #15]
    break;
 8007734:	e00b      	b.n	800774e <DMA_CheckFifoParam+0xe6>
        break;
 8007736:	bf00      	nop
 8007738:	e00a      	b.n	8007750 <DMA_CheckFifoParam+0xe8>
        break;
 800773a:	bf00      	nop
 800773c:	e008      	b.n	8007750 <DMA_CheckFifoParam+0xe8>
        break;
 800773e:	bf00      	nop
 8007740:	e006      	b.n	8007750 <DMA_CheckFifoParam+0xe8>
        break;
 8007742:	bf00      	nop
 8007744:	e004      	b.n	8007750 <DMA_CheckFifoParam+0xe8>
        break;
 8007746:	bf00      	nop
 8007748:	e002      	b.n	8007750 <DMA_CheckFifoParam+0xe8>
        break;
 800774a:	bf00      	nop
 800774c:	e000      	b.n	8007750 <DMA_CheckFifoParam+0xe8>
    break;
 800774e:	bf00      	nop
    }
  }

  return status;
 8007750:	7bfb      	ldrb	r3, [r7, #15]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop

08007760 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a38      	ldr	r2, [pc, #224]	@ (8007854 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d022      	beq.n	80077be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a36      	ldr	r2, [pc, #216]	@ (8007858 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d01d      	beq.n	80077be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a35      	ldr	r2, [pc, #212]	@ (800785c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d018      	beq.n	80077be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a33      	ldr	r2, [pc, #204]	@ (8007860 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d013      	beq.n	80077be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a32      	ldr	r2, [pc, #200]	@ (8007864 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d00e      	beq.n	80077be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a30      	ldr	r2, [pc, #192]	@ (8007868 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d009      	beq.n	80077be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a2f      	ldr	r2, [pc, #188]	@ (800786c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d004      	beq.n	80077be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a2d      	ldr	r2, [pc, #180]	@ (8007870 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d101      	bne.n	80077c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80077be:	2301      	movs	r3, #1
 80077c0:	e000      	b.n	80077c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80077c2:	2300      	movs	r3, #0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d01a      	beq.n	80077fe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	3b08      	subs	r3, #8
 80077d0:	4a28      	ldr	r2, [pc, #160]	@ (8007874 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80077d2:	fba2 2303 	umull	r2, r3, r2, r3
 80077d6:	091b      	lsrs	r3, r3, #4
 80077d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	4b26      	ldr	r3, [pc, #152]	@ (8007878 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80077de:	4413      	add	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	461a      	mov	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a24      	ldr	r2, [pc, #144]	@ (800787c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80077ec:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f003 031f 	and.w	r3, r3, #31
 80077f4:	2201      	movs	r2, #1
 80077f6:	409a      	lsls	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80077fc:	e024      	b.n	8007848 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	b2db      	uxtb	r3, r3
 8007804:	3b10      	subs	r3, #16
 8007806:	4a1e      	ldr	r2, [pc, #120]	@ (8007880 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007808:	fba2 2303 	umull	r2, r3, r2, r3
 800780c:	091b      	lsrs	r3, r3, #4
 800780e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	4a1c      	ldr	r2, [pc, #112]	@ (8007884 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d806      	bhi.n	8007826 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	4a1b      	ldr	r2, [pc, #108]	@ (8007888 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d902      	bls.n	8007826 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	3308      	adds	r3, #8
 8007824:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	4b18      	ldr	r3, [pc, #96]	@ (800788c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800782a:	4413      	add	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	461a      	mov	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a16      	ldr	r2, [pc, #88]	@ (8007890 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007838:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f003 031f 	and.w	r3, r3, #31
 8007840:	2201      	movs	r2, #1
 8007842:	409a      	lsls	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007848:	bf00      	nop
 800784a:	3714      	adds	r7, #20
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr
 8007854:	58025408 	.word	0x58025408
 8007858:	5802541c 	.word	0x5802541c
 800785c:	58025430 	.word	0x58025430
 8007860:	58025444 	.word	0x58025444
 8007864:	58025458 	.word	0x58025458
 8007868:	5802546c 	.word	0x5802546c
 800786c:	58025480 	.word	0x58025480
 8007870:	58025494 	.word	0x58025494
 8007874:	cccccccd 	.word	0xcccccccd
 8007878:	16009600 	.word	0x16009600
 800787c:	58025880 	.word	0x58025880
 8007880:	aaaaaaab 	.word	0xaaaaaaab
 8007884:	400204b8 	.word	0x400204b8
 8007888:	4002040f 	.word	0x4002040f
 800788c:	10008200 	.word	0x10008200
 8007890:	40020880 	.word	0x40020880

08007894 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d04a      	beq.n	8007940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2b08      	cmp	r3, #8
 80078ae:	d847      	bhi.n	8007940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a25      	ldr	r2, [pc, #148]	@ (800794c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d022      	beq.n	8007900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a24      	ldr	r2, [pc, #144]	@ (8007950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d01d      	beq.n	8007900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a22      	ldr	r2, [pc, #136]	@ (8007954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d018      	beq.n	8007900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a21      	ldr	r2, [pc, #132]	@ (8007958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d013      	beq.n	8007900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a1f      	ldr	r2, [pc, #124]	@ (800795c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d00e      	beq.n	8007900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a1e      	ldr	r2, [pc, #120]	@ (8007960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d009      	beq.n	8007900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a1c      	ldr	r2, [pc, #112]	@ (8007964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d004      	beq.n	8007900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d101      	bne.n	8007904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007900:	2301      	movs	r3, #1
 8007902:	e000      	b.n	8007906 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007904:	2300      	movs	r3, #0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	4b17      	ldr	r3, [pc, #92]	@ (800796c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800790e:	4413      	add	r3, r2
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	461a      	mov	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a15      	ldr	r2, [pc, #84]	@ (8007970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800791c:	671a      	str	r2, [r3, #112]	@ 0x70
 800791e:	e009      	b.n	8007934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	4b14      	ldr	r3, [pc, #80]	@ (8007974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007924:	4413      	add	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	461a      	mov	r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a11      	ldr	r2, [pc, #68]	@ (8007978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007932:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	3b01      	subs	r3, #1
 8007938:	2201      	movs	r2, #1
 800793a:	409a      	lsls	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007940:	bf00      	nop
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr
 800794c:	58025408 	.word	0x58025408
 8007950:	5802541c 	.word	0x5802541c
 8007954:	58025430 	.word	0x58025430
 8007958:	58025444 	.word	0x58025444
 800795c:	58025458 	.word	0x58025458
 8007960:	5802546c 	.word	0x5802546c
 8007964:	58025480 	.word	0x58025480
 8007968:	58025494 	.word	0x58025494
 800796c:	1600963f 	.word	0x1600963f
 8007970:	58025940 	.word	0x58025940
 8007974:	1000823f 	.word	0x1000823f
 8007978:	40020940 	.word	0x40020940

0800797c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800797c:	b480      	push	{r7}
 800797e:	b089      	sub	sp, #36	@ 0x24
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007986:	2300      	movs	r3, #0
 8007988:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800798a:	4b89      	ldr	r3, [pc, #548]	@ (8007bb0 <HAL_GPIO_Init+0x234>)
 800798c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800798e:	e194      	b.n	8007cba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	2101      	movs	r1, #1
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	fa01 f303 	lsl.w	r3, r1, r3
 800799c:	4013      	ands	r3, r2
 800799e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f000 8186 	beq.w	8007cb4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	f003 0303 	and.w	r3, r3, #3
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d005      	beq.n	80079c0 <HAL_GPIO_Init+0x44>
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f003 0303 	and.w	r3, r3, #3
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d130      	bne.n	8007a22 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	005b      	lsls	r3, r3, #1
 80079ca:	2203      	movs	r2, #3
 80079cc:	fa02 f303 	lsl.w	r3, r2, r3
 80079d0:	43db      	mvns	r3, r3
 80079d2:	69ba      	ldr	r2, [r7, #24]
 80079d4:	4013      	ands	r3, r2
 80079d6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	68da      	ldr	r2, [r3, #12]
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	005b      	lsls	r3, r3, #1
 80079e0:	fa02 f303 	lsl.w	r3, r2, r3
 80079e4:	69ba      	ldr	r2, [r7, #24]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	69ba      	ldr	r2, [r7, #24]
 80079ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80079f6:	2201      	movs	r2, #1
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	fa02 f303 	lsl.w	r3, r2, r3
 80079fe:	43db      	mvns	r3, r3
 8007a00:	69ba      	ldr	r2, [r7, #24]
 8007a02:	4013      	ands	r3, r2
 8007a04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	091b      	lsrs	r3, r3, #4
 8007a0c:	f003 0201 	and.w	r2, r3, #1
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	fa02 f303 	lsl.w	r3, r2, r3
 8007a16:	69ba      	ldr	r2, [r7, #24]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	69ba      	ldr	r2, [r7, #24]
 8007a20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f003 0303 	and.w	r3, r3, #3
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	d017      	beq.n	8007a5e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	005b      	lsls	r3, r3, #1
 8007a38:	2203      	movs	r2, #3
 8007a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3e:	43db      	mvns	r3, r3
 8007a40:	69ba      	ldr	r2, [r7, #24]
 8007a42:	4013      	ands	r3, r2
 8007a44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	689a      	ldr	r2, [r3, #8]
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a52:	69ba      	ldr	r2, [r7, #24]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	69ba      	ldr	r2, [r7, #24]
 8007a5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f003 0303 	and.w	r3, r3, #3
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d123      	bne.n	8007ab2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	08da      	lsrs	r2, r3, #3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	3208      	adds	r2, #8
 8007a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	f003 0307 	and.w	r3, r3, #7
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	220f      	movs	r2, #15
 8007a82:	fa02 f303 	lsl.w	r3, r2, r3
 8007a86:	43db      	mvns	r3, r3
 8007a88:	69ba      	ldr	r2, [r7, #24]
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	691a      	ldr	r2, [r3, #16]
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	f003 0307 	and.w	r3, r3, #7
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9e:	69ba      	ldr	r2, [r7, #24]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	08da      	lsrs	r2, r3, #3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	3208      	adds	r2, #8
 8007aac:	69b9      	ldr	r1, [r7, #24]
 8007aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	005b      	lsls	r3, r3, #1
 8007abc:	2203      	movs	r2, #3
 8007abe:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac2:	43db      	mvns	r3, r3
 8007ac4:	69ba      	ldr	r2, [r7, #24]
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f003 0203 	and.w	r2, r3, #3
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	005b      	lsls	r3, r3, #1
 8007ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8007ada:	69ba      	ldr	r2, [r7, #24]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	69ba      	ldr	r2, [r7, #24]
 8007ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f000 80e0 	beq.w	8007cb4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007af4:	4b2f      	ldr	r3, [pc, #188]	@ (8007bb4 <HAL_GPIO_Init+0x238>)
 8007af6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007afa:	4a2e      	ldr	r2, [pc, #184]	@ (8007bb4 <HAL_GPIO_Init+0x238>)
 8007afc:	f043 0302 	orr.w	r3, r3, #2
 8007b00:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007b04:	4b2b      	ldr	r3, [pc, #172]	@ (8007bb4 <HAL_GPIO_Init+0x238>)
 8007b06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b0a:	f003 0302 	and.w	r3, r3, #2
 8007b0e:	60fb      	str	r3, [r7, #12]
 8007b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b12:	4a29      	ldr	r2, [pc, #164]	@ (8007bb8 <HAL_GPIO_Init+0x23c>)
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	089b      	lsrs	r3, r3, #2
 8007b18:	3302      	adds	r3, #2
 8007b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	f003 0303 	and.w	r3, r3, #3
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	220f      	movs	r2, #15
 8007b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b2e:	43db      	mvns	r3, r3
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	4013      	ands	r3, r2
 8007b34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a20      	ldr	r2, [pc, #128]	@ (8007bbc <HAL_GPIO_Init+0x240>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d052      	beq.n	8007be4 <HAL_GPIO_Init+0x268>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a1f      	ldr	r2, [pc, #124]	@ (8007bc0 <HAL_GPIO_Init+0x244>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d031      	beq.n	8007baa <HAL_GPIO_Init+0x22e>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a1e      	ldr	r2, [pc, #120]	@ (8007bc4 <HAL_GPIO_Init+0x248>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d02b      	beq.n	8007ba6 <HAL_GPIO_Init+0x22a>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a1d      	ldr	r2, [pc, #116]	@ (8007bc8 <HAL_GPIO_Init+0x24c>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d025      	beq.n	8007ba2 <HAL_GPIO_Init+0x226>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a1c      	ldr	r2, [pc, #112]	@ (8007bcc <HAL_GPIO_Init+0x250>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d01f      	beq.n	8007b9e <HAL_GPIO_Init+0x222>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a1b      	ldr	r2, [pc, #108]	@ (8007bd0 <HAL_GPIO_Init+0x254>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d019      	beq.n	8007b9a <HAL_GPIO_Init+0x21e>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a1a      	ldr	r2, [pc, #104]	@ (8007bd4 <HAL_GPIO_Init+0x258>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d013      	beq.n	8007b96 <HAL_GPIO_Init+0x21a>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a19      	ldr	r2, [pc, #100]	@ (8007bd8 <HAL_GPIO_Init+0x25c>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d00d      	beq.n	8007b92 <HAL_GPIO_Init+0x216>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a18      	ldr	r2, [pc, #96]	@ (8007bdc <HAL_GPIO_Init+0x260>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d007      	beq.n	8007b8e <HAL_GPIO_Init+0x212>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a17      	ldr	r2, [pc, #92]	@ (8007be0 <HAL_GPIO_Init+0x264>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d101      	bne.n	8007b8a <HAL_GPIO_Init+0x20e>
 8007b86:	2309      	movs	r3, #9
 8007b88:	e02d      	b.n	8007be6 <HAL_GPIO_Init+0x26a>
 8007b8a:	230a      	movs	r3, #10
 8007b8c:	e02b      	b.n	8007be6 <HAL_GPIO_Init+0x26a>
 8007b8e:	2308      	movs	r3, #8
 8007b90:	e029      	b.n	8007be6 <HAL_GPIO_Init+0x26a>
 8007b92:	2307      	movs	r3, #7
 8007b94:	e027      	b.n	8007be6 <HAL_GPIO_Init+0x26a>
 8007b96:	2306      	movs	r3, #6
 8007b98:	e025      	b.n	8007be6 <HAL_GPIO_Init+0x26a>
 8007b9a:	2305      	movs	r3, #5
 8007b9c:	e023      	b.n	8007be6 <HAL_GPIO_Init+0x26a>
 8007b9e:	2304      	movs	r3, #4
 8007ba0:	e021      	b.n	8007be6 <HAL_GPIO_Init+0x26a>
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e01f      	b.n	8007be6 <HAL_GPIO_Init+0x26a>
 8007ba6:	2302      	movs	r3, #2
 8007ba8:	e01d      	b.n	8007be6 <HAL_GPIO_Init+0x26a>
 8007baa:	2301      	movs	r3, #1
 8007bac:	e01b      	b.n	8007be6 <HAL_GPIO_Init+0x26a>
 8007bae:	bf00      	nop
 8007bb0:	58000080 	.word	0x58000080
 8007bb4:	58024400 	.word	0x58024400
 8007bb8:	58000400 	.word	0x58000400
 8007bbc:	58020000 	.word	0x58020000
 8007bc0:	58020400 	.word	0x58020400
 8007bc4:	58020800 	.word	0x58020800
 8007bc8:	58020c00 	.word	0x58020c00
 8007bcc:	58021000 	.word	0x58021000
 8007bd0:	58021400 	.word	0x58021400
 8007bd4:	58021800 	.word	0x58021800
 8007bd8:	58021c00 	.word	0x58021c00
 8007bdc:	58022000 	.word	0x58022000
 8007be0:	58022400 	.word	0x58022400
 8007be4:	2300      	movs	r3, #0
 8007be6:	69fa      	ldr	r2, [r7, #28]
 8007be8:	f002 0203 	and.w	r2, r2, #3
 8007bec:	0092      	lsls	r2, r2, #2
 8007bee:	4093      	lsls	r3, r2
 8007bf0:	69ba      	ldr	r2, [r7, #24]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007bf6:	4938      	ldr	r1, [pc, #224]	@ (8007cd8 <HAL_GPIO_Init+0x35c>)
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	089b      	lsrs	r3, r3, #2
 8007bfc:	3302      	adds	r3, #2
 8007bfe:	69ba      	ldr	r2, [r7, #24]
 8007c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	43db      	mvns	r3, r3
 8007c10:	69ba      	ldr	r2, [r7, #24]
 8007c12:	4013      	ands	r3, r2
 8007c14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007c2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007c32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	43db      	mvns	r3, r3
 8007c3e:	69ba      	ldr	r2, [r7, #24]
 8007c40:	4013      	ands	r3, r2
 8007c42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d003      	beq.n	8007c58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007c50:	69ba      	ldr	r2, [r7, #24]
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007c58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	43db      	mvns	r3, r3
 8007c6a:	69ba      	ldr	r2, [r7, #24]
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d003      	beq.n	8007c84 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007c7c:	69ba      	ldr	r2, [r7, #24]
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	69ba      	ldr	r2, [r7, #24]
 8007c88:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	43db      	mvns	r3, r3
 8007c94:	69ba      	ldr	r2, [r7, #24]
 8007c96:	4013      	ands	r3, r2
 8007c98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d003      	beq.n	8007cae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007ca6:	69ba      	ldr	r2, [r7, #24]
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	69ba      	ldr	r2, [r7, #24]
 8007cb2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f47f ae63 	bne.w	8007990 <HAL_GPIO_Init+0x14>
  }
}
 8007cca:	bf00      	nop
 8007ccc:	bf00      	nop
 8007cce:	3724      	adds	r7, #36	@ 0x24
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr
 8007cd8:	58000400 	.word	0x58000400

08007cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	807b      	strh	r3, [r7, #2]
 8007ce8:	4613      	mov	r3, r2
 8007cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007cec:	787b      	ldrb	r3, [r7, #1]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d003      	beq.n	8007cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007cf2:	887a      	ldrh	r2, [r7, #2]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007cf8:	e003      	b.n	8007d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007cfa:	887b      	ldrh	r3, [r7, #2]
 8007cfc:	041a      	lsls	r2, r3, #16
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	619a      	str	r2, [r3, #24]
}
 8007d02:	bf00      	nop
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b082      	sub	sp, #8
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	4603      	mov	r3, r0
 8007d16:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007d18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d1c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007d20:	88fb      	ldrh	r3, [r7, #6]
 8007d22:	4013      	ands	r3, r2
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d008      	beq.n	8007d3a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007d28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d2c:	88fb      	ldrh	r3, [r7, #6]
 8007d2e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007d32:	88fb      	ldrh	r3, [r7, #6]
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7f9 fd65 	bl	8001804 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007d3a:	bf00      	nop
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
	...

08007d44 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007d4c:	4b19      	ldr	r3, [pc, #100]	@ (8007db4 <HAL_PWREx_ConfigSupply+0x70>)
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	f003 0304 	and.w	r3, r3, #4
 8007d54:	2b04      	cmp	r3, #4
 8007d56:	d00a      	beq.n	8007d6e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007d58:	4b16      	ldr	r3, [pc, #88]	@ (8007db4 <HAL_PWREx_ConfigSupply+0x70>)
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	f003 0307 	and.w	r3, r3, #7
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d001      	beq.n	8007d6a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e01f      	b.n	8007daa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	e01d      	b.n	8007daa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007d6e:	4b11      	ldr	r3, [pc, #68]	@ (8007db4 <HAL_PWREx_ConfigSupply+0x70>)
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	f023 0207 	bic.w	r2, r3, #7
 8007d76:	490f      	ldr	r1, [pc, #60]	@ (8007db4 <HAL_PWREx_ConfigSupply+0x70>)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007d7e:	f7fb fba3 	bl	80034c8 <HAL_GetTick>
 8007d82:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d84:	e009      	b.n	8007d9a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007d86:	f7fb fb9f 	bl	80034c8 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d94:	d901      	bls.n	8007d9a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e007      	b.n	8007daa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d9a:	4b06      	ldr	r3, [pc, #24]	@ (8007db4 <HAL_PWREx_ConfigSupply+0x70>)
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007da6:	d1ee      	bne.n	8007d86 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	58024800 	.word	0x58024800

08007db8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08c      	sub	sp, #48	@ 0x30
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d102      	bne.n	8007dcc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	f000 bc48 	b.w	800865c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 0301 	and.w	r3, r3, #1
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f000 8088 	beq.w	8007eea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dda:	4b99      	ldr	r3, [pc, #612]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007de4:	4b96      	ldr	r3, [pc, #600]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dec:	2b10      	cmp	r3, #16
 8007dee:	d007      	beq.n	8007e00 <HAL_RCC_OscConfig+0x48>
 8007df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df2:	2b18      	cmp	r3, #24
 8007df4:	d111      	bne.n	8007e1a <HAL_RCC_OscConfig+0x62>
 8007df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df8:	f003 0303 	and.w	r3, r3, #3
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d10c      	bne.n	8007e1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e00:	4b8f      	ldr	r3, [pc, #572]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d06d      	beq.n	8007ee8 <HAL_RCC_OscConfig+0x130>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d169      	bne.n	8007ee8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	f000 bc21 	b.w	800865c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e22:	d106      	bne.n	8007e32 <HAL_RCC_OscConfig+0x7a>
 8007e24:	4b86      	ldr	r3, [pc, #536]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a85      	ldr	r2, [pc, #532]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e2e:	6013      	str	r3, [r2, #0]
 8007e30:	e02e      	b.n	8007e90 <HAL_RCC_OscConfig+0xd8>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d10c      	bne.n	8007e54 <HAL_RCC_OscConfig+0x9c>
 8007e3a:	4b81      	ldr	r3, [pc, #516]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a80      	ldr	r2, [pc, #512]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e44:	6013      	str	r3, [r2, #0]
 8007e46:	4b7e      	ldr	r3, [pc, #504]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a7d      	ldr	r2, [pc, #500]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e50:	6013      	str	r3, [r2, #0]
 8007e52:	e01d      	b.n	8007e90 <HAL_RCC_OscConfig+0xd8>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007e5c:	d10c      	bne.n	8007e78 <HAL_RCC_OscConfig+0xc0>
 8007e5e:	4b78      	ldr	r3, [pc, #480]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a77      	ldr	r2, [pc, #476]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007e68:	6013      	str	r3, [r2, #0]
 8007e6a:	4b75      	ldr	r3, [pc, #468]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a74      	ldr	r2, [pc, #464]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e74:	6013      	str	r3, [r2, #0]
 8007e76:	e00b      	b.n	8007e90 <HAL_RCC_OscConfig+0xd8>
 8007e78:	4b71      	ldr	r3, [pc, #452]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a70      	ldr	r2, [pc, #448]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e82:	6013      	str	r3, [r2, #0]
 8007e84:	4b6e      	ldr	r3, [pc, #440]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a6d      	ldr	r2, [pc, #436]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d013      	beq.n	8007ec0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e98:	f7fb fb16 	bl	80034c8 <HAL_GetTick>
 8007e9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e9e:	e008      	b.n	8007eb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ea0:	f7fb fb12 	bl	80034c8 <HAL_GetTick>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	2b64      	cmp	r3, #100	@ 0x64
 8007eac:	d901      	bls.n	8007eb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e3d4      	b.n	800865c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007eb2:	4b63      	ldr	r3, [pc, #396]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d0f0      	beq.n	8007ea0 <HAL_RCC_OscConfig+0xe8>
 8007ebe:	e014      	b.n	8007eea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ec0:	f7fb fb02 	bl	80034c8 <HAL_GetTick>
 8007ec4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ec6:	e008      	b.n	8007eda <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ec8:	f7fb fafe 	bl	80034c8 <HAL_GetTick>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	2b64      	cmp	r3, #100	@ 0x64
 8007ed4:	d901      	bls.n	8007eda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e3c0      	b.n	800865c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007eda:	4b59      	ldr	r3, [pc, #356]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1f0      	bne.n	8007ec8 <HAL_RCC_OscConfig+0x110>
 8007ee6:	e000      	b.n	8007eea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 0302 	and.w	r3, r3, #2
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f000 80ca 	beq.w	800808c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ef8:	4b51      	ldr	r3, [pc, #324]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f00:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f02:	4b4f      	ldr	r3, [pc, #316]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f06:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d007      	beq.n	8007f1e <HAL_RCC_OscConfig+0x166>
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	2b18      	cmp	r3, #24
 8007f12:	d156      	bne.n	8007fc2 <HAL_RCC_OscConfig+0x20a>
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	f003 0303 	and.w	r3, r3, #3
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d151      	bne.n	8007fc2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f1e:	4b48      	ldr	r3, [pc, #288]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 0304 	and.w	r3, r3, #4
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d005      	beq.n	8007f36 <HAL_RCC_OscConfig+0x17e>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e392      	b.n	800865c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f36:	4b42      	ldr	r3, [pc, #264]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f023 0219 	bic.w	r2, r3, #25
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	493f      	ldr	r1, [pc, #252]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007f44:	4313      	orrs	r3, r2
 8007f46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f48:	f7fb fabe 	bl	80034c8 <HAL_GetTick>
 8007f4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f4e:	e008      	b.n	8007f62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f50:	f7fb faba 	bl	80034c8 <HAL_GetTick>
 8007f54:	4602      	mov	r2, r0
 8007f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d901      	bls.n	8007f62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e37c      	b.n	800865c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f62:	4b37      	ldr	r3, [pc, #220]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 0304 	and.w	r3, r3, #4
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d0f0      	beq.n	8007f50 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f6e:	f7fb fadb 	bl	8003528 <HAL_GetREVID>
 8007f72:	4603      	mov	r3, r0
 8007f74:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d817      	bhi.n	8007fac <HAL_RCC_OscConfig+0x1f4>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	2b40      	cmp	r3, #64	@ 0x40
 8007f82:	d108      	bne.n	8007f96 <HAL_RCC_OscConfig+0x1de>
 8007f84:	4b2e      	ldr	r3, [pc, #184]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007f8c:	4a2c      	ldr	r2, [pc, #176]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007f8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f92:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f94:	e07a      	b.n	800808c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f96:	4b2a      	ldr	r3, [pc, #168]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	031b      	lsls	r3, r3, #12
 8007fa4:	4926      	ldr	r1, [pc, #152]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007faa:	e06f      	b.n	800808c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fac:	4b24      	ldr	r3, [pc, #144]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	061b      	lsls	r3, r3, #24
 8007fba:	4921      	ldr	r1, [pc, #132]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fc0:	e064      	b.n	800808c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d047      	beq.n	800805a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007fca:	4b1d      	ldr	r3, [pc, #116]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f023 0219 	bic.w	r2, r3, #25
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	491a      	ldr	r1, [pc, #104]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fdc:	f7fb fa74 	bl	80034c8 <HAL_GetTick>
 8007fe0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fe2:	e008      	b.n	8007ff6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fe4:	f7fb fa70 	bl	80034c8 <HAL_GetTick>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d901      	bls.n	8007ff6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e332      	b.n	800865c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ff6:	4b12      	ldr	r3, [pc, #72]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0304 	and.w	r3, r3, #4
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d0f0      	beq.n	8007fe4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008002:	f7fb fa91 	bl	8003528 <HAL_GetREVID>
 8008006:	4603      	mov	r3, r0
 8008008:	f241 0203 	movw	r2, #4099	@ 0x1003
 800800c:	4293      	cmp	r3, r2
 800800e:	d819      	bhi.n	8008044 <HAL_RCC_OscConfig+0x28c>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	2b40      	cmp	r3, #64	@ 0x40
 8008016:	d108      	bne.n	800802a <HAL_RCC_OscConfig+0x272>
 8008018:	4b09      	ldr	r3, [pc, #36]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008020:	4a07      	ldr	r2, [pc, #28]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 8008022:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008026:	6053      	str	r3, [r2, #4]
 8008028:	e030      	b.n	800808c <HAL_RCC_OscConfig+0x2d4>
 800802a:	4b05      	ldr	r3, [pc, #20]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	031b      	lsls	r3, r3, #12
 8008038:	4901      	ldr	r1, [pc, #4]	@ (8008040 <HAL_RCC_OscConfig+0x288>)
 800803a:	4313      	orrs	r3, r2
 800803c:	604b      	str	r3, [r1, #4]
 800803e:	e025      	b.n	800808c <HAL_RCC_OscConfig+0x2d4>
 8008040:	58024400 	.word	0x58024400
 8008044:	4b9a      	ldr	r3, [pc, #616]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	061b      	lsls	r3, r3, #24
 8008052:	4997      	ldr	r1, [pc, #604]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 8008054:	4313      	orrs	r3, r2
 8008056:	604b      	str	r3, [r1, #4]
 8008058:	e018      	b.n	800808c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800805a:	4b95      	ldr	r3, [pc, #596]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a94      	ldr	r2, [pc, #592]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 8008060:	f023 0301 	bic.w	r3, r3, #1
 8008064:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008066:	f7fb fa2f 	bl	80034c8 <HAL_GetTick>
 800806a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800806c:	e008      	b.n	8008080 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800806e:	f7fb fa2b 	bl	80034c8 <HAL_GetTick>
 8008072:	4602      	mov	r2, r0
 8008074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	2b02      	cmp	r3, #2
 800807a:	d901      	bls.n	8008080 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800807c:	2303      	movs	r3, #3
 800807e:	e2ed      	b.n	800865c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008080:	4b8b      	ldr	r3, [pc, #556]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 0304 	and.w	r3, r3, #4
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1f0      	bne.n	800806e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 0310 	and.w	r3, r3, #16
 8008094:	2b00      	cmp	r3, #0
 8008096:	f000 80a9 	beq.w	80081ec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800809a:	4b85      	ldr	r3, [pc, #532]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80080a4:	4b82      	ldr	r3, [pc, #520]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 80080a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080a8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	2b08      	cmp	r3, #8
 80080ae:	d007      	beq.n	80080c0 <HAL_RCC_OscConfig+0x308>
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	2b18      	cmp	r3, #24
 80080b4:	d13a      	bne.n	800812c <HAL_RCC_OscConfig+0x374>
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	f003 0303 	and.w	r3, r3, #3
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d135      	bne.n	800812c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80080c0:	4b7b      	ldr	r3, [pc, #492]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d005      	beq.n	80080d8 <HAL_RCC_OscConfig+0x320>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	69db      	ldr	r3, [r3, #28]
 80080d0:	2b80      	cmp	r3, #128	@ 0x80
 80080d2:	d001      	beq.n	80080d8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	e2c1      	b.n	800865c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80080d8:	f7fb fa26 	bl	8003528 <HAL_GetREVID>
 80080dc:	4603      	mov	r3, r0
 80080de:	f241 0203 	movw	r2, #4099	@ 0x1003
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d817      	bhi.n	8008116 <HAL_RCC_OscConfig+0x35e>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a1b      	ldr	r3, [r3, #32]
 80080ea:	2b20      	cmp	r3, #32
 80080ec:	d108      	bne.n	8008100 <HAL_RCC_OscConfig+0x348>
 80080ee:	4b70      	ldr	r3, [pc, #448]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80080f6:	4a6e      	ldr	r2, [pc, #440]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 80080f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80080fc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80080fe:	e075      	b.n	80081ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008100:	4b6b      	ldr	r3, [pc, #428]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a1b      	ldr	r3, [r3, #32]
 800810c:	069b      	lsls	r3, r3, #26
 800810e:	4968      	ldr	r1, [pc, #416]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 8008110:	4313      	orrs	r3, r2
 8008112:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008114:	e06a      	b.n	80081ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008116:	4b66      	ldr	r3, [pc, #408]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	061b      	lsls	r3, r3, #24
 8008124:	4962      	ldr	r1, [pc, #392]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 8008126:	4313      	orrs	r3, r2
 8008128:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800812a:	e05f      	b.n	80081ec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	69db      	ldr	r3, [r3, #28]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d042      	beq.n	80081ba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008134:	4b5e      	ldr	r3, [pc, #376]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a5d      	ldr	r2, [pc, #372]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 800813a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800813e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008140:	f7fb f9c2 	bl	80034c8 <HAL_GetTick>
 8008144:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008146:	e008      	b.n	800815a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008148:	f7fb f9be 	bl	80034c8 <HAL_GetTick>
 800814c:	4602      	mov	r2, r0
 800814e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	2b02      	cmp	r3, #2
 8008154:	d901      	bls.n	800815a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	e280      	b.n	800865c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800815a:	4b55      	ldr	r3, [pc, #340]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008162:	2b00      	cmp	r3, #0
 8008164:	d0f0      	beq.n	8008148 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008166:	f7fb f9df 	bl	8003528 <HAL_GetREVID>
 800816a:	4603      	mov	r3, r0
 800816c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008170:	4293      	cmp	r3, r2
 8008172:	d817      	bhi.n	80081a4 <HAL_RCC_OscConfig+0x3ec>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a1b      	ldr	r3, [r3, #32]
 8008178:	2b20      	cmp	r3, #32
 800817a:	d108      	bne.n	800818e <HAL_RCC_OscConfig+0x3d6>
 800817c:	4b4c      	ldr	r3, [pc, #304]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008184:	4a4a      	ldr	r2, [pc, #296]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 8008186:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800818a:	6053      	str	r3, [r2, #4]
 800818c:	e02e      	b.n	80081ec <HAL_RCC_OscConfig+0x434>
 800818e:	4b48      	ldr	r3, [pc, #288]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	069b      	lsls	r3, r3, #26
 800819c:	4944      	ldr	r1, [pc, #272]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	604b      	str	r3, [r1, #4]
 80081a2:	e023      	b.n	80081ec <HAL_RCC_OscConfig+0x434>
 80081a4:	4b42      	ldr	r3, [pc, #264]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a1b      	ldr	r3, [r3, #32]
 80081b0:	061b      	lsls	r3, r3, #24
 80081b2:	493f      	ldr	r1, [pc, #252]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 80081b4:	4313      	orrs	r3, r2
 80081b6:	60cb      	str	r3, [r1, #12]
 80081b8:	e018      	b.n	80081ec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80081ba:	4b3d      	ldr	r3, [pc, #244]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a3c      	ldr	r2, [pc, #240]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 80081c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081c6:	f7fb f97f 	bl	80034c8 <HAL_GetTick>
 80081ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80081cc:	e008      	b.n	80081e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80081ce:	f7fb f97b 	bl	80034c8 <HAL_GetTick>
 80081d2:	4602      	mov	r2, r0
 80081d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d901      	bls.n	80081e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	e23d      	b.n	800865c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80081e0:	4b33      	ldr	r3, [pc, #204]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1f0      	bne.n	80081ce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 0308 	and.w	r3, r3, #8
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d036      	beq.n	8008266 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	695b      	ldr	r3, [r3, #20]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d019      	beq.n	8008234 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008200:	4b2b      	ldr	r3, [pc, #172]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 8008202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008204:	4a2a      	ldr	r2, [pc, #168]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 8008206:	f043 0301 	orr.w	r3, r3, #1
 800820a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800820c:	f7fb f95c 	bl	80034c8 <HAL_GetTick>
 8008210:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008212:	e008      	b.n	8008226 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008214:	f7fb f958 	bl	80034c8 <HAL_GetTick>
 8008218:	4602      	mov	r2, r0
 800821a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	2b02      	cmp	r3, #2
 8008220:	d901      	bls.n	8008226 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008222:	2303      	movs	r3, #3
 8008224:	e21a      	b.n	800865c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008226:	4b22      	ldr	r3, [pc, #136]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 8008228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800822a:	f003 0302 	and.w	r3, r3, #2
 800822e:	2b00      	cmp	r3, #0
 8008230:	d0f0      	beq.n	8008214 <HAL_RCC_OscConfig+0x45c>
 8008232:	e018      	b.n	8008266 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008234:	4b1e      	ldr	r3, [pc, #120]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 8008236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008238:	4a1d      	ldr	r2, [pc, #116]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 800823a:	f023 0301 	bic.w	r3, r3, #1
 800823e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008240:	f7fb f942 	bl	80034c8 <HAL_GetTick>
 8008244:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008246:	e008      	b.n	800825a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008248:	f7fb f93e 	bl	80034c8 <HAL_GetTick>
 800824c:	4602      	mov	r2, r0
 800824e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	2b02      	cmp	r3, #2
 8008254:	d901      	bls.n	800825a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e200      	b.n	800865c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800825a:	4b15      	ldr	r3, [pc, #84]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 800825c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800825e:	f003 0302 	and.w	r3, r3, #2
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1f0      	bne.n	8008248 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 0320 	and.w	r3, r3, #32
 800826e:	2b00      	cmp	r3, #0
 8008270:	d039      	beq.n	80082e6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d01c      	beq.n	80082b4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800827a:	4b0d      	ldr	r3, [pc, #52]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a0c      	ldr	r2, [pc, #48]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 8008280:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008284:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008286:	f7fb f91f 	bl	80034c8 <HAL_GetTick>
 800828a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800828c:	e008      	b.n	80082a0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800828e:	f7fb f91b 	bl	80034c8 <HAL_GetTick>
 8008292:	4602      	mov	r2, r0
 8008294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	2b02      	cmp	r3, #2
 800829a:	d901      	bls.n	80082a0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e1dd      	b.n	800865c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80082a0:	4b03      	ldr	r3, [pc, #12]	@ (80082b0 <HAL_RCC_OscConfig+0x4f8>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d0f0      	beq.n	800828e <HAL_RCC_OscConfig+0x4d6>
 80082ac:	e01b      	b.n	80082e6 <HAL_RCC_OscConfig+0x52e>
 80082ae:	bf00      	nop
 80082b0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80082b4:	4b9b      	ldr	r3, [pc, #620]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a9a      	ldr	r2, [pc, #616]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 80082ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80082be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80082c0:	f7fb f902 	bl	80034c8 <HAL_GetTick>
 80082c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80082c6:	e008      	b.n	80082da <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80082c8:	f7fb f8fe 	bl	80034c8 <HAL_GetTick>
 80082cc:	4602      	mov	r2, r0
 80082ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d901      	bls.n	80082da <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e1c0      	b.n	800865c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80082da:	4b92      	ldr	r3, [pc, #584]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1f0      	bne.n	80082c8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 0304 	and.w	r3, r3, #4
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	f000 8081 	beq.w	80083f6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80082f4:	4b8c      	ldr	r3, [pc, #560]	@ (8008528 <HAL_RCC_OscConfig+0x770>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a8b      	ldr	r2, [pc, #556]	@ (8008528 <HAL_RCC_OscConfig+0x770>)
 80082fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008300:	f7fb f8e2 	bl	80034c8 <HAL_GetTick>
 8008304:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008306:	e008      	b.n	800831a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008308:	f7fb f8de 	bl	80034c8 <HAL_GetTick>
 800830c:	4602      	mov	r2, r0
 800830e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	2b64      	cmp	r3, #100	@ 0x64
 8008314:	d901      	bls.n	800831a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008316:	2303      	movs	r3, #3
 8008318:	e1a0      	b.n	800865c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800831a:	4b83      	ldr	r3, [pc, #524]	@ (8008528 <HAL_RCC_OscConfig+0x770>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008322:	2b00      	cmp	r3, #0
 8008324:	d0f0      	beq.n	8008308 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d106      	bne.n	800833c <HAL_RCC_OscConfig+0x584>
 800832e:	4b7d      	ldr	r3, [pc, #500]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 8008330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008332:	4a7c      	ldr	r2, [pc, #496]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 8008334:	f043 0301 	orr.w	r3, r3, #1
 8008338:	6713      	str	r3, [r2, #112]	@ 0x70
 800833a:	e02d      	b.n	8008398 <HAL_RCC_OscConfig+0x5e0>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10c      	bne.n	800835e <HAL_RCC_OscConfig+0x5a6>
 8008344:	4b77      	ldr	r3, [pc, #476]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 8008346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008348:	4a76      	ldr	r2, [pc, #472]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 800834a:	f023 0301 	bic.w	r3, r3, #1
 800834e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008350:	4b74      	ldr	r3, [pc, #464]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 8008352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008354:	4a73      	ldr	r2, [pc, #460]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 8008356:	f023 0304 	bic.w	r3, r3, #4
 800835a:	6713      	str	r3, [r2, #112]	@ 0x70
 800835c:	e01c      	b.n	8008398 <HAL_RCC_OscConfig+0x5e0>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	2b05      	cmp	r3, #5
 8008364:	d10c      	bne.n	8008380 <HAL_RCC_OscConfig+0x5c8>
 8008366:	4b6f      	ldr	r3, [pc, #444]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 8008368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800836a:	4a6e      	ldr	r2, [pc, #440]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 800836c:	f043 0304 	orr.w	r3, r3, #4
 8008370:	6713      	str	r3, [r2, #112]	@ 0x70
 8008372:	4b6c      	ldr	r3, [pc, #432]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 8008374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008376:	4a6b      	ldr	r2, [pc, #428]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 8008378:	f043 0301 	orr.w	r3, r3, #1
 800837c:	6713      	str	r3, [r2, #112]	@ 0x70
 800837e:	e00b      	b.n	8008398 <HAL_RCC_OscConfig+0x5e0>
 8008380:	4b68      	ldr	r3, [pc, #416]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 8008382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008384:	4a67      	ldr	r2, [pc, #412]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 8008386:	f023 0301 	bic.w	r3, r3, #1
 800838a:	6713      	str	r3, [r2, #112]	@ 0x70
 800838c:	4b65      	ldr	r3, [pc, #404]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 800838e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008390:	4a64      	ldr	r2, [pc, #400]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 8008392:	f023 0304 	bic.w	r3, r3, #4
 8008396:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d015      	beq.n	80083cc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083a0:	f7fb f892 	bl	80034c8 <HAL_GetTick>
 80083a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083a6:	e00a      	b.n	80083be <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083a8:	f7fb f88e 	bl	80034c8 <HAL_GetTick>
 80083ac:	4602      	mov	r2, r0
 80083ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d901      	bls.n	80083be <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80083ba:	2303      	movs	r3, #3
 80083bc:	e14e      	b.n	800865c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083be:	4b59      	ldr	r3, [pc, #356]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 80083c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083c2:	f003 0302 	and.w	r3, r3, #2
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d0ee      	beq.n	80083a8 <HAL_RCC_OscConfig+0x5f0>
 80083ca:	e014      	b.n	80083f6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083cc:	f7fb f87c 	bl	80034c8 <HAL_GetTick>
 80083d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80083d2:	e00a      	b.n	80083ea <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083d4:	f7fb f878 	bl	80034c8 <HAL_GetTick>
 80083d8:	4602      	mov	r2, r0
 80083da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083dc:	1ad3      	subs	r3, r2, r3
 80083de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d901      	bls.n	80083ea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80083e6:	2303      	movs	r3, #3
 80083e8:	e138      	b.n	800865c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80083ea:	4b4e      	ldr	r3, [pc, #312]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 80083ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083ee:	f003 0302 	and.w	r3, r3, #2
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1ee      	bne.n	80083d4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f000 812d 	beq.w	800865a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008400:	4b48      	ldr	r3, [pc, #288]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008408:	2b18      	cmp	r3, #24
 800840a:	f000 80bd 	beq.w	8008588 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008412:	2b02      	cmp	r3, #2
 8008414:	f040 809e 	bne.w	8008554 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008418:	4b42      	ldr	r3, [pc, #264]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a41      	ldr	r2, [pc, #260]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 800841e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008424:	f7fb f850 	bl	80034c8 <HAL_GetTick>
 8008428:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800842a:	e008      	b.n	800843e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800842c:	f7fb f84c 	bl	80034c8 <HAL_GetTick>
 8008430:	4602      	mov	r2, r0
 8008432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008434:	1ad3      	subs	r3, r2, r3
 8008436:	2b02      	cmp	r3, #2
 8008438:	d901      	bls.n	800843e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800843a:	2303      	movs	r3, #3
 800843c:	e10e      	b.n	800865c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800843e:	4b39      	ldr	r3, [pc, #228]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1f0      	bne.n	800842c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800844a:	4b36      	ldr	r3, [pc, #216]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 800844c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800844e:	4b37      	ldr	r3, [pc, #220]	@ (800852c <HAL_RCC_OscConfig+0x774>)
 8008450:	4013      	ands	r3, r2
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800845a:	0112      	lsls	r2, r2, #4
 800845c:	430a      	orrs	r2, r1
 800845e:	4931      	ldr	r1, [pc, #196]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 8008460:	4313      	orrs	r3, r2
 8008462:	628b      	str	r3, [r1, #40]	@ 0x28
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008468:	3b01      	subs	r3, #1
 800846a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008472:	3b01      	subs	r3, #1
 8008474:	025b      	lsls	r3, r3, #9
 8008476:	b29b      	uxth	r3, r3
 8008478:	431a      	orrs	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800847e:	3b01      	subs	r3, #1
 8008480:	041b      	lsls	r3, r3, #16
 8008482:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008486:	431a      	orrs	r2, r3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800848c:	3b01      	subs	r3, #1
 800848e:	061b      	lsls	r3, r3, #24
 8008490:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008494:	4923      	ldr	r1, [pc, #140]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 8008496:	4313      	orrs	r3, r2
 8008498:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800849a:	4b22      	ldr	r3, [pc, #136]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 800849c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800849e:	4a21      	ldr	r2, [pc, #132]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 80084a0:	f023 0301 	bic.w	r3, r3, #1
 80084a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80084a6:	4b1f      	ldr	r3, [pc, #124]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 80084a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084aa:	4b21      	ldr	r3, [pc, #132]	@ (8008530 <HAL_RCC_OscConfig+0x778>)
 80084ac:	4013      	ands	r3, r2
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80084b2:	00d2      	lsls	r2, r2, #3
 80084b4:	491b      	ldr	r1, [pc, #108]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 80084b6:	4313      	orrs	r3, r2
 80084b8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80084ba:	4b1a      	ldr	r3, [pc, #104]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 80084bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084be:	f023 020c 	bic.w	r2, r3, #12
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084c6:	4917      	ldr	r1, [pc, #92]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 80084c8:	4313      	orrs	r3, r2
 80084ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80084cc:	4b15      	ldr	r3, [pc, #84]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 80084ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084d0:	f023 0202 	bic.w	r2, r3, #2
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084d8:	4912      	ldr	r1, [pc, #72]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 80084da:	4313      	orrs	r3, r2
 80084dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80084de:	4b11      	ldr	r3, [pc, #68]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 80084e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e2:	4a10      	ldr	r2, [pc, #64]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 80084e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084ea:	4b0e      	ldr	r3, [pc, #56]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 80084ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ee:	4a0d      	ldr	r2, [pc, #52]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 80084f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80084f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 80084f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084fa:	4a0a      	ldr	r2, [pc, #40]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 80084fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008500:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008502:	4b08      	ldr	r3, [pc, #32]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 8008504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008506:	4a07      	ldr	r2, [pc, #28]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 8008508:	f043 0301 	orr.w	r3, r3, #1
 800850c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800850e:	4b05      	ldr	r3, [pc, #20]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a04      	ldr	r2, [pc, #16]	@ (8008524 <HAL_RCC_OscConfig+0x76c>)
 8008514:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008518:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800851a:	f7fa ffd5 	bl	80034c8 <HAL_GetTick>
 800851e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008520:	e011      	b.n	8008546 <HAL_RCC_OscConfig+0x78e>
 8008522:	bf00      	nop
 8008524:	58024400 	.word	0x58024400
 8008528:	58024800 	.word	0x58024800
 800852c:	fffffc0c 	.word	0xfffffc0c
 8008530:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008534:	f7fa ffc8 	bl	80034c8 <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	2b02      	cmp	r3, #2
 8008540:	d901      	bls.n	8008546 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e08a      	b.n	800865c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008546:	4b47      	ldr	r3, [pc, #284]	@ (8008664 <HAL_RCC_OscConfig+0x8ac>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800854e:	2b00      	cmp	r3, #0
 8008550:	d0f0      	beq.n	8008534 <HAL_RCC_OscConfig+0x77c>
 8008552:	e082      	b.n	800865a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008554:	4b43      	ldr	r3, [pc, #268]	@ (8008664 <HAL_RCC_OscConfig+0x8ac>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a42      	ldr	r2, [pc, #264]	@ (8008664 <HAL_RCC_OscConfig+0x8ac>)
 800855a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800855e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008560:	f7fa ffb2 	bl	80034c8 <HAL_GetTick>
 8008564:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008566:	e008      	b.n	800857a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008568:	f7fa ffae 	bl	80034c8 <HAL_GetTick>
 800856c:	4602      	mov	r2, r0
 800856e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	2b02      	cmp	r3, #2
 8008574:	d901      	bls.n	800857a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008576:	2303      	movs	r3, #3
 8008578:	e070      	b.n	800865c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800857a:	4b3a      	ldr	r3, [pc, #232]	@ (8008664 <HAL_RCC_OscConfig+0x8ac>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1f0      	bne.n	8008568 <HAL_RCC_OscConfig+0x7b0>
 8008586:	e068      	b.n	800865a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008588:	4b36      	ldr	r3, [pc, #216]	@ (8008664 <HAL_RCC_OscConfig+0x8ac>)
 800858a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800858c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800858e:	4b35      	ldr	r3, [pc, #212]	@ (8008664 <HAL_RCC_OscConfig+0x8ac>)
 8008590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008592:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008598:	2b01      	cmp	r3, #1
 800859a:	d031      	beq.n	8008600 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	f003 0203 	and.w	r2, r3, #3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d12a      	bne.n	8008600 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	091b      	lsrs	r3, r3, #4
 80085ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d122      	bne.n	8008600 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d11a      	bne.n	8008600 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	0a5b      	lsrs	r3, r3, #9
 80085ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085d6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80085d8:	429a      	cmp	r2, r3
 80085da:	d111      	bne.n	8008600 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	0c1b      	lsrs	r3, r3, #16
 80085e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d108      	bne.n	8008600 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	0e1b      	lsrs	r3, r3, #24
 80085f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085fa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d001      	beq.n	8008604 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e02b      	b.n	800865c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008604:	4b17      	ldr	r3, [pc, #92]	@ (8008664 <HAL_RCC_OscConfig+0x8ac>)
 8008606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008608:	08db      	lsrs	r3, r3, #3
 800860a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800860e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008614:	693a      	ldr	r2, [r7, #16]
 8008616:	429a      	cmp	r2, r3
 8008618:	d01f      	beq.n	800865a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800861a:	4b12      	ldr	r3, [pc, #72]	@ (8008664 <HAL_RCC_OscConfig+0x8ac>)
 800861c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861e:	4a11      	ldr	r2, [pc, #68]	@ (8008664 <HAL_RCC_OscConfig+0x8ac>)
 8008620:	f023 0301 	bic.w	r3, r3, #1
 8008624:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008626:	f7fa ff4f 	bl	80034c8 <HAL_GetTick>
 800862a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800862c:	bf00      	nop
 800862e:	f7fa ff4b 	bl	80034c8 <HAL_GetTick>
 8008632:	4602      	mov	r2, r0
 8008634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008636:	4293      	cmp	r3, r2
 8008638:	d0f9      	beq.n	800862e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800863a:	4b0a      	ldr	r3, [pc, #40]	@ (8008664 <HAL_RCC_OscConfig+0x8ac>)
 800863c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800863e:	4b0a      	ldr	r3, [pc, #40]	@ (8008668 <HAL_RCC_OscConfig+0x8b0>)
 8008640:	4013      	ands	r3, r2
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008646:	00d2      	lsls	r2, r2, #3
 8008648:	4906      	ldr	r1, [pc, #24]	@ (8008664 <HAL_RCC_OscConfig+0x8ac>)
 800864a:	4313      	orrs	r3, r2
 800864c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800864e:	4b05      	ldr	r3, [pc, #20]	@ (8008664 <HAL_RCC_OscConfig+0x8ac>)
 8008650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008652:	4a04      	ldr	r2, [pc, #16]	@ (8008664 <HAL_RCC_OscConfig+0x8ac>)
 8008654:	f043 0301 	orr.w	r3, r3, #1
 8008658:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3730      	adds	r7, #48	@ 0x30
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	58024400 	.word	0x58024400
 8008668:	ffff0007 	.word	0xffff0007

0800866c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b086      	sub	sp, #24
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d101      	bne.n	8008680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	e19c      	b.n	80089ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008680:	4b8a      	ldr	r3, [pc, #552]	@ (80088ac <HAL_RCC_ClockConfig+0x240>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 030f 	and.w	r3, r3, #15
 8008688:	683a      	ldr	r2, [r7, #0]
 800868a:	429a      	cmp	r2, r3
 800868c:	d910      	bls.n	80086b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800868e:	4b87      	ldr	r3, [pc, #540]	@ (80088ac <HAL_RCC_ClockConfig+0x240>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f023 020f 	bic.w	r2, r3, #15
 8008696:	4985      	ldr	r1, [pc, #532]	@ (80088ac <HAL_RCC_ClockConfig+0x240>)
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	4313      	orrs	r3, r2
 800869c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800869e:	4b83      	ldr	r3, [pc, #524]	@ (80088ac <HAL_RCC_ClockConfig+0x240>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f003 030f 	and.w	r3, r3, #15
 80086a6:	683a      	ldr	r2, [r7, #0]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d001      	beq.n	80086b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e184      	b.n	80089ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 0304 	and.w	r3, r3, #4
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d010      	beq.n	80086de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	691a      	ldr	r2, [r3, #16]
 80086c0:	4b7b      	ldr	r3, [pc, #492]	@ (80088b0 <HAL_RCC_ClockConfig+0x244>)
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d908      	bls.n	80086de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80086cc:	4b78      	ldr	r3, [pc, #480]	@ (80088b0 <HAL_RCC_ClockConfig+0x244>)
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	4975      	ldr	r1, [pc, #468]	@ (80088b0 <HAL_RCC_ClockConfig+0x244>)
 80086da:	4313      	orrs	r3, r2
 80086dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 0308 	and.w	r3, r3, #8
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d010      	beq.n	800870c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	695a      	ldr	r2, [r3, #20]
 80086ee:	4b70      	ldr	r3, [pc, #448]	@ (80088b0 <HAL_RCC_ClockConfig+0x244>)
 80086f0:	69db      	ldr	r3, [r3, #28]
 80086f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d908      	bls.n	800870c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80086fa:	4b6d      	ldr	r3, [pc, #436]	@ (80088b0 <HAL_RCC_ClockConfig+0x244>)
 80086fc:	69db      	ldr	r3, [r3, #28]
 80086fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	496a      	ldr	r1, [pc, #424]	@ (80088b0 <HAL_RCC_ClockConfig+0x244>)
 8008708:	4313      	orrs	r3, r2
 800870a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 0310 	and.w	r3, r3, #16
 8008714:	2b00      	cmp	r3, #0
 8008716:	d010      	beq.n	800873a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	699a      	ldr	r2, [r3, #24]
 800871c:	4b64      	ldr	r3, [pc, #400]	@ (80088b0 <HAL_RCC_ClockConfig+0x244>)
 800871e:	69db      	ldr	r3, [r3, #28]
 8008720:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008724:	429a      	cmp	r2, r3
 8008726:	d908      	bls.n	800873a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008728:	4b61      	ldr	r3, [pc, #388]	@ (80088b0 <HAL_RCC_ClockConfig+0x244>)
 800872a:	69db      	ldr	r3, [r3, #28]
 800872c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	495e      	ldr	r1, [pc, #376]	@ (80088b0 <HAL_RCC_ClockConfig+0x244>)
 8008736:	4313      	orrs	r3, r2
 8008738:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 0320 	and.w	r3, r3, #32
 8008742:	2b00      	cmp	r3, #0
 8008744:	d010      	beq.n	8008768 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	69da      	ldr	r2, [r3, #28]
 800874a:	4b59      	ldr	r3, [pc, #356]	@ (80088b0 <HAL_RCC_ClockConfig+0x244>)
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008752:	429a      	cmp	r2, r3
 8008754:	d908      	bls.n	8008768 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008756:	4b56      	ldr	r3, [pc, #344]	@ (80088b0 <HAL_RCC_ClockConfig+0x244>)
 8008758:	6a1b      	ldr	r3, [r3, #32]
 800875a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	4953      	ldr	r1, [pc, #332]	@ (80088b0 <HAL_RCC_ClockConfig+0x244>)
 8008764:	4313      	orrs	r3, r2
 8008766:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 0302 	and.w	r3, r3, #2
 8008770:	2b00      	cmp	r3, #0
 8008772:	d010      	beq.n	8008796 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	68da      	ldr	r2, [r3, #12]
 8008778:	4b4d      	ldr	r3, [pc, #308]	@ (80088b0 <HAL_RCC_ClockConfig+0x244>)
 800877a:	699b      	ldr	r3, [r3, #24]
 800877c:	f003 030f 	and.w	r3, r3, #15
 8008780:	429a      	cmp	r2, r3
 8008782:	d908      	bls.n	8008796 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008784:	4b4a      	ldr	r3, [pc, #296]	@ (80088b0 <HAL_RCC_ClockConfig+0x244>)
 8008786:	699b      	ldr	r3, [r3, #24]
 8008788:	f023 020f 	bic.w	r2, r3, #15
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	4947      	ldr	r1, [pc, #284]	@ (80088b0 <HAL_RCC_ClockConfig+0x244>)
 8008792:	4313      	orrs	r3, r2
 8008794:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d055      	beq.n	800884e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80087a2:	4b43      	ldr	r3, [pc, #268]	@ (80088b0 <HAL_RCC_ClockConfig+0x244>)
 80087a4:	699b      	ldr	r3, [r3, #24]
 80087a6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	4940      	ldr	r1, [pc, #256]	@ (80088b0 <HAL_RCC_ClockConfig+0x244>)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	d107      	bne.n	80087cc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80087bc:	4b3c      	ldr	r3, [pc, #240]	@ (80088b0 <HAL_RCC_ClockConfig+0x244>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d121      	bne.n	800880c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	e0f6      	b.n	80089ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	2b03      	cmp	r3, #3
 80087d2:	d107      	bne.n	80087e4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80087d4:	4b36      	ldr	r3, [pc, #216]	@ (80088b0 <HAL_RCC_ClockConfig+0x244>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d115      	bne.n	800880c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e0ea      	b.n	80089ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d107      	bne.n	80087fc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80087ec:	4b30      	ldr	r3, [pc, #192]	@ (80088b0 <HAL_RCC_ClockConfig+0x244>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d109      	bne.n	800880c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e0de      	b.n	80089ba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087fc:	4b2c      	ldr	r3, [pc, #176]	@ (80088b0 <HAL_RCC_ClockConfig+0x244>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 0304 	and.w	r3, r3, #4
 8008804:	2b00      	cmp	r3, #0
 8008806:	d101      	bne.n	800880c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e0d6      	b.n	80089ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800880c:	4b28      	ldr	r3, [pc, #160]	@ (80088b0 <HAL_RCC_ClockConfig+0x244>)
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	f023 0207 	bic.w	r2, r3, #7
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	4925      	ldr	r1, [pc, #148]	@ (80088b0 <HAL_RCC_ClockConfig+0x244>)
 800881a:	4313      	orrs	r3, r2
 800881c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800881e:	f7fa fe53 	bl	80034c8 <HAL_GetTick>
 8008822:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008824:	e00a      	b.n	800883c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008826:	f7fa fe4f 	bl	80034c8 <HAL_GetTick>
 800882a:	4602      	mov	r2, r0
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008834:	4293      	cmp	r3, r2
 8008836:	d901      	bls.n	800883c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008838:	2303      	movs	r3, #3
 800883a:	e0be      	b.n	80089ba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800883c:	4b1c      	ldr	r3, [pc, #112]	@ (80088b0 <HAL_RCC_ClockConfig+0x244>)
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	00db      	lsls	r3, r3, #3
 800884a:	429a      	cmp	r2, r3
 800884c:	d1eb      	bne.n	8008826 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 0302 	and.w	r3, r3, #2
 8008856:	2b00      	cmp	r3, #0
 8008858:	d010      	beq.n	800887c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	68da      	ldr	r2, [r3, #12]
 800885e:	4b14      	ldr	r3, [pc, #80]	@ (80088b0 <HAL_RCC_ClockConfig+0x244>)
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	f003 030f 	and.w	r3, r3, #15
 8008866:	429a      	cmp	r2, r3
 8008868:	d208      	bcs.n	800887c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800886a:	4b11      	ldr	r3, [pc, #68]	@ (80088b0 <HAL_RCC_ClockConfig+0x244>)
 800886c:	699b      	ldr	r3, [r3, #24]
 800886e:	f023 020f 	bic.w	r2, r3, #15
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	490e      	ldr	r1, [pc, #56]	@ (80088b0 <HAL_RCC_ClockConfig+0x244>)
 8008878:	4313      	orrs	r3, r2
 800887a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800887c:	4b0b      	ldr	r3, [pc, #44]	@ (80088ac <HAL_RCC_ClockConfig+0x240>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 030f 	and.w	r3, r3, #15
 8008884:	683a      	ldr	r2, [r7, #0]
 8008886:	429a      	cmp	r2, r3
 8008888:	d214      	bcs.n	80088b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800888a:	4b08      	ldr	r3, [pc, #32]	@ (80088ac <HAL_RCC_ClockConfig+0x240>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f023 020f 	bic.w	r2, r3, #15
 8008892:	4906      	ldr	r1, [pc, #24]	@ (80088ac <HAL_RCC_ClockConfig+0x240>)
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	4313      	orrs	r3, r2
 8008898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800889a:	4b04      	ldr	r3, [pc, #16]	@ (80088ac <HAL_RCC_ClockConfig+0x240>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 030f 	and.w	r3, r3, #15
 80088a2:	683a      	ldr	r2, [r7, #0]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d005      	beq.n	80088b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	e086      	b.n	80089ba <HAL_RCC_ClockConfig+0x34e>
 80088ac:	52002000 	.word	0x52002000
 80088b0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f003 0304 	and.w	r3, r3, #4
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d010      	beq.n	80088e2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	691a      	ldr	r2, [r3, #16]
 80088c4:	4b3f      	ldr	r3, [pc, #252]	@ (80089c4 <HAL_RCC_ClockConfig+0x358>)
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d208      	bcs.n	80088e2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80088d0:	4b3c      	ldr	r3, [pc, #240]	@ (80089c4 <HAL_RCC_ClockConfig+0x358>)
 80088d2:	699b      	ldr	r3, [r3, #24]
 80088d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	4939      	ldr	r1, [pc, #228]	@ (80089c4 <HAL_RCC_ClockConfig+0x358>)
 80088de:	4313      	orrs	r3, r2
 80088e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 0308 	and.w	r3, r3, #8
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d010      	beq.n	8008910 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	695a      	ldr	r2, [r3, #20]
 80088f2:	4b34      	ldr	r3, [pc, #208]	@ (80089c4 <HAL_RCC_ClockConfig+0x358>)
 80088f4:	69db      	ldr	r3, [r3, #28]
 80088f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d208      	bcs.n	8008910 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80088fe:	4b31      	ldr	r3, [pc, #196]	@ (80089c4 <HAL_RCC_ClockConfig+0x358>)
 8008900:	69db      	ldr	r3, [r3, #28]
 8008902:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	492e      	ldr	r1, [pc, #184]	@ (80089c4 <HAL_RCC_ClockConfig+0x358>)
 800890c:	4313      	orrs	r3, r2
 800890e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 0310 	and.w	r3, r3, #16
 8008918:	2b00      	cmp	r3, #0
 800891a:	d010      	beq.n	800893e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	699a      	ldr	r2, [r3, #24]
 8008920:	4b28      	ldr	r3, [pc, #160]	@ (80089c4 <HAL_RCC_ClockConfig+0x358>)
 8008922:	69db      	ldr	r3, [r3, #28]
 8008924:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008928:	429a      	cmp	r2, r3
 800892a:	d208      	bcs.n	800893e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800892c:	4b25      	ldr	r3, [pc, #148]	@ (80089c4 <HAL_RCC_ClockConfig+0x358>)
 800892e:	69db      	ldr	r3, [r3, #28]
 8008930:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	4922      	ldr	r1, [pc, #136]	@ (80089c4 <HAL_RCC_ClockConfig+0x358>)
 800893a:	4313      	orrs	r3, r2
 800893c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f003 0320 	and.w	r3, r3, #32
 8008946:	2b00      	cmp	r3, #0
 8008948:	d010      	beq.n	800896c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	69da      	ldr	r2, [r3, #28]
 800894e:	4b1d      	ldr	r3, [pc, #116]	@ (80089c4 <HAL_RCC_ClockConfig+0x358>)
 8008950:	6a1b      	ldr	r3, [r3, #32]
 8008952:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008956:	429a      	cmp	r2, r3
 8008958:	d208      	bcs.n	800896c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800895a:	4b1a      	ldr	r3, [pc, #104]	@ (80089c4 <HAL_RCC_ClockConfig+0x358>)
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	69db      	ldr	r3, [r3, #28]
 8008966:	4917      	ldr	r1, [pc, #92]	@ (80089c4 <HAL_RCC_ClockConfig+0x358>)
 8008968:	4313      	orrs	r3, r2
 800896a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800896c:	f000 f834 	bl	80089d8 <HAL_RCC_GetSysClockFreq>
 8008970:	4602      	mov	r2, r0
 8008972:	4b14      	ldr	r3, [pc, #80]	@ (80089c4 <HAL_RCC_ClockConfig+0x358>)
 8008974:	699b      	ldr	r3, [r3, #24]
 8008976:	0a1b      	lsrs	r3, r3, #8
 8008978:	f003 030f 	and.w	r3, r3, #15
 800897c:	4912      	ldr	r1, [pc, #72]	@ (80089c8 <HAL_RCC_ClockConfig+0x35c>)
 800897e:	5ccb      	ldrb	r3, [r1, r3]
 8008980:	f003 031f 	and.w	r3, r3, #31
 8008984:	fa22 f303 	lsr.w	r3, r2, r3
 8008988:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800898a:	4b0e      	ldr	r3, [pc, #56]	@ (80089c4 <HAL_RCC_ClockConfig+0x358>)
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	f003 030f 	and.w	r3, r3, #15
 8008992:	4a0d      	ldr	r2, [pc, #52]	@ (80089c8 <HAL_RCC_ClockConfig+0x35c>)
 8008994:	5cd3      	ldrb	r3, [r2, r3]
 8008996:	f003 031f 	and.w	r3, r3, #31
 800899a:	693a      	ldr	r2, [r7, #16]
 800899c:	fa22 f303 	lsr.w	r3, r2, r3
 80089a0:	4a0a      	ldr	r2, [pc, #40]	@ (80089cc <HAL_RCC_ClockConfig+0x360>)
 80089a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80089a4:	4a0a      	ldr	r2, [pc, #40]	@ (80089d0 <HAL_RCC_ClockConfig+0x364>)
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80089aa:	4b0a      	ldr	r3, [pc, #40]	@ (80089d4 <HAL_RCC_ClockConfig+0x368>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7f9 fda0 	bl	80024f4 <HAL_InitTick>
 80089b4:	4603      	mov	r3, r0
 80089b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80089b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3718      	adds	r7, #24
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	58024400 	.word	0x58024400
 80089c8:	080234f8 	.word	0x080234f8
 80089cc:	24000008 	.word	0x24000008
 80089d0:	24000004 	.word	0x24000004
 80089d4:	2400000c 	.word	0x2400000c

080089d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80089d8:	b480      	push	{r7}
 80089da:	b089      	sub	sp, #36	@ 0x24
 80089dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80089de:	4bb3      	ldr	r3, [pc, #716]	@ (8008cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80089e6:	2b18      	cmp	r3, #24
 80089e8:	f200 8155 	bhi.w	8008c96 <HAL_RCC_GetSysClockFreq+0x2be>
 80089ec:	a201      	add	r2, pc, #4	@ (adr r2, 80089f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80089ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f2:	bf00      	nop
 80089f4:	08008a59 	.word	0x08008a59
 80089f8:	08008c97 	.word	0x08008c97
 80089fc:	08008c97 	.word	0x08008c97
 8008a00:	08008c97 	.word	0x08008c97
 8008a04:	08008c97 	.word	0x08008c97
 8008a08:	08008c97 	.word	0x08008c97
 8008a0c:	08008c97 	.word	0x08008c97
 8008a10:	08008c97 	.word	0x08008c97
 8008a14:	08008a7f 	.word	0x08008a7f
 8008a18:	08008c97 	.word	0x08008c97
 8008a1c:	08008c97 	.word	0x08008c97
 8008a20:	08008c97 	.word	0x08008c97
 8008a24:	08008c97 	.word	0x08008c97
 8008a28:	08008c97 	.word	0x08008c97
 8008a2c:	08008c97 	.word	0x08008c97
 8008a30:	08008c97 	.word	0x08008c97
 8008a34:	08008a85 	.word	0x08008a85
 8008a38:	08008c97 	.word	0x08008c97
 8008a3c:	08008c97 	.word	0x08008c97
 8008a40:	08008c97 	.word	0x08008c97
 8008a44:	08008c97 	.word	0x08008c97
 8008a48:	08008c97 	.word	0x08008c97
 8008a4c:	08008c97 	.word	0x08008c97
 8008a50:	08008c97 	.word	0x08008c97
 8008a54:	08008a8b 	.word	0x08008a8b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a58:	4b94      	ldr	r3, [pc, #592]	@ (8008cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 0320 	and.w	r3, r3, #32
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d009      	beq.n	8008a78 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a64:	4b91      	ldr	r3, [pc, #580]	@ (8008cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	08db      	lsrs	r3, r3, #3
 8008a6a:	f003 0303 	and.w	r3, r3, #3
 8008a6e:	4a90      	ldr	r2, [pc, #576]	@ (8008cb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a70:	fa22 f303 	lsr.w	r3, r2, r3
 8008a74:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008a76:	e111      	b.n	8008c9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008a78:	4b8d      	ldr	r3, [pc, #564]	@ (8008cb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a7a:	61bb      	str	r3, [r7, #24]
      break;
 8008a7c:	e10e      	b.n	8008c9c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008a7e:	4b8d      	ldr	r3, [pc, #564]	@ (8008cb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008a80:	61bb      	str	r3, [r7, #24]
      break;
 8008a82:	e10b      	b.n	8008c9c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008a84:	4b8c      	ldr	r3, [pc, #560]	@ (8008cb8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008a86:	61bb      	str	r3, [r7, #24]
      break;
 8008a88:	e108      	b.n	8008c9c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a8a:	4b88      	ldr	r3, [pc, #544]	@ (8008cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a8e:	f003 0303 	and.w	r3, r3, #3
 8008a92:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008a94:	4b85      	ldr	r3, [pc, #532]	@ (8008cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a98:	091b      	lsrs	r3, r3, #4
 8008a9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a9e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008aa0:	4b82      	ldr	r3, [pc, #520]	@ (8008cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aa4:	f003 0301 	and.w	r3, r3, #1
 8008aa8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008aaa:	4b80      	ldr	r3, [pc, #512]	@ (8008cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aae:	08db      	lsrs	r3, r3, #3
 8008ab0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	fb02 f303 	mul.w	r3, r2, r3
 8008aba:	ee07 3a90 	vmov	s15, r3
 8008abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ac2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f000 80e1 	beq.w	8008c90 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	2b02      	cmp	r3, #2
 8008ad2:	f000 8083 	beq.w	8008bdc <HAL_RCC_GetSysClockFreq+0x204>
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	f200 80a1 	bhi.w	8008c20 <HAL_RCC_GetSysClockFreq+0x248>
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d003      	beq.n	8008aec <HAL_RCC_GetSysClockFreq+0x114>
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d056      	beq.n	8008b98 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008aea:	e099      	b.n	8008c20 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008aec:	4b6f      	ldr	r3, [pc, #444]	@ (8008cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 0320 	and.w	r3, r3, #32
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d02d      	beq.n	8008b54 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008af8:	4b6c      	ldr	r3, [pc, #432]	@ (8008cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	08db      	lsrs	r3, r3, #3
 8008afe:	f003 0303 	and.w	r3, r3, #3
 8008b02:	4a6b      	ldr	r2, [pc, #428]	@ (8008cb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b04:	fa22 f303 	lsr.w	r3, r2, r3
 8008b08:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	ee07 3a90 	vmov	s15, r3
 8008b10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	ee07 3a90 	vmov	s15, r3
 8008b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b22:	4b62      	ldr	r3, [pc, #392]	@ (8008cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b2a:	ee07 3a90 	vmov	s15, r3
 8008b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b32:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b36:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008cbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b4e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008b52:	e087      	b.n	8008c64 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	ee07 3a90 	vmov	s15, r3
 8008b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b5e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008cc0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b66:	4b51      	ldr	r3, [pc, #324]	@ (8008cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b6e:	ee07 3a90 	vmov	s15, r3
 8008b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b76:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b7a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008cbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b96:	e065      	b.n	8008c64 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	ee07 3a90 	vmov	s15, r3
 8008b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ba2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008cc4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008baa:	4b40      	ldr	r3, [pc, #256]	@ (8008cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bb2:	ee07 3a90 	vmov	s15, r3
 8008bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bba:	ed97 6a02 	vldr	s12, [r7, #8]
 8008bbe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008cbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008bda:	e043      	b.n	8008c64 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	ee07 3a90 	vmov	s15, r3
 8008be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008cc8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bee:	4b2f      	ldr	r3, [pc, #188]	@ (8008cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bf6:	ee07 3a90 	vmov	s15, r3
 8008bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c02:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008cbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c1e:	e021      	b.n	8008c64 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	ee07 3a90 	vmov	s15, r3
 8008c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c2a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008cc4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c32:	4b1e      	ldr	r3, [pc, #120]	@ (8008cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c3a:	ee07 3a90 	vmov	s15, r3
 8008c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c42:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c46:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008cbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c62:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008c64:	4b11      	ldr	r3, [pc, #68]	@ (8008cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c68:	0a5b      	lsrs	r3, r3, #9
 8008c6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c6e:	3301      	adds	r3, #1
 8008c70:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	ee07 3a90 	vmov	s15, r3
 8008c78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c88:	ee17 3a90 	vmov	r3, s15
 8008c8c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008c8e:	e005      	b.n	8008c9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008c90:	2300      	movs	r3, #0
 8008c92:	61bb      	str	r3, [r7, #24]
      break;
 8008c94:	e002      	b.n	8008c9c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008c96:	4b07      	ldr	r3, [pc, #28]	@ (8008cb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008c98:	61bb      	str	r3, [r7, #24]
      break;
 8008c9a:	bf00      	nop
  }

  return sysclockfreq;
 8008c9c:	69bb      	ldr	r3, [r7, #24]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3724      	adds	r7, #36	@ 0x24
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	58024400 	.word	0x58024400
 8008cb0:	03d09000 	.word	0x03d09000
 8008cb4:	003d0900 	.word	0x003d0900
 8008cb8:	007a1200 	.word	0x007a1200
 8008cbc:	46000000 	.word	0x46000000
 8008cc0:	4c742400 	.word	0x4c742400
 8008cc4:	4a742400 	.word	0x4a742400
 8008cc8:	4af42400 	.word	0x4af42400

08008ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008cd2:	f7ff fe81 	bl	80089d8 <HAL_RCC_GetSysClockFreq>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	4b10      	ldr	r3, [pc, #64]	@ (8008d1c <HAL_RCC_GetHCLKFreq+0x50>)
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	0a1b      	lsrs	r3, r3, #8
 8008cde:	f003 030f 	and.w	r3, r3, #15
 8008ce2:	490f      	ldr	r1, [pc, #60]	@ (8008d20 <HAL_RCC_GetHCLKFreq+0x54>)
 8008ce4:	5ccb      	ldrb	r3, [r1, r3]
 8008ce6:	f003 031f 	and.w	r3, r3, #31
 8008cea:	fa22 f303 	lsr.w	r3, r2, r3
 8008cee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8008d1c <HAL_RCC_GetHCLKFreq+0x50>)
 8008cf2:	699b      	ldr	r3, [r3, #24]
 8008cf4:	f003 030f 	and.w	r3, r3, #15
 8008cf8:	4a09      	ldr	r2, [pc, #36]	@ (8008d20 <HAL_RCC_GetHCLKFreq+0x54>)
 8008cfa:	5cd3      	ldrb	r3, [r2, r3]
 8008cfc:	f003 031f 	and.w	r3, r3, #31
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	fa22 f303 	lsr.w	r3, r2, r3
 8008d06:	4a07      	ldr	r2, [pc, #28]	@ (8008d24 <HAL_RCC_GetHCLKFreq+0x58>)
 8008d08:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008d0a:	4a07      	ldr	r2, [pc, #28]	@ (8008d28 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008d10:	4b04      	ldr	r3, [pc, #16]	@ (8008d24 <HAL_RCC_GetHCLKFreq+0x58>)
 8008d12:	681b      	ldr	r3, [r3, #0]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	58024400 	.word	0x58024400
 8008d20:	080234f8 	.word	0x080234f8
 8008d24:	24000008 	.word	0x24000008
 8008d28:	24000004 	.word	0x24000004

08008d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008d30:	f7ff ffcc 	bl	8008ccc <HAL_RCC_GetHCLKFreq>
 8008d34:	4602      	mov	r2, r0
 8008d36:	4b06      	ldr	r3, [pc, #24]	@ (8008d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d38:	69db      	ldr	r3, [r3, #28]
 8008d3a:	091b      	lsrs	r3, r3, #4
 8008d3c:	f003 0307 	and.w	r3, r3, #7
 8008d40:	4904      	ldr	r1, [pc, #16]	@ (8008d54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008d42:	5ccb      	ldrb	r3, [r1, r3]
 8008d44:	f003 031f 	and.w	r3, r3, #31
 8008d48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	58024400 	.word	0x58024400
 8008d54:	080234f8 	.word	0x080234f8

08008d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008d5c:	f7ff ffb6 	bl	8008ccc <HAL_RCC_GetHCLKFreq>
 8008d60:	4602      	mov	r2, r0
 8008d62:	4b06      	ldr	r3, [pc, #24]	@ (8008d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d64:	69db      	ldr	r3, [r3, #28]
 8008d66:	0a1b      	lsrs	r3, r3, #8
 8008d68:	f003 0307 	and.w	r3, r3, #7
 8008d6c:	4904      	ldr	r1, [pc, #16]	@ (8008d80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008d6e:	5ccb      	ldrb	r3, [r1, r3]
 8008d70:	f003 031f 	and.w	r3, r3, #31
 8008d74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	58024400 	.word	0x58024400
 8008d80:	080234f8 	.word	0x080234f8

08008d84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	223f      	movs	r2, #63	@ 0x3f
 8008d92:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008d94:	4b1a      	ldr	r3, [pc, #104]	@ (8008e00 <HAL_RCC_GetClockConfig+0x7c>)
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	f003 0207 	and.w	r2, r3, #7
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008da0:	4b17      	ldr	r3, [pc, #92]	@ (8008e00 <HAL_RCC_GetClockConfig+0x7c>)
 8008da2:	699b      	ldr	r3, [r3, #24]
 8008da4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008dac:	4b14      	ldr	r3, [pc, #80]	@ (8008e00 <HAL_RCC_GetClockConfig+0x7c>)
 8008dae:	699b      	ldr	r3, [r3, #24]
 8008db0:	f003 020f 	and.w	r2, r3, #15
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008db8:	4b11      	ldr	r3, [pc, #68]	@ (8008e00 <HAL_RCC_GetClockConfig+0x7c>)
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8008e00 <HAL_RCC_GetClockConfig+0x7c>)
 8008dc6:	69db      	ldr	r3, [r3, #28]
 8008dc8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8008e00 <HAL_RCC_GetClockConfig+0x7c>)
 8008dd2:	69db      	ldr	r3, [r3, #28]
 8008dd4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008ddc:	4b08      	ldr	r3, [pc, #32]	@ (8008e00 <HAL_RCC_GetClockConfig+0x7c>)
 8008dde:	6a1b      	ldr	r3, [r3, #32]
 8008de0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008de8:	4b06      	ldr	r3, [pc, #24]	@ (8008e04 <HAL_RCC_GetClockConfig+0x80>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f003 020f 	and.w	r2, r3, #15
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	601a      	str	r2, [r3, #0]
}
 8008df4:	bf00      	nop
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	58024400 	.word	0x58024400
 8008e04:	52002000 	.word	0x52002000

08008e08 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e0c:	b0ca      	sub	sp, #296	@ 0x128
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008e14:	2300      	movs	r3, #0
 8008e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e28:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008e2c:	2500      	movs	r5, #0
 8008e2e:	ea54 0305 	orrs.w	r3, r4, r5
 8008e32:	d049      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e3e:	d02f      	beq.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008e40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e44:	d828      	bhi.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008e46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e4a:	d01a      	beq.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008e4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e50:	d822      	bhi.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d003      	beq.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008e56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e5a:	d007      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008e5c:	e01c      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e5e:	4bb8      	ldr	r3, [pc, #736]	@ (8009140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e62:	4ab7      	ldr	r2, [pc, #732]	@ (8009140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008e6a:	e01a      	b.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e70:	3308      	adds	r3, #8
 8008e72:	2102      	movs	r1, #2
 8008e74:	4618      	mov	r0, r3
 8008e76:	f002 fb61 	bl	800b53c <RCCEx_PLL2_Config>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008e80:	e00f      	b.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e86:	3328      	adds	r3, #40	@ 0x28
 8008e88:	2102      	movs	r1, #2
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f002 fc08 	bl	800b6a0 <RCCEx_PLL3_Config>
 8008e90:	4603      	mov	r3, r0
 8008e92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008e96:	e004      	b.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e9e:	e000      	b.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d10a      	bne.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008eaa:	4ba5      	ldr	r3, [pc, #660]	@ (8009140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008eb8:	4aa1      	ldr	r2, [pc, #644]	@ (8009140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008eba:	430b      	orrs	r3, r1
 8008ebc:	6513      	str	r3, [r2, #80]	@ 0x50
 8008ebe:	e003      	b.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ec4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008ed4:	f04f 0900 	mov.w	r9, #0
 8008ed8:	ea58 0309 	orrs.w	r3, r8, r9
 8008edc:	d047      	beq.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ee4:	2b04      	cmp	r3, #4
 8008ee6:	d82a      	bhi.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8008ef0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eee:	bf00      	nop
 8008ef0:	08008f05 	.word	0x08008f05
 8008ef4:	08008f13 	.word	0x08008f13
 8008ef8:	08008f29 	.word	0x08008f29
 8008efc:	08008f47 	.word	0x08008f47
 8008f00:	08008f47 	.word	0x08008f47
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f04:	4b8e      	ldr	r3, [pc, #568]	@ (8009140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f08:	4a8d      	ldr	r2, [pc, #564]	@ (8009140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f10:	e01a      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f16:	3308      	adds	r3, #8
 8008f18:	2100      	movs	r1, #0
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f002 fb0e 	bl	800b53c <RCCEx_PLL2_Config>
 8008f20:	4603      	mov	r3, r0
 8008f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f26:	e00f      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f2c:	3328      	adds	r3, #40	@ 0x28
 8008f2e:	2100      	movs	r1, #0
 8008f30:	4618      	mov	r0, r3
 8008f32:	f002 fbb5 	bl	800b6a0 <RCCEx_PLL3_Config>
 8008f36:	4603      	mov	r3, r0
 8008f38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f3c:	e004      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f44:	e000      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10a      	bne.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f50:	4b7b      	ldr	r3, [pc, #492]	@ (8009140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f54:	f023 0107 	bic.w	r1, r3, #7
 8008f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f5e:	4a78      	ldr	r2, [pc, #480]	@ (8009140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f60:	430b      	orrs	r3, r1
 8008f62:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f64:	e003      	b.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f76:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008f7a:	f04f 0b00 	mov.w	fp, #0
 8008f7e:	ea5a 030b 	orrs.w	r3, sl, fp
 8008f82:	d04c      	beq.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f8e:	d030      	beq.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008f90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f94:	d829      	bhi.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008f96:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f98:	d02d      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008f9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f9c:	d825      	bhi.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008f9e:	2b80      	cmp	r3, #128	@ 0x80
 8008fa0:	d018      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008fa2:	2b80      	cmp	r3, #128	@ 0x80
 8008fa4:	d821      	bhi.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d002      	beq.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008faa:	2b40      	cmp	r3, #64	@ 0x40
 8008fac:	d007      	beq.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008fae:	e01c      	b.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fb0:	4b63      	ldr	r3, [pc, #396]	@ (8009140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb4:	4a62      	ldr	r2, [pc, #392]	@ (8009140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008fbc:	e01c      	b.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fc2:	3308      	adds	r3, #8
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f002 fab8 	bl	800b53c <RCCEx_PLL2_Config>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008fd2:	e011      	b.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fd8:	3328      	adds	r3, #40	@ 0x28
 8008fda:	2100      	movs	r1, #0
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f002 fb5f 	bl	800b6a0 <RCCEx_PLL3_Config>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008fe8:	e006      	b.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ff0:	e002      	b.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008ff2:	bf00      	nop
 8008ff4:	e000      	b.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008ff6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ff8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10a      	bne.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009000:	4b4f      	ldr	r3, [pc, #316]	@ (8009140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009004:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800900c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800900e:	4a4c      	ldr	r2, [pc, #304]	@ (8009140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009010:	430b      	orrs	r3, r1
 8009012:	6513      	str	r3, [r2, #80]	@ 0x50
 8009014:	e003      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800901a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800901e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009026:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800902a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800902e:	2300      	movs	r3, #0
 8009030:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009034:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8009038:	460b      	mov	r3, r1
 800903a:	4313      	orrs	r3, r2
 800903c:	d053      	beq.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800903e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009042:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009046:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800904a:	d035      	beq.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800904c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009050:	d82e      	bhi.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009052:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009056:	d031      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009058:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800905c:	d828      	bhi.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800905e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009062:	d01a      	beq.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009064:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009068:	d822      	bhi.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800906a:	2b00      	cmp	r3, #0
 800906c:	d003      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800906e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009072:	d007      	beq.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009074:	e01c      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009076:	4b32      	ldr	r3, [pc, #200]	@ (8009140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800907a:	4a31      	ldr	r2, [pc, #196]	@ (8009140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800907c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009080:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009082:	e01c      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009088:	3308      	adds	r3, #8
 800908a:	2100      	movs	r1, #0
 800908c:	4618      	mov	r0, r3
 800908e:	f002 fa55 	bl	800b53c <RCCEx_PLL2_Config>
 8009092:	4603      	mov	r3, r0
 8009094:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009098:	e011      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800909a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800909e:	3328      	adds	r3, #40	@ 0x28
 80090a0:	2100      	movs	r1, #0
 80090a2:	4618      	mov	r0, r3
 80090a4:	f002 fafc 	bl	800b6a0 <RCCEx_PLL3_Config>
 80090a8:	4603      	mov	r3, r0
 80090aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090ae:	e006      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80090b6:	e002      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80090b8:	bf00      	nop
 80090ba:	e000      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80090bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d10b      	bne.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80090c6:	4b1e      	ldr	r3, [pc, #120]	@ (8009140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090ca:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80090ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80090d6:	4a1a      	ldr	r2, [pc, #104]	@ (8009140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090d8:	430b      	orrs	r3, r1
 80090da:	6593      	str	r3, [r2, #88]	@ 0x58
 80090dc:	e003      	b.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80090e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ee:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80090f2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80090f6:	2300      	movs	r3, #0
 80090f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80090fc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009100:	460b      	mov	r3, r1
 8009102:	4313      	orrs	r3, r2
 8009104:	d056      	beq.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800910a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800910e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009112:	d038      	beq.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009114:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009118:	d831      	bhi.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800911a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800911e:	d034      	beq.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009120:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009124:	d82b      	bhi.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009126:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800912a:	d01d      	beq.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800912c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009130:	d825      	bhi.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009132:	2b00      	cmp	r3, #0
 8009134:	d006      	beq.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009136:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800913a:	d00a      	beq.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800913c:	e01f      	b.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800913e:	bf00      	nop
 8009140:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009144:	4ba2      	ldr	r3, [pc, #648]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009148:	4aa1      	ldr	r2, [pc, #644]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800914a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800914e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009150:	e01c      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009156:	3308      	adds	r3, #8
 8009158:	2100      	movs	r1, #0
 800915a:	4618      	mov	r0, r3
 800915c:	f002 f9ee 	bl	800b53c <RCCEx_PLL2_Config>
 8009160:	4603      	mov	r3, r0
 8009162:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009166:	e011      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800916c:	3328      	adds	r3, #40	@ 0x28
 800916e:	2100      	movs	r1, #0
 8009170:	4618      	mov	r0, r3
 8009172:	f002 fa95 	bl	800b6a0 <RCCEx_PLL3_Config>
 8009176:	4603      	mov	r3, r0
 8009178:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800917c:	e006      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009184:	e002      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009186:	bf00      	nop
 8009188:	e000      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800918a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800918c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009190:	2b00      	cmp	r3, #0
 8009192:	d10b      	bne.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009194:	4b8e      	ldr	r3, [pc, #568]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009198:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800919c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80091a4:	4a8a      	ldr	r2, [pc, #552]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091a6:	430b      	orrs	r3, r1
 80091a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80091aa:	e003      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80091b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091bc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80091c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80091c4:	2300      	movs	r3, #0
 80091c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80091ca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80091ce:	460b      	mov	r3, r1
 80091d0:	4313      	orrs	r3, r2
 80091d2:	d03a      	beq.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80091d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091da:	2b30      	cmp	r3, #48	@ 0x30
 80091dc:	d01f      	beq.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80091de:	2b30      	cmp	r3, #48	@ 0x30
 80091e0:	d819      	bhi.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80091e2:	2b20      	cmp	r3, #32
 80091e4:	d00c      	beq.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80091e6:	2b20      	cmp	r3, #32
 80091e8:	d815      	bhi.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d019      	beq.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80091ee:	2b10      	cmp	r3, #16
 80091f0:	d111      	bne.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091f2:	4b77      	ldr	r3, [pc, #476]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091f6:	4a76      	ldr	r2, [pc, #472]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80091fe:	e011      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009204:	3308      	adds	r3, #8
 8009206:	2102      	movs	r1, #2
 8009208:	4618      	mov	r0, r3
 800920a:	f002 f997 	bl	800b53c <RCCEx_PLL2_Config>
 800920e:	4603      	mov	r3, r0
 8009210:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009214:	e006      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800921c:	e002      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800921e:	bf00      	nop
 8009220:	e000      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009222:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009224:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009228:	2b00      	cmp	r3, #0
 800922a:	d10a      	bne.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800922c:	4b68      	ldr	r3, [pc, #416]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800922e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009230:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800923a:	4a65      	ldr	r2, [pc, #404]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800923c:	430b      	orrs	r3, r1
 800923e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009240:	e003      	b.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009246:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800924a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800924e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009252:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009256:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800925a:	2300      	movs	r3, #0
 800925c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009260:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009264:	460b      	mov	r3, r1
 8009266:	4313      	orrs	r3, r2
 8009268:	d051      	beq.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800926a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800926e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009270:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009274:	d035      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009276:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800927a:	d82e      	bhi.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800927c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009280:	d031      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009282:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009286:	d828      	bhi.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009288:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800928c:	d01a      	beq.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800928e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009292:	d822      	bhi.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009294:	2b00      	cmp	r3, #0
 8009296:	d003      	beq.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009298:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800929c:	d007      	beq.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800929e:	e01c      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092a0:	4b4b      	ldr	r3, [pc, #300]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a4:	4a4a      	ldr	r2, [pc, #296]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80092ac:	e01c      	b.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092b2:	3308      	adds	r3, #8
 80092b4:	2100      	movs	r1, #0
 80092b6:	4618      	mov	r0, r3
 80092b8:	f002 f940 	bl	800b53c <RCCEx_PLL2_Config>
 80092bc:	4603      	mov	r3, r0
 80092be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80092c2:	e011      	b.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80092c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092c8:	3328      	adds	r3, #40	@ 0x28
 80092ca:	2100      	movs	r1, #0
 80092cc:	4618      	mov	r0, r3
 80092ce:	f002 f9e7 	bl	800b6a0 <RCCEx_PLL3_Config>
 80092d2:	4603      	mov	r3, r0
 80092d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80092d8:	e006      	b.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80092e0:	e002      	b.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80092e2:	bf00      	nop
 80092e4:	e000      	b.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80092e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d10a      	bne.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80092f0:	4b37      	ldr	r3, [pc, #220]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092f4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80092f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092fe:	4a34      	ldr	r2, [pc, #208]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009300:	430b      	orrs	r3, r1
 8009302:	6513      	str	r3, [r2, #80]	@ 0x50
 8009304:	e003      	b.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009306:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800930a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800930e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009316:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800931a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800931e:	2300      	movs	r3, #0
 8009320:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009324:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009328:	460b      	mov	r3, r1
 800932a:	4313      	orrs	r3, r2
 800932c:	d056      	beq.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800932e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009332:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009334:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009338:	d033      	beq.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800933a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800933e:	d82c      	bhi.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009340:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009344:	d02f      	beq.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009346:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800934a:	d826      	bhi.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800934c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009350:	d02b      	beq.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009352:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009356:	d820      	bhi.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009358:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800935c:	d012      	beq.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800935e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009362:	d81a      	bhi.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009364:	2b00      	cmp	r3, #0
 8009366:	d022      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800936c:	d115      	bne.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800936e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009372:	3308      	adds	r3, #8
 8009374:	2101      	movs	r1, #1
 8009376:	4618      	mov	r0, r3
 8009378:	f002 f8e0 	bl	800b53c <RCCEx_PLL2_Config>
 800937c:	4603      	mov	r3, r0
 800937e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009382:	e015      	b.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009388:	3328      	adds	r3, #40	@ 0x28
 800938a:	2101      	movs	r1, #1
 800938c:	4618      	mov	r0, r3
 800938e:	f002 f987 	bl	800b6a0 <RCCEx_PLL3_Config>
 8009392:	4603      	mov	r3, r0
 8009394:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009398:	e00a      	b.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80093a0:	e006      	b.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80093a2:	bf00      	nop
 80093a4:	e004      	b.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80093a6:	bf00      	nop
 80093a8:	e002      	b.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80093aa:	bf00      	nop
 80093ac:	e000      	b.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80093ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d10d      	bne.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80093b8:	4b05      	ldr	r3, [pc, #20]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093bc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80093c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093c6:	4a02      	ldr	r2, [pc, #8]	@ (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093c8:	430b      	orrs	r3, r1
 80093ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80093cc:	e006      	b.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80093ce:	bf00      	nop
 80093d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80093dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80093e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80093ec:	2300      	movs	r3, #0
 80093ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80093f2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80093f6:	460b      	mov	r3, r1
 80093f8:	4313      	orrs	r3, r2
 80093fa:	d055      	beq.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80093fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009400:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009404:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009408:	d033      	beq.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800940a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800940e:	d82c      	bhi.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009414:	d02f      	beq.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009416:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800941a:	d826      	bhi.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800941c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009420:	d02b      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009422:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009426:	d820      	bhi.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009428:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800942c:	d012      	beq.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800942e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009432:	d81a      	bhi.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009434:	2b00      	cmp	r3, #0
 8009436:	d022      	beq.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009438:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800943c:	d115      	bne.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800943e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009442:	3308      	adds	r3, #8
 8009444:	2101      	movs	r1, #1
 8009446:	4618      	mov	r0, r3
 8009448:	f002 f878 	bl	800b53c <RCCEx_PLL2_Config>
 800944c:	4603      	mov	r3, r0
 800944e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009452:	e015      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009458:	3328      	adds	r3, #40	@ 0x28
 800945a:	2101      	movs	r1, #1
 800945c:	4618      	mov	r0, r3
 800945e:	f002 f91f 	bl	800b6a0 <RCCEx_PLL3_Config>
 8009462:	4603      	mov	r3, r0
 8009464:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009468:	e00a      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009470:	e006      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009472:	bf00      	nop
 8009474:	e004      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009476:	bf00      	nop
 8009478:	e002      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800947a:	bf00      	nop
 800947c:	e000      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800947e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009480:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009484:	2b00      	cmp	r3, #0
 8009486:	d10b      	bne.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009488:	4ba3      	ldr	r3, [pc, #652]	@ (8009718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800948a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800948c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009494:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009498:	4a9f      	ldr	r2, [pc, #636]	@ (8009718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800949a:	430b      	orrs	r3, r1
 800949c:	6593      	str	r3, [r2, #88]	@ 0x58
 800949e:	e003      	b.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80094a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80094b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80094b8:	2300      	movs	r3, #0
 80094ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80094be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80094c2:	460b      	mov	r3, r1
 80094c4:	4313      	orrs	r3, r2
 80094c6:	d037      	beq.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80094c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094d2:	d00e      	beq.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80094d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094d8:	d816      	bhi.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d018      	beq.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80094de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094e2:	d111      	bne.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094e4:	4b8c      	ldr	r3, [pc, #560]	@ (8009718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094e8:	4a8b      	ldr	r2, [pc, #556]	@ (8009718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80094f0:	e00f      	b.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094f6:	3308      	adds	r3, #8
 80094f8:	2101      	movs	r1, #1
 80094fa:	4618      	mov	r0, r3
 80094fc:	f002 f81e 	bl	800b53c <RCCEx_PLL2_Config>
 8009500:	4603      	mov	r3, r0
 8009502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009506:	e004      	b.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800950e:	e000      	b.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009516:	2b00      	cmp	r3, #0
 8009518:	d10a      	bne.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800951a:	4b7f      	ldr	r3, [pc, #508]	@ (8009718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800951c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800951e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009528:	4a7b      	ldr	r2, [pc, #492]	@ (8009718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800952a:	430b      	orrs	r3, r1
 800952c:	6513      	str	r3, [r2, #80]	@ 0x50
 800952e:	e003      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009530:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009534:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800953c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009540:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009544:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009548:	2300      	movs	r3, #0
 800954a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800954e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009552:	460b      	mov	r3, r1
 8009554:	4313      	orrs	r3, r2
 8009556:	d039      	beq.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800955c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800955e:	2b03      	cmp	r3, #3
 8009560:	d81c      	bhi.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009562:	a201      	add	r2, pc, #4	@ (adr r2, 8009568 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009568:	080095a5 	.word	0x080095a5
 800956c:	08009579 	.word	0x08009579
 8009570:	08009587 	.word	0x08009587
 8009574:	080095a5 	.word	0x080095a5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009578:	4b67      	ldr	r3, [pc, #412]	@ (8009718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800957a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800957c:	4a66      	ldr	r2, [pc, #408]	@ (8009718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800957e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009582:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009584:	e00f      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800958a:	3308      	adds	r3, #8
 800958c:	2102      	movs	r1, #2
 800958e:	4618      	mov	r0, r3
 8009590:	f001 ffd4 	bl	800b53c <RCCEx_PLL2_Config>
 8009594:	4603      	mov	r3, r0
 8009596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800959a:	e004      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095a2:	e000      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80095a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d10a      	bne.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80095ae:	4b5a      	ldr	r3, [pc, #360]	@ (8009718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095b2:	f023 0103 	bic.w	r1, r3, #3
 80095b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095bc:	4a56      	ldr	r2, [pc, #344]	@ (8009718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095be:	430b      	orrs	r3, r1
 80095c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80095c2:	e003      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80095cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80095d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80095dc:	2300      	movs	r3, #0
 80095de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80095e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80095e6:	460b      	mov	r3, r1
 80095e8:	4313      	orrs	r3, r2
 80095ea:	f000 809f 	beq.w	800972c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80095ee:	4b4b      	ldr	r3, [pc, #300]	@ (800971c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a4a      	ldr	r2, [pc, #296]	@ (800971c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80095f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80095f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80095fa:	f7f9 ff65 	bl	80034c8 <HAL_GetTick>
 80095fe:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009602:	e00b      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009604:	f7f9 ff60 	bl	80034c8 <HAL_GetTick>
 8009608:	4602      	mov	r2, r0
 800960a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	2b64      	cmp	r3, #100	@ 0x64
 8009612:	d903      	bls.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009614:	2303      	movs	r3, #3
 8009616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800961a:	e005      	b.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800961c:	4b3f      	ldr	r3, [pc, #252]	@ (800971c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009624:	2b00      	cmp	r3, #0
 8009626:	d0ed      	beq.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009628:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800962c:	2b00      	cmp	r3, #0
 800962e:	d179      	bne.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009630:	4b39      	ldr	r3, [pc, #228]	@ (8009718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009632:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009638:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800963c:	4053      	eors	r3, r2
 800963e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009642:	2b00      	cmp	r3, #0
 8009644:	d015      	beq.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009646:	4b34      	ldr	r3, [pc, #208]	@ (8009718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800964a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800964e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009652:	4b31      	ldr	r3, [pc, #196]	@ (8009718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009656:	4a30      	ldr	r2, [pc, #192]	@ (8009718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800965c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800965e:	4b2e      	ldr	r3, [pc, #184]	@ (8009718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009662:	4a2d      	ldr	r2, [pc, #180]	@ (8009718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009664:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009668:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800966a:	4a2b      	ldr	r2, [pc, #172]	@ (8009718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800966c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009670:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009676:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800967a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800967e:	d118      	bne.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009680:	f7f9 ff22 	bl	80034c8 <HAL_GetTick>
 8009684:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009688:	e00d      	b.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800968a:	f7f9 ff1d 	bl	80034c8 <HAL_GetTick>
 800968e:	4602      	mov	r2, r0
 8009690:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009694:	1ad2      	subs	r2, r2, r3
 8009696:	f241 3388 	movw	r3, #5000	@ 0x1388
 800969a:	429a      	cmp	r2, r3
 800969c:	d903      	bls.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800969e:	2303      	movs	r3, #3
 80096a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80096a4:	e005      	b.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096a6:	4b1c      	ldr	r3, [pc, #112]	@ (8009718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096aa:	f003 0302 	and.w	r3, r3, #2
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d0eb      	beq.n	800968a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80096b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d129      	bne.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80096ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80096c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80096c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80096ca:	d10e      	bne.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80096cc:	4b12      	ldr	r3, [pc, #72]	@ (8009718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80096d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80096dc:	091a      	lsrs	r2, r3, #4
 80096de:	4b10      	ldr	r3, [pc, #64]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80096e0:	4013      	ands	r3, r2
 80096e2:	4a0d      	ldr	r2, [pc, #52]	@ (8009718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096e4:	430b      	orrs	r3, r1
 80096e6:	6113      	str	r3, [r2, #16]
 80096e8:	e005      	b.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80096ea:	4b0b      	ldr	r3, [pc, #44]	@ (8009718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096ec:	691b      	ldr	r3, [r3, #16]
 80096ee:	4a0a      	ldr	r2, [pc, #40]	@ (8009718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80096f4:	6113      	str	r3, [r2, #16]
 80096f6:	4b08      	ldr	r3, [pc, #32]	@ (8009718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096f8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80096fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009702:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009706:	4a04      	ldr	r2, [pc, #16]	@ (8009718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009708:	430b      	orrs	r3, r1
 800970a:	6713      	str	r3, [r2, #112]	@ 0x70
 800970c:	e00e      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800970e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009712:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8009716:	e009      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009718:	58024400 	.word	0x58024400
 800971c:	58024800 	.word	0x58024800
 8009720:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009724:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009728:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800972c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009734:	f002 0301 	and.w	r3, r2, #1
 8009738:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800973c:	2300      	movs	r3, #0
 800973e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009742:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009746:	460b      	mov	r3, r1
 8009748:	4313      	orrs	r3, r2
 800974a:	f000 8089 	beq.w	8009860 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800974e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009752:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009754:	2b28      	cmp	r3, #40	@ 0x28
 8009756:	d86b      	bhi.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009758:	a201      	add	r2, pc, #4	@ (adr r2, 8009760 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800975a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800975e:	bf00      	nop
 8009760:	08009839 	.word	0x08009839
 8009764:	08009831 	.word	0x08009831
 8009768:	08009831 	.word	0x08009831
 800976c:	08009831 	.word	0x08009831
 8009770:	08009831 	.word	0x08009831
 8009774:	08009831 	.word	0x08009831
 8009778:	08009831 	.word	0x08009831
 800977c:	08009831 	.word	0x08009831
 8009780:	08009805 	.word	0x08009805
 8009784:	08009831 	.word	0x08009831
 8009788:	08009831 	.word	0x08009831
 800978c:	08009831 	.word	0x08009831
 8009790:	08009831 	.word	0x08009831
 8009794:	08009831 	.word	0x08009831
 8009798:	08009831 	.word	0x08009831
 800979c:	08009831 	.word	0x08009831
 80097a0:	0800981b 	.word	0x0800981b
 80097a4:	08009831 	.word	0x08009831
 80097a8:	08009831 	.word	0x08009831
 80097ac:	08009831 	.word	0x08009831
 80097b0:	08009831 	.word	0x08009831
 80097b4:	08009831 	.word	0x08009831
 80097b8:	08009831 	.word	0x08009831
 80097bc:	08009831 	.word	0x08009831
 80097c0:	08009839 	.word	0x08009839
 80097c4:	08009831 	.word	0x08009831
 80097c8:	08009831 	.word	0x08009831
 80097cc:	08009831 	.word	0x08009831
 80097d0:	08009831 	.word	0x08009831
 80097d4:	08009831 	.word	0x08009831
 80097d8:	08009831 	.word	0x08009831
 80097dc:	08009831 	.word	0x08009831
 80097e0:	08009839 	.word	0x08009839
 80097e4:	08009831 	.word	0x08009831
 80097e8:	08009831 	.word	0x08009831
 80097ec:	08009831 	.word	0x08009831
 80097f0:	08009831 	.word	0x08009831
 80097f4:	08009831 	.word	0x08009831
 80097f8:	08009831 	.word	0x08009831
 80097fc:	08009831 	.word	0x08009831
 8009800:	08009839 	.word	0x08009839
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009808:	3308      	adds	r3, #8
 800980a:	2101      	movs	r1, #1
 800980c:	4618      	mov	r0, r3
 800980e:	f001 fe95 	bl	800b53c <RCCEx_PLL2_Config>
 8009812:	4603      	mov	r3, r0
 8009814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009818:	e00f      	b.n	800983a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800981a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800981e:	3328      	adds	r3, #40	@ 0x28
 8009820:	2101      	movs	r1, #1
 8009822:	4618      	mov	r0, r3
 8009824:	f001 ff3c 	bl	800b6a0 <RCCEx_PLL3_Config>
 8009828:	4603      	mov	r3, r0
 800982a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800982e:	e004      	b.n	800983a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009836:	e000      	b.n	800983a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800983a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800983e:	2b00      	cmp	r3, #0
 8009840:	d10a      	bne.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009842:	4bbf      	ldr	r3, [pc, #764]	@ (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009846:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800984a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800984e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009850:	4abb      	ldr	r2, [pc, #748]	@ (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009852:	430b      	orrs	r3, r1
 8009854:	6553      	str	r3, [r2, #84]	@ 0x54
 8009856:	e003      	b.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009858:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800985c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009868:	f002 0302 	and.w	r3, r2, #2
 800986c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009870:	2300      	movs	r3, #0
 8009872:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009876:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800987a:	460b      	mov	r3, r1
 800987c:	4313      	orrs	r3, r2
 800987e:	d041      	beq.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009884:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009886:	2b05      	cmp	r3, #5
 8009888:	d824      	bhi.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800988a:	a201      	add	r2, pc, #4	@ (adr r2, 8009890 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800988c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009890:	080098dd 	.word	0x080098dd
 8009894:	080098a9 	.word	0x080098a9
 8009898:	080098bf 	.word	0x080098bf
 800989c:	080098dd 	.word	0x080098dd
 80098a0:	080098dd 	.word	0x080098dd
 80098a4:	080098dd 	.word	0x080098dd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80098a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098ac:	3308      	adds	r3, #8
 80098ae:	2101      	movs	r1, #1
 80098b0:	4618      	mov	r0, r3
 80098b2:	f001 fe43 	bl	800b53c <RCCEx_PLL2_Config>
 80098b6:	4603      	mov	r3, r0
 80098b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80098bc:	e00f      	b.n	80098de <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098c2:	3328      	adds	r3, #40	@ 0x28
 80098c4:	2101      	movs	r1, #1
 80098c6:	4618      	mov	r0, r3
 80098c8:	f001 feea 	bl	800b6a0 <RCCEx_PLL3_Config>
 80098cc:	4603      	mov	r3, r0
 80098ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80098d2:	e004      	b.n	80098de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80098da:	e000      	b.n	80098de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80098dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d10a      	bne.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80098e6:	4b96      	ldr	r3, [pc, #600]	@ (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80098e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ea:	f023 0107 	bic.w	r1, r3, #7
 80098ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098f4:	4a92      	ldr	r2, [pc, #584]	@ (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80098f6:	430b      	orrs	r3, r1
 80098f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80098fa:	e003      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009900:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990c:	f002 0304 	and.w	r3, r2, #4
 8009910:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009914:	2300      	movs	r3, #0
 8009916:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800991a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800991e:	460b      	mov	r3, r1
 8009920:	4313      	orrs	r3, r2
 8009922:	d044      	beq.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009928:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800992c:	2b05      	cmp	r3, #5
 800992e:	d825      	bhi.n	800997c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009930:	a201      	add	r2, pc, #4	@ (adr r2, 8009938 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009936:	bf00      	nop
 8009938:	08009985 	.word	0x08009985
 800993c:	08009951 	.word	0x08009951
 8009940:	08009967 	.word	0x08009967
 8009944:	08009985 	.word	0x08009985
 8009948:	08009985 	.word	0x08009985
 800994c:	08009985 	.word	0x08009985
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009954:	3308      	adds	r3, #8
 8009956:	2101      	movs	r1, #1
 8009958:	4618      	mov	r0, r3
 800995a:	f001 fdef 	bl	800b53c <RCCEx_PLL2_Config>
 800995e:	4603      	mov	r3, r0
 8009960:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009964:	e00f      	b.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800996a:	3328      	adds	r3, #40	@ 0x28
 800996c:	2101      	movs	r1, #1
 800996e:	4618      	mov	r0, r3
 8009970:	f001 fe96 	bl	800b6a0 <RCCEx_PLL3_Config>
 8009974:	4603      	mov	r3, r0
 8009976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800997a:	e004      	b.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800997c:	2301      	movs	r3, #1
 800997e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009982:	e000      	b.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009984:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800998a:	2b00      	cmp	r3, #0
 800998c:	d10b      	bne.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800998e:	4b6c      	ldr	r3, [pc, #432]	@ (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009992:	f023 0107 	bic.w	r1, r3, #7
 8009996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800999a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800999e:	4a68      	ldr	r2, [pc, #416]	@ (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80099a0:	430b      	orrs	r3, r1
 80099a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80099a4:	e003      	b.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80099ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b6:	f002 0320 	and.w	r3, r2, #32
 80099ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80099be:	2300      	movs	r3, #0
 80099c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80099c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80099c8:	460b      	mov	r3, r1
 80099ca:	4313      	orrs	r3, r2
 80099cc:	d055      	beq.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80099ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099da:	d033      	beq.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80099dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099e0:	d82c      	bhi.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80099e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099e6:	d02f      	beq.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80099e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099ec:	d826      	bhi.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80099ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80099f2:	d02b      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80099f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80099f8:	d820      	bhi.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80099fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099fe:	d012      	beq.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009a00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a04:	d81a      	bhi.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d022      	beq.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009a0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a0e:	d115      	bne.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a14:	3308      	adds	r3, #8
 8009a16:	2100      	movs	r1, #0
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f001 fd8f 	bl	800b53c <RCCEx_PLL2_Config>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009a24:	e015      	b.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a2a:	3328      	adds	r3, #40	@ 0x28
 8009a2c:	2102      	movs	r1, #2
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f001 fe36 	bl	800b6a0 <RCCEx_PLL3_Config>
 8009a34:	4603      	mov	r3, r0
 8009a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009a3a:	e00a      	b.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a42:	e006      	b.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a44:	bf00      	nop
 8009a46:	e004      	b.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a48:	bf00      	nop
 8009a4a:	e002      	b.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a4c:	bf00      	nop
 8009a4e:	e000      	b.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d10b      	bne.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009a5a:	4b39      	ldr	r3, [pc, #228]	@ (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a5e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a6a:	4a35      	ldr	r2, [pc, #212]	@ (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a6c:	430b      	orrs	r3, r1
 8009a6e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009a70:	e003      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a82:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009a86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009a90:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009a94:	460b      	mov	r3, r1
 8009a96:	4313      	orrs	r3, r2
 8009a98:	d058      	beq.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009aa2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009aa6:	d033      	beq.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009aa8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009aac:	d82c      	bhi.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009aae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ab2:	d02f      	beq.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009ab4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ab8:	d826      	bhi.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009aba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009abe:	d02b      	beq.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009ac0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ac4:	d820      	bhi.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009ac6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009aca:	d012      	beq.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009acc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ad0:	d81a      	bhi.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d022      	beq.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009ad6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ada:	d115      	bne.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ae0:	3308      	adds	r3, #8
 8009ae2:	2100      	movs	r1, #0
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f001 fd29 	bl	800b53c <RCCEx_PLL2_Config>
 8009aea:	4603      	mov	r3, r0
 8009aec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009af0:	e015      	b.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009af6:	3328      	adds	r3, #40	@ 0x28
 8009af8:	2102      	movs	r1, #2
 8009afa:	4618      	mov	r0, r3
 8009afc:	f001 fdd0 	bl	800b6a0 <RCCEx_PLL3_Config>
 8009b00:	4603      	mov	r3, r0
 8009b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009b06:	e00a      	b.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b0e:	e006      	b.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b10:	bf00      	nop
 8009b12:	e004      	b.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b14:	bf00      	nop
 8009b16:	e002      	b.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b18:	bf00      	nop
 8009b1a:	e000      	b.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d10e      	bne.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009b26:	4b06      	ldr	r3, [pc, #24]	@ (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b2a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009b36:	4a02      	ldr	r2, [pc, #8]	@ (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b38:	430b      	orrs	r3, r1
 8009b3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b3c:	e006      	b.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009b3e:	bf00      	nop
 8009b40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b54:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009b58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009b62:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009b66:	460b      	mov	r3, r1
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	d055      	beq.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009b74:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009b78:	d033      	beq.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009b7a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009b7e:	d82c      	bhi.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009b80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b84:	d02f      	beq.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009b86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b8a:	d826      	bhi.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009b8c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009b90:	d02b      	beq.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009b92:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009b96:	d820      	bhi.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009b98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b9c:	d012      	beq.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009b9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ba2:	d81a      	bhi.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d022      	beq.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009ba8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bac:	d115      	bne.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bb2:	3308      	adds	r3, #8
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f001 fcc0 	bl	800b53c <RCCEx_PLL2_Config>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009bc2:	e015      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bc8:	3328      	adds	r3, #40	@ 0x28
 8009bca:	2102      	movs	r1, #2
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f001 fd67 	bl	800b6a0 <RCCEx_PLL3_Config>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009bd8:	e00a      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009be0:	e006      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009be2:	bf00      	nop
 8009be4:	e004      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009be6:	bf00      	nop
 8009be8:	e002      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009bea:	bf00      	nop
 8009bec:	e000      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009bee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d10b      	bne.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009bf8:	4ba1      	ldr	r3, [pc, #644]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bfc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009c08:	4a9d      	ldr	r2, [pc, #628]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c0a:	430b      	orrs	r3, r1
 8009c0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c0e:	e003      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c20:	f002 0308 	and.w	r3, r2, #8
 8009c24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009c28:	2300      	movs	r3, #0
 8009c2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009c2e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009c32:	460b      	mov	r3, r1
 8009c34:	4313      	orrs	r3, r2
 8009c36:	d01e      	beq.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c44:	d10c      	bne.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c4a:	3328      	adds	r3, #40	@ 0x28
 8009c4c:	2102      	movs	r1, #2
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f001 fd26 	bl	800b6a0 <RCCEx_PLL3_Config>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d002      	beq.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009c60:	4b87      	ldr	r3, [pc, #540]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c64:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c70:	4a83      	ldr	r2, [pc, #524]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c72:	430b      	orrs	r3, r1
 8009c74:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7e:	f002 0310 	and.w	r3, r2, #16
 8009c82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009c86:	2300      	movs	r3, #0
 8009c88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009c8c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009c90:	460b      	mov	r3, r1
 8009c92:	4313      	orrs	r3, r2
 8009c94:	d01e      	beq.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009c9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ca2:	d10c      	bne.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ca8:	3328      	adds	r3, #40	@ 0x28
 8009caa:	2102      	movs	r1, #2
 8009cac:	4618      	mov	r0, r3
 8009cae:	f001 fcf7 	bl	800b6a0 <RCCEx_PLL3_Config>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d002      	beq.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009cbe:	4b70      	ldr	r3, [pc, #448]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cc2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009cce:	4a6c      	ldr	r2, [pc, #432]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009cd0:	430b      	orrs	r3, r1
 8009cd2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cdc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009ce0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009cea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009cee:	460b      	mov	r3, r1
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	d03e      	beq.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cf8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009cfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d00:	d022      	beq.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009d02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d06:	d81b      	bhi.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d003      	beq.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d10:	d00b      	beq.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009d12:	e015      	b.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d18:	3308      	adds	r3, #8
 8009d1a:	2100      	movs	r1, #0
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f001 fc0d 	bl	800b53c <RCCEx_PLL2_Config>
 8009d22:	4603      	mov	r3, r0
 8009d24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009d28:	e00f      	b.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d2e:	3328      	adds	r3, #40	@ 0x28
 8009d30:	2102      	movs	r1, #2
 8009d32:	4618      	mov	r0, r3
 8009d34:	f001 fcb4 	bl	800b6a0 <RCCEx_PLL3_Config>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009d3e:	e004      	b.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d40:	2301      	movs	r3, #1
 8009d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d46:	e000      	b.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009d48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d10b      	bne.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009d52:	4b4b      	ldr	r3, [pc, #300]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d56:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d62:	4a47      	ldr	r2, [pc, #284]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d64:	430b      	orrs	r3, r1
 8009d66:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d68:	e003      	b.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009d7e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009d80:	2300      	movs	r3, #0
 8009d82:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009d84:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009d88:	460b      	mov	r3, r1
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	d03b      	beq.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009d9a:	d01f      	beq.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009d9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009da0:	d818      	bhi.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009da2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009da6:	d003      	beq.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009da8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009dac:	d007      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009dae:	e011      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009db0:	4b33      	ldr	r3, [pc, #204]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009db4:	4a32      	ldr	r2, [pc, #200]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009db6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009dba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009dbc:	e00f      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dc2:	3328      	adds	r3, #40	@ 0x28
 8009dc4:	2101      	movs	r1, #1
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f001 fc6a 	bl	800b6a0 <RCCEx_PLL3_Config>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009dd2:	e004      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009dda:	e000      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d10b      	bne.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009de6:	4b26      	ldr	r3, [pc, #152]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009df6:	4a22      	ldr	r2, [pc, #136]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009df8:	430b      	orrs	r3, r1
 8009dfa:	6553      	str	r3, [r2, #84]	@ 0x54
 8009dfc:	e003      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009e12:	673b      	str	r3, [r7, #112]	@ 0x70
 8009e14:	2300      	movs	r3, #0
 8009e16:	677b      	str	r3, [r7, #116]	@ 0x74
 8009e18:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	d034      	beq.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d003      	beq.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e30:	d007      	beq.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009e32:	e011      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e34:	4b12      	ldr	r3, [pc, #72]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e38:	4a11      	ldr	r2, [pc, #68]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009e40:	e00e      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e46:	3308      	adds	r3, #8
 8009e48:	2102      	movs	r1, #2
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f001 fb76 	bl	800b53c <RCCEx_PLL2_Config>
 8009e50:	4603      	mov	r3, r0
 8009e52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009e56:	e003      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10d      	bne.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009e68:	4b05      	ldr	r3, [pc, #20]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e6c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e76:	4a02      	ldr	r2, [pc, #8]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e78:	430b      	orrs	r3, r1
 8009e7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009e7c:	e006      	b.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009e7e:	bf00      	nop
 8009e80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e94:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009e98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009e9e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	d00c      	beq.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eac:	3328      	adds	r3, #40	@ 0x28
 8009eae:	2102      	movs	r1, #2
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f001 fbf5 	bl	800b6a0 <RCCEx_PLL3_Config>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d002      	beq.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009ece:	663b      	str	r3, [r7, #96]	@ 0x60
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	667b      	str	r3, [r7, #100]	@ 0x64
 8009ed4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009ed8:	460b      	mov	r3, r1
 8009eda:	4313      	orrs	r3, r2
 8009edc:	d038      	beq.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ee6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009eea:	d018      	beq.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009eec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ef0:	d811      	bhi.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009ef2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ef6:	d014      	beq.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009ef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009efc:	d80b      	bhi.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d011      	beq.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009f02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f06:	d106      	bne.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f08:	4bc3      	ldr	r3, [pc, #780]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f0c:	4ac2      	ldr	r2, [pc, #776]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009f14:	e008      	b.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f16:	2301      	movs	r3, #1
 8009f18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f1c:	e004      	b.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009f1e:	bf00      	nop
 8009f20:	e002      	b.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009f22:	bf00      	nop
 8009f24:	e000      	b.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009f26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d10b      	bne.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009f30:	4bb9      	ldr	r3, [pc, #740]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f34:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f40:	4ab5      	ldr	r2, [pc, #724]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f42:	430b      	orrs	r3, r1
 8009f44:	6553      	str	r3, [r2, #84]	@ 0x54
 8009f46:	e003      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f58:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009f5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f5e:	2300      	movs	r3, #0
 8009f60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f62:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009f66:	460b      	mov	r3, r1
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	d009      	beq.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009f6c:	4baa      	ldr	r3, [pc, #680]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f7a:	4aa7      	ldr	r2, [pc, #668]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f7c:	430b      	orrs	r3, r1
 8009f7e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f88:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009f8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f8e:	2300      	movs	r3, #0
 8009f90:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f92:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009f96:	460b      	mov	r3, r1
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	d00a      	beq.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009f9c:	4b9e      	ldr	r3, [pc, #632]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fa8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009fac:	4a9a      	ldr	r2, [pc, #616]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fae:	430b      	orrs	r3, r1
 8009fb0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fba:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009fc4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009fc8:	460b      	mov	r3, r1
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	d009      	beq.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009fce:	4b92      	ldr	r3, [pc, #584]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fd2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fdc:	4a8e      	ldr	r2, [pc, #568]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fde:	430b      	orrs	r3, r1
 8009fe0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fea:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009fee:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ff4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	d00e      	beq.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009ffe:	4b86      	ldr	r3, [pc, #536]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	4a85      	ldr	r2, [pc, #532]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a004:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a008:	6113      	str	r3, [r2, #16]
 800a00a:	4b83      	ldr	r3, [pc, #524]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a00c:	6919      	ldr	r1, [r3, #16]
 800a00e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a012:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a016:	4a80      	ldr	r2, [pc, #512]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a018:	430b      	orrs	r3, r1
 800a01a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a01c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a024:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a028:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a02a:	2300      	movs	r3, #0
 800a02c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a02e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a032:	460b      	mov	r3, r1
 800a034:	4313      	orrs	r3, r2
 800a036:	d009      	beq.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a038:	4b77      	ldr	r3, [pc, #476]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a03a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a03c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a046:	4a74      	ldr	r2, [pc, #464]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a048:	430b      	orrs	r3, r1
 800a04a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a04c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a054:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a058:	633b      	str	r3, [r7, #48]	@ 0x30
 800a05a:	2300      	movs	r3, #0
 800a05c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a05e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a062:	460b      	mov	r3, r1
 800a064:	4313      	orrs	r3, r2
 800a066:	d00a      	beq.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a068:	4b6b      	ldr	r3, [pc, #428]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a06a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a06c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a074:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a078:	4a67      	ldr	r2, [pc, #412]	@ (800a218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a07a:	430b      	orrs	r3, r1
 800a07c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a07e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a086:	2100      	movs	r1, #0
 800a088:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a08a:	f003 0301 	and.w	r3, r3, #1
 800a08e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a090:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a094:	460b      	mov	r3, r1
 800a096:	4313      	orrs	r3, r2
 800a098:	d011      	beq.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a09a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a09e:	3308      	adds	r3, #8
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f001 fa4a 	bl	800b53c <RCCEx_PLL2_Config>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a0ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d003      	beq.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a0be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c6:	2100      	movs	r1, #0
 800a0c8:	6239      	str	r1, [r7, #32]
 800a0ca:	f003 0302 	and.w	r3, r3, #2
 800a0ce:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0d0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	d011      	beq.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0de:	3308      	adds	r3, #8
 800a0e0:	2101      	movs	r1, #1
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f001 fa2a 	bl	800b53c <RCCEx_PLL2_Config>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a0ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d003      	beq.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a0fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a106:	2100      	movs	r1, #0
 800a108:	61b9      	str	r1, [r7, #24]
 800a10a:	f003 0304 	and.w	r3, r3, #4
 800a10e:	61fb      	str	r3, [r7, #28]
 800a110:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a114:	460b      	mov	r3, r1
 800a116:	4313      	orrs	r3, r2
 800a118:	d011      	beq.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a11a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a11e:	3308      	adds	r3, #8
 800a120:	2102      	movs	r1, #2
 800a122:	4618      	mov	r0, r3
 800a124:	f001 fa0a 	bl	800b53c <RCCEx_PLL2_Config>
 800a128:	4603      	mov	r3, r0
 800a12a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a12e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a132:	2b00      	cmp	r3, #0
 800a134:	d003      	beq.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a136:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a13a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a13e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a146:	2100      	movs	r1, #0
 800a148:	6139      	str	r1, [r7, #16]
 800a14a:	f003 0308 	and.w	r3, r3, #8
 800a14e:	617b      	str	r3, [r7, #20]
 800a150:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a154:	460b      	mov	r3, r1
 800a156:	4313      	orrs	r3, r2
 800a158:	d011      	beq.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a15e:	3328      	adds	r3, #40	@ 0x28
 800a160:	2100      	movs	r1, #0
 800a162:	4618      	mov	r0, r3
 800a164:	f001 fa9c 	bl	800b6a0 <RCCEx_PLL3_Config>
 800a168:	4603      	mov	r3, r0
 800a16a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a16e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a172:	2b00      	cmp	r3, #0
 800a174:	d003      	beq.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a17a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a17e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a186:	2100      	movs	r1, #0
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	f003 0310 	and.w	r3, r3, #16
 800a18e:	60fb      	str	r3, [r7, #12]
 800a190:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a194:	460b      	mov	r3, r1
 800a196:	4313      	orrs	r3, r2
 800a198:	d011      	beq.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a19a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a19e:	3328      	adds	r3, #40	@ 0x28
 800a1a0:	2101      	movs	r1, #1
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f001 fa7c 	bl	800b6a0 <RCCEx_PLL3_Config>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a1ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d003      	beq.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a1be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	6039      	str	r1, [r7, #0]
 800a1ca:	f003 0320 	and.w	r3, r3, #32
 800a1ce:	607b      	str	r3, [r7, #4]
 800a1d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	d011      	beq.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a1da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1de:	3328      	adds	r3, #40	@ 0x28
 800a1e0:	2102      	movs	r1, #2
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f001 fa5c 	bl	800b6a0 <RCCEx_PLL3_Config>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a1ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d003      	beq.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a1fe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a202:	2b00      	cmp	r3, #0
 800a204:	d101      	bne.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a206:	2300      	movs	r3, #0
 800a208:	e000      	b.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a212:	46bd      	mov	sp, r7
 800a214:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a218:	58024400 	.word	0x58024400

0800a21c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b090      	sub	sp, #64	@ 0x40
 800a220:	af00      	add	r7, sp, #0
 800a222:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a226:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a22a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a22e:	430b      	orrs	r3, r1
 800a230:	f040 8094 	bne.w	800a35c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a234:	4b9e      	ldr	r3, [pc, #632]	@ (800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a238:	f003 0307 	and.w	r3, r3, #7
 800a23c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a23e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a240:	2b04      	cmp	r3, #4
 800a242:	f200 8087 	bhi.w	800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a246:	a201      	add	r2, pc, #4	@ (adr r2, 800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a24c:	0800a261 	.word	0x0800a261
 800a250:	0800a289 	.word	0x0800a289
 800a254:	0800a2b1 	.word	0x0800a2b1
 800a258:	0800a34d 	.word	0x0800a34d
 800a25c:	0800a2d9 	.word	0x0800a2d9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a260:	4b93      	ldr	r3, [pc, #588]	@ (800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a268:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a26c:	d108      	bne.n	800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a26e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a272:	4618      	mov	r0, r3
 800a274:	f001 f810 	bl	800b298 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a27a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a27c:	f000 bd45 	b.w	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a280:	2300      	movs	r3, #0
 800a282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a284:	f000 bd41 	b.w	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a288:	4b89      	ldr	r3, [pc, #548]	@ (800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a290:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a294:	d108      	bne.n	800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a296:	f107 0318 	add.w	r3, r7, #24
 800a29a:	4618      	mov	r0, r3
 800a29c:	f000 fd54 	bl	800ad48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2a4:	f000 bd31 	b.w	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2ac:	f000 bd2d 	b.w	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a2b0:	4b7f      	ldr	r3, [pc, #508]	@ (800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2bc:	d108      	bne.n	800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2be:	f107 030c 	add.w	r3, r7, #12
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f000 fe94 	bl	800aff0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2cc:	f000 bd1d 	b.w	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2d4:	f000 bd19 	b.w	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a2d8:	4b75      	ldr	r3, [pc, #468]	@ (800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a2e0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a2e2:	4b73      	ldr	r3, [pc, #460]	@ (800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f003 0304 	and.w	r3, r3, #4
 800a2ea:	2b04      	cmp	r3, #4
 800a2ec:	d10c      	bne.n	800a308 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a2ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d109      	bne.n	800a308 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2f4:	4b6e      	ldr	r3, [pc, #440]	@ (800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	08db      	lsrs	r3, r3, #3
 800a2fa:	f003 0303 	and.w	r3, r3, #3
 800a2fe:	4a6d      	ldr	r2, [pc, #436]	@ (800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a300:	fa22 f303 	lsr.w	r3, r2, r3
 800a304:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a306:	e01f      	b.n	800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a308:	4b69      	ldr	r3, [pc, #420]	@ (800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a310:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a314:	d106      	bne.n	800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a318:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a31c:	d102      	bne.n	800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a31e:	4b66      	ldr	r3, [pc, #408]	@ (800a4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a320:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a322:	e011      	b.n	800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a324:	4b62      	ldr	r3, [pc, #392]	@ (800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a32c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a330:	d106      	bne.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a334:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a338:	d102      	bne.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a33a:	4b60      	ldr	r3, [pc, #384]	@ (800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a33c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a33e:	e003      	b.n	800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a340:	2300      	movs	r3, #0
 800a342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a344:	f000 bce1 	b.w	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a348:	f000 bcdf 	b.w	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a34c:	4b5c      	ldr	r3, [pc, #368]	@ (800a4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a34e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a350:	f000 bcdb 	b.w	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a354:	2300      	movs	r3, #0
 800a356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a358:	f000 bcd7 	b.w	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a35c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a360:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a364:	430b      	orrs	r3, r1
 800a366:	f040 80ad 	bne.w	800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a36a:	4b51      	ldr	r3, [pc, #324]	@ (800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a36c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a36e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a372:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a376:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a37a:	d056      	beq.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a37c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a37e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a382:	f200 8090 	bhi.w	800a4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a388:	2bc0      	cmp	r3, #192	@ 0xc0
 800a38a:	f000 8088 	beq.w	800a49e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a390:	2bc0      	cmp	r3, #192	@ 0xc0
 800a392:	f200 8088 	bhi.w	800a4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a398:	2b80      	cmp	r3, #128	@ 0x80
 800a39a:	d032      	beq.n	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a39e:	2b80      	cmp	r3, #128	@ 0x80
 800a3a0:	f200 8081 	bhi.w	800a4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d003      	beq.n	800a3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ac:	2b40      	cmp	r3, #64	@ 0x40
 800a3ae:	d014      	beq.n	800a3da <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a3b0:	e079      	b.n	800a4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a3b2:	4b3f      	ldr	r3, [pc, #252]	@ (800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a3be:	d108      	bne.n	800a3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f000 ff67 	bl	800b298 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3ce:	f000 bc9c 	b.w	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3d6:	f000 bc98 	b.w	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3da:	4b35      	ldr	r3, [pc, #212]	@ (800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a3e6:	d108      	bne.n	800a3fa <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3e8:	f107 0318 	add.w	r3, r7, #24
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f000 fcab 	bl	800ad48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a3f2:	69bb      	ldr	r3, [r7, #24]
 800a3f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3f6:	f000 bc88 	b.w	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3fe:	f000 bc84 	b.w	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a402:	4b2b      	ldr	r3, [pc, #172]	@ (800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a40a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a40e:	d108      	bne.n	800a422 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a410:	f107 030c 	add.w	r3, r7, #12
 800a414:	4618      	mov	r0, r3
 800a416:	f000 fdeb 	bl	800aff0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a41e:	f000 bc74 	b.w	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a422:	2300      	movs	r3, #0
 800a424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a426:	f000 bc70 	b.w	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a42a:	4b21      	ldr	r3, [pc, #132]	@ (800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a42c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a42e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a432:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a434:	4b1e      	ldr	r3, [pc, #120]	@ (800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f003 0304 	and.w	r3, r3, #4
 800a43c:	2b04      	cmp	r3, #4
 800a43e:	d10c      	bne.n	800a45a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a442:	2b00      	cmp	r3, #0
 800a444:	d109      	bne.n	800a45a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a446:	4b1a      	ldr	r3, [pc, #104]	@ (800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	08db      	lsrs	r3, r3, #3
 800a44c:	f003 0303 	and.w	r3, r3, #3
 800a450:	4a18      	ldr	r2, [pc, #96]	@ (800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a452:	fa22 f303 	lsr.w	r3, r2, r3
 800a456:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a458:	e01f      	b.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a45a:	4b15      	ldr	r3, [pc, #84]	@ (800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a462:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a466:	d106      	bne.n	800a476 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a46a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a46e:	d102      	bne.n	800a476 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a470:	4b11      	ldr	r3, [pc, #68]	@ (800a4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a472:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a474:	e011      	b.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a476:	4b0e      	ldr	r3, [pc, #56]	@ (800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a47e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a482:	d106      	bne.n	800a492 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a486:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a48a:	d102      	bne.n	800a492 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a48c:	4b0b      	ldr	r3, [pc, #44]	@ (800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a48e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a490:	e003      	b.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a492:	2300      	movs	r3, #0
 800a494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a496:	f000 bc38 	b.w	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a49a:	f000 bc36 	b.w	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a49e:	4b08      	ldr	r3, [pc, #32]	@ (800a4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a4a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4a2:	f000 bc32 	b.w	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4aa:	f000 bc2e 	b.w	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a4ae:	bf00      	nop
 800a4b0:	58024400 	.word	0x58024400
 800a4b4:	03d09000 	.word	0x03d09000
 800a4b8:	003d0900 	.word	0x003d0900
 800a4bc:	007a1200 	.word	0x007a1200
 800a4c0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a4c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4c8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a4cc:	430b      	orrs	r3, r1
 800a4ce:	f040 809c 	bne.w	800a60a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a4d2:	4b9e      	ldr	r3, [pc, #632]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4d6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a4da:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a4e2:	d054      	beq.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a4e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a4ea:	f200 808b 	bhi.w	800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a4ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a4f4:	f000 8083 	beq.w	800a5fe <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a4f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4fa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a4fe:	f200 8081 	bhi.w	800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a504:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a508:	d02f      	beq.n	800a56a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a50c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a510:	d878      	bhi.n	800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a514:	2b00      	cmp	r3, #0
 800a516:	d004      	beq.n	800a522 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a51a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a51e:	d012      	beq.n	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a520:	e070      	b.n	800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a522:	4b8a      	ldr	r3, [pc, #552]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a52a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a52e:	d107      	bne.n	800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a530:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a534:	4618      	mov	r0, r3
 800a536:	f000 feaf 	bl	800b298 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a53a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a53c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a53e:	e3e4      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a540:	2300      	movs	r3, #0
 800a542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a544:	e3e1      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a546:	4b81      	ldr	r3, [pc, #516]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a54e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a552:	d107      	bne.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a554:	f107 0318 	add.w	r3, r7, #24
 800a558:	4618      	mov	r0, r3
 800a55a:	f000 fbf5 	bl	800ad48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a562:	e3d2      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a564:	2300      	movs	r3, #0
 800a566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a568:	e3cf      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a56a:	4b78      	ldr	r3, [pc, #480]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a572:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a576:	d107      	bne.n	800a588 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a578:	f107 030c 	add.w	r3, r7, #12
 800a57c:	4618      	mov	r0, r3
 800a57e:	f000 fd37 	bl	800aff0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a586:	e3c0      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a588:	2300      	movs	r3, #0
 800a58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a58c:	e3bd      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a58e:	4b6f      	ldr	r3, [pc, #444]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a592:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a596:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a598:	4b6c      	ldr	r3, [pc, #432]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f003 0304 	and.w	r3, r3, #4
 800a5a0:	2b04      	cmp	r3, #4
 800a5a2:	d10c      	bne.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a5a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d109      	bne.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5aa:	4b68      	ldr	r3, [pc, #416]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	08db      	lsrs	r3, r3, #3
 800a5b0:	f003 0303 	and.w	r3, r3, #3
 800a5b4:	4a66      	ldr	r2, [pc, #408]	@ (800a750 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a5b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a5ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5bc:	e01e      	b.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5be:	4b63      	ldr	r3, [pc, #396]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5ca:	d106      	bne.n	800a5da <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a5cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5d2:	d102      	bne.n	800a5da <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a5d4:	4b5f      	ldr	r3, [pc, #380]	@ (800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a5d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5d8:	e010      	b.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5da:	4b5c      	ldr	r3, [pc, #368]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5e6:	d106      	bne.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a5e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5ee:	d102      	bne.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a5f0:	4b59      	ldr	r3, [pc, #356]	@ (800a758 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a5f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5f4:	e002      	b.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a5fa:	e386      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a5fc:	e385      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a5fe:	4b57      	ldr	r3, [pc, #348]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a602:	e382      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a604:	2300      	movs	r3, #0
 800a606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a608:	e37f      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a60a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a60e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a612:	430b      	orrs	r3, r1
 800a614:	f040 80a7 	bne.w	800a766 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a618:	4b4c      	ldr	r3, [pc, #304]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a61a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a61c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a620:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a624:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a628:	d055      	beq.n	800a6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a62c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a630:	f200 8096 	bhi.w	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a636:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a63a:	f000 8084 	beq.w	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a63e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a640:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a644:	f200 808c 	bhi.w	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a64a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a64e:	d030      	beq.n	800a6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a652:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a656:	f200 8083 	bhi.w	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d004      	beq.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a662:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a666:	d012      	beq.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a668:	e07a      	b.n	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a66a:	4b38      	ldr	r3, [pc, #224]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a672:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a676:	d107      	bne.n	800a688 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a678:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a67c:	4618      	mov	r0, r3
 800a67e:	f000 fe0b 	bl	800b298 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a686:	e340      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a688:	2300      	movs	r3, #0
 800a68a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a68c:	e33d      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a68e:	4b2f      	ldr	r3, [pc, #188]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a696:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a69a:	d107      	bne.n	800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a69c:	f107 0318 	add.w	r3, r7, #24
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f000 fb51 	bl	800ad48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6a6:	69bb      	ldr	r3, [r7, #24]
 800a6a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6aa:	e32e      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6b0:	e32b      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6b2:	4b26      	ldr	r3, [pc, #152]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6be:	d107      	bne.n	800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6c0:	f107 030c 	add.w	r3, r7, #12
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f000 fc93 	bl	800aff0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6ce:	e31c      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6d4:	e319      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a6d6:	4b1d      	ldr	r3, [pc, #116]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a6de:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a6e0:	4b1a      	ldr	r3, [pc, #104]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f003 0304 	and.w	r3, r3, #4
 800a6e8:	2b04      	cmp	r3, #4
 800a6ea:	d10c      	bne.n	800a706 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a6ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d109      	bne.n	800a706 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6f2:	4b16      	ldr	r3, [pc, #88]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	08db      	lsrs	r3, r3, #3
 800a6f8:	f003 0303 	and.w	r3, r3, #3
 800a6fc:	4a14      	ldr	r2, [pc, #80]	@ (800a750 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a6fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a702:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a704:	e01e      	b.n	800a744 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a706:	4b11      	ldr	r3, [pc, #68]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a70e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a712:	d106      	bne.n	800a722 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a716:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a71a:	d102      	bne.n	800a722 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a71c:	4b0d      	ldr	r3, [pc, #52]	@ (800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a71e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a720:	e010      	b.n	800a744 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a722:	4b0a      	ldr	r3, [pc, #40]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a72a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a72e:	d106      	bne.n	800a73e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a732:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a736:	d102      	bne.n	800a73e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a738:	4b07      	ldr	r3, [pc, #28]	@ (800a758 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a73a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a73c:	e002      	b.n	800a744 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a73e:	2300      	movs	r3, #0
 800a740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a742:	e2e2      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a744:	e2e1      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a746:	4b05      	ldr	r3, [pc, #20]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a74a:	e2de      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a74c:	58024400 	.word	0x58024400
 800a750:	03d09000 	.word	0x03d09000
 800a754:	003d0900 	.word	0x003d0900
 800a758:	007a1200 	.word	0x007a1200
 800a75c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a760:	2300      	movs	r3, #0
 800a762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a764:	e2d1      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a766:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a76a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a76e:	430b      	orrs	r3, r1
 800a770:	f040 809c 	bne.w	800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a774:	4b93      	ldr	r3, [pc, #588]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a778:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a77c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a77e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a780:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a784:	d054      	beq.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a788:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a78c:	f200 808b 	bhi.w	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a792:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a796:	f000 8083 	beq.w	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a79c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a7a0:	f200 8081 	bhi.w	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a7a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a7aa:	d02f      	beq.n	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a7b2:	d878      	bhi.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d004      	beq.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a7ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7c0:	d012      	beq.n	800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a7c2:	e070      	b.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7c4:	4b7f      	ldr	r3, [pc, #508]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7d0:	d107      	bne.n	800a7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f000 fd5e 	bl	800b298 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7e0:	e293      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7e6:	e290      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7e8:	4b76      	ldr	r3, [pc, #472]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7f4:	d107      	bne.n	800a806 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7f6:	f107 0318 	add.w	r3, r7, #24
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f000 faa4 	bl	800ad48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a800:	69bb      	ldr	r3, [r7, #24]
 800a802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a804:	e281      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a806:	2300      	movs	r3, #0
 800a808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a80a:	e27e      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a80c:	4b6d      	ldr	r3, [pc, #436]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a814:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a818:	d107      	bne.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a81a:	f107 030c 	add.w	r3, r7, #12
 800a81e:	4618      	mov	r0, r3
 800a820:	f000 fbe6 	bl	800aff0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a828:	e26f      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a82a:	2300      	movs	r3, #0
 800a82c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a82e:	e26c      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a830:	4b64      	ldr	r3, [pc, #400]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a834:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a838:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a83a:	4b62      	ldr	r3, [pc, #392]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f003 0304 	and.w	r3, r3, #4
 800a842:	2b04      	cmp	r3, #4
 800a844:	d10c      	bne.n	800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d109      	bne.n	800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a84c:	4b5d      	ldr	r3, [pc, #372]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	08db      	lsrs	r3, r3, #3
 800a852:	f003 0303 	and.w	r3, r3, #3
 800a856:	4a5c      	ldr	r2, [pc, #368]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a858:	fa22 f303 	lsr.w	r3, r2, r3
 800a85c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a85e:	e01e      	b.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a860:	4b58      	ldr	r3, [pc, #352]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a868:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a86c:	d106      	bne.n	800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a86e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a870:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a874:	d102      	bne.n	800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a876:	4b55      	ldr	r3, [pc, #340]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a878:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a87a:	e010      	b.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a87c:	4b51      	ldr	r3, [pc, #324]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a884:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a888:	d106      	bne.n	800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a88a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a88c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a890:	d102      	bne.n	800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a892:	4b4f      	ldr	r3, [pc, #316]	@ (800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a894:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a896:	e002      	b.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a898:	2300      	movs	r3, #0
 800a89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a89c:	e235      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a89e:	e234      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a8a0:	4b4c      	ldr	r3, [pc, #304]	@ (800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8a4:	e231      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8aa:	e22e      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a8ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8b0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a8b4:	430b      	orrs	r3, r1
 800a8b6:	f040 808f 	bne.w	800a9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a8ba:	4b42      	ldr	r3, [pc, #264]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8be:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a8c2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a8c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a8ca:	d06b      	beq.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a8cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a8d2:	d874      	bhi.n	800a9be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a8da:	d056      	beq.n	800a98a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a8dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a8e2:	d86c      	bhi.n	800a9be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a8e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a8ea:	d03b      	beq.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a8f2:	d864      	bhi.n	800a9be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8fa:	d021      	beq.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a8fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a902:	d85c      	bhi.n	800a9be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a906:	2b00      	cmp	r3, #0
 800a908:	d004      	beq.n	800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a90a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a90c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a910:	d004      	beq.n	800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a912:	e054      	b.n	800a9be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a914:	f7fe fa0a 	bl	8008d2c <HAL_RCC_GetPCLK1Freq>
 800a918:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a91a:	e1f6      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a91c:	4b29      	ldr	r3, [pc, #164]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a924:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a928:	d107      	bne.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a92a:	f107 0318 	add.w	r3, r7, #24
 800a92e:	4618      	mov	r0, r3
 800a930:	f000 fa0a 	bl	800ad48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a938:	e1e7      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a93a:	2300      	movs	r3, #0
 800a93c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a93e:	e1e4      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a940:	4b20      	ldr	r3, [pc, #128]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a948:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a94c:	d107      	bne.n	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a94e:	f107 030c 	add.w	r3, r7, #12
 800a952:	4618      	mov	r0, r3
 800a954:	f000 fb4c 	bl	800aff0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a95c:	e1d5      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a95e:	2300      	movs	r3, #0
 800a960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a962:	e1d2      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a964:	4b17      	ldr	r3, [pc, #92]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f003 0304 	and.w	r3, r3, #4
 800a96c:	2b04      	cmp	r3, #4
 800a96e:	d109      	bne.n	800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a970:	4b14      	ldr	r3, [pc, #80]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	08db      	lsrs	r3, r3, #3
 800a976:	f003 0303 	and.w	r3, r3, #3
 800a97a:	4a13      	ldr	r2, [pc, #76]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a97c:	fa22 f303 	lsr.w	r3, r2, r3
 800a980:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a982:	e1c2      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a984:	2300      	movs	r3, #0
 800a986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a988:	e1bf      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a98a:	4b0e      	ldr	r3, [pc, #56]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a992:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a996:	d102      	bne.n	800a99e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a998:	4b0c      	ldr	r3, [pc, #48]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a99a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a99c:	e1b5      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9a2:	e1b2      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a9a4:	4b07      	ldr	r3, [pc, #28]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9b0:	d102      	bne.n	800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a9b2:	4b07      	ldr	r3, [pc, #28]	@ (800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a9b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9b6:	e1a8      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9bc:	e1a5      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9c2:	e1a2      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a9c4:	58024400 	.word	0x58024400
 800a9c8:	03d09000 	.word	0x03d09000
 800a9cc:	003d0900 	.word	0x003d0900
 800a9d0:	007a1200 	.word	0x007a1200
 800a9d4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a9d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9dc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a9e0:	430b      	orrs	r3, r1
 800a9e2:	d173      	bne.n	800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a9e4:	4b9c      	ldr	r3, [pc, #624]	@ (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a9ec:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a9ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9f4:	d02f      	beq.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a9f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9fc:	d863      	bhi.n	800aac6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a9fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d004      	beq.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800aa04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa0a:	d012      	beq.n	800aa32 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800aa0c:	e05b      	b.n	800aac6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa0e:	4b92      	ldr	r3, [pc, #584]	@ (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa1a:	d107      	bne.n	800aa2c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa1c:	f107 0318 	add.w	r3, r7, #24
 800aa20:	4618      	mov	r0, r3
 800aa22:	f000 f991 	bl	800ad48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa2a:	e16e      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa30:	e16b      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa32:	4b89      	ldr	r3, [pc, #548]	@ (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa3e:	d107      	bne.n	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa40:	f107 030c 	add.w	r3, r7, #12
 800aa44:	4618      	mov	r0, r3
 800aa46:	f000 fad3 	bl	800aff0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa4e:	e15c      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa50:	2300      	movs	r3, #0
 800aa52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa54:	e159      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa56:	4b80      	ldr	r3, [pc, #512]	@ (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa5a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aa5e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa60:	4b7d      	ldr	r3, [pc, #500]	@ (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f003 0304 	and.w	r3, r3, #4
 800aa68:	2b04      	cmp	r3, #4
 800aa6a:	d10c      	bne.n	800aa86 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800aa6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d109      	bne.n	800aa86 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa72:	4b79      	ldr	r3, [pc, #484]	@ (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	08db      	lsrs	r3, r3, #3
 800aa78:	f003 0303 	and.w	r3, r3, #3
 800aa7c:	4a77      	ldr	r2, [pc, #476]	@ (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800aa7e:	fa22 f303 	lsr.w	r3, r2, r3
 800aa82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa84:	e01e      	b.n	800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa86:	4b74      	ldr	r3, [pc, #464]	@ (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa92:	d106      	bne.n	800aaa2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800aa94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa9a:	d102      	bne.n	800aaa2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aa9c:	4b70      	ldr	r3, [pc, #448]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800aa9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aaa0:	e010      	b.n	800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aaa2:	4b6d      	ldr	r3, [pc, #436]	@ (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aaaa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aaae:	d106      	bne.n	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800aab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aab2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aab6:	d102      	bne.n	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aab8:	4b6a      	ldr	r3, [pc, #424]	@ (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800aaba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aabc:	e002      	b.n	800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aabe:	2300      	movs	r3, #0
 800aac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aac2:	e122      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aac4:	e121      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800aac6:	2300      	movs	r3, #0
 800aac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaca:	e11e      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800aacc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aad0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800aad4:	430b      	orrs	r3, r1
 800aad6:	d133      	bne.n	800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800aad8:	4b5f      	ldr	r3, [pc, #380]	@ (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aadc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aae0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d004      	beq.n	800aaf2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800aae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aaee:	d012      	beq.n	800ab16 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800aaf0:	e023      	b.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aaf2:	4b59      	ldr	r3, [pc, #356]	@ (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aafa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aafe:	d107      	bne.n	800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab04:	4618      	mov	r0, r3
 800ab06:	f000 fbc7 	bl	800b298 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab0e:	e0fc      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab10:	2300      	movs	r3, #0
 800ab12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab14:	e0f9      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab16:	4b50      	ldr	r3, [pc, #320]	@ (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab22:	d107      	bne.n	800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab24:	f107 0318 	add.w	r3, r7, #24
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f000 f90d 	bl	800ad48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ab2e:	6a3b      	ldr	r3, [r7, #32]
 800ab30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab32:	e0ea      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab34:	2300      	movs	r3, #0
 800ab36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab38:	e0e7      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab3e:	e0e4      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ab40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab44:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800ab48:	430b      	orrs	r3, r1
 800ab4a:	f040 808d 	bne.w	800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ab4e:	4b42      	ldr	r3, [pc, #264]	@ (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab52:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800ab56:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ab58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ab5e:	d06b      	beq.n	800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ab60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ab66:	d874      	bhi.n	800ac52 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ab68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab6e:	d056      	beq.n	800ac1e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ab70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab76:	d86c      	bhi.n	800ac52 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ab78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ab7e:	d03b      	beq.n	800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ab80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ab86:	d864      	bhi.n	800ac52 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ab88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab8e:	d021      	beq.n	800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ab90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab96:	d85c      	bhi.n	800ac52 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ab98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d004      	beq.n	800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ab9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aba4:	d004      	beq.n	800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800aba6:	e054      	b.n	800ac52 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800aba8:	f000 f8b8 	bl	800ad1c <HAL_RCCEx_GetD3PCLK1Freq>
 800abac:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800abae:	e0ac      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abb0:	4b29      	ldr	r3, [pc, #164]	@ (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800abbc:	d107      	bne.n	800abce <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abbe:	f107 0318 	add.w	r3, r7, #24
 800abc2:	4618      	mov	r0, r3
 800abc4:	f000 f8c0 	bl	800ad48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abcc:	e09d      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abce:	2300      	movs	r3, #0
 800abd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abd2:	e09a      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abd4:	4b20      	ldr	r3, [pc, #128]	@ (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800abdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abe0:	d107      	bne.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abe2:	f107 030c 	add.w	r3, r7, #12
 800abe6:	4618      	mov	r0, r3
 800abe8:	f000 fa02 	bl	800aff0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abf0:	e08b      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abf2:	2300      	movs	r3, #0
 800abf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abf6:	e088      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800abf8:	4b17      	ldr	r3, [pc, #92]	@ (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f003 0304 	and.w	r3, r3, #4
 800ac00:	2b04      	cmp	r3, #4
 800ac02:	d109      	bne.n	800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac04:	4b14      	ldr	r3, [pc, #80]	@ (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	08db      	lsrs	r3, r3, #3
 800ac0a:	f003 0303 	and.w	r3, r3, #3
 800ac0e:	4a13      	ldr	r2, [pc, #76]	@ (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ac10:	fa22 f303 	lsr.w	r3, r2, r3
 800ac14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac16:	e078      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac1c:	e075      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ac1e:	4b0e      	ldr	r3, [pc, #56]	@ (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac2a:	d102      	bne.n	800ac32 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ac2c:	4b0c      	ldr	r3, [pc, #48]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ac2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac30:	e06b      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac32:	2300      	movs	r3, #0
 800ac34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac36:	e068      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ac38:	4b07      	ldr	r3, [pc, #28]	@ (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac44:	d102      	bne.n	800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ac46:	4b07      	ldr	r3, [pc, #28]	@ (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ac48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac4a:	e05e      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac50:	e05b      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ac52:	2300      	movs	r3, #0
 800ac54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac56:	e058      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac58:	58024400 	.word	0x58024400
 800ac5c:	03d09000 	.word	0x03d09000
 800ac60:	003d0900 	.word	0x003d0900
 800ac64:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ac68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac6c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ac70:	430b      	orrs	r3, r1
 800ac72:	d148      	bne.n	800ad06 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ac74:	4b27      	ldr	r3, [pc, #156]	@ (800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ac76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac78:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ac7c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ac7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac84:	d02a      	beq.n	800acdc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ac86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac8c:	d838      	bhi.n	800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ac8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d004      	beq.n	800ac9e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ac94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac9a:	d00d      	beq.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ac9c:	e030      	b.n	800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ac9e:	4b1d      	ldr	r3, [pc, #116]	@ (800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aca6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800acaa:	d102      	bne.n	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800acac:	4b1a      	ldr	r3, [pc, #104]	@ (800ad18 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800acae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acb0:	e02b      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acb2:	2300      	movs	r3, #0
 800acb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acb6:	e028      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800acb8:	4b16      	ldr	r3, [pc, #88]	@ (800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800acc0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800acc4:	d107      	bne.n	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800acc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800acca:	4618      	mov	r0, r3
 800accc:	f000 fae4 	bl	800b298 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800acd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acd4:	e019      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acd6:	2300      	movs	r3, #0
 800acd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acda:	e016      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acdc:	4b0d      	ldr	r3, [pc, #52]	@ (800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ace4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ace8:	d107      	bne.n	800acfa <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acea:	f107 0318 	add.w	r3, r7, #24
 800acee:	4618      	mov	r0, r3
 800acf0:	f000 f82a 	bl	800ad48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acf8:	e007      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acfa:	2300      	movs	r3, #0
 800acfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acfe:	e004      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ad00:	2300      	movs	r3, #0
 800ad02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad04:	e001      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800ad06:	2300      	movs	r3, #0
 800ad08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800ad0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3740      	adds	r7, #64	@ 0x40
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	58024400 	.word	0x58024400
 800ad18:	007a1200 	.word	0x007a1200

0800ad1c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ad20:	f7fd ffd4 	bl	8008ccc <HAL_RCC_GetHCLKFreq>
 800ad24:	4602      	mov	r2, r0
 800ad26:	4b06      	ldr	r3, [pc, #24]	@ (800ad40 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ad28:	6a1b      	ldr	r3, [r3, #32]
 800ad2a:	091b      	lsrs	r3, r3, #4
 800ad2c:	f003 0307 	and.w	r3, r3, #7
 800ad30:	4904      	ldr	r1, [pc, #16]	@ (800ad44 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ad32:	5ccb      	ldrb	r3, [r1, r3]
 800ad34:	f003 031f 	and.w	r3, r3, #31
 800ad38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	bd80      	pop	{r7, pc}
 800ad40:	58024400 	.word	0x58024400
 800ad44:	080234f8 	.word	0x080234f8

0800ad48 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b089      	sub	sp, #36	@ 0x24
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad50:	4ba1      	ldr	r3, [pc, #644]	@ (800afd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad54:	f003 0303 	and.w	r3, r3, #3
 800ad58:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ad5a:	4b9f      	ldr	r3, [pc, #636]	@ (800afd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad5e:	0b1b      	lsrs	r3, r3, #12
 800ad60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ad64:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ad66:	4b9c      	ldr	r3, [pc, #624]	@ (800afd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad6a:	091b      	lsrs	r3, r3, #4
 800ad6c:	f003 0301 	and.w	r3, r3, #1
 800ad70:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ad72:	4b99      	ldr	r3, [pc, #612]	@ (800afd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad76:	08db      	lsrs	r3, r3, #3
 800ad78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad7c:	693a      	ldr	r2, [r7, #16]
 800ad7e:	fb02 f303 	mul.w	r3, r2, r3
 800ad82:	ee07 3a90 	vmov	s15, r3
 800ad86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	f000 8111 	beq.w	800afb8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	2b02      	cmp	r3, #2
 800ad9a:	f000 8083 	beq.w	800aea4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ad9e:	69bb      	ldr	r3, [r7, #24]
 800ada0:	2b02      	cmp	r3, #2
 800ada2:	f200 80a1 	bhi.w	800aee8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d003      	beq.n	800adb4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800adac:	69bb      	ldr	r3, [r7, #24]
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d056      	beq.n	800ae60 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800adb2:	e099      	b.n	800aee8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800adb4:	4b88      	ldr	r3, [pc, #544]	@ (800afd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f003 0320 	and.w	r3, r3, #32
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d02d      	beq.n	800ae1c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800adc0:	4b85      	ldr	r3, [pc, #532]	@ (800afd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	08db      	lsrs	r3, r3, #3
 800adc6:	f003 0303 	and.w	r3, r3, #3
 800adca:	4a84      	ldr	r2, [pc, #528]	@ (800afdc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800adcc:	fa22 f303 	lsr.w	r3, r2, r3
 800add0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	ee07 3a90 	vmov	s15, r3
 800add8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	ee07 3a90 	vmov	s15, r3
 800ade2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ade6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adea:	4b7b      	ldr	r3, [pc, #492]	@ (800afd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adf2:	ee07 3a90 	vmov	s15, r3
 800adf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adfa:	ed97 6a03 	vldr	s12, [r7, #12]
 800adfe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800afe0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ae1a:	e087      	b.n	800af2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	ee07 3a90 	vmov	s15, r3
 800ae22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae26:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800afe4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ae2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae2e:	4b6a      	ldr	r3, [pc, #424]	@ (800afd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae36:	ee07 3a90 	vmov	s15, r3
 800ae3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae42:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800afe0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae5e:	e065      	b.n	800af2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	ee07 3a90 	vmov	s15, r3
 800ae66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae6a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800afe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ae6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae72:	4b59      	ldr	r3, [pc, #356]	@ (800afd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae7a:	ee07 3a90 	vmov	s15, r3
 800ae7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae82:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae86:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800afe0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aea2:	e043      	b.n	800af2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	ee07 3a90 	vmov	s15, r3
 800aeaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800afec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aeb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeb6:	4b48      	ldr	r3, [pc, #288]	@ (800afd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aeb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aebe:	ee07 3a90 	vmov	s15, r3
 800aec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aec6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800afe0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aed6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aeda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aede:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aee2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aee6:	e021      	b.n	800af2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	ee07 3a90 	vmov	s15, r3
 800aeee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aef2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800afe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aefa:	4b37      	ldr	r3, [pc, #220]	@ (800afd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aefc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aefe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af02:	ee07 3a90 	vmov	s15, r3
 800af06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af0e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800afe0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af2a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800af2c:	4b2a      	ldr	r3, [pc, #168]	@ (800afd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af30:	0a5b      	lsrs	r3, r3, #9
 800af32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af36:	ee07 3a90 	vmov	s15, r3
 800af3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800af42:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af46:	edd7 6a07 	vldr	s13, [r7, #28]
 800af4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af52:	ee17 2a90 	vmov	r2, s15
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800af5a:	4b1f      	ldr	r3, [pc, #124]	@ (800afd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af5e:	0c1b      	lsrs	r3, r3, #16
 800af60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af64:	ee07 3a90 	vmov	s15, r3
 800af68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800af70:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af74:	edd7 6a07 	vldr	s13, [r7, #28]
 800af78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af80:	ee17 2a90 	vmov	r2, s15
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800af88:	4b13      	ldr	r3, [pc, #76]	@ (800afd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af8c:	0e1b      	lsrs	r3, r3, #24
 800af8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af92:	ee07 3a90 	vmov	s15, r3
 800af96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800af9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afa2:	edd7 6a07 	vldr	s13, [r7, #28]
 800afa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afae:	ee17 2a90 	vmov	r2, s15
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800afb6:	e008      	b.n	800afca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2200      	movs	r2, #0
 800afc8:	609a      	str	r2, [r3, #8]
}
 800afca:	bf00      	nop
 800afcc:	3724      	adds	r7, #36	@ 0x24
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr
 800afd6:	bf00      	nop
 800afd8:	58024400 	.word	0x58024400
 800afdc:	03d09000 	.word	0x03d09000
 800afe0:	46000000 	.word	0x46000000
 800afe4:	4c742400 	.word	0x4c742400
 800afe8:	4a742400 	.word	0x4a742400
 800afec:	4af42400 	.word	0x4af42400

0800aff0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b089      	sub	sp, #36	@ 0x24
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aff8:	4ba1      	ldr	r3, [pc, #644]	@ (800b280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800affa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800affc:	f003 0303 	and.w	r3, r3, #3
 800b000:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b002:	4b9f      	ldr	r3, [pc, #636]	@ (800b280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b006:	0d1b      	lsrs	r3, r3, #20
 800b008:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b00c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b00e:	4b9c      	ldr	r3, [pc, #624]	@ (800b280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b012:	0a1b      	lsrs	r3, r3, #8
 800b014:	f003 0301 	and.w	r3, r3, #1
 800b018:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b01a:	4b99      	ldr	r3, [pc, #612]	@ (800b280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b01c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b01e:	08db      	lsrs	r3, r3, #3
 800b020:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b024:	693a      	ldr	r2, [r7, #16]
 800b026:	fb02 f303 	mul.w	r3, r2, r3
 800b02a:	ee07 3a90 	vmov	s15, r3
 800b02e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b032:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	f000 8111 	beq.w	800b260 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b03e:	69bb      	ldr	r3, [r7, #24]
 800b040:	2b02      	cmp	r3, #2
 800b042:	f000 8083 	beq.w	800b14c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b046:	69bb      	ldr	r3, [r7, #24]
 800b048:	2b02      	cmp	r3, #2
 800b04a:	f200 80a1 	bhi.w	800b190 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b04e:	69bb      	ldr	r3, [r7, #24]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d003      	beq.n	800b05c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	2b01      	cmp	r3, #1
 800b058:	d056      	beq.n	800b108 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b05a:	e099      	b.n	800b190 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b05c:	4b88      	ldr	r3, [pc, #544]	@ (800b280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f003 0320 	and.w	r3, r3, #32
 800b064:	2b00      	cmp	r3, #0
 800b066:	d02d      	beq.n	800b0c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b068:	4b85      	ldr	r3, [pc, #532]	@ (800b280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	08db      	lsrs	r3, r3, #3
 800b06e:	f003 0303 	and.w	r3, r3, #3
 800b072:	4a84      	ldr	r2, [pc, #528]	@ (800b284 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b074:	fa22 f303 	lsr.w	r3, r2, r3
 800b078:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	ee07 3a90 	vmov	s15, r3
 800b080:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	ee07 3a90 	vmov	s15, r3
 800b08a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b08e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b092:	4b7b      	ldr	r3, [pc, #492]	@ (800b280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b09a:	ee07 3a90 	vmov	s15, r3
 800b09e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b288 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b0aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b0c2:	e087      	b.n	800b1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	ee07 3a90 	vmov	s15, r3
 800b0ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b28c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b0d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0d6:	4b6a      	ldr	r3, [pc, #424]	@ (800b280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0de:	ee07 3a90 	vmov	s15, r3
 800b0e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b288 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b0ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b106:	e065      	b.n	800b1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	ee07 3a90 	vmov	s15, r3
 800b10e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b112:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b290 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b11a:	4b59      	ldr	r3, [pc, #356]	@ (800b280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b11c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b11e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b122:	ee07 3a90 	vmov	s15, r3
 800b126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b12a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b12e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b288 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b13a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b13e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b142:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b146:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b14a:	e043      	b.n	800b1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	ee07 3a90 	vmov	s15, r3
 800b152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b156:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b294 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b15a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b15e:	4b48      	ldr	r3, [pc, #288]	@ (800b280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b166:	ee07 3a90 	vmov	s15, r3
 800b16a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b16e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b172:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b288 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b17a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b17e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b18a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b18e:	e021      	b.n	800b1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	ee07 3a90 	vmov	s15, r3
 800b196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b19a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b290 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b19e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1a2:	4b37      	ldr	r3, [pc, #220]	@ (800b280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1aa:	ee07 3a90 	vmov	s15, r3
 800b1ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b288 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b1d4:	4b2a      	ldr	r3, [pc, #168]	@ (800b280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1d8:	0a5b      	lsrs	r3, r3, #9
 800b1da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1de:	ee07 3a90 	vmov	s15, r3
 800b1e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1fa:	ee17 2a90 	vmov	r2, s15
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b202:	4b1f      	ldr	r3, [pc, #124]	@ (800b280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b206:	0c1b      	lsrs	r3, r3, #16
 800b208:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b20c:	ee07 3a90 	vmov	s15, r3
 800b210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b214:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b218:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b21c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b220:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b228:	ee17 2a90 	vmov	r2, s15
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b230:	4b13      	ldr	r3, [pc, #76]	@ (800b280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b234:	0e1b      	lsrs	r3, r3, #24
 800b236:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b23a:	ee07 3a90 	vmov	s15, r3
 800b23e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b242:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b246:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b24a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b24e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b256:	ee17 2a90 	vmov	r2, s15
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b25e:	e008      	b.n	800b272 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2200      	movs	r2, #0
 800b264:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2200      	movs	r2, #0
 800b26a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2200      	movs	r2, #0
 800b270:	609a      	str	r2, [r3, #8]
}
 800b272:	bf00      	nop
 800b274:	3724      	adds	r7, #36	@ 0x24
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	58024400 	.word	0x58024400
 800b284:	03d09000 	.word	0x03d09000
 800b288:	46000000 	.word	0x46000000
 800b28c:	4c742400 	.word	0x4c742400
 800b290:	4a742400 	.word	0x4a742400
 800b294:	4af42400 	.word	0x4af42400

0800b298 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b298:	b480      	push	{r7}
 800b29a:	b089      	sub	sp, #36	@ 0x24
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b2a0:	4ba0      	ldr	r3, [pc, #640]	@ (800b524 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2a4:	f003 0303 	and.w	r3, r3, #3
 800b2a8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b2aa:	4b9e      	ldr	r3, [pc, #632]	@ (800b524 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2ae:	091b      	lsrs	r3, r3, #4
 800b2b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b2b4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b2b6:	4b9b      	ldr	r3, [pc, #620]	@ (800b524 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2ba:	f003 0301 	and.w	r3, r3, #1
 800b2be:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b2c0:	4b98      	ldr	r3, [pc, #608]	@ (800b524 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2c4:	08db      	lsrs	r3, r3, #3
 800b2c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2ca:	693a      	ldr	r2, [r7, #16]
 800b2cc:	fb02 f303 	mul.w	r3, r2, r3
 800b2d0:	ee07 3a90 	vmov	s15, r3
 800b2d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2d8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	f000 8111 	beq.w	800b506 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b2e4:	69bb      	ldr	r3, [r7, #24]
 800b2e6:	2b02      	cmp	r3, #2
 800b2e8:	f000 8083 	beq.w	800b3f2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	2b02      	cmp	r3, #2
 800b2f0:	f200 80a1 	bhi.w	800b436 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b2f4:	69bb      	ldr	r3, [r7, #24]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d003      	beq.n	800b302 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b2fa:	69bb      	ldr	r3, [r7, #24]
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d056      	beq.n	800b3ae <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b300:	e099      	b.n	800b436 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b302:	4b88      	ldr	r3, [pc, #544]	@ (800b524 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f003 0320 	and.w	r3, r3, #32
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d02d      	beq.n	800b36a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b30e:	4b85      	ldr	r3, [pc, #532]	@ (800b524 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	08db      	lsrs	r3, r3, #3
 800b314:	f003 0303 	and.w	r3, r3, #3
 800b318:	4a83      	ldr	r2, [pc, #524]	@ (800b528 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b31a:	fa22 f303 	lsr.w	r3, r2, r3
 800b31e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	ee07 3a90 	vmov	s15, r3
 800b326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	ee07 3a90 	vmov	s15, r3
 800b330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b334:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b338:	4b7a      	ldr	r3, [pc, #488]	@ (800b524 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b33a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b33c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b340:	ee07 3a90 	vmov	s15, r3
 800b344:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b348:	ed97 6a03 	vldr	s12, [r7, #12]
 800b34c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b52c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b350:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b354:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b358:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b35c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b360:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b364:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b368:	e087      	b.n	800b47a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	ee07 3a90 	vmov	s15, r3
 800b370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b374:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b530 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b378:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b37c:	4b69      	ldr	r3, [pc, #420]	@ (800b524 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b37e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b384:	ee07 3a90 	vmov	s15, r3
 800b388:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b38c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b390:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b52c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b394:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b398:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b39c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3ac:	e065      	b.n	800b47a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	ee07 3a90 	vmov	s15, r3
 800b3b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3b8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b534 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b3bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3c0:	4b58      	ldr	r3, [pc, #352]	@ (800b524 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3c8:	ee07 3a90 	vmov	s15, r3
 800b3cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3d0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3d4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b52c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b3d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3f0:	e043      	b.n	800b47a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	ee07 3a90 	vmov	s15, r3
 800b3f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3fc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b538 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b400:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b404:	4b47      	ldr	r3, [pc, #284]	@ (800b524 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b40c:	ee07 3a90 	vmov	s15, r3
 800b410:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b414:	ed97 6a03 	vldr	s12, [r7, #12]
 800b418:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b52c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b41c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b420:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b424:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b428:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b42c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b430:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b434:	e021      	b.n	800b47a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	ee07 3a90 	vmov	s15, r3
 800b43c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b440:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b530 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b444:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b448:	4b36      	ldr	r3, [pc, #216]	@ (800b524 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b44a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b44c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b450:	ee07 3a90 	vmov	s15, r3
 800b454:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b458:	ed97 6a03 	vldr	s12, [r7, #12]
 800b45c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b52c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b460:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b464:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b468:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b46c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b470:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b474:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b478:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b47a:	4b2a      	ldr	r3, [pc, #168]	@ (800b524 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b47c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b47e:	0a5b      	lsrs	r3, r3, #9
 800b480:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b484:	ee07 3a90 	vmov	s15, r3
 800b488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b48c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b490:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b494:	edd7 6a07 	vldr	s13, [r7, #28]
 800b498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b49c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4a0:	ee17 2a90 	vmov	r2, s15
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b4a8:	4b1e      	ldr	r3, [pc, #120]	@ (800b524 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4ac:	0c1b      	lsrs	r3, r3, #16
 800b4ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4b2:	ee07 3a90 	vmov	s15, r3
 800b4b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b4be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4ce:	ee17 2a90 	vmov	r2, s15
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b4d6:	4b13      	ldr	r3, [pc, #76]	@ (800b524 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4da:	0e1b      	lsrs	r3, r3, #24
 800b4dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4e0:	ee07 3a90 	vmov	s15, r3
 800b4e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b4ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4fc:	ee17 2a90 	vmov	r2, s15
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b504:	e008      	b.n	800b518 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2200      	movs	r2, #0
 800b50a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2200      	movs	r2, #0
 800b510:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	609a      	str	r2, [r3, #8]
}
 800b518:	bf00      	nop
 800b51a:	3724      	adds	r7, #36	@ 0x24
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr
 800b524:	58024400 	.word	0x58024400
 800b528:	03d09000 	.word	0x03d09000
 800b52c:	46000000 	.word	0x46000000
 800b530:	4c742400 	.word	0x4c742400
 800b534:	4a742400 	.word	0x4a742400
 800b538:	4af42400 	.word	0x4af42400

0800b53c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b546:	2300      	movs	r3, #0
 800b548:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b54a:	4b53      	ldr	r3, [pc, #332]	@ (800b698 <RCCEx_PLL2_Config+0x15c>)
 800b54c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b54e:	f003 0303 	and.w	r3, r3, #3
 800b552:	2b03      	cmp	r3, #3
 800b554:	d101      	bne.n	800b55a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b556:	2301      	movs	r3, #1
 800b558:	e099      	b.n	800b68e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b55a:	4b4f      	ldr	r3, [pc, #316]	@ (800b698 <RCCEx_PLL2_Config+0x15c>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4a4e      	ldr	r2, [pc, #312]	@ (800b698 <RCCEx_PLL2_Config+0x15c>)
 800b560:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b566:	f7f7 ffaf 	bl	80034c8 <HAL_GetTick>
 800b56a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b56c:	e008      	b.n	800b580 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b56e:	f7f7 ffab 	bl	80034c8 <HAL_GetTick>
 800b572:	4602      	mov	r2, r0
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	1ad3      	subs	r3, r2, r3
 800b578:	2b02      	cmp	r3, #2
 800b57a:	d901      	bls.n	800b580 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b57c:	2303      	movs	r3, #3
 800b57e:	e086      	b.n	800b68e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b580:	4b45      	ldr	r3, [pc, #276]	@ (800b698 <RCCEx_PLL2_Config+0x15c>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d1f0      	bne.n	800b56e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b58c:	4b42      	ldr	r3, [pc, #264]	@ (800b698 <RCCEx_PLL2_Config+0x15c>)
 800b58e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b590:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	031b      	lsls	r3, r3, #12
 800b59a:	493f      	ldr	r1, [pc, #252]	@ (800b698 <RCCEx_PLL2_Config+0x15c>)
 800b59c:	4313      	orrs	r3, r2
 800b59e:	628b      	str	r3, [r1, #40]	@ 0x28
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	3b01      	subs	r3, #1
 800b5a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	3b01      	subs	r3, #1
 800b5b0:	025b      	lsls	r3, r3, #9
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	431a      	orrs	r2, r3
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	68db      	ldr	r3, [r3, #12]
 800b5ba:	3b01      	subs	r3, #1
 800b5bc:	041b      	lsls	r3, r3, #16
 800b5be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b5c2:	431a      	orrs	r2, r3
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	691b      	ldr	r3, [r3, #16]
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	061b      	lsls	r3, r3, #24
 800b5cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b5d0:	4931      	ldr	r1, [pc, #196]	@ (800b698 <RCCEx_PLL2_Config+0x15c>)
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b5d6:	4b30      	ldr	r3, [pc, #192]	@ (800b698 <RCCEx_PLL2_Config+0x15c>)
 800b5d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	695b      	ldr	r3, [r3, #20]
 800b5e2:	492d      	ldr	r1, [pc, #180]	@ (800b698 <RCCEx_PLL2_Config+0x15c>)
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b5e8:	4b2b      	ldr	r3, [pc, #172]	@ (800b698 <RCCEx_PLL2_Config+0x15c>)
 800b5ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ec:	f023 0220 	bic.w	r2, r3, #32
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	699b      	ldr	r3, [r3, #24]
 800b5f4:	4928      	ldr	r1, [pc, #160]	@ (800b698 <RCCEx_PLL2_Config+0x15c>)
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b5fa:	4b27      	ldr	r3, [pc, #156]	@ (800b698 <RCCEx_PLL2_Config+0x15c>)
 800b5fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5fe:	4a26      	ldr	r2, [pc, #152]	@ (800b698 <RCCEx_PLL2_Config+0x15c>)
 800b600:	f023 0310 	bic.w	r3, r3, #16
 800b604:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b606:	4b24      	ldr	r3, [pc, #144]	@ (800b698 <RCCEx_PLL2_Config+0x15c>)
 800b608:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b60a:	4b24      	ldr	r3, [pc, #144]	@ (800b69c <RCCEx_PLL2_Config+0x160>)
 800b60c:	4013      	ands	r3, r2
 800b60e:	687a      	ldr	r2, [r7, #4]
 800b610:	69d2      	ldr	r2, [r2, #28]
 800b612:	00d2      	lsls	r2, r2, #3
 800b614:	4920      	ldr	r1, [pc, #128]	@ (800b698 <RCCEx_PLL2_Config+0x15c>)
 800b616:	4313      	orrs	r3, r2
 800b618:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b61a:	4b1f      	ldr	r3, [pc, #124]	@ (800b698 <RCCEx_PLL2_Config+0x15c>)
 800b61c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b61e:	4a1e      	ldr	r2, [pc, #120]	@ (800b698 <RCCEx_PLL2_Config+0x15c>)
 800b620:	f043 0310 	orr.w	r3, r3, #16
 800b624:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d106      	bne.n	800b63a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b62c:	4b1a      	ldr	r3, [pc, #104]	@ (800b698 <RCCEx_PLL2_Config+0x15c>)
 800b62e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b630:	4a19      	ldr	r2, [pc, #100]	@ (800b698 <RCCEx_PLL2_Config+0x15c>)
 800b632:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b636:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b638:	e00f      	b.n	800b65a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d106      	bne.n	800b64e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b640:	4b15      	ldr	r3, [pc, #84]	@ (800b698 <RCCEx_PLL2_Config+0x15c>)
 800b642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b644:	4a14      	ldr	r2, [pc, #80]	@ (800b698 <RCCEx_PLL2_Config+0x15c>)
 800b646:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b64a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b64c:	e005      	b.n	800b65a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b64e:	4b12      	ldr	r3, [pc, #72]	@ (800b698 <RCCEx_PLL2_Config+0x15c>)
 800b650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b652:	4a11      	ldr	r2, [pc, #68]	@ (800b698 <RCCEx_PLL2_Config+0x15c>)
 800b654:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b658:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b65a:	4b0f      	ldr	r3, [pc, #60]	@ (800b698 <RCCEx_PLL2_Config+0x15c>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	4a0e      	ldr	r2, [pc, #56]	@ (800b698 <RCCEx_PLL2_Config+0x15c>)
 800b660:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b664:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b666:	f7f7 ff2f 	bl	80034c8 <HAL_GetTick>
 800b66a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b66c:	e008      	b.n	800b680 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b66e:	f7f7 ff2b 	bl	80034c8 <HAL_GetTick>
 800b672:	4602      	mov	r2, r0
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	1ad3      	subs	r3, r2, r3
 800b678:	2b02      	cmp	r3, #2
 800b67a:	d901      	bls.n	800b680 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b67c:	2303      	movs	r3, #3
 800b67e:	e006      	b.n	800b68e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b680:	4b05      	ldr	r3, [pc, #20]	@ (800b698 <RCCEx_PLL2_Config+0x15c>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d0f0      	beq.n	800b66e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	58024400 	.word	0x58024400
 800b69c:	ffff0007 	.word	0xffff0007

0800b6a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b084      	sub	sp, #16
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b6ae:	4b53      	ldr	r3, [pc, #332]	@ (800b7fc <RCCEx_PLL3_Config+0x15c>)
 800b6b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6b2:	f003 0303 	and.w	r3, r3, #3
 800b6b6:	2b03      	cmp	r3, #3
 800b6b8:	d101      	bne.n	800b6be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	e099      	b.n	800b7f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b6be:	4b4f      	ldr	r3, [pc, #316]	@ (800b7fc <RCCEx_PLL3_Config+0x15c>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4a4e      	ldr	r2, [pc, #312]	@ (800b7fc <RCCEx_PLL3_Config+0x15c>)
 800b6c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b6c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6ca:	f7f7 fefd 	bl	80034c8 <HAL_GetTick>
 800b6ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b6d0:	e008      	b.n	800b6e4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b6d2:	f7f7 fef9 	bl	80034c8 <HAL_GetTick>
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	1ad3      	subs	r3, r2, r3
 800b6dc:	2b02      	cmp	r3, #2
 800b6de:	d901      	bls.n	800b6e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b6e0:	2303      	movs	r3, #3
 800b6e2:	e086      	b.n	800b7f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b6e4:	4b45      	ldr	r3, [pc, #276]	@ (800b7fc <RCCEx_PLL3_Config+0x15c>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d1f0      	bne.n	800b6d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b6f0:	4b42      	ldr	r3, [pc, #264]	@ (800b7fc <RCCEx_PLL3_Config+0x15c>)
 800b6f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6f4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	051b      	lsls	r3, r3, #20
 800b6fe:	493f      	ldr	r1, [pc, #252]	@ (800b7fc <RCCEx_PLL3_Config+0x15c>)
 800b700:	4313      	orrs	r3, r2
 800b702:	628b      	str	r3, [r1, #40]	@ 0x28
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	3b01      	subs	r3, #1
 800b70a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	689b      	ldr	r3, [r3, #8]
 800b712:	3b01      	subs	r3, #1
 800b714:	025b      	lsls	r3, r3, #9
 800b716:	b29b      	uxth	r3, r3
 800b718:	431a      	orrs	r2, r3
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	68db      	ldr	r3, [r3, #12]
 800b71e:	3b01      	subs	r3, #1
 800b720:	041b      	lsls	r3, r3, #16
 800b722:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b726:	431a      	orrs	r2, r3
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	691b      	ldr	r3, [r3, #16]
 800b72c:	3b01      	subs	r3, #1
 800b72e:	061b      	lsls	r3, r3, #24
 800b730:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b734:	4931      	ldr	r1, [pc, #196]	@ (800b7fc <RCCEx_PLL3_Config+0x15c>)
 800b736:	4313      	orrs	r3, r2
 800b738:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b73a:	4b30      	ldr	r3, [pc, #192]	@ (800b7fc <RCCEx_PLL3_Config+0x15c>)
 800b73c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b73e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	695b      	ldr	r3, [r3, #20]
 800b746:	492d      	ldr	r1, [pc, #180]	@ (800b7fc <RCCEx_PLL3_Config+0x15c>)
 800b748:	4313      	orrs	r3, r2
 800b74a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b74c:	4b2b      	ldr	r3, [pc, #172]	@ (800b7fc <RCCEx_PLL3_Config+0x15c>)
 800b74e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b750:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	699b      	ldr	r3, [r3, #24]
 800b758:	4928      	ldr	r1, [pc, #160]	@ (800b7fc <RCCEx_PLL3_Config+0x15c>)
 800b75a:	4313      	orrs	r3, r2
 800b75c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b75e:	4b27      	ldr	r3, [pc, #156]	@ (800b7fc <RCCEx_PLL3_Config+0x15c>)
 800b760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b762:	4a26      	ldr	r2, [pc, #152]	@ (800b7fc <RCCEx_PLL3_Config+0x15c>)
 800b764:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b768:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b76a:	4b24      	ldr	r3, [pc, #144]	@ (800b7fc <RCCEx_PLL3_Config+0x15c>)
 800b76c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b76e:	4b24      	ldr	r3, [pc, #144]	@ (800b800 <RCCEx_PLL3_Config+0x160>)
 800b770:	4013      	ands	r3, r2
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	69d2      	ldr	r2, [r2, #28]
 800b776:	00d2      	lsls	r2, r2, #3
 800b778:	4920      	ldr	r1, [pc, #128]	@ (800b7fc <RCCEx_PLL3_Config+0x15c>)
 800b77a:	4313      	orrs	r3, r2
 800b77c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b77e:	4b1f      	ldr	r3, [pc, #124]	@ (800b7fc <RCCEx_PLL3_Config+0x15c>)
 800b780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b782:	4a1e      	ldr	r2, [pc, #120]	@ (800b7fc <RCCEx_PLL3_Config+0x15c>)
 800b784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b788:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d106      	bne.n	800b79e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b790:	4b1a      	ldr	r3, [pc, #104]	@ (800b7fc <RCCEx_PLL3_Config+0x15c>)
 800b792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b794:	4a19      	ldr	r2, [pc, #100]	@ (800b7fc <RCCEx_PLL3_Config+0x15c>)
 800b796:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b79a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b79c:	e00f      	b.n	800b7be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d106      	bne.n	800b7b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b7a4:	4b15      	ldr	r3, [pc, #84]	@ (800b7fc <RCCEx_PLL3_Config+0x15c>)
 800b7a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7a8:	4a14      	ldr	r2, [pc, #80]	@ (800b7fc <RCCEx_PLL3_Config+0x15c>)
 800b7aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b7ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b7b0:	e005      	b.n	800b7be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b7b2:	4b12      	ldr	r3, [pc, #72]	@ (800b7fc <RCCEx_PLL3_Config+0x15c>)
 800b7b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7b6:	4a11      	ldr	r2, [pc, #68]	@ (800b7fc <RCCEx_PLL3_Config+0x15c>)
 800b7b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b7bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b7be:	4b0f      	ldr	r3, [pc, #60]	@ (800b7fc <RCCEx_PLL3_Config+0x15c>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4a0e      	ldr	r2, [pc, #56]	@ (800b7fc <RCCEx_PLL3_Config+0x15c>)
 800b7c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b7c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7ca:	f7f7 fe7d 	bl	80034c8 <HAL_GetTick>
 800b7ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b7d0:	e008      	b.n	800b7e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b7d2:	f7f7 fe79 	bl	80034c8 <HAL_GetTick>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	1ad3      	subs	r3, r2, r3
 800b7dc:	2b02      	cmp	r3, #2
 800b7de:	d901      	bls.n	800b7e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b7e0:	2303      	movs	r3, #3
 800b7e2:	e006      	b.n	800b7f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b7e4:	4b05      	ldr	r3, [pc, #20]	@ (800b7fc <RCCEx_PLL3_Config+0x15c>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d0f0      	beq.n	800b7d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b7f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3710      	adds	r7, #16
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	bf00      	nop
 800b7fc:	58024400 	.word	0x58024400
 800b800:	ffff0007 	.word	0xffff0007

0800b804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d101      	bne.n	800b816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b812:	2301      	movs	r3, #1
 800b814:	e049      	b.n	800b8aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b81c:	b2db      	uxtb	r3, r3
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d106      	bne.n	800b830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2200      	movs	r2, #0
 800b826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 f841 	bl	800b8b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2202      	movs	r2, #2
 800b834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681a      	ldr	r2, [r3, #0]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	3304      	adds	r3, #4
 800b840:	4619      	mov	r1, r3
 800b842:	4610      	mov	r0, r2
 800b844:	f000 f9e8 	bl	800bc18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2201      	movs	r2, #1
 800b84c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2201      	movs	r2, #1
 800b864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2201      	movs	r2, #1
 800b86c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2201      	movs	r2, #1
 800b874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2201      	movs	r2, #1
 800b87c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2201      	movs	r2, #1
 800b884:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2201      	movs	r2, #1
 800b88c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2201      	movs	r2, #1
 800b894:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2201      	movs	r2, #1
 800b89c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b8a8:	2300      	movs	r3, #0
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3708      	adds	r7, #8
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}

0800b8b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b8b2:	b480      	push	{r7}
 800b8b4:	b083      	sub	sp, #12
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b8ba:	bf00      	nop
 800b8bc:	370c      	adds	r7, #12
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr
	...

0800b8c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d001      	beq.n	800b8e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	e054      	b.n	800b98a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2202      	movs	r2, #2
 800b8e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	68da      	ldr	r2, [r3, #12]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f042 0201 	orr.w	r2, r2, #1
 800b8f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4a26      	ldr	r2, [pc, #152]	@ (800b998 <HAL_TIM_Base_Start_IT+0xd0>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d022      	beq.n	800b948 <HAL_TIM_Base_Start_IT+0x80>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b90a:	d01d      	beq.n	800b948 <HAL_TIM_Base_Start_IT+0x80>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a22      	ldr	r2, [pc, #136]	@ (800b99c <HAL_TIM_Base_Start_IT+0xd4>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d018      	beq.n	800b948 <HAL_TIM_Base_Start_IT+0x80>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4a21      	ldr	r2, [pc, #132]	@ (800b9a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d013      	beq.n	800b948 <HAL_TIM_Base_Start_IT+0x80>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4a1f      	ldr	r2, [pc, #124]	@ (800b9a4 <HAL_TIM_Base_Start_IT+0xdc>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d00e      	beq.n	800b948 <HAL_TIM_Base_Start_IT+0x80>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4a1e      	ldr	r2, [pc, #120]	@ (800b9a8 <HAL_TIM_Base_Start_IT+0xe0>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d009      	beq.n	800b948 <HAL_TIM_Base_Start_IT+0x80>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4a1c      	ldr	r2, [pc, #112]	@ (800b9ac <HAL_TIM_Base_Start_IT+0xe4>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d004      	beq.n	800b948 <HAL_TIM_Base_Start_IT+0x80>
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	4a1b      	ldr	r2, [pc, #108]	@ (800b9b0 <HAL_TIM_Base_Start_IT+0xe8>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d115      	bne.n	800b974 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	689a      	ldr	r2, [r3, #8]
 800b94e:	4b19      	ldr	r3, [pc, #100]	@ (800b9b4 <HAL_TIM_Base_Start_IT+0xec>)
 800b950:	4013      	ands	r3, r2
 800b952:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2b06      	cmp	r3, #6
 800b958:	d015      	beq.n	800b986 <HAL_TIM_Base_Start_IT+0xbe>
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b960:	d011      	beq.n	800b986 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f042 0201 	orr.w	r2, r2, #1
 800b970:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b972:	e008      	b.n	800b986 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f042 0201 	orr.w	r2, r2, #1
 800b982:	601a      	str	r2, [r3, #0]
 800b984:	e000      	b.n	800b988 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b986:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b988:	2300      	movs	r3, #0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3714      	adds	r7, #20
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr
 800b996:	bf00      	nop
 800b998:	40010000 	.word	0x40010000
 800b99c:	40000400 	.word	0x40000400
 800b9a0:	40000800 	.word	0x40000800
 800b9a4:	40000c00 	.word	0x40000c00
 800b9a8:	40010400 	.word	0x40010400
 800b9ac:	40001800 	.word	0x40001800
 800b9b0:	40014000 	.word	0x40014000
 800b9b4:	00010007 	.word	0x00010007

0800b9b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	68db      	ldr	r3, [r3, #12]
 800b9c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	691b      	ldr	r3, [r3, #16]
 800b9ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	f003 0302 	and.w	r3, r3, #2
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d020      	beq.n	800ba1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f003 0302 	and.w	r3, r3, #2
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d01b      	beq.n	800ba1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f06f 0202 	mvn.w	r2, #2
 800b9ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	699b      	ldr	r3, [r3, #24]
 800b9fa:	f003 0303 	and.w	r3, r3, #3
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d003      	beq.n	800ba0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 f8e9 	bl	800bbda <HAL_TIM_IC_CaptureCallback>
 800ba08:	e005      	b.n	800ba16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 f8db 	bl	800bbc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f000 f8ec 	bl	800bbee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	f003 0304 	and.w	r3, r3, #4
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d020      	beq.n	800ba68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f003 0304 	and.w	r3, r3, #4
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d01b      	beq.n	800ba68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f06f 0204 	mvn.w	r2, #4
 800ba38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2202      	movs	r2, #2
 800ba3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	699b      	ldr	r3, [r3, #24]
 800ba46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d003      	beq.n	800ba56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 f8c3 	bl	800bbda <HAL_TIM_IC_CaptureCallback>
 800ba54:	e005      	b.n	800ba62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f000 f8b5 	bl	800bbc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 f8c6 	bl	800bbee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2200      	movs	r2, #0
 800ba66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	f003 0308 	and.w	r3, r3, #8
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d020      	beq.n	800bab4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f003 0308 	and.w	r3, r3, #8
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d01b      	beq.n	800bab4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f06f 0208 	mvn.w	r2, #8
 800ba84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2204      	movs	r2, #4
 800ba8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	69db      	ldr	r3, [r3, #28]
 800ba92:	f003 0303 	and.w	r3, r3, #3
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d003      	beq.n	800baa2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 f89d 	bl	800bbda <HAL_TIM_IC_CaptureCallback>
 800baa0:	e005      	b.n	800baae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f000 f88f 	bl	800bbc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f000 f8a0 	bl	800bbee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2200      	movs	r2, #0
 800bab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	f003 0310 	and.w	r3, r3, #16
 800baba:	2b00      	cmp	r3, #0
 800babc:	d020      	beq.n	800bb00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f003 0310 	and.w	r3, r3, #16
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d01b      	beq.n	800bb00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f06f 0210 	mvn.w	r2, #16
 800bad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2208      	movs	r2, #8
 800bad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	69db      	ldr	r3, [r3, #28]
 800bade:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d003      	beq.n	800baee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 f877 	bl	800bbda <HAL_TIM_IC_CaptureCallback>
 800baec:	e005      	b.n	800bafa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 f869 	bl	800bbc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f000 f87a 	bl	800bbee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2200      	movs	r2, #0
 800bafe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	f003 0301 	and.w	r3, r3, #1
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d00c      	beq.n	800bb24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f003 0301 	and.w	r3, r3, #1
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d007      	beq.n	800bb24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f06f 0201 	mvn.w	r2, #1
 800bb1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f7f6 f816 	bl	8001b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d104      	bne.n	800bb38 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d00c      	beq.n	800bb52 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d007      	beq.n	800bb52 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bb4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f000 f913 	bl	800bd78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d00c      	beq.n	800bb76 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d007      	beq.n	800bb76 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bb6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 f90b 	bl	800bd8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d00c      	beq.n	800bb9a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d007      	beq.n	800bb9a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bb92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f000 f834 	bl	800bc02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	f003 0320 	and.w	r3, r3, #32
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d00c      	beq.n	800bbbe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f003 0320 	and.w	r3, r3, #32
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d007      	beq.n	800bbbe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f06f 0220 	mvn.w	r2, #32
 800bbb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f000 f8d3 	bl	800bd64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bbbe:	bf00      	nop
 800bbc0:	3710      	adds	r7, #16
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}

0800bbc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bbc6:	b480      	push	{r7}
 800bbc8:	b083      	sub	sp, #12
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bbce:	bf00      	nop
 800bbd0:	370c      	adds	r7, #12
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr

0800bbda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bbda:	b480      	push	{r7}
 800bbdc:	b083      	sub	sp, #12
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bbe2:	bf00      	nop
 800bbe4:	370c      	adds	r7, #12
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr

0800bbee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bbee:	b480      	push	{r7}
 800bbf0:	b083      	sub	sp, #12
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bbf6:	bf00      	nop
 800bbf8:	370c      	adds	r7, #12
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc00:	4770      	bx	lr

0800bc02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc02:	b480      	push	{r7}
 800bc04:	b083      	sub	sp, #12
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc0a:	bf00      	nop
 800bc0c:	370c      	adds	r7, #12
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr
	...

0800bc18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b085      	sub	sp, #20
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	4a46      	ldr	r2, [pc, #280]	@ (800bd44 <TIM_Base_SetConfig+0x12c>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d013      	beq.n	800bc58 <TIM_Base_SetConfig+0x40>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc36:	d00f      	beq.n	800bc58 <TIM_Base_SetConfig+0x40>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	4a43      	ldr	r2, [pc, #268]	@ (800bd48 <TIM_Base_SetConfig+0x130>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d00b      	beq.n	800bc58 <TIM_Base_SetConfig+0x40>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	4a42      	ldr	r2, [pc, #264]	@ (800bd4c <TIM_Base_SetConfig+0x134>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d007      	beq.n	800bc58 <TIM_Base_SetConfig+0x40>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	4a41      	ldr	r2, [pc, #260]	@ (800bd50 <TIM_Base_SetConfig+0x138>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d003      	beq.n	800bc58 <TIM_Base_SetConfig+0x40>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	4a40      	ldr	r2, [pc, #256]	@ (800bd54 <TIM_Base_SetConfig+0x13c>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d108      	bne.n	800bc6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	68fa      	ldr	r2, [r7, #12]
 800bc66:	4313      	orrs	r3, r2
 800bc68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	4a35      	ldr	r2, [pc, #212]	@ (800bd44 <TIM_Base_SetConfig+0x12c>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d01f      	beq.n	800bcb2 <TIM_Base_SetConfig+0x9a>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc78:	d01b      	beq.n	800bcb2 <TIM_Base_SetConfig+0x9a>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	4a32      	ldr	r2, [pc, #200]	@ (800bd48 <TIM_Base_SetConfig+0x130>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d017      	beq.n	800bcb2 <TIM_Base_SetConfig+0x9a>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	4a31      	ldr	r2, [pc, #196]	@ (800bd4c <TIM_Base_SetConfig+0x134>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d013      	beq.n	800bcb2 <TIM_Base_SetConfig+0x9a>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	4a30      	ldr	r2, [pc, #192]	@ (800bd50 <TIM_Base_SetConfig+0x138>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d00f      	beq.n	800bcb2 <TIM_Base_SetConfig+0x9a>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	4a2f      	ldr	r2, [pc, #188]	@ (800bd54 <TIM_Base_SetConfig+0x13c>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d00b      	beq.n	800bcb2 <TIM_Base_SetConfig+0x9a>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	4a2e      	ldr	r2, [pc, #184]	@ (800bd58 <TIM_Base_SetConfig+0x140>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d007      	beq.n	800bcb2 <TIM_Base_SetConfig+0x9a>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	4a2d      	ldr	r2, [pc, #180]	@ (800bd5c <TIM_Base_SetConfig+0x144>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d003      	beq.n	800bcb2 <TIM_Base_SetConfig+0x9a>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	4a2c      	ldr	r2, [pc, #176]	@ (800bd60 <TIM_Base_SetConfig+0x148>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d108      	bne.n	800bcc4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bcb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	68db      	ldr	r3, [r3, #12]
 800bcbe:	68fa      	ldr	r2, [r7, #12]
 800bcc0:	4313      	orrs	r3, r2
 800bcc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	695b      	ldr	r3, [r3, #20]
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	68fa      	ldr	r2, [r7, #12]
 800bcd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	689a      	ldr	r2, [r3, #8]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	4a16      	ldr	r2, [pc, #88]	@ (800bd44 <TIM_Base_SetConfig+0x12c>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d00f      	beq.n	800bd10 <TIM_Base_SetConfig+0xf8>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	4a18      	ldr	r2, [pc, #96]	@ (800bd54 <TIM_Base_SetConfig+0x13c>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d00b      	beq.n	800bd10 <TIM_Base_SetConfig+0xf8>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	4a17      	ldr	r2, [pc, #92]	@ (800bd58 <TIM_Base_SetConfig+0x140>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d007      	beq.n	800bd10 <TIM_Base_SetConfig+0xf8>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	4a16      	ldr	r2, [pc, #88]	@ (800bd5c <TIM_Base_SetConfig+0x144>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d003      	beq.n	800bd10 <TIM_Base_SetConfig+0xf8>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	4a15      	ldr	r2, [pc, #84]	@ (800bd60 <TIM_Base_SetConfig+0x148>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d103      	bne.n	800bd18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	691a      	ldr	r2, [r3, #16]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	691b      	ldr	r3, [r3, #16]
 800bd22:	f003 0301 	and.w	r3, r3, #1
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	d105      	bne.n	800bd36 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	691b      	ldr	r3, [r3, #16]
 800bd2e:	f023 0201 	bic.w	r2, r3, #1
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	611a      	str	r2, [r3, #16]
  }
}
 800bd36:	bf00      	nop
 800bd38:	3714      	adds	r7, #20
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd40:	4770      	bx	lr
 800bd42:	bf00      	nop
 800bd44:	40010000 	.word	0x40010000
 800bd48:	40000400 	.word	0x40000400
 800bd4c:	40000800 	.word	0x40000800
 800bd50:	40000c00 	.word	0x40000c00
 800bd54:	40010400 	.word	0x40010400
 800bd58:	40014000 	.word	0x40014000
 800bd5c:	40014400 	.word	0x40014400
 800bd60:	40014800 	.word	0x40014800

0800bd64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b083      	sub	sp, #12
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bd6c:	bf00      	nop
 800bd6e:	370c      	adds	r7, #12
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr

0800bd78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b083      	sub	sp, #12
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bd80:	bf00      	nop
 800bd82:	370c      	adds	r7, #12
 800bd84:	46bd      	mov	sp, r7
 800bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8a:	4770      	bx	lr

0800bd8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b083      	sub	sp, #12
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bd94:	bf00      	nop
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b082      	sub	sp, #8
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d101      	bne.n	800bdb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e042      	b.n	800be38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d106      	bne.n	800bdca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f7f7 f843 	bl	8002e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2224      	movs	r2, #36	@ 0x24
 800bdce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	681a      	ldr	r2, [r3, #0]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f022 0201 	bic.w	r2, r2, #1
 800bde0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d002      	beq.n	800bdf0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f001 fae0 	bl	800d3b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f000 fd75 	bl	800c8e0 <UART_SetConfig>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	d101      	bne.n	800be00 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	e01b      	b.n	800be38 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	685a      	ldr	r2, [r3, #4]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800be0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	689a      	ldr	r2, [r3, #8]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800be1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f042 0201 	orr.w	r2, r2, #1
 800be2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f001 fb5f 	bl	800d4f4 <UART_CheckIdleState>
 800be36:	4603      	mov	r3, r0
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3708      	adds	r7, #8
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b08a      	sub	sp, #40	@ 0x28
 800be44:	af00      	add	r7, sp, #0
 800be46:	60f8      	str	r0, [r7, #12]
 800be48:	60b9      	str	r1, [r7, #8]
 800be4a:	4613      	mov	r3, r2
 800be4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be54:	2b20      	cmp	r3, #32
 800be56:	d167      	bne.n	800bf28 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d002      	beq.n	800be64 <HAL_UART_Transmit_DMA+0x24>
 800be5e:	88fb      	ldrh	r3, [r7, #6]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d101      	bne.n	800be68 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800be64:	2301      	movs	r3, #1
 800be66:	e060      	b.n	800bf2a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	68ba      	ldr	r2, [r7, #8]
 800be6c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	88fa      	ldrh	r2, [r7, #6]
 800be72:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	88fa      	ldrh	r2, [r7, #6]
 800be7a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2200      	movs	r2, #0
 800be82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2221      	movs	r2, #33	@ 0x21
 800be8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800be92:	2b00      	cmp	r3, #0
 800be94:	d028      	beq.n	800bee8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800be9a:	4a26      	ldr	r2, [pc, #152]	@ (800bf34 <HAL_UART_Transmit_DMA+0xf4>)
 800be9c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bea2:	4a25      	ldr	r2, [pc, #148]	@ (800bf38 <HAL_UART_Transmit_DMA+0xf8>)
 800bea4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800beaa:	4a24      	ldr	r2, [pc, #144]	@ (800bf3c <HAL_UART_Transmit_DMA+0xfc>)
 800beac:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800beb2:	2200      	movs	r2, #0
 800beb4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bebe:	4619      	mov	r1, r3
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	3328      	adds	r3, #40	@ 0x28
 800bec6:	461a      	mov	r2, r3
 800bec8:	88fb      	ldrh	r3, [r7, #6]
 800beca:	f7f9 fa6b 	bl	80053a4 <HAL_DMA_Start_IT>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d009      	beq.n	800bee8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	2210      	movs	r2, #16
 800bed8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2220      	movs	r2, #32
 800bee0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800bee4:	2301      	movs	r3, #1
 800bee6:	e020      	b.n	800bf2a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2240      	movs	r2, #64	@ 0x40
 800beee:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	3308      	adds	r3, #8
 800bef6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	e853 3f00 	ldrex	r3, [r3]
 800befe:	613b      	str	r3, [r7, #16]
   return(result);
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf06:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	3308      	adds	r3, #8
 800bf0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf10:	623a      	str	r2, [r7, #32]
 800bf12:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf14:	69f9      	ldr	r1, [r7, #28]
 800bf16:	6a3a      	ldr	r2, [r7, #32]
 800bf18:	e841 2300 	strex	r3, r2, [r1]
 800bf1c:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf1e:	69bb      	ldr	r3, [r7, #24]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d1e5      	bne.n	800bef0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800bf24:	2300      	movs	r3, #0
 800bf26:	e000      	b.n	800bf2a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800bf28:	2302      	movs	r3, #2
  }
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3728      	adds	r7, #40	@ 0x28
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	0800d9c1 	.word	0x0800d9c1
 800bf38:	0800da57 	.word	0x0800da57
 800bf3c:	0800dbd9 	.word	0x0800dbd9

0800bf40 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b08a      	sub	sp, #40	@ 0x28
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	4613      	mov	r3, r2
 800bf4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf54:	2b20      	cmp	r3, #32
 800bf56:	d137      	bne.n	800bfc8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d002      	beq.n	800bf64 <HAL_UART_Receive_DMA+0x24>
 800bf5e:	88fb      	ldrh	r3, [r7, #6]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d101      	bne.n	800bf68 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bf64:	2301      	movs	r3, #1
 800bf66:	e030      	b.n	800bfca <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	4a18      	ldr	r2, [pc, #96]	@ (800bfd4 <HAL_UART_Receive_DMA+0x94>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d01f      	beq.n	800bfb8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d018      	beq.n	800bfb8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	e853 3f00 	ldrex	r3, [r3]
 800bf92:	613b      	str	r3, [r7, #16]
   return(result);
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bf9a:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa4:	623b      	str	r3, [r7, #32]
 800bfa6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa8:	69f9      	ldr	r1, [r7, #28]
 800bfaa:	6a3a      	ldr	r2, [r7, #32]
 800bfac:	e841 2300 	strex	r3, r2, [r1]
 800bfb0:	61bb      	str	r3, [r7, #24]
   return(result);
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d1e6      	bne.n	800bf86 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bfb8:	88fb      	ldrh	r3, [r7, #6]
 800bfba:	461a      	mov	r2, r3
 800bfbc:	68b9      	ldr	r1, [r7, #8]
 800bfbe:	68f8      	ldr	r0, [r7, #12]
 800bfc0:	f001 fbb0 	bl	800d724 <UART_Start_Receive_DMA>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	e000      	b.n	800bfca <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bfc8:	2302      	movs	r3, #2
  }
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3728      	adds	r7, #40	@ 0x28
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	58000c00 	.word	0x58000c00

0800bfd8 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b090      	sub	sp, #64	@ 0x40
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bfe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bfee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	689b      	ldr	r3, [r3, #8]
 800bff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bffa:	2b80      	cmp	r3, #128	@ 0x80
 800bffc:	d139      	bne.n	800c072 <HAL_UART_DMAStop+0x9a>
 800bffe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c000:	2b21      	cmp	r3, #33	@ 0x21
 800c002:	d136      	bne.n	800c072 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	3308      	adds	r3, #8
 800c00a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c00c:	6a3b      	ldr	r3, [r7, #32]
 800c00e:	e853 3f00 	ldrex	r3, [r3]
 800c012:	61fb      	str	r3, [r7, #28]
   return(result);
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c01a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	3308      	adds	r3, #8
 800c022:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c024:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c026:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c028:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c02a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c02c:	e841 2300 	strex	r3, r2, [r1]
 800c030:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c034:	2b00      	cmp	r3, #0
 800c036:	d1e5      	bne.n	800c004 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d015      	beq.n	800c06c <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c044:	4618      	mov	r0, r3
 800c046:	f7f9 fc17 	bl	8005878 <HAL_DMA_Abort>
 800c04a:	4603      	mov	r3, r0
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d00d      	beq.n	800c06c <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c054:	4618      	mov	r0, r3
 800c056:	f7fb f89d 	bl	8007194 <HAL_DMA_GetError>
 800c05a:	4603      	mov	r3, r0
 800c05c:	2b20      	cmp	r3, #32
 800c05e:	d105      	bne.n	800c06c <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2210      	movs	r2, #16
 800c064:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c068:	2303      	movs	r3, #3
 800c06a:	e047      	b.n	800c0fc <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f001 fbff 	bl	800d870 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	689b      	ldr	r3, [r3, #8]
 800c078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c07c:	2b40      	cmp	r3, #64	@ 0x40
 800c07e:	d13c      	bne.n	800c0fa <HAL_UART_DMAStop+0x122>
 800c080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c082:	2b22      	cmp	r3, #34	@ 0x22
 800c084:	d139      	bne.n	800c0fa <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	3308      	adds	r3, #8
 800c08c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	e853 3f00 	ldrex	r3, [r3]
 800c094:	60bb      	str	r3, [r7, #8]
   return(result);
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c09c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	3308      	adds	r3, #8
 800c0a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0a6:	61ba      	str	r2, [r7, #24]
 800c0a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0aa:	6979      	ldr	r1, [r7, #20]
 800c0ac:	69ba      	ldr	r2, [r7, #24]
 800c0ae:	e841 2300 	strex	r3, r2, [r1]
 800c0b2:	613b      	str	r3, [r7, #16]
   return(result);
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d1e5      	bne.n	800c086 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d017      	beq.n	800c0f4 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7f9 fbd4 	bl	8005878 <HAL_DMA_Abort>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d00e      	beq.n	800c0f4 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7fb f859 	bl	8007194 <HAL_DMA_GetError>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b20      	cmp	r3, #32
 800c0e6:	d105      	bne.n	800c0f4 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2210      	movs	r2, #16
 800c0ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c0f0:	2303      	movs	r3, #3
 800c0f2:	e003      	b.n	800c0fc <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f001 fbfd 	bl	800d8f4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800c0fa:	2300      	movs	r3, #0
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3740      	adds	r7, #64	@ 0x40
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b0ba      	sub	sp, #232	@ 0xe8
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	69db      	ldr	r3, [r3, #28]
 800c112:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	689b      	ldr	r3, [r3, #8]
 800c126:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c12a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c12e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c132:	4013      	ands	r3, r2
 800c134:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c138:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d11b      	bne.n	800c178 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c144:	f003 0320 	and.w	r3, r3, #32
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d015      	beq.n	800c178 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c14c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c150:	f003 0320 	and.w	r3, r3, #32
 800c154:	2b00      	cmp	r3, #0
 800c156:	d105      	bne.n	800c164 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c15c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c160:	2b00      	cmp	r3, #0
 800c162:	d009      	beq.n	800c178 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c168:	2b00      	cmp	r3, #0
 800c16a:	f000 8377 	beq.w	800c85c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	4798      	blx	r3
      }
      return;
 800c176:	e371      	b.n	800c85c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c178:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	f000 8123 	beq.w	800c3c8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c182:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c186:	4b8d      	ldr	r3, [pc, #564]	@ (800c3bc <HAL_UART_IRQHandler+0x2b8>)
 800c188:	4013      	ands	r3, r2
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d106      	bne.n	800c19c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c18e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c192:	4b8b      	ldr	r3, [pc, #556]	@ (800c3c0 <HAL_UART_IRQHandler+0x2bc>)
 800c194:	4013      	ands	r3, r2
 800c196:	2b00      	cmp	r3, #0
 800c198:	f000 8116 	beq.w	800c3c8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c19c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1a0:	f003 0301 	and.w	r3, r3, #1
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d011      	beq.n	800c1cc <HAL_UART_IRQHandler+0xc8>
 800c1a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d00b      	beq.n	800c1cc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1c2:	f043 0201 	orr.w	r2, r3, #1
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c1cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1d0:	f003 0302 	and.w	r3, r3, #2
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d011      	beq.n	800c1fc <HAL_UART_IRQHandler+0xf8>
 800c1d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c1dc:	f003 0301 	and.w	r3, r3, #1
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d00b      	beq.n	800c1fc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	2202      	movs	r2, #2
 800c1ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1f2:	f043 0204 	orr.w	r2, r3, #4
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c1fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c200:	f003 0304 	and.w	r3, r3, #4
 800c204:	2b00      	cmp	r3, #0
 800c206:	d011      	beq.n	800c22c <HAL_UART_IRQHandler+0x128>
 800c208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c20c:	f003 0301 	and.w	r3, r3, #1
 800c210:	2b00      	cmp	r3, #0
 800c212:	d00b      	beq.n	800c22c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	2204      	movs	r2, #4
 800c21a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c222:	f043 0202 	orr.w	r2, r3, #2
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c22c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c230:	f003 0308 	and.w	r3, r3, #8
 800c234:	2b00      	cmp	r3, #0
 800c236:	d017      	beq.n	800c268 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c23c:	f003 0320 	and.w	r3, r3, #32
 800c240:	2b00      	cmp	r3, #0
 800c242:	d105      	bne.n	800c250 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c244:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c248:	4b5c      	ldr	r3, [pc, #368]	@ (800c3bc <HAL_UART_IRQHandler+0x2b8>)
 800c24a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d00b      	beq.n	800c268 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	2208      	movs	r2, #8
 800c256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c25e:	f043 0208 	orr.w	r2, r3, #8
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c26c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c270:	2b00      	cmp	r3, #0
 800c272:	d012      	beq.n	800c29a <HAL_UART_IRQHandler+0x196>
 800c274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c278:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d00c      	beq.n	800c29a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c288:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c290:	f043 0220 	orr.w	r2, r3, #32
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	f000 82dd 	beq.w	800c860 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c2a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2aa:	f003 0320 	and.w	r3, r3, #32
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d013      	beq.n	800c2da <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c2b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c2b6:	f003 0320 	and.w	r3, r3, #32
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d105      	bne.n	800c2ca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c2be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c2c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d007      	beq.n	800c2da <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d003      	beq.n	800c2da <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	689b      	ldr	r3, [r3, #8]
 800c2ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2ee:	2b40      	cmp	r3, #64	@ 0x40
 800c2f0:	d005      	beq.n	800c2fe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c2f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c2f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d054      	beq.n	800c3a8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f001 faf8 	bl	800d8f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c30e:	2b40      	cmp	r3, #64	@ 0x40
 800c310:	d146      	bne.n	800c3a0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	3308      	adds	r3, #8
 800c318:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c31c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c320:	e853 3f00 	ldrex	r3, [r3]
 800c324:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c328:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c32c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c330:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	3308      	adds	r3, #8
 800c33a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c33e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c342:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c346:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c34a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c34e:	e841 2300 	strex	r3, r2, [r1]
 800c352:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c356:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d1d9      	bne.n	800c312 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c364:	2b00      	cmp	r3, #0
 800c366:	d017      	beq.n	800c398 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c36e:	4a15      	ldr	r2, [pc, #84]	@ (800c3c4 <HAL_UART_IRQHandler+0x2c0>)
 800c370:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c378:	4618      	mov	r0, r3
 800c37a:	f7f9 fd9b 	bl	8005eb4 <HAL_DMA_Abort_IT>
 800c37e:	4603      	mov	r3, r0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d019      	beq.n	800c3b8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c38a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c38c:	687a      	ldr	r2, [r7, #4]
 800c38e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c392:	4610      	mov	r0, r2
 800c394:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c396:	e00f      	b.n	800c3b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f000 fa8b 	bl	800c8b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c39e:	e00b      	b.n	800c3b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f000 fa87 	bl	800c8b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3a6:	e007      	b.n	800c3b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f000 fa83 	bl	800c8b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c3b6:	e253      	b.n	800c860 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3b8:	bf00      	nop
    return;
 800c3ba:	e251      	b.n	800c860 <HAL_UART_IRQHandler+0x75c>
 800c3bc:	10000001 	.word	0x10000001
 800c3c0:	04000120 	.word	0x04000120
 800c3c4:	0800dc59 	.word	0x0800dc59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c3cc:	2b01      	cmp	r3, #1
 800c3ce:	f040 81e7 	bne.w	800c7a0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c3d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3d6:	f003 0310 	and.w	r3, r3, #16
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	f000 81e0 	beq.w	800c7a0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c3e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c3e4:	f003 0310 	and.w	r3, r3, #16
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	f000 81d9 	beq.w	800c7a0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	2210      	movs	r2, #16
 800c3f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	689b      	ldr	r3, [r3, #8]
 800c3fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c400:	2b40      	cmp	r3, #64	@ 0x40
 800c402:	f040 8151 	bne.w	800c6a8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	4a96      	ldr	r2, [pc, #600]	@ (800c668 <HAL_UART_IRQHandler+0x564>)
 800c410:	4293      	cmp	r3, r2
 800c412:	d068      	beq.n	800c4e6 <HAL_UART_IRQHandler+0x3e2>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4a93      	ldr	r2, [pc, #588]	@ (800c66c <HAL_UART_IRQHandler+0x568>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d061      	beq.n	800c4e6 <HAL_UART_IRQHandler+0x3e2>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	4a91      	ldr	r2, [pc, #580]	@ (800c670 <HAL_UART_IRQHandler+0x56c>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d05a      	beq.n	800c4e6 <HAL_UART_IRQHandler+0x3e2>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4a8e      	ldr	r2, [pc, #568]	@ (800c674 <HAL_UART_IRQHandler+0x570>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d053      	beq.n	800c4e6 <HAL_UART_IRQHandler+0x3e2>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a8c      	ldr	r2, [pc, #560]	@ (800c678 <HAL_UART_IRQHandler+0x574>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d04c      	beq.n	800c4e6 <HAL_UART_IRQHandler+0x3e2>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a89      	ldr	r2, [pc, #548]	@ (800c67c <HAL_UART_IRQHandler+0x578>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d045      	beq.n	800c4e6 <HAL_UART_IRQHandler+0x3e2>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	4a87      	ldr	r2, [pc, #540]	@ (800c680 <HAL_UART_IRQHandler+0x57c>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d03e      	beq.n	800c4e6 <HAL_UART_IRQHandler+0x3e2>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a84      	ldr	r2, [pc, #528]	@ (800c684 <HAL_UART_IRQHandler+0x580>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d037      	beq.n	800c4e6 <HAL_UART_IRQHandler+0x3e2>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	4a82      	ldr	r2, [pc, #520]	@ (800c688 <HAL_UART_IRQHandler+0x584>)
 800c480:	4293      	cmp	r3, r2
 800c482:	d030      	beq.n	800c4e6 <HAL_UART_IRQHandler+0x3e2>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4a7f      	ldr	r2, [pc, #508]	@ (800c68c <HAL_UART_IRQHandler+0x588>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d029      	beq.n	800c4e6 <HAL_UART_IRQHandler+0x3e2>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	4a7d      	ldr	r2, [pc, #500]	@ (800c690 <HAL_UART_IRQHandler+0x58c>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d022      	beq.n	800c4e6 <HAL_UART_IRQHandler+0x3e2>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a7a      	ldr	r2, [pc, #488]	@ (800c694 <HAL_UART_IRQHandler+0x590>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d01b      	beq.n	800c4e6 <HAL_UART_IRQHandler+0x3e2>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4a78      	ldr	r2, [pc, #480]	@ (800c698 <HAL_UART_IRQHandler+0x594>)
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d014      	beq.n	800c4e6 <HAL_UART_IRQHandler+0x3e2>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4a75      	ldr	r2, [pc, #468]	@ (800c69c <HAL_UART_IRQHandler+0x598>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d00d      	beq.n	800c4e6 <HAL_UART_IRQHandler+0x3e2>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4a73      	ldr	r2, [pc, #460]	@ (800c6a0 <HAL_UART_IRQHandler+0x59c>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d006      	beq.n	800c4e6 <HAL_UART_IRQHandler+0x3e2>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a70      	ldr	r2, [pc, #448]	@ (800c6a4 <HAL_UART_IRQHandler+0x5a0>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d106      	bne.n	800c4f4 <HAL_UART_IRQHandler+0x3f0>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	685b      	ldr	r3, [r3, #4]
 800c4f0:	b29b      	uxth	r3, r3
 800c4f2:	e005      	b.n	800c500 <HAL_UART_IRQHandler+0x3fc>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	b29b      	uxth	r3, r3
 800c500:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c504:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c508:	2b00      	cmp	r3, #0
 800c50a:	f000 81ab 	beq.w	800c864 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c514:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c518:	429a      	cmp	r2, r3
 800c51a:	f080 81a3 	bcs.w	800c864 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c524:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c52e:	69db      	ldr	r3, [r3, #28]
 800c530:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c534:	f000 8087 	beq.w	800c646 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c540:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c544:	e853 3f00 	ldrex	r3, [r3]
 800c548:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c54c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c550:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c554:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	461a      	mov	r2, r3
 800c55e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c562:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c566:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c56a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c56e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c572:	e841 2300 	strex	r3, r2, [r1]
 800c576:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c57a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d1da      	bne.n	800c538 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	3308      	adds	r3, #8
 800c588:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c58a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c58c:	e853 3f00 	ldrex	r3, [r3]
 800c590:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c592:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c594:	f023 0301 	bic.w	r3, r3, #1
 800c598:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	3308      	adds	r3, #8
 800c5a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c5a6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c5aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c5ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c5b2:	e841 2300 	strex	r3, r2, [r1]
 800c5b6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c5b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d1e1      	bne.n	800c582 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	3308      	adds	r3, #8
 800c5c4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c5c8:	e853 3f00 	ldrex	r3, [r3]
 800c5cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c5ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c5d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	3308      	adds	r3, #8
 800c5de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c5e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c5e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c5e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c5ea:	e841 2300 	strex	r3, r2, [r1]
 800c5ee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c5f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d1e3      	bne.n	800c5be <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2220      	movs	r2, #32
 800c5fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2200      	movs	r2, #0
 800c602:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c60a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c60c:	e853 3f00 	ldrex	r3, [r3]
 800c610:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c612:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c614:	f023 0310 	bic.w	r3, r3, #16
 800c618:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	461a      	mov	r2, r3
 800c622:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c626:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c628:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c62a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c62c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c62e:	e841 2300 	strex	r3, r2, [r1]
 800c632:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c634:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c636:	2b00      	cmp	r3, #0
 800c638:	d1e4      	bne.n	800c604 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c640:	4618      	mov	r0, r3
 800c642:	f7f9 f919 	bl	8005878 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2202      	movs	r2, #2
 800c64a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c658:	b29b      	uxth	r3, r3
 800c65a:	1ad3      	subs	r3, r2, r3
 800c65c:	b29b      	uxth	r3, r3
 800c65e:	4619      	mov	r1, r3
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 f931 	bl	800c8c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c666:	e0fd      	b.n	800c864 <HAL_UART_IRQHandler+0x760>
 800c668:	40020010 	.word	0x40020010
 800c66c:	40020028 	.word	0x40020028
 800c670:	40020040 	.word	0x40020040
 800c674:	40020058 	.word	0x40020058
 800c678:	40020070 	.word	0x40020070
 800c67c:	40020088 	.word	0x40020088
 800c680:	400200a0 	.word	0x400200a0
 800c684:	400200b8 	.word	0x400200b8
 800c688:	40020410 	.word	0x40020410
 800c68c:	40020428 	.word	0x40020428
 800c690:	40020440 	.word	0x40020440
 800c694:	40020458 	.word	0x40020458
 800c698:	40020470 	.word	0x40020470
 800c69c:	40020488 	.word	0x40020488
 800c6a0:	400204a0 	.word	0x400204a0
 800c6a4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c6b4:	b29b      	uxth	r3, r3
 800c6b6:	1ad3      	subs	r3, r2, r3
 800c6b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	f000 80cf 	beq.w	800c868 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c6ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	f000 80ca 	beq.w	800c868 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6dc:	e853 3f00 	ldrex	r3, [r3]
 800c6e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c6e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c6e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	461a      	mov	r2, r3
 800c6f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c6f6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6f8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c6fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c6fe:	e841 2300 	strex	r3, r2, [r1]
 800c702:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c706:	2b00      	cmp	r3, #0
 800c708:	d1e4      	bne.n	800c6d4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	3308      	adds	r3, #8
 800c710:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c714:	e853 3f00 	ldrex	r3, [r3]
 800c718:	623b      	str	r3, [r7, #32]
   return(result);
 800c71a:	6a3a      	ldr	r2, [r7, #32]
 800c71c:	4b55      	ldr	r3, [pc, #340]	@ (800c874 <HAL_UART_IRQHandler+0x770>)
 800c71e:	4013      	ands	r3, r2
 800c720:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	3308      	adds	r3, #8
 800c72a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c72e:	633a      	str	r2, [r7, #48]	@ 0x30
 800c730:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c732:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c734:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c736:	e841 2300 	strex	r3, r2, [r1]
 800c73a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c73c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d1e3      	bne.n	800c70a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2220      	movs	r2, #32
 800c746:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2200      	movs	r2, #0
 800c74e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2200      	movs	r2, #0
 800c754:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	e853 3f00 	ldrex	r3, [r3]
 800c762:	60fb      	str	r3, [r7, #12]
   return(result);
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	f023 0310 	bic.w	r3, r3, #16
 800c76a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	461a      	mov	r2, r3
 800c774:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c778:	61fb      	str	r3, [r7, #28]
 800c77a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c77c:	69b9      	ldr	r1, [r7, #24]
 800c77e:	69fa      	ldr	r2, [r7, #28]
 800c780:	e841 2300 	strex	r3, r2, [r1]
 800c784:	617b      	str	r3, [r7, #20]
   return(result);
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d1e4      	bne.n	800c756 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2202      	movs	r2, #2
 800c790:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c792:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c796:	4619      	mov	r1, r3
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f000 f895 	bl	800c8c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c79e:	e063      	b.n	800c868 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c7a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d00e      	beq.n	800c7ca <HAL_UART_IRQHandler+0x6c6>
 800c7ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d008      	beq.n	800c7ca <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c7c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f001 fa89 	bl	800dcda <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c7c8:	e051      	b.n	800c86e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c7ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d014      	beq.n	800c800 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c7d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d105      	bne.n	800c7ee <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c7e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d008      	beq.n	800c800 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d03a      	beq.n	800c86c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	4798      	blx	r3
    }
    return;
 800c7fe:	e035      	b.n	800c86c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d009      	beq.n	800c820 <HAL_UART_IRQHandler+0x71c>
 800c80c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c814:	2b00      	cmp	r3, #0
 800c816:	d003      	beq.n	800c820 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f001 fa33 	bl	800dc84 <UART_EndTransmit_IT>
    return;
 800c81e:	e026      	b.n	800c86e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c824:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d009      	beq.n	800c840 <HAL_UART_IRQHandler+0x73c>
 800c82c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c830:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c834:	2b00      	cmp	r3, #0
 800c836:	d003      	beq.n	800c840 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f001 fa62 	bl	800dd02 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c83e:	e016      	b.n	800c86e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c844:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d010      	beq.n	800c86e <HAL_UART_IRQHandler+0x76a>
 800c84c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c850:	2b00      	cmp	r3, #0
 800c852:	da0c      	bge.n	800c86e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f001 fa4a 	bl	800dcee <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c85a:	e008      	b.n	800c86e <HAL_UART_IRQHandler+0x76a>
      return;
 800c85c:	bf00      	nop
 800c85e:	e006      	b.n	800c86e <HAL_UART_IRQHandler+0x76a>
    return;
 800c860:	bf00      	nop
 800c862:	e004      	b.n	800c86e <HAL_UART_IRQHandler+0x76a>
      return;
 800c864:	bf00      	nop
 800c866:	e002      	b.n	800c86e <HAL_UART_IRQHandler+0x76a>
      return;
 800c868:	bf00      	nop
 800c86a:	e000      	b.n	800c86e <HAL_UART_IRQHandler+0x76a>
    return;
 800c86c:	bf00      	nop
  }
}
 800c86e:	37e8      	adds	r7, #232	@ 0xe8
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}
 800c874:	effffffe 	.word	0xeffffffe

0800c878 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c878:	b480      	push	{r7}
 800c87a:	b083      	sub	sp, #12
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c880:	bf00      	nop
 800c882:	370c      	adds	r7, #12
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr

0800c88c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b083      	sub	sp, #12
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c894:	bf00      	nop
 800c896:	370c      	adds	r7, #12
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr

0800c8a0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b083      	sub	sp, #12
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c8a8:	bf00      	nop
 800c8aa:	370c      	adds	r7, #12
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr

0800c8b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b083      	sub	sp, #12
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c8bc:	bf00      	nop
 800c8be:	370c      	adds	r7, #12
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr

0800c8c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b083      	sub	sp, #12
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	460b      	mov	r3, r1
 800c8d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c8d4:	bf00      	nop
 800c8d6:	370c      	adds	r7, #12
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr

0800c8e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c8e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c8e4:	b092      	sub	sp, #72	@ 0x48
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	689a      	ldr	r2, [r3, #8]
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	691b      	ldr	r3, [r3, #16]
 800c8f8:	431a      	orrs	r2, r3
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	695b      	ldr	r3, [r3, #20]
 800c8fe:	431a      	orrs	r2, r3
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	69db      	ldr	r3, [r3, #28]
 800c904:	4313      	orrs	r3, r2
 800c906:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	681a      	ldr	r2, [r3, #0]
 800c90e:	4bbe      	ldr	r3, [pc, #760]	@ (800cc08 <UART_SetConfig+0x328>)
 800c910:	4013      	ands	r3, r2
 800c912:	697a      	ldr	r2, [r7, #20]
 800c914:	6812      	ldr	r2, [r2, #0]
 800c916:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c918:	430b      	orrs	r3, r1
 800c91a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	685b      	ldr	r3, [r3, #4]
 800c922:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	68da      	ldr	r2, [r3, #12]
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	430a      	orrs	r2, r1
 800c930:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	699b      	ldr	r3, [r3, #24]
 800c936:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4ab3      	ldr	r2, [pc, #716]	@ (800cc0c <UART_SetConfig+0x32c>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d004      	beq.n	800c94c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	6a1b      	ldr	r3, [r3, #32]
 800c946:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c948:	4313      	orrs	r3, r2
 800c94a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	689a      	ldr	r2, [r3, #8]
 800c952:	4baf      	ldr	r3, [pc, #700]	@ (800cc10 <UART_SetConfig+0x330>)
 800c954:	4013      	ands	r3, r2
 800c956:	697a      	ldr	r2, [r7, #20]
 800c958:	6812      	ldr	r2, [r2, #0]
 800c95a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c95c:	430b      	orrs	r3, r1
 800c95e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c966:	f023 010f 	bic.w	r1, r3, #15
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	430a      	orrs	r2, r1
 800c974:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4aa6      	ldr	r2, [pc, #664]	@ (800cc14 <UART_SetConfig+0x334>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d177      	bne.n	800ca70 <UART_SetConfig+0x190>
 800c980:	4ba5      	ldr	r3, [pc, #660]	@ (800cc18 <UART_SetConfig+0x338>)
 800c982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c984:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c988:	2b28      	cmp	r3, #40	@ 0x28
 800c98a:	d86d      	bhi.n	800ca68 <UART_SetConfig+0x188>
 800c98c:	a201      	add	r2, pc, #4	@ (adr r2, 800c994 <UART_SetConfig+0xb4>)
 800c98e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c992:	bf00      	nop
 800c994:	0800ca39 	.word	0x0800ca39
 800c998:	0800ca69 	.word	0x0800ca69
 800c99c:	0800ca69 	.word	0x0800ca69
 800c9a0:	0800ca69 	.word	0x0800ca69
 800c9a4:	0800ca69 	.word	0x0800ca69
 800c9a8:	0800ca69 	.word	0x0800ca69
 800c9ac:	0800ca69 	.word	0x0800ca69
 800c9b0:	0800ca69 	.word	0x0800ca69
 800c9b4:	0800ca41 	.word	0x0800ca41
 800c9b8:	0800ca69 	.word	0x0800ca69
 800c9bc:	0800ca69 	.word	0x0800ca69
 800c9c0:	0800ca69 	.word	0x0800ca69
 800c9c4:	0800ca69 	.word	0x0800ca69
 800c9c8:	0800ca69 	.word	0x0800ca69
 800c9cc:	0800ca69 	.word	0x0800ca69
 800c9d0:	0800ca69 	.word	0x0800ca69
 800c9d4:	0800ca49 	.word	0x0800ca49
 800c9d8:	0800ca69 	.word	0x0800ca69
 800c9dc:	0800ca69 	.word	0x0800ca69
 800c9e0:	0800ca69 	.word	0x0800ca69
 800c9e4:	0800ca69 	.word	0x0800ca69
 800c9e8:	0800ca69 	.word	0x0800ca69
 800c9ec:	0800ca69 	.word	0x0800ca69
 800c9f0:	0800ca69 	.word	0x0800ca69
 800c9f4:	0800ca51 	.word	0x0800ca51
 800c9f8:	0800ca69 	.word	0x0800ca69
 800c9fc:	0800ca69 	.word	0x0800ca69
 800ca00:	0800ca69 	.word	0x0800ca69
 800ca04:	0800ca69 	.word	0x0800ca69
 800ca08:	0800ca69 	.word	0x0800ca69
 800ca0c:	0800ca69 	.word	0x0800ca69
 800ca10:	0800ca69 	.word	0x0800ca69
 800ca14:	0800ca59 	.word	0x0800ca59
 800ca18:	0800ca69 	.word	0x0800ca69
 800ca1c:	0800ca69 	.word	0x0800ca69
 800ca20:	0800ca69 	.word	0x0800ca69
 800ca24:	0800ca69 	.word	0x0800ca69
 800ca28:	0800ca69 	.word	0x0800ca69
 800ca2c:	0800ca69 	.word	0x0800ca69
 800ca30:	0800ca69 	.word	0x0800ca69
 800ca34:	0800ca61 	.word	0x0800ca61
 800ca38:	2301      	movs	r3, #1
 800ca3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca3e:	e222      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800ca40:	2304      	movs	r3, #4
 800ca42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca46:	e21e      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800ca48:	2308      	movs	r3, #8
 800ca4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca4e:	e21a      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800ca50:	2310      	movs	r3, #16
 800ca52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca56:	e216      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800ca58:	2320      	movs	r3, #32
 800ca5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca5e:	e212      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800ca60:	2340      	movs	r3, #64	@ 0x40
 800ca62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca66:	e20e      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800ca68:	2380      	movs	r3, #128	@ 0x80
 800ca6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca6e:	e20a      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4a69      	ldr	r2, [pc, #420]	@ (800cc1c <UART_SetConfig+0x33c>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d130      	bne.n	800cadc <UART_SetConfig+0x1fc>
 800ca7a:	4b67      	ldr	r3, [pc, #412]	@ (800cc18 <UART_SetConfig+0x338>)
 800ca7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca7e:	f003 0307 	and.w	r3, r3, #7
 800ca82:	2b05      	cmp	r3, #5
 800ca84:	d826      	bhi.n	800cad4 <UART_SetConfig+0x1f4>
 800ca86:	a201      	add	r2, pc, #4	@ (adr r2, 800ca8c <UART_SetConfig+0x1ac>)
 800ca88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca8c:	0800caa5 	.word	0x0800caa5
 800ca90:	0800caad 	.word	0x0800caad
 800ca94:	0800cab5 	.word	0x0800cab5
 800ca98:	0800cabd 	.word	0x0800cabd
 800ca9c:	0800cac5 	.word	0x0800cac5
 800caa0:	0800cacd 	.word	0x0800cacd
 800caa4:	2300      	movs	r3, #0
 800caa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caaa:	e1ec      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800caac:	2304      	movs	r3, #4
 800caae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cab2:	e1e8      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cab4:	2308      	movs	r3, #8
 800cab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caba:	e1e4      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cabc:	2310      	movs	r3, #16
 800cabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cac2:	e1e0      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cac4:	2320      	movs	r3, #32
 800cac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caca:	e1dc      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cacc:	2340      	movs	r3, #64	@ 0x40
 800cace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cad2:	e1d8      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cad4:	2380      	movs	r3, #128	@ 0x80
 800cad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cada:	e1d4      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a4f      	ldr	r2, [pc, #316]	@ (800cc20 <UART_SetConfig+0x340>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d130      	bne.n	800cb48 <UART_SetConfig+0x268>
 800cae6:	4b4c      	ldr	r3, [pc, #304]	@ (800cc18 <UART_SetConfig+0x338>)
 800cae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800caea:	f003 0307 	and.w	r3, r3, #7
 800caee:	2b05      	cmp	r3, #5
 800caf0:	d826      	bhi.n	800cb40 <UART_SetConfig+0x260>
 800caf2:	a201      	add	r2, pc, #4	@ (adr r2, 800caf8 <UART_SetConfig+0x218>)
 800caf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caf8:	0800cb11 	.word	0x0800cb11
 800cafc:	0800cb19 	.word	0x0800cb19
 800cb00:	0800cb21 	.word	0x0800cb21
 800cb04:	0800cb29 	.word	0x0800cb29
 800cb08:	0800cb31 	.word	0x0800cb31
 800cb0c:	0800cb39 	.word	0x0800cb39
 800cb10:	2300      	movs	r3, #0
 800cb12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb16:	e1b6      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cb18:	2304      	movs	r3, #4
 800cb1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb1e:	e1b2      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cb20:	2308      	movs	r3, #8
 800cb22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb26:	e1ae      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cb28:	2310      	movs	r3, #16
 800cb2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb2e:	e1aa      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cb30:	2320      	movs	r3, #32
 800cb32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb36:	e1a6      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cb38:	2340      	movs	r3, #64	@ 0x40
 800cb3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb3e:	e1a2      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cb40:	2380      	movs	r3, #128	@ 0x80
 800cb42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb46:	e19e      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	4a35      	ldr	r2, [pc, #212]	@ (800cc24 <UART_SetConfig+0x344>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d130      	bne.n	800cbb4 <UART_SetConfig+0x2d4>
 800cb52:	4b31      	ldr	r3, [pc, #196]	@ (800cc18 <UART_SetConfig+0x338>)
 800cb54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb56:	f003 0307 	and.w	r3, r3, #7
 800cb5a:	2b05      	cmp	r3, #5
 800cb5c:	d826      	bhi.n	800cbac <UART_SetConfig+0x2cc>
 800cb5e:	a201      	add	r2, pc, #4	@ (adr r2, 800cb64 <UART_SetConfig+0x284>)
 800cb60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb64:	0800cb7d 	.word	0x0800cb7d
 800cb68:	0800cb85 	.word	0x0800cb85
 800cb6c:	0800cb8d 	.word	0x0800cb8d
 800cb70:	0800cb95 	.word	0x0800cb95
 800cb74:	0800cb9d 	.word	0x0800cb9d
 800cb78:	0800cba5 	.word	0x0800cba5
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb82:	e180      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cb84:	2304      	movs	r3, #4
 800cb86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb8a:	e17c      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cb8c:	2308      	movs	r3, #8
 800cb8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb92:	e178      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cb94:	2310      	movs	r3, #16
 800cb96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb9a:	e174      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cb9c:	2320      	movs	r3, #32
 800cb9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cba2:	e170      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cba4:	2340      	movs	r3, #64	@ 0x40
 800cba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbaa:	e16c      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cbac:	2380      	movs	r3, #128	@ 0x80
 800cbae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbb2:	e168      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	4a1b      	ldr	r2, [pc, #108]	@ (800cc28 <UART_SetConfig+0x348>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d142      	bne.n	800cc44 <UART_SetConfig+0x364>
 800cbbe:	4b16      	ldr	r3, [pc, #88]	@ (800cc18 <UART_SetConfig+0x338>)
 800cbc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbc2:	f003 0307 	and.w	r3, r3, #7
 800cbc6:	2b05      	cmp	r3, #5
 800cbc8:	d838      	bhi.n	800cc3c <UART_SetConfig+0x35c>
 800cbca:	a201      	add	r2, pc, #4	@ (adr r2, 800cbd0 <UART_SetConfig+0x2f0>)
 800cbcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbd0:	0800cbe9 	.word	0x0800cbe9
 800cbd4:	0800cbf1 	.word	0x0800cbf1
 800cbd8:	0800cbf9 	.word	0x0800cbf9
 800cbdc:	0800cc01 	.word	0x0800cc01
 800cbe0:	0800cc2d 	.word	0x0800cc2d
 800cbe4:	0800cc35 	.word	0x0800cc35
 800cbe8:	2300      	movs	r3, #0
 800cbea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbee:	e14a      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cbf0:	2304      	movs	r3, #4
 800cbf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbf6:	e146      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cbf8:	2308      	movs	r3, #8
 800cbfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbfe:	e142      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cc00:	2310      	movs	r3, #16
 800cc02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc06:	e13e      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cc08:	cfff69f3 	.word	0xcfff69f3
 800cc0c:	58000c00 	.word	0x58000c00
 800cc10:	11fff4ff 	.word	0x11fff4ff
 800cc14:	40011000 	.word	0x40011000
 800cc18:	58024400 	.word	0x58024400
 800cc1c:	40004400 	.word	0x40004400
 800cc20:	40004800 	.word	0x40004800
 800cc24:	40004c00 	.word	0x40004c00
 800cc28:	40005000 	.word	0x40005000
 800cc2c:	2320      	movs	r3, #32
 800cc2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc32:	e128      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cc34:	2340      	movs	r3, #64	@ 0x40
 800cc36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc3a:	e124      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cc3c:	2380      	movs	r3, #128	@ 0x80
 800cc3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc42:	e120      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4acb      	ldr	r2, [pc, #812]	@ (800cf78 <UART_SetConfig+0x698>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d176      	bne.n	800cd3c <UART_SetConfig+0x45c>
 800cc4e:	4bcb      	ldr	r3, [pc, #812]	@ (800cf7c <UART_SetConfig+0x69c>)
 800cc50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cc56:	2b28      	cmp	r3, #40	@ 0x28
 800cc58:	d86c      	bhi.n	800cd34 <UART_SetConfig+0x454>
 800cc5a:	a201      	add	r2, pc, #4	@ (adr r2, 800cc60 <UART_SetConfig+0x380>)
 800cc5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc60:	0800cd05 	.word	0x0800cd05
 800cc64:	0800cd35 	.word	0x0800cd35
 800cc68:	0800cd35 	.word	0x0800cd35
 800cc6c:	0800cd35 	.word	0x0800cd35
 800cc70:	0800cd35 	.word	0x0800cd35
 800cc74:	0800cd35 	.word	0x0800cd35
 800cc78:	0800cd35 	.word	0x0800cd35
 800cc7c:	0800cd35 	.word	0x0800cd35
 800cc80:	0800cd0d 	.word	0x0800cd0d
 800cc84:	0800cd35 	.word	0x0800cd35
 800cc88:	0800cd35 	.word	0x0800cd35
 800cc8c:	0800cd35 	.word	0x0800cd35
 800cc90:	0800cd35 	.word	0x0800cd35
 800cc94:	0800cd35 	.word	0x0800cd35
 800cc98:	0800cd35 	.word	0x0800cd35
 800cc9c:	0800cd35 	.word	0x0800cd35
 800cca0:	0800cd15 	.word	0x0800cd15
 800cca4:	0800cd35 	.word	0x0800cd35
 800cca8:	0800cd35 	.word	0x0800cd35
 800ccac:	0800cd35 	.word	0x0800cd35
 800ccb0:	0800cd35 	.word	0x0800cd35
 800ccb4:	0800cd35 	.word	0x0800cd35
 800ccb8:	0800cd35 	.word	0x0800cd35
 800ccbc:	0800cd35 	.word	0x0800cd35
 800ccc0:	0800cd1d 	.word	0x0800cd1d
 800ccc4:	0800cd35 	.word	0x0800cd35
 800ccc8:	0800cd35 	.word	0x0800cd35
 800cccc:	0800cd35 	.word	0x0800cd35
 800ccd0:	0800cd35 	.word	0x0800cd35
 800ccd4:	0800cd35 	.word	0x0800cd35
 800ccd8:	0800cd35 	.word	0x0800cd35
 800ccdc:	0800cd35 	.word	0x0800cd35
 800cce0:	0800cd25 	.word	0x0800cd25
 800cce4:	0800cd35 	.word	0x0800cd35
 800cce8:	0800cd35 	.word	0x0800cd35
 800ccec:	0800cd35 	.word	0x0800cd35
 800ccf0:	0800cd35 	.word	0x0800cd35
 800ccf4:	0800cd35 	.word	0x0800cd35
 800ccf8:	0800cd35 	.word	0x0800cd35
 800ccfc:	0800cd35 	.word	0x0800cd35
 800cd00:	0800cd2d 	.word	0x0800cd2d
 800cd04:	2301      	movs	r3, #1
 800cd06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd0a:	e0bc      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cd0c:	2304      	movs	r3, #4
 800cd0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd12:	e0b8      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cd14:	2308      	movs	r3, #8
 800cd16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd1a:	e0b4      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cd1c:	2310      	movs	r3, #16
 800cd1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd22:	e0b0      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cd24:	2320      	movs	r3, #32
 800cd26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd2a:	e0ac      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cd2c:	2340      	movs	r3, #64	@ 0x40
 800cd2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd32:	e0a8      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cd34:	2380      	movs	r3, #128	@ 0x80
 800cd36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd3a:	e0a4      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	4a8f      	ldr	r2, [pc, #572]	@ (800cf80 <UART_SetConfig+0x6a0>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d130      	bne.n	800cda8 <UART_SetConfig+0x4c8>
 800cd46:	4b8d      	ldr	r3, [pc, #564]	@ (800cf7c <UART_SetConfig+0x69c>)
 800cd48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd4a:	f003 0307 	and.w	r3, r3, #7
 800cd4e:	2b05      	cmp	r3, #5
 800cd50:	d826      	bhi.n	800cda0 <UART_SetConfig+0x4c0>
 800cd52:	a201      	add	r2, pc, #4	@ (adr r2, 800cd58 <UART_SetConfig+0x478>)
 800cd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd58:	0800cd71 	.word	0x0800cd71
 800cd5c:	0800cd79 	.word	0x0800cd79
 800cd60:	0800cd81 	.word	0x0800cd81
 800cd64:	0800cd89 	.word	0x0800cd89
 800cd68:	0800cd91 	.word	0x0800cd91
 800cd6c:	0800cd99 	.word	0x0800cd99
 800cd70:	2300      	movs	r3, #0
 800cd72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd76:	e086      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cd78:	2304      	movs	r3, #4
 800cd7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd7e:	e082      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cd80:	2308      	movs	r3, #8
 800cd82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd86:	e07e      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cd88:	2310      	movs	r3, #16
 800cd8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd8e:	e07a      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cd90:	2320      	movs	r3, #32
 800cd92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd96:	e076      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cd98:	2340      	movs	r3, #64	@ 0x40
 800cd9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd9e:	e072      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cda0:	2380      	movs	r3, #128	@ 0x80
 800cda2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cda6:	e06e      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4a75      	ldr	r2, [pc, #468]	@ (800cf84 <UART_SetConfig+0x6a4>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d130      	bne.n	800ce14 <UART_SetConfig+0x534>
 800cdb2:	4b72      	ldr	r3, [pc, #456]	@ (800cf7c <UART_SetConfig+0x69c>)
 800cdb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdb6:	f003 0307 	and.w	r3, r3, #7
 800cdba:	2b05      	cmp	r3, #5
 800cdbc:	d826      	bhi.n	800ce0c <UART_SetConfig+0x52c>
 800cdbe:	a201      	add	r2, pc, #4	@ (adr r2, 800cdc4 <UART_SetConfig+0x4e4>)
 800cdc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdc4:	0800cddd 	.word	0x0800cddd
 800cdc8:	0800cde5 	.word	0x0800cde5
 800cdcc:	0800cded 	.word	0x0800cded
 800cdd0:	0800cdf5 	.word	0x0800cdf5
 800cdd4:	0800cdfd 	.word	0x0800cdfd
 800cdd8:	0800ce05 	.word	0x0800ce05
 800cddc:	2300      	movs	r3, #0
 800cdde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cde2:	e050      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cde4:	2304      	movs	r3, #4
 800cde6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdea:	e04c      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cdec:	2308      	movs	r3, #8
 800cdee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdf2:	e048      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cdf4:	2310      	movs	r3, #16
 800cdf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdfa:	e044      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800cdfc:	2320      	movs	r3, #32
 800cdfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce02:	e040      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800ce04:	2340      	movs	r3, #64	@ 0x40
 800ce06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce0a:	e03c      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800ce0c:	2380      	movs	r3, #128	@ 0x80
 800ce0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce12:	e038      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	4a5b      	ldr	r2, [pc, #364]	@ (800cf88 <UART_SetConfig+0x6a8>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d130      	bne.n	800ce80 <UART_SetConfig+0x5a0>
 800ce1e:	4b57      	ldr	r3, [pc, #348]	@ (800cf7c <UART_SetConfig+0x69c>)
 800ce20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce22:	f003 0307 	and.w	r3, r3, #7
 800ce26:	2b05      	cmp	r3, #5
 800ce28:	d826      	bhi.n	800ce78 <UART_SetConfig+0x598>
 800ce2a:	a201      	add	r2, pc, #4	@ (adr r2, 800ce30 <UART_SetConfig+0x550>)
 800ce2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce30:	0800ce49 	.word	0x0800ce49
 800ce34:	0800ce51 	.word	0x0800ce51
 800ce38:	0800ce59 	.word	0x0800ce59
 800ce3c:	0800ce61 	.word	0x0800ce61
 800ce40:	0800ce69 	.word	0x0800ce69
 800ce44:	0800ce71 	.word	0x0800ce71
 800ce48:	2302      	movs	r3, #2
 800ce4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce4e:	e01a      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800ce50:	2304      	movs	r3, #4
 800ce52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce56:	e016      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800ce58:	2308      	movs	r3, #8
 800ce5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce5e:	e012      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800ce60:	2310      	movs	r3, #16
 800ce62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce66:	e00e      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800ce68:	2320      	movs	r3, #32
 800ce6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce6e:	e00a      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800ce70:	2340      	movs	r3, #64	@ 0x40
 800ce72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce76:	e006      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800ce78:	2380      	movs	r3, #128	@ 0x80
 800ce7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce7e:	e002      	b.n	800ce86 <UART_SetConfig+0x5a6>
 800ce80:	2380      	movs	r3, #128	@ 0x80
 800ce82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	4a3f      	ldr	r2, [pc, #252]	@ (800cf88 <UART_SetConfig+0x6a8>)
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	f040 80f8 	bne.w	800d082 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ce92:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ce96:	2b20      	cmp	r3, #32
 800ce98:	dc46      	bgt.n	800cf28 <UART_SetConfig+0x648>
 800ce9a:	2b02      	cmp	r3, #2
 800ce9c:	f2c0 8082 	blt.w	800cfa4 <UART_SetConfig+0x6c4>
 800cea0:	3b02      	subs	r3, #2
 800cea2:	2b1e      	cmp	r3, #30
 800cea4:	d87e      	bhi.n	800cfa4 <UART_SetConfig+0x6c4>
 800cea6:	a201      	add	r2, pc, #4	@ (adr r2, 800ceac <UART_SetConfig+0x5cc>)
 800cea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceac:	0800cf2f 	.word	0x0800cf2f
 800ceb0:	0800cfa5 	.word	0x0800cfa5
 800ceb4:	0800cf37 	.word	0x0800cf37
 800ceb8:	0800cfa5 	.word	0x0800cfa5
 800cebc:	0800cfa5 	.word	0x0800cfa5
 800cec0:	0800cfa5 	.word	0x0800cfa5
 800cec4:	0800cf47 	.word	0x0800cf47
 800cec8:	0800cfa5 	.word	0x0800cfa5
 800cecc:	0800cfa5 	.word	0x0800cfa5
 800ced0:	0800cfa5 	.word	0x0800cfa5
 800ced4:	0800cfa5 	.word	0x0800cfa5
 800ced8:	0800cfa5 	.word	0x0800cfa5
 800cedc:	0800cfa5 	.word	0x0800cfa5
 800cee0:	0800cfa5 	.word	0x0800cfa5
 800cee4:	0800cf57 	.word	0x0800cf57
 800cee8:	0800cfa5 	.word	0x0800cfa5
 800ceec:	0800cfa5 	.word	0x0800cfa5
 800cef0:	0800cfa5 	.word	0x0800cfa5
 800cef4:	0800cfa5 	.word	0x0800cfa5
 800cef8:	0800cfa5 	.word	0x0800cfa5
 800cefc:	0800cfa5 	.word	0x0800cfa5
 800cf00:	0800cfa5 	.word	0x0800cfa5
 800cf04:	0800cfa5 	.word	0x0800cfa5
 800cf08:	0800cfa5 	.word	0x0800cfa5
 800cf0c:	0800cfa5 	.word	0x0800cfa5
 800cf10:	0800cfa5 	.word	0x0800cfa5
 800cf14:	0800cfa5 	.word	0x0800cfa5
 800cf18:	0800cfa5 	.word	0x0800cfa5
 800cf1c:	0800cfa5 	.word	0x0800cfa5
 800cf20:	0800cfa5 	.word	0x0800cfa5
 800cf24:	0800cf97 	.word	0x0800cf97
 800cf28:	2b40      	cmp	r3, #64	@ 0x40
 800cf2a:	d037      	beq.n	800cf9c <UART_SetConfig+0x6bc>
 800cf2c:	e03a      	b.n	800cfa4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cf2e:	f7fd fef5 	bl	800ad1c <HAL_RCCEx_GetD3PCLK1Freq>
 800cf32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cf34:	e03c      	b.n	800cfb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7fd ff04 	bl	800ad48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cf40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf44:	e034      	b.n	800cfb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf46:	f107 0318 	add.w	r3, r7, #24
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f7fe f850 	bl	800aff0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cf50:	69fb      	ldr	r3, [r7, #28]
 800cf52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf54:	e02c      	b.n	800cfb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf56:	4b09      	ldr	r3, [pc, #36]	@ (800cf7c <UART_SetConfig+0x69c>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f003 0320 	and.w	r3, r3, #32
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d016      	beq.n	800cf90 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cf62:	4b06      	ldr	r3, [pc, #24]	@ (800cf7c <UART_SetConfig+0x69c>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	08db      	lsrs	r3, r3, #3
 800cf68:	f003 0303 	and.w	r3, r3, #3
 800cf6c:	4a07      	ldr	r2, [pc, #28]	@ (800cf8c <UART_SetConfig+0x6ac>)
 800cf6e:	fa22 f303 	lsr.w	r3, r2, r3
 800cf72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cf74:	e01c      	b.n	800cfb0 <UART_SetConfig+0x6d0>
 800cf76:	bf00      	nop
 800cf78:	40011400 	.word	0x40011400
 800cf7c:	58024400 	.word	0x58024400
 800cf80:	40007800 	.word	0x40007800
 800cf84:	40007c00 	.word	0x40007c00
 800cf88:	58000c00 	.word	0x58000c00
 800cf8c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800cf90:	4b9d      	ldr	r3, [pc, #628]	@ (800d208 <UART_SetConfig+0x928>)
 800cf92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf94:	e00c      	b.n	800cfb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cf96:	4b9d      	ldr	r3, [pc, #628]	@ (800d20c <UART_SetConfig+0x92c>)
 800cf98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf9a:	e009      	b.n	800cfb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cfa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfa2:	e005      	b.n	800cfb0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cfae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cfb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	f000 81de 	beq.w	800d374 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfbc:	4a94      	ldr	r2, [pc, #592]	@ (800d210 <UART_SetConfig+0x930>)
 800cfbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfc6:	fbb3 f3f2 	udiv	r3, r3, r2
 800cfca:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	685a      	ldr	r2, [r3, #4]
 800cfd0:	4613      	mov	r3, r2
 800cfd2:	005b      	lsls	r3, r3, #1
 800cfd4:	4413      	add	r3, r2
 800cfd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d305      	bcc.n	800cfe8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	685b      	ldr	r3, [r3, #4]
 800cfe0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cfe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d903      	bls.n	800cff0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800cfe8:	2301      	movs	r3, #1
 800cfea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cfee:	e1c1      	b.n	800d374 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cff2:	2200      	movs	r2, #0
 800cff4:	60bb      	str	r3, [r7, #8]
 800cff6:	60fa      	str	r2, [r7, #12]
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cffc:	4a84      	ldr	r2, [pc, #528]	@ (800d210 <UART_SetConfig+0x930>)
 800cffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d002:	b29b      	uxth	r3, r3
 800d004:	2200      	movs	r2, #0
 800d006:	603b      	str	r3, [r7, #0]
 800d008:	607a      	str	r2, [r7, #4]
 800d00a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d00e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d012:	f7f3 fa1d 	bl	8000450 <__aeabi_uldivmod>
 800d016:	4602      	mov	r2, r0
 800d018:	460b      	mov	r3, r1
 800d01a:	4610      	mov	r0, r2
 800d01c:	4619      	mov	r1, r3
 800d01e:	f04f 0200 	mov.w	r2, #0
 800d022:	f04f 0300 	mov.w	r3, #0
 800d026:	020b      	lsls	r3, r1, #8
 800d028:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d02c:	0202      	lsls	r2, r0, #8
 800d02e:	6979      	ldr	r1, [r7, #20]
 800d030:	6849      	ldr	r1, [r1, #4]
 800d032:	0849      	lsrs	r1, r1, #1
 800d034:	2000      	movs	r0, #0
 800d036:	460c      	mov	r4, r1
 800d038:	4605      	mov	r5, r0
 800d03a:	eb12 0804 	adds.w	r8, r2, r4
 800d03e:	eb43 0905 	adc.w	r9, r3, r5
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	2200      	movs	r2, #0
 800d048:	469a      	mov	sl, r3
 800d04a:	4693      	mov	fp, r2
 800d04c:	4652      	mov	r2, sl
 800d04e:	465b      	mov	r3, fp
 800d050:	4640      	mov	r0, r8
 800d052:	4649      	mov	r1, r9
 800d054:	f7f3 f9fc 	bl	8000450 <__aeabi_uldivmod>
 800d058:	4602      	mov	r2, r0
 800d05a:	460b      	mov	r3, r1
 800d05c:	4613      	mov	r3, r2
 800d05e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d062:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d066:	d308      	bcc.n	800d07a <UART_SetConfig+0x79a>
 800d068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d06a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d06e:	d204      	bcs.n	800d07a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d076:	60da      	str	r2, [r3, #12]
 800d078:	e17c      	b.n	800d374 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d07a:	2301      	movs	r3, #1
 800d07c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d080:	e178      	b.n	800d374 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	69db      	ldr	r3, [r3, #28]
 800d086:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d08a:	f040 80c5 	bne.w	800d218 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d08e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d092:	2b20      	cmp	r3, #32
 800d094:	dc48      	bgt.n	800d128 <UART_SetConfig+0x848>
 800d096:	2b00      	cmp	r3, #0
 800d098:	db7b      	blt.n	800d192 <UART_SetConfig+0x8b2>
 800d09a:	2b20      	cmp	r3, #32
 800d09c:	d879      	bhi.n	800d192 <UART_SetConfig+0x8b2>
 800d09e:	a201      	add	r2, pc, #4	@ (adr r2, 800d0a4 <UART_SetConfig+0x7c4>)
 800d0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0a4:	0800d12f 	.word	0x0800d12f
 800d0a8:	0800d137 	.word	0x0800d137
 800d0ac:	0800d193 	.word	0x0800d193
 800d0b0:	0800d193 	.word	0x0800d193
 800d0b4:	0800d13f 	.word	0x0800d13f
 800d0b8:	0800d193 	.word	0x0800d193
 800d0bc:	0800d193 	.word	0x0800d193
 800d0c0:	0800d193 	.word	0x0800d193
 800d0c4:	0800d14f 	.word	0x0800d14f
 800d0c8:	0800d193 	.word	0x0800d193
 800d0cc:	0800d193 	.word	0x0800d193
 800d0d0:	0800d193 	.word	0x0800d193
 800d0d4:	0800d193 	.word	0x0800d193
 800d0d8:	0800d193 	.word	0x0800d193
 800d0dc:	0800d193 	.word	0x0800d193
 800d0e0:	0800d193 	.word	0x0800d193
 800d0e4:	0800d15f 	.word	0x0800d15f
 800d0e8:	0800d193 	.word	0x0800d193
 800d0ec:	0800d193 	.word	0x0800d193
 800d0f0:	0800d193 	.word	0x0800d193
 800d0f4:	0800d193 	.word	0x0800d193
 800d0f8:	0800d193 	.word	0x0800d193
 800d0fc:	0800d193 	.word	0x0800d193
 800d100:	0800d193 	.word	0x0800d193
 800d104:	0800d193 	.word	0x0800d193
 800d108:	0800d193 	.word	0x0800d193
 800d10c:	0800d193 	.word	0x0800d193
 800d110:	0800d193 	.word	0x0800d193
 800d114:	0800d193 	.word	0x0800d193
 800d118:	0800d193 	.word	0x0800d193
 800d11c:	0800d193 	.word	0x0800d193
 800d120:	0800d193 	.word	0x0800d193
 800d124:	0800d185 	.word	0x0800d185
 800d128:	2b40      	cmp	r3, #64	@ 0x40
 800d12a:	d02e      	beq.n	800d18a <UART_SetConfig+0x8aa>
 800d12c:	e031      	b.n	800d192 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d12e:	f7fb fdfd 	bl	8008d2c <HAL_RCC_GetPCLK1Freq>
 800d132:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d134:	e033      	b.n	800d19e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d136:	f7fb fe0f 	bl	8008d58 <HAL_RCC_GetPCLK2Freq>
 800d13a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d13c:	e02f      	b.n	800d19e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d13e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d142:	4618      	mov	r0, r3
 800d144:	f7fd fe00 	bl	800ad48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d14a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d14c:	e027      	b.n	800d19e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d14e:	f107 0318 	add.w	r3, r7, #24
 800d152:	4618      	mov	r0, r3
 800d154:	f7fd ff4c 	bl	800aff0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d158:	69fb      	ldr	r3, [r7, #28]
 800d15a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d15c:	e01f      	b.n	800d19e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d15e:	4b2d      	ldr	r3, [pc, #180]	@ (800d214 <UART_SetConfig+0x934>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	f003 0320 	and.w	r3, r3, #32
 800d166:	2b00      	cmp	r3, #0
 800d168:	d009      	beq.n	800d17e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d16a:	4b2a      	ldr	r3, [pc, #168]	@ (800d214 <UART_SetConfig+0x934>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	08db      	lsrs	r3, r3, #3
 800d170:	f003 0303 	and.w	r3, r3, #3
 800d174:	4a24      	ldr	r2, [pc, #144]	@ (800d208 <UART_SetConfig+0x928>)
 800d176:	fa22 f303 	lsr.w	r3, r2, r3
 800d17a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d17c:	e00f      	b.n	800d19e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d17e:	4b22      	ldr	r3, [pc, #136]	@ (800d208 <UART_SetConfig+0x928>)
 800d180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d182:	e00c      	b.n	800d19e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d184:	4b21      	ldr	r3, [pc, #132]	@ (800d20c <UART_SetConfig+0x92c>)
 800d186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d188:	e009      	b.n	800d19e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d18a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d18e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d190:	e005      	b.n	800d19e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d192:	2300      	movs	r3, #0
 800d194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d196:	2301      	movs	r3, #1
 800d198:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d19c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d19e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	f000 80e7 	beq.w	800d374 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1aa:	4a19      	ldr	r2, [pc, #100]	@ (800d210 <UART_SetConfig+0x930>)
 800d1ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1b0:	461a      	mov	r2, r3
 800d1b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d1b8:	005a      	lsls	r2, r3, #1
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	685b      	ldr	r3, [r3, #4]
 800d1be:	085b      	lsrs	r3, r3, #1
 800d1c0:	441a      	add	r2, r3
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ce:	2b0f      	cmp	r3, #15
 800d1d0:	d916      	bls.n	800d200 <UART_SetConfig+0x920>
 800d1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d1d8:	d212      	bcs.n	800d200 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1dc:	b29b      	uxth	r3, r3
 800d1de:	f023 030f 	bic.w	r3, r3, #15
 800d1e2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1e6:	085b      	lsrs	r3, r3, #1
 800d1e8:	b29b      	uxth	r3, r3
 800d1ea:	f003 0307 	and.w	r3, r3, #7
 800d1ee:	b29a      	uxth	r2, r3
 800d1f0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d1f2:	4313      	orrs	r3, r2
 800d1f4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d1fc:	60da      	str	r2, [r3, #12]
 800d1fe:	e0b9      	b.n	800d374 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d200:	2301      	movs	r3, #1
 800d202:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d206:	e0b5      	b.n	800d374 <UART_SetConfig+0xa94>
 800d208:	03d09000 	.word	0x03d09000
 800d20c:	003d0900 	.word	0x003d0900
 800d210:	08023510 	.word	0x08023510
 800d214:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d218:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d21c:	2b20      	cmp	r3, #32
 800d21e:	dc49      	bgt.n	800d2b4 <UART_SetConfig+0x9d4>
 800d220:	2b00      	cmp	r3, #0
 800d222:	db7c      	blt.n	800d31e <UART_SetConfig+0xa3e>
 800d224:	2b20      	cmp	r3, #32
 800d226:	d87a      	bhi.n	800d31e <UART_SetConfig+0xa3e>
 800d228:	a201      	add	r2, pc, #4	@ (adr r2, 800d230 <UART_SetConfig+0x950>)
 800d22a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d22e:	bf00      	nop
 800d230:	0800d2bb 	.word	0x0800d2bb
 800d234:	0800d2c3 	.word	0x0800d2c3
 800d238:	0800d31f 	.word	0x0800d31f
 800d23c:	0800d31f 	.word	0x0800d31f
 800d240:	0800d2cb 	.word	0x0800d2cb
 800d244:	0800d31f 	.word	0x0800d31f
 800d248:	0800d31f 	.word	0x0800d31f
 800d24c:	0800d31f 	.word	0x0800d31f
 800d250:	0800d2db 	.word	0x0800d2db
 800d254:	0800d31f 	.word	0x0800d31f
 800d258:	0800d31f 	.word	0x0800d31f
 800d25c:	0800d31f 	.word	0x0800d31f
 800d260:	0800d31f 	.word	0x0800d31f
 800d264:	0800d31f 	.word	0x0800d31f
 800d268:	0800d31f 	.word	0x0800d31f
 800d26c:	0800d31f 	.word	0x0800d31f
 800d270:	0800d2eb 	.word	0x0800d2eb
 800d274:	0800d31f 	.word	0x0800d31f
 800d278:	0800d31f 	.word	0x0800d31f
 800d27c:	0800d31f 	.word	0x0800d31f
 800d280:	0800d31f 	.word	0x0800d31f
 800d284:	0800d31f 	.word	0x0800d31f
 800d288:	0800d31f 	.word	0x0800d31f
 800d28c:	0800d31f 	.word	0x0800d31f
 800d290:	0800d31f 	.word	0x0800d31f
 800d294:	0800d31f 	.word	0x0800d31f
 800d298:	0800d31f 	.word	0x0800d31f
 800d29c:	0800d31f 	.word	0x0800d31f
 800d2a0:	0800d31f 	.word	0x0800d31f
 800d2a4:	0800d31f 	.word	0x0800d31f
 800d2a8:	0800d31f 	.word	0x0800d31f
 800d2ac:	0800d31f 	.word	0x0800d31f
 800d2b0:	0800d311 	.word	0x0800d311
 800d2b4:	2b40      	cmp	r3, #64	@ 0x40
 800d2b6:	d02e      	beq.n	800d316 <UART_SetConfig+0xa36>
 800d2b8:	e031      	b.n	800d31e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d2ba:	f7fb fd37 	bl	8008d2c <HAL_RCC_GetPCLK1Freq>
 800d2be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d2c0:	e033      	b.n	800d32a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d2c2:	f7fb fd49 	bl	8008d58 <HAL_RCC_GetPCLK2Freq>
 800d2c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d2c8:	e02f      	b.n	800d32a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7fd fd3a 	bl	800ad48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2d8:	e027      	b.n	800d32a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d2da:	f107 0318 	add.w	r3, r7, #24
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f7fd fe86 	bl	800aff0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d2e4:	69fb      	ldr	r3, [r7, #28]
 800d2e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2e8:	e01f      	b.n	800d32a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d2ea:	4b2d      	ldr	r3, [pc, #180]	@ (800d3a0 <UART_SetConfig+0xac0>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f003 0320 	and.w	r3, r3, #32
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d009      	beq.n	800d30a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d2f6:	4b2a      	ldr	r3, [pc, #168]	@ (800d3a0 <UART_SetConfig+0xac0>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	08db      	lsrs	r3, r3, #3
 800d2fc:	f003 0303 	and.w	r3, r3, #3
 800d300:	4a28      	ldr	r2, [pc, #160]	@ (800d3a4 <UART_SetConfig+0xac4>)
 800d302:	fa22 f303 	lsr.w	r3, r2, r3
 800d306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d308:	e00f      	b.n	800d32a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d30a:	4b26      	ldr	r3, [pc, #152]	@ (800d3a4 <UART_SetConfig+0xac4>)
 800d30c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d30e:	e00c      	b.n	800d32a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d310:	4b25      	ldr	r3, [pc, #148]	@ (800d3a8 <UART_SetConfig+0xac8>)
 800d312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d314:	e009      	b.n	800d32a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d316:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d31a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d31c:	e005      	b.n	800d32a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d31e:	2300      	movs	r3, #0
 800d320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d322:	2301      	movs	r3, #1
 800d324:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d328:	bf00      	nop
    }

    if (pclk != 0U)
 800d32a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d021      	beq.n	800d374 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d334:	4a1d      	ldr	r2, [pc, #116]	@ (800d3ac <UART_SetConfig+0xacc>)
 800d336:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d33a:	461a      	mov	r2, r3
 800d33c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d33e:	fbb3 f2f2 	udiv	r2, r3, r2
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	085b      	lsrs	r3, r3, #1
 800d348:	441a      	add	r2, r3
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	685b      	ldr	r3, [r3, #4]
 800d34e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d352:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d356:	2b0f      	cmp	r3, #15
 800d358:	d909      	bls.n	800d36e <UART_SetConfig+0xa8e>
 800d35a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d35c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d360:	d205      	bcs.n	800d36e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d364:	b29a      	uxth	r2, r3
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	60da      	str	r2, [r3, #12]
 800d36c:	e002      	b.n	800d374 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d36e:	2301      	movs	r3, #1
 800d370:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	2201      	movs	r2, #1
 800d378:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	2201      	movs	r2, #1
 800d380:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	2200      	movs	r2, #0
 800d388:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	2200      	movs	r2, #0
 800d38e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d390:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d394:	4618      	mov	r0, r3
 800d396:	3748      	adds	r7, #72	@ 0x48
 800d398:	46bd      	mov	sp, r7
 800d39a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d39e:	bf00      	nop
 800d3a0:	58024400 	.word	0x58024400
 800d3a4:	03d09000 	.word	0x03d09000
 800d3a8:	003d0900 	.word	0x003d0900
 800d3ac:	08023510 	.word	0x08023510

0800d3b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b083      	sub	sp, #12
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3bc:	f003 0308 	and.w	r3, r3, #8
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d00a      	beq.n	800d3da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	685b      	ldr	r3, [r3, #4]
 800d3ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	430a      	orrs	r2, r1
 800d3d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3de:	f003 0301 	and.w	r3, r3, #1
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d00a      	beq.n	800d3fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	430a      	orrs	r2, r1
 800d3fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d400:	f003 0302 	and.w	r3, r3, #2
 800d404:	2b00      	cmp	r3, #0
 800d406:	d00a      	beq.n	800d41e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	685b      	ldr	r3, [r3, #4]
 800d40e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	430a      	orrs	r2, r1
 800d41c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d422:	f003 0304 	and.w	r3, r3, #4
 800d426:	2b00      	cmp	r3, #0
 800d428:	d00a      	beq.n	800d440 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	685b      	ldr	r3, [r3, #4]
 800d430:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	430a      	orrs	r2, r1
 800d43e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d444:	f003 0310 	and.w	r3, r3, #16
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d00a      	beq.n	800d462 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	689b      	ldr	r3, [r3, #8]
 800d452:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	430a      	orrs	r2, r1
 800d460:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d466:	f003 0320 	and.w	r3, r3, #32
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d00a      	beq.n	800d484 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	689b      	ldr	r3, [r3, #8]
 800d474:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	430a      	orrs	r2, r1
 800d482:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d01a      	beq.n	800d4c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	685b      	ldr	r3, [r3, #4]
 800d496:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	430a      	orrs	r2, r1
 800d4a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d4ae:	d10a      	bne.n	800d4c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	685b      	ldr	r3, [r3, #4]
 800d4b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	430a      	orrs	r2, r1
 800d4c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d00a      	beq.n	800d4e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	430a      	orrs	r2, r1
 800d4e6:	605a      	str	r2, [r3, #4]
  }
}
 800d4e8:	bf00      	nop
 800d4ea:	370c      	adds	r7, #12
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f2:	4770      	bx	lr

0800d4f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b098      	sub	sp, #96	@ 0x60
 800d4f8:	af02      	add	r7, sp, #8
 800d4fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2200      	movs	r2, #0
 800d500:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d504:	f7f5 ffe0 	bl	80034c8 <HAL_GetTick>
 800d508:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f003 0308 	and.w	r3, r3, #8
 800d514:	2b08      	cmp	r3, #8
 800d516:	d12f      	bne.n	800d578 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d518:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d51c:	9300      	str	r3, [sp, #0]
 800d51e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d520:	2200      	movs	r2, #0
 800d522:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f000 f88e 	bl	800d648 <UART_WaitOnFlagUntilTimeout>
 800d52c:	4603      	mov	r3, r0
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d022      	beq.n	800d578 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d53a:	e853 3f00 	ldrex	r3, [r3]
 800d53e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d542:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d546:	653b      	str	r3, [r7, #80]	@ 0x50
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	461a      	mov	r2, r3
 800d54e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d550:	647b      	str	r3, [r7, #68]	@ 0x44
 800d552:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d554:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d556:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d558:	e841 2300 	strex	r3, r2, [r1]
 800d55c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d55e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d560:	2b00      	cmp	r3, #0
 800d562:	d1e6      	bne.n	800d532 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2220      	movs	r2, #32
 800d568:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2200      	movs	r2, #0
 800d570:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d574:	2303      	movs	r3, #3
 800d576:	e063      	b.n	800d640 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f003 0304 	and.w	r3, r3, #4
 800d582:	2b04      	cmp	r3, #4
 800d584:	d149      	bne.n	800d61a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d586:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d58a:	9300      	str	r3, [sp, #0]
 800d58c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d58e:	2200      	movs	r2, #0
 800d590:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f000 f857 	bl	800d648 <UART_WaitOnFlagUntilTimeout>
 800d59a:	4603      	mov	r3, r0
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d03c      	beq.n	800d61a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a8:	e853 3f00 	ldrex	r3, [r3]
 800d5ac:	623b      	str	r3, [r7, #32]
   return(result);
 800d5ae:	6a3b      	ldr	r3, [r7, #32]
 800d5b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d5b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	461a      	mov	r2, r3
 800d5bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5be:	633b      	str	r3, [r7, #48]	@ 0x30
 800d5c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d5c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5c6:	e841 2300 	strex	r3, r2, [r1]
 800d5ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d5cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d1e6      	bne.n	800d5a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	3308      	adds	r3, #8
 800d5d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	e853 3f00 	ldrex	r3, [r3]
 800d5e0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	f023 0301 	bic.w	r3, r3, #1
 800d5e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	3308      	adds	r3, #8
 800d5f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d5f2:	61fa      	str	r2, [r7, #28]
 800d5f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5f6:	69b9      	ldr	r1, [r7, #24]
 800d5f8:	69fa      	ldr	r2, [r7, #28]
 800d5fa:	e841 2300 	strex	r3, r2, [r1]
 800d5fe:	617b      	str	r3, [r7, #20]
   return(result);
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d1e5      	bne.n	800d5d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2220      	movs	r2, #32
 800d60a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2200      	movs	r2, #0
 800d612:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d616:	2303      	movs	r3, #3
 800d618:	e012      	b.n	800d640 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2220      	movs	r2, #32
 800d61e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2220      	movs	r2, #32
 800d626:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2200      	movs	r2, #0
 800d62e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2200      	movs	r2, #0
 800d634:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2200      	movs	r2, #0
 800d63a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d63e:	2300      	movs	r3, #0
}
 800d640:	4618      	mov	r0, r3
 800d642:	3758      	adds	r7, #88	@ 0x58
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}

0800d648 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b084      	sub	sp, #16
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	603b      	str	r3, [r7, #0]
 800d654:	4613      	mov	r3, r2
 800d656:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d658:	e04f      	b.n	800d6fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d65a:	69bb      	ldr	r3, [r7, #24]
 800d65c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d660:	d04b      	beq.n	800d6fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d662:	f7f5 ff31 	bl	80034c8 <HAL_GetTick>
 800d666:	4602      	mov	r2, r0
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	1ad3      	subs	r3, r2, r3
 800d66c:	69ba      	ldr	r2, [r7, #24]
 800d66e:	429a      	cmp	r2, r3
 800d670:	d302      	bcc.n	800d678 <UART_WaitOnFlagUntilTimeout+0x30>
 800d672:	69bb      	ldr	r3, [r7, #24]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d101      	bne.n	800d67c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d678:	2303      	movs	r3, #3
 800d67a:	e04e      	b.n	800d71a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f003 0304 	and.w	r3, r3, #4
 800d686:	2b00      	cmp	r3, #0
 800d688:	d037      	beq.n	800d6fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	2b80      	cmp	r3, #128	@ 0x80
 800d68e:	d034      	beq.n	800d6fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	2b40      	cmp	r3, #64	@ 0x40
 800d694:	d031      	beq.n	800d6fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	69db      	ldr	r3, [r3, #28]
 800d69c:	f003 0308 	and.w	r3, r3, #8
 800d6a0:	2b08      	cmp	r3, #8
 800d6a2:	d110      	bne.n	800d6c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	2208      	movs	r2, #8
 800d6aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d6ac:	68f8      	ldr	r0, [r7, #12]
 800d6ae:	f000 f921 	bl	800d8f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	2208      	movs	r2, #8
 800d6b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	e029      	b.n	800d71a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	69db      	ldr	r3, [r3, #28]
 800d6cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d6d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d6d4:	d111      	bne.n	800d6fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d6de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d6e0:	68f8      	ldr	r0, [r7, #12]
 800d6e2:	f000 f907 	bl	800d8f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	2220      	movs	r2, #32
 800d6ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d6f6:	2303      	movs	r3, #3
 800d6f8:	e00f      	b.n	800d71a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	69da      	ldr	r2, [r3, #28]
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	4013      	ands	r3, r2
 800d704:	68ba      	ldr	r2, [r7, #8]
 800d706:	429a      	cmp	r2, r3
 800d708:	bf0c      	ite	eq
 800d70a:	2301      	moveq	r3, #1
 800d70c:	2300      	movne	r3, #0
 800d70e:	b2db      	uxtb	r3, r3
 800d710:	461a      	mov	r2, r3
 800d712:	79fb      	ldrb	r3, [r7, #7]
 800d714:	429a      	cmp	r2, r3
 800d716:	d0a0      	beq.n	800d65a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d718:	2300      	movs	r3, #0
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3710      	adds	r7, #16
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
	...

0800d724 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b096      	sub	sp, #88	@ 0x58
 800d728:	af00      	add	r7, sp, #0
 800d72a:	60f8      	str	r0, [r7, #12]
 800d72c:	60b9      	str	r1, [r7, #8]
 800d72e:	4613      	mov	r3, r2
 800d730:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	68ba      	ldr	r2, [r7, #8]
 800d736:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	88fa      	ldrh	r2, [r7, #6]
 800d73c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	2200      	movs	r2, #0
 800d744:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	2222      	movs	r2, #34	@ 0x22
 800d74c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d756:	2b00      	cmp	r3, #0
 800d758:	d02d      	beq.n	800d7b6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d760:	4a40      	ldr	r2, [pc, #256]	@ (800d864 <UART_Start_Receive_DMA+0x140>)
 800d762:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d76a:	4a3f      	ldr	r2, [pc, #252]	@ (800d868 <UART_Start_Receive_DMA+0x144>)
 800d76c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d774:	4a3d      	ldr	r2, [pc, #244]	@ (800d86c <UART_Start_Receive_DMA+0x148>)
 800d776:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d77e:	2200      	movs	r2, #0
 800d780:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	3324      	adds	r3, #36	@ 0x24
 800d78e:	4619      	mov	r1, r3
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d794:	461a      	mov	r2, r3
 800d796:	88fb      	ldrh	r3, [r7, #6]
 800d798:	f7f7 fe04 	bl	80053a4 <HAL_DMA_Start_IT>
 800d79c:	4603      	mov	r3, r0
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d009      	beq.n	800d7b6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2210      	movs	r2, #16
 800d7a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2220      	movs	r2, #32
 800d7ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	e051      	b.n	800d85a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	691b      	ldr	r3, [r3, #16]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d018      	beq.n	800d7f0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7c6:	e853 3f00 	ldrex	r3, [r3]
 800d7ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d7d2:	657b      	str	r3, [r7, #84]	@ 0x54
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	461a      	mov	r2, r3
 800d7da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d7de:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7e0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d7e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d7e4:	e841 2300 	strex	r3, r2, [r1]
 800d7e8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d7ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d1e6      	bne.n	800d7be <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	3308      	adds	r3, #8
 800d7f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7fa:	e853 3f00 	ldrex	r3, [r3]
 800d7fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d802:	f043 0301 	orr.w	r3, r3, #1
 800d806:	653b      	str	r3, [r7, #80]	@ 0x50
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	3308      	adds	r3, #8
 800d80e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d810:	637a      	str	r2, [r7, #52]	@ 0x34
 800d812:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d814:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d816:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d818:	e841 2300 	strex	r3, r2, [r1]
 800d81c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d81e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d820:	2b00      	cmp	r3, #0
 800d822:	d1e5      	bne.n	800d7f0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	3308      	adds	r3, #8
 800d82a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	e853 3f00 	ldrex	r3, [r3]
 800d832:	613b      	str	r3, [r7, #16]
   return(result);
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d83a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	3308      	adds	r3, #8
 800d842:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d844:	623a      	str	r2, [r7, #32]
 800d846:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d848:	69f9      	ldr	r1, [r7, #28]
 800d84a:	6a3a      	ldr	r2, [r7, #32]
 800d84c:	e841 2300 	strex	r3, r2, [r1]
 800d850:	61bb      	str	r3, [r7, #24]
   return(result);
 800d852:	69bb      	ldr	r3, [r7, #24]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d1e5      	bne.n	800d824 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800d858:	2300      	movs	r3, #0
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	3758      	adds	r7, #88	@ 0x58
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}
 800d862:	bf00      	nop
 800d864:	0800da73 	.word	0x0800da73
 800d868:	0800db9b 	.word	0x0800db9b
 800d86c:	0800dbd9 	.word	0x0800dbd9

0800d870 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d870:	b480      	push	{r7}
 800d872:	b08f      	sub	sp, #60	@ 0x3c
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d87e:	6a3b      	ldr	r3, [r7, #32]
 800d880:	e853 3f00 	ldrex	r3, [r3]
 800d884:	61fb      	str	r3, [r7, #28]
   return(result);
 800d886:	69fb      	ldr	r3, [r7, #28]
 800d888:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d88c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	461a      	mov	r2, r3
 800d894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d896:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d898:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d89a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d89c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d89e:	e841 2300 	strex	r3, r2, [r1]
 800d8a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d8a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d1e6      	bne.n	800d878 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	3308      	adds	r3, #8
 800d8b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	e853 3f00 	ldrex	r3, [r3]
 800d8b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d8c0:	633b      	str	r3, [r7, #48]	@ 0x30
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	3308      	adds	r3, #8
 800d8c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8ca:	61ba      	str	r2, [r7, #24]
 800d8cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ce:	6979      	ldr	r1, [r7, #20]
 800d8d0:	69ba      	ldr	r2, [r7, #24]
 800d8d2:	e841 2300 	strex	r3, r2, [r1]
 800d8d6:	613b      	str	r3, [r7, #16]
   return(result);
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d1e5      	bne.n	800d8aa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2220      	movs	r2, #32
 800d8e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800d8e6:	bf00      	nop
 800d8e8:	373c      	adds	r7, #60	@ 0x3c
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f0:	4770      	bx	lr
	...

0800d8f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b095      	sub	sp, #84	@ 0x54
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d904:	e853 3f00 	ldrex	r3, [r3]
 800d908:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d90c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d910:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	461a      	mov	r2, r3
 800d918:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d91a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d91c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d91e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d920:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d922:	e841 2300 	strex	r3, r2, [r1]
 800d926:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d1e6      	bne.n	800d8fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	3308      	adds	r3, #8
 800d934:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d936:	6a3b      	ldr	r3, [r7, #32]
 800d938:	e853 3f00 	ldrex	r3, [r3]
 800d93c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d93e:	69fa      	ldr	r2, [r7, #28]
 800d940:	4b1e      	ldr	r3, [pc, #120]	@ (800d9bc <UART_EndRxTransfer+0xc8>)
 800d942:	4013      	ands	r3, r2
 800d944:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	3308      	adds	r3, #8
 800d94c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d94e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d950:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d952:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d954:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d956:	e841 2300 	strex	r3, r2, [r1]
 800d95a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d1e5      	bne.n	800d92e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d966:	2b01      	cmp	r3, #1
 800d968:	d118      	bne.n	800d99c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	e853 3f00 	ldrex	r3, [r3]
 800d976:	60bb      	str	r3, [r7, #8]
   return(result);
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	f023 0310 	bic.w	r3, r3, #16
 800d97e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	461a      	mov	r2, r3
 800d986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d988:	61bb      	str	r3, [r7, #24]
 800d98a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d98c:	6979      	ldr	r1, [r7, #20]
 800d98e:	69ba      	ldr	r2, [r7, #24]
 800d990:	e841 2300 	strex	r3, r2, [r1]
 800d994:	613b      	str	r3, [r7, #16]
   return(result);
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d1e6      	bne.n	800d96a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2220      	movs	r2, #32
 800d9a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d9b0:	bf00      	nop
 800d9b2:	3754      	adds	r7, #84	@ 0x54
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ba:	4770      	bx	lr
 800d9bc:	effffffe 	.word	0xeffffffe

0800d9c0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b090      	sub	sp, #64	@ 0x40
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9cc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	69db      	ldr	r3, [r3, #28]
 800d9d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d9d6:	d037      	beq.n	800da48 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d9d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9da:	2200      	movs	r2, #0
 800d9dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d9e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	3308      	adds	r3, #8
 800d9e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ea:	e853 3f00 	ldrex	r3, [r3]
 800d9ee:	623b      	str	r3, [r7, #32]
   return(result);
 800d9f0:	6a3b      	ldr	r3, [r7, #32]
 800d9f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d9f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d9f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	3308      	adds	r3, #8
 800d9fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800da00:	633a      	str	r2, [r7, #48]	@ 0x30
 800da02:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800da06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da08:	e841 2300 	strex	r3, r2, [r1]
 800da0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800da0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da10:	2b00      	cmp	r3, #0
 800da12:	d1e5      	bne.n	800d9e0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800da14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	e853 3f00 	ldrex	r3, [r3]
 800da20:	60fb      	str	r3, [r7, #12]
   return(result);
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da28:	637b      	str	r3, [r7, #52]	@ 0x34
 800da2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	461a      	mov	r2, r3
 800da30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da32:	61fb      	str	r3, [r7, #28]
 800da34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da36:	69b9      	ldr	r1, [r7, #24]
 800da38:	69fa      	ldr	r2, [r7, #28]
 800da3a:	e841 2300 	strex	r3, r2, [r1]
 800da3e:	617b      	str	r3, [r7, #20]
   return(result);
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d1e6      	bne.n	800da14 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800da46:	e002      	b.n	800da4e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800da48:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800da4a:	f7fe ff15 	bl	800c878 <HAL_UART_TxCpltCallback>
}
 800da4e:	bf00      	nop
 800da50:	3740      	adds	r7, #64	@ 0x40
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}

0800da56 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800da56:	b580      	push	{r7, lr}
 800da58:	b084      	sub	sp, #16
 800da5a:	af00      	add	r7, sp, #0
 800da5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da62:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800da64:	68f8      	ldr	r0, [r7, #12]
 800da66:	f7fe ff11 	bl	800c88c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da6a:	bf00      	nop
 800da6c:	3710      	adds	r7, #16
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}

0800da72 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800da72:	b580      	push	{r7, lr}
 800da74:	b09c      	sub	sp, #112	@ 0x70
 800da76:	af00      	add	r7, sp, #0
 800da78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da7e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	69db      	ldr	r3, [r3, #28]
 800da84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800da88:	d071      	beq.n	800db6e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800da8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da8c:	2200      	movs	r2, #0
 800da8e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da9a:	e853 3f00 	ldrex	r3, [r3]
 800da9e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800daa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800daa2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800daa6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800daa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	461a      	mov	r2, r3
 800daae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dab0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dab2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dab4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dab6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dab8:	e841 2300 	strex	r3, r2, [r1]
 800dabc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800dabe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d1e6      	bne.n	800da92 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dac4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	3308      	adds	r3, #8
 800daca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dacc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dace:	e853 3f00 	ldrex	r3, [r3]
 800dad2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dad6:	f023 0301 	bic.w	r3, r3, #1
 800dada:	667b      	str	r3, [r7, #100]	@ 0x64
 800dadc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	3308      	adds	r3, #8
 800dae2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800dae4:	647a      	str	r2, [r7, #68]	@ 0x44
 800dae6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dae8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800daea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800daec:	e841 2300 	strex	r3, r2, [r1]
 800daf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800daf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d1e5      	bne.n	800dac4 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800daf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	3308      	adds	r3, #8
 800dafe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db02:	e853 3f00 	ldrex	r3, [r3]
 800db06:	623b      	str	r3, [r7, #32]
   return(result);
 800db08:	6a3b      	ldr	r3, [r7, #32]
 800db0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800db0e:	663b      	str	r3, [r7, #96]	@ 0x60
 800db10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	3308      	adds	r3, #8
 800db16:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800db18:	633a      	str	r2, [r7, #48]	@ 0x30
 800db1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800db1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db20:	e841 2300 	strex	r3, r2, [r1]
 800db24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800db26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d1e5      	bne.n	800daf8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800db2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db2e:	2220      	movs	r2, #32
 800db30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db38:	2b01      	cmp	r3, #1
 800db3a:	d118      	bne.n	800db6e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	e853 3f00 	ldrex	r3, [r3]
 800db48:	60fb      	str	r3, [r7, #12]
   return(result);
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	f023 0310 	bic.w	r3, r3, #16
 800db50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800db52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	461a      	mov	r2, r3
 800db58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800db5a:	61fb      	str	r3, [r7, #28]
 800db5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db5e:	69b9      	ldr	r1, [r7, #24]
 800db60:	69fa      	ldr	r2, [r7, #28]
 800db62:	e841 2300 	strex	r3, r2, [r1]
 800db66:	617b      	str	r3, [r7, #20]
   return(result);
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d1e6      	bne.n	800db3c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800db6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db70:	2200      	movs	r2, #0
 800db72:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db78:	2b01      	cmp	r3, #1
 800db7a:	d107      	bne.n	800db8c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800db7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800db82:	4619      	mov	r1, r3
 800db84:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800db86:	f7fe fe9f 	bl	800c8c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800db8a:	e002      	b.n	800db92 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800db8c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800db8e:	f7f3 fe67 	bl	8001860 <HAL_UART_RxCpltCallback>
}
 800db92:	bf00      	nop
 800db94:	3770      	adds	r7, #112	@ 0x70
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}

0800db9a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800db9a:	b580      	push	{r7, lr}
 800db9c:	b084      	sub	sp, #16
 800db9e:	af00      	add	r7, sp, #0
 800dba0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dba6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	2201      	movs	r2, #1
 800dbac:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	d109      	bne.n	800dbca <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800dbbc:	085b      	lsrs	r3, r3, #1
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	4619      	mov	r1, r3
 800dbc2:	68f8      	ldr	r0, [r7, #12]
 800dbc4:	f7fe fe80 	bl	800c8c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dbc8:	e002      	b.n	800dbd0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800dbca:	68f8      	ldr	r0, [r7, #12]
 800dbcc:	f7fe fe68 	bl	800c8a0 <HAL_UART_RxHalfCpltCallback>
}
 800dbd0:	bf00      	nop
 800dbd2:	3710      	adds	r7, #16
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b086      	sub	sp, #24
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbe4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dbec:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dbf4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	689b      	ldr	r3, [r3, #8]
 800dbfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc00:	2b80      	cmp	r3, #128	@ 0x80
 800dc02:	d109      	bne.n	800dc18 <UART_DMAError+0x40>
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	2b21      	cmp	r3, #33	@ 0x21
 800dc08:	d106      	bne.n	800dc18 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800dc12:	6978      	ldr	r0, [r7, #20]
 800dc14:	f7ff fe2c 	bl	800d870 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	689b      	ldr	r3, [r3, #8]
 800dc1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc22:	2b40      	cmp	r3, #64	@ 0x40
 800dc24:	d109      	bne.n	800dc3a <UART_DMAError+0x62>
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2b22      	cmp	r3, #34	@ 0x22
 800dc2a:	d106      	bne.n	800dc3a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	2200      	movs	r2, #0
 800dc30:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800dc34:	6978      	ldr	r0, [r7, #20]
 800dc36:	f7ff fe5d 	bl	800d8f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dc40:	f043 0210 	orr.w	r2, r3, #16
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dc4a:	6978      	ldr	r0, [r7, #20]
 800dc4c:	f7fe fe32 	bl	800c8b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc50:	bf00      	nop
 800dc52:	3718      	adds	r7, #24
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b084      	sub	sp, #16
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	2200      	movs	r2, #0
 800dc72:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dc76:	68f8      	ldr	r0, [r7, #12]
 800dc78:	f7fe fe1c 	bl	800c8b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc7c:	bf00      	nop
 800dc7e:	3710      	adds	r7, #16
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b088      	sub	sp, #32
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	e853 3f00 	ldrex	r3, [r3]
 800dc98:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dca0:	61fb      	str	r3, [r7, #28]
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	461a      	mov	r2, r3
 800dca8:	69fb      	ldr	r3, [r7, #28]
 800dcaa:	61bb      	str	r3, [r7, #24]
 800dcac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcae:	6979      	ldr	r1, [r7, #20]
 800dcb0:	69ba      	ldr	r2, [r7, #24]
 800dcb2:	e841 2300 	strex	r3, r2, [r1]
 800dcb6:	613b      	str	r3, [r7, #16]
   return(result);
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d1e6      	bne.n	800dc8c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2220      	movs	r2, #32
 800dcc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f7fe fdd3 	bl	800c878 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dcd2:	bf00      	nop
 800dcd4:	3720      	adds	r7, #32
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}

0800dcda <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dcda:	b480      	push	{r7}
 800dcdc:	b083      	sub	sp, #12
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dce2:	bf00      	nop
 800dce4:	370c      	adds	r7, #12
 800dce6:	46bd      	mov	sp, r7
 800dce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcec:	4770      	bx	lr

0800dcee <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dcee:	b480      	push	{r7}
 800dcf0:	b083      	sub	sp, #12
 800dcf2:	af00      	add	r7, sp, #0
 800dcf4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dcf6:	bf00      	nop
 800dcf8:	370c      	adds	r7, #12
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr

0800dd02 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dd02:	b480      	push	{r7}
 800dd04:	b083      	sub	sp, #12
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dd0a:	bf00      	nop
 800dd0c:	370c      	adds	r7, #12
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd14:	4770      	bx	lr

0800dd16 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dd16:	b480      	push	{r7}
 800dd18:	b085      	sub	sp, #20
 800dd1a:	af00      	add	r7, sp, #0
 800dd1c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dd24:	2b01      	cmp	r3, #1
 800dd26:	d101      	bne.n	800dd2c <HAL_UARTEx_DisableFifoMode+0x16>
 800dd28:	2302      	movs	r3, #2
 800dd2a:	e027      	b.n	800dd7c <HAL_UARTEx_DisableFifoMode+0x66>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2201      	movs	r2, #1
 800dd30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2224      	movs	r2, #36	@ 0x24
 800dd38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	681a      	ldr	r2, [r3, #0]
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f022 0201 	bic.w	r2, r2, #1
 800dd52:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800dd5a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2200      	movs	r2, #0
 800dd60:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	68fa      	ldr	r2, [r7, #12]
 800dd68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2220      	movs	r2, #32
 800dd6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2200      	movs	r2, #0
 800dd76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dd7a:	2300      	movs	r3, #0
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3714      	adds	r7, #20
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr

0800dd88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b084      	sub	sp, #16
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dd98:	2b01      	cmp	r3, #1
 800dd9a:	d101      	bne.n	800dda0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dd9c:	2302      	movs	r3, #2
 800dd9e:	e02d      	b.n	800ddfc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2201      	movs	r2, #1
 800dda4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2224      	movs	r2, #36	@ 0x24
 800ddac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	681a      	ldr	r2, [r3, #0]
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	f022 0201 	bic.w	r2, r2, #1
 800ddc6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	689b      	ldr	r3, [r3, #8]
 800ddce:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	683a      	ldr	r2, [r7, #0]
 800ddd8:	430a      	orrs	r2, r1
 800ddda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f000 f84f 	bl	800de80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	68fa      	ldr	r2, [r7, #12]
 800dde8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2220      	movs	r2, #32
 800ddee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ddfa:	2300      	movs	r3, #0
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3710      	adds	r7, #16
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b084      	sub	sp, #16
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800de14:	2b01      	cmp	r3, #1
 800de16:	d101      	bne.n	800de1c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800de18:	2302      	movs	r3, #2
 800de1a:	e02d      	b.n	800de78 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2201      	movs	r2, #1
 800de20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2224      	movs	r2, #36	@ 0x24
 800de28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	681a      	ldr	r2, [r3, #0]
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	f022 0201 	bic.w	r2, r2, #1
 800de42:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	689b      	ldr	r3, [r3, #8]
 800de4a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	683a      	ldr	r2, [r7, #0]
 800de54:	430a      	orrs	r2, r1
 800de56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f000 f811 	bl	800de80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	68fa      	ldr	r2, [r7, #12]
 800de64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2220      	movs	r2, #32
 800de6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2200      	movs	r2, #0
 800de72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800de76:	2300      	movs	r3, #0
}
 800de78:	4618      	mov	r0, r3
 800de7a:	3710      	adds	r7, #16
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}

0800de80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800de80:	b480      	push	{r7}
 800de82:	b085      	sub	sp, #20
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d108      	bne.n	800dea2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2201      	movs	r2, #1
 800de94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2201      	movs	r2, #1
 800de9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dea0:	e031      	b.n	800df06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dea2:	2310      	movs	r3, #16
 800dea4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dea6:	2310      	movs	r3, #16
 800dea8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	689b      	ldr	r3, [r3, #8]
 800deb0:	0e5b      	lsrs	r3, r3, #25
 800deb2:	b2db      	uxtb	r3, r3
 800deb4:	f003 0307 	and.w	r3, r3, #7
 800deb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	689b      	ldr	r3, [r3, #8]
 800dec0:	0f5b      	lsrs	r3, r3, #29
 800dec2:	b2db      	uxtb	r3, r3
 800dec4:	f003 0307 	and.w	r3, r3, #7
 800dec8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800deca:	7bbb      	ldrb	r3, [r7, #14]
 800decc:	7b3a      	ldrb	r2, [r7, #12]
 800dece:	4911      	ldr	r1, [pc, #68]	@ (800df14 <UARTEx_SetNbDataToProcess+0x94>)
 800ded0:	5c8a      	ldrb	r2, [r1, r2]
 800ded2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ded6:	7b3a      	ldrb	r2, [r7, #12]
 800ded8:	490f      	ldr	r1, [pc, #60]	@ (800df18 <UARTEx_SetNbDataToProcess+0x98>)
 800deda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dedc:	fb93 f3f2 	sdiv	r3, r3, r2
 800dee0:	b29a      	uxth	r2, r3
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dee8:	7bfb      	ldrb	r3, [r7, #15]
 800deea:	7b7a      	ldrb	r2, [r7, #13]
 800deec:	4909      	ldr	r1, [pc, #36]	@ (800df14 <UARTEx_SetNbDataToProcess+0x94>)
 800deee:	5c8a      	ldrb	r2, [r1, r2]
 800def0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800def4:	7b7a      	ldrb	r2, [r7, #13]
 800def6:	4908      	ldr	r1, [pc, #32]	@ (800df18 <UARTEx_SetNbDataToProcess+0x98>)
 800def8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800defa:	fb93 f3f2 	sdiv	r3, r3, r2
 800defe:	b29a      	uxth	r2, r3
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800df06:	bf00      	nop
 800df08:	3714      	adds	r7, #20
 800df0a:	46bd      	mov	sp, r7
 800df0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df10:	4770      	bx	lr
 800df12:	bf00      	nop
 800df14:	08023528 	.word	0x08023528
 800df18:	08023530 	.word	0x08023530

0800df1c <__NVIC_SetPriority>:
{
 800df1c:	b480      	push	{r7}
 800df1e:	b083      	sub	sp, #12
 800df20:	af00      	add	r7, sp, #0
 800df22:	4603      	mov	r3, r0
 800df24:	6039      	str	r1, [r7, #0]
 800df26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800df28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	db0a      	blt.n	800df46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	b2da      	uxtb	r2, r3
 800df34:	490c      	ldr	r1, [pc, #48]	@ (800df68 <__NVIC_SetPriority+0x4c>)
 800df36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800df3a:	0112      	lsls	r2, r2, #4
 800df3c:	b2d2      	uxtb	r2, r2
 800df3e:	440b      	add	r3, r1
 800df40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800df44:	e00a      	b.n	800df5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	b2da      	uxtb	r2, r3
 800df4a:	4908      	ldr	r1, [pc, #32]	@ (800df6c <__NVIC_SetPriority+0x50>)
 800df4c:	88fb      	ldrh	r3, [r7, #6]
 800df4e:	f003 030f 	and.w	r3, r3, #15
 800df52:	3b04      	subs	r3, #4
 800df54:	0112      	lsls	r2, r2, #4
 800df56:	b2d2      	uxtb	r2, r2
 800df58:	440b      	add	r3, r1
 800df5a:	761a      	strb	r2, [r3, #24]
}
 800df5c:	bf00      	nop
 800df5e:	370c      	adds	r7, #12
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr
 800df68:	e000e100 	.word	0xe000e100
 800df6c:	e000ed00 	.word	0xe000ed00

0800df70 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800df70:	b580      	push	{r7, lr}
 800df72:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800df74:	4b05      	ldr	r3, [pc, #20]	@ (800df8c <SysTick_Handler+0x1c>)
 800df76:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800df78:	f002 f9c0 	bl	80102fc <xTaskGetSchedulerState>
 800df7c:	4603      	mov	r3, r0
 800df7e:	2b01      	cmp	r3, #1
 800df80:	d001      	beq.n	800df86 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800df82:	f003 fac1 	bl	8011508 <xPortSysTickHandler>
  }
}
 800df86:	bf00      	nop
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	e000e010 	.word	0xe000e010

0800df90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800df90:	b580      	push	{r7, lr}
 800df92:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800df94:	2100      	movs	r1, #0
 800df96:	f06f 0004 	mvn.w	r0, #4
 800df9a:	f7ff ffbf 	bl	800df1c <__NVIC_SetPriority>
#endif
}
 800df9e:	bf00      	nop
 800dfa0:	bd80      	pop	{r7, pc}
	...

0800dfa4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dfa4:	b480      	push	{r7}
 800dfa6:	b083      	sub	sp, #12
 800dfa8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfaa:	f3ef 8305 	mrs	r3, IPSR
 800dfae:	603b      	str	r3, [r7, #0]
  return(result);
 800dfb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d003      	beq.n	800dfbe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800dfb6:	f06f 0305 	mvn.w	r3, #5
 800dfba:	607b      	str	r3, [r7, #4]
 800dfbc:	e00c      	b.n	800dfd8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800dfbe:	4b0a      	ldr	r3, [pc, #40]	@ (800dfe8 <osKernelInitialize+0x44>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d105      	bne.n	800dfd2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800dfc6:	4b08      	ldr	r3, [pc, #32]	@ (800dfe8 <osKernelInitialize+0x44>)
 800dfc8:	2201      	movs	r2, #1
 800dfca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	607b      	str	r3, [r7, #4]
 800dfd0:	e002      	b.n	800dfd8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800dfd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dfd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dfd8:	687b      	ldr	r3, [r7, #4]
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	370c      	adds	r7, #12
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe4:	4770      	bx	lr
 800dfe6:	bf00      	nop
 800dfe8:	24032d54 	.word	0x24032d54

0800dfec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b082      	sub	sp, #8
 800dff0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dff2:	f3ef 8305 	mrs	r3, IPSR
 800dff6:	603b      	str	r3, [r7, #0]
  return(result);
 800dff8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d003      	beq.n	800e006 <osKernelStart+0x1a>
    stat = osErrorISR;
 800dffe:	f06f 0305 	mvn.w	r3, #5
 800e002:	607b      	str	r3, [r7, #4]
 800e004:	e010      	b.n	800e028 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e006:	4b0b      	ldr	r3, [pc, #44]	@ (800e034 <osKernelStart+0x48>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	2b01      	cmp	r3, #1
 800e00c:	d109      	bne.n	800e022 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e00e:	f7ff ffbf 	bl	800df90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e012:	4b08      	ldr	r3, [pc, #32]	@ (800e034 <osKernelStart+0x48>)
 800e014:	2202      	movs	r2, #2
 800e016:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e018:	f001 fcc2 	bl	800f9a0 <vTaskStartScheduler>
      stat = osOK;
 800e01c:	2300      	movs	r3, #0
 800e01e:	607b      	str	r3, [r7, #4]
 800e020:	e002      	b.n	800e028 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e022:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e026:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e028:	687b      	ldr	r3, [r7, #4]
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	3708      	adds	r7, #8
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}
 800e032:	bf00      	nop
 800e034:	24032d54 	.word	0x24032d54

0800e038 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800e038:	b580      	push	{r7, lr}
 800e03a:	b082      	sub	sp, #8
 800e03c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e03e:	f3ef 8305 	mrs	r3, IPSR
 800e042:	603b      	str	r3, [r7, #0]
  return(result);
 800e044:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800e046:	2b00      	cmp	r3, #0
 800e048:	d003      	beq.n	800e052 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800e04a:	f001 fdd5 	bl	800fbf8 <xTaskGetTickCountFromISR>
 800e04e:	6078      	str	r0, [r7, #4]
 800e050:	e002      	b.n	800e058 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800e052:	f001 fdc1 	bl	800fbd8 <xTaskGetTickCount>
 800e056:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800e058:	687b      	ldr	r3, [r7, #4]
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3708      	adds	r7, #8
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}

0800e062 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e062:	b580      	push	{r7, lr}
 800e064:	b08e      	sub	sp, #56	@ 0x38
 800e066:	af04      	add	r7, sp, #16
 800e068:	60f8      	str	r0, [r7, #12]
 800e06a:	60b9      	str	r1, [r7, #8]
 800e06c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e06e:	2300      	movs	r3, #0
 800e070:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e072:	f3ef 8305 	mrs	r3, IPSR
 800e076:	617b      	str	r3, [r7, #20]
  return(result);
 800e078:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d17e      	bne.n	800e17c <osThreadNew+0x11a>
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d07b      	beq.n	800e17c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e084:	2380      	movs	r3, #128	@ 0x80
 800e086:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e088:	2318      	movs	r3, #24
 800e08a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e08c:	2300      	movs	r3, #0
 800e08e:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800e090:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e094:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d045      	beq.n	800e128 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d002      	beq.n	800e0aa <osThreadNew+0x48>
        name = attr->name;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	699b      	ldr	r3, [r3, #24]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d002      	beq.n	800e0b8 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	699b      	ldr	r3, [r3, #24]
 800e0b6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e0b8:	69fb      	ldr	r3, [r7, #28]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d008      	beq.n	800e0d0 <osThreadNew+0x6e>
 800e0be:	69fb      	ldr	r3, [r7, #28]
 800e0c0:	2b38      	cmp	r3, #56	@ 0x38
 800e0c2:	d805      	bhi.n	800e0d0 <osThreadNew+0x6e>
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	f003 0301 	and.w	r3, r3, #1
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d001      	beq.n	800e0d4 <osThreadNew+0x72>
        return (NULL);
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	e054      	b.n	800e17e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	695b      	ldr	r3, [r3, #20]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d003      	beq.n	800e0e4 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	695b      	ldr	r3, [r3, #20]
 800e0e0:	089b      	lsrs	r3, r3, #2
 800e0e2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	689b      	ldr	r3, [r3, #8]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d00e      	beq.n	800e10a <osThreadNew+0xa8>
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	68db      	ldr	r3, [r3, #12]
 800e0f0:	2ba7      	cmp	r3, #167	@ 0xa7
 800e0f2:	d90a      	bls.n	800e10a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d006      	beq.n	800e10a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	695b      	ldr	r3, [r3, #20]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d002      	beq.n	800e10a <osThreadNew+0xa8>
        mem = 1;
 800e104:	2301      	movs	r3, #1
 800e106:	61bb      	str	r3, [r7, #24]
 800e108:	e010      	b.n	800e12c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	689b      	ldr	r3, [r3, #8]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d10c      	bne.n	800e12c <osThreadNew+0xca>
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	68db      	ldr	r3, [r3, #12]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d108      	bne.n	800e12c <osThreadNew+0xca>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	691b      	ldr	r3, [r3, #16]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d104      	bne.n	800e12c <osThreadNew+0xca>
          mem = 0;
 800e122:	2300      	movs	r3, #0
 800e124:	61bb      	str	r3, [r7, #24]
 800e126:	e001      	b.n	800e12c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e128:	2300      	movs	r3, #0
 800e12a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e12c:	69bb      	ldr	r3, [r7, #24]
 800e12e:	2b01      	cmp	r3, #1
 800e130:	d110      	bne.n	800e154 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e136:	687a      	ldr	r2, [r7, #4]
 800e138:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e13a:	9202      	str	r2, [sp, #8]
 800e13c:	9301      	str	r3, [sp, #4]
 800e13e:	69fb      	ldr	r3, [r7, #28]
 800e140:	9300      	str	r3, [sp, #0]
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	6a3a      	ldr	r2, [r7, #32]
 800e146:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e148:	68f8      	ldr	r0, [r7, #12]
 800e14a:	f001 fa35 	bl	800f5b8 <xTaskCreateStatic>
 800e14e:	4603      	mov	r3, r0
 800e150:	613b      	str	r3, [r7, #16]
 800e152:	e013      	b.n	800e17c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e154:	69bb      	ldr	r3, [r7, #24]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d110      	bne.n	800e17c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e15a:	6a3b      	ldr	r3, [r7, #32]
 800e15c:	b29a      	uxth	r2, r3
 800e15e:	f107 0310 	add.w	r3, r7, #16
 800e162:	9301      	str	r3, [sp, #4]
 800e164:	69fb      	ldr	r3, [r7, #28]
 800e166:	9300      	str	r3, [sp, #0]
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e16c:	68f8      	ldr	r0, [r7, #12]
 800e16e:	f001 fa83 	bl	800f678 <xTaskCreate>
 800e172:	4603      	mov	r3, r0
 800e174:	2b01      	cmp	r3, #1
 800e176:	d001      	beq.n	800e17c <osThreadNew+0x11a>
            hTask = NULL;
 800e178:	2300      	movs	r3, #0
 800e17a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e17c:	693b      	ldr	r3, [r7, #16]
}
 800e17e:	4618      	mov	r0, r3
 800e180:	3728      	adds	r7, #40	@ 0x28
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}
	...

0800e188 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800e188:	b580      	push	{r7, lr}
 800e18a:	b088      	sub	sp, #32
 800e18c:	af02      	add	r7, sp, #8
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d002      	beq.n	800e1a2 <osThreadFlagsSet+0x1a>
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	da03      	bge.n	800e1aa <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800e1a2:	f06f 0303 	mvn.w	r3, #3
 800e1a6:	60fb      	str	r3, [r7, #12]
 800e1a8:	e035      	b.n	800e216 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800e1aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e1ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e1b0:	f3ef 8305 	mrs	r3, IPSR
 800e1b4:	613b      	str	r3, [r7, #16]
  return(result);
 800e1b6:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d01f      	beq.n	800e1fc <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800e1c0:	f107 0308 	add.w	r3, r7, #8
 800e1c4:	9300      	str	r3, [sp, #0]
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	6839      	ldr	r1, [r7, #0]
 800e1cc:	6978      	ldr	r0, [r7, #20]
 800e1ce:	f002 fb45 	bl	801085c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800e1d2:	f107 030c 	add.w	r3, r7, #12
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	9200      	str	r2, [sp, #0]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	2100      	movs	r1, #0
 800e1de:	6978      	ldr	r0, [r7, #20]
 800e1e0:	f002 fb3c 	bl	801085c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d015      	beq.n	800e216 <osThreadFlagsSet+0x8e>
 800e1ea:	4b0d      	ldr	r3, [pc, #52]	@ (800e220 <osThreadFlagsSet+0x98>)
 800e1ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e1f0:	601a      	str	r2, [r3, #0]
 800e1f2:	f3bf 8f4f 	dsb	sy
 800e1f6:	f3bf 8f6f 	isb	sy
 800e1fa:	e00c      	b.n	800e216 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	2201      	movs	r2, #1
 800e200:	6839      	ldr	r1, [r7, #0]
 800e202:	6978      	ldr	r0, [r7, #20]
 800e204:	f002 fa68 	bl	80106d8 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800e208:	f107 030c 	add.w	r3, r7, #12
 800e20c:	2200      	movs	r2, #0
 800e20e:	2100      	movs	r1, #0
 800e210:	6978      	ldr	r0, [r7, #20]
 800e212:	f002 fa61 	bl	80106d8 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800e216:	68fb      	ldr	r3, [r7, #12]
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3718      	adds	r7, #24
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}
 800e220:	e000ed04 	.word	0xe000ed04

0800e224 <osThreadFlagsGet>:

  /* Return flags before clearing */
  return (rflags);
}

uint32_t osThreadFlagsGet (void) {
 800e224:	b580      	push	{r7, lr}
 800e226:	b084      	sub	sp, #16
 800e228:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e22a:	f3ef 8305 	mrs	r3, IPSR
 800e22e:	60bb      	str	r3, [r7, #8]
  return(result);
 800e230:	68bb      	ldr	r3, [r7, #8]
  TaskHandle_t hTask;
  uint32_t rflags;

  if (IS_IRQ()) {
 800e232:	2b00      	cmp	r3, #0
 800e234:	d003      	beq.n	800e23e <osThreadFlagsGet+0x1a>
    rflags = (uint32_t)osErrorISR;
 800e236:	f06f 0305 	mvn.w	r3, #5
 800e23a:	607b      	str	r3, [r7, #4]
 800e23c:	e00e      	b.n	800e25c <osThreadFlagsGet+0x38>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800e23e:	f002 f84d 	bl	80102dc <xTaskGetCurrentTaskHandle>
 800e242:	60f8      	str	r0, [r7, #12]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags) != pdPASS) {
 800e244:	1d3b      	adds	r3, r7, #4
 800e246:	2200      	movs	r2, #0
 800e248:	2100      	movs	r1, #0
 800e24a:	68f8      	ldr	r0, [r7, #12]
 800e24c:	f002 fa44 	bl	80106d8 <xTaskGenericNotify>
 800e250:	4603      	mov	r3, r0
 800e252:	2b01      	cmp	r3, #1
 800e254:	d002      	beq.n	800e25c <osThreadFlagsGet+0x38>
      rflags = (uint32_t)osError;
 800e256:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e25a:	607b      	str	r3, [r7, #4]
    }
  }

  return (rflags);
 800e25c:	687b      	ldr	r3, [r7, #4]
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3710      	adds	r7, #16
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}

0800e266 <osThreadFlagsWait>:

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800e266:	b580      	push	{r7, lr}
 800e268:	b08c      	sub	sp, #48	@ 0x30
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	60f8      	str	r0, [r7, #12]
 800e26e:	60b9      	str	r1, [r7, #8]
 800e270:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e272:	f3ef 8305 	mrs	r3, IPSR
 800e276:	617b      	str	r3, [r7, #20]
  return(result);
 800e278:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d003      	beq.n	800e286 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800e27e:	f06f 0305 	mvn.w	r3, #5
 800e282:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e284:	e06b      	b.n	800e35e <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	da03      	bge.n	800e294 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800e28c:	f06f 0303 	mvn.w	r3, #3
 800e290:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e292:	e064      	b.n	800e35e <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	f003 0302 	and.w	r3, r3, #2
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d002      	beq.n	800e2a4 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e2a2:	e001      	b.n	800e2a8 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800e2b0:	f001 fc92 	bl	800fbd8 <xTaskGetTickCount>
 800e2b4:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800e2b6:	f107 0210 	add.w	r2, r7, #16
 800e2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e2be:	2000      	movs	r0, #0
 800e2c0:	f002 f9aa 	bl	8010618 <xTaskNotifyWait>
 800e2c4:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800e2c6:	69fb      	ldr	r3, [r7, #28]
 800e2c8:	2b01      	cmp	r3, #1
 800e2ca:	d137      	bne.n	800e33c <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800e2cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	4013      	ands	r3, r2
 800e2d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2d8:	4313      	orrs	r3, r2
 800e2da:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	f003 0301 	and.w	r3, r3, #1
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d00c      	beq.n	800e300 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800e2e6:	68fa      	ldr	r2, [r7, #12]
 800e2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ea:	4013      	ands	r3, r2
 800e2ec:	68fa      	ldr	r2, [r7, #12]
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d032      	beq.n	800e358 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d10f      	bne.n	800e318 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800e2f8:	f06f 0302 	mvn.w	r3, #2
 800e2fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800e2fe:	e02e      	b.n	800e35e <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800e300:	68fa      	ldr	r2, [r7, #12]
 800e302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e304:	4013      	ands	r3, r2
 800e306:	2b00      	cmp	r3, #0
 800e308:	d128      	bne.n	800e35c <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d103      	bne.n	800e318 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800e310:	f06f 0302 	mvn.w	r3, #2
 800e314:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800e316:	e022      	b.n	800e35e <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800e318:	f001 fc5e 	bl	800fbd8 <xTaskGetTickCount>
 800e31c:	4602      	mov	r2, r0
 800e31e:	6a3b      	ldr	r3, [r7, #32]
 800e320:	1ad3      	subs	r3, r2, r3
 800e322:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800e324:	69ba      	ldr	r2, [r7, #24]
 800e326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e328:	429a      	cmp	r2, r3
 800e32a:	d902      	bls.n	800e332 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800e32c:	2300      	movs	r3, #0
 800e32e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e330:	e00e      	b.n	800e350 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800e332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e334:	69bb      	ldr	r3, [r7, #24]
 800e336:	1ad3      	subs	r3, r2, r3
 800e338:	627b      	str	r3, [r7, #36]	@ 0x24
 800e33a:	e009      	b.n	800e350 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d103      	bne.n	800e34a <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800e342:	f06f 0302 	mvn.w	r3, #2
 800e346:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e348:	e002      	b.n	800e350 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800e34a:	f06f 0301 	mvn.w	r3, #1
 800e34e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800e350:	69fb      	ldr	r3, [r7, #28]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d1af      	bne.n	800e2b6 <osThreadFlagsWait+0x50>
 800e356:	e002      	b.n	800e35e <osThreadFlagsWait+0xf8>
            break;
 800e358:	bf00      	nop
 800e35a:	e000      	b.n	800e35e <osThreadFlagsWait+0xf8>
            break;
 800e35c:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800e35e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800e360:	4618      	mov	r0, r3
 800e362:	3730      	adds	r7, #48	@ 0x30
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}

0800e368 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e368:	b580      	push	{r7, lr}
 800e36a:	b084      	sub	sp, #16
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e370:	f3ef 8305 	mrs	r3, IPSR
 800e374:	60bb      	str	r3, [r7, #8]
  return(result);
 800e376:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d003      	beq.n	800e384 <osDelay+0x1c>
    stat = osErrorISR;
 800e37c:	f06f 0305 	mvn.w	r3, #5
 800e380:	60fb      	str	r3, [r7, #12]
 800e382:	e007      	b.n	800e394 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e384:	2300      	movs	r3, #0
 800e386:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d002      	beq.n	800e394 <osDelay+0x2c>
      vTaskDelay(ticks);
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	f001 fad0 	bl	800f934 <vTaskDelay>
    }
  }

  return (stat);
 800e394:	68fb      	ldr	r3, [r7, #12]
}
 800e396:	4618      	mov	r0, r3
 800e398:	3710      	adds	r7, #16
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}

0800e39e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800e39e:	b580      	push	{r7, lr}
 800e3a0:	b088      	sub	sp, #32
 800e3a2:	af00      	add	r7, sp, #0
 800e3a4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e3aa:	f3ef 8305 	mrs	r3, IPSR
 800e3ae:	60bb      	str	r3, [r7, #8]
  return(result);
 800e3b0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d174      	bne.n	800e4a0 <osMutexNew+0x102>
    if (attr != NULL) {
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d003      	beq.n	800e3c4 <osMutexNew+0x26>
      type = attr->attr_bits;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	685b      	ldr	r3, [r3, #4]
 800e3c0:	61bb      	str	r3, [r7, #24]
 800e3c2:	e001      	b.n	800e3c8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800e3c8:	69bb      	ldr	r3, [r7, #24]
 800e3ca:	f003 0301 	and.w	r3, r3, #1
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d002      	beq.n	800e3d8 <osMutexNew+0x3a>
      rmtx = 1U;
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	617b      	str	r3, [r7, #20]
 800e3d6:	e001      	b.n	800e3dc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800e3dc:	69bb      	ldr	r3, [r7, #24]
 800e3de:	f003 0308 	and.w	r3, r3, #8
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d15c      	bne.n	800e4a0 <osMutexNew+0x102>
      mem = -1;
 800e3e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e3ea:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d015      	beq.n	800e41e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	689b      	ldr	r3, [r3, #8]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d006      	beq.n	800e408 <osMutexNew+0x6a>
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	68db      	ldr	r3, [r3, #12]
 800e3fe:	2b4f      	cmp	r3, #79	@ 0x4f
 800e400:	d902      	bls.n	800e408 <osMutexNew+0x6a>
          mem = 1;
 800e402:	2301      	movs	r3, #1
 800e404:	613b      	str	r3, [r7, #16]
 800e406:	e00c      	b.n	800e422 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	689b      	ldr	r3, [r3, #8]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d108      	bne.n	800e422 <osMutexNew+0x84>
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	68db      	ldr	r3, [r3, #12]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d104      	bne.n	800e422 <osMutexNew+0x84>
            mem = 0;
 800e418:	2300      	movs	r3, #0
 800e41a:	613b      	str	r3, [r7, #16]
 800e41c:	e001      	b.n	800e422 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800e41e:	2300      	movs	r3, #0
 800e420:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800e422:	693b      	ldr	r3, [r7, #16]
 800e424:	2b01      	cmp	r3, #1
 800e426:	d112      	bne.n	800e44e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d007      	beq.n	800e43e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	689b      	ldr	r3, [r3, #8]
 800e432:	4619      	mov	r1, r3
 800e434:	2004      	movs	r0, #4
 800e436:	f000 fb20 	bl	800ea7a <xQueueCreateMutexStatic>
 800e43a:	61f8      	str	r0, [r7, #28]
 800e43c:	e016      	b.n	800e46c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	689b      	ldr	r3, [r3, #8]
 800e442:	4619      	mov	r1, r3
 800e444:	2001      	movs	r0, #1
 800e446:	f000 fb18 	bl	800ea7a <xQueueCreateMutexStatic>
 800e44a:	61f8      	str	r0, [r7, #28]
 800e44c:	e00e      	b.n	800e46c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d10b      	bne.n	800e46c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d004      	beq.n	800e464 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800e45a:	2004      	movs	r0, #4
 800e45c:	f000 faf5 	bl	800ea4a <xQueueCreateMutex>
 800e460:	61f8      	str	r0, [r7, #28]
 800e462:	e003      	b.n	800e46c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800e464:	2001      	movs	r0, #1
 800e466:	f000 faf0 	bl	800ea4a <xQueueCreateMutex>
 800e46a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800e46c:	69fb      	ldr	r3, [r7, #28]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d00c      	beq.n	800e48c <osMutexNew+0xee>
        if (attr != NULL) {
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d003      	beq.n	800e480 <osMutexNew+0xe2>
          name = attr->name;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	60fb      	str	r3, [r7, #12]
 800e47e:	e001      	b.n	800e484 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800e480:	2300      	movs	r3, #0
 800e482:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800e484:	68f9      	ldr	r1, [r7, #12]
 800e486:	69f8      	ldr	r0, [r7, #28]
 800e488:	f001 f838 	bl	800f4fc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800e48c:	69fb      	ldr	r3, [r7, #28]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d006      	beq.n	800e4a0 <osMutexNew+0x102>
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d003      	beq.n	800e4a0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800e498:	69fb      	ldr	r3, [r7, #28]
 800e49a:	f043 0301 	orr.w	r3, r3, #1
 800e49e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800e4a0:	69fb      	ldr	r3, [r7, #28]
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3720      	adds	r7, #32
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}

0800e4aa <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800e4aa:	b580      	push	{r7, lr}
 800e4ac:	b086      	sub	sp, #24
 800e4ae:	af00      	add	r7, sp, #0
 800e4b0:	6078      	str	r0, [r7, #4]
 800e4b2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f023 0301 	bic.w	r3, r3, #1
 800e4ba:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f003 0301 	and.w	r3, r3, #1
 800e4c2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e4c8:	f3ef 8305 	mrs	r3, IPSR
 800e4cc:	60bb      	str	r3, [r7, #8]
  return(result);
 800e4ce:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d003      	beq.n	800e4dc <osMutexAcquire+0x32>
    stat = osErrorISR;
 800e4d4:	f06f 0305 	mvn.w	r3, #5
 800e4d8:	617b      	str	r3, [r7, #20]
 800e4da:	e02c      	b.n	800e536 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800e4dc:	693b      	ldr	r3, [r7, #16]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d103      	bne.n	800e4ea <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800e4e2:	f06f 0303 	mvn.w	r3, #3
 800e4e6:	617b      	str	r3, [r7, #20]
 800e4e8:	e025      	b.n	800e536 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d011      	beq.n	800e514 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800e4f0:	6839      	ldr	r1, [r7, #0]
 800e4f2:	6938      	ldr	r0, [r7, #16]
 800e4f4:	f000 fb11 	bl	800eb1a <xQueueTakeMutexRecursive>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	2b01      	cmp	r3, #1
 800e4fc:	d01b      	beq.n	800e536 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d003      	beq.n	800e50c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800e504:	f06f 0301 	mvn.w	r3, #1
 800e508:	617b      	str	r3, [r7, #20]
 800e50a:	e014      	b.n	800e536 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800e50c:	f06f 0302 	mvn.w	r3, #2
 800e510:	617b      	str	r3, [r7, #20]
 800e512:	e010      	b.n	800e536 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800e514:	6839      	ldr	r1, [r7, #0]
 800e516:	6938      	ldr	r0, [r7, #16]
 800e518:	f000 fdb8 	bl	800f08c <xQueueSemaphoreTake>
 800e51c:	4603      	mov	r3, r0
 800e51e:	2b01      	cmp	r3, #1
 800e520:	d009      	beq.n	800e536 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d003      	beq.n	800e530 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800e528:	f06f 0301 	mvn.w	r3, #1
 800e52c:	617b      	str	r3, [r7, #20]
 800e52e:	e002      	b.n	800e536 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800e530:	f06f 0302 	mvn.w	r3, #2
 800e534:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800e536:	697b      	ldr	r3, [r7, #20]
}
 800e538:	4618      	mov	r0, r3
 800e53a:	3718      	adds	r7, #24
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd80      	pop	{r7, pc}

0800e540 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800e540:	b580      	push	{r7, lr}
 800e542:	b086      	sub	sp, #24
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f023 0301 	bic.w	r3, r3, #1
 800e54e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f003 0301 	and.w	r3, r3, #1
 800e556:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800e558:	2300      	movs	r3, #0
 800e55a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e55c:	f3ef 8305 	mrs	r3, IPSR
 800e560:	60bb      	str	r3, [r7, #8]
  return(result);
 800e562:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800e564:	2b00      	cmp	r3, #0
 800e566:	d003      	beq.n	800e570 <osMutexRelease+0x30>
    stat = osErrorISR;
 800e568:	f06f 0305 	mvn.w	r3, #5
 800e56c:	617b      	str	r3, [r7, #20]
 800e56e:	e01f      	b.n	800e5b0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800e570:	693b      	ldr	r3, [r7, #16]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d103      	bne.n	800e57e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800e576:	f06f 0303 	mvn.w	r3, #3
 800e57a:	617b      	str	r3, [r7, #20]
 800e57c:	e018      	b.n	800e5b0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d009      	beq.n	800e598 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800e584:	6938      	ldr	r0, [r7, #16]
 800e586:	f000 fa93 	bl	800eab0 <xQueueGiveMutexRecursive>
 800e58a:	4603      	mov	r3, r0
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	d00f      	beq.n	800e5b0 <osMutexRelease+0x70>
        stat = osErrorResource;
 800e590:	f06f 0302 	mvn.w	r3, #2
 800e594:	617b      	str	r3, [r7, #20]
 800e596:	e00b      	b.n	800e5b0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800e598:	2300      	movs	r3, #0
 800e59a:	2200      	movs	r2, #0
 800e59c:	2100      	movs	r1, #0
 800e59e:	6938      	ldr	r0, [r7, #16]
 800e5a0:	f000 faf2 	bl	800eb88 <xQueueGenericSend>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	2b01      	cmp	r3, #1
 800e5a8:	d002      	beq.n	800e5b0 <osMutexRelease+0x70>
        stat = osErrorResource;
 800e5aa:	f06f 0302 	mvn.w	r3, #2
 800e5ae:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e5b0:	697b      	ldr	r3, [r7, #20]
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3718      	adds	r7, #24
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
	...

0800e5bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e5bc:	b480      	push	{r7}
 800e5be:	b085      	sub	sp, #20
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	60f8      	str	r0, [r7, #12]
 800e5c4:	60b9      	str	r1, [r7, #8]
 800e5c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	4a07      	ldr	r2, [pc, #28]	@ (800e5e8 <vApplicationGetIdleTaskMemory+0x2c>)
 800e5cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	4a06      	ldr	r2, [pc, #24]	@ (800e5ec <vApplicationGetIdleTaskMemory+0x30>)
 800e5d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2280      	movs	r2, #128	@ 0x80
 800e5d8:	601a      	str	r2, [r3, #0]
}
 800e5da:	bf00      	nop
 800e5dc:	3714      	adds	r7, #20
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e4:	4770      	bx	lr
 800e5e6:	bf00      	nop
 800e5e8:	24032d58 	.word	0x24032d58
 800e5ec:	24032e00 	.word	0x24032e00

0800e5f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e5f0:	b480      	push	{r7}
 800e5f2:	b085      	sub	sp, #20
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	60f8      	str	r0, [r7, #12]
 800e5f8:	60b9      	str	r1, [r7, #8]
 800e5fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	4a07      	ldr	r2, [pc, #28]	@ (800e61c <vApplicationGetTimerTaskMemory+0x2c>)
 800e600:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	4a06      	ldr	r2, [pc, #24]	@ (800e620 <vApplicationGetTimerTaskMemory+0x30>)
 800e606:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e60e:	601a      	str	r2, [r3, #0]
}
 800e610:	bf00      	nop
 800e612:	3714      	adds	r7, #20
 800e614:	46bd      	mov	sp, r7
 800e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61a:	4770      	bx	lr
 800e61c:	24033000 	.word	0x24033000
 800e620:	240330a8 	.word	0x240330a8

0800e624 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e624:	b480      	push	{r7}
 800e626:	b083      	sub	sp, #12
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f103 0208 	add.w	r2, r3, #8
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e63c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f103 0208 	add.w	r2, r3, #8
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f103 0208 	add.w	r2, r3, #8
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	2200      	movs	r2, #0
 800e656:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e658:	bf00      	nop
 800e65a:	370c      	adds	r7, #12
 800e65c:	46bd      	mov	sp, r7
 800e65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e662:	4770      	bx	lr

0800e664 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e664:	b480      	push	{r7}
 800e666:	b083      	sub	sp, #12
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2200      	movs	r2, #0
 800e670:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e672:	bf00      	nop
 800e674:	370c      	adds	r7, #12
 800e676:	46bd      	mov	sp, r7
 800e678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67c:	4770      	bx	lr

0800e67e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e67e:	b480      	push	{r7}
 800e680:	b085      	sub	sp, #20
 800e682:	af00      	add	r7, sp, #0
 800e684:	6078      	str	r0, [r7, #4]
 800e686:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	685b      	ldr	r3, [r3, #4]
 800e68c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	68fa      	ldr	r2, [r7, #12]
 800e692:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	689a      	ldr	r2, [r3, #8]
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	689b      	ldr	r3, [r3, #8]
 800e6a0:	683a      	ldr	r2, [r7, #0]
 800e6a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	683a      	ldr	r2, [r7, #0]
 800e6a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	687a      	ldr	r2, [r7, #4]
 800e6ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	1c5a      	adds	r2, r3, #1
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	601a      	str	r2, [r3, #0]
}
 800e6ba:	bf00      	nop
 800e6bc:	3714      	adds	r7, #20
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c4:	4770      	bx	lr

0800e6c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e6c6:	b480      	push	{r7}
 800e6c8:	b085      	sub	sp, #20
 800e6ca:	af00      	add	r7, sp, #0
 800e6cc:	6078      	str	r0, [r7, #4]
 800e6ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e6dc:	d103      	bne.n	800e6e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	691b      	ldr	r3, [r3, #16]
 800e6e2:	60fb      	str	r3, [r7, #12]
 800e6e4:	e00c      	b.n	800e700 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	3308      	adds	r3, #8
 800e6ea:	60fb      	str	r3, [r7, #12]
 800e6ec:	e002      	b.n	800e6f4 <vListInsert+0x2e>
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	685b      	ldr	r3, [r3, #4]
 800e6f2:	60fb      	str	r3, [r7, #12]
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	685b      	ldr	r3, [r3, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	68ba      	ldr	r2, [r7, #8]
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d2f6      	bcs.n	800e6ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	685a      	ldr	r2, [r3, #4]
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	685b      	ldr	r3, [r3, #4]
 800e70c:	683a      	ldr	r2, [r7, #0]
 800e70e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	68fa      	ldr	r2, [r7, #12]
 800e714:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	683a      	ldr	r2, [r7, #0]
 800e71a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	687a      	ldr	r2, [r7, #4]
 800e720:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	1c5a      	adds	r2, r3, #1
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	601a      	str	r2, [r3, #0]
}
 800e72c:	bf00      	nop
 800e72e:	3714      	adds	r7, #20
 800e730:	46bd      	mov	sp, r7
 800e732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e736:	4770      	bx	lr

0800e738 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e738:	b480      	push	{r7}
 800e73a:	b085      	sub	sp, #20
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	691b      	ldr	r3, [r3, #16]
 800e744:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	685b      	ldr	r3, [r3, #4]
 800e74a:	687a      	ldr	r2, [r7, #4]
 800e74c:	6892      	ldr	r2, [r2, #8]
 800e74e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	689b      	ldr	r3, [r3, #8]
 800e754:	687a      	ldr	r2, [r7, #4]
 800e756:	6852      	ldr	r2, [r2, #4]
 800e758:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	685b      	ldr	r3, [r3, #4]
 800e75e:	687a      	ldr	r2, [r7, #4]
 800e760:	429a      	cmp	r2, r3
 800e762:	d103      	bne.n	800e76c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	689a      	ldr	r2, [r3, #8]
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2200      	movs	r2, #0
 800e770:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	1e5a      	subs	r2, r3, #1
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	681b      	ldr	r3, [r3, #0]
}
 800e780:	4618      	mov	r0, r3
 800e782:	3714      	adds	r7, #20
 800e784:	46bd      	mov	sp, r7
 800e786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78a:	4770      	bx	lr

0800e78c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b084      	sub	sp, #16
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d10b      	bne.n	800e7b8 <xQueueGenericReset+0x2c>
	__asm volatile
 800e7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7a4:	f383 8811 	msr	BASEPRI, r3
 800e7a8:	f3bf 8f6f 	isb	sy
 800e7ac:	f3bf 8f4f 	dsb	sy
 800e7b0:	60bb      	str	r3, [r7, #8]
}
 800e7b2:	bf00      	nop
 800e7b4:	bf00      	nop
 800e7b6:	e7fd      	b.n	800e7b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e7b8:	f002 fe16 	bl	80113e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	681a      	ldr	r2, [r3, #0]
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e7c4:	68f9      	ldr	r1, [r7, #12]
 800e7c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e7c8:	fb01 f303 	mul.w	r3, r1, r3
 800e7cc:	441a      	add	r2, r3
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681a      	ldr	r2, [r3, #0]
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e7e8:	3b01      	subs	r3, #1
 800e7ea:	68f9      	ldr	r1, [r7, #12]
 800e7ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e7ee:	fb01 f303 	mul.w	r3, r1, r3
 800e7f2:	441a      	add	r2, r3
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	22ff      	movs	r2, #255	@ 0xff
 800e7fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	22ff      	movs	r2, #255	@ 0xff
 800e804:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d114      	bne.n	800e838 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	691b      	ldr	r3, [r3, #16]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d01a      	beq.n	800e84c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	3310      	adds	r3, #16
 800e81a:	4618      	mov	r0, r3
 800e81c:	f001 fb70 	bl	800ff00 <xTaskRemoveFromEventList>
 800e820:	4603      	mov	r3, r0
 800e822:	2b00      	cmp	r3, #0
 800e824:	d012      	beq.n	800e84c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e826:	4b0d      	ldr	r3, [pc, #52]	@ (800e85c <xQueueGenericReset+0xd0>)
 800e828:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e82c:	601a      	str	r2, [r3, #0]
 800e82e:	f3bf 8f4f 	dsb	sy
 800e832:	f3bf 8f6f 	isb	sy
 800e836:	e009      	b.n	800e84c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	3310      	adds	r3, #16
 800e83c:	4618      	mov	r0, r3
 800e83e:	f7ff fef1 	bl	800e624 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	3324      	adds	r3, #36	@ 0x24
 800e846:	4618      	mov	r0, r3
 800e848:	f7ff feec 	bl	800e624 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e84c:	f002 fdfe 	bl	801144c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e850:	2301      	movs	r3, #1
}
 800e852:	4618      	mov	r0, r3
 800e854:	3710      	adds	r7, #16
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}
 800e85a:	bf00      	nop
 800e85c:	e000ed04 	.word	0xe000ed04

0800e860 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e860:	b580      	push	{r7, lr}
 800e862:	b08e      	sub	sp, #56	@ 0x38
 800e864:	af02      	add	r7, sp, #8
 800e866:	60f8      	str	r0, [r7, #12]
 800e868:	60b9      	str	r1, [r7, #8]
 800e86a:	607a      	str	r2, [r7, #4]
 800e86c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d10b      	bne.n	800e88c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800e874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e878:	f383 8811 	msr	BASEPRI, r3
 800e87c:	f3bf 8f6f 	isb	sy
 800e880:	f3bf 8f4f 	dsb	sy
 800e884:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e886:	bf00      	nop
 800e888:	bf00      	nop
 800e88a:	e7fd      	b.n	800e888 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d10b      	bne.n	800e8aa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800e892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e896:	f383 8811 	msr	BASEPRI, r3
 800e89a:	f3bf 8f6f 	isb	sy
 800e89e:	f3bf 8f4f 	dsb	sy
 800e8a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e8a4:	bf00      	nop
 800e8a6:	bf00      	nop
 800e8a8:	e7fd      	b.n	800e8a6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d002      	beq.n	800e8b6 <xQueueGenericCreateStatic+0x56>
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d001      	beq.n	800e8ba <xQueueGenericCreateStatic+0x5a>
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	e000      	b.n	800e8bc <xQueueGenericCreateStatic+0x5c>
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d10b      	bne.n	800e8d8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800e8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8c4:	f383 8811 	msr	BASEPRI, r3
 800e8c8:	f3bf 8f6f 	isb	sy
 800e8cc:	f3bf 8f4f 	dsb	sy
 800e8d0:	623b      	str	r3, [r7, #32]
}
 800e8d2:	bf00      	nop
 800e8d4:	bf00      	nop
 800e8d6:	e7fd      	b.n	800e8d4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d102      	bne.n	800e8e4 <xQueueGenericCreateStatic+0x84>
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d101      	bne.n	800e8e8 <xQueueGenericCreateStatic+0x88>
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	e000      	b.n	800e8ea <xQueueGenericCreateStatic+0x8a>
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d10b      	bne.n	800e906 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800e8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8f2:	f383 8811 	msr	BASEPRI, r3
 800e8f6:	f3bf 8f6f 	isb	sy
 800e8fa:	f3bf 8f4f 	dsb	sy
 800e8fe:	61fb      	str	r3, [r7, #28]
}
 800e900:	bf00      	nop
 800e902:	bf00      	nop
 800e904:	e7fd      	b.n	800e902 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e906:	2350      	movs	r3, #80	@ 0x50
 800e908:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	2b50      	cmp	r3, #80	@ 0x50
 800e90e:	d00b      	beq.n	800e928 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800e910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e914:	f383 8811 	msr	BASEPRI, r3
 800e918:	f3bf 8f6f 	isb	sy
 800e91c:	f3bf 8f4f 	dsb	sy
 800e920:	61bb      	str	r3, [r7, #24]
}
 800e922:	bf00      	nop
 800e924:	bf00      	nop
 800e926:	e7fd      	b.n	800e924 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e928:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e92e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e930:	2b00      	cmp	r3, #0
 800e932:	d00d      	beq.n	800e950 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e936:	2201      	movs	r2, #1
 800e938:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e93c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e942:	9300      	str	r3, [sp, #0]
 800e944:	4613      	mov	r3, r2
 800e946:	687a      	ldr	r2, [r7, #4]
 800e948:	68b9      	ldr	r1, [r7, #8]
 800e94a:	68f8      	ldr	r0, [r7, #12]
 800e94c:	f000 f840 	bl	800e9d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e952:	4618      	mov	r0, r3
 800e954:	3730      	adds	r7, #48	@ 0x30
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}

0800e95a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e95a:	b580      	push	{r7, lr}
 800e95c:	b08a      	sub	sp, #40	@ 0x28
 800e95e:	af02      	add	r7, sp, #8
 800e960:	60f8      	str	r0, [r7, #12]
 800e962:	60b9      	str	r1, [r7, #8]
 800e964:	4613      	mov	r3, r2
 800e966:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d10b      	bne.n	800e986 <xQueueGenericCreate+0x2c>
	__asm volatile
 800e96e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e972:	f383 8811 	msr	BASEPRI, r3
 800e976:	f3bf 8f6f 	isb	sy
 800e97a:	f3bf 8f4f 	dsb	sy
 800e97e:	613b      	str	r3, [r7, #16]
}
 800e980:	bf00      	nop
 800e982:	bf00      	nop
 800e984:	e7fd      	b.n	800e982 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	68ba      	ldr	r2, [r7, #8]
 800e98a:	fb02 f303 	mul.w	r3, r2, r3
 800e98e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e990:	69fb      	ldr	r3, [r7, #28]
 800e992:	3350      	adds	r3, #80	@ 0x50
 800e994:	4618      	mov	r0, r3
 800e996:	f002 fe49 	bl	801162c <pvPortMalloc>
 800e99a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e99c:	69bb      	ldr	r3, [r7, #24]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d011      	beq.n	800e9c6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e9a2:	69bb      	ldr	r3, [r7, #24]
 800e9a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	3350      	adds	r3, #80	@ 0x50
 800e9aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e9ac:	69bb      	ldr	r3, [r7, #24]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e9b4:	79fa      	ldrb	r2, [r7, #7]
 800e9b6:	69bb      	ldr	r3, [r7, #24]
 800e9b8:	9300      	str	r3, [sp, #0]
 800e9ba:	4613      	mov	r3, r2
 800e9bc:	697a      	ldr	r2, [r7, #20]
 800e9be:	68b9      	ldr	r1, [r7, #8]
 800e9c0:	68f8      	ldr	r0, [r7, #12]
 800e9c2:	f000 f805 	bl	800e9d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e9c6:	69bb      	ldr	r3, [r7, #24]
	}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3720      	adds	r7, #32
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}

0800e9d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b084      	sub	sp, #16
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	60f8      	str	r0, [r7, #12]
 800e9d8:	60b9      	str	r1, [r7, #8]
 800e9da:	607a      	str	r2, [r7, #4]
 800e9dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d103      	bne.n	800e9ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e9e4:	69bb      	ldr	r3, [r7, #24]
 800e9e6:	69ba      	ldr	r2, [r7, #24]
 800e9e8:	601a      	str	r2, [r3, #0]
 800e9ea:	e002      	b.n	800e9f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e9ec:	69bb      	ldr	r3, [r7, #24]
 800e9ee:	687a      	ldr	r2, [r7, #4]
 800e9f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e9f2:	69bb      	ldr	r3, [r7, #24]
 800e9f4:	68fa      	ldr	r2, [r7, #12]
 800e9f6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e9f8:	69bb      	ldr	r3, [r7, #24]
 800e9fa:	68ba      	ldr	r2, [r7, #8]
 800e9fc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e9fe:	2101      	movs	r1, #1
 800ea00:	69b8      	ldr	r0, [r7, #24]
 800ea02:	f7ff fec3 	bl	800e78c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ea06:	69bb      	ldr	r3, [r7, #24]
 800ea08:	78fa      	ldrb	r2, [r7, #3]
 800ea0a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ea0e:	bf00      	nop
 800ea10:	3710      	adds	r7, #16
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}

0800ea16 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ea16:	b580      	push	{r7, lr}
 800ea18:	b082      	sub	sp, #8
 800ea1a:	af00      	add	r7, sp, #0
 800ea1c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d00e      	beq.n	800ea42 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2200      	movs	r2, #0
 800ea28:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2200      	movs	r2, #0
 800ea34:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ea36:	2300      	movs	r3, #0
 800ea38:	2200      	movs	r2, #0
 800ea3a:	2100      	movs	r1, #0
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f000 f8a3 	bl	800eb88 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ea42:	bf00      	nop
 800ea44:	3708      	adds	r7, #8
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}

0800ea4a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ea4a:	b580      	push	{r7, lr}
 800ea4c:	b086      	sub	sp, #24
 800ea4e:	af00      	add	r7, sp, #0
 800ea50:	4603      	mov	r3, r0
 800ea52:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ea54:	2301      	movs	r3, #1
 800ea56:	617b      	str	r3, [r7, #20]
 800ea58:	2300      	movs	r3, #0
 800ea5a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ea5c:	79fb      	ldrb	r3, [r7, #7]
 800ea5e:	461a      	mov	r2, r3
 800ea60:	6939      	ldr	r1, [r7, #16]
 800ea62:	6978      	ldr	r0, [r7, #20]
 800ea64:	f7ff ff79 	bl	800e95a <xQueueGenericCreate>
 800ea68:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ea6a:	68f8      	ldr	r0, [r7, #12]
 800ea6c:	f7ff ffd3 	bl	800ea16 <prvInitialiseMutex>

		return xNewQueue;
 800ea70:	68fb      	ldr	r3, [r7, #12]
	}
 800ea72:	4618      	mov	r0, r3
 800ea74:	3718      	adds	r7, #24
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}

0800ea7a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ea7a:	b580      	push	{r7, lr}
 800ea7c:	b088      	sub	sp, #32
 800ea7e:	af02      	add	r7, sp, #8
 800ea80:	4603      	mov	r3, r0
 800ea82:	6039      	str	r1, [r7, #0]
 800ea84:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ea86:	2301      	movs	r3, #1
 800ea88:	617b      	str	r3, [r7, #20]
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ea8e:	79fb      	ldrb	r3, [r7, #7]
 800ea90:	9300      	str	r3, [sp, #0]
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	2200      	movs	r2, #0
 800ea96:	6939      	ldr	r1, [r7, #16]
 800ea98:	6978      	ldr	r0, [r7, #20]
 800ea9a:	f7ff fee1 	bl	800e860 <xQueueGenericCreateStatic>
 800ea9e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800eaa0:	68f8      	ldr	r0, [r7, #12]
 800eaa2:	f7ff ffb8 	bl	800ea16 <prvInitialiseMutex>

		return xNewQueue;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
	}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	3718      	adds	r7, #24
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}

0800eab0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800eab0:	b590      	push	{r4, r7, lr}
 800eab2:	b087      	sub	sp, #28
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800eabc:	693b      	ldr	r3, [r7, #16]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d10b      	bne.n	800eada <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800eac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eac6:	f383 8811 	msr	BASEPRI, r3
 800eaca:	f3bf 8f6f 	isb	sy
 800eace:	f3bf 8f4f 	dsb	sy
 800ead2:	60fb      	str	r3, [r7, #12]
}
 800ead4:	bf00      	nop
 800ead6:	bf00      	nop
 800ead8:	e7fd      	b.n	800ead6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800eada:	693b      	ldr	r3, [r7, #16]
 800eadc:	689c      	ldr	r4, [r3, #8]
 800eade:	f001 fbfd 	bl	80102dc <xTaskGetCurrentTaskHandle>
 800eae2:	4603      	mov	r3, r0
 800eae4:	429c      	cmp	r4, r3
 800eae6:	d111      	bne.n	800eb0c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	68db      	ldr	r3, [r3, #12]
 800eaec:	1e5a      	subs	r2, r3, #1
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800eaf2:	693b      	ldr	r3, [r7, #16]
 800eaf4:	68db      	ldr	r3, [r3, #12]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d105      	bne.n	800eb06 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800eafa:	2300      	movs	r3, #0
 800eafc:	2200      	movs	r2, #0
 800eafe:	2100      	movs	r1, #0
 800eb00:	6938      	ldr	r0, [r7, #16]
 800eb02:	f000 f841 	bl	800eb88 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800eb06:	2301      	movs	r3, #1
 800eb08:	617b      	str	r3, [r7, #20]
 800eb0a:	e001      	b.n	800eb10 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800eb10:	697b      	ldr	r3, [r7, #20]
	}
 800eb12:	4618      	mov	r0, r3
 800eb14:	371c      	adds	r7, #28
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd90      	pop	{r4, r7, pc}

0800eb1a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800eb1a:	b590      	push	{r4, r7, lr}
 800eb1c:	b087      	sub	sp, #28
 800eb1e:	af00      	add	r7, sp, #0
 800eb20:	6078      	str	r0, [r7, #4]
 800eb22:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d10b      	bne.n	800eb46 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800eb2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb32:	f383 8811 	msr	BASEPRI, r3
 800eb36:	f3bf 8f6f 	isb	sy
 800eb3a:	f3bf 8f4f 	dsb	sy
 800eb3e:	60fb      	str	r3, [r7, #12]
}
 800eb40:	bf00      	nop
 800eb42:	bf00      	nop
 800eb44:	e7fd      	b.n	800eb42 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800eb46:	693b      	ldr	r3, [r7, #16]
 800eb48:	689c      	ldr	r4, [r3, #8]
 800eb4a:	f001 fbc7 	bl	80102dc <xTaskGetCurrentTaskHandle>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	429c      	cmp	r4, r3
 800eb52:	d107      	bne.n	800eb64 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800eb54:	693b      	ldr	r3, [r7, #16]
 800eb56:	68db      	ldr	r3, [r3, #12]
 800eb58:	1c5a      	adds	r2, r3, #1
 800eb5a:	693b      	ldr	r3, [r7, #16]
 800eb5c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800eb5e:	2301      	movs	r3, #1
 800eb60:	617b      	str	r3, [r7, #20]
 800eb62:	e00c      	b.n	800eb7e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800eb64:	6839      	ldr	r1, [r7, #0]
 800eb66:	6938      	ldr	r0, [r7, #16]
 800eb68:	f000 fa90 	bl	800f08c <xQueueSemaphoreTake>
 800eb6c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d004      	beq.n	800eb7e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800eb74:	693b      	ldr	r3, [r7, #16]
 800eb76:	68db      	ldr	r3, [r3, #12]
 800eb78:	1c5a      	adds	r2, r3, #1
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800eb7e:	697b      	ldr	r3, [r7, #20]
	}
 800eb80:	4618      	mov	r0, r3
 800eb82:	371c      	adds	r7, #28
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd90      	pop	{r4, r7, pc}

0800eb88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b08e      	sub	sp, #56	@ 0x38
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	60f8      	str	r0, [r7, #12]
 800eb90:	60b9      	str	r1, [r7, #8]
 800eb92:	607a      	str	r2, [r7, #4]
 800eb94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800eb96:	2300      	movs	r3, #0
 800eb98:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800eb9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d10b      	bne.n	800ebbc <xQueueGenericSend+0x34>
	__asm volatile
 800eba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eba8:	f383 8811 	msr	BASEPRI, r3
 800ebac:	f3bf 8f6f 	isb	sy
 800ebb0:	f3bf 8f4f 	dsb	sy
 800ebb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ebb6:	bf00      	nop
 800ebb8:	bf00      	nop
 800ebba:	e7fd      	b.n	800ebb8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d103      	bne.n	800ebca <xQueueGenericSend+0x42>
 800ebc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d101      	bne.n	800ebce <xQueueGenericSend+0x46>
 800ebca:	2301      	movs	r3, #1
 800ebcc:	e000      	b.n	800ebd0 <xQueueGenericSend+0x48>
 800ebce:	2300      	movs	r3, #0
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d10b      	bne.n	800ebec <xQueueGenericSend+0x64>
	__asm volatile
 800ebd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebd8:	f383 8811 	msr	BASEPRI, r3
 800ebdc:	f3bf 8f6f 	isb	sy
 800ebe0:	f3bf 8f4f 	dsb	sy
 800ebe4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ebe6:	bf00      	nop
 800ebe8:	bf00      	nop
 800ebea:	e7fd      	b.n	800ebe8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	2b02      	cmp	r3, #2
 800ebf0:	d103      	bne.n	800ebfa <xQueueGenericSend+0x72>
 800ebf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ebf6:	2b01      	cmp	r3, #1
 800ebf8:	d101      	bne.n	800ebfe <xQueueGenericSend+0x76>
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	e000      	b.n	800ec00 <xQueueGenericSend+0x78>
 800ebfe:	2300      	movs	r3, #0
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d10b      	bne.n	800ec1c <xQueueGenericSend+0x94>
	__asm volatile
 800ec04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec08:	f383 8811 	msr	BASEPRI, r3
 800ec0c:	f3bf 8f6f 	isb	sy
 800ec10:	f3bf 8f4f 	dsb	sy
 800ec14:	623b      	str	r3, [r7, #32]
}
 800ec16:	bf00      	nop
 800ec18:	bf00      	nop
 800ec1a:	e7fd      	b.n	800ec18 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ec1c:	f001 fb6e 	bl	80102fc <xTaskGetSchedulerState>
 800ec20:	4603      	mov	r3, r0
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d102      	bne.n	800ec2c <xQueueGenericSend+0xa4>
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d101      	bne.n	800ec30 <xQueueGenericSend+0xa8>
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	e000      	b.n	800ec32 <xQueueGenericSend+0xaa>
 800ec30:	2300      	movs	r3, #0
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d10b      	bne.n	800ec4e <xQueueGenericSend+0xc6>
	__asm volatile
 800ec36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec3a:	f383 8811 	msr	BASEPRI, r3
 800ec3e:	f3bf 8f6f 	isb	sy
 800ec42:	f3bf 8f4f 	dsb	sy
 800ec46:	61fb      	str	r3, [r7, #28]
}
 800ec48:	bf00      	nop
 800ec4a:	bf00      	nop
 800ec4c:	e7fd      	b.n	800ec4a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ec4e:	f002 fbcb 	bl	80113e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ec52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ec56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec5a:	429a      	cmp	r2, r3
 800ec5c:	d302      	bcc.n	800ec64 <xQueueGenericSend+0xdc>
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	2b02      	cmp	r3, #2
 800ec62:	d129      	bne.n	800ecb8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ec64:	683a      	ldr	r2, [r7, #0]
 800ec66:	68b9      	ldr	r1, [r7, #8]
 800ec68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ec6a:	f000 fb37 	bl	800f2dc <prvCopyDataToQueue>
 800ec6e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d010      	beq.n	800ec9a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec7a:	3324      	adds	r3, #36	@ 0x24
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f001 f93f 	bl	800ff00 <xTaskRemoveFromEventList>
 800ec82:	4603      	mov	r3, r0
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d013      	beq.n	800ecb0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ec88:	4b3f      	ldr	r3, [pc, #252]	@ (800ed88 <xQueueGenericSend+0x200>)
 800ec8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec8e:	601a      	str	r2, [r3, #0]
 800ec90:	f3bf 8f4f 	dsb	sy
 800ec94:	f3bf 8f6f 	isb	sy
 800ec98:	e00a      	b.n	800ecb0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ec9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d007      	beq.n	800ecb0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800eca0:	4b39      	ldr	r3, [pc, #228]	@ (800ed88 <xQueueGenericSend+0x200>)
 800eca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eca6:	601a      	str	r2, [r3, #0]
 800eca8:	f3bf 8f4f 	dsb	sy
 800ecac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ecb0:	f002 fbcc 	bl	801144c <vPortExitCritical>
				return pdPASS;
 800ecb4:	2301      	movs	r3, #1
 800ecb6:	e063      	b.n	800ed80 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d103      	bne.n	800ecc6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ecbe:	f002 fbc5 	bl	801144c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	e05c      	b.n	800ed80 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ecc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d106      	bne.n	800ecda <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eccc:	f107 0314 	add.w	r3, r7, #20
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f001 f9a1 	bl	8010018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ecd6:	2301      	movs	r3, #1
 800ecd8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ecda:	f002 fbb7 	bl	801144c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ecde:	f000 fecf 	bl	800fa80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ece2:	f002 fb81 	bl	80113e8 <vPortEnterCritical>
 800ece6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ece8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ecec:	b25b      	sxtb	r3, r3
 800ecee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ecf2:	d103      	bne.n	800ecfc <xQueueGenericSend+0x174>
 800ecf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ecfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecfe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ed02:	b25b      	sxtb	r3, r3
 800ed04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ed08:	d103      	bne.n	800ed12 <xQueueGenericSend+0x18a>
 800ed0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ed12:	f002 fb9b 	bl	801144c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ed16:	1d3a      	adds	r2, r7, #4
 800ed18:	f107 0314 	add.w	r3, r7, #20
 800ed1c:	4611      	mov	r1, r2
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f001 f990 	bl	8010044 <xTaskCheckForTimeOut>
 800ed24:	4603      	mov	r3, r0
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d124      	bne.n	800ed74 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ed2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ed2c:	f000 fbce 	bl	800f4cc <prvIsQueueFull>
 800ed30:	4603      	mov	r3, r0
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d018      	beq.n	800ed68 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ed36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed38:	3310      	adds	r3, #16
 800ed3a:	687a      	ldr	r2, [r7, #4]
 800ed3c:	4611      	mov	r1, r2
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f001 f88c 	bl	800fe5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ed44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ed46:	f000 fb59 	bl	800f3fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ed4a:	f000 fea7 	bl	800fa9c <xTaskResumeAll>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	f47f af7c 	bne.w	800ec4e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ed56:	4b0c      	ldr	r3, [pc, #48]	@ (800ed88 <xQueueGenericSend+0x200>)
 800ed58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed5c:	601a      	str	r2, [r3, #0]
 800ed5e:	f3bf 8f4f 	dsb	sy
 800ed62:	f3bf 8f6f 	isb	sy
 800ed66:	e772      	b.n	800ec4e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ed68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ed6a:	f000 fb47 	bl	800f3fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ed6e:	f000 fe95 	bl	800fa9c <xTaskResumeAll>
 800ed72:	e76c      	b.n	800ec4e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ed74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ed76:	f000 fb41 	bl	800f3fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ed7a:	f000 fe8f 	bl	800fa9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ed7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ed80:	4618      	mov	r0, r3
 800ed82:	3738      	adds	r7, #56	@ 0x38
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}
 800ed88:	e000ed04 	.word	0xe000ed04

0800ed8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b090      	sub	sp, #64	@ 0x40
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	60f8      	str	r0, [r7, #12]
 800ed94:	60b9      	str	r1, [r7, #8]
 800ed96:	607a      	str	r2, [r7, #4]
 800ed98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ed9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d10b      	bne.n	800edbc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800eda4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eda8:	f383 8811 	msr	BASEPRI, r3
 800edac:	f3bf 8f6f 	isb	sy
 800edb0:	f3bf 8f4f 	dsb	sy
 800edb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800edb6:	bf00      	nop
 800edb8:	bf00      	nop
 800edba:	e7fd      	b.n	800edb8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800edbc:	68bb      	ldr	r3, [r7, #8]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d103      	bne.n	800edca <xQueueGenericSendFromISR+0x3e>
 800edc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d101      	bne.n	800edce <xQueueGenericSendFromISR+0x42>
 800edca:	2301      	movs	r3, #1
 800edcc:	e000      	b.n	800edd0 <xQueueGenericSendFromISR+0x44>
 800edce:	2300      	movs	r3, #0
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d10b      	bne.n	800edec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800edd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edd8:	f383 8811 	msr	BASEPRI, r3
 800eddc:	f3bf 8f6f 	isb	sy
 800ede0:	f3bf 8f4f 	dsb	sy
 800ede4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ede6:	bf00      	nop
 800ede8:	bf00      	nop
 800edea:	e7fd      	b.n	800ede8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	2b02      	cmp	r3, #2
 800edf0:	d103      	bne.n	800edfa <xQueueGenericSendFromISR+0x6e>
 800edf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800edf6:	2b01      	cmp	r3, #1
 800edf8:	d101      	bne.n	800edfe <xQueueGenericSendFromISR+0x72>
 800edfa:	2301      	movs	r3, #1
 800edfc:	e000      	b.n	800ee00 <xQueueGenericSendFromISR+0x74>
 800edfe:	2300      	movs	r3, #0
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d10b      	bne.n	800ee1c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ee04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee08:	f383 8811 	msr	BASEPRI, r3
 800ee0c:	f3bf 8f6f 	isb	sy
 800ee10:	f3bf 8f4f 	dsb	sy
 800ee14:	623b      	str	r3, [r7, #32]
}
 800ee16:	bf00      	nop
 800ee18:	bf00      	nop
 800ee1a:	e7fd      	b.n	800ee18 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ee1c:	f002 fbc4 	bl	80115a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ee20:	f3ef 8211 	mrs	r2, BASEPRI
 800ee24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee28:	f383 8811 	msr	BASEPRI, r3
 800ee2c:	f3bf 8f6f 	isb	sy
 800ee30:	f3bf 8f4f 	dsb	sy
 800ee34:	61fa      	str	r2, [r7, #28]
 800ee36:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ee38:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ee3a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ee3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ee40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee44:	429a      	cmp	r2, r3
 800ee46:	d302      	bcc.n	800ee4e <xQueueGenericSendFromISR+0xc2>
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	2b02      	cmp	r3, #2
 800ee4c:	d12f      	bne.n	800eeae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ee4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ee54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ee5e:	683a      	ldr	r2, [r7, #0]
 800ee60:	68b9      	ldr	r1, [r7, #8]
 800ee62:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ee64:	f000 fa3a 	bl	800f2dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ee68:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ee6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ee70:	d112      	bne.n	800ee98 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d016      	beq.n	800eea8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee7c:	3324      	adds	r3, #36	@ 0x24
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f001 f83e 	bl	800ff00 <xTaskRemoveFromEventList>
 800ee84:	4603      	mov	r3, r0
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d00e      	beq.n	800eea8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d00b      	beq.n	800eea8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2201      	movs	r2, #1
 800ee94:	601a      	str	r2, [r3, #0]
 800ee96:	e007      	b.n	800eea8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ee98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ee9c:	3301      	adds	r3, #1
 800ee9e:	b2db      	uxtb	r3, r3
 800eea0:	b25a      	sxtb	r2, r3
 800eea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eea4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800eea8:	2301      	movs	r3, #1
 800eeaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800eeac:	e001      	b.n	800eeb2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eeb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eeb4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800eebc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800eec0:	4618      	mov	r0, r3
 800eec2:	3740      	adds	r7, #64	@ 0x40
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}

0800eec8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b08c      	sub	sp, #48	@ 0x30
 800eecc:	af00      	add	r7, sp, #0
 800eece:	60f8      	str	r0, [r7, #12]
 800eed0:	60b9      	str	r1, [r7, #8]
 800eed2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800eed4:	2300      	movs	r3, #0
 800eed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800eedc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d10b      	bne.n	800eefa <xQueueReceive+0x32>
	__asm volatile
 800eee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eee6:	f383 8811 	msr	BASEPRI, r3
 800eeea:	f3bf 8f6f 	isb	sy
 800eeee:	f3bf 8f4f 	dsb	sy
 800eef2:	623b      	str	r3, [r7, #32]
}
 800eef4:	bf00      	nop
 800eef6:	bf00      	nop
 800eef8:	e7fd      	b.n	800eef6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d103      	bne.n	800ef08 <xQueueReceive+0x40>
 800ef00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d101      	bne.n	800ef0c <xQueueReceive+0x44>
 800ef08:	2301      	movs	r3, #1
 800ef0a:	e000      	b.n	800ef0e <xQueueReceive+0x46>
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d10b      	bne.n	800ef2a <xQueueReceive+0x62>
	__asm volatile
 800ef12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef16:	f383 8811 	msr	BASEPRI, r3
 800ef1a:	f3bf 8f6f 	isb	sy
 800ef1e:	f3bf 8f4f 	dsb	sy
 800ef22:	61fb      	str	r3, [r7, #28]
}
 800ef24:	bf00      	nop
 800ef26:	bf00      	nop
 800ef28:	e7fd      	b.n	800ef26 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ef2a:	f001 f9e7 	bl	80102fc <xTaskGetSchedulerState>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d102      	bne.n	800ef3a <xQueueReceive+0x72>
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d101      	bne.n	800ef3e <xQueueReceive+0x76>
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	e000      	b.n	800ef40 <xQueueReceive+0x78>
 800ef3e:	2300      	movs	r3, #0
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d10b      	bne.n	800ef5c <xQueueReceive+0x94>
	__asm volatile
 800ef44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef48:	f383 8811 	msr	BASEPRI, r3
 800ef4c:	f3bf 8f6f 	isb	sy
 800ef50:	f3bf 8f4f 	dsb	sy
 800ef54:	61bb      	str	r3, [r7, #24]
}
 800ef56:	bf00      	nop
 800ef58:	bf00      	nop
 800ef5a:	e7fd      	b.n	800ef58 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ef5c:	f002 fa44 	bl	80113e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef64:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ef66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d01f      	beq.n	800efac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ef6c:	68b9      	ldr	r1, [r7, #8]
 800ef6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef70:	f000 fa1e 	bl	800f3b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ef74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef76:	1e5a      	subs	r2, r3, #1
 800ef78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef7a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef7e:	691b      	ldr	r3, [r3, #16]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d00f      	beq.n	800efa4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef86:	3310      	adds	r3, #16
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f000 ffb9 	bl	800ff00 <xTaskRemoveFromEventList>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d007      	beq.n	800efa4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ef94:	4b3c      	ldr	r3, [pc, #240]	@ (800f088 <xQueueReceive+0x1c0>)
 800ef96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef9a:	601a      	str	r2, [r3, #0]
 800ef9c:	f3bf 8f4f 	dsb	sy
 800efa0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800efa4:	f002 fa52 	bl	801144c <vPortExitCritical>
				return pdPASS;
 800efa8:	2301      	movs	r3, #1
 800efaa:	e069      	b.n	800f080 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d103      	bne.n	800efba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800efb2:	f002 fa4b 	bl	801144c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800efb6:	2300      	movs	r3, #0
 800efb8:	e062      	b.n	800f080 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800efba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d106      	bne.n	800efce <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800efc0:	f107 0310 	add.w	r3, r7, #16
 800efc4:	4618      	mov	r0, r3
 800efc6:	f001 f827 	bl	8010018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800efca:	2301      	movs	r3, #1
 800efcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800efce:	f002 fa3d 	bl	801144c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800efd2:	f000 fd55 	bl	800fa80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800efd6:	f002 fa07 	bl	80113e8 <vPortEnterCritical>
 800efda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800efe0:	b25b      	sxtb	r3, r3
 800efe2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800efe6:	d103      	bne.n	800eff0 <xQueueReceive+0x128>
 800efe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efea:	2200      	movs	r2, #0
 800efec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eff2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eff6:	b25b      	sxtb	r3, r3
 800eff8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800effc:	d103      	bne.n	800f006 <xQueueReceive+0x13e>
 800effe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f000:	2200      	movs	r2, #0
 800f002:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f006:	f002 fa21 	bl	801144c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f00a:	1d3a      	adds	r2, r7, #4
 800f00c:	f107 0310 	add.w	r3, r7, #16
 800f010:	4611      	mov	r1, r2
 800f012:	4618      	mov	r0, r3
 800f014:	f001 f816 	bl	8010044 <xTaskCheckForTimeOut>
 800f018:	4603      	mov	r3, r0
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d123      	bne.n	800f066 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f01e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f020:	f000 fa3e 	bl	800f4a0 <prvIsQueueEmpty>
 800f024:	4603      	mov	r3, r0
 800f026:	2b00      	cmp	r3, #0
 800f028:	d017      	beq.n	800f05a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f02a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f02c:	3324      	adds	r3, #36	@ 0x24
 800f02e:	687a      	ldr	r2, [r7, #4]
 800f030:	4611      	mov	r1, r2
 800f032:	4618      	mov	r0, r3
 800f034:	f000 ff12 	bl	800fe5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f038:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f03a:	f000 f9df 	bl	800f3fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f03e:	f000 fd2d 	bl	800fa9c <xTaskResumeAll>
 800f042:	4603      	mov	r3, r0
 800f044:	2b00      	cmp	r3, #0
 800f046:	d189      	bne.n	800ef5c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800f048:	4b0f      	ldr	r3, [pc, #60]	@ (800f088 <xQueueReceive+0x1c0>)
 800f04a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f04e:	601a      	str	r2, [r3, #0]
 800f050:	f3bf 8f4f 	dsb	sy
 800f054:	f3bf 8f6f 	isb	sy
 800f058:	e780      	b.n	800ef5c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f05a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f05c:	f000 f9ce 	bl	800f3fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f060:	f000 fd1c 	bl	800fa9c <xTaskResumeAll>
 800f064:	e77a      	b.n	800ef5c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f066:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f068:	f000 f9c8 	bl	800f3fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f06c:	f000 fd16 	bl	800fa9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f070:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f072:	f000 fa15 	bl	800f4a0 <prvIsQueueEmpty>
 800f076:	4603      	mov	r3, r0
 800f078:	2b00      	cmp	r3, #0
 800f07a:	f43f af6f 	beq.w	800ef5c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f07e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f080:	4618      	mov	r0, r3
 800f082:	3730      	adds	r7, #48	@ 0x30
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}
 800f088:	e000ed04 	.word	0xe000ed04

0800f08c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b08e      	sub	sp, #56	@ 0x38
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
 800f094:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f096:	2300      	movs	r3, #0
 800f098:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f0a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d10b      	bne.n	800f0c0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800f0a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0ac:	f383 8811 	msr	BASEPRI, r3
 800f0b0:	f3bf 8f6f 	isb	sy
 800f0b4:	f3bf 8f4f 	dsb	sy
 800f0b8:	623b      	str	r3, [r7, #32]
}
 800f0ba:	bf00      	nop
 800f0bc:	bf00      	nop
 800f0be:	e7fd      	b.n	800f0bc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f0c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d00b      	beq.n	800f0e0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800f0c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0cc:	f383 8811 	msr	BASEPRI, r3
 800f0d0:	f3bf 8f6f 	isb	sy
 800f0d4:	f3bf 8f4f 	dsb	sy
 800f0d8:	61fb      	str	r3, [r7, #28]
}
 800f0da:	bf00      	nop
 800f0dc:	bf00      	nop
 800f0de:	e7fd      	b.n	800f0dc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f0e0:	f001 f90c 	bl	80102fc <xTaskGetSchedulerState>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d102      	bne.n	800f0f0 <xQueueSemaphoreTake+0x64>
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d101      	bne.n	800f0f4 <xQueueSemaphoreTake+0x68>
 800f0f0:	2301      	movs	r3, #1
 800f0f2:	e000      	b.n	800f0f6 <xQueueSemaphoreTake+0x6a>
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d10b      	bne.n	800f112 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800f0fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0fe:	f383 8811 	msr	BASEPRI, r3
 800f102:	f3bf 8f6f 	isb	sy
 800f106:	f3bf 8f4f 	dsb	sy
 800f10a:	61bb      	str	r3, [r7, #24]
}
 800f10c:	bf00      	nop
 800f10e:	bf00      	nop
 800f110:	e7fd      	b.n	800f10e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f112:	f002 f969 	bl	80113e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f11a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f11c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d024      	beq.n	800f16c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f124:	1e5a      	subs	r2, r3, #1
 800f126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f128:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f12a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d104      	bne.n	800f13c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f132:	f001 fa5d 	bl	80105f0 <pvTaskIncrementMutexHeldCount>
 800f136:	4602      	mov	r2, r0
 800f138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f13a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f13c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f13e:	691b      	ldr	r3, [r3, #16]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d00f      	beq.n	800f164 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f146:	3310      	adds	r3, #16
 800f148:	4618      	mov	r0, r3
 800f14a:	f000 fed9 	bl	800ff00 <xTaskRemoveFromEventList>
 800f14e:	4603      	mov	r3, r0
 800f150:	2b00      	cmp	r3, #0
 800f152:	d007      	beq.n	800f164 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f154:	4b54      	ldr	r3, [pc, #336]	@ (800f2a8 <xQueueSemaphoreTake+0x21c>)
 800f156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f15a:	601a      	str	r2, [r3, #0]
 800f15c:	f3bf 8f4f 	dsb	sy
 800f160:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f164:	f002 f972 	bl	801144c <vPortExitCritical>
				return pdPASS;
 800f168:	2301      	movs	r3, #1
 800f16a:	e098      	b.n	800f29e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d112      	bne.n	800f198 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f174:	2b00      	cmp	r3, #0
 800f176:	d00b      	beq.n	800f190 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800f178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f17c:	f383 8811 	msr	BASEPRI, r3
 800f180:	f3bf 8f6f 	isb	sy
 800f184:	f3bf 8f4f 	dsb	sy
 800f188:	617b      	str	r3, [r7, #20]
}
 800f18a:	bf00      	nop
 800f18c:	bf00      	nop
 800f18e:	e7fd      	b.n	800f18c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f190:	f002 f95c 	bl	801144c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f194:	2300      	movs	r3, #0
 800f196:	e082      	b.n	800f29e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d106      	bne.n	800f1ac <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f19e:	f107 030c 	add.w	r3, r7, #12
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f000 ff38 	bl	8010018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f1ac:	f002 f94e 	bl	801144c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f1b0:	f000 fc66 	bl	800fa80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f1b4:	f002 f918 	bl	80113e8 <vPortEnterCritical>
 800f1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f1be:	b25b      	sxtb	r3, r3
 800f1c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f1c4:	d103      	bne.n	800f1ce <xQueueSemaphoreTake+0x142>
 800f1c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f1ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f1d4:	b25b      	sxtb	r3, r3
 800f1d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f1da:	d103      	bne.n	800f1e4 <xQueueSemaphoreTake+0x158>
 800f1dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1de:	2200      	movs	r2, #0
 800f1e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f1e4:	f002 f932 	bl	801144c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f1e8:	463a      	mov	r2, r7
 800f1ea:	f107 030c 	add.w	r3, r7, #12
 800f1ee:	4611      	mov	r1, r2
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f000 ff27 	bl	8010044 <xTaskCheckForTimeOut>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d132      	bne.n	800f262 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f1fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f1fe:	f000 f94f 	bl	800f4a0 <prvIsQueueEmpty>
 800f202:	4603      	mov	r3, r0
 800f204:	2b00      	cmp	r3, #0
 800f206:	d026      	beq.n	800f256 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d109      	bne.n	800f224 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800f210:	f002 f8ea 	bl	80113e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f216:	689b      	ldr	r3, [r3, #8]
 800f218:	4618      	mov	r0, r3
 800f21a:	f001 f88d 	bl	8010338 <xTaskPriorityInherit>
 800f21e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800f220:	f002 f914 	bl	801144c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f226:	3324      	adds	r3, #36	@ 0x24
 800f228:	683a      	ldr	r2, [r7, #0]
 800f22a:	4611      	mov	r1, r2
 800f22c:	4618      	mov	r0, r3
 800f22e:	f000 fe15 	bl	800fe5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f232:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f234:	f000 f8e2 	bl	800f3fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f238:	f000 fc30 	bl	800fa9c <xTaskResumeAll>
 800f23c:	4603      	mov	r3, r0
 800f23e:	2b00      	cmp	r3, #0
 800f240:	f47f af67 	bne.w	800f112 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800f244:	4b18      	ldr	r3, [pc, #96]	@ (800f2a8 <xQueueSemaphoreTake+0x21c>)
 800f246:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f24a:	601a      	str	r2, [r3, #0]
 800f24c:	f3bf 8f4f 	dsb	sy
 800f250:	f3bf 8f6f 	isb	sy
 800f254:	e75d      	b.n	800f112 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f256:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f258:	f000 f8d0 	bl	800f3fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f25c:	f000 fc1e 	bl	800fa9c <xTaskResumeAll>
 800f260:	e757      	b.n	800f112 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f262:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f264:	f000 f8ca 	bl	800f3fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f268:	f000 fc18 	bl	800fa9c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f26c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f26e:	f000 f917 	bl	800f4a0 <prvIsQueueEmpty>
 800f272:	4603      	mov	r3, r0
 800f274:	2b00      	cmp	r3, #0
 800f276:	f43f af4c 	beq.w	800f112 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d00d      	beq.n	800f29c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800f280:	f002 f8b2 	bl	80113e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f284:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f286:	f000 f811 	bl	800f2ac <prvGetDisinheritPriorityAfterTimeout>
 800f28a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f28e:	689b      	ldr	r3, [r3, #8]
 800f290:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f292:	4618      	mov	r0, r3
 800f294:	f001 f928 	bl	80104e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f298:	f002 f8d8 	bl	801144c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f29c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3738      	adds	r7, #56	@ 0x38
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}
 800f2a6:	bf00      	nop
 800f2a8:	e000ed04 	.word	0xe000ed04

0800f2ac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f2ac:	b480      	push	{r7}
 800f2ae:	b085      	sub	sp, #20
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d006      	beq.n	800f2ca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800f2c6:	60fb      	str	r3, [r7, #12]
 800f2c8:	e001      	b.n	800f2ce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
	}
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	3714      	adds	r7, #20
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2da:	4770      	bx	lr

0800f2dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b086      	sub	sp, #24
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	60f8      	str	r0, [r7, #12]
 800f2e4:	60b9      	str	r1, [r7, #8]
 800f2e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d10d      	bne.n	800f316 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d14d      	bne.n	800f39e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	689b      	ldr	r3, [r3, #8]
 800f306:	4618      	mov	r0, r3
 800f308:	f001 f87e 	bl	8010408 <xTaskPriorityDisinherit>
 800f30c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	2200      	movs	r2, #0
 800f312:	609a      	str	r2, [r3, #8]
 800f314:	e043      	b.n	800f39e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d119      	bne.n	800f350 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	6858      	ldr	r0, [r3, #4]
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f324:	461a      	mov	r2, r3
 800f326:	68b9      	ldr	r1, [r7, #8]
 800f328:	f013 f8e1 	bl	80224ee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	685a      	ldr	r2, [r3, #4]
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f334:	441a      	add	r2, r3
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	685a      	ldr	r2, [r3, #4]
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	689b      	ldr	r3, [r3, #8]
 800f342:	429a      	cmp	r2, r3
 800f344:	d32b      	bcc.n	800f39e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	681a      	ldr	r2, [r3, #0]
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	605a      	str	r2, [r3, #4]
 800f34e:	e026      	b.n	800f39e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	68d8      	ldr	r0, [r3, #12]
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f358:	461a      	mov	r2, r3
 800f35a:	68b9      	ldr	r1, [r7, #8]
 800f35c:	f013 f8c7 	bl	80224ee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	68da      	ldr	r2, [r3, #12]
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f368:	425b      	negs	r3, r3
 800f36a:	441a      	add	r2, r3
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	68da      	ldr	r2, [r3, #12]
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	429a      	cmp	r2, r3
 800f37a:	d207      	bcs.n	800f38c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	689a      	ldr	r2, [r3, #8]
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f384:	425b      	negs	r3, r3
 800f386:	441a      	add	r2, r3
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2b02      	cmp	r3, #2
 800f390:	d105      	bne.n	800f39e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f392:	693b      	ldr	r3, [r7, #16]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d002      	beq.n	800f39e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f398:	693b      	ldr	r3, [r7, #16]
 800f39a:	3b01      	subs	r3, #1
 800f39c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f39e:	693b      	ldr	r3, [r7, #16]
 800f3a0:	1c5a      	adds	r2, r3, #1
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800f3a6:	697b      	ldr	r3, [r7, #20]
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3718      	adds	r7, #24
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}

0800f3b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b082      	sub	sp, #8
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
 800f3b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d018      	beq.n	800f3f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	68da      	ldr	r2, [r3, #12]
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3ca:	441a      	add	r2, r3
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	68da      	ldr	r2, [r3, #12]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	689b      	ldr	r3, [r3, #8]
 800f3d8:	429a      	cmp	r2, r3
 800f3da:	d303      	bcc.n	800f3e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681a      	ldr	r2, [r3, #0]
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	68d9      	ldr	r1, [r3, #12]
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3ec:	461a      	mov	r2, r3
 800f3ee:	6838      	ldr	r0, [r7, #0]
 800f3f0:	f013 f87d 	bl	80224ee <memcpy>
	}
}
 800f3f4:	bf00      	nop
 800f3f6:	3708      	adds	r7, #8
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}

0800f3fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b084      	sub	sp, #16
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f404:	f001 fff0 	bl	80113e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f40e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f410:	e011      	b.n	800f436 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f416:	2b00      	cmp	r3, #0
 800f418:	d012      	beq.n	800f440 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	3324      	adds	r3, #36	@ 0x24
 800f41e:	4618      	mov	r0, r3
 800f420:	f000 fd6e 	bl	800ff00 <xTaskRemoveFromEventList>
 800f424:	4603      	mov	r3, r0
 800f426:	2b00      	cmp	r3, #0
 800f428:	d001      	beq.n	800f42e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f42a:	f000 fe6f 	bl	801010c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f42e:	7bfb      	ldrb	r3, [r7, #15]
 800f430:	3b01      	subs	r3, #1
 800f432:	b2db      	uxtb	r3, r3
 800f434:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	dce9      	bgt.n	800f412 <prvUnlockQueue+0x16>
 800f43e:	e000      	b.n	800f442 <prvUnlockQueue+0x46>
					break;
 800f440:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	22ff      	movs	r2, #255	@ 0xff
 800f446:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800f44a:	f001 ffff 	bl	801144c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f44e:	f001 ffcb 	bl	80113e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f458:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f45a:	e011      	b.n	800f480 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	691b      	ldr	r3, [r3, #16]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d012      	beq.n	800f48a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	3310      	adds	r3, #16
 800f468:	4618      	mov	r0, r3
 800f46a:	f000 fd49 	bl	800ff00 <xTaskRemoveFromEventList>
 800f46e:	4603      	mov	r3, r0
 800f470:	2b00      	cmp	r3, #0
 800f472:	d001      	beq.n	800f478 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f474:	f000 fe4a 	bl	801010c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f478:	7bbb      	ldrb	r3, [r7, #14]
 800f47a:	3b01      	subs	r3, #1
 800f47c:	b2db      	uxtb	r3, r3
 800f47e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f480:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f484:	2b00      	cmp	r3, #0
 800f486:	dce9      	bgt.n	800f45c <prvUnlockQueue+0x60>
 800f488:	e000      	b.n	800f48c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f48a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	22ff      	movs	r2, #255	@ 0xff
 800f490:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800f494:	f001 ffda 	bl	801144c <vPortExitCritical>
}
 800f498:	bf00      	nop
 800f49a:	3710      	adds	r7, #16
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bd80      	pop	{r7, pc}

0800f4a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b084      	sub	sp, #16
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f4a8:	f001 ff9e 	bl	80113e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d102      	bne.n	800f4ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f4b4:	2301      	movs	r3, #1
 800f4b6:	60fb      	str	r3, [r7, #12]
 800f4b8:	e001      	b.n	800f4be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f4be:	f001 ffc5 	bl	801144c <vPortExitCritical>

	return xReturn;
 800f4c2:	68fb      	ldr	r3, [r7, #12]
}
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	3710      	adds	r7, #16
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}

0800f4cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b084      	sub	sp, #16
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f4d4:	f001 ff88 	bl	80113e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	d102      	bne.n	800f4ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f4e4:	2301      	movs	r3, #1
 800f4e6:	60fb      	str	r3, [r7, #12]
 800f4e8:	e001      	b.n	800f4ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f4ee:	f001 ffad 	bl	801144c <vPortExitCritical>

	return xReturn;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
}
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	3710      	adds	r7, #16
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}

0800f4fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f4fc:	b480      	push	{r7}
 800f4fe:	b085      	sub	sp, #20
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
 800f504:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f506:	2300      	movs	r3, #0
 800f508:	60fb      	str	r3, [r7, #12]
 800f50a:	e014      	b.n	800f536 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f50c:	4a0f      	ldr	r2, [pc, #60]	@ (800f54c <vQueueAddToRegistry+0x50>)
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d10b      	bne.n	800f530 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f518:	490c      	ldr	r1, [pc, #48]	@ (800f54c <vQueueAddToRegistry+0x50>)
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	683a      	ldr	r2, [r7, #0]
 800f51e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f522:	4a0a      	ldr	r2, [pc, #40]	@ (800f54c <vQueueAddToRegistry+0x50>)
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	00db      	lsls	r3, r3, #3
 800f528:	4413      	add	r3, r2
 800f52a:	687a      	ldr	r2, [r7, #4]
 800f52c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f52e:	e006      	b.n	800f53e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	3301      	adds	r3, #1
 800f534:	60fb      	str	r3, [r7, #12]
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	2b07      	cmp	r3, #7
 800f53a:	d9e7      	bls.n	800f50c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f53c:	bf00      	nop
 800f53e:	bf00      	nop
 800f540:	3714      	adds	r7, #20
 800f542:	46bd      	mov	sp, r7
 800f544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f548:	4770      	bx	lr
 800f54a:	bf00      	nop
 800f54c:	240334a8 	.word	0x240334a8

0800f550 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f550:	b580      	push	{r7, lr}
 800f552:	b086      	sub	sp, #24
 800f554:	af00      	add	r7, sp, #0
 800f556:	60f8      	str	r0, [r7, #12]
 800f558:	60b9      	str	r1, [r7, #8]
 800f55a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f560:	f001 ff42 	bl	80113e8 <vPortEnterCritical>
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f56a:	b25b      	sxtb	r3, r3
 800f56c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f570:	d103      	bne.n	800f57a <vQueueWaitForMessageRestricted+0x2a>
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	2200      	movs	r2, #0
 800f576:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f57a:	697b      	ldr	r3, [r7, #20]
 800f57c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f580:	b25b      	sxtb	r3, r3
 800f582:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f586:	d103      	bne.n	800f590 <vQueueWaitForMessageRestricted+0x40>
 800f588:	697b      	ldr	r3, [r7, #20]
 800f58a:	2200      	movs	r2, #0
 800f58c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f590:	f001 ff5c 	bl	801144c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d106      	bne.n	800f5aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f59c:	697b      	ldr	r3, [r7, #20]
 800f59e:	3324      	adds	r3, #36	@ 0x24
 800f5a0:	687a      	ldr	r2, [r7, #4]
 800f5a2:	68b9      	ldr	r1, [r7, #8]
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f000 fc7f 	bl	800fea8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f5aa:	6978      	ldr	r0, [r7, #20]
 800f5ac:	f7ff ff26 	bl	800f3fc <prvUnlockQueue>
	}
 800f5b0:	bf00      	nop
 800f5b2:	3718      	adds	r7, #24
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bd80      	pop	{r7, pc}

0800f5b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b08e      	sub	sp, #56	@ 0x38
 800f5bc:	af04      	add	r7, sp, #16
 800f5be:	60f8      	str	r0, [r7, #12]
 800f5c0:	60b9      	str	r1, [r7, #8]
 800f5c2:	607a      	str	r2, [r7, #4]
 800f5c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f5c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d10b      	bne.n	800f5e4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800f5cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5d0:	f383 8811 	msr	BASEPRI, r3
 800f5d4:	f3bf 8f6f 	isb	sy
 800f5d8:	f3bf 8f4f 	dsb	sy
 800f5dc:	623b      	str	r3, [r7, #32]
}
 800f5de:	bf00      	nop
 800f5e0:	bf00      	nop
 800f5e2:	e7fd      	b.n	800f5e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f5e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d10b      	bne.n	800f602 <xTaskCreateStatic+0x4a>
	__asm volatile
 800f5ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5ee:	f383 8811 	msr	BASEPRI, r3
 800f5f2:	f3bf 8f6f 	isb	sy
 800f5f6:	f3bf 8f4f 	dsb	sy
 800f5fa:	61fb      	str	r3, [r7, #28]
}
 800f5fc:	bf00      	nop
 800f5fe:	bf00      	nop
 800f600:	e7fd      	b.n	800f5fe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f602:	23a8      	movs	r3, #168	@ 0xa8
 800f604:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f606:	693b      	ldr	r3, [r7, #16]
 800f608:	2ba8      	cmp	r3, #168	@ 0xa8
 800f60a:	d00b      	beq.n	800f624 <xTaskCreateStatic+0x6c>
	__asm volatile
 800f60c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f610:	f383 8811 	msr	BASEPRI, r3
 800f614:	f3bf 8f6f 	isb	sy
 800f618:	f3bf 8f4f 	dsb	sy
 800f61c:	61bb      	str	r3, [r7, #24]
}
 800f61e:	bf00      	nop
 800f620:	bf00      	nop
 800f622:	e7fd      	b.n	800f620 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f624:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d01e      	beq.n	800f66a <xTaskCreateStatic+0xb2>
 800f62c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d01b      	beq.n	800f66a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f634:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f638:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f63a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f63e:	2202      	movs	r2, #2
 800f640:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f644:	2300      	movs	r3, #0
 800f646:	9303      	str	r3, [sp, #12]
 800f648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f64a:	9302      	str	r3, [sp, #8]
 800f64c:	f107 0314 	add.w	r3, r7, #20
 800f650:	9301      	str	r3, [sp, #4]
 800f652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f654:	9300      	str	r3, [sp, #0]
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	687a      	ldr	r2, [r7, #4]
 800f65a:	68b9      	ldr	r1, [r7, #8]
 800f65c:	68f8      	ldr	r0, [r7, #12]
 800f65e:	f000 f851 	bl	800f704 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f662:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f664:	f000 f8f6 	bl	800f854 <prvAddNewTaskToReadyList>
 800f668:	e001      	b.n	800f66e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800f66a:	2300      	movs	r3, #0
 800f66c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f66e:	697b      	ldr	r3, [r7, #20]
	}
 800f670:	4618      	mov	r0, r3
 800f672:	3728      	adds	r7, #40	@ 0x28
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}

0800f678 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b08c      	sub	sp, #48	@ 0x30
 800f67c:	af04      	add	r7, sp, #16
 800f67e:	60f8      	str	r0, [r7, #12]
 800f680:	60b9      	str	r1, [r7, #8]
 800f682:	603b      	str	r3, [r7, #0]
 800f684:	4613      	mov	r3, r2
 800f686:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f688:	88fb      	ldrh	r3, [r7, #6]
 800f68a:	009b      	lsls	r3, r3, #2
 800f68c:	4618      	mov	r0, r3
 800f68e:	f001 ffcd 	bl	801162c <pvPortMalloc>
 800f692:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f694:	697b      	ldr	r3, [r7, #20]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d00e      	beq.n	800f6b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f69a:	20a8      	movs	r0, #168	@ 0xa8
 800f69c:	f001 ffc6 	bl	801162c <pvPortMalloc>
 800f6a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f6a2:	69fb      	ldr	r3, [r7, #28]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d003      	beq.n	800f6b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f6a8:	69fb      	ldr	r3, [r7, #28]
 800f6aa:	697a      	ldr	r2, [r7, #20]
 800f6ac:	631a      	str	r2, [r3, #48]	@ 0x30
 800f6ae:	e005      	b.n	800f6bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f6b0:	6978      	ldr	r0, [r7, #20]
 800f6b2:	f002 f889 	bl	80117c8 <vPortFree>
 800f6b6:	e001      	b.n	800f6bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f6bc:	69fb      	ldr	r3, [r7, #28]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d017      	beq.n	800f6f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f6c2:	69fb      	ldr	r3, [r7, #28]
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f6ca:	88fa      	ldrh	r2, [r7, #6]
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	9303      	str	r3, [sp, #12]
 800f6d0:	69fb      	ldr	r3, [r7, #28]
 800f6d2:	9302      	str	r3, [sp, #8]
 800f6d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6d6:	9301      	str	r3, [sp, #4]
 800f6d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6da:	9300      	str	r3, [sp, #0]
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	68b9      	ldr	r1, [r7, #8]
 800f6e0:	68f8      	ldr	r0, [r7, #12]
 800f6e2:	f000 f80f 	bl	800f704 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f6e6:	69f8      	ldr	r0, [r7, #28]
 800f6e8:	f000 f8b4 	bl	800f854 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	61bb      	str	r3, [r7, #24]
 800f6f0:	e002      	b.n	800f6f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f6f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f6f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f6f8:	69bb      	ldr	r3, [r7, #24]
	}
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	3720      	adds	r7, #32
 800f6fe:	46bd      	mov	sp, r7
 800f700:	bd80      	pop	{r7, pc}
	...

0800f704 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b088      	sub	sp, #32
 800f708:	af00      	add	r7, sp, #0
 800f70a:	60f8      	str	r0, [r7, #12]
 800f70c:	60b9      	str	r1, [r7, #8]
 800f70e:	607a      	str	r2, [r7, #4]
 800f710:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f714:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	009b      	lsls	r3, r3, #2
 800f71a:	461a      	mov	r2, r3
 800f71c:	21a5      	movs	r1, #165	@ 0xa5
 800f71e:	f012 fdc7 	bl	80222b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f724:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f726:	6879      	ldr	r1, [r7, #4]
 800f728:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f72c:	440b      	add	r3, r1
 800f72e:	009b      	lsls	r3, r3, #2
 800f730:	4413      	add	r3, r2
 800f732:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f734:	69bb      	ldr	r3, [r7, #24]
 800f736:	f023 0307 	bic.w	r3, r3, #7
 800f73a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f73c:	69bb      	ldr	r3, [r7, #24]
 800f73e:	f003 0307 	and.w	r3, r3, #7
 800f742:	2b00      	cmp	r3, #0
 800f744:	d00b      	beq.n	800f75e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800f746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f74a:	f383 8811 	msr	BASEPRI, r3
 800f74e:	f3bf 8f6f 	isb	sy
 800f752:	f3bf 8f4f 	dsb	sy
 800f756:	617b      	str	r3, [r7, #20]
}
 800f758:	bf00      	nop
 800f75a:	bf00      	nop
 800f75c:	e7fd      	b.n	800f75a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d01f      	beq.n	800f7a4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f764:	2300      	movs	r3, #0
 800f766:	61fb      	str	r3, [r7, #28]
 800f768:	e012      	b.n	800f790 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f76a:	68ba      	ldr	r2, [r7, #8]
 800f76c:	69fb      	ldr	r3, [r7, #28]
 800f76e:	4413      	add	r3, r2
 800f770:	7819      	ldrb	r1, [r3, #0]
 800f772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f774:	69fb      	ldr	r3, [r7, #28]
 800f776:	4413      	add	r3, r2
 800f778:	3334      	adds	r3, #52	@ 0x34
 800f77a:	460a      	mov	r2, r1
 800f77c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f77e:	68ba      	ldr	r2, [r7, #8]
 800f780:	69fb      	ldr	r3, [r7, #28]
 800f782:	4413      	add	r3, r2
 800f784:	781b      	ldrb	r3, [r3, #0]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d006      	beq.n	800f798 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f78a:	69fb      	ldr	r3, [r7, #28]
 800f78c:	3301      	adds	r3, #1
 800f78e:	61fb      	str	r3, [r7, #28]
 800f790:	69fb      	ldr	r3, [r7, #28]
 800f792:	2b0f      	cmp	r3, #15
 800f794:	d9e9      	bls.n	800f76a <prvInitialiseNewTask+0x66>
 800f796:	e000      	b.n	800f79a <prvInitialiseNewTask+0x96>
			{
				break;
 800f798:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f79c:	2200      	movs	r2, #0
 800f79e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f7a2:	e003      	b.n	800f7ac <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f7a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f7ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7ae:	2b37      	cmp	r3, #55	@ 0x37
 800f7b0:	d901      	bls.n	800f7b6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f7b2:	2337      	movs	r3, #55	@ 0x37
 800f7b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f7ba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f7bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f7c0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f7c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7ca:	3304      	adds	r3, #4
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f7fe ff49 	bl	800e664 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7d4:	3318      	adds	r3, #24
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7fe ff44 	bl	800e664 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f7dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f7e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f7e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f7ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f7f0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f7f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f804:	3354      	adds	r3, #84	@ 0x54
 800f806:	224c      	movs	r2, #76	@ 0x4c
 800f808:	2100      	movs	r1, #0
 800f80a:	4618      	mov	r0, r3
 800f80c:	f012 fd50 	bl	80222b0 <memset>
 800f810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f812:	4a0d      	ldr	r2, [pc, #52]	@ (800f848 <prvInitialiseNewTask+0x144>)
 800f814:	659a      	str	r2, [r3, #88]	@ 0x58
 800f816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f818:	4a0c      	ldr	r2, [pc, #48]	@ (800f84c <prvInitialiseNewTask+0x148>)
 800f81a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800f81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f81e:	4a0c      	ldr	r2, [pc, #48]	@ (800f850 <prvInitialiseNewTask+0x14c>)
 800f820:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f822:	683a      	ldr	r2, [r7, #0]
 800f824:	68f9      	ldr	r1, [r7, #12]
 800f826:	69b8      	ldr	r0, [r7, #24]
 800f828:	f001 fcac 	bl	8011184 <pxPortInitialiseStack>
 800f82c:	4602      	mov	r2, r0
 800f82e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f830:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f834:	2b00      	cmp	r3, #0
 800f836:	d002      	beq.n	800f83e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f83a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f83c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f83e:	bf00      	nop
 800f840:	3720      	adds	r7, #32
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}
 800f846:	bf00      	nop
 800f848:	240695ac 	.word	0x240695ac
 800f84c:	24069614 	.word	0x24069614
 800f850:	2406967c 	.word	0x2406967c

0800f854 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b082      	sub	sp, #8
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f85c:	f001 fdc4 	bl	80113e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f860:	4b2d      	ldr	r3, [pc, #180]	@ (800f918 <prvAddNewTaskToReadyList+0xc4>)
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	3301      	adds	r3, #1
 800f866:	4a2c      	ldr	r2, [pc, #176]	@ (800f918 <prvAddNewTaskToReadyList+0xc4>)
 800f868:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f86a:	4b2c      	ldr	r3, [pc, #176]	@ (800f91c <prvAddNewTaskToReadyList+0xc8>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d109      	bne.n	800f886 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f872:	4a2a      	ldr	r2, [pc, #168]	@ (800f91c <prvAddNewTaskToReadyList+0xc8>)
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f878:	4b27      	ldr	r3, [pc, #156]	@ (800f918 <prvAddNewTaskToReadyList+0xc4>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	2b01      	cmp	r3, #1
 800f87e:	d110      	bne.n	800f8a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f880:	f000 fc68 	bl	8010154 <prvInitialiseTaskLists>
 800f884:	e00d      	b.n	800f8a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f886:	4b26      	ldr	r3, [pc, #152]	@ (800f920 <prvAddNewTaskToReadyList+0xcc>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d109      	bne.n	800f8a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f88e:	4b23      	ldr	r3, [pc, #140]	@ (800f91c <prvAddNewTaskToReadyList+0xc8>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f898:	429a      	cmp	r2, r3
 800f89a:	d802      	bhi.n	800f8a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f89c:	4a1f      	ldr	r2, [pc, #124]	@ (800f91c <prvAddNewTaskToReadyList+0xc8>)
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f8a2:	4b20      	ldr	r3, [pc, #128]	@ (800f924 <prvAddNewTaskToReadyList+0xd0>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	3301      	adds	r3, #1
 800f8a8:	4a1e      	ldr	r2, [pc, #120]	@ (800f924 <prvAddNewTaskToReadyList+0xd0>)
 800f8aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f8ac:	4b1d      	ldr	r3, [pc, #116]	@ (800f924 <prvAddNewTaskToReadyList+0xd0>)
 800f8ae:	681a      	ldr	r2, [r3, #0]
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8b8:	4b1b      	ldr	r3, [pc, #108]	@ (800f928 <prvAddNewTaskToReadyList+0xd4>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	d903      	bls.n	800f8c8 <prvAddNewTaskToReadyList+0x74>
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8c4:	4a18      	ldr	r2, [pc, #96]	@ (800f928 <prvAddNewTaskToReadyList+0xd4>)
 800f8c6:	6013      	str	r3, [r2, #0]
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8cc:	4613      	mov	r3, r2
 800f8ce:	009b      	lsls	r3, r3, #2
 800f8d0:	4413      	add	r3, r2
 800f8d2:	009b      	lsls	r3, r3, #2
 800f8d4:	4a15      	ldr	r2, [pc, #84]	@ (800f92c <prvAddNewTaskToReadyList+0xd8>)
 800f8d6:	441a      	add	r2, r3
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	3304      	adds	r3, #4
 800f8dc:	4619      	mov	r1, r3
 800f8de:	4610      	mov	r0, r2
 800f8e0:	f7fe fecd 	bl	800e67e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f8e4:	f001 fdb2 	bl	801144c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f8e8:	4b0d      	ldr	r3, [pc, #52]	@ (800f920 <prvAddNewTaskToReadyList+0xcc>)
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d00e      	beq.n	800f90e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f8f0:	4b0a      	ldr	r3, [pc, #40]	@ (800f91c <prvAddNewTaskToReadyList+0xc8>)
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d207      	bcs.n	800f90e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f8fe:	4b0c      	ldr	r3, [pc, #48]	@ (800f930 <prvAddNewTaskToReadyList+0xdc>)
 800f900:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f904:	601a      	str	r2, [r3, #0]
 800f906:	f3bf 8f4f 	dsb	sy
 800f90a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f90e:	bf00      	nop
 800f910:	3708      	adds	r7, #8
 800f912:	46bd      	mov	sp, r7
 800f914:	bd80      	pop	{r7, pc}
 800f916:	bf00      	nop
 800f918:	240339bc 	.word	0x240339bc
 800f91c:	240334e8 	.word	0x240334e8
 800f920:	240339c8 	.word	0x240339c8
 800f924:	240339d8 	.word	0x240339d8
 800f928:	240339c4 	.word	0x240339c4
 800f92c:	240334ec 	.word	0x240334ec
 800f930:	e000ed04 	.word	0xe000ed04

0800f934 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f934:	b580      	push	{r7, lr}
 800f936:	b084      	sub	sp, #16
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f93c:	2300      	movs	r3, #0
 800f93e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d018      	beq.n	800f978 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f946:	4b14      	ldr	r3, [pc, #80]	@ (800f998 <vTaskDelay+0x64>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d00b      	beq.n	800f966 <vTaskDelay+0x32>
	__asm volatile
 800f94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f952:	f383 8811 	msr	BASEPRI, r3
 800f956:	f3bf 8f6f 	isb	sy
 800f95a:	f3bf 8f4f 	dsb	sy
 800f95e:	60bb      	str	r3, [r7, #8]
}
 800f960:	bf00      	nop
 800f962:	bf00      	nop
 800f964:	e7fd      	b.n	800f962 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f966:	f000 f88b 	bl	800fa80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f96a:	2100      	movs	r1, #0
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f001 f85b 	bl	8010a28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f972:	f000 f893 	bl	800fa9c <xTaskResumeAll>
 800f976:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d107      	bne.n	800f98e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f97e:	4b07      	ldr	r3, [pc, #28]	@ (800f99c <vTaskDelay+0x68>)
 800f980:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f984:	601a      	str	r2, [r3, #0]
 800f986:	f3bf 8f4f 	dsb	sy
 800f98a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f98e:	bf00      	nop
 800f990:	3710      	adds	r7, #16
 800f992:	46bd      	mov	sp, r7
 800f994:	bd80      	pop	{r7, pc}
 800f996:	bf00      	nop
 800f998:	240339e4 	.word	0x240339e4
 800f99c:	e000ed04 	.word	0xe000ed04

0800f9a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b08a      	sub	sp, #40	@ 0x28
 800f9a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f9ae:	463a      	mov	r2, r7
 800f9b0:	1d39      	adds	r1, r7, #4
 800f9b2:	f107 0308 	add.w	r3, r7, #8
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f7fe fe00 	bl	800e5bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f9bc:	6839      	ldr	r1, [r7, #0]
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	68ba      	ldr	r2, [r7, #8]
 800f9c2:	9202      	str	r2, [sp, #8]
 800f9c4:	9301      	str	r3, [sp, #4]
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	9300      	str	r3, [sp, #0]
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	460a      	mov	r2, r1
 800f9ce:	4924      	ldr	r1, [pc, #144]	@ (800fa60 <vTaskStartScheduler+0xc0>)
 800f9d0:	4824      	ldr	r0, [pc, #144]	@ (800fa64 <vTaskStartScheduler+0xc4>)
 800f9d2:	f7ff fdf1 	bl	800f5b8 <xTaskCreateStatic>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	4a23      	ldr	r2, [pc, #140]	@ (800fa68 <vTaskStartScheduler+0xc8>)
 800f9da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f9dc:	4b22      	ldr	r3, [pc, #136]	@ (800fa68 <vTaskStartScheduler+0xc8>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d002      	beq.n	800f9ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f9e4:	2301      	movs	r3, #1
 800f9e6:	617b      	str	r3, [r7, #20]
 800f9e8:	e001      	b.n	800f9ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f9ee:	697b      	ldr	r3, [r7, #20]
 800f9f0:	2b01      	cmp	r3, #1
 800f9f2:	d102      	bne.n	800f9fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f9f4:	f001 f86c 	bl	8010ad0 <xTimerCreateTimerTask>
 800f9f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	2b01      	cmp	r3, #1
 800f9fe:	d11b      	bne.n	800fa38 <vTaskStartScheduler+0x98>
	__asm volatile
 800fa00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa04:	f383 8811 	msr	BASEPRI, r3
 800fa08:	f3bf 8f6f 	isb	sy
 800fa0c:	f3bf 8f4f 	dsb	sy
 800fa10:	613b      	str	r3, [r7, #16]
}
 800fa12:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fa14:	4b15      	ldr	r3, [pc, #84]	@ (800fa6c <vTaskStartScheduler+0xcc>)
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	3354      	adds	r3, #84	@ 0x54
 800fa1a:	4a15      	ldr	r2, [pc, #84]	@ (800fa70 <vTaskStartScheduler+0xd0>)
 800fa1c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fa1e:	4b15      	ldr	r3, [pc, #84]	@ (800fa74 <vTaskStartScheduler+0xd4>)
 800fa20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fa24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fa26:	4b14      	ldr	r3, [pc, #80]	@ (800fa78 <vTaskStartScheduler+0xd8>)
 800fa28:	2201      	movs	r2, #1
 800fa2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fa2c:	4b13      	ldr	r3, [pc, #76]	@ (800fa7c <vTaskStartScheduler+0xdc>)
 800fa2e:	2200      	movs	r2, #0
 800fa30:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fa32:	f001 fc35 	bl	80112a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fa36:	e00f      	b.n	800fa58 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fa3e:	d10b      	bne.n	800fa58 <vTaskStartScheduler+0xb8>
	__asm volatile
 800fa40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa44:	f383 8811 	msr	BASEPRI, r3
 800fa48:	f3bf 8f6f 	isb	sy
 800fa4c:	f3bf 8f4f 	dsb	sy
 800fa50:	60fb      	str	r3, [r7, #12]
}
 800fa52:	bf00      	nop
 800fa54:	bf00      	nop
 800fa56:	e7fd      	b.n	800fa54 <vTaskStartScheduler+0xb4>
}
 800fa58:	bf00      	nop
 800fa5a:	3718      	adds	r7, #24
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}
 800fa60:	08023408 	.word	0x08023408
 800fa64:	08010125 	.word	0x08010125
 800fa68:	240339e0 	.word	0x240339e0
 800fa6c:	240334e8 	.word	0x240334e8
 800fa70:	240012bc 	.word	0x240012bc
 800fa74:	240339dc 	.word	0x240339dc
 800fa78:	240339c8 	.word	0x240339c8
 800fa7c:	240339c0 	.word	0x240339c0

0800fa80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fa80:	b480      	push	{r7}
 800fa82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fa84:	4b04      	ldr	r3, [pc, #16]	@ (800fa98 <vTaskSuspendAll+0x18>)
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	3301      	adds	r3, #1
 800fa8a:	4a03      	ldr	r2, [pc, #12]	@ (800fa98 <vTaskSuspendAll+0x18>)
 800fa8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fa8e:	bf00      	nop
 800fa90:	46bd      	mov	sp, r7
 800fa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa96:	4770      	bx	lr
 800fa98:	240339e4 	.word	0x240339e4

0800fa9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b084      	sub	sp, #16
 800faa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800faa2:	2300      	movs	r3, #0
 800faa4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800faa6:	2300      	movs	r3, #0
 800faa8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800faaa:	4b42      	ldr	r3, [pc, #264]	@ (800fbb4 <xTaskResumeAll+0x118>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d10b      	bne.n	800faca <xTaskResumeAll+0x2e>
	__asm volatile
 800fab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fab6:	f383 8811 	msr	BASEPRI, r3
 800faba:	f3bf 8f6f 	isb	sy
 800fabe:	f3bf 8f4f 	dsb	sy
 800fac2:	603b      	str	r3, [r7, #0]
}
 800fac4:	bf00      	nop
 800fac6:	bf00      	nop
 800fac8:	e7fd      	b.n	800fac6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800faca:	f001 fc8d 	bl	80113e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800face:	4b39      	ldr	r3, [pc, #228]	@ (800fbb4 <xTaskResumeAll+0x118>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	3b01      	subs	r3, #1
 800fad4:	4a37      	ldr	r2, [pc, #220]	@ (800fbb4 <xTaskResumeAll+0x118>)
 800fad6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fad8:	4b36      	ldr	r3, [pc, #216]	@ (800fbb4 <xTaskResumeAll+0x118>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d162      	bne.n	800fba6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fae0:	4b35      	ldr	r3, [pc, #212]	@ (800fbb8 <xTaskResumeAll+0x11c>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d05e      	beq.n	800fba6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fae8:	e02f      	b.n	800fb4a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800faea:	4b34      	ldr	r3, [pc, #208]	@ (800fbbc <xTaskResumeAll+0x120>)
 800faec:	68db      	ldr	r3, [r3, #12]
 800faee:	68db      	ldr	r3, [r3, #12]
 800faf0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	3318      	adds	r3, #24
 800faf6:	4618      	mov	r0, r3
 800faf8:	f7fe fe1e 	bl	800e738 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	3304      	adds	r3, #4
 800fb00:	4618      	mov	r0, r3
 800fb02:	f7fe fe19 	bl	800e738 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb0a:	4b2d      	ldr	r3, [pc, #180]	@ (800fbc0 <xTaskResumeAll+0x124>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	429a      	cmp	r2, r3
 800fb10:	d903      	bls.n	800fb1a <xTaskResumeAll+0x7e>
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb16:	4a2a      	ldr	r2, [pc, #168]	@ (800fbc0 <xTaskResumeAll+0x124>)
 800fb18:	6013      	str	r3, [r2, #0]
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb1e:	4613      	mov	r3, r2
 800fb20:	009b      	lsls	r3, r3, #2
 800fb22:	4413      	add	r3, r2
 800fb24:	009b      	lsls	r3, r3, #2
 800fb26:	4a27      	ldr	r2, [pc, #156]	@ (800fbc4 <xTaskResumeAll+0x128>)
 800fb28:	441a      	add	r2, r3
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	3304      	adds	r3, #4
 800fb2e:	4619      	mov	r1, r3
 800fb30:	4610      	mov	r0, r2
 800fb32:	f7fe fda4 	bl	800e67e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb3a:	4b23      	ldr	r3, [pc, #140]	@ (800fbc8 <xTaskResumeAll+0x12c>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d302      	bcc.n	800fb4a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800fb44:	4b21      	ldr	r3, [pc, #132]	@ (800fbcc <xTaskResumeAll+0x130>)
 800fb46:	2201      	movs	r2, #1
 800fb48:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb4a:	4b1c      	ldr	r3, [pc, #112]	@ (800fbbc <xTaskResumeAll+0x120>)
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d1cb      	bne.n	800faea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d001      	beq.n	800fb5c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fb58:	f000 fba0 	bl	801029c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fb5c:	4b1c      	ldr	r3, [pc, #112]	@ (800fbd0 <xTaskResumeAll+0x134>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d010      	beq.n	800fb8a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fb68:	f000 f858 	bl	800fc1c <xTaskIncrementTick>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d002      	beq.n	800fb78 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800fb72:	4b16      	ldr	r3, [pc, #88]	@ (800fbcc <xTaskResumeAll+0x130>)
 800fb74:	2201      	movs	r2, #1
 800fb76:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	3b01      	subs	r3, #1
 800fb7c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d1f1      	bne.n	800fb68 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800fb84:	4b12      	ldr	r3, [pc, #72]	@ (800fbd0 <xTaskResumeAll+0x134>)
 800fb86:	2200      	movs	r2, #0
 800fb88:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fb8a:	4b10      	ldr	r3, [pc, #64]	@ (800fbcc <xTaskResumeAll+0x130>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d009      	beq.n	800fba6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fb92:	2301      	movs	r3, #1
 800fb94:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fb96:	4b0f      	ldr	r3, [pc, #60]	@ (800fbd4 <xTaskResumeAll+0x138>)
 800fb98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb9c:	601a      	str	r2, [r3, #0]
 800fb9e:	f3bf 8f4f 	dsb	sy
 800fba2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fba6:	f001 fc51 	bl	801144c <vPortExitCritical>

	return xAlreadyYielded;
 800fbaa:	68bb      	ldr	r3, [r7, #8]
}
 800fbac:	4618      	mov	r0, r3
 800fbae:	3710      	adds	r7, #16
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}
 800fbb4:	240339e4 	.word	0x240339e4
 800fbb8:	240339bc 	.word	0x240339bc
 800fbbc:	2403397c 	.word	0x2403397c
 800fbc0:	240339c4 	.word	0x240339c4
 800fbc4:	240334ec 	.word	0x240334ec
 800fbc8:	240334e8 	.word	0x240334e8
 800fbcc:	240339d0 	.word	0x240339d0
 800fbd0:	240339cc 	.word	0x240339cc
 800fbd4:	e000ed04 	.word	0xe000ed04

0800fbd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fbd8:	b480      	push	{r7}
 800fbda:	b083      	sub	sp, #12
 800fbdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fbde:	4b05      	ldr	r3, [pc, #20]	@ (800fbf4 <xTaskGetTickCount+0x1c>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fbe4:	687b      	ldr	r3, [r7, #4]
}
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	370c      	adds	r7, #12
 800fbea:	46bd      	mov	sp, r7
 800fbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf0:	4770      	bx	lr
 800fbf2:	bf00      	nop
 800fbf4:	240339c0 	.word	0x240339c0

0800fbf8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b082      	sub	sp, #8
 800fbfc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fbfe:	f001 fcd3 	bl	80115a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800fc02:	2300      	movs	r3, #0
 800fc04:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800fc06:	4b04      	ldr	r3, [pc, #16]	@ (800fc18 <xTaskGetTickCountFromISR+0x20>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fc0c:	683b      	ldr	r3, [r7, #0]
}
 800fc0e:	4618      	mov	r0, r3
 800fc10:	3708      	adds	r7, #8
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}
 800fc16:	bf00      	nop
 800fc18:	240339c0 	.word	0x240339c0

0800fc1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b086      	sub	sp, #24
 800fc20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fc22:	2300      	movs	r3, #0
 800fc24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc26:	4b4f      	ldr	r3, [pc, #316]	@ (800fd64 <xTaskIncrementTick+0x148>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	f040 8090 	bne.w	800fd50 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fc30:	4b4d      	ldr	r3, [pc, #308]	@ (800fd68 <xTaskIncrementTick+0x14c>)
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	3301      	adds	r3, #1
 800fc36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fc38:	4a4b      	ldr	r2, [pc, #300]	@ (800fd68 <xTaskIncrementTick+0x14c>)
 800fc3a:	693b      	ldr	r3, [r7, #16]
 800fc3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fc3e:	693b      	ldr	r3, [r7, #16]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d121      	bne.n	800fc88 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800fc44:	4b49      	ldr	r3, [pc, #292]	@ (800fd6c <xTaskIncrementTick+0x150>)
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d00b      	beq.n	800fc66 <xTaskIncrementTick+0x4a>
	__asm volatile
 800fc4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc52:	f383 8811 	msr	BASEPRI, r3
 800fc56:	f3bf 8f6f 	isb	sy
 800fc5a:	f3bf 8f4f 	dsb	sy
 800fc5e:	603b      	str	r3, [r7, #0]
}
 800fc60:	bf00      	nop
 800fc62:	bf00      	nop
 800fc64:	e7fd      	b.n	800fc62 <xTaskIncrementTick+0x46>
 800fc66:	4b41      	ldr	r3, [pc, #260]	@ (800fd6c <xTaskIncrementTick+0x150>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	60fb      	str	r3, [r7, #12]
 800fc6c:	4b40      	ldr	r3, [pc, #256]	@ (800fd70 <xTaskIncrementTick+0x154>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	4a3e      	ldr	r2, [pc, #248]	@ (800fd6c <xTaskIncrementTick+0x150>)
 800fc72:	6013      	str	r3, [r2, #0]
 800fc74:	4a3e      	ldr	r2, [pc, #248]	@ (800fd70 <xTaskIncrementTick+0x154>)
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	6013      	str	r3, [r2, #0]
 800fc7a:	4b3e      	ldr	r3, [pc, #248]	@ (800fd74 <xTaskIncrementTick+0x158>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	3301      	adds	r3, #1
 800fc80:	4a3c      	ldr	r2, [pc, #240]	@ (800fd74 <xTaskIncrementTick+0x158>)
 800fc82:	6013      	str	r3, [r2, #0]
 800fc84:	f000 fb0a 	bl	801029c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fc88:	4b3b      	ldr	r3, [pc, #236]	@ (800fd78 <xTaskIncrementTick+0x15c>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	693a      	ldr	r2, [r7, #16]
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	d349      	bcc.n	800fd26 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fc92:	4b36      	ldr	r3, [pc, #216]	@ (800fd6c <xTaskIncrementTick+0x150>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d104      	bne.n	800fca6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc9c:	4b36      	ldr	r3, [pc, #216]	@ (800fd78 <xTaskIncrementTick+0x15c>)
 800fc9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fca2:	601a      	str	r2, [r3, #0]
					break;
 800fca4:	e03f      	b.n	800fd26 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fca6:	4b31      	ldr	r3, [pc, #196]	@ (800fd6c <xTaskIncrementTick+0x150>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	68db      	ldr	r3, [r3, #12]
 800fcac:	68db      	ldr	r3, [r3, #12]
 800fcae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	685b      	ldr	r3, [r3, #4]
 800fcb4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fcb6:	693a      	ldr	r2, [r7, #16]
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	d203      	bcs.n	800fcc6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fcbe:	4a2e      	ldr	r2, [pc, #184]	@ (800fd78 <xTaskIncrementTick+0x15c>)
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fcc4:	e02f      	b.n	800fd26 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	3304      	adds	r3, #4
 800fcca:	4618      	mov	r0, r3
 800fccc:	f7fe fd34 	bl	800e738 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fcd0:	68bb      	ldr	r3, [r7, #8]
 800fcd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d004      	beq.n	800fce2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	3318      	adds	r3, #24
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f7fe fd2b 	bl	800e738 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fce6:	4b25      	ldr	r3, [pc, #148]	@ (800fd7c <xTaskIncrementTick+0x160>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	429a      	cmp	r2, r3
 800fcec:	d903      	bls.n	800fcf6 <xTaskIncrementTick+0xda>
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcf2:	4a22      	ldr	r2, [pc, #136]	@ (800fd7c <xTaskIncrementTick+0x160>)
 800fcf4:	6013      	str	r3, [r2, #0]
 800fcf6:	68bb      	ldr	r3, [r7, #8]
 800fcf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcfa:	4613      	mov	r3, r2
 800fcfc:	009b      	lsls	r3, r3, #2
 800fcfe:	4413      	add	r3, r2
 800fd00:	009b      	lsls	r3, r3, #2
 800fd02:	4a1f      	ldr	r2, [pc, #124]	@ (800fd80 <xTaskIncrementTick+0x164>)
 800fd04:	441a      	add	r2, r3
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	3304      	adds	r3, #4
 800fd0a:	4619      	mov	r1, r3
 800fd0c:	4610      	mov	r0, r2
 800fd0e:	f7fe fcb6 	bl	800e67e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd16:	4b1b      	ldr	r3, [pc, #108]	@ (800fd84 <xTaskIncrementTick+0x168>)
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d3b8      	bcc.n	800fc92 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800fd20:	2301      	movs	r3, #1
 800fd22:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd24:	e7b5      	b.n	800fc92 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fd26:	4b17      	ldr	r3, [pc, #92]	@ (800fd84 <xTaskIncrementTick+0x168>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd2c:	4914      	ldr	r1, [pc, #80]	@ (800fd80 <xTaskIncrementTick+0x164>)
 800fd2e:	4613      	mov	r3, r2
 800fd30:	009b      	lsls	r3, r3, #2
 800fd32:	4413      	add	r3, r2
 800fd34:	009b      	lsls	r3, r3, #2
 800fd36:	440b      	add	r3, r1
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	2b01      	cmp	r3, #1
 800fd3c:	d901      	bls.n	800fd42 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800fd3e:	2301      	movs	r3, #1
 800fd40:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fd42:	4b11      	ldr	r3, [pc, #68]	@ (800fd88 <xTaskIncrementTick+0x16c>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d007      	beq.n	800fd5a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800fd4a:	2301      	movs	r3, #1
 800fd4c:	617b      	str	r3, [r7, #20]
 800fd4e:	e004      	b.n	800fd5a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fd50:	4b0e      	ldr	r3, [pc, #56]	@ (800fd8c <xTaskIncrementTick+0x170>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	3301      	adds	r3, #1
 800fd56:	4a0d      	ldr	r2, [pc, #52]	@ (800fd8c <xTaskIncrementTick+0x170>)
 800fd58:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fd5a:	697b      	ldr	r3, [r7, #20]
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	3718      	adds	r7, #24
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}
 800fd64:	240339e4 	.word	0x240339e4
 800fd68:	240339c0 	.word	0x240339c0
 800fd6c:	24033974 	.word	0x24033974
 800fd70:	24033978 	.word	0x24033978
 800fd74:	240339d4 	.word	0x240339d4
 800fd78:	240339dc 	.word	0x240339dc
 800fd7c:	240339c4 	.word	0x240339c4
 800fd80:	240334ec 	.word	0x240334ec
 800fd84:	240334e8 	.word	0x240334e8
 800fd88:	240339d0 	.word	0x240339d0
 800fd8c:	240339cc 	.word	0x240339cc

0800fd90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fd90:	b480      	push	{r7}
 800fd92:	b085      	sub	sp, #20
 800fd94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fd96:	4b2b      	ldr	r3, [pc, #172]	@ (800fe44 <vTaskSwitchContext+0xb4>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d003      	beq.n	800fda6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fd9e:	4b2a      	ldr	r3, [pc, #168]	@ (800fe48 <vTaskSwitchContext+0xb8>)
 800fda0:	2201      	movs	r2, #1
 800fda2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fda4:	e047      	b.n	800fe36 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800fda6:	4b28      	ldr	r3, [pc, #160]	@ (800fe48 <vTaskSwitchContext+0xb8>)
 800fda8:	2200      	movs	r2, #0
 800fdaa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdac:	4b27      	ldr	r3, [pc, #156]	@ (800fe4c <vTaskSwitchContext+0xbc>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	60fb      	str	r3, [r7, #12]
 800fdb2:	e011      	b.n	800fdd8 <vTaskSwitchContext+0x48>
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d10b      	bne.n	800fdd2 <vTaskSwitchContext+0x42>
	__asm volatile
 800fdba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdbe:	f383 8811 	msr	BASEPRI, r3
 800fdc2:	f3bf 8f6f 	isb	sy
 800fdc6:	f3bf 8f4f 	dsb	sy
 800fdca:	607b      	str	r3, [r7, #4]
}
 800fdcc:	bf00      	nop
 800fdce:	bf00      	nop
 800fdd0:	e7fd      	b.n	800fdce <vTaskSwitchContext+0x3e>
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	3b01      	subs	r3, #1
 800fdd6:	60fb      	str	r3, [r7, #12]
 800fdd8:	491d      	ldr	r1, [pc, #116]	@ (800fe50 <vTaskSwitchContext+0xc0>)
 800fdda:	68fa      	ldr	r2, [r7, #12]
 800fddc:	4613      	mov	r3, r2
 800fdde:	009b      	lsls	r3, r3, #2
 800fde0:	4413      	add	r3, r2
 800fde2:	009b      	lsls	r3, r3, #2
 800fde4:	440b      	add	r3, r1
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d0e3      	beq.n	800fdb4 <vTaskSwitchContext+0x24>
 800fdec:	68fa      	ldr	r2, [r7, #12]
 800fdee:	4613      	mov	r3, r2
 800fdf0:	009b      	lsls	r3, r3, #2
 800fdf2:	4413      	add	r3, r2
 800fdf4:	009b      	lsls	r3, r3, #2
 800fdf6:	4a16      	ldr	r2, [pc, #88]	@ (800fe50 <vTaskSwitchContext+0xc0>)
 800fdf8:	4413      	add	r3, r2
 800fdfa:	60bb      	str	r3, [r7, #8]
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	685b      	ldr	r3, [r3, #4]
 800fe00:	685a      	ldr	r2, [r3, #4]
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	605a      	str	r2, [r3, #4]
 800fe06:	68bb      	ldr	r3, [r7, #8]
 800fe08:	685a      	ldr	r2, [r3, #4]
 800fe0a:	68bb      	ldr	r3, [r7, #8]
 800fe0c:	3308      	adds	r3, #8
 800fe0e:	429a      	cmp	r2, r3
 800fe10:	d104      	bne.n	800fe1c <vTaskSwitchContext+0x8c>
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	685b      	ldr	r3, [r3, #4]
 800fe16:	685a      	ldr	r2, [r3, #4]
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	605a      	str	r2, [r3, #4]
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	685b      	ldr	r3, [r3, #4]
 800fe20:	68db      	ldr	r3, [r3, #12]
 800fe22:	4a0c      	ldr	r2, [pc, #48]	@ (800fe54 <vTaskSwitchContext+0xc4>)
 800fe24:	6013      	str	r3, [r2, #0]
 800fe26:	4a09      	ldr	r2, [pc, #36]	@ (800fe4c <vTaskSwitchContext+0xbc>)
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fe2c:	4b09      	ldr	r3, [pc, #36]	@ (800fe54 <vTaskSwitchContext+0xc4>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	3354      	adds	r3, #84	@ 0x54
 800fe32:	4a09      	ldr	r2, [pc, #36]	@ (800fe58 <vTaskSwitchContext+0xc8>)
 800fe34:	6013      	str	r3, [r2, #0]
}
 800fe36:	bf00      	nop
 800fe38:	3714      	adds	r7, #20
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe40:	4770      	bx	lr
 800fe42:	bf00      	nop
 800fe44:	240339e4 	.word	0x240339e4
 800fe48:	240339d0 	.word	0x240339d0
 800fe4c:	240339c4 	.word	0x240339c4
 800fe50:	240334ec 	.word	0x240334ec
 800fe54:	240334e8 	.word	0x240334e8
 800fe58:	240012bc 	.word	0x240012bc

0800fe5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b084      	sub	sp, #16
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
 800fe64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d10b      	bne.n	800fe84 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800fe6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe70:	f383 8811 	msr	BASEPRI, r3
 800fe74:	f3bf 8f6f 	isb	sy
 800fe78:	f3bf 8f4f 	dsb	sy
 800fe7c:	60fb      	str	r3, [r7, #12]
}
 800fe7e:	bf00      	nop
 800fe80:	bf00      	nop
 800fe82:	e7fd      	b.n	800fe80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fe84:	4b07      	ldr	r3, [pc, #28]	@ (800fea4 <vTaskPlaceOnEventList+0x48>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	3318      	adds	r3, #24
 800fe8a:	4619      	mov	r1, r3
 800fe8c:	6878      	ldr	r0, [r7, #4]
 800fe8e:	f7fe fc1a 	bl	800e6c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fe92:	2101      	movs	r1, #1
 800fe94:	6838      	ldr	r0, [r7, #0]
 800fe96:	f000 fdc7 	bl	8010a28 <prvAddCurrentTaskToDelayedList>
}
 800fe9a:	bf00      	nop
 800fe9c:	3710      	adds	r7, #16
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd80      	pop	{r7, pc}
 800fea2:	bf00      	nop
 800fea4:	240334e8 	.word	0x240334e8

0800fea8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b086      	sub	sp, #24
 800feac:	af00      	add	r7, sp, #0
 800feae:	60f8      	str	r0, [r7, #12]
 800feb0:	60b9      	str	r1, [r7, #8]
 800feb2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d10b      	bne.n	800fed2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800feba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800febe:	f383 8811 	msr	BASEPRI, r3
 800fec2:	f3bf 8f6f 	isb	sy
 800fec6:	f3bf 8f4f 	dsb	sy
 800feca:	617b      	str	r3, [r7, #20]
}
 800fecc:	bf00      	nop
 800fece:	bf00      	nop
 800fed0:	e7fd      	b.n	800fece <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fed2:	4b0a      	ldr	r3, [pc, #40]	@ (800fefc <vTaskPlaceOnEventListRestricted+0x54>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	3318      	adds	r3, #24
 800fed8:	4619      	mov	r1, r3
 800feda:	68f8      	ldr	r0, [r7, #12]
 800fedc:	f7fe fbcf 	bl	800e67e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d002      	beq.n	800feec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800fee6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800feea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800feec:	6879      	ldr	r1, [r7, #4]
 800feee:	68b8      	ldr	r0, [r7, #8]
 800fef0:	f000 fd9a 	bl	8010a28 <prvAddCurrentTaskToDelayedList>
	}
 800fef4:	bf00      	nop
 800fef6:	3718      	adds	r7, #24
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}
 800fefc:	240334e8 	.word	0x240334e8

0800ff00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b086      	sub	sp, #24
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	68db      	ldr	r3, [r3, #12]
 800ff0c:	68db      	ldr	r3, [r3, #12]
 800ff0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ff10:	693b      	ldr	r3, [r7, #16]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d10b      	bne.n	800ff2e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ff16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff1a:	f383 8811 	msr	BASEPRI, r3
 800ff1e:	f3bf 8f6f 	isb	sy
 800ff22:	f3bf 8f4f 	dsb	sy
 800ff26:	60fb      	str	r3, [r7, #12]
}
 800ff28:	bf00      	nop
 800ff2a:	bf00      	nop
 800ff2c:	e7fd      	b.n	800ff2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ff2e:	693b      	ldr	r3, [r7, #16]
 800ff30:	3318      	adds	r3, #24
 800ff32:	4618      	mov	r0, r3
 800ff34:	f7fe fc00 	bl	800e738 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff38:	4b1d      	ldr	r3, [pc, #116]	@ (800ffb0 <xTaskRemoveFromEventList+0xb0>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d11d      	bne.n	800ff7c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ff40:	693b      	ldr	r3, [r7, #16]
 800ff42:	3304      	adds	r3, #4
 800ff44:	4618      	mov	r0, r3
 800ff46:	f7fe fbf7 	bl	800e738 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ff4a:	693b      	ldr	r3, [r7, #16]
 800ff4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff4e:	4b19      	ldr	r3, [pc, #100]	@ (800ffb4 <xTaskRemoveFromEventList+0xb4>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	429a      	cmp	r2, r3
 800ff54:	d903      	bls.n	800ff5e <xTaskRemoveFromEventList+0x5e>
 800ff56:	693b      	ldr	r3, [r7, #16]
 800ff58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff5a:	4a16      	ldr	r2, [pc, #88]	@ (800ffb4 <xTaskRemoveFromEventList+0xb4>)
 800ff5c:	6013      	str	r3, [r2, #0]
 800ff5e:	693b      	ldr	r3, [r7, #16]
 800ff60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff62:	4613      	mov	r3, r2
 800ff64:	009b      	lsls	r3, r3, #2
 800ff66:	4413      	add	r3, r2
 800ff68:	009b      	lsls	r3, r3, #2
 800ff6a:	4a13      	ldr	r2, [pc, #76]	@ (800ffb8 <xTaskRemoveFromEventList+0xb8>)
 800ff6c:	441a      	add	r2, r3
 800ff6e:	693b      	ldr	r3, [r7, #16]
 800ff70:	3304      	adds	r3, #4
 800ff72:	4619      	mov	r1, r3
 800ff74:	4610      	mov	r0, r2
 800ff76:	f7fe fb82 	bl	800e67e <vListInsertEnd>
 800ff7a:	e005      	b.n	800ff88 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	3318      	adds	r3, #24
 800ff80:	4619      	mov	r1, r3
 800ff82:	480e      	ldr	r0, [pc, #56]	@ (800ffbc <xTaskRemoveFromEventList+0xbc>)
 800ff84:	f7fe fb7b 	bl	800e67e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ff88:	693b      	ldr	r3, [r7, #16]
 800ff8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff8c:	4b0c      	ldr	r3, [pc, #48]	@ (800ffc0 <xTaskRemoveFromEventList+0xc0>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff92:	429a      	cmp	r2, r3
 800ff94:	d905      	bls.n	800ffa2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ff96:	2301      	movs	r3, #1
 800ff98:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ff9a:	4b0a      	ldr	r3, [pc, #40]	@ (800ffc4 <xTaskRemoveFromEventList+0xc4>)
 800ff9c:	2201      	movs	r2, #1
 800ff9e:	601a      	str	r2, [r3, #0]
 800ffa0:	e001      	b.n	800ffa6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ffa6:	697b      	ldr	r3, [r7, #20]
}
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	3718      	adds	r7, #24
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}
 800ffb0:	240339e4 	.word	0x240339e4
 800ffb4:	240339c4 	.word	0x240339c4
 800ffb8:	240334ec 	.word	0x240334ec
 800ffbc:	2403397c 	.word	0x2403397c
 800ffc0:	240334e8 	.word	0x240334e8
 800ffc4:	240339d0 	.word	0x240339d0

0800ffc8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b084      	sub	sp, #16
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d10b      	bne.n	800ffee <vTaskSetTimeOutState+0x26>
	__asm volatile
 800ffd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffda:	f383 8811 	msr	BASEPRI, r3
 800ffde:	f3bf 8f6f 	isb	sy
 800ffe2:	f3bf 8f4f 	dsb	sy
 800ffe6:	60fb      	str	r3, [r7, #12]
}
 800ffe8:	bf00      	nop
 800ffea:	bf00      	nop
 800ffec:	e7fd      	b.n	800ffea <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800ffee:	f001 f9fb 	bl	80113e8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fff2:	4b07      	ldr	r3, [pc, #28]	@ (8010010 <vTaskSetTimeOutState+0x48>)
 800fff4:	681a      	ldr	r2, [r3, #0]
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800fffa:	4b06      	ldr	r3, [pc, #24]	@ (8010014 <vTaskSetTimeOutState+0x4c>)
 800fffc:	681a      	ldr	r2, [r3, #0]
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8010002:	f001 fa23 	bl	801144c <vPortExitCritical>
}
 8010006:	bf00      	nop
 8010008:	3710      	adds	r7, #16
 801000a:	46bd      	mov	sp, r7
 801000c:	bd80      	pop	{r7, pc}
 801000e:	bf00      	nop
 8010010:	240339d4 	.word	0x240339d4
 8010014:	240339c0 	.word	0x240339c0

08010018 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010018:	b480      	push	{r7}
 801001a:	b083      	sub	sp, #12
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010020:	4b06      	ldr	r3, [pc, #24]	@ (801003c <vTaskInternalSetTimeOutState+0x24>)
 8010022:	681a      	ldr	r2, [r3, #0]
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010028:	4b05      	ldr	r3, [pc, #20]	@ (8010040 <vTaskInternalSetTimeOutState+0x28>)
 801002a:	681a      	ldr	r2, [r3, #0]
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	605a      	str	r2, [r3, #4]
}
 8010030:	bf00      	nop
 8010032:	370c      	adds	r7, #12
 8010034:	46bd      	mov	sp, r7
 8010036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003a:	4770      	bx	lr
 801003c:	240339d4 	.word	0x240339d4
 8010040:	240339c0 	.word	0x240339c0

08010044 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b088      	sub	sp, #32
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
 801004c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d10b      	bne.n	801006c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8010054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010058:	f383 8811 	msr	BASEPRI, r3
 801005c:	f3bf 8f6f 	isb	sy
 8010060:	f3bf 8f4f 	dsb	sy
 8010064:	613b      	str	r3, [r7, #16]
}
 8010066:	bf00      	nop
 8010068:	bf00      	nop
 801006a:	e7fd      	b.n	8010068 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801006c:	683b      	ldr	r3, [r7, #0]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d10b      	bne.n	801008a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8010072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010076:	f383 8811 	msr	BASEPRI, r3
 801007a:	f3bf 8f6f 	isb	sy
 801007e:	f3bf 8f4f 	dsb	sy
 8010082:	60fb      	str	r3, [r7, #12]
}
 8010084:	bf00      	nop
 8010086:	bf00      	nop
 8010088:	e7fd      	b.n	8010086 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801008a:	f001 f9ad 	bl	80113e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801008e:	4b1d      	ldr	r3, [pc, #116]	@ (8010104 <xTaskCheckForTimeOut+0xc0>)
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	685b      	ldr	r3, [r3, #4]
 8010098:	69ba      	ldr	r2, [r7, #24]
 801009a:	1ad3      	subs	r3, r2, r3
 801009c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80100a6:	d102      	bne.n	80100ae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80100a8:	2300      	movs	r3, #0
 80100aa:	61fb      	str	r3, [r7, #28]
 80100ac:	e023      	b.n	80100f6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	681a      	ldr	r2, [r3, #0]
 80100b2:	4b15      	ldr	r3, [pc, #84]	@ (8010108 <xTaskCheckForTimeOut+0xc4>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	429a      	cmp	r2, r3
 80100b8:	d007      	beq.n	80100ca <xTaskCheckForTimeOut+0x86>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	69ba      	ldr	r2, [r7, #24]
 80100c0:	429a      	cmp	r2, r3
 80100c2:	d302      	bcc.n	80100ca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80100c4:	2301      	movs	r3, #1
 80100c6:	61fb      	str	r3, [r7, #28]
 80100c8:	e015      	b.n	80100f6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	697a      	ldr	r2, [r7, #20]
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d20b      	bcs.n	80100ec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	681a      	ldr	r2, [r3, #0]
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	1ad2      	subs	r2, r2, r3
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f7ff ff99 	bl	8010018 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80100e6:	2300      	movs	r3, #0
 80100e8:	61fb      	str	r3, [r7, #28]
 80100ea:	e004      	b.n	80100f6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	2200      	movs	r2, #0
 80100f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80100f2:	2301      	movs	r3, #1
 80100f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80100f6:	f001 f9a9 	bl	801144c <vPortExitCritical>

	return xReturn;
 80100fa:	69fb      	ldr	r3, [r7, #28]
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3720      	adds	r7, #32
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}
 8010104:	240339c0 	.word	0x240339c0
 8010108:	240339d4 	.word	0x240339d4

0801010c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801010c:	b480      	push	{r7}
 801010e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010110:	4b03      	ldr	r3, [pc, #12]	@ (8010120 <vTaskMissedYield+0x14>)
 8010112:	2201      	movs	r2, #1
 8010114:	601a      	str	r2, [r3, #0]
}
 8010116:	bf00      	nop
 8010118:	46bd      	mov	sp, r7
 801011a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011e:	4770      	bx	lr
 8010120:	240339d0 	.word	0x240339d0

08010124 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b082      	sub	sp, #8
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801012c:	f000 f852 	bl	80101d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010130:	4b06      	ldr	r3, [pc, #24]	@ (801014c <prvIdleTask+0x28>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	2b01      	cmp	r3, #1
 8010136:	d9f9      	bls.n	801012c <prvIdleTask+0x8>
			{
				taskYIELD();
 8010138:	4b05      	ldr	r3, [pc, #20]	@ (8010150 <prvIdleTask+0x2c>)
 801013a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801013e:	601a      	str	r2, [r3, #0]
 8010140:	f3bf 8f4f 	dsb	sy
 8010144:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010148:	e7f0      	b.n	801012c <prvIdleTask+0x8>
 801014a:	bf00      	nop
 801014c:	240334ec 	.word	0x240334ec
 8010150:	e000ed04 	.word	0xe000ed04

08010154 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b082      	sub	sp, #8
 8010158:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801015a:	2300      	movs	r3, #0
 801015c:	607b      	str	r3, [r7, #4]
 801015e:	e00c      	b.n	801017a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010160:	687a      	ldr	r2, [r7, #4]
 8010162:	4613      	mov	r3, r2
 8010164:	009b      	lsls	r3, r3, #2
 8010166:	4413      	add	r3, r2
 8010168:	009b      	lsls	r3, r3, #2
 801016a:	4a12      	ldr	r2, [pc, #72]	@ (80101b4 <prvInitialiseTaskLists+0x60>)
 801016c:	4413      	add	r3, r2
 801016e:	4618      	mov	r0, r3
 8010170:	f7fe fa58 	bl	800e624 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	3301      	adds	r3, #1
 8010178:	607b      	str	r3, [r7, #4]
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2b37      	cmp	r3, #55	@ 0x37
 801017e:	d9ef      	bls.n	8010160 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010180:	480d      	ldr	r0, [pc, #52]	@ (80101b8 <prvInitialiseTaskLists+0x64>)
 8010182:	f7fe fa4f 	bl	800e624 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010186:	480d      	ldr	r0, [pc, #52]	@ (80101bc <prvInitialiseTaskLists+0x68>)
 8010188:	f7fe fa4c 	bl	800e624 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801018c:	480c      	ldr	r0, [pc, #48]	@ (80101c0 <prvInitialiseTaskLists+0x6c>)
 801018e:	f7fe fa49 	bl	800e624 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010192:	480c      	ldr	r0, [pc, #48]	@ (80101c4 <prvInitialiseTaskLists+0x70>)
 8010194:	f7fe fa46 	bl	800e624 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010198:	480b      	ldr	r0, [pc, #44]	@ (80101c8 <prvInitialiseTaskLists+0x74>)
 801019a:	f7fe fa43 	bl	800e624 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801019e:	4b0b      	ldr	r3, [pc, #44]	@ (80101cc <prvInitialiseTaskLists+0x78>)
 80101a0:	4a05      	ldr	r2, [pc, #20]	@ (80101b8 <prvInitialiseTaskLists+0x64>)
 80101a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80101a4:	4b0a      	ldr	r3, [pc, #40]	@ (80101d0 <prvInitialiseTaskLists+0x7c>)
 80101a6:	4a05      	ldr	r2, [pc, #20]	@ (80101bc <prvInitialiseTaskLists+0x68>)
 80101a8:	601a      	str	r2, [r3, #0]
}
 80101aa:	bf00      	nop
 80101ac:	3708      	adds	r7, #8
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}
 80101b2:	bf00      	nop
 80101b4:	240334ec 	.word	0x240334ec
 80101b8:	2403394c 	.word	0x2403394c
 80101bc:	24033960 	.word	0x24033960
 80101c0:	2403397c 	.word	0x2403397c
 80101c4:	24033990 	.word	0x24033990
 80101c8:	240339a8 	.word	0x240339a8
 80101cc:	24033974 	.word	0x24033974
 80101d0:	24033978 	.word	0x24033978

080101d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b082      	sub	sp, #8
 80101d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80101da:	e019      	b.n	8010210 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80101dc:	f001 f904 	bl	80113e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101e0:	4b10      	ldr	r3, [pc, #64]	@ (8010224 <prvCheckTasksWaitingTermination+0x50>)
 80101e2:	68db      	ldr	r3, [r3, #12]
 80101e4:	68db      	ldr	r3, [r3, #12]
 80101e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	3304      	adds	r3, #4
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7fe faa3 	bl	800e738 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80101f2:	4b0d      	ldr	r3, [pc, #52]	@ (8010228 <prvCheckTasksWaitingTermination+0x54>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	3b01      	subs	r3, #1
 80101f8:	4a0b      	ldr	r2, [pc, #44]	@ (8010228 <prvCheckTasksWaitingTermination+0x54>)
 80101fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80101fc:	4b0b      	ldr	r3, [pc, #44]	@ (801022c <prvCheckTasksWaitingTermination+0x58>)
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	3b01      	subs	r3, #1
 8010202:	4a0a      	ldr	r2, [pc, #40]	@ (801022c <prvCheckTasksWaitingTermination+0x58>)
 8010204:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010206:	f001 f921 	bl	801144c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	f000 f810 	bl	8010230 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010210:	4b06      	ldr	r3, [pc, #24]	@ (801022c <prvCheckTasksWaitingTermination+0x58>)
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d1e1      	bne.n	80101dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010218:	bf00      	nop
 801021a:	bf00      	nop
 801021c:	3708      	adds	r7, #8
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}
 8010222:	bf00      	nop
 8010224:	24033990 	.word	0x24033990
 8010228:	240339bc 	.word	0x240339bc
 801022c:	240339a4 	.word	0x240339a4

08010230 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010230:	b580      	push	{r7, lr}
 8010232:	b084      	sub	sp, #16
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	3354      	adds	r3, #84	@ 0x54
 801023c:	4618      	mov	r0, r3
 801023e:	f012 f885 	bl	802234c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010248:	2b00      	cmp	r3, #0
 801024a:	d108      	bne.n	801025e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010250:	4618      	mov	r0, r3
 8010252:	f001 fab9 	bl	80117c8 <vPortFree>
				vPortFree( pxTCB );
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f001 fab6 	bl	80117c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801025c:	e019      	b.n	8010292 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010264:	2b01      	cmp	r3, #1
 8010266:	d103      	bne.n	8010270 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f001 faad 	bl	80117c8 <vPortFree>
	}
 801026e:	e010      	b.n	8010292 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010276:	2b02      	cmp	r3, #2
 8010278:	d00b      	beq.n	8010292 <prvDeleteTCB+0x62>
	__asm volatile
 801027a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801027e:	f383 8811 	msr	BASEPRI, r3
 8010282:	f3bf 8f6f 	isb	sy
 8010286:	f3bf 8f4f 	dsb	sy
 801028a:	60fb      	str	r3, [r7, #12]
}
 801028c:	bf00      	nop
 801028e:	bf00      	nop
 8010290:	e7fd      	b.n	801028e <prvDeleteTCB+0x5e>
	}
 8010292:	bf00      	nop
 8010294:	3710      	adds	r7, #16
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}
	...

0801029c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801029c:	b480      	push	{r7}
 801029e:	b083      	sub	sp, #12
 80102a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80102a2:	4b0c      	ldr	r3, [pc, #48]	@ (80102d4 <prvResetNextTaskUnblockTime+0x38>)
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d104      	bne.n	80102b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80102ac:	4b0a      	ldr	r3, [pc, #40]	@ (80102d8 <prvResetNextTaskUnblockTime+0x3c>)
 80102ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80102b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80102b4:	e008      	b.n	80102c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102b6:	4b07      	ldr	r3, [pc, #28]	@ (80102d4 <prvResetNextTaskUnblockTime+0x38>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	68db      	ldr	r3, [r3, #12]
 80102bc:	68db      	ldr	r3, [r3, #12]
 80102be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	685b      	ldr	r3, [r3, #4]
 80102c4:	4a04      	ldr	r2, [pc, #16]	@ (80102d8 <prvResetNextTaskUnblockTime+0x3c>)
 80102c6:	6013      	str	r3, [r2, #0]
}
 80102c8:	bf00      	nop
 80102ca:	370c      	adds	r7, #12
 80102cc:	46bd      	mov	sp, r7
 80102ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d2:	4770      	bx	lr
 80102d4:	24033974 	.word	0x24033974
 80102d8:	240339dc 	.word	0x240339dc

080102dc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80102dc:	b480      	push	{r7}
 80102de:	b083      	sub	sp, #12
 80102e0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80102e2:	4b05      	ldr	r3, [pc, #20]	@ (80102f8 <xTaskGetCurrentTaskHandle+0x1c>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80102e8:	687b      	ldr	r3, [r7, #4]
	}
 80102ea:	4618      	mov	r0, r3
 80102ec:	370c      	adds	r7, #12
 80102ee:	46bd      	mov	sp, r7
 80102f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f4:	4770      	bx	lr
 80102f6:	bf00      	nop
 80102f8:	240334e8 	.word	0x240334e8

080102fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80102fc:	b480      	push	{r7}
 80102fe:	b083      	sub	sp, #12
 8010300:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010302:	4b0b      	ldr	r3, [pc, #44]	@ (8010330 <xTaskGetSchedulerState+0x34>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d102      	bne.n	8010310 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801030a:	2301      	movs	r3, #1
 801030c:	607b      	str	r3, [r7, #4]
 801030e:	e008      	b.n	8010322 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010310:	4b08      	ldr	r3, [pc, #32]	@ (8010334 <xTaskGetSchedulerState+0x38>)
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d102      	bne.n	801031e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010318:	2302      	movs	r3, #2
 801031a:	607b      	str	r3, [r7, #4]
 801031c:	e001      	b.n	8010322 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801031e:	2300      	movs	r3, #0
 8010320:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010322:	687b      	ldr	r3, [r7, #4]
	}
 8010324:	4618      	mov	r0, r3
 8010326:	370c      	adds	r7, #12
 8010328:	46bd      	mov	sp, r7
 801032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032e:	4770      	bx	lr
 8010330:	240339c8 	.word	0x240339c8
 8010334:	240339e4 	.word	0x240339e4

08010338 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010338:	b580      	push	{r7, lr}
 801033a:	b084      	sub	sp, #16
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010344:	2300      	movs	r3, #0
 8010346:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d051      	beq.n	80103f2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801034e:	68bb      	ldr	r3, [r7, #8]
 8010350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010352:	4b2a      	ldr	r3, [pc, #168]	@ (80103fc <xTaskPriorityInherit+0xc4>)
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010358:	429a      	cmp	r2, r3
 801035a:	d241      	bcs.n	80103e0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801035c:	68bb      	ldr	r3, [r7, #8]
 801035e:	699b      	ldr	r3, [r3, #24]
 8010360:	2b00      	cmp	r3, #0
 8010362:	db06      	blt.n	8010372 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010364:	4b25      	ldr	r3, [pc, #148]	@ (80103fc <xTaskPriorityInherit+0xc4>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801036a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	6959      	ldr	r1, [r3, #20]
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801037a:	4613      	mov	r3, r2
 801037c:	009b      	lsls	r3, r3, #2
 801037e:	4413      	add	r3, r2
 8010380:	009b      	lsls	r3, r3, #2
 8010382:	4a1f      	ldr	r2, [pc, #124]	@ (8010400 <xTaskPriorityInherit+0xc8>)
 8010384:	4413      	add	r3, r2
 8010386:	4299      	cmp	r1, r3
 8010388:	d122      	bne.n	80103d0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801038a:	68bb      	ldr	r3, [r7, #8]
 801038c:	3304      	adds	r3, #4
 801038e:	4618      	mov	r0, r3
 8010390:	f7fe f9d2 	bl	800e738 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010394:	4b19      	ldr	r3, [pc, #100]	@ (80103fc <xTaskPriorityInherit+0xc4>)
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103a2:	4b18      	ldr	r3, [pc, #96]	@ (8010404 <xTaskPriorityInherit+0xcc>)
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	429a      	cmp	r2, r3
 80103a8:	d903      	bls.n	80103b2 <xTaskPriorityInherit+0x7a>
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103ae:	4a15      	ldr	r2, [pc, #84]	@ (8010404 <xTaskPriorityInherit+0xcc>)
 80103b0:	6013      	str	r3, [r2, #0]
 80103b2:	68bb      	ldr	r3, [r7, #8]
 80103b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103b6:	4613      	mov	r3, r2
 80103b8:	009b      	lsls	r3, r3, #2
 80103ba:	4413      	add	r3, r2
 80103bc:	009b      	lsls	r3, r3, #2
 80103be:	4a10      	ldr	r2, [pc, #64]	@ (8010400 <xTaskPriorityInherit+0xc8>)
 80103c0:	441a      	add	r2, r3
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	3304      	adds	r3, #4
 80103c6:	4619      	mov	r1, r3
 80103c8:	4610      	mov	r0, r2
 80103ca:	f7fe f958 	bl	800e67e <vListInsertEnd>
 80103ce:	e004      	b.n	80103da <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80103d0:	4b0a      	ldr	r3, [pc, #40]	@ (80103fc <xTaskPriorityInherit+0xc4>)
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103d6:	68bb      	ldr	r3, [r7, #8]
 80103d8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80103da:	2301      	movs	r3, #1
 80103dc:	60fb      	str	r3, [r7, #12]
 80103de:	e008      	b.n	80103f2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80103e4:	4b05      	ldr	r3, [pc, #20]	@ (80103fc <xTaskPriorityInherit+0xc4>)
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103ea:	429a      	cmp	r2, r3
 80103ec:	d201      	bcs.n	80103f2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80103ee:	2301      	movs	r3, #1
 80103f0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80103f2:	68fb      	ldr	r3, [r7, #12]
	}
 80103f4:	4618      	mov	r0, r3
 80103f6:	3710      	adds	r7, #16
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}
 80103fc:	240334e8 	.word	0x240334e8
 8010400:	240334ec 	.word	0x240334ec
 8010404:	240339c4 	.word	0x240339c4

08010408 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010408:	b580      	push	{r7, lr}
 801040a:	b086      	sub	sp, #24
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010414:	2300      	movs	r3, #0
 8010416:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d058      	beq.n	80104d0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801041e:	4b2f      	ldr	r3, [pc, #188]	@ (80104dc <xTaskPriorityDisinherit+0xd4>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	693a      	ldr	r2, [r7, #16]
 8010424:	429a      	cmp	r2, r3
 8010426:	d00b      	beq.n	8010440 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8010428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801042c:	f383 8811 	msr	BASEPRI, r3
 8010430:	f3bf 8f6f 	isb	sy
 8010434:	f3bf 8f4f 	dsb	sy
 8010438:	60fb      	str	r3, [r7, #12]
}
 801043a:	bf00      	nop
 801043c:	bf00      	nop
 801043e:	e7fd      	b.n	801043c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010444:	2b00      	cmp	r3, #0
 8010446:	d10b      	bne.n	8010460 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8010448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801044c:	f383 8811 	msr	BASEPRI, r3
 8010450:	f3bf 8f6f 	isb	sy
 8010454:	f3bf 8f4f 	dsb	sy
 8010458:	60bb      	str	r3, [r7, #8]
}
 801045a:	bf00      	nop
 801045c:	bf00      	nop
 801045e:	e7fd      	b.n	801045c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8010460:	693b      	ldr	r3, [r7, #16]
 8010462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010464:	1e5a      	subs	r2, r3, #1
 8010466:	693b      	ldr	r3, [r7, #16]
 8010468:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801046a:	693b      	ldr	r3, [r7, #16]
 801046c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801046e:	693b      	ldr	r3, [r7, #16]
 8010470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010472:	429a      	cmp	r2, r3
 8010474:	d02c      	beq.n	80104d0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010476:	693b      	ldr	r3, [r7, #16]
 8010478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801047a:	2b00      	cmp	r3, #0
 801047c:	d128      	bne.n	80104d0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801047e:	693b      	ldr	r3, [r7, #16]
 8010480:	3304      	adds	r3, #4
 8010482:	4618      	mov	r0, r3
 8010484:	f7fe f958 	bl	800e738 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010488:	693b      	ldr	r3, [r7, #16]
 801048a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010490:	693b      	ldr	r3, [r7, #16]
 8010492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010494:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010498:	693b      	ldr	r3, [r7, #16]
 801049a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801049c:	693b      	ldr	r3, [r7, #16]
 801049e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104a0:	4b0f      	ldr	r3, [pc, #60]	@ (80104e0 <xTaskPriorityDisinherit+0xd8>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d903      	bls.n	80104b0 <xTaskPriorityDisinherit+0xa8>
 80104a8:	693b      	ldr	r3, [r7, #16]
 80104aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104ac:	4a0c      	ldr	r2, [pc, #48]	@ (80104e0 <xTaskPriorityDisinherit+0xd8>)
 80104ae:	6013      	str	r3, [r2, #0]
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104b4:	4613      	mov	r3, r2
 80104b6:	009b      	lsls	r3, r3, #2
 80104b8:	4413      	add	r3, r2
 80104ba:	009b      	lsls	r3, r3, #2
 80104bc:	4a09      	ldr	r2, [pc, #36]	@ (80104e4 <xTaskPriorityDisinherit+0xdc>)
 80104be:	441a      	add	r2, r3
 80104c0:	693b      	ldr	r3, [r7, #16]
 80104c2:	3304      	adds	r3, #4
 80104c4:	4619      	mov	r1, r3
 80104c6:	4610      	mov	r0, r2
 80104c8:	f7fe f8d9 	bl	800e67e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80104cc:	2301      	movs	r3, #1
 80104ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80104d0:	697b      	ldr	r3, [r7, #20]
	}
 80104d2:	4618      	mov	r0, r3
 80104d4:	3718      	adds	r7, #24
 80104d6:	46bd      	mov	sp, r7
 80104d8:	bd80      	pop	{r7, pc}
 80104da:	bf00      	nop
 80104dc:	240334e8 	.word	0x240334e8
 80104e0:	240339c4 	.word	0x240339c4
 80104e4:	240334ec 	.word	0x240334ec

080104e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b088      	sub	sp, #32
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
 80104f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80104f6:	2301      	movs	r3, #1
 80104f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d06c      	beq.n	80105da <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010500:	69bb      	ldr	r3, [r7, #24]
 8010502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010504:	2b00      	cmp	r3, #0
 8010506:	d10b      	bne.n	8010520 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8010508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801050c:	f383 8811 	msr	BASEPRI, r3
 8010510:	f3bf 8f6f 	isb	sy
 8010514:	f3bf 8f4f 	dsb	sy
 8010518:	60fb      	str	r3, [r7, #12]
}
 801051a:	bf00      	nop
 801051c:	bf00      	nop
 801051e:	e7fd      	b.n	801051c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010520:	69bb      	ldr	r3, [r7, #24]
 8010522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010524:	683a      	ldr	r2, [r7, #0]
 8010526:	429a      	cmp	r2, r3
 8010528:	d902      	bls.n	8010530 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	61fb      	str	r3, [r7, #28]
 801052e:	e002      	b.n	8010536 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010530:	69bb      	ldr	r3, [r7, #24]
 8010532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010534:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010536:	69bb      	ldr	r3, [r7, #24]
 8010538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801053a:	69fa      	ldr	r2, [r7, #28]
 801053c:	429a      	cmp	r2, r3
 801053e:	d04c      	beq.n	80105da <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010540:	69bb      	ldr	r3, [r7, #24]
 8010542:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010544:	697a      	ldr	r2, [r7, #20]
 8010546:	429a      	cmp	r2, r3
 8010548:	d147      	bne.n	80105da <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801054a:	4b26      	ldr	r3, [pc, #152]	@ (80105e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	69ba      	ldr	r2, [r7, #24]
 8010550:	429a      	cmp	r2, r3
 8010552:	d10b      	bne.n	801056c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8010554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010558:	f383 8811 	msr	BASEPRI, r3
 801055c:	f3bf 8f6f 	isb	sy
 8010560:	f3bf 8f4f 	dsb	sy
 8010564:	60bb      	str	r3, [r7, #8]
}
 8010566:	bf00      	nop
 8010568:	bf00      	nop
 801056a:	e7fd      	b.n	8010568 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801056c:	69bb      	ldr	r3, [r7, #24]
 801056e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010570:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010572:	69bb      	ldr	r3, [r7, #24]
 8010574:	69fa      	ldr	r2, [r7, #28]
 8010576:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010578:	69bb      	ldr	r3, [r7, #24]
 801057a:	699b      	ldr	r3, [r3, #24]
 801057c:	2b00      	cmp	r3, #0
 801057e:	db04      	blt.n	801058a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010580:	69fb      	ldr	r3, [r7, #28]
 8010582:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010586:	69bb      	ldr	r3, [r7, #24]
 8010588:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801058a:	69bb      	ldr	r3, [r7, #24]
 801058c:	6959      	ldr	r1, [r3, #20]
 801058e:	693a      	ldr	r2, [r7, #16]
 8010590:	4613      	mov	r3, r2
 8010592:	009b      	lsls	r3, r3, #2
 8010594:	4413      	add	r3, r2
 8010596:	009b      	lsls	r3, r3, #2
 8010598:	4a13      	ldr	r2, [pc, #76]	@ (80105e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801059a:	4413      	add	r3, r2
 801059c:	4299      	cmp	r1, r3
 801059e:	d11c      	bne.n	80105da <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80105a0:	69bb      	ldr	r3, [r7, #24]
 80105a2:	3304      	adds	r3, #4
 80105a4:	4618      	mov	r0, r3
 80105a6:	f7fe f8c7 	bl	800e738 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80105aa:	69bb      	ldr	r3, [r7, #24]
 80105ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105ae:	4b0f      	ldr	r3, [pc, #60]	@ (80105ec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	429a      	cmp	r2, r3
 80105b4:	d903      	bls.n	80105be <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80105b6:	69bb      	ldr	r3, [r7, #24]
 80105b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105ba:	4a0c      	ldr	r2, [pc, #48]	@ (80105ec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80105bc:	6013      	str	r3, [r2, #0]
 80105be:	69bb      	ldr	r3, [r7, #24]
 80105c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105c2:	4613      	mov	r3, r2
 80105c4:	009b      	lsls	r3, r3, #2
 80105c6:	4413      	add	r3, r2
 80105c8:	009b      	lsls	r3, r3, #2
 80105ca:	4a07      	ldr	r2, [pc, #28]	@ (80105e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80105cc:	441a      	add	r2, r3
 80105ce:	69bb      	ldr	r3, [r7, #24]
 80105d0:	3304      	adds	r3, #4
 80105d2:	4619      	mov	r1, r3
 80105d4:	4610      	mov	r0, r2
 80105d6:	f7fe f852 	bl	800e67e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80105da:	bf00      	nop
 80105dc:	3720      	adds	r7, #32
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}
 80105e2:	bf00      	nop
 80105e4:	240334e8 	.word	0x240334e8
 80105e8:	240334ec 	.word	0x240334ec
 80105ec:	240339c4 	.word	0x240339c4

080105f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80105f0:	b480      	push	{r7}
 80105f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80105f4:	4b07      	ldr	r3, [pc, #28]	@ (8010614 <pvTaskIncrementMutexHeldCount+0x24>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d004      	beq.n	8010606 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80105fc:	4b05      	ldr	r3, [pc, #20]	@ (8010614 <pvTaskIncrementMutexHeldCount+0x24>)
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010602:	3201      	adds	r2, #1
 8010604:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8010606:	4b03      	ldr	r3, [pc, #12]	@ (8010614 <pvTaskIncrementMutexHeldCount+0x24>)
 8010608:	681b      	ldr	r3, [r3, #0]
	}
 801060a:	4618      	mov	r0, r3
 801060c:	46bd      	mov	sp, r7
 801060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010612:	4770      	bx	lr
 8010614:	240334e8 	.word	0x240334e8

08010618 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8010618:	b580      	push	{r7, lr}
 801061a:	b086      	sub	sp, #24
 801061c:	af00      	add	r7, sp, #0
 801061e:	60f8      	str	r0, [r7, #12]
 8010620:	60b9      	str	r1, [r7, #8]
 8010622:	607a      	str	r2, [r7, #4]
 8010624:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8010626:	f000 fedf 	bl	80113e8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801062a:	4b29      	ldr	r3, [pc, #164]	@ (80106d0 <xTaskNotifyWait+0xb8>)
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8010632:	b2db      	uxtb	r3, r3
 8010634:	2b02      	cmp	r3, #2
 8010636:	d01c      	beq.n	8010672 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8010638:	4b25      	ldr	r3, [pc, #148]	@ (80106d0 <xTaskNotifyWait+0xb8>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8010640:	68fa      	ldr	r2, [r7, #12]
 8010642:	43d2      	mvns	r2, r2
 8010644:	400a      	ands	r2, r1
 8010646:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801064a:	4b21      	ldr	r3, [pc, #132]	@ (80106d0 <xTaskNotifyWait+0xb8>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	2201      	movs	r2, #1
 8010650:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d00b      	beq.n	8010672 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801065a:	2101      	movs	r1, #1
 801065c:	6838      	ldr	r0, [r7, #0]
 801065e:	f000 f9e3 	bl	8010a28 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010662:	4b1c      	ldr	r3, [pc, #112]	@ (80106d4 <xTaskNotifyWait+0xbc>)
 8010664:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010668:	601a      	str	r2, [r3, #0]
 801066a:	f3bf 8f4f 	dsb	sy
 801066e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010672:	f000 feeb 	bl	801144c <vPortExitCritical>

		taskENTER_CRITICAL();
 8010676:	f000 feb7 	bl	80113e8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d005      	beq.n	801068c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8010680:	4b13      	ldr	r3, [pc, #76]	@ (80106d0 <xTaskNotifyWait+0xb8>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801068c:	4b10      	ldr	r3, [pc, #64]	@ (80106d0 <xTaskNotifyWait+0xb8>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8010694:	b2db      	uxtb	r3, r3
 8010696:	2b02      	cmp	r3, #2
 8010698:	d002      	beq.n	80106a0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801069a:	2300      	movs	r3, #0
 801069c:	617b      	str	r3, [r7, #20]
 801069e:	e00a      	b.n	80106b6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80106a0:	4b0b      	ldr	r3, [pc, #44]	@ (80106d0 <xTaskNotifyWait+0xb8>)
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 80106a8:	68ba      	ldr	r2, [r7, #8]
 80106aa:	43d2      	mvns	r2, r2
 80106ac:	400a      	ands	r2, r1
 80106ae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 80106b2:	2301      	movs	r3, #1
 80106b4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80106b6:	4b06      	ldr	r3, [pc, #24]	@ (80106d0 <xTaskNotifyWait+0xb8>)
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	2200      	movs	r2, #0
 80106bc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 80106c0:	f000 fec4 	bl	801144c <vPortExitCritical>

		return xReturn;
 80106c4:	697b      	ldr	r3, [r7, #20]
	}
 80106c6:	4618      	mov	r0, r3
 80106c8:	3718      	adds	r7, #24
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bd80      	pop	{r7, pc}
 80106ce:	bf00      	nop
 80106d0:	240334e8 	.word	0x240334e8
 80106d4:	e000ed04 	.word	0xe000ed04

080106d8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b08a      	sub	sp, #40	@ 0x28
 80106dc:	af00      	add	r7, sp, #0
 80106de:	60f8      	str	r0, [r7, #12]
 80106e0:	60b9      	str	r1, [r7, #8]
 80106e2:	603b      	str	r3, [r7, #0]
 80106e4:	4613      	mov	r3, r2
 80106e6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80106e8:	2301      	movs	r3, #1
 80106ea:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d10b      	bne.n	801070a <xTaskGenericNotify+0x32>
	__asm volatile
 80106f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106f6:	f383 8811 	msr	BASEPRI, r3
 80106fa:	f3bf 8f6f 	isb	sy
 80106fe:	f3bf 8f4f 	dsb	sy
 8010702:	61bb      	str	r3, [r7, #24]
}
 8010704:	bf00      	nop
 8010706:	bf00      	nop
 8010708:	e7fd      	b.n	8010706 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801070e:	f000 fe6b 	bl	80113e8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8010712:	683b      	ldr	r3, [r7, #0]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d004      	beq.n	8010722 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010718:	6a3b      	ldr	r3, [r7, #32]
 801071a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010722:	6a3b      	ldr	r3, [r7, #32]
 8010724:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8010728:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801072a:	6a3b      	ldr	r3, [r7, #32]
 801072c:	2202      	movs	r2, #2
 801072e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8010732:	79fb      	ldrb	r3, [r7, #7]
 8010734:	2b04      	cmp	r3, #4
 8010736:	d82e      	bhi.n	8010796 <xTaskGenericNotify+0xbe>
 8010738:	a201      	add	r2, pc, #4	@ (adr r2, 8010740 <xTaskGenericNotify+0x68>)
 801073a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801073e:	bf00      	nop
 8010740:	080107bb 	.word	0x080107bb
 8010744:	08010755 	.word	0x08010755
 8010748:	08010767 	.word	0x08010767
 801074c:	08010777 	.word	0x08010777
 8010750:	08010781 	.word	0x08010781
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010754:	6a3b      	ldr	r3, [r7, #32]
 8010756:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801075a:	68bb      	ldr	r3, [r7, #8]
 801075c:	431a      	orrs	r2, r3
 801075e:	6a3b      	ldr	r3, [r7, #32]
 8010760:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8010764:	e02c      	b.n	80107c0 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010766:	6a3b      	ldr	r3, [r7, #32]
 8010768:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801076c:	1c5a      	adds	r2, r3, #1
 801076e:	6a3b      	ldr	r3, [r7, #32]
 8010770:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8010774:	e024      	b.n	80107c0 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010776:	6a3b      	ldr	r3, [r7, #32]
 8010778:	68ba      	ldr	r2, [r7, #8]
 801077a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801077e:	e01f      	b.n	80107c0 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010780:	7ffb      	ldrb	r3, [r7, #31]
 8010782:	2b02      	cmp	r3, #2
 8010784:	d004      	beq.n	8010790 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010786:	6a3b      	ldr	r3, [r7, #32]
 8010788:	68ba      	ldr	r2, [r7, #8]
 801078a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801078e:	e017      	b.n	80107c0 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8010790:	2300      	movs	r3, #0
 8010792:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8010794:	e014      	b.n	80107c0 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010796:	6a3b      	ldr	r3, [r7, #32]
 8010798:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801079c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80107a0:	d00d      	beq.n	80107be <xTaskGenericNotify+0xe6>
	__asm volatile
 80107a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107a6:	f383 8811 	msr	BASEPRI, r3
 80107aa:	f3bf 8f6f 	isb	sy
 80107ae:	f3bf 8f4f 	dsb	sy
 80107b2:	617b      	str	r3, [r7, #20]
}
 80107b4:	bf00      	nop
 80107b6:	bf00      	nop
 80107b8:	e7fd      	b.n	80107b6 <xTaskGenericNotify+0xde>
					break;
 80107ba:	bf00      	nop
 80107bc:	e000      	b.n	80107c0 <xTaskGenericNotify+0xe8>

					break;
 80107be:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80107c0:	7ffb      	ldrb	r3, [r7, #31]
 80107c2:	2b01      	cmp	r3, #1
 80107c4:	d13b      	bne.n	801083e <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80107c6:	6a3b      	ldr	r3, [r7, #32]
 80107c8:	3304      	adds	r3, #4
 80107ca:	4618      	mov	r0, r3
 80107cc:	f7fd ffb4 	bl	800e738 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80107d0:	6a3b      	ldr	r3, [r7, #32]
 80107d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107d4:	4b1d      	ldr	r3, [pc, #116]	@ (801084c <xTaskGenericNotify+0x174>)
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	429a      	cmp	r2, r3
 80107da:	d903      	bls.n	80107e4 <xTaskGenericNotify+0x10c>
 80107dc:	6a3b      	ldr	r3, [r7, #32]
 80107de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107e0:	4a1a      	ldr	r2, [pc, #104]	@ (801084c <xTaskGenericNotify+0x174>)
 80107e2:	6013      	str	r3, [r2, #0]
 80107e4:	6a3b      	ldr	r3, [r7, #32]
 80107e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107e8:	4613      	mov	r3, r2
 80107ea:	009b      	lsls	r3, r3, #2
 80107ec:	4413      	add	r3, r2
 80107ee:	009b      	lsls	r3, r3, #2
 80107f0:	4a17      	ldr	r2, [pc, #92]	@ (8010850 <xTaskGenericNotify+0x178>)
 80107f2:	441a      	add	r2, r3
 80107f4:	6a3b      	ldr	r3, [r7, #32]
 80107f6:	3304      	adds	r3, #4
 80107f8:	4619      	mov	r1, r3
 80107fa:	4610      	mov	r0, r2
 80107fc:	f7fd ff3f 	bl	800e67e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010800:	6a3b      	ldr	r3, [r7, #32]
 8010802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010804:	2b00      	cmp	r3, #0
 8010806:	d00b      	beq.n	8010820 <xTaskGenericNotify+0x148>
	__asm volatile
 8010808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801080c:	f383 8811 	msr	BASEPRI, r3
 8010810:	f3bf 8f6f 	isb	sy
 8010814:	f3bf 8f4f 	dsb	sy
 8010818:	613b      	str	r3, [r7, #16]
}
 801081a:	bf00      	nop
 801081c:	bf00      	nop
 801081e:	e7fd      	b.n	801081c <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010820:	6a3b      	ldr	r3, [r7, #32]
 8010822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010824:	4b0b      	ldr	r3, [pc, #44]	@ (8010854 <xTaskGenericNotify+0x17c>)
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801082a:	429a      	cmp	r2, r3
 801082c:	d907      	bls.n	801083e <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801082e:	4b0a      	ldr	r3, [pc, #40]	@ (8010858 <xTaskGenericNotify+0x180>)
 8010830:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010834:	601a      	str	r2, [r3, #0]
 8010836:	f3bf 8f4f 	dsb	sy
 801083a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801083e:	f000 fe05 	bl	801144c <vPortExitCritical>

		return xReturn;
 8010842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8010844:	4618      	mov	r0, r3
 8010846:	3728      	adds	r7, #40	@ 0x28
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}
 801084c:	240339c4 	.word	0x240339c4
 8010850:	240334ec 	.word	0x240334ec
 8010854:	240334e8 	.word	0x240334e8
 8010858:	e000ed04 	.word	0xe000ed04

0801085c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801085c:	b580      	push	{r7, lr}
 801085e:	b08e      	sub	sp, #56	@ 0x38
 8010860:	af00      	add	r7, sp, #0
 8010862:	60f8      	str	r0, [r7, #12]
 8010864:	60b9      	str	r1, [r7, #8]
 8010866:	603b      	str	r3, [r7, #0]
 8010868:	4613      	mov	r3, r2
 801086a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 801086c:	2301      	movs	r3, #1
 801086e:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d10b      	bne.n	801088e <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8010876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801087a:	f383 8811 	msr	BASEPRI, r3
 801087e:	f3bf 8f6f 	isb	sy
 8010882:	f3bf 8f4f 	dsb	sy
 8010886:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010888:	bf00      	nop
 801088a:	bf00      	nop
 801088c:	e7fd      	b.n	801088a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801088e:	f000 fe8b 	bl	80115a8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8010896:	f3ef 8211 	mrs	r2, BASEPRI
 801089a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801089e:	f383 8811 	msr	BASEPRI, r3
 80108a2:	f3bf 8f6f 	isb	sy
 80108a6:	f3bf 8f4f 	dsb	sy
 80108aa:	623a      	str	r2, [r7, #32]
 80108ac:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80108ae:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80108b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d004      	beq.n	80108c2 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80108b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108ba:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80108c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108c4:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80108c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80108cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108ce:	2202      	movs	r2, #2
 80108d0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80108d4:	79fb      	ldrb	r3, [r7, #7]
 80108d6:	2b04      	cmp	r3, #4
 80108d8:	d82e      	bhi.n	8010938 <xTaskGenericNotifyFromISR+0xdc>
 80108da:	a201      	add	r2, pc, #4	@ (adr r2, 80108e0 <xTaskGenericNotifyFromISR+0x84>)
 80108dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108e0:	0801095d 	.word	0x0801095d
 80108e4:	080108f5 	.word	0x080108f5
 80108e8:	08010907 	.word	0x08010907
 80108ec:	08010917 	.word	0x08010917
 80108f0:	08010921 	.word	0x08010921
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80108f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108f6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80108fa:	68bb      	ldr	r3, [r7, #8]
 80108fc:	431a      	orrs	r2, r3
 80108fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010900:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8010904:	e02d      	b.n	8010962 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010908:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801090c:	1c5a      	adds	r2, r3, #1
 801090e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010910:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8010914:	e025      	b.n	8010962 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010918:	68ba      	ldr	r2, [r7, #8]
 801091a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801091e:	e020      	b.n	8010962 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010920:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010924:	2b02      	cmp	r3, #2
 8010926:	d004      	beq.n	8010932 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801092a:	68ba      	ldr	r2, [r7, #8]
 801092c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010930:	e017      	b.n	8010962 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8010932:	2300      	movs	r3, #0
 8010934:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8010936:	e014      	b.n	8010962 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801093a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801093e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010942:	d00d      	beq.n	8010960 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8010944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010948:	f383 8811 	msr	BASEPRI, r3
 801094c:	f3bf 8f6f 	isb	sy
 8010950:	f3bf 8f4f 	dsb	sy
 8010954:	61bb      	str	r3, [r7, #24]
}
 8010956:	bf00      	nop
 8010958:	bf00      	nop
 801095a:	e7fd      	b.n	8010958 <xTaskGenericNotifyFromISR+0xfc>
					break;
 801095c:	bf00      	nop
 801095e:	e000      	b.n	8010962 <xTaskGenericNotifyFromISR+0x106>
					break;
 8010960:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010962:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010966:	2b01      	cmp	r3, #1
 8010968:	d147      	bne.n	80109fa <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801096a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801096c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801096e:	2b00      	cmp	r3, #0
 8010970:	d00b      	beq.n	801098a <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8010972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010976:	f383 8811 	msr	BASEPRI, r3
 801097a:	f3bf 8f6f 	isb	sy
 801097e:	f3bf 8f4f 	dsb	sy
 8010982:	617b      	str	r3, [r7, #20]
}
 8010984:	bf00      	nop
 8010986:	bf00      	nop
 8010988:	e7fd      	b.n	8010986 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801098a:	4b21      	ldr	r3, [pc, #132]	@ (8010a10 <xTaskGenericNotifyFromISR+0x1b4>)
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d11d      	bne.n	80109ce <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010994:	3304      	adds	r3, #4
 8010996:	4618      	mov	r0, r3
 8010998:	f7fd fece 	bl	800e738 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801099c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801099e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109a0:	4b1c      	ldr	r3, [pc, #112]	@ (8010a14 <xTaskGenericNotifyFromISR+0x1b8>)
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d903      	bls.n	80109b0 <xTaskGenericNotifyFromISR+0x154>
 80109a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109ac:	4a19      	ldr	r2, [pc, #100]	@ (8010a14 <xTaskGenericNotifyFromISR+0x1b8>)
 80109ae:	6013      	str	r3, [r2, #0]
 80109b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109b4:	4613      	mov	r3, r2
 80109b6:	009b      	lsls	r3, r3, #2
 80109b8:	4413      	add	r3, r2
 80109ba:	009b      	lsls	r3, r3, #2
 80109bc:	4a16      	ldr	r2, [pc, #88]	@ (8010a18 <xTaskGenericNotifyFromISR+0x1bc>)
 80109be:	441a      	add	r2, r3
 80109c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109c2:	3304      	adds	r3, #4
 80109c4:	4619      	mov	r1, r3
 80109c6:	4610      	mov	r0, r2
 80109c8:	f7fd fe59 	bl	800e67e <vListInsertEnd>
 80109cc:	e005      	b.n	80109da <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80109ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109d0:	3318      	adds	r3, #24
 80109d2:	4619      	mov	r1, r3
 80109d4:	4811      	ldr	r0, [pc, #68]	@ (8010a1c <xTaskGenericNotifyFromISR+0x1c0>)
 80109d6:	f7fd fe52 	bl	800e67e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80109da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109de:	4b10      	ldr	r3, [pc, #64]	@ (8010a20 <xTaskGenericNotifyFromISR+0x1c4>)
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109e4:	429a      	cmp	r2, r3
 80109e6:	d908      	bls.n	80109fa <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80109e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d002      	beq.n	80109f4 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80109ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109f0:	2201      	movs	r2, #1
 80109f2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80109f4:	4b0b      	ldr	r3, [pc, #44]	@ (8010a24 <xTaskGenericNotifyFromISR+0x1c8>)
 80109f6:	2201      	movs	r2, #1
 80109f8:	601a      	str	r2, [r3, #0]
 80109fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80109fe:	693b      	ldr	r3, [r7, #16]
 8010a00:	f383 8811 	msr	BASEPRI, r3
}
 8010a04:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8010a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	3738      	adds	r7, #56	@ 0x38
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}
 8010a10:	240339e4 	.word	0x240339e4
 8010a14:	240339c4 	.word	0x240339c4
 8010a18:	240334ec 	.word	0x240334ec
 8010a1c:	2403397c 	.word	0x2403397c
 8010a20:	240334e8 	.word	0x240334e8
 8010a24:	240339d0 	.word	0x240339d0

08010a28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b084      	sub	sp, #16
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
 8010a30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010a32:	4b21      	ldr	r3, [pc, #132]	@ (8010ab8 <prvAddCurrentTaskToDelayedList+0x90>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a38:	4b20      	ldr	r3, [pc, #128]	@ (8010abc <prvAddCurrentTaskToDelayedList+0x94>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	3304      	adds	r3, #4
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f7fd fe7a 	bl	800e738 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010a4a:	d10a      	bne.n	8010a62 <prvAddCurrentTaskToDelayedList+0x3a>
 8010a4c:	683b      	ldr	r3, [r7, #0]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d007      	beq.n	8010a62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a52:	4b1a      	ldr	r3, [pc, #104]	@ (8010abc <prvAddCurrentTaskToDelayedList+0x94>)
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	3304      	adds	r3, #4
 8010a58:	4619      	mov	r1, r3
 8010a5a:	4819      	ldr	r0, [pc, #100]	@ (8010ac0 <prvAddCurrentTaskToDelayedList+0x98>)
 8010a5c:	f7fd fe0f 	bl	800e67e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010a60:	e026      	b.n	8010ab0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010a62:	68fa      	ldr	r2, [r7, #12]
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	4413      	add	r3, r2
 8010a68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010a6a:	4b14      	ldr	r3, [pc, #80]	@ (8010abc <prvAddCurrentTaskToDelayedList+0x94>)
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	68ba      	ldr	r2, [r7, #8]
 8010a70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010a72:	68ba      	ldr	r2, [r7, #8]
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	429a      	cmp	r2, r3
 8010a78:	d209      	bcs.n	8010a8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a7a:	4b12      	ldr	r3, [pc, #72]	@ (8010ac4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010a7c:	681a      	ldr	r2, [r3, #0]
 8010a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8010abc <prvAddCurrentTaskToDelayedList+0x94>)
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	3304      	adds	r3, #4
 8010a84:	4619      	mov	r1, r3
 8010a86:	4610      	mov	r0, r2
 8010a88:	f7fd fe1d 	bl	800e6c6 <vListInsert>
}
 8010a8c:	e010      	b.n	8010ab0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8010ac8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010a90:	681a      	ldr	r2, [r3, #0]
 8010a92:	4b0a      	ldr	r3, [pc, #40]	@ (8010abc <prvAddCurrentTaskToDelayedList+0x94>)
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	3304      	adds	r3, #4
 8010a98:	4619      	mov	r1, r3
 8010a9a:	4610      	mov	r0, r2
 8010a9c:	f7fd fe13 	bl	800e6c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8010acc <prvAddCurrentTaskToDelayedList+0xa4>)
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	68ba      	ldr	r2, [r7, #8]
 8010aa6:	429a      	cmp	r2, r3
 8010aa8:	d202      	bcs.n	8010ab0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010aaa:	4a08      	ldr	r2, [pc, #32]	@ (8010acc <prvAddCurrentTaskToDelayedList+0xa4>)
 8010aac:	68bb      	ldr	r3, [r7, #8]
 8010aae:	6013      	str	r3, [r2, #0]
}
 8010ab0:	bf00      	nop
 8010ab2:	3710      	adds	r7, #16
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}
 8010ab8:	240339c0 	.word	0x240339c0
 8010abc:	240334e8 	.word	0x240334e8
 8010ac0:	240339a8 	.word	0x240339a8
 8010ac4:	24033978 	.word	0x24033978
 8010ac8:	24033974 	.word	0x24033974
 8010acc:	240339dc 	.word	0x240339dc

08010ad0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b08a      	sub	sp, #40	@ 0x28
 8010ad4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010ada:	f000 fb13 	bl	8011104 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010ade:	4b1d      	ldr	r3, [pc, #116]	@ (8010b54 <xTimerCreateTimerTask+0x84>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d021      	beq.n	8010b2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010aea:	2300      	movs	r3, #0
 8010aec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010aee:	1d3a      	adds	r2, r7, #4
 8010af0:	f107 0108 	add.w	r1, r7, #8
 8010af4:	f107 030c 	add.w	r3, r7, #12
 8010af8:	4618      	mov	r0, r3
 8010afa:	f7fd fd79 	bl	800e5f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010afe:	6879      	ldr	r1, [r7, #4]
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	68fa      	ldr	r2, [r7, #12]
 8010b04:	9202      	str	r2, [sp, #8]
 8010b06:	9301      	str	r3, [sp, #4]
 8010b08:	2302      	movs	r3, #2
 8010b0a:	9300      	str	r3, [sp, #0]
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	460a      	mov	r2, r1
 8010b10:	4911      	ldr	r1, [pc, #68]	@ (8010b58 <xTimerCreateTimerTask+0x88>)
 8010b12:	4812      	ldr	r0, [pc, #72]	@ (8010b5c <xTimerCreateTimerTask+0x8c>)
 8010b14:	f7fe fd50 	bl	800f5b8 <xTaskCreateStatic>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	4a11      	ldr	r2, [pc, #68]	@ (8010b60 <xTimerCreateTimerTask+0x90>)
 8010b1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010b1e:	4b10      	ldr	r3, [pc, #64]	@ (8010b60 <xTimerCreateTimerTask+0x90>)
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d001      	beq.n	8010b2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010b26:	2301      	movs	r3, #1
 8010b28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010b2a:	697b      	ldr	r3, [r7, #20]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d10b      	bne.n	8010b48 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8010b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b34:	f383 8811 	msr	BASEPRI, r3
 8010b38:	f3bf 8f6f 	isb	sy
 8010b3c:	f3bf 8f4f 	dsb	sy
 8010b40:	613b      	str	r3, [r7, #16]
}
 8010b42:	bf00      	nop
 8010b44:	bf00      	nop
 8010b46:	e7fd      	b.n	8010b44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010b48:	697b      	ldr	r3, [r7, #20]
}
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	3718      	adds	r7, #24
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	bd80      	pop	{r7, pc}
 8010b52:	bf00      	nop
 8010b54:	24033a18 	.word	0x24033a18
 8010b58:	08023410 	.word	0x08023410
 8010b5c:	08010c9d 	.word	0x08010c9d
 8010b60:	24033a1c 	.word	0x24033a1c

08010b64 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b08a      	sub	sp, #40	@ 0x28
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	60f8      	str	r0, [r7, #12]
 8010b6c:	60b9      	str	r1, [r7, #8]
 8010b6e:	607a      	str	r2, [r7, #4]
 8010b70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010b72:	2300      	movs	r3, #0
 8010b74:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d10b      	bne.n	8010b94 <xTimerGenericCommand+0x30>
	__asm volatile
 8010b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b80:	f383 8811 	msr	BASEPRI, r3
 8010b84:	f3bf 8f6f 	isb	sy
 8010b88:	f3bf 8f4f 	dsb	sy
 8010b8c:	623b      	str	r3, [r7, #32]
}
 8010b8e:	bf00      	nop
 8010b90:	bf00      	nop
 8010b92:	e7fd      	b.n	8010b90 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010b94:	4b19      	ldr	r3, [pc, #100]	@ (8010bfc <xTimerGenericCommand+0x98>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d02a      	beq.n	8010bf2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010b9c:	68bb      	ldr	r3, [r7, #8]
 8010b9e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010ba8:	68bb      	ldr	r3, [r7, #8]
 8010baa:	2b05      	cmp	r3, #5
 8010bac:	dc18      	bgt.n	8010be0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010bae:	f7ff fba5 	bl	80102fc <xTaskGetSchedulerState>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	2b02      	cmp	r3, #2
 8010bb6:	d109      	bne.n	8010bcc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010bb8:	4b10      	ldr	r3, [pc, #64]	@ (8010bfc <xTimerGenericCommand+0x98>)
 8010bba:	6818      	ldr	r0, [r3, #0]
 8010bbc:	f107 0110 	add.w	r1, r7, #16
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010bc4:	f7fd ffe0 	bl	800eb88 <xQueueGenericSend>
 8010bc8:	6278      	str	r0, [r7, #36]	@ 0x24
 8010bca:	e012      	b.n	8010bf2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8010bfc <xTimerGenericCommand+0x98>)
 8010bce:	6818      	ldr	r0, [r3, #0]
 8010bd0:	f107 0110 	add.w	r1, r7, #16
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	f7fd ffd6 	bl	800eb88 <xQueueGenericSend>
 8010bdc:	6278      	str	r0, [r7, #36]	@ 0x24
 8010bde:	e008      	b.n	8010bf2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010be0:	4b06      	ldr	r3, [pc, #24]	@ (8010bfc <xTimerGenericCommand+0x98>)
 8010be2:	6818      	ldr	r0, [r3, #0]
 8010be4:	f107 0110 	add.w	r1, r7, #16
 8010be8:	2300      	movs	r3, #0
 8010bea:	683a      	ldr	r2, [r7, #0]
 8010bec:	f7fe f8ce 	bl	800ed8c <xQueueGenericSendFromISR>
 8010bf0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3728      	adds	r7, #40	@ 0x28
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}
 8010bfc:	24033a18 	.word	0x24033a18

08010c00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b088      	sub	sp, #32
 8010c04:	af02      	add	r7, sp, #8
 8010c06:	6078      	str	r0, [r7, #4]
 8010c08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c0a:	4b23      	ldr	r3, [pc, #140]	@ (8010c98 <prvProcessExpiredTimer+0x98>)
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	68db      	ldr	r3, [r3, #12]
 8010c10:	68db      	ldr	r3, [r3, #12]
 8010c12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010c14:	697b      	ldr	r3, [r7, #20]
 8010c16:	3304      	adds	r3, #4
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f7fd fd8d 	bl	800e738 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010c1e:	697b      	ldr	r3, [r7, #20]
 8010c20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010c24:	f003 0304 	and.w	r3, r3, #4
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d023      	beq.n	8010c74 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	699a      	ldr	r2, [r3, #24]
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	18d1      	adds	r1, r2, r3
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	683a      	ldr	r2, [r7, #0]
 8010c38:	6978      	ldr	r0, [r7, #20]
 8010c3a:	f000 f8d5 	bl	8010de8 <prvInsertTimerInActiveList>
 8010c3e:	4603      	mov	r3, r0
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d020      	beq.n	8010c86 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010c44:	2300      	movs	r3, #0
 8010c46:	9300      	str	r3, [sp, #0]
 8010c48:	2300      	movs	r3, #0
 8010c4a:	687a      	ldr	r2, [r7, #4]
 8010c4c:	2100      	movs	r1, #0
 8010c4e:	6978      	ldr	r0, [r7, #20]
 8010c50:	f7ff ff88 	bl	8010b64 <xTimerGenericCommand>
 8010c54:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010c56:	693b      	ldr	r3, [r7, #16]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d114      	bne.n	8010c86 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8010c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c60:	f383 8811 	msr	BASEPRI, r3
 8010c64:	f3bf 8f6f 	isb	sy
 8010c68:	f3bf 8f4f 	dsb	sy
 8010c6c:	60fb      	str	r3, [r7, #12]
}
 8010c6e:	bf00      	nop
 8010c70:	bf00      	nop
 8010c72:	e7fd      	b.n	8010c70 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010c74:	697b      	ldr	r3, [r7, #20]
 8010c76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010c7a:	f023 0301 	bic.w	r3, r3, #1
 8010c7e:	b2da      	uxtb	r2, r3
 8010c80:	697b      	ldr	r3, [r7, #20]
 8010c82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	6a1b      	ldr	r3, [r3, #32]
 8010c8a:	6978      	ldr	r0, [r7, #20]
 8010c8c:	4798      	blx	r3
}
 8010c8e:	bf00      	nop
 8010c90:	3718      	adds	r7, #24
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}
 8010c96:	bf00      	nop
 8010c98:	24033a10 	.word	0x24033a10

08010c9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b084      	sub	sp, #16
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010ca4:	f107 0308 	add.w	r3, r7, #8
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f000 f859 	bl	8010d60 <prvGetNextExpireTime>
 8010cae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010cb0:	68bb      	ldr	r3, [r7, #8]
 8010cb2:	4619      	mov	r1, r3
 8010cb4:	68f8      	ldr	r0, [r7, #12]
 8010cb6:	f000 f805 	bl	8010cc4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010cba:	f000 f8d7 	bl	8010e6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010cbe:	bf00      	nop
 8010cc0:	e7f0      	b.n	8010ca4 <prvTimerTask+0x8>
	...

08010cc4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b084      	sub	sp, #16
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
 8010ccc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010cce:	f7fe fed7 	bl	800fa80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010cd2:	f107 0308 	add.w	r3, r7, #8
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f000 f866 	bl	8010da8 <prvSampleTimeNow>
 8010cdc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010cde:	68bb      	ldr	r3, [r7, #8]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d130      	bne.n	8010d46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010ce4:	683b      	ldr	r3, [r7, #0]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d10a      	bne.n	8010d00 <prvProcessTimerOrBlockTask+0x3c>
 8010cea:	687a      	ldr	r2, [r7, #4]
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	d806      	bhi.n	8010d00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010cf2:	f7fe fed3 	bl	800fa9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010cf6:	68f9      	ldr	r1, [r7, #12]
 8010cf8:	6878      	ldr	r0, [r7, #4]
 8010cfa:	f7ff ff81 	bl	8010c00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010cfe:	e024      	b.n	8010d4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010d00:	683b      	ldr	r3, [r7, #0]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d008      	beq.n	8010d18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010d06:	4b13      	ldr	r3, [pc, #76]	@ (8010d54 <prvProcessTimerOrBlockTask+0x90>)
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d101      	bne.n	8010d14 <prvProcessTimerOrBlockTask+0x50>
 8010d10:	2301      	movs	r3, #1
 8010d12:	e000      	b.n	8010d16 <prvProcessTimerOrBlockTask+0x52>
 8010d14:	2300      	movs	r3, #0
 8010d16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010d18:	4b0f      	ldr	r3, [pc, #60]	@ (8010d58 <prvProcessTimerOrBlockTask+0x94>)
 8010d1a:	6818      	ldr	r0, [r3, #0]
 8010d1c:	687a      	ldr	r2, [r7, #4]
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	1ad3      	subs	r3, r2, r3
 8010d22:	683a      	ldr	r2, [r7, #0]
 8010d24:	4619      	mov	r1, r3
 8010d26:	f7fe fc13 	bl	800f550 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010d2a:	f7fe feb7 	bl	800fa9c <xTaskResumeAll>
 8010d2e:	4603      	mov	r3, r0
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d10a      	bne.n	8010d4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010d34:	4b09      	ldr	r3, [pc, #36]	@ (8010d5c <prvProcessTimerOrBlockTask+0x98>)
 8010d36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010d3a:	601a      	str	r2, [r3, #0]
 8010d3c:	f3bf 8f4f 	dsb	sy
 8010d40:	f3bf 8f6f 	isb	sy
}
 8010d44:	e001      	b.n	8010d4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010d46:	f7fe fea9 	bl	800fa9c <xTaskResumeAll>
}
 8010d4a:	bf00      	nop
 8010d4c:	3710      	adds	r7, #16
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bd80      	pop	{r7, pc}
 8010d52:	bf00      	nop
 8010d54:	24033a14 	.word	0x24033a14
 8010d58:	24033a18 	.word	0x24033a18
 8010d5c:	e000ed04 	.word	0xe000ed04

08010d60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010d60:	b480      	push	{r7}
 8010d62:	b085      	sub	sp, #20
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010d68:	4b0e      	ldr	r3, [pc, #56]	@ (8010da4 <prvGetNextExpireTime+0x44>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d101      	bne.n	8010d76 <prvGetNextExpireTime+0x16>
 8010d72:	2201      	movs	r2, #1
 8010d74:	e000      	b.n	8010d78 <prvGetNextExpireTime+0x18>
 8010d76:	2200      	movs	r2, #0
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d105      	bne.n	8010d90 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010d84:	4b07      	ldr	r3, [pc, #28]	@ (8010da4 <prvGetNextExpireTime+0x44>)
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	68db      	ldr	r3, [r3, #12]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	60fb      	str	r3, [r7, #12]
 8010d8e:	e001      	b.n	8010d94 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010d90:	2300      	movs	r3, #0
 8010d92:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010d94:	68fb      	ldr	r3, [r7, #12]
}
 8010d96:	4618      	mov	r0, r3
 8010d98:	3714      	adds	r7, #20
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da0:	4770      	bx	lr
 8010da2:	bf00      	nop
 8010da4:	24033a10 	.word	0x24033a10

08010da8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b084      	sub	sp, #16
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010db0:	f7fe ff12 	bl	800fbd8 <xTaskGetTickCount>
 8010db4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010db6:	4b0b      	ldr	r3, [pc, #44]	@ (8010de4 <prvSampleTimeNow+0x3c>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	68fa      	ldr	r2, [r7, #12]
 8010dbc:	429a      	cmp	r2, r3
 8010dbe:	d205      	bcs.n	8010dcc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010dc0:	f000 f93a 	bl	8011038 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	2201      	movs	r2, #1
 8010dc8:	601a      	str	r2, [r3, #0]
 8010dca:	e002      	b.n	8010dd2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	2200      	movs	r2, #0
 8010dd0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010dd2:	4a04      	ldr	r2, [pc, #16]	@ (8010de4 <prvSampleTimeNow+0x3c>)
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010dd8:	68fb      	ldr	r3, [r7, #12]
}
 8010dda:	4618      	mov	r0, r3
 8010ddc:	3710      	adds	r7, #16
 8010dde:	46bd      	mov	sp, r7
 8010de0:	bd80      	pop	{r7, pc}
 8010de2:	bf00      	nop
 8010de4:	24033a20 	.word	0x24033a20

08010de8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b086      	sub	sp, #24
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	60f8      	str	r0, [r7, #12]
 8010df0:	60b9      	str	r1, [r7, #8]
 8010df2:	607a      	str	r2, [r7, #4]
 8010df4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010df6:	2300      	movs	r3, #0
 8010df8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	68ba      	ldr	r2, [r7, #8]
 8010dfe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	68fa      	ldr	r2, [r7, #12]
 8010e04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010e06:	68ba      	ldr	r2, [r7, #8]
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	429a      	cmp	r2, r3
 8010e0c:	d812      	bhi.n	8010e34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e0e:	687a      	ldr	r2, [r7, #4]
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	1ad2      	subs	r2, r2, r3
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	699b      	ldr	r3, [r3, #24]
 8010e18:	429a      	cmp	r2, r3
 8010e1a:	d302      	bcc.n	8010e22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010e1c:	2301      	movs	r3, #1
 8010e1e:	617b      	str	r3, [r7, #20]
 8010e20:	e01b      	b.n	8010e5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010e22:	4b10      	ldr	r3, [pc, #64]	@ (8010e64 <prvInsertTimerInActiveList+0x7c>)
 8010e24:	681a      	ldr	r2, [r3, #0]
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	3304      	adds	r3, #4
 8010e2a:	4619      	mov	r1, r3
 8010e2c:	4610      	mov	r0, r2
 8010e2e:	f7fd fc4a 	bl	800e6c6 <vListInsert>
 8010e32:	e012      	b.n	8010e5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010e34:	687a      	ldr	r2, [r7, #4]
 8010e36:	683b      	ldr	r3, [r7, #0]
 8010e38:	429a      	cmp	r2, r3
 8010e3a:	d206      	bcs.n	8010e4a <prvInsertTimerInActiveList+0x62>
 8010e3c:	68ba      	ldr	r2, [r7, #8]
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	429a      	cmp	r2, r3
 8010e42:	d302      	bcc.n	8010e4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010e44:	2301      	movs	r3, #1
 8010e46:	617b      	str	r3, [r7, #20]
 8010e48:	e007      	b.n	8010e5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010e4a:	4b07      	ldr	r3, [pc, #28]	@ (8010e68 <prvInsertTimerInActiveList+0x80>)
 8010e4c:	681a      	ldr	r2, [r3, #0]
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	3304      	adds	r3, #4
 8010e52:	4619      	mov	r1, r3
 8010e54:	4610      	mov	r0, r2
 8010e56:	f7fd fc36 	bl	800e6c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010e5a:	697b      	ldr	r3, [r7, #20]
}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3718      	adds	r7, #24
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}
 8010e64:	24033a14 	.word	0x24033a14
 8010e68:	24033a10 	.word	0x24033a10

08010e6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b08e      	sub	sp, #56	@ 0x38
 8010e70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010e72:	e0ce      	b.n	8011012 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	da19      	bge.n	8010eae <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010e7a:	1d3b      	adds	r3, r7, #4
 8010e7c:	3304      	adds	r3, #4
 8010e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d10b      	bne.n	8010e9e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8010e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e8a:	f383 8811 	msr	BASEPRI, r3
 8010e8e:	f3bf 8f6f 	isb	sy
 8010e92:	f3bf 8f4f 	dsb	sy
 8010e96:	61fb      	str	r3, [r7, #28]
}
 8010e98:	bf00      	nop
 8010e9a:	bf00      	nop
 8010e9c:	e7fd      	b.n	8010e9a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ea4:	6850      	ldr	r0, [r2, #4]
 8010ea6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ea8:	6892      	ldr	r2, [r2, #8]
 8010eaa:	4611      	mov	r1, r2
 8010eac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	f2c0 80ae 	blt.w	8011012 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ebc:	695b      	ldr	r3, [r3, #20]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d004      	beq.n	8010ecc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ec4:	3304      	adds	r3, #4
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f7fd fc36 	bl	800e738 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010ecc:	463b      	mov	r3, r7
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f7ff ff6a 	bl	8010da8 <prvSampleTimeNow>
 8010ed4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	2b09      	cmp	r3, #9
 8010eda:	f200 8097 	bhi.w	801100c <prvProcessReceivedCommands+0x1a0>
 8010ede:	a201      	add	r2, pc, #4	@ (adr r2, 8010ee4 <prvProcessReceivedCommands+0x78>)
 8010ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ee4:	08010f0d 	.word	0x08010f0d
 8010ee8:	08010f0d 	.word	0x08010f0d
 8010eec:	08010f0d 	.word	0x08010f0d
 8010ef0:	08010f83 	.word	0x08010f83
 8010ef4:	08010f97 	.word	0x08010f97
 8010ef8:	08010fe3 	.word	0x08010fe3
 8010efc:	08010f0d 	.word	0x08010f0d
 8010f00:	08010f0d 	.word	0x08010f0d
 8010f04:	08010f83 	.word	0x08010f83
 8010f08:	08010f97 	.word	0x08010f97
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010f12:	f043 0301 	orr.w	r3, r3, #1
 8010f16:	b2da      	uxtb	r2, r3
 8010f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010f1e:	68ba      	ldr	r2, [r7, #8]
 8010f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f22:	699b      	ldr	r3, [r3, #24]
 8010f24:	18d1      	adds	r1, r2, r3
 8010f26:	68bb      	ldr	r3, [r7, #8]
 8010f28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010f2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010f2c:	f7ff ff5c 	bl	8010de8 <prvInsertTimerInActiveList>
 8010f30:	4603      	mov	r3, r0
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d06c      	beq.n	8011010 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f38:	6a1b      	ldr	r3, [r3, #32]
 8010f3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010f3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010f44:	f003 0304 	and.w	r3, r3, #4
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d061      	beq.n	8011010 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010f4c:	68ba      	ldr	r2, [r7, #8]
 8010f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f50:	699b      	ldr	r3, [r3, #24]
 8010f52:	441a      	add	r2, r3
 8010f54:	2300      	movs	r3, #0
 8010f56:	9300      	str	r3, [sp, #0]
 8010f58:	2300      	movs	r3, #0
 8010f5a:	2100      	movs	r1, #0
 8010f5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010f5e:	f7ff fe01 	bl	8010b64 <xTimerGenericCommand>
 8010f62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010f64:	6a3b      	ldr	r3, [r7, #32]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d152      	bne.n	8011010 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8010f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f6e:	f383 8811 	msr	BASEPRI, r3
 8010f72:	f3bf 8f6f 	isb	sy
 8010f76:	f3bf 8f4f 	dsb	sy
 8010f7a:	61bb      	str	r3, [r7, #24]
}
 8010f7c:	bf00      	nop
 8010f7e:	bf00      	nop
 8010f80:	e7fd      	b.n	8010f7e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010f88:	f023 0301 	bic.w	r3, r3, #1
 8010f8c:	b2da      	uxtb	r2, r3
 8010f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f90:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010f94:	e03d      	b.n	8011012 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010f9c:	f043 0301 	orr.w	r3, r3, #1
 8010fa0:	b2da      	uxtb	r2, r3
 8010fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fa4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010fa8:	68ba      	ldr	r2, [r7, #8]
 8010faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fb0:	699b      	ldr	r3, [r3, #24]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d10b      	bne.n	8010fce <prvProcessReceivedCommands+0x162>
	__asm volatile
 8010fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fba:	f383 8811 	msr	BASEPRI, r3
 8010fbe:	f3bf 8f6f 	isb	sy
 8010fc2:	f3bf 8f4f 	dsb	sy
 8010fc6:	617b      	str	r3, [r7, #20]
}
 8010fc8:	bf00      	nop
 8010fca:	bf00      	nop
 8010fcc:	e7fd      	b.n	8010fca <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fd0:	699a      	ldr	r2, [r3, #24]
 8010fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fd4:	18d1      	adds	r1, r2, r3
 8010fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010fda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010fdc:	f7ff ff04 	bl	8010de8 <prvInsertTimerInActiveList>
					break;
 8010fe0:	e017      	b.n	8011012 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fe4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010fe8:	f003 0302 	and.w	r3, r3, #2
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d103      	bne.n	8010ff8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8010ff0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010ff2:	f000 fbe9 	bl	80117c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010ff6:	e00c      	b.n	8011012 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ffa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010ffe:	f023 0301 	bic.w	r3, r3, #1
 8011002:	b2da      	uxtb	r2, r3
 8011004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011006:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801100a:	e002      	b.n	8011012 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 801100c:	bf00      	nop
 801100e:	e000      	b.n	8011012 <prvProcessReceivedCommands+0x1a6>
					break;
 8011010:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011012:	4b08      	ldr	r3, [pc, #32]	@ (8011034 <prvProcessReceivedCommands+0x1c8>)
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	1d39      	adds	r1, r7, #4
 8011018:	2200      	movs	r2, #0
 801101a:	4618      	mov	r0, r3
 801101c:	f7fd ff54 	bl	800eec8 <xQueueReceive>
 8011020:	4603      	mov	r3, r0
 8011022:	2b00      	cmp	r3, #0
 8011024:	f47f af26 	bne.w	8010e74 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8011028:	bf00      	nop
 801102a:	bf00      	nop
 801102c:	3730      	adds	r7, #48	@ 0x30
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}
 8011032:	bf00      	nop
 8011034:	24033a18 	.word	0x24033a18

08011038 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b088      	sub	sp, #32
 801103c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801103e:	e049      	b.n	80110d4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011040:	4b2e      	ldr	r3, [pc, #184]	@ (80110fc <prvSwitchTimerLists+0xc4>)
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	68db      	ldr	r3, [r3, #12]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801104a:	4b2c      	ldr	r3, [pc, #176]	@ (80110fc <prvSwitchTimerLists+0xc4>)
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	68db      	ldr	r3, [r3, #12]
 8011050:	68db      	ldr	r3, [r3, #12]
 8011052:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	3304      	adds	r3, #4
 8011058:	4618      	mov	r0, r3
 801105a:	f7fd fb6d 	bl	800e738 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	6a1b      	ldr	r3, [r3, #32]
 8011062:	68f8      	ldr	r0, [r7, #12]
 8011064:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801106c:	f003 0304 	and.w	r3, r3, #4
 8011070:	2b00      	cmp	r3, #0
 8011072:	d02f      	beq.n	80110d4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	699b      	ldr	r3, [r3, #24]
 8011078:	693a      	ldr	r2, [r7, #16]
 801107a:	4413      	add	r3, r2
 801107c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801107e:	68ba      	ldr	r2, [r7, #8]
 8011080:	693b      	ldr	r3, [r7, #16]
 8011082:	429a      	cmp	r2, r3
 8011084:	d90e      	bls.n	80110a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	68ba      	ldr	r2, [r7, #8]
 801108a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	68fa      	ldr	r2, [r7, #12]
 8011090:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011092:	4b1a      	ldr	r3, [pc, #104]	@ (80110fc <prvSwitchTimerLists+0xc4>)
 8011094:	681a      	ldr	r2, [r3, #0]
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	3304      	adds	r3, #4
 801109a:	4619      	mov	r1, r3
 801109c:	4610      	mov	r0, r2
 801109e:	f7fd fb12 	bl	800e6c6 <vListInsert>
 80110a2:	e017      	b.n	80110d4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80110a4:	2300      	movs	r3, #0
 80110a6:	9300      	str	r3, [sp, #0]
 80110a8:	2300      	movs	r3, #0
 80110aa:	693a      	ldr	r2, [r7, #16]
 80110ac:	2100      	movs	r1, #0
 80110ae:	68f8      	ldr	r0, [r7, #12]
 80110b0:	f7ff fd58 	bl	8010b64 <xTimerGenericCommand>
 80110b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d10b      	bne.n	80110d4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80110bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110c0:	f383 8811 	msr	BASEPRI, r3
 80110c4:	f3bf 8f6f 	isb	sy
 80110c8:	f3bf 8f4f 	dsb	sy
 80110cc:	603b      	str	r3, [r7, #0]
}
 80110ce:	bf00      	nop
 80110d0:	bf00      	nop
 80110d2:	e7fd      	b.n	80110d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80110d4:	4b09      	ldr	r3, [pc, #36]	@ (80110fc <prvSwitchTimerLists+0xc4>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d1b0      	bne.n	8011040 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80110de:	4b07      	ldr	r3, [pc, #28]	@ (80110fc <prvSwitchTimerLists+0xc4>)
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80110e4:	4b06      	ldr	r3, [pc, #24]	@ (8011100 <prvSwitchTimerLists+0xc8>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	4a04      	ldr	r2, [pc, #16]	@ (80110fc <prvSwitchTimerLists+0xc4>)
 80110ea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80110ec:	4a04      	ldr	r2, [pc, #16]	@ (8011100 <prvSwitchTimerLists+0xc8>)
 80110ee:	697b      	ldr	r3, [r7, #20]
 80110f0:	6013      	str	r3, [r2, #0]
}
 80110f2:	bf00      	nop
 80110f4:	3718      	adds	r7, #24
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd80      	pop	{r7, pc}
 80110fa:	bf00      	nop
 80110fc:	24033a10 	.word	0x24033a10
 8011100:	24033a14 	.word	0x24033a14

08011104 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b082      	sub	sp, #8
 8011108:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801110a:	f000 f96d 	bl	80113e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801110e:	4b15      	ldr	r3, [pc, #84]	@ (8011164 <prvCheckForValidListAndQueue+0x60>)
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d120      	bne.n	8011158 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011116:	4814      	ldr	r0, [pc, #80]	@ (8011168 <prvCheckForValidListAndQueue+0x64>)
 8011118:	f7fd fa84 	bl	800e624 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801111c:	4813      	ldr	r0, [pc, #76]	@ (801116c <prvCheckForValidListAndQueue+0x68>)
 801111e:	f7fd fa81 	bl	800e624 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011122:	4b13      	ldr	r3, [pc, #76]	@ (8011170 <prvCheckForValidListAndQueue+0x6c>)
 8011124:	4a10      	ldr	r2, [pc, #64]	@ (8011168 <prvCheckForValidListAndQueue+0x64>)
 8011126:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011128:	4b12      	ldr	r3, [pc, #72]	@ (8011174 <prvCheckForValidListAndQueue+0x70>)
 801112a:	4a10      	ldr	r2, [pc, #64]	@ (801116c <prvCheckForValidListAndQueue+0x68>)
 801112c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801112e:	2300      	movs	r3, #0
 8011130:	9300      	str	r3, [sp, #0]
 8011132:	4b11      	ldr	r3, [pc, #68]	@ (8011178 <prvCheckForValidListAndQueue+0x74>)
 8011134:	4a11      	ldr	r2, [pc, #68]	@ (801117c <prvCheckForValidListAndQueue+0x78>)
 8011136:	2110      	movs	r1, #16
 8011138:	200a      	movs	r0, #10
 801113a:	f7fd fb91 	bl	800e860 <xQueueGenericCreateStatic>
 801113e:	4603      	mov	r3, r0
 8011140:	4a08      	ldr	r2, [pc, #32]	@ (8011164 <prvCheckForValidListAndQueue+0x60>)
 8011142:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011144:	4b07      	ldr	r3, [pc, #28]	@ (8011164 <prvCheckForValidListAndQueue+0x60>)
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d005      	beq.n	8011158 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801114c:	4b05      	ldr	r3, [pc, #20]	@ (8011164 <prvCheckForValidListAndQueue+0x60>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	490b      	ldr	r1, [pc, #44]	@ (8011180 <prvCheckForValidListAndQueue+0x7c>)
 8011152:	4618      	mov	r0, r3
 8011154:	f7fe f9d2 	bl	800f4fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011158:	f000 f978 	bl	801144c <vPortExitCritical>
}
 801115c:	bf00      	nop
 801115e:	46bd      	mov	sp, r7
 8011160:	bd80      	pop	{r7, pc}
 8011162:	bf00      	nop
 8011164:	24033a18 	.word	0x24033a18
 8011168:	240339e8 	.word	0x240339e8
 801116c:	240339fc 	.word	0x240339fc
 8011170:	24033a10 	.word	0x24033a10
 8011174:	24033a14 	.word	0x24033a14
 8011178:	24033ac4 	.word	0x24033ac4
 801117c:	24033a24 	.word	0x24033a24
 8011180:	08023418 	.word	0x08023418

08011184 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011184:	b480      	push	{r7}
 8011186:	b085      	sub	sp, #20
 8011188:	af00      	add	r7, sp, #0
 801118a:	60f8      	str	r0, [r7, #12]
 801118c:	60b9      	str	r1, [r7, #8]
 801118e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	3b04      	subs	r3, #4
 8011194:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801119c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	3b04      	subs	r3, #4
 80111a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80111a4:	68bb      	ldr	r3, [r7, #8]
 80111a6:	f023 0201 	bic.w	r2, r3, #1
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	3b04      	subs	r3, #4
 80111b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80111b4:	4a0c      	ldr	r2, [pc, #48]	@ (80111e8 <pxPortInitialiseStack+0x64>)
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	3b14      	subs	r3, #20
 80111be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80111c0:	687a      	ldr	r2, [r7, #4]
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	3b04      	subs	r3, #4
 80111ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	f06f 0202 	mvn.w	r2, #2
 80111d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	3b20      	subs	r3, #32
 80111d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80111da:	68fb      	ldr	r3, [r7, #12]
}
 80111dc:	4618      	mov	r0, r3
 80111de:	3714      	adds	r7, #20
 80111e0:	46bd      	mov	sp, r7
 80111e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e6:	4770      	bx	lr
 80111e8:	080111ed 	.word	0x080111ed

080111ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80111ec:	b480      	push	{r7}
 80111ee:	b085      	sub	sp, #20
 80111f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80111f2:	2300      	movs	r3, #0
 80111f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80111f6:	4b13      	ldr	r3, [pc, #76]	@ (8011244 <prvTaskExitError+0x58>)
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80111fe:	d00b      	beq.n	8011218 <prvTaskExitError+0x2c>
	__asm volatile
 8011200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011204:	f383 8811 	msr	BASEPRI, r3
 8011208:	f3bf 8f6f 	isb	sy
 801120c:	f3bf 8f4f 	dsb	sy
 8011210:	60fb      	str	r3, [r7, #12]
}
 8011212:	bf00      	nop
 8011214:	bf00      	nop
 8011216:	e7fd      	b.n	8011214 <prvTaskExitError+0x28>
	__asm volatile
 8011218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801121c:	f383 8811 	msr	BASEPRI, r3
 8011220:	f3bf 8f6f 	isb	sy
 8011224:	f3bf 8f4f 	dsb	sy
 8011228:	60bb      	str	r3, [r7, #8]
}
 801122a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801122c:	bf00      	nop
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d0fc      	beq.n	801122e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011234:	bf00      	nop
 8011236:	bf00      	nop
 8011238:	3714      	adds	r7, #20
 801123a:	46bd      	mov	sp, r7
 801123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011240:	4770      	bx	lr
 8011242:	bf00      	nop
 8011244:	24000014 	.word	0x24000014
	...

08011250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011250:	4b07      	ldr	r3, [pc, #28]	@ (8011270 <pxCurrentTCBConst2>)
 8011252:	6819      	ldr	r1, [r3, #0]
 8011254:	6808      	ldr	r0, [r1, #0]
 8011256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801125a:	f380 8809 	msr	PSP, r0
 801125e:	f3bf 8f6f 	isb	sy
 8011262:	f04f 0000 	mov.w	r0, #0
 8011266:	f380 8811 	msr	BASEPRI, r0
 801126a:	4770      	bx	lr
 801126c:	f3af 8000 	nop.w

08011270 <pxCurrentTCBConst2>:
 8011270:	240334e8 	.word	0x240334e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011274:	bf00      	nop
 8011276:	bf00      	nop

08011278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011278:	4808      	ldr	r0, [pc, #32]	@ (801129c <prvPortStartFirstTask+0x24>)
 801127a:	6800      	ldr	r0, [r0, #0]
 801127c:	6800      	ldr	r0, [r0, #0]
 801127e:	f380 8808 	msr	MSP, r0
 8011282:	f04f 0000 	mov.w	r0, #0
 8011286:	f380 8814 	msr	CONTROL, r0
 801128a:	b662      	cpsie	i
 801128c:	b661      	cpsie	f
 801128e:	f3bf 8f4f 	dsb	sy
 8011292:	f3bf 8f6f 	isb	sy
 8011296:	df00      	svc	0
 8011298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801129a:	bf00      	nop
 801129c:	e000ed08 	.word	0xe000ed08

080112a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b086      	sub	sp, #24
 80112a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80112a6:	4b47      	ldr	r3, [pc, #284]	@ (80113c4 <xPortStartScheduler+0x124>)
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	4a47      	ldr	r2, [pc, #284]	@ (80113c8 <xPortStartScheduler+0x128>)
 80112ac:	4293      	cmp	r3, r2
 80112ae:	d10b      	bne.n	80112c8 <xPortStartScheduler+0x28>
	__asm volatile
 80112b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112b4:	f383 8811 	msr	BASEPRI, r3
 80112b8:	f3bf 8f6f 	isb	sy
 80112bc:	f3bf 8f4f 	dsb	sy
 80112c0:	613b      	str	r3, [r7, #16]
}
 80112c2:	bf00      	nop
 80112c4:	bf00      	nop
 80112c6:	e7fd      	b.n	80112c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80112c8:	4b3e      	ldr	r3, [pc, #248]	@ (80113c4 <xPortStartScheduler+0x124>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	4a3f      	ldr	r2, [pc, #252]	@ (80113cc <xPortStartScheduler+0x12c>)
 80112ce:	4293      	cmp	r3, r2
 80112d0:	d10b      	bne.n	80112ea <xPortStartScheduler+0x4a>
	__asm volatile
 80112d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112d6:	f383 8811 	msr	BASEPRI, r3
 80112da:	f3bf 8f6f 	isb	sy
 80112de:	f3bf 8f4f 	dsb	sy
 80112e2:	60fb      	str	r3, [r7, #12]
}
 80112e4:	bf00      	nop
 80112e6:	bf00      	nop
 80112e8:	e7fd      	b.n	80112e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80112ea:	4b39      	ldr	r3, [pc, #228]	@ (80113d0 <xPortStartScheduler+0x130>)
 80112ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80112ee:	697b      	ldr	r3, [r7, #20]
 80112f0:	781b      	ldrb	r3, [r3, #0]
 80112f2:	b2db      	uxtb	r3, r3
 80112f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80112f6:	697b      	ldr	r3, [r7, #20]
 80112f8:	22ff      	movs	r2, #255	@ 0xff
 80112fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80112fc:	697b      	ldr	r3, [r7, #20]
 80112fe:	781b      	ldrb	r3, [r3, #0]
 8011300:	b2db      	uxtb	r3, r3
 8011302:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011304:	78fb      	ldrb	r3, [r7, #3]
 8011306:	b2db      	uxtb	r3, r3
 8011308:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801130c:	b2da      	uxtb	r2, r3
 801130e:	4b31      	ldr	r3, [pc, #196]	@ (80113d4 <xPortStartScheduler+0x134>)
 8011310:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011312:	4b31      	ldr	r3, [pc, #196]	@ (80113d8 <xPortStartScheduler+0x138>)
 8011314:	2207      	movs	r2, #7
 8011316:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011318:	e009      	b.n	801132e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801131a:	4b2f      	ldr	r3, [pc, #188]	@ (80113d8 <xPortStartScheduler+0x138>)
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	3b01      	subs	r3, #1
 8011320:	4a2d      	ldr	r2, [pc, #180]	@ (80113d8 <xPortStartScheduler+0x138>)
 8011322:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011324:	78fb      	ldrb	r3, [r7, #3]
 8011326:	b2db      	uxtb	r3, r3
 8011328:	005b      	lsls	r3, r3, #1
 801132a:	b2db      	uxtb	r3, r3
 801132c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801132e:	78fb      	ldrb	r3, [r7, #3]
 8011330:	b2db      	uxtb	r3, r3
 8011332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011336:	2b80      	cmp	r3, #128	@ 0x80
 8011338:	d0ef      	beq.n	801131a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801133a:	4b27      	ldr	r3, [pc, #156]	@ (80113d8 <xPortStartScheduler+0x138>)
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	f1c3 0307 	rsb	r3, r3, #7
 8011342:	2b04      	cmp	r3, #4
 8011344:	d00b      	beq.n	801135e <xPortStartScheduler+0xbe>
	__asm volatile
 8011346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801134a:	f383 8811 	msr	BASEPRI, r3
 801134e:	f3bf 8f6f 	isb	sy
 8011352:	f3bf 8f4f 	dsb	sy
 8011356:	60bb      	str	r3, [r7, #8]
}
 8011358:	bf00      	nop
 801135a:	bf00      	nop
 801135c:	e7fd      	b.n	801135a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801135e:	4b1e      	ldr	r3, [pc, #120]	@ (80113d8 <xPortStartScheduler+0x138>)
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	021b      	lsls	r3, r3, #8
 8011364:	4a1c      	ldr	r2, [pc, #112]	@ (80113d8 <xPortStartScheduler+0x138>)
 8011366:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011368:	4b1b      	ldr	r3, [pc, #108]	@ (80113d8 <xPortStartScheduler+0x138>)
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011370:	4a19      	ldr	r2, [pc, #100]	@ (80113d8 <xPortStartScheduler+0x138>)
 8011372:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	b2da      	uxtb	r2, r3
 8011378:	697b      	ldr	r3, [r7, #20]
 801137a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801137c:	4b17      	ldr	r3, [pc, #92]	@ (80113dc <xPortStartScheduler+0x13c>)
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	4a16      	ldr	r2, [pc, #88]	@ (80113dc <xPortStartScheduler+0x13c>)
 8011382:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011386:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011388:	4b14      	ldr	r3, [pc, #80]	@ (80113dc <xPortStartScheduler+0x13c>)
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	4a13      	ldr	r2, [pc, #76]	@ (80113dc <xPortStartScheduler+0x13c>)
 801138e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011392:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011394:	f000 f8da 	bl	801154c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011398:	4b11      	ldr	r3, [pc, #68]	@ (80113e0 <xPortStartScheduler+0x140>)
 801139a:	2200      	movs	r2, #0
 801139c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801139e:	f000 f8f9 	bl	8011594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80113a2:	4b10      	ldr	r3, [pc, #64]	@ (80113e4 <xPortStartScheduler+0x144>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	4a0f      	ldr	r2, [pc, #60]	@ (80113e4 <xPortStartScheduler+0x144>)
 80113a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80113ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80113ae:	f7ff ff63 	bl	8011278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80113b2:	f7fe fced 	bl	800fd90 <vTaskSwitchContext>
	prvTaskExitError();
 80113b6:	f7ff ff19 	bl	80111ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80113ba:	2300      	movs	r3, #0
}
 80113bc:	4618      	mov	r0, r3
 80113be:	3718      	adds	r7, #24
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}
 80113c4:	e000ed00 	.word	0xe000ed00
 80113c8:	410fc271 	.word	0x410fc271
 80113cc:	410fc270 	.word	0x410fc270
 80113d0:	e000e400 	.word	0xe000e400
 80113d4:	24033b14 	.word	0x24033b14
 80113d8:	24033b18 	.word	0x24033b18
 80113dc:	e000ed20 	.word	0xe000ed20
 80113e0:	24000014 	.word	0x24000014
 80113e4:	e000ef34 	.word	0xe000ef34

080113e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80113e8:	b480      	push	{r7}
 80113ea:	b083      	sub	sp, #12
 80113ec:	af00      	add	r7, sp, #0
	__asm volatile
 80113ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113f2:	f383 8811 	msr	BASEPRI, r3
 80113f6:	f3bf 8f6f 	isb	sy
 80113fa:	f3bf 8f4f 	dsb	sy
 80113fe:	607b      	str	r3, [r7, #4]
}
 8011400:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011402:	4b10      	ldr	r3, [pc, #64]	@ (8011444 <vPortEnterCritical+0x5c>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	3301      	adds	r3, #1
 8011408:	4a0e      	ldr	r2, [pc, #56]	@ (8011444 <vPortEnterCritical+0x5c>)
 801140a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801140c:	4b0d      	ldr	r3, [pc, #52]	@ (8011444 <vPortEnterCritical+0x5c>)
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	2b01      	cmp	r3, #1
 8011412:	d110      	bne.n	8011436 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011414:	4b0c      	ldr	r3, [pc, #48]	@ (8011448 <vPortEnterCritical+0x60>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	b2db      	uxtb	r3, r3
 801141a:	2b00      	cmp	r3, #0
 801141c:	d00b      	beq.n	8011436 <vPortEnterCritical+0x4e>
	__asm volatile
 801141e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011422:	f383 8811 	msr	BASEPRI, r3
 8011426:	f3bf 8f6f 	isb	sy
 801142a:	f3bf 8f4f 	dsb	sy
 801142e:	603b      	str	r3, [r7, #0]
}
 8011430:	bf00      	nop
 8011432:	bf00      	nop
 8011434:	e7fd      	b.n	8011432 <vPortEnterCritical+0x4a>
	}
}
 8011436:	bf00      	nop
 8011438:	370c      	adds	r7, #12
 801143a:	46bd      	mov	sp, r7
 801143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011440:	4770      	bx	lr
 8011442:	bf00      	nop
 8011444:	24000014 	.word	0x24000014
 8011448:	e000ed04 	.word	0xe000ed04

0801144c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801144c:	b480      	push	{r7}
 801144e:	b083      	sub	sp, #12
 8011450:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011452:	4b12      	ldr	r3, [pc, #72]	@ (801149c <vPortExitCritical+0x50>)
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d10b      	bne.n	8011472 <vPortExitCritical+0x26>
	__asm volatile
 801145a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801145e:	f383 8811 	msr	BASEPRI, r3
 8011462:	f3bf 8f6f 	isb	sy
 8011466:	f3bf 8f4f 	dsb	sy
 801146a:	607b      	str	r3, [r7, #4]
}
 801146c:	bf00      	nop
 801146e:	bf00      	nop
 8011470:	e7fd      	b.n	801146e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011472:	4b0a      	ldr	r3, [pc, #40]	@ (801149c <vPortExitCritical+0x50>)
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	3b01      	subs	r3, #1
 8011478:	4a08      	ldr	r2, [pc, #32]	@ (801149c <vPortExitCritical+0x50>)
 801147a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801147c:	4b07      	ldr	r3, [pc, #28]	@ (801149c <vPortExitCritical+0x50>)
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d105      	bne.n	8011490 <vPortExitCritical+0x44>
 8011484:	2300      	movs	r3, #0
 8011486:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	f383 8811 	msr	BASEPRI, r3
}
 801148e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011490:	bf00      	nop
 8011492:	370c      	adds	r7, #12
 8011494:	46bd      	mov	sp, r7
 8011496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149a:	4770      	bx	lr
 801149c:	24000014 	.word	0x24000014

080114a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80114a0:	f3ef 8009 	mrs	r0, PSP
 80114a4:	f3bf 8f6f 	isb	sy
 80114a8:	4b15      	ldr	r3, [pc, #84]	@ (8011500 <pxCurrentTCBConst>)
 80114aa:	681a      	ldr	r2, [r3, #0]
 80114ac:	f01e 0f10 	tst.w	lr, #16
 80114b0:	bf08      	it	eq
 80114b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80114b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114ba:	6010      	str	r0, [r2, #0]
 80114bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80114c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80114c4:	f380 8811 	msr	BASEPRI, r0
 80114c8:	f3bf 8f4f 	dsb	sy
 80114cc:	f3bf 8f6f 	isb	sy
 80114d0:	f7fe fc5e 	bl	800fd90 <vTaskSwitchContext>
 80114d4:	f04f 0000 	mov.w	r0, #0
 80114d8:	f380 8811 	msr	BASEPRI, r0
 80114dc:	bc09      	pop	{r0, r3}
 80114de:	6819      	ldr	r1, [r3, #0]
 80114e0:	6808      	ldr	r0, [r1, #0]
 80114e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114e6:	f01e 0f10 	tst.w	lr, #16
 80114ea:	bf08      	it	eq
 80114ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80114f0:	f380 8809 	msr	PSP, r0
 80114f4:	f3bf 8f6f 	isb	sy
 80114f8:	4770      	bx	lr
 80114fa:	bf00      	nop
 80114fc:	f3af 8000 	nop.w

08011500 <pxCurrentTCBConst>:
 8011500:	240334e8 	.word	0x240334e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011504:	bf00      	nop
 8011506:	bf00      	nop

08011508 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011508:	b580      	push	{r7, lr}
 801150a:	b082      	sub	sp, #8
 801150c:	af00      	add	r7, sp, #0
	__asm volatile
 801150e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011512:	f383 8811 	msr	BASEPRI, r3
 8011516:	f3bf 8f6f 	isb	sy
 801151a:	f3bf 8f4f 	dsb	sy
 801151e:	607b      	str	r3, [r7, #4]
}
 8011520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011522:	f7fe fb7b 	bl	800fc1c <xTaskIncrementTick>
 8011526:	4603      	mov	r3, r0
 8011528:	2b00      	cmp	r3, #0
 801152a:	d003      	beq.n	8011534 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801152c:	4b06      	ldr	r3, [pc, #24]	@ (8011548 <xPortSysTickHandler+0x40>)
 801152e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011532:	601a      	str	r2, [r3, #0]
 8011534:	2300      	movs	r3, #0
 8011536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011538:	683b      	ldr	r3, [r7, #0]
 801153a:	f383 8811 	msr	BASEPRI, r3
}
 801153e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011540:	bf00      	nop
 8011542:	3708      	adds	r7, #8
 8011544:	46bd      	mov	sp, r7
 8011546:	bd80      	pop	{r7, pc}
 8011548:	e000ed04 	.word	0xe000ed04

0801154c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801154c:	b480      	push	{r7}
 801154e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011550:	4b0b      	ldr	r3, [pc, #44]	@ (8011580 <vPortSetupTimerInterrupt+0x34>)
 8011552:	2200      	movs	r2, #0
 8011554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011556:	4b0b      	ldr	r3, [pc, #44]	@ (8011584 <vPortSetupTimerInterrupt+0x38>)
 8011558:	2200      	movs	r2, #0
 801155a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801155c:	4b0a      	ldr	r3, [pc, #40]	@ (8011588 <vPortSetupTimerInterrupt+0x3c>)
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	4a0a      	ldr	r2, [pc, #40]	@ (801158c <vPortSetupTimerInterrupt+0x40>)
 8011562:	fba2 2303 	umull	r2, r3, r2, r3
 8011566:	099b      	lsrs	r3, r3, #6
 8011568:	4a09      	ldr	r2, [pc, #36]	@ (8011590 <vPortSetupTimerInterrupt+0x44>)
 801156a:	3b01      	subs	r3, #1
 801156c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801156e:	4b04      	ldr	r3, [pc, #16]	@ (8011580 <vPortSetupTimerInterrupt+0x34>)
 8011570:	2207      	movs	r2, #7
 8011572:	601a      	str	r2, [r3, #0]
}
 8011574:	bf00      	nop
 8011576:	46bd      	mov	sp, r7
 8011578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157c:	4770      	bx	lr
 801157e:	bf00      	nop
 8011580:	e000e010 	.word	0xe000e010
 8011584:	e000e018 	.word	0xe000e018
 8011588:	24000004 	.word	0x24000004
 801158c:	10624dd3 	.word	0x10624dd3
 8011590:	e000e014 	.word	0xe000e014

08011594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011594:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80115a4 <vPortEnableVFP+0x10>
 8011598:	6801      	ldr	r1, [r0, #0]
 801159a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801159e:	6001      	str	r1, [r0, #0]
 80115a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80115a2:	bf00      	nop
 80115a4:	e000ed88 	.word	0xe000ed88

080115a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80115a8:	b480      	push	{r7}
 80115aa:	b085      	sub	sp, #20
 80115ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80115ae:	f3ef 8305 	mrs	r3, IPSR
 80115b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	2b0f      	cmp	r3, #15
 80115b8:	d915      	bls.n	80115e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80115ba:	4a18      	ldr	r2, [pc, #96]	@ (801161c <vPortValidateInterruptPriority+0x74>)
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	4413      	add	r3, r2
 80115c0:	781b      	ldrb	r3, [r3, #0]
 80115c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80115c4:	4b16      	ldr	r3, [pc, #88]	@ (8011620 <vPortValidateInterruptPriority+0x78>)
 80115c6:	781b      	ldrb	r3, [r3, #0]
 80115c8:	7afa      	ldrb	r2, [r7, #11]
 80115ca:	429a      	cmp	r2, r3
 80115cc:	d20b      	bcs.n	80115e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80115ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115d2:	f383 8811 	msr	BASEPRI, r3
 80115d6:	f3bf 8f6f 	isb	sy
 80115da:	f3bf 8f4f 	dsb	sy
 80115de:	607b      	str	r3, [r7, #4]
}
 80115e0:	bf00      	nop
 80115e2:	bf00      	nop
 80115e4:	e7fd      	b.n	80115e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80115e6:	4b0f      	ldr	r3, [pc, #60]	@ (8011624 <vPortValidateInterruptPriority+0x7c>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80115ee:	4b0e      	ldr	r3, [pc, #56]	@ (8011628 <vPortValidateInterruptPriority+0x80>)
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	429a      	cmp	r2, r3
 80115f4:	d90b      	bls.n	801160e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80115f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115fa:	f383 8811 	msr	BASEPRI, r3
 80115fe:	f3bf 8f6f 	isb	sy
 8011602:	f3bf 8f4f 	dsb	sy
 8011606:	603b      	str	r3, [r7, #0]
}
 8011608:	bf00      	nop
 801160a:	bf00      	nop
 801160c:	e7fd      	b.n	801160a <vPortValidateInterruptPriority+0x62>
	}
 801160e:	bf00      	nop
 8011610:	3714      	adds	r7, #20
 8011612:	46bd      	mov	sp, r7
 8011614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011618:	4770      	bx	lr
 801161a:	bf00      	nop
 801161c:	e000e3f0 	.word	0xe000e3f0
 8011620:	24033b14 	.word	0x24033b14
 8011624:	e000ed0c 	.word	0xe000ed0c
 8011628:	24033b18 	.word	0x24033b18

0801162c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b08a      	sub	sp, #40	@ 0x28
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011634:	2300      	movs	r3, #0
 8011636:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011638:	f7fe fa22 	bl	800fa80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801163c:	4b5c      	ldr	r3, [pc, #368]	@ (80117b0 <pvPortMalloc+0x184>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d101      	bne.n	8011648 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011644:	f000 f924 	bl	8011890 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011648:	4b5a      	ldr	r3, [pc, #360]	@ (80117b4 <pvPortMalloc+0x188>)
 801164a:	681a      	ldr	r2, [r3, #0]
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	4013      	ands	r3, r2
 8011650:	2b00      	cmp	r3, #0
 8011652:	f040 8095 	bne.w	8011780 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d01e      	beq.n	801169a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801165c:	2208      	movs	r2, #8
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	4413      	add	r3, r2
 8011662:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	f003 0307 	and.w	r3, r3, #7
 801166a:	2b00      	cmp	r3, #0
 801166c:	d015      	beq.n	801169a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	f023 0307 	bic.w	r3, r3, #7
 8011674:	3308      	adds	r3, #8
 8011676:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	f003 0307 	and.w	r3, r3, #7
 801167e:	2b00      	cmp	r3, #0
 8011680:	d00b      	beq.n	801169a <pvPortMalloc+0x6e>
	__asm volatile
 8011682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011686:	f383 8811 	msr	BASEPRI, r3
 801168a:	f3bf 8f6f 	isb	sy
 801168e:	f3bf 8f4f 	dsb	sy
 8011692:	617b      	str	r3, [r7, #20]
}
 8011694:	bf00      	nop
 8011696:	bf00      	nop
 8011698:	e7fd      	b.n	8011696 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d06f      	beq.n	8011780 <pvPortMalloc+0x154>
 80116a0:	4b45      	ldr	r3, [pc, #276]	@ (80117b8 <pvPortMalloc+0x18c>)
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	687a      	ldr	r2, [r7, #4]
 80116a6:	429a      	cmp	r2, r3
 80116a8:	d86a      	bhi.n	8011780 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80116aa:	4b44      	ldr	r3, [pc, #272]	@ (80117bc <pvPortMalloc+0x190>)
 80116ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80116ae:	4b43      	ldr	r3, [pc, #268]	@ (80117bc <pvPortMalloc+0x190>)
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80116b4:	e004      	b.n	80116c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80116b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80116ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80116c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116c2:	685b      	ldr	r3, [r3, #4]
 80116c4:	687a      	ldr	r2, [r7, #4]
 80116c6:	429a      	cmp	r2, r3
 80116c8:	d903      	bls.n	80116d2 <pvPortMalloc+0xa6>
 80116ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d1f1      	bne.n	80116b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80116d2:	4b37      	ldr	r3, [pc, #220]	@ (80117b0 <pvPortMalloc+0x184>)
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80116d8:	429a      	cmp	r2, r3
 80116da:	d051      	beq.n	8011780 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80116dc:	6a3b      	ldr	r3, [r7, #32]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	2208      	movs	r2, #8
 80116e2:	4413      	add	r3, r2
 80116e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80116e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116e8:	681a      	ldr	r2, [r3, #0]
 80116ea:	6a3b      	ldr	r3, [r7, #32]
 80116ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80116ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116f0:	685a      	ldr	r2, [r3, #4]
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	1ad2      	subs	r2, r2, r3
 80116f6:	2308      	movs	r3, #8
 80116f8:	005b      	lsls	r3, r3, #1
 80116fa:	429a      	cmp	r2, r3
 80116fc:	d920      	bls.n	8011740 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80116fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	4413      	add	r3, r2
 8011704:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011706:	69bb      	ldr	r3, [r7, #24]
 8011708:	f003 0307 	and.w	r3, r3, #7
 801170c:	2b00      	cmp	r3, #0
 801170e:	d00b      	beq.n	8011728 <pvPortMalloc+0xfc>
	__asm volatile
 8011710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011714:	f383 8811 	msr	BASEPRI, r3
 8011718:	f3bf 8f6f 	isb	sy
 801171c:	f3bf 8f4f 	dsb	sy
 8011720:	613b      	str	r3, [r7, #16]
}
 8011722:	bf00      	nop
 8011724:	bf00      	nop
 8011726:	e7fd      	b.n	8011724 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801172a:	685a      	ldr	r2, [r3, #4]
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	1ad2      	subs	r2, r2, r3
 8011730:	69bb      	ldr	r3, [r7, #24]
 8011732:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011736:	687a      	ldr	r2, [r7, #4]
 8011738:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801173a:	69b8      	ldr	r0, [r7, #24]
 801173c:	f000 f90c 	bl	8011958 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011740:	4b1d      	ldr	r3, [pc, #116]	@ (80117b8 <pvPortMalloc+0x18c>)
 8011742:	681a      	ldr	r2, [r3, #0]
 8011744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011746:	685b      	ldr	r3, [r3, #4]
 8011748:	1ad3      	subs	r3, r2, r3
 801174a:	4a1b      	ldr	r2, [pc, #108]	@ (80117b8 <pvPortMalloc+0x18c>)
 801174c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801174e:	4b1a      	ldr	r3, [pc, #104]	@ (80117b8 <pvPortMalloc+0x18c>)
 8011750:	681a      	ldr	r2, [r3, #0]
 8011752:	4b1b      	ldr	r3, [pc, #108]	@ (80117c0 <pvPortMalloc+0x194>)
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	429a      	cmp	r2, r3
 8011758:	d203      	bcs.n	8011762 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801175a:	4b17      	ldr	r3, [pc, #92]	@ (80117b8 <pvPortMalloc+0x18c>)
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	4a18      	ldr	r2, [pc, #96]	@ (80117c0 <pvPortMalloc+0x194>)
 8011760:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011764:	685a      	ldr	r2, [r3, #4]
 8011766:	4b13      	ldr	r3, [pc, #76]	@ (80117b4 <pvPortMalloc+0x188>)
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	431a      	orrs	r2, r3
 801176c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801176e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011772:	2200      	movs	r2, #0
 8011774:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011776:	4b13      	ldr	r3, [pc, #76]	@ (80117c4 <pvPortMalloc+0x198>)
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	3301      	adds	r3, #1
 801177c:	4a11      	ldr	r2, [pc, #68]	@ (80117c4 <pvPortMalloc+0x198>)
 801177e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011780:	f7fe f98c 	bl	800fa9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011784:	69fb      	ldr	r3, [r7, #28]
 8011786:	f003 0307 	and.w	r3, r3, #7
 801178a:	2b00      	cmp	r3, #0
 801178c:	d00b      	beq.n	80117a6 <pvPortMalloc+0x17a>
	__asm volatile
 801178e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011792:	f383 8811 	msr	BASEPRI, r3
 8011796:	f3bf 8f6f 	isb	sy
 801179a:	f3bf 8f4f 	dsb	sy
 801179e:	60fb      	str	r3, [r7, #12]
}
 80117a0:	bf00      	nop
 80117a2:	bf00      	nop
 80117a4:	e7fd      	b.n	80117a2 <pvPortMalloc+0x176>
	return pvReturn;
 80117a6:	69fb      	ldr	r3, [r7, #28]
}
 80117a8:	4618      	mov	r0, r3
 80117aa:	3728      	adds	r7, #40	@ 0x28
 80117ac:	46bd      	mov	sp, r7
 80117ae:	bd80      	pop	{r7, pc}
 80117b0:	24064864 	.word	0x24064864
 80117b4:	24064878 	.word	0x24064878
 80117b8:	24064868 	.word	0x24064868
 80117bc:	2406485c 	.word	0x2406485c
 80117c0:	2406486c 	.word	0x2406486c
 80117c4:	24064870 	.word	0x24064870

080117c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b086      	sub	sp, #24
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d04f      	beq.n	801187a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80117da:	2308      	movs	r3, #8
 80117dc:	425b      	negs	r3, r3
 80117de:	697a      	ldr	r2, [r7, #20]
 80117e0:	4413      	add	r3, r2
 80117e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80117e8:	693b      	ldr	r3, [r7, #16]
 80117ea:	685a      	ldr	r2, [r3, #4]
 80117ec:	4b25      	ldr	r3, [pc, #148]	@ (8011884 <vPortFree+0xbc>)
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	4013      	ands	r3, r2
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d10b      	bne.n	801180e <vPortFree+0x46>
	__asm volatile
 80117f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117fa:	f383 8811 	msr	BASEPRI, r3
 80117fe:	f3bf 8f6f 	isb	sy
 8011802:	f3bf 8f4f 	dsb	sy
 8011806:	60fb      	str	r3, [r7, #12]
}
 8011808:	bf00      	nop
 801180a:	bf00      	nop
 801180c:	e7fd      	b.n	801180a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801180e:	693b      	ldr	r3, [r7, #16]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d00b      	beq.n	801182e <vPortFree+0x66>
	__asm volatile
 8011816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801181a:	f383 8811 	msr	BASEPRI, r3
 801181e:	f3bf 8f6f 	isb	sy
 8011822:	f3bf 8f4f 	dsb	sy
 8011826:	60bb      	str	r3, [r7, #8]
}
 8011828:	bf00      	nop
 801182a:	bf00      	nop
 801182c:	e7fd      	b.n	801182a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801182e:	693b      	ldr	r3, [r7, #16]
 8011830:	685a      	ldr	r2, [r3, #4]
 8011832:	4b14      	ldr	r3, [pc, #80]	@ (8011884 <vPortFree+0xbc>)
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	4013      	ands	r3, r2
 8011838:	2b00      	cmp	r3, #0
 801183a:	d01e      	beq.n	801187a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801183c:	693b      	ldr	r3, [r7, #16]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d11a      	bne.n	801187a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011844:	693b      	ldr	r3, [r7, #16]
 8011846:	685a      	ldr	r2, [r3, #4]
 8011848:	4b0e      	ldr	r3, [pc, #56]	@ (8011884 <vPortFree+0xbc>)
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	43db      	mvns	r3, r3
 801184e:	401a      	ands	r2, r3
 8011850:	693b      	ldr	r3, [r7, #16]
 8011852:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011854:	f7fe f914 	bl	800fa80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011858:	693b      	ldr	r3, [r7, #16]
 801185a:	685a      	ldr	r2, [r3, #4]
 801185c:	4b0a      	ldr	r3, [pc, #40]	@ (8011888 <vPortFree+0xc0>)
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	4413      	add	r3, r2
 8011862:	4a09      	ldr	r2, [pc, #36]	@ (8011888 <vPortFree+0xc0>)
 8011864:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011866:	6938      	ldr	r0, [r7, #16]
 8011868:	f000 f876 	bl	8011958 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801186c:	4b07      	ldr	r3, [pc, #28]	@ (801188c <vPortFree+0xc4>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	3301      	adds	r3, #1
 8011872:	4a06      	ldr	r2, [pc, #24]	@ (801188c <vPortFree+0xc4>)
 8011874:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011876:	f7fe f911 	bl	800fa9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801187a:	bf00      	nop
 801187c:	3718      	adds	r7, #24
 801187e:	46bd      	mov	sp, r7
 8011880:	bd80      	pop	{r7, pc}
 8011882:	bf00      	nop
 8011884:	24064878 	.word	0x24064878
 8011888:	24064868 	.word	0x24064868
 801188c:	24064874 	.word	0x24064874

08011890 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011890:	b480      	push	{r7}
 8011892:	b085      	sub	sp, #20
 8011894:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011896:	4b29      	ldr	r3, [pc, #164]	@ (801193c <prvHeapInit+0xac>)
 8011898:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801189a:	4b29      	ldr	r3, [pc, #164]	@ (8011940 <prvHeapInit+0xb0>)
 801189c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	f003 0307 	and.w	r3, r3, #7
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d00c      	beq.n	80118c2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	3307      	adds	r3, #7
 80118ac:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	f023 0307 	bic.w	r3, r3, #7
 80118b4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80118b6:	68ba      	ldr	r2, [r7, #8]
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	1ad3      	subs	r3, r2, r3
 80118bc:	4a20      	ldr	r2, [pc, #128]	@ (8011940 <prvHeapInit+0xb0>)
 80118be:	4413      	add	r3, r2
 80118c0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80118c6:	4a1f      	ldr	r2, [pc, #124]	@ (8011944 <prvHeapInit+0xb4>)
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80118cc:	4b1d      	ldr	r3, [pc, #116]	@ (8011944 <prvHeapInit+0xb4>)
 80118ce:	2200      	movs	r2, #0
 80118d0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	68ba      	ldr	r2, [r7, #8]
 80118d6:	4413      	add	r3, r2
 80118d8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80118da:	2208      	movs	r2, #8
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	1a9b      	subs	r3, r3, r2
 80118e0:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	f023 0307 	bic.w	r3, r3, #7
 80118e8:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	4a16      	ldr	r2, [pc, #88]	@ (8011948 <prvHeapInit+0xb8>)
 80118ee:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80118f0:	4b15      	ldr	r3, [pc, #84]	@ (8011948 <prvHeapInit+0xb8>)
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	2200      	movs	r2, #0
 80118f6:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80118f8:	4b13      	ldr	r3, [pc, #76]	@ (8011948 <prvHeapInit+0xb8>)
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	2200      	movs	r2, #0
 80118fe:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011904:	683b      	ldr	r3, [r7, #0]
 8011906:	68fa      	ldr	r2, [r7, #12]
 8011908:	1ad2      	subs	r2, r2, r3
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801190e:	4b0e      	ldr	r3, [pc, #56]	@ (8011948 <prvHeapInit+0xb8>)
 8011910:	681a      	ldr	r2, [r3, #0]
 8011912:	683b      	ldr	r3, [r7, #0]
 8011914:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011916:	683b      	ldr	r3, [r7, #0]
 8011918:	685b      	ldr	r3, [r3, #4]
 801191a:	4a0c      	ldr	r2, [pc, #48]	@ (801194c <prvHeapInit+0xbc>)
 801191c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801191e:	683b      	ldr	r3, [r7, #0]
 8011920:	685b      	ldr	r3, [r3, #4]
 8011922:	4a0b      	ldr	r2, [pc, #44]	@ (8011950 <prvHeapInit+0xc0>)
 8011924:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011926:	4b0b      	ldr	r3, [pc, #44]	@ (8011954 <prvHeapInit+0xc4>)
 8011928:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801192c:	601a      	str	r2, [r3, #0]
}
 801192e:	bf00      	nop
 8011930:	3714      	adds	r7, #20
 8011932:	46bd      	mov	sp, r7
 8011934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011938:	4770      	bx	lr
 801193a:	bf00      	nop
 801193c:	00030d40 	.word	0x00030d40
 8011940:	24033b1c 	.word	0x24033b1c
 8011944:	2406485c 	.word	0x2406485c
 8011948:	24064864 	.word	0x24064864
 801194c:	2406486c 	.word	0x2406486c
 8011950:	24064868 	.word	0x24064868
 8011954:	24064878 	.word	0x24064878

08011958 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011958:	b480      	push	{r7}
 801195a:	b085      	sub	sp, #20
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011960:	4b28      	ldr	r3, [pc, #160]	@ (8011a04 <prvInsertBlockIntoFreeList+0xac>)
 8011962:	60fb      	str	r3, [r7, #12]
 8011964:	e002      	b.n	801196c <prvInsertBlockIntoFreeList+0x14>
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	60fb      	str	r3, [r7, #12]
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	687a      	ldr	r2, [r7, #4]
 8011972:	429a      	cmp	r2, r3
 8011974:	d8f7      	bhi.n	8011966 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	685b      	ldr	r3, [r3, #4]
 801197e:	68ba      	ldr	r2, [r7, #8]
 8011980:	4413      	add	r3, r2
 8011982:	687a      	ldr	r2, [r7, #4]
 8011984:	429a      	cmp	r2, r3
 8011986:	d108      	bne.n	801199a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	685a      	ldr	r2, [r3, #4]
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	685b      	ldr	r3, [r3, #4]
 8011990:	441a      	add	r2, r3
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	685b      	ldr	r3, [r3, #4]
 80119a2:	68ba      	ldr	r2, [r7, #8]
 80119a4:	441a      	add	r2, r3
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	429a      	cmp	r2, r3
 80119ac:	d118      	bne.n	80119e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	681a      	ldr	r2, [r3, #0]
 80119b2:	4b15      	ldr	r3, [pc, #84]	@ (8011a08 <prvInsertBlockIntoFreeList+0xb0>)
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	429a      	cmp	r2, r3
 80119b8:	d00d      	beq.n	80119d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	685a      	ldr	r2, [r3, #4]
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	685b      	ldr	r3, [r3, #4]
 80119c4:	441a      	add	r2, r3
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	681a      	ldr	r2, [r3, #0]
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	601a      	str	r2, [r3, #0]
 80119d4:	e008      	b.n	80119e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80119d6:	4b0c      	ldr	r3, [pc, #48]	@ (8011a08 <prvInsertBlockIntoFreeList+0xb0>)
 80119d8:	681a      	ldr	r2, [r3, #0]
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	601a      	str	r2, [r3, #0]
 80119de:	e003      	b.n	80119e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	681a      	ldr	r2, [r3, #0]
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80119e8:	68fa      	ldr	r2, [r7, #12]
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	429a      	cmp	r2, r3
 80119ee:	d002      	beq.n	80119f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	687a      	ldr	r2, [r7, #4]
 80119f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80119f6:	bf00      	nop
 80119f8:	3714      	adds	r7, #20
 80119fa:	46bd      	mov	sp, r7
 80119fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a00:	4770      	bx	lr
 8011a02:	bf00      	nop
 8011a04:	2406485c 	.word	0x2406485c
 8011a08:	24064864 	.word	0x24064864

08011a0c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand>:
 8011a0c:	4b04      	ldr	r3, [pc, #16]	@ (8011a20 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x14>)
 8011a0e:	681a      	ldr	r2, [r3, #0]
 8011a10:	b10a      	cbz	r2, 8011a16 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0xa>
 8011a12:	4803      	ldr	r0, [pc, #12]	@ (8011a20 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x14>)
 8011a14:	4770      	bx	lr
 8011a16:	4a03      	ldr	r2, [pc, #12]	@ (8011a24 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x18>)
 8011a18:	4801      	ldr	r0, [pc, #4]	@ (8011a20 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x14>)
 8011a1a:	6812      	ldr	r2, [r2, #0]
 8011a1c:	601a      	str	r2, [r3, #0]
 8011a1e:	4770      	bx	lr
 8011a20:	24000020 	.word	0x24000020
 8011a24:	24000d2c 	.word	0x24000d2c

08011a28 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand>:
 8011a28:	4a02      	ldr	r2, [pc, #8]	@ (8011a34 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0xc>)
 8011a2a:	4b03      	ldr	r3, [pc, #12]	@ (8011a38 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x10>)
 8011a2c:	6812      	ldr	r2, [r2, #0]
 8011a2e:	601a      	str	r2, [r3, #0]
 8011a30:	4770      	bx	lr
 8011a32:	bf00      	nop
 8011a34:	24000d2c 	.word	0x24000d2c
 8011a38:	24000020 	.word	0x24000020

08011a3c <autoware_auto_control_msgs__msg__AckermannControlCommand__rosidl_typesupport_introspection_c__AckermannControlCommand_init_function>:
 8011a3c:	f004 bffc 	b.w	8016a38 <autoware_auto_control_msgs__msg__AckermannControlCommand__init>

08011a40 <autoware_auto_control_msgs__msg__AckermannControlCommand__rosidl_typesupport_introspection_c__AckermannControlCommand_fini_function>:
 8011a40:	f005 b838 	b.w	8016ab4 <autoware_auto_control_msgs__msg__AckermannControlCommand__fini>

08011a44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand>:
 8011a44:	b510      	push	{r4, lr}
 8011a46:	4c0a      	ldr	r4, [pc, #40]	@ (8011a70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x2c>)
 8011a48:	f001 f880 	bl	8012b4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011a4c:	60e0      	str	r0, [r4, #12]
 8011a4e:	f000 f819 	bl	8011a84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>
 8011a52:	64a0      	str	r0, [r4, #72]	@ 0x48
 8011a54:	f000 f830 	bl	8011ab8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>
 8011a58:	4b06      	ldr	r3, [pc, #24]	@ (8011a74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x30>)
 8011a5a:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8011a5e:	681a      	ldr	r2, [r3, #0]
 8011a60:	b10a      	cbz	r2, 8011a66 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x22>
 8011a62:	4804      	ldr	r0, [pc, #16]	@ (8011a74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x30>)
 8011a64:	bd10      	pop	{r4, pc}
 8011a66:	4a04      	ldr	r2, [pc, #16]	@ (8011a78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x34>)
 8011a68:	4802      	ldr	r0, [pc, #8]	@ (8011a74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x30>)
 8011a6a:	6812      	ldr	r2, [r2, #0]
 8011a6c:	601a      	str	r2, [r3, #0]
 8011a6e:	bd10      	pop	{r4, pc}
 8011a70:	2400002c 	.word	0x2400002c
 8011a74:	240000e0 	.word	0x240000e0
 8011a78:	24000d30 	.word	0x24000d30

08011a7c <autoware_auto_control_msgs__msg__AckermannLateralCommand__rosidl_typesupport_introspection_c__AckermannLateralCommand_init_function>:
 8011a7c:	f005 b82a 	b.w	8016ad4 <autoware_auto_control_msgs__msg__AckermannLateralCommand__init>

08011a80 <autoware_auto_control_msgs__msg__AckermannLateralCommand__rosidl_typesupport_introspection_c__AckermannLateralCommand_fini_function>:
 8011a80:	f005 b83c 	b.w	8016afc <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>

08011a84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>:
 8011a84:	b508      	push	{r3, lr}
 8011a86:	f001 f861 	bl	8012b4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011a8a:	4b06      	ldr	r3, [pc, #24]	@ (8011aa4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x20>)
 8011a8c:	4906      	ldr	r1, [pc, #24]	@ (8011aa8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x24>)
 8011a8e:	681a      	ldr	r2, [r3, #0]
 8011a90:	60c8      	str	r0, [r1, #12]
 8011a92:	b10a      	cbz	r2, 8011a98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x14>
 8011a94:	4803      	ldr	r0, [pc, #12]	@ (8011aa4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x20>)
 8011a96:	bd08      	pop	{r3, pc}
 8011a98:	4a04      	ldr	r2, [pc, #16]	@ (8011aac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x28>)
 8011a9a:	4802      	ldr	r0, [pc, #8]	@ (8011aa4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x20>)
 8011a9c:	6812      	ldr	r2, [r2, #0]
 8011a9e:	601a      	str	r2, [r3, #0]
 8011aa0:	bd08      	pop	{r3, pc}
 8011aa2:	bf00      	nop
 8011aa4:	240001a0 	.word	0x240001a0
 8011aa8:	240000ec 	.word	0x240000ec
 8011aac:	24000d30 	.word	0x24000d30

08011ab0 <autoware_auto_control_msgs__msg__LongitudinalCommand__rosidl_typesupport_introspection_c__LongitudinalCommand_init_function>:
 8011ab0:	f005 b828 	b.w	8016b04 <autoware_auto_control_msgs__msg__LongitudinalCommand__init>

08011ab4 <autoware_auto_control_msgs__msg__LongitudinalCommand__rosidl_typesupport_introspection_c__LongitudinalCommand_fini_function>:
 8011ab4:	f005 b83c 	b.w	8016b30 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>

08011ab8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>:
 8011ab8:	b508      	push	{r3, lr}
 8011aba:	f001 f847 	bl	8012b4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011abe:	4b06      	ldr	r3, [pc, #24]	@ (8011ad8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x20>)
 8011ac0:	4906      	ldr	r1, [pc, #24]	@ (8011adc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x24>)
 8011ac2:	681a      	ldr	r2, [r3, #0]
 8011ac4:	60c8      	str	r0, [r1, #12]
 8011ac6:	b10a      	cbz	r2, 8011acc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x14>
 8011ac8:	4803      	ldr	r0, [pc, #12]	@ (8011ad8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x20>)
 8011aca:	bd08      	pop	{r3, pc}
 8011acc:	4a04      	ldr	r2, [pc, #16]	@ (8011ae0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x28>)
 8011ace:	4802      	ldr	r0, [pc, #8]	@ (8011ad8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x20>)
 8011ad0:	6812      	ldr	r2, [r2, #0]
 8011ad2:	601a      	str	r2, [r3, #0]
 8011ad4:	bd08      	pop	{r3, pc}
 8011ad6:	bf00      	nop
 8011ad8:	2400029c 	.word	0x2400029c
 8011adc:	240001ac 	.word	0x240001ac
 8011ae0:	24000d30 	.word	0x24000d30

08011ae4 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannControlCommand>:
 8011ae4:	b570      	push	{r4, r5, r6, lr}
 8011ae6:	4604      	mov	r4, r0
 8011ae8:	b190      	cbz	r0, 8011b10 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannControlCommand+0x2c>
 8011aea:	460e      	mov	r6, r1
 8011aec:	f001 f83c 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 8011af0:	4605      	mov	r5, r0
 8011af2:	f104 0008 	add.w	r0, r4, #8
 8011af6:	4435      	add	r5, r6
 8011af8:	4629      	mov	r1, r5
 8011afa:	f000 f885 	bl	8011c08 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>
 8011afe:	4601      	mov	r1, r0
 8011b00:	f104 0018 	add.w	r0, r4, #24
 8011b04:	440d      	add	r5, r1
 8011b06:	4629      	mov	r1, r5
 8011b08:	f000 f90e 	bl	8011d28 <get_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>
 8011b0c:	1b80      	subs	r0, r0, r6
 8011b0e:	4428      	add	r0, r5
 8011b10:	bd70      	pop	{r4, r5, r6, pc}
 8011b12:	bf00      	nop

08011b14 <_AckermannControlCommand__cdr_deserialize>:
 8011b14:	b570      	push	{r4, r5, r6, lr}
 8011b16:	460c      	mov	r4, r1
 8011b18:	b1e1      	cbz	r1, 8011b54 <_AckermannControlCommand__cdr_deserialize+0x40>
 8011b1a:	4605      	mov	r5, r0
 8011b1c:	f001 f888 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011b20:	4603      	mov	r3, r0
 8011b22:	4621      	mov	r1, r4
 8011b24:	4628      	mov	r0, r5
 8011b26:	685b      	ldr	r3, [r3, #4]
 8011b28:	68db      	ldr	r3, [r3, #12]
 8011b2a:	4798      	blx	r3
 8011b2c:	f000 f8f8 	bl	8011d20 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>
 8011b30:	4603      	mov	r3, r0
 8011b32:	f104 0108 	add.w	r1, r4, #8
 8011b36:	4628      	mov	r0, r5
 8011b38:	685b      	ldr	r3, [r3, #4]
 8011b3a:	68db      	ldr	r3, [r3, #12]
 8011b3c:	4798      	blx	r3
 8011b3e:	f000 f9a1 	bl	8011e84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>
 8011b42:	4603      	mov	r3, r0
 8011b44:	f104 0118 	add.w	r1, r4, #24
 8011b48:	4628      	mov	r0, r5
 8011b4a:	685b      	ldr	r3, [r3, #4]
 8011b4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b50:	68db      	ldr	r3, [r3, #12]
 8011b52:	4718      	bx	r3
 8011b54:	4608      	mov	r0, r1
 8011b56:	bd70      	pop	{r4, r5, r6, pc}

08011b58 <_AckermannControlCommand__cdr_serialize>:
 8011b58:	b510      	push	{r4, lr}
 8011b5a:	b082      	sub	sp, #8
 8011b5c:	9101      	str	r1, [sp, #4]
 8011b5e:	b1e8      	cbz	r0, 8011b9c <_AckermannControlCommand__cdr_serialize+0x44>
 8011b60:	4604      	mov	r4, r0
 8011b62:	f001 f865 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011b66:	4603      	mov	r3, r0
 8011b68:	9901      	ldr	r1, [sp, #4]
 8011b6a:	4620      	mov	r0, r4
 8011b6c:	685b      	ldr	r3, [r3, #4]
 8011b6e:	689b      	ldr	r3, [r3, #8]
 8011b70:	4798      	blx	r3
 8011b72:	f000 f8d5 	bl	8011d20 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>
 8011b76:	4603      	mov	r3, r0
 8011b78:	9901      	ldr	r1, [sp, #4]
 8011b7a:	f104 0008 	add.w	r0, r4, #8
 8011b7e:	685b      	ldr	r3, [r3, #4]
 8011b80:	689b      	ldr	r3, [r3, #8]
 8011b82:	4798      	blx	r3
 8011b84:	f000 f97e 	bl	8011e84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>
 8011b88:	4603      	mov	r3, r0
 8011b8a:	9901      	ldr	r1, [sp, #4]
 8011b8c:	f104 0018 	add.w	r0, r4, #24
 8011b90:	685b      	ldr	r3, [r3, #4]
 8011b92:	689b      	ldr	r3, [r3, #8]
 8011b94:	b002      	add	sp, #8
 8011b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b9a:	4718      	bx	r3
 8011b9c:	b002      	add	sp, #8
 8011b9e:	bd10      	pop	{r4, pc}

08011ba0 <_AckermannControlCommand__get_serialized_size>:
 8011ba0:	b538      	push	{r3, r4, r5, lr}
 8011ba2:	4604      	mov	r4, r0
 8011ba4:	b180      	cbz	r0, 8011bc8 <_AckermannControlCommand__get_serialized_size+0x28>
 8011ba6:	2100      	movs	r1, #0
 8011ba8:	f000 ffde 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 8011bac:	4605      	mov	r5, r0
 8011bae:	f104 0008 	add.w	r0, r4, #8
 8011bb2:	4629      	mov	r1, r5
 8011bb4:	f000 f828 	bl	8011c08 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>
 8011bb8:	4601      	mov	r1, r0
 8011bba:	f104 0018 	add.w	r0, r4, #24
 8011bbe:	440d      	add	r5, r1
 8011bc0:	4629      	mov	r1, r5
 8011bc2:	f000 f8b1 	bl	8011d28 <get_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>
 8011bc6:	4428      	add	r0, r5
 8011bc8:	bd38      	pop	{r3, r4, r5, pc}
 8011bca:	bf00      	nop

08011bcc <_AckermannControlCommand__max_serialized_size>:
 8011bcc:	b510      	push	{r4, lr}
 8011bce:	b082      	sub	sp, #8
 8011bd0:	2301      	movs	r3, #1
 8011bd2:	2100      	movs	r1, #0
 8011bd4:	f10d 0007 	add.w	r0, sp, #7
 8011bd8:	f88d 3007 	strb.w	r3, [sp, #7]
 8011bdc:	f001 f814 	bl	8012c08 <max_serialized_size_builtin_interfaces__msg__Time>
 8011be0:	4604      	mov	r4, r0
 8011be2:	f10d 0007 	add.w	r0, sp, #7
 8011be6:	4621      	mov	r1, r4
 8011be8:	f000 f884 	bl	8011cf4 <max_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>
 8011bec:	4601      	mov	r1, r0
 8011bee:	f10d 0007 	add.w	r0, sp, #7
 8011bf2:	440c      	add	r4, r1
 8011bf4:	4621      	mov	r1, r4
 8011bf6:	f000 f929 	bl	8011e4c <max_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>
 8011bfa:	4420      	add	r0, r4
 8011bfc:	b002      	add	sp, #8
 8011bfe:	bd10      	pop	{r4, pc}

08011c00 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand>:
 8011c00:	4800      	ldr	r0, [pc, #0]	@ (8011c04 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x4>)
 8011c02:	4770      	bx	lr
 8011c04:	240002a8 	.word	0x240002a8

08011c08 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>:
 8011c08:	b538      	push	{r3, r4, r5, lr}
 8011c0a:	b188      	cbz	r0, 8011c30 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand+0x28>
 8011c0c:	460d      	mov	r5, r1
 8011c0e:	f000 ffab 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 8011c12:	2104      	movs	r1, #4
 8011c14:	182c      	adds	r4, r5, r0
 8011c16:	f1c5 0504 	rsb	r5, r5, #4
 8011c1a:	4620      	mov	r0, r4
 8011c1c:	f002 faa8 	bl	8014170 <ucdr_alignment>
 8011c20:	2104      	movs	r1, #4
 8011c22:	4408      	add	r0, r1
 8011c24:	4404      	add	r4, r0
 8011c26:	4620      	mov	r0, r4
 8011c28:	f002 faa2 	bl	8014170 <ucdr_alignment>
 8011c2c:	4428      	add	r0, r5
 8011c2e:	4420      	add	r0, r4
 8011c30:	bd38      	pop	{r3, r4, r5, pc}
 8011c32:	bf00      	nop

08011c34 <_AckermannLateralCommand__cdr_deserialize>:
 8011c34:	b538      	push	{r3, r4, r5, lr}
 8011c36:	460c      	mov	r4, r1
 8011c38:	b1a1      	cbz	r1, 8011c64 <_AckermannLateralCommand__cdr_deserialize+0x30>
 8011c3a:	4605      	mov	r5, r0
 8011c3c:	f000 fff8 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011c40:	4603      	mov	r3, r0
 8011c42:	4621      	mov	r1, r4
 8011c44:	4628      	mov	r0, r5
 8011c46:	685b      	ldr	r3, [r3, #4]
 8011c48:	68db      	ldr	r3, [r3, #12]
 8011c4a:	4798      	blx	r3
 8011c4c:	f104 0108 	add.w	r1, r4, #8
 8011c50:	4628      	mov	r0, r5
 8011c52:	f002 f80f 	bl	8013c74 <ucdr_deserialize_float>
 8011c56:	f104 010c 	add.w	r1, r4, #12
 8011c5a:	4628      	mov	r0, r5
 8011c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c60:	f002 b808 	b.w	8013c74 <ucdr_deserialize_float>
 8011c64:	4608      	mov	r0, r1
 8011c66:	bd38      	pop	{r3, r4, r5, pc}

08011c68 <_AckermannLateralCommand__cdr_serialize>:
 8011c68:	b1b0      	cbz	r0, 8011c98 <_AckermannLateralCommand__cdr_serialize+0x30>
 8011c6a:	b538      	push	{r3, r4, r5, lr}
 8011c6c:	4604      	mov	r4, r0
 8011c6e:	460d      	mov	r5, r1
 8011c70:	f000 ffde 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011c74:	4603      	mov	r3, r0
 8011c76:	4629      	mov	r1, r5
 8011c78:	4620      	mov	r0, r4
 8011c7a:	685b      	ldr	r3, [r3, #4]
 8011c7c:	689b      	ldr	r3, [r3, #8]
 8011c7e:	4798      	blx	r3
 8011c80:	ed94 0a02 	vldr	s0, [r4, #8]
 8011c84:	4628      	mov	r0, r5
 8011c86:	f001 ff5d 	bl	8013b44 <ucdr_serialize_float>
 8011c8a:	ed94 0a03 	vldr	s0, [r4, #12]
 8011c8e:	4628      	mov	r0, r5
 8011c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c94:	f001 bf56 	b.w	8013b44 <ucdr_serialize_float>
 8011c98:	4770      	bx	lr
 8011c9a:	bf00      	nop

08011c9c <_AckermannLateralCommand__get_serialized_size>:
 8011c9c:	b180      	cbz	r0, 8011cc0 <_AckermannLateralCommand__get_serialized_size+0x24>
 8011c9e:	2100      	movs	r1, #0
 8011ca0:	b510      	push	{r4, lr}
 8011ca2:	f000 ff61 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 8011ca6:	4604      	mov	r4, r0
 8011ca8:	2104      	movs	r1, #4
 8011caa:	f002 fa61 	bl	8014170 <ucdr_alignment>
 8011cae:	2104      	movs	r1, #4
 8011cb0:	4420      	add	r0, r4
 8011cb2:	1844      	adds	r4, r0, r1
 8011cb4:	4620      	mov	r0, r4
 8011cb6:	f002 fa5b 	bl	8014170 <ucdr_alignment>
 8011cba:	3004      	adds	r0, #4
 8011cbc:	4420      	add	r0, r4
 8011cbe:	bd10      	pop	{r4, pc}
 8011cc0:	4770      	bx	lr
 8011cc2:	bf00      	nop

08011cc4 <_AckermannLateralCommand__max_serialized_size>:
 8011cc4:	b510      	push	{r4, lr}
 8011cc6:	b082      	sub	sp, #8
 8011cc8:	2301      	movs	r3, #1
 8011cca:	2100      	movs	r1, #0
 8011ccc:	f10d 0007 	add.w	r0, sp, #7
 8011cd0:	f88d 3007 	strb.w	r3, [sp, #7]
 8011cd4:	f000 ff98 	bl	8012c08 <max_serialized_size_builtin_interfaces__msg__Time>
 8011cd8:	4604      	mov	r4, r0
 8011cda:	2104      	movs	r1, #4
 8011cdc:	f002 fa48 	bl	8014170 <ucdr_alignment>
 8011ce0:	2104      	movs	r1, #4
 8011ce2:	4420      	add	r0, r4
 8011ce4:	1844      	adds	r4, r0, r1
 8011ce6:	4620      	mov	r0, r4
 8011ce8:	f002 fa42 	bl	8014170 <ucdr_alignment>
 8011cec:	3004      	adds	r0, #4
 8011cee:	4420      	add	r0, r4
 8011cf0:	b002      	add	sp, #8
 8011cf2:	bd10      	pop	{r4, pc}

08011cf4 <max_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>:
 8011cf4:	2301      	movs	r3, #1
 8011cf6:	b570      	push	{r4, r5, r6, lr}
 8011cf8:	460c      	mov	r4, r1
 8011cfa:	7003      	strb	r3, [r0, #0]
 8011cfc:	f000 ff84 	bl	8012c08 <max_serialized_size_builtin_interfaces__msg__Time>
 8011d00:	2104      	movs	r1, #4
 8011d02:	1826      	adds	r6, r4, r0
 8011d04:	f1c4 0404 	rsb	r4, r4, #4
 8011d08:	4630      	mov	r0, r6
 8011d0a:	f002 fa31 	bl	8014170 <ucdr_alignment>
 8011d0e:	2104      	movs	r1, #4
 8011d10:	1845      	adds	r5, r0, r1
 8011d12:	4435      	add	r5, r6
 8011d14:	4628      	mov	r0, r5
 8011d16:	f002 fa2b 	bl	8014170 <ucdr_alignment>
 8011d1a:	4420      	add	r0, r4
 8011d1c:	4428      	add	r0, r5
 8011d1e:	bd70      	pop	{r4, r5, r6, pc}

08011d20 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>:
 8011d20:	4800      	ldr	r0, [pc, #0]	@ (8011d24 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x4>)
 8011d22:	4770      	bx	lr
 8011d24:	240002d0 	.word	0x240002d0

08011d28 <get_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>:
 8011d28:	b1c8      	cbz	r0, 8011d5e <get_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand+0x36>
 8011d2a:	b570      	push	{r4, r5, r6, lr}
 8011d2c:	460d      	mov	r5, r1
 8011d2e:	f000 ff1b 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 8011d32:	2104      	movs	r1, #4
 8011d34:	182e      	adds	r6, r5, r0
 8011d36:	f1c5 0504 	rsb	r5, r5, #4
 8011d3a:	4630      	mov	r0, r6
 8011d3c:	f002 fa18 	bl	8014170 <ucdr_alignment>
 8011d40:	2104      	movs	r1, #4
 8011d42:	1844      	adds	r4, r0, r1
 8011d44:	4434      	add	r4, r6
 8011d46:	4620      	mov	r0, r4
 8011d48:	f002 fa12 	bl	8014170 <ucdr_alignment>
 8011d4c:	2104      	movs	r1, #4
 8011d4e:	4408      	add	r0, r1
 8011d50:	4404      	add	r4, r0
 8011d52:	4620      	mov	r0, r4
 8011d54:	f002 fa0c 	bl	8014170 <ucdr_alignment>
 8011d58:	4428      	add	r0, r5
 8011d5a:	4420      	add	r0, r4
 8011d5c:	bd70      	pop	{r4, r5, r6, pc}
 8011d5e:	4770      	bx	lr

08011d60 <_LongitudinalCommand__cdr_deserialize>:
 8011d60:	b538      	push	{r3, r4, r5, lr}
 8011d62:	460c      	mov	r4, r1
 8011d64:	b1c9      	cbz	r1, 8011d9a <_LongitudinalCommand__cdr_deserialize+0x3a>
 8011d66:	4605      	mov	r5, r0
 8011d68:	f000 ff62 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	4621      	mov	r1, r4
 8011d70:	4628      	mov	r0, r5
 8011d72:	685b      	ldr	r3, [r3, #4]
 8011d74:	68db      	ldr	r3, [r3, #12]
 8011d76:	4798      	blx	r3
 8011d78:	f104 0108 	add.w	r1, r4, #8
 8011d7c:	4628      	mov	r0, r5
 8011d7e:	f001 ff79 	bl	8013c74 <ucdr_deserialize_float>
 8011d82:	f104 010c 	add.w	r1, r4, #12
 8011d86:	4628      	mov	r0, r5
 8011d88:	f001 ff74 	bl	8013c74 <ucdr_deserialize_float>
 8011d8c:	f104 0110 	add.w	r1, r4, #16
 8011d90:	4628      	mov	r0, r5
 8011d92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d96:	f001 bf6d 	b.w	8013c74 <ucdr_deserialize_float>
 8011d9a:	4608      	mov	r0, r1
 8011d9c:	bd38      	pop	{r3, r4, r5, pc}
 8011d9e:	bf00      	nop

08011da0 <_LongitudinalCommand__cdr_serialize>:
 8011da0:	b1d8      	cbz	r0, 8011dda <_LongitudinalCommand__cdr_serialize+0x3a>
 8011da2:	b538      	push	{r3, r4, r5, lr}
 8011da4:	4604      	mov	r4, r0
 8011da6:	460d      	mov	r5, r1
 8011da8:	f000 ff42 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011dac:	4603      	mov	r3, r0
 8011dae:	4629      	mov	r1, r5
 8011db0:	4620      	mov	r0, r4
 8011db2:	685b      	ldr	r3, [r3, #4]
 8011db4:	689b      	ldr	r3, [r3, #8]
 8011db6:	4798      	blx	r3
 8011db8:	ed94 0a02 	vldr	s0, [r4, #8]
 8011dbc:	4628      	mov	r0, r5
 8011dbe:	f001 fec1 	bl	8013b44 <ucdr_serialize_float>
 8011dc2:	ed94 0a03 	vldr	s0, [r4, #12]
 8011dc6:	4628      	mov	r0, r5
 8011dc8:	f001 febc 	bl	8013b44 <ucdr_serialize_float>
 8011dcc:	ed94 0a04 	vldr	s0, [r4, #16]
 8011dd0:	4628      	mov	r0, r5
 8011dd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011dd6:	f001 beb5 	b.w	8013b44 <ucdr_serialize_float>
 8011dda:	4770      	bx	lr

08011ddc <_LongitudinalCommand__get_serialized_size>:
 8011ddc:	b1b0      	cbz	r0, 8011e0c <_LongitudinalCommand__get_serialized_size+0x30>
 8011dde:	2100      	movs	r1, #0
 8011de0:	b510      	push	{r4, lr}
 8011de2:	f000 fec1 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 8011de6:	4604      	mov	r4, r0
 8011de8:	2104      	movs	r1, #4
 8011dea:	f002 f9c1 	bl	8014170 <ucdr_alignment>
 8011dee:	2104      	movs	r1, #4
 8011df0:	4420      	add	r0, r4
 8011df2:	1844      	adds	r4, r0, r1
 8011df4:	4620      	mov	r0, r4
 8011df6:	f002 f9bb 	bl	8014170 <ucdr_alignment>
 8011dfa:	2104      	movs	r1, #4
 8011dfc:	4408      	add	r0, r1
 8011dfe:	4404      	add	r4, r0
 8011e00:	4620      	mov	r0, r4
 8011e02:	f002 f9b5 	bl	8014170 <ucdr_alignment>
 8011e06:	3004      	adds	r0, #4
 8011e08:	4420      	add	r0, r4
 8011e0a:	bd10      	pop	{r4, pc}
 8011e0c:	4770      	bx	lr
 8011e0e:	bf00      	nop

08011e10 <_LongitudinalCommand__max_serialized_size>:
 8011e10:	b510      	push	{r4, lr}
 8011e12:	b082      	sub	sp, #8
 8011e14:	2301      	movs	r3, #1
 8011e16:	2100      	movs	r1, #0
 8011e18:	f10d 0007 	add.w	r0, sp, #7
 8011e1c:	f88d 3007 	strb.w	r3, [sp, #7]
 8011e20:	f000 fef2 	bl	8012c08 <max_serialized_size_builtin_interfaces__msg__Time>
 8011e24:	4604      	mov	r4, r0
 8011e26:	2104      	movs	r1, #4
 8011e28:	f002 f9a2 	bl	8014170 <ucdr_alignment>
 8011e2c:	2104      	movs	r1, #4
 8011e2e:	4420      	add	r0, r4
 8011e30:	1844      	adds	r4, r0, r1
 8011e32:	4620      	mov	r0, r4
 8011e34:	f002 f99c 	bl	8014170 <ucdr_alignment>
 8011e38:	2104      	movs	r1, #4
 8011e3a:	4408      	add	r0, r1
 8011e3c:	4404      	add	r4, r0
 8011e3e:	4620      	mov	r0, r4
 8011e40:	f002 f996 	bl	8014170 <ucdr_alignment>
 8011e44:	3004      	adds	r0, #4
 8011e46:	4420      	add	r0, r4
 8011e48:	b002      	add	sp, #8
 8011e4a:	bd10      	pop	{r4, pc}

08011e4c <max_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>:
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	b570      	push	{r4, r5, r6, lr}
 8011e50:	460c      	mov	r4, r1
 8011e52:	7003      	strb	r3, [r0, #0]
 8011e54:	f000 fed8 	bl	8012c08 <max_serialized_size_builtin_interfaces__msg__Time>
 8011e58:	2104      	movs	r1, #4
 8011e5a:	1826      	adds	r6, r4, r0
 8011e5c:	f1c4 0404 	rsb	r4, r4, #4
 8011e60:	4630      	mov	r0, r6
 8011e62:	f002 f985 	bl	8014170 <ucdr_alignment>
 8011e66:	2104      	movs	r1, #4
 8011e68:	1845      	adds	r5, r0, r1
 8011e6a:	4435      	add	r5, r6
 8011e6c:	4628      	mov	r0, r5
 8011e6e:	f002 f97f 	bl	8014170 <ucdr_alignment>
 8011e72:	2104      	movs	r1, #4
 8011e74:	4408      	add	r0, r1
 8011e76:	4405      	add	r5, r0
 8011e78:	4628      	mov	r0, r5
 8011e7a:	f002 f979 	bl	8014170 <ucdr_alignment>
 8011e7e:	4420      	add	r0, r4
 8011e80:	4428      	add	r0, r5
 8011e82:	bd70      	pop	{r4, r5, r6, pc}

08011e84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>:
 8011e84:	4800      	ldr	r0, [pc, #0]	@ (8011e88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x4>)
 8011e86:	4770      	bx	lr
 8011e88:	240002f8 	.word	0x240002f8

08011e8c <rosidl_typesupport_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand>:
 8011e8c:	4b04      	ldr	r3, [pc, #16]	@ (8011ea0 <rosidl_typesupport_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x14>)
 8011e8e:	681a      	ldr	r2, [r3, #0]
 8011e90:	b10a      	cbz	r2, 8011e96 <rosidl_typesupport_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0xa>
 8011e92:	4803      	ldr	r0, [pc, #12]	@ (8011ea0 <rosidl_typesupport_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x14>)
 8011e94:	4770      	bx	lr
 8011e96:	4a03      	ldr	r2, [pc, #12]	@ (8011ea4 <rosidl_typesupport_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x18>)
 8011e98:	4801      	ldr	r0, [pc, #4]	@ (8011ea0 <rosidl_typesupport_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x14>)
 8011e9a:	6812      	ldr	r2, [r2, #0]
 8011e9c:	601a      	str	r2, [r3, #0]
 8011e9e:	4770      	bx	lr
 8011ea0:	24000328 	.word	0x24000328
 8011ea4:	24000d2c 	.word	0x24000d2c

08011ea8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request>:
 8011ea8:	4b04      	ldr	r3, [pc, #16]	@ (8011ebc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x14>)
 8011eaa:	4805      	ldr	r0, [pc, #20]	@ (8011ec0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x18>)
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	4905      	ldr	r1, [pc, #20]	@ (8011ec4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>)
 8011eb0:	4a05      	ldr	r2, [pc, #20]	@ (8011ec8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8011eb2:	6003      	str	r3, [r0, #0]
 8011eb4:	600b      	str	r3, [r1, #0]
 8011eb6:	6013      	str	r3, [r2, #0]
 8011eb8:	4770      	bx	lr
 8011eba:	bf00      	nop
 8011ebc:	24000d2c 	.word	0x24000d2c
 8011ec0:	24000344 	.word	0x24000344
 8011ec4:	24000350 	.word	0x24000350
 8011ec8:	24000328 	.word	0x24000328

08011ecc <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport>:
 8011ecc:	4b04      	ldr	r3, [pc, #16]	@ (8011ee0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x14>)
 8011ece:	681a      	ldr	r2, [r3, #0]
 8011ed0:	b10a      	cbz	r2, 8011ed6 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0xa>
 8011ed2:	4803      	ldr	r0, [pc, #12]	@ (8011ee0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x14>)
 8011ed4:	4770      	bx	lr
 8011ed6:	4a03      	ldr	r2, [pc, #12]	@ (8011ee4 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x18>)
 8011ed8:	4801      	ldr	r0, [pc, #4]	@ (8011ee0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x14>)
 8011eda:	6812      	ldr	r2, [r2, #0]
 8011edc:	601a      	str	r2, [r3, #0]
 8011ede:	4770      	bx	lr
 8011ee0:	24000364 	.word	0x24000364
 8011ee4:	24000d2c 	.word	0x24000d2c

08011ee8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport>:
 8011ee8:	4a02      	ldr	r2, [pc, #8]	@ (8011ef4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0xc>)
 8011eea:	4b03      	ldr	r3, [pc, #12]	@ (8011ef8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x10>)
 8011eec:	6812      	ldr	r2, [r2, #0]
 8011eee:	601a      	str	r2, [r3, #0]
 8011ef0:	4770      	bx	lr
 8011ef2:	bf00      	nop
 8011ef4:	24000d2c 	.word	0x24000d2c
 8011ef8:	24000364 	.word	0x24000364

08011efc <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand>:
 8011efc:	4b04      	ldr	r3, [pc, #16]	@ (8011f10 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x14>)
 8011efe:	681a      	ldr	r2, [r3, #0]
 8011f00:	b10a      	cbz	r2, 8011f06 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0xa>
 8011f02:	4803      	ldr	r0, [pc, #12]	@ (8011f10 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x14>)
 8011f04:	4770      	bx	lr
 8011f06:	4a03      	ldr	r2, [pc, #12]	@ (8011f14 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x18>)
 8011f08:	4801      	ldr	r0, [pc, #4]	@ (8011f10 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x14>)
 8011f0a:	6812      	ldr	r2, [r2, #0]
 8011f0c:	601a      	str	r2, [r3, #0]
 8011f0e:	4770      	bx	lr
 8011f10:	24000378 	.word	0x24000378
 8011f14:	24000d2c 	.word	0x24000d2c

08011f18 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand>:
 8011f18:	4a02      	ldr	r2, [pc, #8]	@ (8011f24 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0xc>)
 8011f1a:	4b03      	ldr	r3, [pc, #12]	@ (8011f28 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x10>)
 8011f1c:	6812      	ldr	r2, [r2, #0]
 8011f1e:	601a      	str	r2, [r3, #0]
 8011f20:	4770      	bx	lr
 8011f22:	bf00      	nop
 8011f24:	24000d2c 	.word	0x24000d2c
 8011f28:	24000378 	.word	0x24000378

08011f2c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport>:
 8011f2c:	4b04      	ldr	r3, [pc, #16]	@ (8011f40 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x14>)
 8011f2e:	681a      	ldr	r2, [r3, #0]
 8011f30:	b10a      	cbz	r2, 8011f36 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0xa>
 8011f32:	4803      	ldr	r0, [pc, #12]	@ (8011f40 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x14>)
 8011f34:	4770      	bx	lr
 8011f36:	4a03      	ldr	r2, [pc, #12]	@ (8011f44 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x18>)
 8011f38:	4801      	ldr	r0, [pc, #4]	@ (8011f40 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x14>)
 8011f3a:	6812      	ldr	r2, [r2, #0]
 8011f3c:	601a      	str	r2, [r3, #0]
 8011f3e:	4770      	bx	lr
 8011f40:	2400038c 	.word	0x2400038c
 8011f44:	24000d2c 	.word	0x24000d2c

08011f48 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport>:
 8011f48:	4a02      	ldr	r2, [pc, #8]	@ (8011f54 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0xc>)
 8011f4a:	4b03      	ldr	r3, [pc, #12]	@ (8011f58 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x10>)
 8011f4c:	6812      	ldr	r2, [r2, #0]
 8011f4e:	601a      	str	r2, [r3, #0]
 8011f50:	4770      	bx	lr
 8011f52:	bf00      	nop
 8011f54:	24000d2c 	.word	0x24000d2c
 8011f58:	2400038c 	.word	0x2400038c

08011f5c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand>:
 8011f5c:	4b04      	ldr	r3, [pc, #16]	@ (8011f70 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 8011f5e:	681a      	ldr	r2, [r3, #0]
 8011f60:	b10a      	cbz	r2, 8011f66 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0xa>
 8011f62:	4803      	ldr	r0, [pc, #12]	@ (8011f70 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 8011f64:	4770      	bx	lr
 8011f66:	4a03      	ldr	r2, [pc, #12]	@ (8011f74 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x18>)
 8011f68:	4801      	ldr	r0, [pc, #4]	@ (8011f70 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 8011f6a:	6812      	ldr	r2, [r2, #0]
 8011f6c:	601a      	str	r2, [r3, #0]
 8011f6e:	4770      	bx	lr
 8011f70:	240003a0 	.word	0x240003a0
 8011f74:	24000d2c 	.word	0x24000d2c

08011f78 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand>:
 8011f78:	4a02      	ldr	r2, [pc, #8]	@ (8011f84 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0xc>)
 8011f7a:	4b03      	ldr	r3, [pc, #12]	@ (8011f88 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x10>)
 8011f7c:	6812      	ldr	r2, [r2, #0]
 8011f7e:	601a      	str	r2, [r3, #0]
 8011f80:	4770      	bx	lr
 8011f82:	bf00      	nop
 8011f84:	24000d2c 	.word	0x24000d2c
 8011f88:	240003a0 	.word	0x240003a0

08011f8c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport>:
 8011f8c:	4b04      	ldr	r3, [pc, #16]	@ (8011fa0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x14>)
 8011f8e:	681a      	ldr	r2, [r3, #0]
 8011f90:	b10a      	cbz	r2, 8011f96 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0xa>
 8011f92:	4803      	ldr	r0, [pc, #12]	@ (8011fa0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x14>)
 8011f94:	4770      	bx	lr
 8011f96:	4a03      	ldr	r2, [pc, #12]	@ (8011fa4 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x18>)
 8011f98:	4801      	ldr	r0, [pc, #4]	@ (8011fa0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x14>)
 8011f9a:	6812      	ldr	r2, [r2, #0]
 8011f9c:	601a      	str	r2, [r3, #0]
 8011f9e:	4770      	bx	lr
 8011fa0:	240003b4 	.word	0x240003b4
 8011fa4:	24000d2c 	.word	0x24000d2c

08011fa8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport>:
 8011fa8:	4a02      	ldr	r2, [pc, #8]	@ (8011fb4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0xc>)
 8011faa:	4b03      	ldr	r3, [pc, #12]	@ (8011fb8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x10>)
 8011fac:	6812      	ldr	r2, [r2, #0]
 8011fae:	601a      	str	r2, [r3, #0]
 8011fb0:	4770      	bx	lr
 8011fb2:	bf00      	nop
 8011fb4:	24000d2c 	.word	0x24000d2c
 8011fb8:	240003b4 	.word	0x240003b4

08011fbc <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport>:
 8011fbc:	4b04      	ldr	r3, [pc, #16]	@ (8011fd0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x14>)
 8011fbe:	681a      	ldr	r2, [r3, #0]
 8011fc0:	b10a      	cbz	r2, 8011fc6 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0xa>
 8011fc2:	4803      	ldr	r0, [pc, #12]	@ (8011fd0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x14>)
 8011fc4:	4770      	bx	lr
 8011fc6:	4a03      	ldr	r2, [pc, #12]	@ (8011fd4 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x18>)
 8011fc8:	4801      	ldr	r0, [pc, #4]	@ (8011fd0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x14>)
 8011fca:	6812      	ldr	r2, [r2, #0]
 8011fcc:	601a      	str	r2, [r3, #0]
 8011fce:	4770      	bx	lr
 8011fd0:	240003c8 	.word	0x240003c8
 8011fd4:	24000d2c 	.word	0x24000d2c

08011fd8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport>:
 8011fd8:	4a02      	ldr	r2, [pc, #8]	@ (8011fe4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0xc>)
 8011fda:	4b03      	ldr	r3, [pc, #12]	@ (8011fe8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x10>)
 8011fdc:	6812      	ldr	r2, [r2, #0]
 8011fde:	601a      	str	r2, [r3, #0]
 8011fe0:	4770      	bx	lr
 8011fe2:	bf00      	nop
 8011fe4:	24000d2c 	.word	0x24000d2c
 8011fe8:	240003c8 	.word	0x240003c8

08011fec <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8011fec:	4b04      	ldr	r3, [pc, #16]	@ (8012000 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 8011fee:	681a      	ldr	r2, [r3, #0]
 8011ff0:	b10a      	cbz	r2, 8011ff6 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0xa>
 8011ff2:	4803      	ldr	r0, [pc, #12]	@ (8012000 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 8011ff4:	4770      	bx	lr
 8011ff6:	4a03      	ldr	r2, [pc, #12]	@ (8012004 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x18>)
 8011ff8:	4801      	ldr	r0, [pc, #4]	@ (8012000 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 8011ffa:	6812      	ldr	r2, [r2, #0]
 8011ffc:	601a      	str	r2, [r3, #0]
 8011ffe:	4770      	bx	lr
 8012000:	240003dc 	.word	0x240003dc
 8012004:	24000d2c 	.word	0x24000d2c

08012008 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8012008:	4a02      	ldr	r2, [pc, #8]	@ (8012014 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0xc>)
 801200a:	4b03      	ldr	r3, [pc, #12]	@ (8012018 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x10>)
 801200c:	6812      	ldr	r2, [r2, #0]
 801200e:	601a      	str	r2, [r3, #0]
 8012010:	4770      	bx	lr
 8012012:	bf00      	nop
 8012014:	24000d2c 	.word	0x24000d2c
 8012018:	240003dc 	.word	0x240003dc

0801201c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>:
 801201c:	4b04      	ldr	r3, [pc, #16]	@ (8012030 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 801201e:	681a      	ldr	r2, [r3, #0]
 8012020:	b10a      	cbz	r2, 8012026 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0xa>
 8012022:	4803      	ldr	r0, [pc, #12]	@ (8012030 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 8012024:	4770      	bx	lr
 8012026:	4a03      	ldr	r2, [pc, #12]	@ (8012034 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x18>)
 8012028:	4801      	ldr	r0, [pc, #4]	@ (8012030 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 801202a:	6812      	ldr	r2, [r2, #0]
 801202c:	601a      	str	r2, [r3, #0]
 801202e:	4770      	bx	lr
 8012030:	240003f0 	.word	0x240003f0
 8012034:	24000d2c 	.word	0x24000d2c

08012038 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>:
 8012038:	4a02      	ldr	r2, [pc, #8]	@ (8012044 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0xc>)
 801203a:	4b03      	ldr	r3, [pc, #12]	@ (8012048 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x10>)
 801203c:	6812      	ldr	r2, [r2, #0]
 801203e:	601a      	str	r2, [r3, #0]
 8012040:	4770      	bx	lr
 8012042:	bf00      	nop
 8012044:	24000d2c 	.word	0x24000d2c
 8012048:	240003f0 	.word	0x240003f0

0801204c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport>:
 801204c:	4b04      	ldr	r3, [pc, #16]	@ (8012060 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x14>)
 801204e:	681a      	ldr	r2, [r3, #0]
 8012050:	b10a      	cbz	r2, 8012056 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0xa>
 8012052:	4803      	ldr	r0, [pc, #12]	@ (8012060 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x14>)
 8012054:	4770      	bx	lr
 8012056:	4a03      	ldr	r2, [pc, #12]	@ (8012064 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x18>)
 8012058:	4801      	ldr	r0, [pc, #4]	@ (8012060 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x14>)
 801205a:	6812      	ldr	r2, [r2, #0]
 801205c:	601a      	str	r2, [r3, #0]
 801205e:	4770      	bx	lr
 8012060:	24000404 	.word	0x24000404
 8012064:	24000d2c 	.word	0x24000d2c

08012068 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport>:
 8012068:	4a02      	ldr	r2, [pc, #8]	@ (8012074 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0xc>)
 801206a:	4b03      	ldr	r3, [pc, #12]	@ (8012078 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x10>)
 801206c:	6812      	ldr	r2, [r2, #0]
 801206e:	601a      	str	r2, [r3, #0]
 8012070:	4770      	bx	lr
 8012072:	bf00      	nop
 8012074:	24000d2c 	.word	0x24000d2c
 8012078:	24000404 	.word	0x24000404

0801207c <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_init_function>:
 801207c:	f004 bd5c 	b.w	8016b38 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__init>

08012080 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_fini_function>:
 8012080:	f004 bd6c 	b.w	8016b5c <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__fini>

08012084 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_init_function>:
 8012084:	f004 bd6e 	b.w	8016b64 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__init>

08012088 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_fini_function>:
 8012088:	f004 bd70 	b.w	8016b6c <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__fini>

0801208c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request>:
 801208c:	b508      	push	{r3, lr}
 801208e:	f000 fd5d 	bl	8012b4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012092:	4b06      	ldr	r3, [pc, #24]	@ (80120ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8012094:	4906      	ldr	r1, [pc, #24]	@ (80120b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x24>)
 8012096:	681a      	ldr	r2, [r3, #0]
 8012098:	60c8      	str	r0, [r1, #12]
 801209a:	b10a      	cbz	r2, 80120a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x14>
 801209c:	4803      	ldr	r0, [pc, #12]	@ (80120ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 801209e:	bd08      	pop	{r3, pc}
 80120a0:	4a04      	ldr	r2, [pc, #16]	@ (80120b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x28>)
 80120a2:	4802      	ldr	r0, [pc, #8]	@ (80120ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 80120a4:	6812      	ldr	r2, [r2, #0]
 80120a6:	601a      	str	r2, [r3, #0]
 80120a8:	bd08      	pop	{r3, pc}
 80120aa:	bf00      	nop
 80120ac:	24000488 	.word	0x24000488
 80120b0:	24000410 	.word	0x24000410
 80120b4:	24000d30 	.word	0x24000d30

080120b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response>:
 80120b8:	4b04      	ldr	r3, [pc, #16]	@ (80120cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 80120ba:	681a      	ldr	r2, [r3, #0]
 80120bc:	b10a      	cbz	r2, 80120c2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0xa>
 80120be:	4803      	ldr	r0, [pc, #12]	@ (80120cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 80120c0:	4770      	bx	lr
 80120c2:	4a03      	ldr	r2, [pc, #12]	@ (80120d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x18>)
 80120c4:	4801      	ldr	r0, [pc, #4]	@ (80120cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 80120c6:	6812      	ldr	r2, [r2, #0]
 80120c8:	601a      	str	r2, [r3, #0]
 80120ca:	4770      	bx	lr
 80120cc:	240004d0 	.word	0x240004d0
 80120d0:	24000d30 	.word	0x24000d30

080120d4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand>:
 80120d4:	4b16      	ldr	r3, [pc, #88]	@ (8012130 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 80120d6:	681a      	ldr	r2, [r3, #0]
 80120d8:	b510      	push	{r4, lr}
 80120da:	b132      	cbz	r2, 80120ea <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x16>
 80120dc:	685c      	ldr	r4, [r3, #4]
 80120de:	68a3      	ldr	r3, [r4, #8]
 80120e0:	b153      	cbz	r3, 80120f8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x24>
 80120e2:	68e3      	ldr	r3, [r4, #12]
 80120e4:	b1a3      	cbz	r3, 8012110 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x3c>
 80120e6:	4812      	ldr	r0, [pc, #72]	@ (8012130 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 80120e8:	bd10      	pop	{r4, pc}
 80120ea:	4a12      	ldr	r2, [pc, #72]	@ (8012134 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x60>)
 80120ec:	685c      	ldr	r4, [r3, #4]
 80120ee:	6812      	ldr	r2, [r2, #0]
 80120f0:	601a      	str	r2, [r3, #0]
 80120f2:	68a3      	ldr	r3, [r4, #8]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d1f4      	bne.n	80120e2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0xe>
 80120f8:	f000 fd28 	bl	8012b4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80120fc:	4b0e      	ldr	r3, [pc, #56]	@ (8012138 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x64>)
 80120fe:	490f      	ldr	r1, [pc, #60]	@ (801213c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x68>)
 8012100:	681a      	ldr	r2, [r3, #0]
 8012102:	60c8      	str	r0, [r1, #12]
 8012104:	b17a      	cbz	r2, 8012126 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x52>
 8012106:	685b      	ldr	r3, [r3, #4]
 8012108:	60a3      	str	r3, [r4, #8]
 801210a:	68e3      	ldr	r3, [r4, #12]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d1ea      	bne.n	80120e6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x12>
 8012110:	4b0b      	ldr	r3, [pc, #44]	@ (8012140 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x6c>)
 8012112:	681a      	ldr	r2, [r3, #0]
 8012114:	b11a      	cbz	r2, 801211e <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x4a>
 8012116:	685b      	ldr	r3, [r3, #4]
 8012118:	4805      	ldr	r0, [pc, #20]	@ (8012130 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 801211a:	60e3      	str	r3, [r4, #12]
 801211c:	bd10      	pop	{r4, pc}
 801211e:	4a05      	ldr	r2, [pc, #20]	@ (8012134 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8012120:	6812      	ldr	r2, [r2, #0]
 8012122:	601a      	str	r2, [r3, #0]
 8012124:	e7f7      	b.n	8012116 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x42>
 8012126:	4a03      	ldr	r2, [pc, #12]	@ (8012134 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8012128:	6812      	ldr	r2, [r2, #0]
 801212a:	601a      	str	r2, [r3, #0]
 801212c:	e7eb      	b.n	8012106 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x32>
 801212e:	bf00      	nop
 8012130:	240004ec 	.word	0x240004ec
 8012134:	24000d30 	.word	0x24000d30
 8012138:	24000488 	.word	0x24000488
 801213c:	24000410 	.word	0x24000410
 8012140:	240004d0 	.word	0x240004d0

08012144 <autoware_auto_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_init_function>:
 8012144:	f004 bd14 	b.w	8016b70 <autoware_auto_vehicle_msgs__msg__ControlModeReport__init>

08012148 <autoware_auto_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_fini_function>:
 8012148:	f004 bd26 	b.w	8016b98 <autoware_auto_vehicle_msgs__msg__ControlModeReport__fini>

0801214c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport>:
 801214c:	b508      	push	{r3, lr}
 801214e:	f000 fcfd 	bl	8012b4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012152:	4b06      	ldr	r3, [pc, #24]	@ (801216c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x20>)
 8012154:	4906      	ldr	r1, [pc, #24]	@ (8012170 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x24>)
 8012156:	681a      	ldr	r2, [r3, #0]
 8012158:	60c8      	str	r0, [r1, #12]
 801215a:	b10a      	cbz	r2, 8012160 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x14>
 801215c:	4803      	ldr	r0, [pc, #12]	@ (801216c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x20>)
 801215e:	bd08      	pop	{r3, pc}
 8012160:	4a04      	ldr	r2, [pc, #16]	@ (8012174 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x28>)
 8012162:	4802      	ldr	r0, [pc, #8]	@ (801216c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x20>)
 8012164:	6812      	ldr	r2, [r2, #0]
 8012166:	601a      	str	r2, [r3, #0]
 8012168:	bd08      	pop	{r3, pc}
 801216a:	bf00      	nop
 801216c:	24000570 	.word	0x24000570
 8012170:	240004f8 	.word	0x240004f8
 8012174:	24000d30 	.word	0x24000d30

08012178 <autoware_auto_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_init_function>:
 8012178:	f004 bd12 	b.w	8016ba0 <autoware_auto_vehicle_msgs__msg__GearCommand__init>

0801217c <autoware_auto_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_fini_function>:
 801217c:	f004 bd24 	b.w	8016bc8 <autoware_auto_vehicle_msgs__msg__GearCommand__fini>

08012180 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand>:
 8012180:	b508      	push	{r3, lr}
 8012182:	f000 fce3 	bl	8012b4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012186:	4b06      	ldr	r3, [pc, #24]	@ (80121a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x20>)
 8012188:	4906      	ldr	r1, [pc, #24]	@ (80121a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x24>)
 801218a:	681a      	ldr	r2, [r3, #0]
 801218c:	60c8      	str	r0, [r1, #12]
 801218e:	b10a      	cbz	r2, 8012194 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x14>
 8012190:	4803      	ldr	r0, [pc, #12]	@ (80121a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x20>)
 8012192:	bd08      	pop	{r3, pc}
 8012194:	4a04      	ldr	r2, [pc, #16]	@ (80121a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x28>)
 8012196:	4802      	ldr	r0, [pc, #8]	@ (80121a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x20>)
 8012198:	6812      	ldr	r2, [r2, #0]
 801219a:	601a      	str	r2, [r3, #0]
 801219c:	bd08      	pop	{r3, pc}
 801219e:	bf00      	nop
 80121a0:	240005f4 	.word	0x240005f4
 80121a4:	2400057c 	.word	0x2400057c
 80121a8:	24000d30 	.word	0x24000d30

080121ac <autoware_auto_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_init_function>:
 80121ac:	f004 bd10 	b.w	8016bd0 <autoware_auto_vehicle_msgs__msg__GearReport__init>

080121b0 <autoware_auto_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_fini_function>:
 80121b0:	f004 bd22 	b.w	8016bf8 <autoware_auto_vehicle_msgs__msg__GearReport__fini>

080121b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport>:
 80121b4:	b508      	push	{r3, lr}
 80121b6:	f000 fcc9 	bl	8012b4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80121ba:	4b06      	ldr	r3, [pc, #24]	@ (80121d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x20>)
 80121bc:	4906      	ldr	r1, [pc, #24]	@ (80121d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x24>)
 80121be:	681a      	ldr	r2, [r3, #0]
 80121c0:	60c8      	str	r0, [r1, #12]
 80121c2:	b10a      	cbz	r2, 80121c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x14>
 80121c4:	4803      	ldr	r0, [pc, #12]	@ (80121d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x20>)
 80121c6:	bd08      	pop	{r3, pc}
 80121c8:	4a04      	ldr	r2, [pc, #16]	@ (80121dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x28>)
 80121ca:	4802      	ldr	r0, [pc, #8]	@ (80121d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x20>)
 80121cc:	6812      	ldr	r2, [r2, #0]
 80121ce:	601a      	str	r2, [r3, #0]
 80121d0:	bd08      	pop	{r3, pc}
 80121d2:	bf00      	nop
 80121d4:	24000678 	.word	0x24000678
 80121d8:	24000600 	.word	0x24000600
 80121dc:	24000d30 	.word	0x24000d30

080121e0 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_init_function>:
 80121e0:	f004 bd0e 	b.w	8016c00 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__init>

080121e4 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_fini_function>:
 80121e4:	f004 bd20 	b.w	8016c28 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__fini>

080121e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand>:
 80121e8:	b508      	push	{r3, lr}
 80121ea:	f000 fcaf 	bl	8012b4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80121ee:	4b06      	ldr	r3, [pc, #24]	@ (8012208 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 80121f0:	4906      	ldr	r1, [pc, #24]	@ (801220c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x24>)
 80121f2:	681a      	ldr	r2, [r3, #0]
 80121f4:	60c8      	str	r0, [r1, #12]
 80121f6:	b10a      	cbz	r2, 80121fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x14>
 80121f8:	4803      	ldr	r0, [pc, #12]	@ (8012208 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 80121fa:	bd08      	pop	{r3, pc}
 80121fc:	4a04      	ldr	r2, [pc, #16]	@ (8012210 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x28>)
 80121fe:	4802      	ldr	r0, [pc, #8]	@ (8012208 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8012200:	6812      	ldr	r2, [r2, #0]
 8012202:	601a      	str	r2, [r3, #0]
 8012204:	bd08      	pop	{r3, pc}
 8012206:	bf00      	nop
 8012208:	240006fc 	.word	0x240006fc
 801220c:	24000684 	.word	0x24000684
 8012210:	24000d30 	.word	0x24000d30

08012214 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_init_function>:
 8012214:	f004 bd0c 	b.w	8016c30 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__init>

08012218 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_fini_function>:
 8012218:	f004 bd1e 	b.w	8016c58 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__fini>

0801221c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport>:
 801221c:	b508      	push	{r3, lr}
 801221e:	f000 fc95 	bl	8012b4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012222:	4b06      	ldr	r3, [pc, #24]	@ (801223c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8012224:	4906      	ldr	r1, [pc, #24]	@ (8012240 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x24>)
 8012226:	681a      	ldr	r2, [r3, #0]
 8012228:	60c8      	str	r0, [r1, #12]
 801222a:	b10a      	cbz	r2, 8012230 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x14>
 801222c:	4803      	ldr	r0, [pc, #12]	@ (801223c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x20>)
 801222e:	bd08      	pop	{r3, pc}
 8012230:	4a04      	ldr	r2, [pc, #16]	@ (8012244 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x28>)
 8012232:	4802      	ldr	r0, [pc, #8]	@ (801223c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8012234:	6812      	ldr	r2, [r2, #0]
 8012236:	601a      	str	r2, [r3, #0]
 8012238:	bd08      	pop	{r3, pc}
 801223a:	bf00      	nop
 801223c:	24000780 	.word	0x24000780
 8012240:	24000708 	.word	0x24000708
 8012244:	24000d30 	.word	0x24000d30

08012248 <autoware_auto_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_init_function>:
 8012248:	f004 bd0a 	b.w	8016c60 <autoware_auto_vehicle_msgs__msg__SteeringReport__init>

0801224c <autoware_auto_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_fini_function>:
 801224c:	f004 bd1c 	b.w	8016c88 <autoware_auto_vehicle_msgs__msg__SteeringReport__fini>

08012250 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport>:
 8012250:	b508      	push	{r3, lr}
 8012252:	f000 fc7b 	bl	8012b4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012256:	4b06      	ldr	r3, [pc, #24]	@ (8012270 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x20>)
 8012258:	4906      	ldr	r1, [pc, #24]	@ (8012274 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x24>)
 801225a:	681a      	ldr	r2, [r3, #0]
 801225c:	60c8      	str	r0, [r1, #12]
 801225e:	b10a      	cbz	r2, 8012264 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x14>
 8012260:	4803      	ldr	r0, [pc, #12]	@ (8012270 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x20>)
 8012262:	bd08      	pop	{r3, pc}
 8012264:	4a04      	ldr	r2, [pc, #16]	@ (8012278 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x28>)
 8012266:	4802      	ldr	r0, [pc, #8]	@ (8012270 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x20>)
 8012268:	6812      	ldr	r2, [r2, #0]
 801226a:	601a      	str	r2, [r3, #0]
 801226c:	bd08      	pop	{r3, pc}
 801226e:	bf00      	nop
 8012270:	24000804 	.word	0x24000804
 8012274:	2400078c 	.word	0x2400078c
 8012278:	24000d30 	.word	0x24000d30

0801227c <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_init_function>:
 801227c:	f004 bd08 	b.w	8016c90 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__init>

08012280 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_fini_function>:
 8012280:	f004 bd1a 	b.w	8016cb8 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__fini>

08012284 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8012284:	b508      	push	{r3, lr}
 8012286:	f000 fc61 	bl	8012b4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801228a:	4b06      	ldr	r3, [pc, #24]	@ (80122a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 801228c:	4906      	ldr	r1, [pc, #24]	@ (80122a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x24>)
 801228e:	681a      	ldr	r2, [r3, #0]
 8012290:	60c8      	str	r0, [r1, #12]
 8012292:	b10a      	cbz	r2, 8012298 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>
 8012294:	4803      	ldr	r0, [pc, #12]	@ (80122a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8012296:	bd08      	pop	{r3, pc}
 8012298:	4a04      	ldr	r2, [pc, #16]	@ (80122ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x28>)
 801229a:	4802      	ldr	r0, [pc, #8]	@ (80122a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 801229c:	6812      	ldr	r2, [r2, #0]
 801229e:	601a      	str	r2, [r3, #0]
 80122a0:	bd08      	pop	{r3, pc}
 80122a2:	bf00      	nop
 80122a4:	24000888 	.word	0x24000888
 80122a8:	24000810 	.word	0x24000810
 80122ac:	24000d30 	.word	0x24000d30

080122b0 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_init_function>:
 80122b0:	f004 bd06 	b.w	8016cc0 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__init>

080122b4 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_fini_function>:
 80122b4:	f004 bd18 	b.w	8016ce8 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__fini>

080122b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>:
 80122b8:	b508      	push	{r3, lr}
 80122ba:	f000 fc47 	bl	8012b4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80122be:	4b06      	ldr	r3, [pc, #24]	@ (80122d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 80122c0:	4906      	ldr	r1, [pc, #24]	@ (80122dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x24>)
 80122c2:	681a      	ldr	r2, [r3, #0]
 80122c4:	60c8      	str	r0, [r1, #12]
 80122c6:	b10a      	cbz	r2, 80122cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x14>
 80122c8:	4803      	ldr	r0, [pc, #12]	@ (80122d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 80122ca:	bd08      	pop	{r3, pc}
 80122cc:	4a04      	ldr	r2, [pc, #16]	@ (80122e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x28>)
 80122ce:	4802      	ldr	r0, [pc, #8]	@ (80122d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 80122d0:	6812      	ldr	r2, [r2, #0]
 80122d2:	601a      	str	r2, [r3, #0]
 80122d4:	bd08      	pop	{r3, pc}
 80122d6:	bf00      	nop
 80122d8:	2400090c 	.word	0x2400090c
 80122dc:	24000894 	.word	0x24000894
 80122e0:	24000d30 	.word	0x24000d30

080122e4 <autoware_auto_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_init_function>:
 80122e4:	f004 bd04 	b.w	8016cf0 <autoware_auto_vehicle_msgs__msg__VelocityReport__init>

080122e8 <autoware_auto_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_fini_function>:
 80122e8:	f004 bd18 	b.w	8016d1c <autoware_auto_vehicle_msgs__msg__VelocityReport__fini>

080122ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport>:
 80122ec:	b508      	push	{r3, lr}
 80122ee:	f004 f897 	bl	8016420 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 80122f2:	4b06      	ldr	r3, [pc, #24]	@ (801230c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x20>)
 80122f4:	4906      	ldr	r1, [pc, #24]	@ (8012310 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x24>)
 80122f6:	681a      	ldr	r2, [r3, #0]
 80122f8:	60c8      	str	r0, [r1, #12]
 80122fa:	b10a      	cbz	r2, 8012300 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x14>
 80122fc:	4803      	ldr	r0, [pc, #12]	@ (801230c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x20>)
 80122fe:	bd08      	pop	{r3, pc}
 8012300:	4a04      	ldr	r2, [pc, #16]	@ (8012314 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x28>)
 8012302:	4802      	ldr	r0, [pc, #8]	@ (801230c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x20>)
 8012304:	6812      	ldr	r2, [r2, #0]
 8012306:	601a      	str	r2, [r3, #0]
 8012308:	bd08      	pop	{r3, pc}
 801230a:	bf00      	nop
 801230c:	24000a08 	.word	0x24000a08
 8012310:	24000918 	.word	0x24000918
 8012314:	24000d30 	.word	0x24000d30

08012318 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request>:
 8012318:	4800      	ldr	r0, [pc, #0]	@ (801231c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x4>)
 801231a:	4770      	bx	lr
 801231c:	24000a30 	.word	0x24000a30

08012320 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response>:
 8012320:	4800      	ldr	r0, [pc, #0]	@ (8012324 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x4>)
 8012322:	4770      	bx	lr
 8012324:	24000a3c 	.word	0x24000a3c

08012328 <_ControlModeCommand_Response__max_serialized_size>:
 8012328:	2101      	movs	r1, #1
 801232a:	2000      	movs	r0, #0
 801232c:	b508      	push	{r3, lr}
 801232e:	f001 ff1f 	bl	8014170 <ucdr_alignment>
 8012332:	3001      	adds	r0, #1
 8012334:	bd08      	pop	{r3, pc}
 8012336:	bf00      	nop

08012338 <_ControlModeCommand_Response__cdr_deserialize>:
 8012338:	b109      	cbz	r1, 801233e <_ControlModeCommand_Response__cdr_deserialize+0x6>
 801233a:	f000 bc93 	b.w	8012c64 <ucdr_deserialize_bool>
 801233e:	4608      	mov	r0, r1
 8012340:	4770      	bx	lr
 8012342:	bf00      	nop

08012344 <get_serialized_size_autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request>:
 8012344:	b538      	push	{r3, r4, r5, lr}
 8012346:	b158      	cbz	r0, 8012360 <get_serialized_size_autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>
 8012348:	460d      	mov	r5, r1
 801234a:	f000 fc0d 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 801234e:	2101      	movs	r1, #1
 8012350:	182c      	adds	r4, r5, r0
 8012352:	f1c5 0501 	rsb	r5, r5, #1
 8012356:	4620      	mov	r0, r4
 8012358:	f001 ff0a 	bl	8014170 <ucdr_alignment>
 801235c:	4428      	add	r0, r5
 801235e:	4420      	add	r0, r4
 8012360:	bd38      	pop	{r3, r4, r5, pc}
 8012362:	bf00      	nop

08012364 <get_serialized_size_autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response>:
 8012364:	b138      	cbz	r0, 8012376 <get_serialized_size_autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x12>
 8012366:	b508      	push	{r3, lr}
 8012368:	460b      	mov	r3, r1
 801236a:	2101      	movs	r1, #1
 801236c:	4618      	mov	r0, r3
 801236e:	f001 feff 	bl	8014170 <ucdr_alignment>
 8012372:	3001      	adds	r0, #1
 8012374:	bd08      	pop	{r3, pc}
 8012376:	4770      	bx	lr

08012378 <_ControlModeCommand_Request__cdr_deserialize>:
 8012378:	b538      	push	{r3, r4, r5, lr}
 801237a:	460c      	mov	r4, r1
 801237c:	b179      	cbz	r1, 801239e <_ControlModeCommand_Request__cdr_deserialize+0x26>
 801237e:	4605      	mov	r5, r0
 8012380:	f000 fc56 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012384:	4603      	mov	r3, r0
 8012386:	4621      	mov	r1, r4
 8012388:	4628      	mov	r0, r5
 801238a:	685b      	ldr	r3, [r3, #4]
 801238c:	68db      	ldr	r3, [r3, #12]
 801238e:	4798      	blx	r3
 8012390:	f104 0108 	add.w	r1, r4, #8
 8012394:	4628      	mov	r0, r5
 8012396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801239a:	f000 bc91 	b.w	8012cc0 <ucdr_deserialize_uint8_t>
 801239e:	4608      	mov	r0, r1
 80123a0:	bd38      	pop	{r3, r4, r5, pc}
 80123a2:	bf00      	nop

080123a4 <_ControlModeCommand_Request__cdr_serialize>:
 80123a4:	b180      	cbz	r0, 80123c8 <_ControlModeCommand_Request__cdr_serialize+0x24>
 80123a6:	b538      	push	{r3, r4, r5, lr}
 80123a8:	4604      	mov	r4, r0
 80123aa:	460d      	mov	r5, r1
 80123ac:	f000 fc40 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80123b0:	4603      	mov	r3, r0
 80123b2:	4629      	mov	r1, r5
 80123b4:	4620      	mov	r0, r4
 80123b6:	685b      	ldr	r3, [r3, #4]
 80123b8:	689b      	ldr	r3, [r3, #8]
 80123ba:	4798      	blx	r3
 80123bc:	7a21      	ldrb	r1, [r4, #8]
 80123be:	4628      	mov	r0, r5
 80123c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80123c4:	f000 bc66 	b.w	8012c94 <ucdr_serialize_uint8_t>
 80123c8:	4770      	bx	lr
 80123ca:	bf00      	nop

080123cc <_ControlModeCommand_Response__cdr_serialize>:
 80123cc:	460a      	mov	r2, r1
 80123ce:	b118      	cbz	r0, 80123d8 <_ControlModeCommand_Response__cdr_serialize+0xc>
 80123d0:	7801      	ldrb	r1, [r0, #0]
 80123d2:	4610      	mov	r0, r2
 80123d4:	f000 bc30 	b.w	8012c38 <ucdr_serialize_bool>
 80123d8:	4770      	bx	lr
 80123da:	bf00      	nop

080123dc <_ControlModeCommand_Response__get_serialized_size>:
 80123dc:	b130      	cbz	r0, 80123ec <_ControlModeCommand_Response__get_serialized_size+0x10>
 80123de:	2101      	movs	r1, #1
 80123e0:	2000      	movs	r0, #0
 80123e2:	b508      	push	{r3, lr}
 80123e4:	f001 fec4 	bl	8014170 <ucdr_alignment>
 80123e8:	3001      	adds	r0, #1
 80123ea:	bd08      	pop	{r3, pc}
 80123ec:	4770      	bx	lr
 80123ee:	bf00      	nop

080123f0 <_ControlModeCommand_Request__get_serialized_size>:
 80123f0:	b150      	cbz	r0, 8012408 <_ControlModeCommand_Request__get_serialized_size+0x18>
 80123f2:	2100      	movs	r1, #0
 80123f4:	b510      	push	{r4, lr}
 80123f6:	f000 fbb7 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 80123fa:	4604      	mov	r4, r0
 80123fc:	2101      	movs	r1, #1
 80123fe:	f001 feb7 	bl	8014170 <ucdr_alignment>
 8012402:	4420      	add	r0, r4
 8012404:	3001      	adds	r0, #1
 8012406:	bd10      	pop	{r4, pc}
 8012408:	4770      	bx	lr
 801240a:	bf00      	nop

0801240c <_ControlModeCommand_Request__max_serialized_size>:
 801240c:	b510      	push	{r4, lr}
 801240e:	b082      	sub	sp, #8
 8012410:	2401      	movs	r4, #1
 8012412:	2100      	movs	r1, #0
 8012414:	f10d 0007 	add.w	r0, sp, #7
 8012418:	f88d 4007 	strb.w	r4, [sp, #7]
 801241c:	f000 fbf4 	bl	8012c08 <max_serialized_size_builtin_interfaces__msg__Time>
 8012420:	4621      	mov	r1, r4
 8012422:	4604      	mov	r4, r0
 8012424:	f001 fea4 	bl	8014170 <ucdr_alignment>
 8012428:	4420      	add	r0, r4
 801242a:	3001      	adds	r0, #1
 801242c:	b002      	add	sp, #8
 801242e:	bd10      	pop	{r4, pc}

08012430 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand>:
 8012430:	4800      	ldr	r0, [pc, #0]	@ (8012434 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x4>)
 8012432:	4770      	bx	lr
 8012434:	24000a24 	.word	0x24000a24

08012438 <get_serialized_size_autoware_auto_vehicle_msgs__msg__ControlModeReport>:
 8012438:	b538      	push	{r3, r4, r5, lr}
 801243a:	b158      	cbz	r0, 8012454 <get_serialized_size_autoware_auto_vehicle_msgs__msg__ControlModeReport+0x1c>
 801243c:	460d      	mov	r5, r1
 801243e:	f000 fb93 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 8012442:	2101      	movs	r1, #1
 8012444:	182c      	adds	r4, r5, r0
 8012446:	f1c5 0501 	rsb	r5, r5, #1
 801244a:	4620      	mov	r0, r4
 801244c:	f001 fe90 	bl	8014170 <ucdr_alignment>
 8012450:	4428      	add	r0, r5
 8012452:	4420      	add	r0, r4
 8012454:	bd38      	pop	{r3, r4, r5, pc}
 8012456:	bf00      	nop

08012458 <_ControlModeReport__cdr_deserialize>:
 8012458:	b538      	push	{r3, r4, r5, lr}
 801245a:	460c      	mov	r4, r1
 801245c:	b179      	cbz	r1, 801247e <_ControlModeReport__cdr_deserialize+0x26>
 801245e:	4605      	mov	r5, r0
 8012460:	f000 fbe6 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012464:	4603      	mov	r3, r0
 8012466:	4621      	mov	r1, r4
 8012468:	4628      	mov	r0, r5
 801246a:	685b      	ldr	r3, [r3, #4]
 801246c:	68db      	ldr	r3, [r3, #12]
 801246e:	4798      	blx	r3
 8012470:	f104 0108 	add.w	r1, r4, #8
 8012474:	4628      	mov	r0, r5
 8012476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801247a:	f000 bc21 	b.w	8012cc0 <ucdr_deserialize_uint8_t>
 801247e:	4608      	mov	r0, r1
 8012480:	bd38      	pop	{r3, r4, r5, pc}
 8012482:	bf00      	nop

08012484 <_ControlModeReport__cdr_serialize>:
 8012484:	b180      	cbz	r0, 80124a8 <_ControlModeReport__cdr_serialize+0x24>
 8012486:	b538      	push	{r3, r4, r5, lr}
 8012488:	4604      	mov	r4, r0
 801248a:	460d      	mov	r5, r1
 801248c:	f000 fbd0 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012490:	4603      	mov	r3, r0
 8012492:	4629      	mov	r1, r5
 8012494:	4620      	mov	r0, r4
 8012496:	685b      	ldr	r3, [r3, #4]
 8012498:	689b      	ldr	r3, [r3, #8]
 801249a:	4798      	blx	r3
 801249c:	7a21      	ldrb	r1, [r4, #8]
 801249e:	4628      	mov	r0, r5
 80124a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124a4:	f000 bbf6 	b.w	8012c94 <ucdr_serialize_uint8_t>
 80124a8:	4770      	bx	lr
 80124aa:	bf00      	nop

080124ac <_ControlModeReport__get_serialized_size>:
 80124ac:	b150      	cbz	r0, 80124c4 <_ControlModeReport__get_serialized_size+0x18>
 80124ae:	2100      	movs	r1, #0
 80124b0:	b510      	push	{r4, lr}
 80124b2:	f000 fb59 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 80124b6:	4604      	mov	r4, r0
 80124b8:	2101      	movs	r1, #1
 80124ba:	f001 fe59 	bl	8014170 <ucdr_alignment>
 80124be:	4420      	add	r0, r4
 80124c0:	3001      	adds	r0, #1
 80124c2:	bd10      	pop	{r4, pc}
 80124c4:	4770      	bx	lr
 80124c6:	bf00      	nop

080124c8 <_ControlModeReport__max_serialized_size>:
 80124c8:	b510      	push	{r4, lr}
 80124ca:	b082      	sub	sp, #8
 80124cc:	2401      	movs	r4, #1
 80124ce:	2100      	movs	r1, #0
 80124d0:	f10d 0007 	add.w	r0, sp, #7
 80124d4:	f88d 4007 	strb.w	r4, [sp, #7]
 80124d8:	f000 fb96 	bl	8012c08 <max_serialized_size_builtin_interfaces__msg__Time>
 80124dc:	4621      	mov	r1, r4
 80124de:	4604      	mov	r4, r0
 80124e0:	f001 fe46 	bl	8014170 <ucdr_alignment>
 80124e4:	4420      	add	r0, r4
 80124e6:	3001      	adds	r0, #1
 80124e8:	b002      	add	sp, #8
 80124ea:	bd10      	pop	{r4, pc}

080124ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport>:
 80124ec:	4800      	ldr	r0, [pc, #0]	@ (80124f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x4>)
 80124ee:	4770      	bx	lr
 80124f0:	24000a80 	.word	0x24000a80

080124f4 <get_serialized_size_autoware_auto_vehicle_msgs__msg__GearCommand>:
 80124f4:	b538      	push	{r3, r4, r5, lr}
 80124f6:	b158      	cbz	r0, 8012510 <get_serialized_size_autoware_auto_vehicle_msgs__msg__GearCommand+0x1c>
 80124f8:	460d      	mov	r5, r1
 80124fa:	f000 fb35 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 80124fe:	2101      	movs	r1, #1
 8012500:	182c      	adds	r4, r5, r0
 8012502:	f1c5 0501 	rsb	r5, r5, #1
 8012506:	4620      	mov	r0, r4
 8012508:	f001 fe32 	bl	8014170 <ucdr_alignment>
 801250c:	4428      	add	r0, r5
 801250e:	4420      	add	r0, r4
 8012510:	bd38      	pop	{r3, r4, r5, pc}
 8012512:	bf00      	nop

08012514 <_GearCommand__cdr_deserialize>:
 8012514:	b538      	push	{r3, r4, r5, lr}
 8012516:	460c      	mov	r4, r1
 8012518:	b179      	cbz	r1, 801253a <_GearCommand__cdr_deserialize+0x26>
 801251a:	4605      	mov	r5, r0
 801251c:	f000 fb88 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012520:	4603      	mov	r3, r0
 8012522:	4621      	mov	r1, r4
 8012524:	4628      	mov	r0, r5
 8012526:	685b      	ldr	r3, [r3, #4]
 8012528:	68db      	ldr	r3, [r3, #12]
 801252a:	4798      	blx	r3
 801252c:	f104 0108 	add.w	r1, r4, #8
 8012530:	4628      	mov	r0, r5
 8012532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012536:	f000 bbc3 	b.w	8012cc0 <ucdr_deserialize_uint8_t>
 801253a:	4608      	mov	r0, r1
 801253c:	bd38      	pop	{r3, r4, r5, pc}
 801253e:	bf00      	nop

08012540 <_GearCommand__cdr_serialize>:
 8012540:	b180      	cbz	r0, 8012564 <_GearCommand__cdr_serialize+0x24>
 8012542:	b538      	push	{r3, r4, r5, lr}
 8012544:	4604      	mov	r4, r0
 8012546:	460d      	mov	r5, r1
 8012548:	f000 fb72 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801254c:	4603      	mov	r3, r0
 801254e:	4629      	mov	r1, r5
 8012550:	4620      	mov	r0, r4
 8012552:	685b      	ldr	r3, [r3, #4]
 8012554:	689b      	ldr	r3, [r3, #8]
 8012556:	4798      	blx	r3
 8012558:	7a21      	ldrb	r1, [r4, #8]
 801255a:	4628      	mov	r0, r5
 801255c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012560:	f000 bb98 	b.w	8012c94 <ucdr_serialize_uint8_t>
 8012564:	4770      	bx	lr
 8012566:	bf00      	nop

08012568 <_GearCommand__get_serialized_size>:
 8012568:	b150      	cbz	r0, 8012580 <_GearCommand__get_serialized_size+0x18>
 801256a:	2100      	movs	r1, #0
 801256c:	b510      	push	{r4, lr}
 801256e:	f000 fafb 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 8012572:	4604      	mov	r4, r0
 8012574:	2101      	movs	r1, #1
 8012576:	f001 fdfb 	bl	8014170 <ucdr_alignment>
 801257a:	4420      	add	r0, r4
 801257c:	3001      	adds	r0, #1
 801257e:	bd10      	pop	{r4, pc}
 8012580:	4770      	bx	lr
 8012582:	bf00      	nop

08012584 <_GearCommand__max_serialized_size>:
 8012584:	b510      	push	{r4, lr}
 8012586:	b082      	sub	sp, #8
 8012588:	2401      	movs	r4, #1
 801258a:	2100      	movs	r1, #0
 801258c:	f10d 0007 	add.w	r0, sp, #7
 8012590:	f88d 4007 	strb.w	r4, [sp, #7]
 8012594:	f000 fb38 	bl	8012c08 <max_serialized_size_builtin_interfaces__msg__Time>
 8012598:	4621      	mov	r1, r4
 801259a:	4604      	mov	r4, r0
 801259c:	f001 fde8 	bl	8014170 <ucdr_alignment>
 80125a0:	4420      	add	r0, r4
 80125a2:	3001      	adds	r0, #1
 80125a4:	b002      	add	sp, #8
 80125a6:	bd10      	pop	{r4, pc}

080125a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand>:
 80125a8:	4800      	ldr	r0, [pc, #0]	@ (80125ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x4>)
 80125aa:	4770      	bx	lr
 80125ac:	24000aa8 	.word	0x24000aa8

080125b0 <get_serialized_size_autoware_auto_vehicle_msgs__msg__GearReport>:
 80125b0:	b538      	push	{r3, r4, r5, lr}
 80125b2:	b158      	cbz	r0, 80125cc <get_serialized_size_autoware_auto_vehicle_msgs__msg__GearReport+0x1c>
 80125b4:	460d      	mov	r5, r1
 80125b6:	f000 fad7 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 80125ba:	2101      	movs	r1, #1
 80125bc:	182c      	adds	r4, r5, r0
 80125be:	f1c5 0501 	rsb	r5, r5, #1
 80125c2:	4620      	mov	r0, r4
 80125c4:	f001 fdd4 	bl	8014170 <ucdr_alignment>
 80125c8:	4428      	add	r0, r5
 80125ca:	4420      	add	r0, r4
 80125cc:	bd38      	pop	{r3, r4, r5, pc}
 80125ce:	bf00      	nop

080125d0 <_GearReport__cdr_deserialize>:
 80125d0:	b538      	push	{r3, r4, r5, lr}
 80125d2:	460c      	mov	r4, r1
 80125d4:	b179      	cbz	r1, 80125f6 <_GearReport__cdr_deserialize+0x26>
 80125d6:	4605      	mov	r5, r0
 80125d8:	f000 fb2a 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80125dc:	4603      	mov	r3, r0
 80125de:	4621      	mov	r1, r4
 80125e0:	4628      	mov	r0, r5
 80125e2:	685b      	ldr	r3, [r3, #4]
 80125e4:	68db      	ldr	r3, [r3, #12]
 80125e6:	4798      	blx	r3
 80125e8:	f104 0108 	add.w	r1, r4, #8
 80125ec:	4628      	mov	r0, r5
 80125ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125f2:	f000 bb65 	b.w	8012cc0 <ucdr_deserialize_uint8_t>
 80125f6:	4608      	mov	r0, r1
 80125f8:	bd38      	pop	{r3, r4, r5, pc}
 80125fa:	bf00      	nop

080125fc <_GearReport__cdr_serialize>:
 80125fc:	b180      	cbz	r0, 8012620 <_GearReport__cdr_serialize+0x24>
 80125fe:	b538      	push	{r3, r4, r5, lr}
 8012600:	4604      	mov	r4, r0
 8012602:	460d      	mov	r5, r1
 8012604:	f000 fb14 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012608:	4603      	mov	r3, r0
 801260a:	4629      	mov	r1, r5
 801260c:	4620      	mov	r0, r4
 801260e:	685b      	ldr	r3, [r3, #4]
 8012610:	689b      	ldr	r3, [r3, #8]
 8012612:	4798      	blx	r3
 8012614:	7a21      	ldrb	r1, [r4, #8]
 8012616:	4628      	mov	r0, r5
 8012618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801261c:	f000 bb3a 	b.w	8012c94 <ucdr_serialize_uint8_t>
 8012620:	4770      	bx	lr
 8012622:	bf00      	nop

08012624 <_GearReport__get_serialized_size>:
 8012624:	b150      	cbz	r0, 801263c <_GearReport__get_serialized_size+0x18>
 8012626:	2100      	movs	r1, #0
 8012628:	b510      	push	{r4, lr}
 801262a:	f000 fa9d 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 801262e:	4604      	mov	r4, r0
 8012630:	2101      	movs	r1, #1
 8012632:	f001 fd9d 	bl	8014170 <ucdr_alignment>
 8012636:	4420      	add	r0, r4
 8012638:	3001      	adds	r0, #1
 801263a:	bd10      	pop	{r4, pc}
 801263c:	4770      	bx	lr
 801263e:	bf00      	nop

08012640 <_GearReport__max_serialized_size>:
 8012640:	b510      	push	{r4, lr}
 8012642:	b082      	sub	sp, #8
 8012644:	2401      	movs	r4, #1
 8012646:	2100      	movs	r1, #0
 8012648:	f10d 0007 	add.w	r0, sp, #7
 801264c:	f88d 4007 	strb.w	r4, [sp, #7]
 8012650:	f000 fada 	bl	8012c08 <max_serialized_size_builtin_interfaces__msg__Time>
 8012654:	4621      	mov	r1, r4
 8012656:	4604      	mov	r4, r0
 8012658:	f001 fd8a 	bl	8014170 <ucdr_alignment>
 801265c:	4420      	add	r0, r4
 801265e:	3001      	adds	r0, #1
 8012660:	b002      	add	sp, #8
 8012662:	bd10      	pop	{r4, pc}

08012664 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport>:
 8012664:	4800      	ldr	r0, [pc, #0]	@ (8012668 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x4>)
 8012666:	4770      	bx	lr
 8012668:	24000ad0 	.word	0x24000ad0

0801266c <get_serialized_size_autoware_auto_vehicle_msgs__msg__HazardLightsCommand>:
 801266c:	b538      	push	{r3, r4, r5, lr}
 801266e:	b158      	cbz	r0, 8012688 <get_serialized_size_autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x1c>
 8012670:	460d      	mov	r5, r1
 8012672:	f000 fa79 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 8012676:	2101      	movs	r1, #1
 8012678:	182c      	adds	r4, r5, r0
 801267a:	f1c5 0501 	rsb	r5, r5, #1
 801267e:	4620      	mov	r0, r4
 8012680:	f001 fd76 	bl	8014170 <ucdr_alignment>
 8012684:	4428      	add	r0, r5
 8012686:	4420      	add	r0, r4
 8012688:	bd38      	pop	{r3, r4, r5, pc}
 801268a:	bf00      	nop

0801268c <_HazardLightsCommand__cdr_deserialize>:
 801268c:	b538      	push	{r3, r4, r5, lr}
 801268e:	460c      	mov	r4, r1
 8012690:	b179      	cbz	r1, 80126b2 <_HazardLightsCommand__cdr_deserialize+0x26>
 8012692:	4605      	mov	r5, r0
 8012694:	f000 facc 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012698:	4603      	mov	r3, r0
 801269a:	4621      	mov	r1, r4
 801269c:	4628      	mov	r0, r5
 801269e:	685b      	ldr	r3, [r3, #4]
 80126a0:	68db      	ldr	r3, [r3, #12]
 80126a2:	4798      	blx	r3
 80126a4:	f104 0108 	add.w	r1, r4, #8
 80126a8:	4628      	mov	r0, r5
 80126aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126ae:	f000 bb07 	b.w	8012cc0 <ucdr_deserialize_uint8_t>
 80126b2:	4608      	mov	r0, r1
 80126b4:	bd38      	pop	{r3, r4, r5, pc}
 80126b6:	bf00      	nop

080126b8 <_HazardLightsCommand__cdr_serialize>:
 80126b8:	b180      	cbz	r0, 80126dc <_HazardLightsCommand__cdr_serialize+0x24>
 80126ba:	b538      	push	{r3, r4, r5, lr}
 80126bc:	4604      	mov	r4, r0
 80126be:	460d      	mov	r5, r1
 80126c0:	f000 fab6 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80126c4:	4603      	mov	r3, r0
 80126c6:	4629      	mov	r1, r5
 80126c8:	4620      	mov	r0, r4
 80126ca:	685b      	ldr	r3, [r3, #4]
 80126cc:	689b      	ldr	r3, [r3, #8]
 80126ce:	4798      	blx	r3
 80126d0:	7a21      	ldrb	r1, [r4, #8]
 80126d2:	4628      	mov	r0, r5
 80126d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126d8:	f000 badc 	b.w	8012c94 <ucdr_serialize_uint8_t>
 80126dc:	4770      	bx	lr
 80126de:	bf00      	nop

080126e0 <_HazardLightsCommand__get_serialized_size>:
 80126e0:	b150      	cbz	r0, 80126f8 <_HazardLightsCommand__get_serialized_size+0x18>
 80126e2:	2100      	movs	r1, #0
 80126e4:	b510      	push	{r4, lr}
 80126e6:	f000 fa3f 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 80126ea:	4604      	mov	r4, r0
 80126ec:	2101      	movs	r1, #1
 80126ee:	f001 fd3f 	bl	8014170 <ucdr_alignment>
 80126f2:	4420      	add	r0, r4
 80126f4:	3001      	adds	r0, #1
 80126f6:	bd10      	pop	{r4, pc}
 80126f8:	4770      	bx	lr
 80126fa:	bf00      	nop

080126fc <_HazardLightsCommand__max_serialized_size>:
 80126fc:	b510      	push	{r4, lr}
 80126fe:	b082      	sub	sp, #8
 8012700:	2401      	movs	r4, #1
 8012702:	2100      	movs	r1, #0
 8012704:	f10d 0007 	add.w	r0, sp, #7
 8012708:	f88d 4007 	strb.w	r4, [sp, #7]
 801270c:	f000 fa7c 	bl	8012c08 <max_serialized_size_builtin_interfaces__msg__Time>
 8012710:	4621      	mov	r1, r4
 8012712:	4604      	mov	r4, r0
 8012714:	f001 fd2c 	bl	8014170 <ucdr_alignment>
 8012718:	4420      	add	r0, r4
 801271a:	3001      	adds	r0, #1
 801271c:	b002      	add	sp, #8
 801271e:	bd10      	pop	{r4, pc}

08012720 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand>:
 8012720:	4800      	ldr	r0, [pc, #0]	@ (8012724 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x4>)
 8012722:	4770      	bx	lr
 8012724:	24000af8 	.word	0x24000af8

08012728 <get_serialized_size_autoware_auto_vehicle_msgs__msg__HazardLightsReport>:
 8012728:	b538      	push	{r3, r4, r5, lr}
 801272a:	b158      	cbz	r0, 8012744 <get_serialized_size_autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x1c>
 801272c:	460d      	mov	r5, r1
 801272e:	f000 fa1b 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 8012732:	2101      	movs	r1, #1
 8012734:	182c      	adds	r4, r5, r0
 8012736:	f1c5 0501 	rsb	r5, r5, #1
 801273a:	4620      	mov	r0, r4
 801273c:	f001 fd18 	bl	8014170 <ucdr_alignment>
 8012740:	4428      	add	r0, r5
 8012742:	4420      	add	r0, r4
 8012744:	bd38      	pop	{r3, r4, r5, pc}
 8012746:	bf00      	nop

08012748 <_HazardLightsReport__cdr_deserialize>:
 8012748:	b538      	push	{r3, r4, r5, lr}
 801274a:	460c      	mov	r4, r1
 801274c:	b179      	cbz	r1, 801276e <_HazardLightsReport__cdr_deserialize+0x26>
 801274e:	4605      	mov	r5, r0
 8012750:	f000 fa6e 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012754:	4603      	mov	r3, r0
 8012756:	4621      	mov	r1, r4
 8012758:	4628      	mov	r0, r5
 801275a:	685b      	ldr	r3, [r3, #4]
 801275c:	68db      	ldr	r3, [r3, #12]
 801275e:	4798      	blx	r3
 8012760:	f104 0108 	add.w	r1, r4, #8
 8012764:	4628      	mov	r0, r5
 8012766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801276a:	f000 baa9 	b.w	8012cc0 <ucdr_deserialize_uint8_t>
 801276e:	4608      	mov	r0, r1
 8012770:	bd38      	pop	{r3, r4, r5, pc}
 8012772:	bf00      	nop

08012774 <_HazardLightsReport__cdr_serialize>:
 8012774:	b180      	cbz	r0, 8012798 <_HazardLightsReport__cdr_serialize+0x24>
 8012776:	b538      	push	{r3, r4, r5, lr}
 8012778:	4604      	mov	r4, r0
 801277a:	460d      	mov	r5, r1
 801277c:	f000 fa58 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012780:	4603      	mov	r3, r0
 8012782:	4629      	mov	r1, r5
 8012784:	4620      	mov	r0, r4
 8012786:	685b      	ldr	r3, [r3, #4]
 8012788:	689b      	ldr	r3, [r3, #8]
 801278a:	4798      	blx	r3
 801278c:	7a21      	ldrb	r1, [r4, #8]
 801278e:	4628      	mov	r0, r5
 8012790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012794:	f000 ba7e 	b.w	8012c94 <ucdr_serialize_uint8_t>
 8012798:	4770      	bx	lr
 801279a:	bf00      	nop

0801279c <_HazardLightsReport__get_serialized_size>:
 801279c:	b150      	cbz	r0, 80127b4 <_HazardLightsReport__get_serialized_size+0x18>
 801279e:	2100      	movs	r1, #0
 80127a0:	b510      	push	{r4, lr}
 80127a2:	f000 f9e1 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 80127a6:	4604      	mov	r4, r0
 80127a8:	2101      	movs	r1, #1
 80127aa:	f001 fce1 	bl	8014170 <ucdr_alignment>
 80127ae:	4420      	add	r0, r4
 80127b0:	3001      	adds	r0, #1
 80127b2:	bd10      	pop	{r4, pc}
 80127b4:	4770      	bx	lr
 80127b6:	bf00      	nop

080127b8 <_HazardLightsReport__max_serialized_size>:
 80127b8:	b510      	push	{r4, lr}
 80127ba:	b082      	sub	sp, #8
 80127bc:	2401      	movs	r4, #1
 80127be:	2100      	movs	r1, #0
 80127c0:	f10d 0007 	add.w	r0, sp, #7
 80127c4:	f88d 4007 	strb.w	r4, [sp, #7]
 80127c8:	f000 fa1e 	bl	8012c08 <max_serialized_size_builtin_interfaces__msg__Time>
 80127cc:	4621      	mov	r1, r4
 80127ce:	4604      	mov	r4, r0
 80127d0:	f001 fcce 	bl	8014170 <ucdr_alignment>
 80127d4:	4420      	add	r0, r4
 80127d6:	3001      	adds	r0, #1
 80127d8:	b002      	add	sp, #8
 80127da:	bd10      	pop	{r4, pc}

080127dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport>:
 80127dc:	4800      	ldr	r0, [pc, #0]	@ (80127e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x4>)
 80127de:	4770      	bx	lr
 80127e0:	24000b20 	.word	0x24000b20

080127e4 <get_serialized_size_autoware_auto_vehicle_msgs__msg__SteeringReport>:
 80127e4:	b538      	push	{r3, r4, r5, lr}
 80127e6:	b158      	cbz	r0, 8012800 <get_serialized_size_autoware_auto_vehicle_msgs__msg__SteeringReport+0x1c>
 80127e8:	460d      	mov	r5, r1
 80127ea:	f000 f9bd 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 80127ee:	2104      	movs	r1, #4
 80127f0:	182c      	adds	r4, r5, r0
 80127f2:	f1c5 0504 	rsb	r5, r5, #4
 80127f6:	4620      	mov	r0, r4
 80127f8:	f001 fcba 	bl	8014170 <ucdr_alignment>
 80127fc:	4428      	add	r0, r5
 80127fe:	4420      	add	r0, r4
 8012800:	bd38      	pop	{r3, r4, r5, pc}
 8012802:	bf00      	nop

08012804 <_SteeringReport__cdr_deserialize>:
 8012804:	b538      	push	{r3, r4, r5, lr}
 8012806:	460c      	mov	r4, r1
 8012808:	b179      	cbz	r1, 801282a <_SteeringReport__cdr_deserialize+0x26>
 801280a:	4605      	mov	r5, r0
 801280c:	f000 fa10 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012810:	4603      	mov	r3, r0
 8012812:	4621      	mov	r1, r4
 8012814:	4628      	mov	r0, r5
 8012816:	685b      	ldr	r3, [r3, #4]
 8012818:	68db      	ldr	r3, [r3, #12]
 801281a:	4798      	blx	r3
 801281c:	f104 0108 	add.w	r1, r4, #8
 8012820:	4628      	mov	r0, r5
 8012822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012826:	f001 ba25 	b.w	8013c74 <ucdr_deserialize_float>
 801282a:	4608      	mov	r0, r1
 801282c:	bd38      	pop	{r3, r4, r5, pc}
 801282e:	bf00      	nop

08012830 <_SteeringReport__cdr_serialize>:
 8012830:	b188      	cbz	r0, 8012856 <_SteeringReport__cdr_serialize+0x26>
 8012832:	b538      	push	{r3, r4, r5, lr}
 8012834:	4604      	mov	r4, r0
 8012836:	460d      	mov	r5, r1
 8012838:	f000 f9fa 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801283c:	4603      	mov	r3, r0
 801283e:	4629      	mov	r1, r5
 8012840:	4620      	mov	r0, r4
 8012842:	685b      	ldr	r3, [r3, #4]
 8012844:	689b      	ldr	r3, [r3, #8]
 8012846:	4798      	blx	r3
 8012848:	ed94 0a02 	vldr	s0, [r4, #8]
 801284c:	4628      	mov	r0, r5
 801284e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012852:	f001 b977 	b.w	8013b44 <ucdr_serialize_float>
 8012856:	4770      	bx	lr

08012858 <_SteeringReport__get_serialized_size>:
 8012858:	b150      	cbz	r0, 8012870 <_SteeringReport__get_serialized_size+0x18>
 801285a:	2100      	movs	r1, #0
 801285c:	b510      	push	{r4, lr}
 801285e:	f000 f983 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 8012862:	4604      	mov	r4, r0
 8012864:	2104      	movs	r1, #4
 8012866:	f001 fc83 	bl	8014170 <ucdr_alignment>
 801286a:	4420      	add	r0, r4
 801286c:	3004      	adds	r0, #4
 801286e:	bd10      	pop	{r4, pc}
 8012870:	4770      	bx	lr
 8012872:	bf00      	nop

08012874 <_SteeringReport__max_serialized_size>:
 8012874:	b510      	push	{r4, lr}
 8012876:	b082      	sub	sp, #8
 8012878:	2301      	movs	r3, #1
 801287a:	2100      	movs	r1, #0
 801287c:	f10d 0007 	add.w	r0, sp, #7
 8012880:	f88d 3007 	strb.w	r3, [sp, #7]
 8012884:	f000 f9c0 	bl	8012c08 <max_serialized_size_builtin_interfaces__msg__Time>
 8012888:	4604      	mov	r4, r0
 801288a:	2104      	movs	r1, #4
 801288c:	f001 fc70 	bl	8014170 <ucdr_alignment>
 8012890:	4420      	add	r0, r4
 8012892:	3004      	adds	r0, #4
 8012894:	b002      	add	sp, #8
 8012896:	bd10      	pop	{r4, pc}

08012898 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport>:
 8012898:	4800      	ldr	r0, [pc, #0]	@ (801289c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x4>)
 801289a:	4770      	bx	lr
 801289c:	24000b48 	.word	0x24000b48

080128a0 <get_serialized_size_autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>:
 80128a0:	b538      	push	{r3, r4, r5, lr}
 80128a2:	b158      	cbz	r0, 80128bc <get_serialized_size_autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x1c>
 80128a4:	460d      	mov	r5, r1
 80128a6:	f000 f95f 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 80128aa:	2101      	movs	r1, #1
 80128ac:	182c      	adds	r4, r5, r0
 80128ae:	f1c5 0501 	rsb	r5, r5, #1
 80128b2:	4620      	mov	r0, r4
 80128b4:	f001 fc5c 	bl	8014170 <ucdr_alignment>
 80128b8:	4428      	add	r0, r5
 80128ba:	4420      	add	r0, r4
 80128bc:	bd38      	pop	{r3, r4, r5, pc}
 80128be:	bf00      	nop

080128c0 <_TurnIndicatorsCommand__cdr_deserialize>:
 80128c0:	b538      	push	{r3, r4, r5, lr}
 80128c2:	460c      	mov	r4, r1
 80128c4:	b179      	cbz	r1, 80128e6 <_TurnIndicatorsCommand__cdr_deserialize+0x26>
 80128c6:	4605      	mov	r5, r0
 80128c8:	f000 f9b2 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80128cc:	4603      	mov	r3, r0
 80128ce:	4621      	mov	r1, r4
 80128d0:	4628      	mov	r0, r5
 80128d2:	685b      	ldr	r3, [r3, #4]
 80128d4:	68db      	ldr	r3, [r3, #12]
 80128d6:	4798      	blx	r3
 80128d8:	f104 0108 	add.w	r1, r4, #8
 80128dc:	4628      	mov	r0, r5
 80128de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80128e2:	f000 b9ed 	b.w	8012cc0 <ucdr_deserialize_uint8_t>
 80128e6:	4608      	mov	r0, r1
 80128e8:	bd38      	pop	{r3, r4, r5, pc}
 80128ea:	bf00      	nop

080128ec <_TurnIndicatorsCommand__cdr_serialize>:
 80128ec:	b180      	cbz	r0, 8012910 <_TurnIndicatorsCommand__cdr_serialize+0x24>
 80128ee:	b538      	push	{r3, r4, r5, lr}
 80128f0:	4604      	mov	r4, r0
 80128f2:	460d      	mov	r5, r1
 80128f4:	f000 f99c 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80128f8:	4603      	mov	r3, r0
 80128fa:	4629      	mov	r1, r5
 80128fc:	4620      	mov	r0, r4
 80128fe:	685b      	ldr	r3, [r3, #4]
 8012900:	689b      	ldr	r3, [r3, #8]
 8012902:	4798      	blx	r3
 8012904:	7a21      	ldrb	r1, [r4, #8]
 8012906:	4628      	mov	r0, r5
 8012908:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801290c:	f000 b9c2 	b.w	8012c94 <ucdr_serialize_uint8_t>
 8012910:	4770      	bx	lr
 8012912:	bf00      	nop

08012914 <_TurnIndicatorsCommand__get_serialized_size>:
 8012914:	b150      	cbz	r0, 801292c <_TurnIndicatorsCommand__get_serialized_size+0x18>
 8012916:	2100      	movs	r1, #0
 8012918:	b510      	push	{r4, lr}
 801291a:	f000 f925 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 801291e:	4604      	mov	r4, r0
 8012920:	2101      	movs	r1, #1
 8012922:	f001 fc25 	bl	8014170 <ucdr_alignment>
 8012926:	4420      	add	r0, r4
 8012928:	3001      	adds	r0, #1
 801292a:	bd10      	pop	{r4, pc}
 801292c:	4770      	bx	lr
 801292e:	bf00      	nop

08012930 <_TurnIndicatorsCommand__max_serialized_size>:
 8012930:	b510      	push	{r4, lr}
 8012932:	b082      	sub	sp, #8
 8012934:	2401      	movs	r4, #1
 8012936:	2100      	movs	r1, #0
 8012938:	f10d 0007 	add.w	r0, sp, #7
 801293c:	f88d 4007 	strb.w	r4, [sp, #7]
 8012940:	f000 f962 	bl	8012c08 <max_serialized_size_builtin_interfaces__msg__Time>
 8012944:	4621      	mov	r1, r4
 8012946:	4604      	mov	r4, r0
 8012948:	f001 fc12 	bl	8014170 <ucdr_alignment>
 801294c:	4420      	add	r0, r4
 801294e:	3001      	adds	r0, #1
 8012950:	b002      	add	sp, #8
 8012952:	bd10      	pop	{r4, pc}

08012954 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8012954:	4800      	ldr	r0, [pc, #0]	@ (8012958 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x4>)
 8012956:	4770      	bx	lr
 8012958:	24000b70 	.word	0x24000b70

0801295c <get_serialized_size_autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>:
 801295c:	b538      	push	{r3, r4, r5, lr}
 801295e:	b158      	cbz	r0, 8012978 <get_serialized_size_autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x1c>
 8012960:	460d      	mov	r5, r1
 8012962:	f000 f901 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 8012966:	2101      	movs	r1, #1
 8012968:	182c      	adds	r4, r5, r0
 801296a:	f1c5 0501 	rsb	r5, r5, #1
 801296e:	4620      	mov	r0, r4
 8012970:	f001 fbfe 	bl	8014170 <ucdr_alignment>
 8012974:	4428      	add	r0, r5
 8012976:	4420      	add	r0, r4
 8012978:	bd38      	pop	{r3, r4, r5, pc}
 801297a:	bf00      	nop

0801297c <_TurnIndicatorsReport__cdr_deserialize>:
 801297c:	b538      	push	{r3, r4, r5, lr}
 801297e:	460c      	mov	r4, r1
 8012980:	b179      	cbz	r1, 80129a2 <_TurnIndicatorsReport__cdr_deserialize+0x26>
 8012982:	4605      	mov	r5, r0
 8012984:	f000 f954 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012988:	4603      	mov	r3, r0
 801298a:	4621      	mov	r1, r4
 801298c:	4628      	mov	r0, r5
 801298e:	685b      	ldr	r3, [r3, #4]
 8012990:	68db      	ldr	r3, [r3, #12]
 8012992:	4798      	blx	r3
 8012994:	f104 0108 	add.w	r1, r4, #8
 8012998:	4628      	mov	r0, r5
 801299a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801299e:	f000 b98f 	b.w	8012cc0 <ucdr_deserialize_uint8_t>
 80129a2:	4608      	mov	r0, r1
 80129a4:	bd38      	pop	{r3, r4, r5, pc}
 80129a6:	bf00      	nop

080129a8 <_TurnIndicatorsReport__cdr_serialize>:
 80129a8:	b180      	cbz	r0, 80129cc <_TurnIndicatorsReport__cdr_serialize+0x24>
 80129aa:	b538      	push	{r3, r4, r5, lr}
 80129ac:	4604      	mov	r4, r0
 80129ae:	460d      	mov	r5, r1
 80129b0:	f000 f93e 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80129b4:	4603      	mov	r3, r0
 80129b6:	4629      	mov	r1, r5
 80129b8:	4620      	mov	r0, r4
 80129ba:	685b      	ldr	r3, [r3, #4]
 80129bc:	689b      	ldr	r3, [r3, #8]
 80129be:	4798      	blx	r3
 80129c0:	7a21      	ldrb	r1, [r4, #8]
 80129c2:	4628      	mov	r0, r5
 80129c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129c8:	f000 b964 	b.w	8012c94 <ucdr_serialize_uint8_t>
 80129cc:	4770      	bx	lr
 80129ce:	bf00      	nop

080129d0 <_TurnIndicatorsReport__get_serialized_size>:
 80129d0:	b150      	cbz	r0, 80129e8 <_TurnIndicatorsReport__get_serialized_size+0x18>
 80129d2:	2100      	movs	r1, #0
 80129d4:	b510      	push	{r4, lr}
 80129d6:	f000 f8c7 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 80129da:	4604      	mov	r4, r0
 80129dc:	2101      	movs	r1, #1
 80129de:	f001 fbc7 	bl	8014170 <ucdr_alignment>
 80129e2:	4420      	add	r0, r4
 80129e4:	3001      	adds	r0, #1
 80129e6:	bd10      	pop	{r4, pc}
 80129e8:	4770      	bx	lr
 80129ea:	bf00      	nop

080129ec <_TurnIndicatorsReport__max_serialized_size>:
 80129ec:	b510      	push	{r4, lr}
 80129ee:	b082      	sub	sp, #8
 80129f0:	2401      	movs	r4, #1
 80129f2:	2100      	movs	r1, #0
 80129f4:	f10d 0007 	add.w	r0, sp, #7
 80129f8:	f88d 4007 	strb.w	r4, [sp, #7]
 80129fc:	f000 f904 	bl	8012c08 <max_serialized_size_builtin_interfaces__msg__Time>
 8012a00:	4621      	mov	r1, r4
 8012a02:	4604      	mov	r4, r0
 8012a04:	f001 fbb4 	bl	8014170 <ucdr_alignment>
 8012a08:	4420      	add	r0, r4
 8012a0a:	3001      	adds	r0, #1
 8012a0c:	b002      	add	sp, #8
 8012a0e:	bd10      	pop	{r4, pc}

08012a10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>:
 8012a10:	4800      	ldr	r0, [pc, #0]	@ (8012a14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x4>)
 8012a12:	4770      	bx	lr
 8012a14:	24000b98 	.word	0x24000b98

08012a18 <get_serialized_size_autoware_auto_vehicle_msgs__msg__VelocityReport>:
 8012a18:	b1c8      	cbz	r0, 8012a4e <get_serialized_size_autoware_auto_vehicle_msgs__msg__VelocityReport+0x36>
 8012a1a:	b570      	push	{r4, r5, r6, lr}
 8012a1c:	460d      	mov	r5, r1
 8012a1e:	f003 fd23 	bl	8016468 <get_serialized_size_std_msgs__msg__Header>
 8012a22:	2104      	movs	r1, #4
 8012a24:	182e      	adds	r6, r5, r0
 8012a26:	f1c5 0504 	rsb	r5, r5, #4
 8012a2a:	4630      	mov	r0, r6
 8012a2c:	f001 fba0 	bl	8014170 <ucdr_alignment>
 8012a30:	2104      	movs	r1, #4
 8012a32:	1844      	adds	r4, r0, r1
 8012a34:	4434      	add	r4, r6
 8012a36:	4620      	mov	r0, r4
 8012a38:	f001 fb9a 	bl	8014170 <ucdr_alignment>
 8012a3c:	2104      	movs	r1, #4
 8012a3e:	4408      	add	r0, r1
 8012a40:	4404      	add	r4, r0
 8012a42:	4620      	mov	r0, r4
 8012a44:	f001 fb94 	bl	8014170 <ucdr_alignment>
 8012a48:	4428      	add	r0, r5
 8012a4a:	4420      	add	r0, r4
 8012a4c:	bd70      	pop	{r4, r5, r6, pc}
 8012a4e:	4770      	bx	lr

08012a50 <_VelocityReport__cdr_deserialize>:
 8012a50:	b538      	push	{r3, r4, r5, lr}
 8012a52:	460c      	mov	r4, r1
 8012a54:	b1c9      	cbz	r1, 8012a8a <_VelocityReport__cdr_deserialize+0x3a>
 8012a56:	4605      	mov	r5, r0
 8012a58:	f003 fd8a 	bl	8016570 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	4621      	mov	r1, r4
 8012a60:	4628      	mov	r0, r5
 8012a62:	685b      	ldr	r3, [r3, #4]
 8012a64:	68db      	ldr	r3, [r3, #12]
 8012a66:	4798      	blx	r3
 8012a68:	f104 0114 	add.w	r1, r4, #20
 8012a6c:	4628      	mov	r0, r5
 8012a6e:	f001 f901 	bl	8013c74 <ucdr_deserialize_float>
 8012a72:	f104 0118 	add.w	r1, r4, #24
 8012a76:	4628      	mov	r0, r5
 8012a78:	f001 f8fc 	bl	8013c74 <ucdr_deserialize_float>
 8012a7c:	f104 011c 	add.w	r1, r4, #28
 8012a80:	4628      	mov	r0, r5
 8012a82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a86:	f001 b8f5 	b.w	8013c74 <ucdr_deserialize_float>
 8012a8a:	4608      	mov	r0, r1
 8012a8c:	bd38      	pop	{r3, r4, r5, pc}
 8012a8e:	bf00      	nop

08012a90 <_VelocityReport__cdr_serialize>:
 8012a90:	b1d8      	cbz	r0, 8012aca <_VelocityReport__cdr_serialize+0x3a>
 8012a92:	b538      	push	{r3, r4, r5, lr}
 8012a94:	4604      	mov	r4, r0
 8012a96:	460d      	mov	r5, r1
 8012a98:	f003 fd6a 	bl	8016570 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012a9c:	4603      	mov	r3, r0
 8012a9e:	4629      	mov	r1, r5
 8012aa0:	4620      	mov	r0, r4
 8012aa2:	685b      	ldr	r3, [r3, #4]
 8012aa4:	689b      	ldr	r3, [r3, #8]
 8012aa6:	4798      	blx	r3
 8012aa8:	ed94 0a05 	vldr	s0, [r4, #20]
 8012aac:	4628      	mov	r0, r5
 8012aae:	f001 f849 	bl	8013b44 <ucdr_serialize_float>
 8012ab2:	ed94 0a06 	vldr	s0, [r4, #24]
 8012ab6:	4628      	mov	r0, r5
 8012ab8:	f001 f844 	bl	8013b44 <ucdr_serialize_float>
 8012abc:	ed94 0a07 	vldr	s0, [r4, #28]
 8012ac0:	4628      	mov	r0, r5
 8012ac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ac6:	f001 b83d 	b.w	8013b44 <ucdr_serialize_float>
 8012aca:	4770      	bx	lr

08012acc <_VelocityReport__get_serialized_size>:
 8012acc:	b1b0      	cbz	r0, 8012afc <_VelocityReport__get_serialized_size+0x30>
 8012ace:	2100      	movs	r1, #0
 8012ad0:	b510      	push	{r4, lr}
 8012ad2:	f003 fcc9 	bl	8016468 <get_serialized_size_std_msgs__msg__Header>
 8012ad6:	4604      	mov	r4, r0
 8012ad8:	2104      	movs	r1, #4
 8012ada:	f001 fb49 	bl	8014170 <ucdr_alignment>
 8012ade:	2104      	movs	r1, #4
 8012ae0:	4420      	add	r0, r4
 8012ae2:	1844      	adds	r4, r0, r1
 8012ae4:	4620      	mov	r0, r4
 8012ae6:	f001 fb43 	bl	8014170 <ucdr_alignment>
 8012aea:	2104      	movs	r1, #4
 8012aec:	4408      	add	r0, r1
 8012aee:	4404      	add	r4, r0
 8012af0:	4620      	mov	r0, r4
 8012af2:	f001 fb3d 	bl	8014170 <ucdr_alignment>
 8012af6:	3004      	adds	r0, #4
 8012af8:	4420      	add	r0, r4
 8012afa:	bd10      	pop	{r4, pc}
 8012afc:	4770      	bx	lr
 8012afe:	bf00      	nop

08012b00 <_VelocityReport__max_serialized_size>:
 8012b00:	b510      	push	{r4, lr}
 8012b02:	b082      	sub	sp, #8
 8012b04:	2301      	movs	r3, #1
 8012b06:	2100      	movs	r1, #0
 8012b08:	f10d 0007 	add.w	r0, sp, #7
 8012b0c:	f88d 3007 	strb.w	r3, [sp, #7]
 8012b10:	f003 fd24 	bl	801655c <max_serialized_size_std_msgs__msg__Header>
 8012b14:	4604      	mov	r4, r0
 8012b16:	2104      	movs	r1, #4
 8012b18:	f001 fb2a 	bl	8014170 <ucdr_alignment>
 8012b1c:	2104      	movs	r1, #4
 8012b1e:	4420      	add	r0, r4
 8012b20:	1844      	adds	r4, r0, r1
 8012b22:	4620      	mov	r0, r4
 8012b24:	f001 fb24 	bl	8014170 <ucdr_alignment>
 8012b28:	2104      	movs	r1, #4
 8012b2a:	4408      	add	r0, r1
 8012b2c:	4404      	add	r4, r0
 8012b2e:	4620      	mov	r0, r4
 8012b30:	f001 fb1e 	bl	8014170 <ucdr_alignment>
 8012b34:	3004      	adds	r0, #4
 8012b36:	4420      	add	r0, r4
 8012b38:	b002      	add	sp, #8
 8012b3a:	bd10      	pop	{r4, pc}

08012b3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport>:
 8012b3c:	4800      	ldr	r0, [pc, #0]	@ (8012b40 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x4>)
 8012b3e:	4770      	bx	lr
 8012b40:	24000bc0 	.word	0x24000bc0

08012b44 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8012b44:	f004 b8ee 	b.w	8016d24 <builtin_interfaces__msg__Time__init>

08012b48 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8012b48:	f004 b8f0 	b.w	8016d2c <builtin_interfaces__msg__Time__fini>

08012b4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8012b4c:	4b04      	ldr	r3, [pc, #16]	@ (8012b60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012b4e:	681a      	ldr	r2, [r3, #0]
 8012b50:	b10a      	cbz	r2, 8012b56 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 8012b52:	4803      	ldr	r0, [pc, #12]	@ (8012b60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012b54:	4770      	bx	lr
 8012b56:	4a03      	ldr	r2, [pc, #12]	@ (8012b64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8012b58:	4801      	ldr	r0, [pc, #4]	@ (8012b60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012b5a:	6812      	ldr	r2, [r2, #0]
 8012b5c:	601a      	str	r2, [r3, #0]
 8012b5e:	4770      	bx	lr
 8012b60:	24000c60 	.word	0x24000c60
 8012b64:	24000d30 	.word	0x24000d30

08012b68 <get_serialized_size_builtin_interfaces__msg__Time>:
 8012b68:	b180      	cbz	r0, 8012b8c <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8012b6a:	b538      	push	{r3, r4, r5, lr}
 8012b6c:	460d      	mov	r5, r1
 8012b6e:	2104      	movs	r1, #4
 8012b70:	4628      	mov	r0, r5
 8012b72:	f001 fafd 	bl	8014170 <ucdr_alignment>
 8012b76:	1d2b      	adds	r3, r5, #4
 8012b78:	f1c5 0504 	rsb	r5, r5, #4
 8012b7c:	2104      	movs	r1, #4
 8012b7e:	181c      	adds	r4, r3, r0
 8012b80:	4620      	mov	r0, r4
 8012b82:	f001 faf5 	bl	8014170 <ucdr_alignment>
 8012b86:	4428      	add	r0, r5
 8012b88:	4420      	add	r0, r4
 8012b8a:	bd38      	pop	{r3, r4, r5, pc}
 8012b8c:	4770      	bx	lr
 8012b8e:	bf00      	nop

08012b90 <_Time__cdr_deserialize>:
 8012b90:	b538      	push	{r3, r4, r5, lr}
 8012b92:	460c      	mov	r4, r1
 8012b94:	b141      	cbz	r1, 8012ba8 <_Time__cdr_deserialize+0x18>
 8012b96:	4605      	mov	r5, r0
 8012b98:	f000 ff44 	bl	8013a24 <ucdr_deserialize_int32_t>
 8012b9c:	1d21      	adds	r1, r4, #4
 8012b9e:	4628      	mov	r0, r5
 8012ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ba4:	f000 bbbc 	b.w	8013320 <ucdr_deserialize_uint32_t>
 8012ba8:	4608      	mov	r0, r1
 8012baa:	bd38      	pop	{r3, r4, r5, pc}

08012bac <_Time__cdr_serialize>:
 8012bac:	b160      	cbz	r0, 8012bc8 <_Time__cdr_serialize+0x1c>
 8012bae:	b538      	push	{r3, r4, r5, lr}
 8012bb0:	460d      	mov	r5, r1
 8012bb2:	4604      	mov	r4, r0
 8012bb4:	6801      	ldr	r1, [r0, #0]
 8012bb6:	4628      	mov	r0, r5
 8012bb8:	f000 fe9c 	bl	80138f4 <ucdr_serialize_int32_t>
 8012bbc:	6861      	ldr	r1, [r4, #4]
 8012bbe:	4628      	mov	r0, r5
 8012bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012bc4:	f000 ba7c 	b.w	80130c0 <ucdr_serialize_uint32_t>
 8012bc8:	4770      	bx	lr
 8012bca:	bf00      	nop

08012bcc <_Time__get_serialized_size>:
 8012bcc:	b160      	cbz	r0, 8012be8 <_Time__get_serialized_size+0x1c>
 8012bce:	2104      	movs	r1, #4
 8012bd0:	2000      	movs	r0, #0
 8012bd2:	b510      	push	{r4, lr}
 8012bd4:	f001 facc 	bl	8014170 <ucdr_alignment>
 8012bd8:	2104      	movs	r1, #4
 8012bda:	1844      	adds	r4, r0, r1
 8012bdc:	4620      	mov	r0, r4
 8012bde:	f001 fac7 	bl	8014170 <ucdr_alignment>
 8012be2:	3004      	adds	r0, #4
 8012be4:	4420      	add	r0, r4
 8012be6:	bd10      	pop	{r4, pc}
 8012be8:	4770      	bx	lr
 8012bea:	bf00      	nop

08012bec <_Time__max_serialized_size>:
 8012bec:	b510      	push	{r4, lr}
 8012bee:	2104      	movs	r1, #4
 8012bf0:	2000      	movs	r0, #0
 8012bf2:	f001 fabd 	bl	8014170 <ucdr_alignment>
 8012bf6:	2104      	movs	r1, #4
 8012bf8:	1844      	adds	r4, r0, r1
 8012bfa:	4620      	mov	r0, r4
 8012bfc:	f001 fab8 	bl	8014170 <ucdr_alignment>
 8012c00:	3004      	adds	r0, #4
 8012c02:	4420      	add	r0, r4
 8012c04:	bd10      	pop	{r4, pc}
 8012c06:	bf00      	nop

08012c08 <max_serialized_size_builtin_interfaces__msg__Time>:
 8012c08:	b538      	push	{r3, r4, r5, lr}
 8012c0a:	460c      	mov	r4, r1
 8012c0c:	2301      	movs	r3, #1
 8012c0e:	2104      	movs	r1, #4
 8012c10:	1d25      	adds	r5, r4, #4
 8012c12:	7003      	strb	r3, [r0, #0]
 8012c14:	4620      	mov	r0, r4
 8012c16:	f1c4 0404 	rsb	r4, r4, #4
 8012c1a:	f001 faa9 	bl	8014170 <ucdr_alignment>
 8012c1e:	4405      	add	r5, r0
 8012c20:	2104      	movs	r1, #4
 8012c22:	4628      	mov	r0, r5
 8012c24:	f001 faa4 	bl	8014170 <ucdr_alignment>
 8012c28:	4420      	add	r0, r4
 8012c2a:	4428      	add	r0, r5
 8012c2c:	bd38      	pop	{r3, r4, r5, pc}
 8012c2e:	bf00      	nop

08012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8012c30:	4800      	ldr	r0, [pc, #0]	@ (8012c34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 8012c32:	4770      	bx	lr
 8012c34:	24000c6c 	.word	0x24000c6c

08012c38 <ucdr_serialize_bool>:
 8012c38:	b538      	push	{r3, r4, r5, lr}
 8012c3a:	460d      	mov	r5, r1
 8012c3c:	2101      	movs	r1, #1
 8012c3e:	4604      	mov	r4, r0
 8012c40:	f001 fa4a 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8012c44:	b148      	cbz	r0, 8012c5a <ucdr_serialize_bool+0x22>
 8012c46:	68a3      	ldr	r3, [r4, #8]
 8012c48:	2101      	movs	r1, #1
 8012c4a:	701d      	strb	r5, [r3, #0]
 8012c4c:	68a2      	ldr	r2, [r4, #8]
 8012c4e:	6923      	ldr	r3, [r4, #16]
 8012c50:	440a      	add	r2, r1
 8012c52:	7561      	strb	r1, [r4, #21]
 8012c54:	440b      	add	r3, r1
 8012c56:	60a2      	str	r2, [r4, #8]
 8012c58:	6123      	str	r3, [r4, #16]
 8012c5a:	7da0      	ldrb	r0, [r4, #22]
 8012c5c:	f080 0001 	eor.w	r0, r0, #1
 8012c60:	bd38      	pop	{r3, r4, r5, pc}
 8012c62:	bf00      	nop

08012c64 <ucdr_deserialize_bool>:
 8012c64:	b538      	push	{r3, r4, r5, lr}
 8012c66:	460d      	mov	r5, r1
 8012c68:	2101      	movs	r1, #1
 8012c6a:	4604      	mov	r4, r0
 8012c6c:	f001 fa34 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8012c70:	b160      	cbz	r0, 8012c8c <ucdr_deserialize_bool+0x28>
 8012c72:	68a2      	ldr	r2, [r4, #8]
 8012c74:	2101      	movs	r1, #1
 8012c76:	6923      	ldr	r3, [r4, #16]
 8012c78:	f812 0b01 	ldrb.w	r0, [r2], #1
 8012c7c:	440b      	add	r3, r1
 8012c7e:	3800      	subs	r0, #0
 8012c80:	bf18      	it	ne
 8012c82:	2001      	movne	r0, #1
 8012c84:	7028      	strb	r0, [r5, #0]
 8012c86:	60a2      	str	r2, [r4, #8]
 8012c88:	6123      	str	r3, [r4, #16]
 8012c8a:	7561      	strb	r1, [r4, #21]
 8012c8c:	7da0      	ldrb	r0, [r4, #22]
 8012c8e:	f080 0001 	eor.w	r0, r0, #1
 8012c92:	bd38      	pop	{r3, r4, r5, pc}

08012c94 <ucdr_serialize_uint8_t>:
 8012c94:	b538      	push	{r3, r4, r5, lr}
 8012c96:	460d      	mov	r5, r1
 8012c98:	2101      	movs	r1, #1
 8012c9a:	4604      	mov	r4, r0
 8012c9c:	f001 fa1c 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8012ca0:	b148      	cbz	r0, 8012cb6 <ucdr_serialize_uint8_t+0x22>
 8012ca2:	68a3      	ldr	r3, [r4, #8]
 8012ca4:	2101      	movs	r1, #1
 8012ca6:	701d      	strb	r5, [r3, #0]
 8012ca8:	68a2      	ldr	r2, [r4, #8]
 8012caa:	6923      	ldr	r3, [r4, #16]
 8012cac:	440a      	add	r2, r1
 8012cae:	7561      	strb	r1, [r4, #21]
 8012cb0:	440b      	add	r3, r1
 8012cb2:	60a2      	str	r2, [r4, #8]
 8012cb4:	6123      	str	r3, [r4, #16]
 8012cb6:	7da0      	ldrb	r0, [r4, #22]
 8012cb8:	f080 0001 	eor.w	r0, r0, #1
 8012cbc:	bd38      	pop	{r3, r4, r5, pc}
 8012cbe:	bf00      	nop

08012cc0 <ucdr_deserialize_uint8_t>:
 8012cc0:	b538      	push	{r3, r4, r5, lr}
 8012cc2:	460d      	mov	r5, r1
 8012cc4:	2101      	movs	r1, #1
 8012cc6:	4604      	mov	r4, r0
 8012cc8:	f001 fa06 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8012ccc:	b150      	cbz	r0, 8012ce4 <ucdr_deserialize_uint8_t+0x24>
 8012cce:	68a3      	ldr	r3, [r4, #8]
 8012cd0:	2101      	movs	r1, #1
 8012cd2:	781b      	ldrb	r3, [r3, #0]
 8012cd4:	702b      	strb	r3, [r5, #0]
 8012cd6:	68a2      	ldr	r2, [r4, #8]
 8012cd8:	6923      	ldr	r3, [r4, #16]
 8012cda:	440a      	add	r2, r1
 8012cdc:	7561      	strb	r1, [r4, #21]
 8012cde:	440b      	add	r3, r1
 8012ce0:	60a2      	str	r2, [r4, #8]
 8012ce2:	6123      	str	r3, [r4, #16]
 8012ce4:	7da0      	ldrb	r0, [r4, #22]
 8012ce6:	f080 0001 	eor.w	r0, r0, #1
 8012cea:	bd38      	pop	{r3, r4, r5, pc}

08012cec <ucdr_serialize_uint16_t>:
 8012cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cf0:	460b      	mov	r3, r1
 8012cf2:	b082      	sub	sp, #8
 8012cf4:	4604      	mov	r4, r0
 8012cf6:	2102      	movs	r1, #2
 8012cf8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012cfc:	f001 fa40 	bl	8014180 <ucdr_buffer_alignment>
 8012d00:	4601      	mov	r1, r0
 8012d02:	4620      	mov	r0, r4
 8012d04:	7d67      	ldrb	r7, [r4, #21]
 8012d06:	f001 fa83 	bl	8014210 <ucdr_advance_buffer>
 8012d0a:	2102      	movs	r1, #2
 8012d0c:	4620      	mov	r0, r4
 8012d0e:	f001 f9d7 	bl	80140c0 <ucdr_check_buffer_available_for>
 8012d12:	bb78      	cbnz	r0, 8012d74 <ucdr_serialize_uint16_t+0x88>
 8012d14:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012d18:	42ab      	cmp	r3, r5
 8012d1a:	d926      	bls.n	8012d6a <ucdr_serialize_uint16_t+0x7e>
 8012d1c:	1b5e      	subs	r6, r3, r5
 8012d1e:	60a3      	str	r3, [r4, #8]
 8012d20:	6923      	ldr	r3, [r4, #16]
 8012d22:	4620      	mov	r0, r4
 8012d24:	f1c6 0802 	rsb	r8, r6, #2
 8012d28:	4433      	add	r3, r6
 8012d2a:	4641      	mov	r1, r8
 8012d2c:	6123      	str	r3, [r4, #16]
 8012d2e:	f001 f9d3 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8012d32:	2800      	cmp	r0, #0
 8012d34:	d03b      	beq.n	8012dae <ucdr_serialize_uint16_t+0xc2>
 8012d36:	7d23      	ldrb	r3, [r4, #20]
 8012d38:	2b01      	cmp	r3, #1
 8012d3a:	d04a      	beq.n	8012dd2 <ucdr_serialize_uint16_t+0xe6>
 8012d3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012d40:	702b      	strb	r3, [r5, #0]
 8012d42:	2e00      	cmp	r6, #0
 8012d44:	d040      	beq.n	8012dc8 <ucdr_serialize_uint16_t+0xdc>
 8012d46:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012d4a:	706b      	strb	r3, [r5, #1]
 8012d4c:	6923      	ldr	r3, [r4, #16]
 8012d4e:	2102      	movs	r1, #2
 8012d50:	68a2      	ldr	r2, [r4, #8]
 8012d52:	3302      	adds	r3, #2
 8012d54:	7da0      	ldrb	r0, [r4, #22]
 8012d56:	4442      	add	r2, r8
 8012d58:	7561      	strb	r1, [r4, #21]
 8012d5a:	1b9e      	subs	r6, r3, r6
 8012d5c:	f080 0001 	eor.w	r0, r0, #1
 8012d60:	60a2      	str	r2, [r4, #8]
 8012d62:	6126      	str	r6, [r4, #16]
 8012d64:	b002      	add	sp, #8
 8012d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d6a:	2102      	movs	r1, #2
 8012d6c:	4620      	mov	r0, r4
 8012d6e:	f001 f9b3 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8012d72:	b190      	cbz	r0, 8012d9a <ucdr_serialize_uint16_t+0xae>
 8012d74:	7d23      	ldrb	r3, [r4, #20]
 8012d76:	2b01      	cmp	r3, #1
 8012d78:	68a3      	ldr	r3, [r4, #8]
 8012d7a:	d014      	beq.n	8012da6 <ucdr_serialize_uint16_t+0xba>
 8012d7c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012d80:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012d84:	7019      	strb	r1, [r3, #0]
 8012d86:	68a3      	ldr	r3, [r4, #8]
 8012d88:	705a      	strb	r2, [r3, #1]
 8012d8a:	2102      	movs	r1, #2
 8012d8c:	68a2      	ldr	r2, [r4, #8]
 8012d8e:	6923      	ldr	r3, [r4, #16]
 8012d90:	440a      	add	r2, r1
 8012d92:	7561      	strb	r1, [r4, #21]
 8012d94:	440b      	add	r3, r1
 8012d96:	60a2      	str	r2, [r4, #8]
 8012d98:	6123      	str	r3, [r4, #16]
 8012d9a:	7da0      	ldrb	r0, [r4, #22]
 8012d9c:	f080 0001 	eor.w	r0, r0, #1
 8012da0:	b002      	add	sp, #8
 8012da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012da6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012daa:	801a      	strh	r2, [r3, #0]
 8012dac:	e7ed      	b.n	8012d8a <ucdr_serialize_uint16_t+0x9e>
 8012dae:	68a2      	ldr	r2, [r4, #8]
 8012db0:	6923      	ldr	r3, [r4, #16]
 8012db2:	7da0      	ldrb	r0, [r4, #22]
 8012db4:	1b92      	subs	r2, r2, r6
 8012db6:	1b9b      	subs	r3, r3, r6
 8012db8:	7567      	strb	r7, [r4, #21]
 8012dba:	f080 0001 	eor.w	r0, r0, #1
 8012dbe:	60a2      	str	r2, [r4, #8]
 8012dc0:	6123      	str	r3, [r4, #16]
 8012dc2:	b002      	add	sp, #8
 8012dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dc8:	68a3      	ldr	r3, [r4, #8]
 8012dca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012dce:	701a      	strb	r2, [r3, #0]
 8012dd0:	e7bc      	b.n	8012d4c <ucdr_serialize_uint16_t+0x60>
 8012dd2:	4628      	mov	r0, r5
 8012dd4:	f10d 0506 	add.w	r5, sp, #6
 8012dd8:	4632      	mov	r2, r6
 8012dda:	4629      	mov	r1, r5
 8012ddc:	f00f fb87 	bl	80224ee <memcpy>
 8012de0:	4642      	mov	r2, r8
 8012de2:	19a9      	adds	r1, r5, r6
 8012de4:	68a0      	ldr	r0, [r4, #8]
 8012de6:	f00f fb82 	bl	80224ee <memcpy>
 8012dea:	e7af      	b.n	8012d4c <ucdr_serialize_uint16_t+0x60>

08012dec <ucdr_serialize_endian_uint16_t>:
 8012dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012df0:	4604      	mov	r4, r0
 8012df2:	b083      	sub	sp, #12
 8012df4:	460d      	mov	r5, r1
 8012df6:	2102      	movs	r1, #2
 8012df8:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012dfc:	f001 f9c0 	bl	8014180 <ucdr_buffer_alignment>
 8012e00:	4601      	mov	r1, r0
 8012e02:	4620      	mov	r0, r4
 8012e04:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012e08:	f001 fa02 	bl	8014210 <ucdr_advance_buffer>
 8012e0c:	2102      	movs	r1, #2
 8012e0e:	4620      	mov	r0, r4
 8012e10:	f001 f956 	bl	80140c0 <ucdr_check_buffer_available_for>
 8012e14:	bb70      	cbnz	r0, 8012e74 <ucdr_serialize_endian_uint16_t+0x88>
 8012e16:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012e1a:	42be      	cmp	r6, r7
 8012e1c:	d925      	bls.n	8012e6a <ucdr_serialize_endian_uint16_t+0x7e>
 8012e1e:	6923      	ldr	r3, [r4, #16]
 8012e20:	4620      	mov	r0, r4
 8012e22:	60a6      	str	r6, [r4, #8]
 8012e24:	1bf6      	subs	r6, r6, r7
 8012e26:	4433      	add	r3, r6
 8012e28:	f1c6 0902 	rsb	r9, r6, #2
 8012e2c:	6123      	str	r3, [r4, #16]
 8012e2e:	4649      	mov	r1, r9
 8012e30:	f001 f952 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8012e34:	2800      	cmp	r0, #0
 8012e36:	d039      	beq.n	8012eac <ucdr_serialize_endian_uint16_t+0xc0>
 8012e38:	2d01      	cmp	r5, #1
 8012e3a:	d04a      	beq.n	8012ed2 <ucdr_serialize_endian_uint16_t+0xe6>
 8012e3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012e40:	703b      	strb	r3, [r7, #0]
 8012e42:	2e00      	cmp	r6, #0
 8012e44:	d040      	beq.n	8012ec8 <ucdr_serialize_endian_uint16_t+0xdc>
 8012e46:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012e4a:	707b      	strb	r3, [r7, #1]
 8012e4c:	6923      	ldr	r3, [r4, #16]
 8012e4e:	2102      	movs	r1, #2
 8012e50:	68a2      	ldr	r2, [r4, #8]
 8012e52:	7da0      	ldrb	r0, [r4, #22]
 8012e54:	3302      	adds	r3, #2
 8012e56:	444a      	add	r2, r9
 8012e58:	7561      	strb	r1, [r4, #21]
 8012e5a:	1b9b      	subs	r3, r3, r6
 8012e5c:	f080 0001 	eor.w	r0, r0, #1
 8012e60:	60a2      	str	r2, [r4, #8]
 8012e62:	6123      	str	r3, [r4, #16]
 8012e64:	b003      	add	sp, #12
 8012e66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e6a:	2102      	movs	r1, #2
 8012e6c:	4620      	mov	r0, r4
 8012e6e:	f001 f933 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8012e72:	b188      	cbz	r0, 8012e98 <ucdr_serialize_endian_uint16_t+0xac>
 8012e74:	2d01      	cmp	r5, #1
 8012e76:	68a3      	ldr	r3, [r4, #8]
 8012e78:	d014      	beq.n	8012ea4 <ucdr_serialize_endian_uint16_t+0xb8>
 8012e7a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012e7e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012e82:	7019      	strb	r1, [r3, #0]
 8012e84:	68a3      	ldr	r3, [r4, #8]
 8012e86:	705a      	strb	r2, [r3, #1]
 8012e88:	2102      	movs	r1, #2
 8012e8a:	68a2      	ldr	r2, [r4, #8]
 8012e8c:	6923      	ldr	r3, [r4, #16]
 8012e8e:	440a      	add	r2, r1
 8012e90:	7561      	strb	r1, [r4, #21]
 8012e92:	440b      	add	r3, r1
 8012e94:	60a2      	str	r2, [r4, #8]
 8012e96:	6123      	str	r3, [r4, #16]
 8012e98:	7da0      	ldrb	r0, [r4, #22]
 8012e9a:	f080 0001 	eor.w	r0, r0, #1
 8012e9e:	b003      	add	sp, #12
 8012ea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ea4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012ea8:	801a      	strh	r2, [r3, #0]
 8012eaa:	e7ed      	b.n	8012e88 <ucdr_serialize_endian_uint16_t+0x9c>
 8012eac:	68a2      	ldr	r2, [r4, #8]
 8012eae:	6923      	ldr	r3, [r4, #16]
 8012eb0:	7da0      	ldrb	r0, [r4, #22]
 8012eb2:	1b92      	subs	r2, r2, r6
 8012eb4:	1b9b      	subs	r3, r3, r6
 8012eb6:	f884 8015 	strb.w	r8, [r4, #21]
 8012eba:	f080 0001 	eor.w	r0, r0, #1
 8012ebe:	60a2      	str	r2, [r4, #8]
 8012ec0:	6123      	str	r3, [r4, #16]
 8012ec2:	b003      	add	sp, #12
 8012ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ec8:	68a3      	ldr	r3, [r4, #8]
 8012eca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012ece:	701a      	strb	r2, [r3, #0]
 8012ed0:	e7bc      	b.n	8012e4c <ucdr_serialize_endian_uint16_t+0x60>
 8012ed2:	f10d 0506 	add.w	r5, sp, #6
 8012ed6:	4632      	mov	r2, r6
 8012ed8:	4638      	mov	r0, r7
 8012eda:	4629      	mov	r1, r5
 8012edc:	f00f fb07 	bl	80224ee <memcpy>
 8012ee0:	464a      	mov	r2, r9
 8012ee2:	19a9      	adds	r1, r5, r6
 8012ee4:	68a0      	ldr	r0, [r4, #8]
 8012ee6:	f00f fb02 	bl	80224ee <memcpy>
 8012eea:	e7af      	b.n	8012e4c <ucdr_serialize_endian_uint16_t+0x60>

08012eec <ucdr_deserialize_uint16_t>:
 8012eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ef0:	4604      	mov	r4, r0
 8012ef2:	460d      	mov	r5, r1
 8012ef4:	2102      	movs	r1, #2
 8012ef6:	f001 f943 	bl	8014180 <ucdr_buffer_alignment>
 8012efa:	4601      	mov	r1, r0
 8012efc:	4620      	mov	r0, r4
 8012efe:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012f02:	f001 f985 	bl	8014210 <ucdr_advance_buffer>
 8012f06:	2102      	movs	r1, #2
 8012f08:	4620      	mov	r0, r4
 8012f0a:	f001 f8d9 	bl	80140c0 <ucdr_check_buffer_available_for>
 8012f0e:	bb60      	cbnz	r0, 8012f6a <ucdr_deserialize_uint16_t+0x7e>
 8012f10:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012f14:	42be      	cmp	r6, r7
 8012f16:	d923      	bls.n	8012f60 <ucdr_deserialize_uint16_t+0x74>
 8012f18:	6923      	ldr	r3, [r4, #16]
 8012f1a:	4620      	mov	r0, r4
 8012f1c:	60a6      	str	r6, [r4, #8]
 8012f1e:	1bf6      	subs	r6, r6, r7
 8012f20:	4433      	add	r3, r6
 8012f22:	f1c6 0902 	rsb	r9, r6, #2
 8012f26:	6123      	str	r3, [r4, #16]
 8012f28:	4649      	mov	r1, r9
 8012f2a:	f001 f8d5 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8012f2e:	2800      	cmp	r0, #0
 8012f30:	d034      	beq.n	8012f9c <ucdr_deserialize_uint16_t+0xb0>
 8012f32:	7d23      	ldrb	r3, [r4, #20]
 8012f34:	2b01      	cmp	r3, #1
 8012f36:	d042      	beq.n	8012fbe <ucdr_deserialize_uint16_t+0xd2>
 8012f38:	787b      	ldrb	r3, [r7, #1]
 8012f3a:	702b      	strb	r3, [r5, #0]
 8012f3c:	2e00      	cmp	r6, #0
 8012f3e:	d03a      	beq.n	8012fb6 <ucdr_deserialize_uint16_t+0xca>
 8012f40:	783b      	ldrb	r3, [r7, #0]
 8012f42:	706b      	strb	r3, [r5, #1]
 8012f44:	6923      	ldr	r3, [r4, #16]
 8012f46:	2102      	movs	r1, #2
 8012f48:	68a2      	ldr	r2, [r4, #8]
 8012f4a:	3302      	adds	r3, #2
 8012f4c:	7da0      	ldrb	r0, [r4, #22]
 8012f4e:	444a      	add	r2, r9
 8012f50:	7561      	strb	r1, [r4, #21]
 8012f52:	1b9b      	subs	r3, r3, r6
 8012f54:	f080 0001 	eor.w	r0, r0, #1
 8012f58:	60a2      	str	r2, [r4, #8]
 8012f5a:	6123      	str	r3, [r4, #16]
 8012f5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f60:	2102      	movs	r1, #2
 8012f62:	4620      	mov	r0, r4
 8012f64:	f001 f8b8 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8012f68:	b180      	cbz	r0, 8012f8c <ucdr_deserialize_uint16_t+0xa0>
 8012f6a:	7d23      	ldrb	r3, [r4, #20]
 8012f6c:	2b01      	cmp	r3, #1
 8012f6e:	68a3      	ldr	r3, [r4, #8]
 8012f70:	d011      	beq.n	8012f96 <ucdr_deserialize_uint16_t+0xaa>
 8012f72:	785b      	ldrb	r3, [r3, #1]
 8012f74:	702b      	strb	r3, [r5, #0]
 8012f76:	68a3      	ldr	r3, [r4, #8]
 8012f78:	781b      	ldrb	r3, [r3, #0]
 8012f7a:	706b      	strb	r3, [r5, #1]
 8012f7c:	2102      	movs	r1, #2
 8012f7e:	68a2      	ldr	r2, [r4, #8]
 8012f80:	6923      	ldr	r3, [r4, #16]
 8012f82:	440a      	add	r2, r1
 8012f84:	7561      	strb	r1, [r4, #21]
 8012f86:	440b      	add	r3, r1
 8012f88:	60a2      	str	r2, [r4, #8]
 8012f8a:	6123      	str	r3, [r4, #16]
 8012f8c:	7da0      	ldrb	r0, [r4, #22]
 8012f8e:	f080 0001 	eor.w	r0, r0, #1
 8012f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f96:	881b      	ldrh	r3, [r3, #0]
 8012f98:	802b      	strh	r3, [r5, #0]
 8012f9a:	e7ef      	b.n	8012f7c <ucdr_deserialize_uint16_t+0x90>
 8012f9c:	68a2      	ldr	r2, [r4, #8]
 8012f9e:	6923      	ldr	r3, [r4, #16]
 8012fa0:	1b92      	subs	r2, r2, r6
 8012fa2:	7da0      	ldrb	r0, [r4, #22]
 8012fa4:	1b9b      	subs	r3, r3, r6
 8012fa6:	f884 8015 	strb.w	r8, [r4, #21]
 8012faa:	f080 0001 	eor.w	r0, r0, #1
 8012fae:	60a2      	str	r2, [r4, #8]
 8012fb0:	6123      	str	r3, [r4, #16]
 8012fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fb6:	68a3      	ldr	r3, [r4, #8]
 8012fb8:	781b      	ldrb	r3, [r3, #0]
 8012fba:	706b      	strb	r3, [r5, #1]
 8012fbc:	e7c2      	b.n	8012f44 <ucdr_deserialize_uint16_t+0x58>
 8012fbe:	4639      	mov	r1, r7
 8012fc0:	4632      	mov	r2, r6
 8012fc2:	4628      	mov	r0, r5
 8012fc4:	f00f fa93 	bl	80224ee <memcpy>
 8012fc8:	464a      	mov	r2, r9
 8012fca:	19a8      	adds	r0, r5, r6
 8012fcc:	68a1      	ldr	r1, [r4, #8]
 8012fce:	f00f fa8e 	bl	80224ee <memcpy>
 8012fd2:	e7b7      	b.n	8012f44 <ucdr_deserialize_uint16_t+0x58>

08012fd4 <ucdr_deserialize_endian_uint16_t>:
 8012fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012fd8:	4604      	mov	r4, r0
 8012fda:	460e      	mov	r6, r1
 8012fdc:	2102      	movs	r1, #2
 8012fde:	4615      	mov	r5, r2
 8012fe0:	f001 f8ce 	bl	8014180 <ucdr_buffer_alignment>
 8012fe4:	4601      	mov	r1, r0
 8012fe6:	4620      	mov	r0, r4
 8012fe8:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012fec:	f001 f910 	bl	8014210 <ucdr_advance_buffer>
 8012ff0:	2102      	movs	r1, #2
 8012ff2:	4620      	mov	r0, r4
 8012ff4:	f001 f864 	bl	80140c0 <ucdr_check_buffer_available_for>
 8012ff8:	bb70      	cbnz	r0, 8013058 <ucdr_deserialize_endian_uint16_t+0x84>
 8012ffa:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 8012ffe:	454f      	cmp	r7, r9
 8013000:	d925      	bls.n	801304e <ucdr_deserialize_endian_uint16_t+0x7a>
 8013002:	6923      	ldr	r3, [r4, #16]
 8013004:	4620      	mov	r0, r4
 8013006:	60a7      	str	r7, [r4, #8]
 8013008:	eba7 0709 	sub.w	r7, r7, r9
 801300c:	443b      	add	r3, r7
 801300e:	f1c7 0a02 	rsb	sl, r7, #2
 8013012:	6123      	str	r3, [r4, #16]
 8013014:	4651      	mov	r1, sl
 8013016:	f001 f85f 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 801301a:	2800      	cmp	r0, #0
 801301c:	d034      	beq.n	8013088 <ucdr_deserialize_endian_uint16_t+0xb4>
 801301e:	2e01      	cmp	r6, #1
 8013020:	d043      	beq.n	80130aa <ucdr_deserialize_endian_uint16_t+0xd6>
 8013022:	f899 3001 	ldrb.w	r3, [r9, #1]
 8013026:	702b      	strb	r3, [r5, #0]
 8013028:	2f00      	cmp	r7, #0
 801302a:	d03a      	beq.n	80130a2 <ucdr_deserialize_endian_uint16_t+0xce>
 801302c:	f899 3000 	ldrb.w	r3, [r9]
 8013030:	706b      	strb	r3, [r5, #1]
 8013032:	6923      	ldr	r3, [r4, #16]
 8013034:	2102      	movs	r1, #2
 8013036:	68a2      	ldr	r2, [r4, #8]
 8013038:	3302      	adds	r3, #2
 801303a:	7da0      	ldrb	r0, [r4, #22]
 801303c:	4452      	add	r2, sl
 801303e:	7561      	strb	r1, [r4, #21]
 8013040:	1bdb      	subs	r3, r3, r7
 8013042:	f080 0001 	eor.w	r0, r0, #1
 8013046:	60a2      	str	r2, [r4, #8]
 8013048:	6123      	str	r3, [r4, #16]
 801304a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801304e:	2102      	movs	r1, #2
 8013050:	4620      	mov	r0, r4
 8013052:	f001 f841 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8013056:	b178      	cbz	r0, 8013078 <ucdr_deserialize_endian_uint16_t+0xa4>
 8013058:	2e01      	cmp	r6, #1
 801305a:	68a3      	ldr	r3, [r4, #8]
 801305c:	d011      	beq.n	8013082 <ucdr_deserialize_endian_uint16_t+0xae>
 801305e:	785b      	ldrb	r3, [r3, #1]
 8013060:	702b      	strb	r3, [r5, #0]
 8013062:	68a3      	ldr	r3, [r4, #8]
 8013064:	781b      	ldrb	r3, [r3, #0]
 8013066:	706b      	strb	r3, [r5, #1]
 8013068:	2102      	movs	r1, #2
 801306a:	68a2      	ldr	r2, [r4, #8]
 801306c:	6923      	ldr	r3, [r4, #16]
 801306e:	440a      	add	r2, r1
 8013070:	7561      	strb	r1, [r4, #21]
 8013072:	440b      	add	r3, r1
 8013074:	60a2      	str	r2, [r4, #8]
 8013076:	6123      	str	r3, [r4, #16]
 8013078:	7da0      	ldrb	r0, [r4, #22]
 801307a:	f080 0001 	eor.w	r0, r0, #1
 801307e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013082:	881b      	ldrh	r3, [r3, #0]
 8013084:	802b      	strh	r3, [r5, #0]
 8013086:	e7ef      	b.n	8013068 <ucdr_deserialize_endian_uint16_t+0x94>
 8013088:	68a2      	ldr	r2, [r4, #8]
 801308a:	6923      	ldr	r3, [r4, #16]
 801308c:	1bd2      	subs	r2, r2, r7
 801308e:	7da0      	ldrb	r0, [r4, #22]
 8013090:	1bdb      	subs	r3, r3, r7
 8013092:	f884 8015 	strb.w	r8, [r4, #21]
 8013096:	f080 0001 	eor.w	r0, r0, #1
 801309a:	60a2      	str	r2, [r4, #8]
 801309c:	6123      	str	r3, [r4, #16]
 801309e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130a2:	68a3      	ldr	r3, [r4, #8]
 80130a4:	781b      	ldrb	r3, [r3, #0]
 80130a6:	706b      	strb	r3, [r5, #1]
 80130a8:	e7c3      	b.n	8013032 <ucdr_deserialize_endian_uint16_t+0x5e>
 80130aa:	4649      	mov	r1, r9
 80130ac:	463a      	mov	r2, r7
 80130ae:	4628      	mov	r0, r5
 80130b0:	f00f fa1d 	bl	80224ee <memcpy>
 80130b4:	4652      	mov	r2, sl
 80130b6:	19e8      	adds	r0, r5, r7
 80130b8:	68a1      	ldr	r1, [r4, #8]
 80130ba:	f00f fa18 	bl	80224ee <memcpy>
 80130be:	e7b8      	b.n	8013032 <ucdr_deserialize_endian_uint16_t+0x5e>

080130c0 <ucdr_serialize_uint32_t>:
 80130c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130c4:	b082      	sub	sp, #8
 80130c6:	4604      	mov	r4, r0
 80130c8:	9101      	str	r1, [sp, #4]
 80130ca:	2104      	movs	r1, #4
 80130cc:	f001 f858 	bl	8014180 <ucdr_buffer_alignment>
 80130d0:	4601      	mov	r1, r0
 80130d2:	4620      	mov	r0, r4
 80130d4:	7d67      	ldrb	r7, [r4, #21]
 80130d6:	f001 f89b 	bl	8014210 <ucdr_advance_buffer>
 80130da:	2104      	movs	r1, #4
 80130dc:	4620      	mov	r0, r4
 80130de:	f000 ffef 	bl	80140c0 <ucdr_check_buffer_available_for>
 80130e2:	2800      	cmp	r0, #0
 80130e4:	d139      	bne.n	801315a <ucdr_serialize_uint32_t+0x9a>
 80130e6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80130ea:	42ab      	cmp	r3, r5
 80130ec:	d930      	bls.n	8013150 <ucdr_serialize_uint32_t+0x90>
 80130ee:	1b5e      	subs	r6, r3, r5
 80130f0:	60a3      	str	r3, [r4, #8]
 80130f2:	6923      	ldr	r3, [r4, #16]
 80130f4:	4620      	mov	r0, r4
 80130f6:	f1c6 0804 	rsb	r8, r6, #4
 80130fa:	4433      	add	r3, r6
 80130fc:	4641      	mov	r1, r8
 80130fe:	6123      	str	r3, [r4, #16]
 8013100:	f000 ffea 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8013104:	2800      	cmp	r0, #0
 8013106:	d04c      	beq.n	80131a2 <ucdr_serialize_uint32_t+0xe2>
 8013108:	7d23      	ldrb	r3, [r4, #20]
 801310a:	2b01      	cmp	r3, #1
 801310c:	d063      	beq.n	80131d6 <ucdr_serialize_uint32_t+0x116>
 801310e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013112:	702b      	strb	r3, [r5, #0]
 8013114:	2e00      	cmp	r6, #0
 8013116:	d051      	beq.n	80131bc <ucdr_serialize_uint32_t+0xfc>
 8013118:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801311c:	2e01      	cmp	r6, #1
 801311e:	706b      	strb	r3, [r5, #1]
 8013120:	d050      	beq.n	80131c4 <ucdr_serialize_uint32_t+0x104>
 8013122:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013126:	2e02      	cmp	r6, #2
 8013128:	70ab      	strb	r3, [r5, #2]
 801312a:	d04f      	beq.n	80131cc <ucdr_serialize_uint32_t+0x10c>
 801312c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013130:	70eb      	strb	r3, [r5, #3]
 8013132:	6923      	ldr	r3, [r4, #16]
 8013134:	2104      	movs	r1, #4
 8013136:	68a2      	ldr	r2, [r4, #8]
 8013138:	3304      	adds	r3, #4
 801313a:	7da0      	ldrb	r0, [r4, #22]
 801313c:	4442      	add	r2, r8
 801313e:	7561      	strb	r1, [r4, #21]
 8013140:	1b9e      	subs	r6, r3, r6
 8013142:	f080 0001 	eor.w	r0, r0, #1
 8013146:	60a2      	str	r2, [r4, #8]
 8013148:	6126      	str	r6, [r4, #16]
 801314a:	b002      	add	sp, #8
 801314c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013150:	2104      	movs	r1, #4
 8013152:	4620      	mov	r0, r4
 8013154:	f000 ffc0 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8013158:	b1d0      	cbz	r0, 8013190 <ucdr_serialize_uint32_t+0xd0>
 801315a:	7d23      	ldrb	r3, [r4, #20]
 801315c:	2b01      	cmp	r3, #1
 801315e:	68a3      	ldr	r3, [r4, #8]
 8013160:	d01c      	beq.n	801319c <ucdr_serialize_uint32_t+0xdc>
 8013162:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013166:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801316a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801316e:	7018      	strb	r0, [r3, #0]
 8013170:	68a3      	ldr	r3, [r4, #8]
 8013172:	705a      	strb	r2, [r3, #1]
 8013174:	68a3      	ldr	r3, [r4, #8]
 8013176:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801317a:	7099      	strb	r1, [r3, #2]
 801317c:	68a3      	ldr	r3, [r4, #8]
 801317e:	70da      	strb	r2, [r3, #3]
 8013180:	2104      	movs	r1, #4
 8013182:	68a2      	ldr	r2, [r4, #8]
 8013184:	6923      	ldr	r3, [r4, #16]
 8013186:	440a      	add	r2, r1
 8013188:	7561      	strb	r1, [r4, #21]
 801318a:	440b      	add	r3, r1
 801318c:	60a2      	str	r2, [r4, #8]
 801318e:	6123      	str	r3, [r4, #16]
 8013190:	7da0      	ldrb	r0, [r4, #22]
 8013192:	f080 0001 	eor.w	r0, r0, #1
 8013196:	b002      	add	sp, #8
 8013198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801319c:	9a01      	ldr	r2, [sp, #4]
 801319e:	601a      	str	r2, [r3, #0]
 80131a0:	e7ee      	b.n	8013180 <ucdr_serialize_uint32_t+0xc0>
 80131a2:	68a2      	ldr	r2, [r4, #8]
 80131a4:	6923      	ldr	r3, [r4, #16]
 80131a6:	7da0      	ldrb	r0, [r4, #22]
 80131a8:	1b92      	subs	r2, r2, r6
 80131aa:	1b9b      	subs	r3, r3, r6
 80131ac:	7567      	strb	r7, [r4, #21]
 80131ae:	f080 0001 	eor.w	r0, r0, #1
 80131b2:	60a2      	str	r2, [r4, #8]
 80131b4:	6123      	str	r3, [r4, #16]
 80131b6:	b002      	add	sp, #8
 80131b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131bc:	68a3      	ldr	r3, [r4, #8]
 80131be:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80131c2:	701a      	strb	r2, [r3, #0]
 80131c4:	68a3      	ldr	r3, [r4, #8]
 80131c6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80131ca:	701a      	strb	r2, [r3, #0]
 80131cc:	68a3      	ldr	r3, [r4, #8]
 80131ce:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80131d2:	701a      	strb	r2, [r3, #0]
 80131d4:	e7ad      	b.n	8013132 <ucdr_serialize_uint32_t+0x72>
 80131d6:	4628      	mov	r0, r5
 80131d8:	ad01      	add	r5, sp, #4
 80131da:	4632      	mov	r2, r6
 80131dc:	4629      	mov	r1, r5
 80131de:	f00f f986 	bl	80224ee <memcpy>
 80131e2:	4642      	mov	r2, r8
 80131e4:	19a9      	adds	r1, r5, r6
 80131e6:	68a0      	ldr	r0, [r4, #8]
 80131e8:	f00f f981 	bl	80224ee <memcpy>
 80131ec:	e7a1      	b.n	8013132 <ucdr_serialize_uint32_t+0x72>
 80131ee:	bf00      	nop

080131f0 <ucdr_serialize_endian_uint32_t>:
 80131f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80131f4:	4604      	mov	r4, r0
 80131f6:	b083      	sub	sp, #12
 80131f8:	460d      	mov	r5, r1
 80131fa:	2104      	movs	r1, #4
 80131fc:	9201      	str	r2, [sp, #4]
 80131fe:	f000 ffbf 	bl	8014180 <ucdr_buffer_alignment>
 8013202:	4601      	mov	r1, r0
 8013204:	4620      	mov	r0, r4
 8013206:	f894 8015 	ldrb.w	r8, [r4, #21]
 801320a:	f001 f801 	bl	8014210 <ucdr_advance_buffer>
 801320e:	2104      	movs	r1, #4
 8013210:	4620      	mov	r0, r4
 8013212:	f000 ff55 	bl	80140c0 <ucdr_check_buffer_available_for>
 8013216:	2800      	cmp	r0, #0
 8013218:	d138      	bne.n	801328c <ucdr_serialize_endian_uint32_t+0x9c>
 801321a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801321e:	42b7      	cmp	r7, r6
 8013220:	d92f      	bls.n	8013282 <ucdr_serialize_endian_uint32_t+0x92>
 8013222:	6923      	ldr	r3, [r4, #16]
 8013224:	4620      	mov	r0, r4
 8013226:	60a7      	str	r7, [r4, #8]
 8013228:	1bbf      	subs	r7, r7, r6
 801322a:	443b      	add	r3, r7
 801322c:	f1c7 0904 	rsb	r9, r7, #4
 8013230:	6123      	str	r3, [r4, #16]
 8013232:	4649      	mov	r1, r9
 8013234:	f000 ff50 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8013238:	2800      	cmp	r0, #0
 801323a:	d04a      	beq.n	80132d2 <ucdr_serialize_endian_uint32_t+0xe2>
 801323c:	2d01      	cmp	r5, #1
 801323e:	d063      	beq.n	8013308 <ucdr_serialize_endian_uint32_t+0x118>
 8013240:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013244:	7033      	strb	r3, [r6, #0]
 8013246:	2f00      	cmp	r7, #0
 8013248:	d051      	beq.n	80132ee <ucdr_serialize_endian_uint32_t+0xfe>
 801324a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801324e:	2f01      	cmp	r7, #1
 8013250:	7073      	strb	r3, [r6, #1]
 8013252:	d050      	beq.n	80132f6 <ucdr_serialize_endian_uint32_t+0x106>
 8013254:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013258:	2f02      	cmp	r7, #2
 801325a:	70b3      	strb	r3, [r6, #2]
 801325c:	d04f      	beq.n	80132fe <ucdr_serialize_endian_uint32_t+0x10e>
 801325e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013262:	70f3      	strb	r3, [r6, #3]
 8013264:	6923      	ldr	r3, [r4, #16]
 8013266:	2104      	movs	r1, #4
 8013268:	68a2      	ldr	r2, [r4, #8]
 801326a:	7da0      	ldrb	r0, [r4, #22]
 801326c:	3304      	adds	r3, #4
 801326e:	444a      	add	r2, r9
 8013270:	7561      	strb	r1, [r4, #21]
 8013272:	1bdb      	subs	r3, r3, r7
 8013274:	f080 0001 	eor.w	r0, r0, #1
 8013278:	60a2      	str	r2, [r4, #8]
 801327a:	6123      	str	r3, [r4, #16]
 801327c:	b003      	add	sp, #12
 801327e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013282:	2104      	movs	r1, #4
 8013284:	4620      	mov	r0, r4
 8013286:	f000 ff27 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 801328a:	b1c8      	cbz	r0, 80132c0 <ucdr_serialize_endian_uint32_t+0xd0>
 801328c:	2d01      	cmp	r5, #1
 801328e:	68a3      	ldr	r3, [r4, #8]
 8013290:	d01c      	beq.n	80132cc <ucdr_serialize_endian_uint32_t+0xdc>
 8013292:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013296:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801329a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801329e:	7018      	strb	r0, [r3, #0]
 80132a0:	68a3      	ldr	r3, [r4, #8]
 80132a2:	705a      	strb	r2, [r3, #1]
 80132a4:	68a3      	ldr	r3, [r4, #8]
 80132a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80132aa:	7099      	strb	r1, [r3, #2]
 80132ac:	68a3      	ldr	r3, [r4, #8]
 80132ae:	70da      	strb	r2, [r3, #3]
 80132b0:	2104      	movs	r1, #4
 80132b2:	68a2      	ldr	r2, [r4, #8]
 80132b4:	6923      	ldr	r3, [r4, #16]
 80132b6:	440a      	add	r2, r1
 80132b8:	7561      	strb	r1, [r4, #21]
 80132ba:	440b      	add	r3, r1
 80132bc:	60a2      	str	r2, [r4, #8]
 80132be:	6123      	str	r3, [r4, #16]
 80132c0:	7da0      	ldrb	r0, [r4, #22]
 80132c2:	f080 0001 	eor.w	r0, r0, #1
 80132c6:	b003      	add	sp, #12
 80132c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132cc:	9a01      	ldr	r2, [sp, #4]
 80132ce:	601a      	str	r2, [r3, #0]
 80132d0:	e7ee      	b.n	80132b0 <ucdr_serialize_endian_uint32_t+0xc0>
 80132d2:	68a2      	ldr	r2, [r4, #8]
 80132d4:	6923      	ldr	r3, [r4, #16]
 80132d6:	7da0      	ldrb	r0, [r4, #22]
 80132d8:	1bd2      	subs	r2, r2, r7
 80132da:	1bdb      	subs	r3, r3, r7
 80132dc:	f884 8015 	strb.w	r8, [r4, #21]
 80132e0:	f080 0001 	eor.w	r0, r0, #1
 80132e4:	60a2      	str	r2, [r4, #8]
 80132e6:	6123      	str	r3, [r4, #16]
 80132e8:	b003      	add	sp, #12
 80132ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132ee:	68a3      	ldr	r3, [r4, #8]
 80132f0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80132f4:	701a      	strb	r2, [r3, #0]
 80132f6:	68a3      	ldr	r3, [r4, #8]
 80132f8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80132fc:	701a      	strb	r2, [r3, #0]
 80132fe:	68a3      	ldr	r3, [r4, #8]
 8013300:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013304:	701a      	strb	r2, [r3, #0]
 8013306:	e7ad      	b.n	8013264 <ucdr_serialize_endian_uint32_t+0x74>
 8013308:	ad01      	add	r5, sp, #4
 801330a:	463a      	mov	r2, r7
 801330c:	4630      	mov	r0, r6
 801330e:	4629      	mov	r1, r5
 8013310:	f00f f8ed 	bl	80224ee <memcpy>
 8013314:	464a      	mov	r2, r9
 8013316:	19e9      	adds	r1, r5, r7
 8013318:	68a0      	ldr	r0, [r4, #8]
 801331a:	f00f f8e8 	bl	80224ee <memcpy>
 801331e:	e7a1      	b.n	8013264 <ucdr_serialize_endian_uint32_t+0x74>

08013320 <ucdr_deserialize_uint32_t>:
 8013320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013324:	4604      	mov	r4, r0
 8013326:	460d      	mov	r5, r1
 8013328:	2104      	movs	r1, #4
 801332a:	f000 ff29 	bl	8014180 <ucdr_buffer_alignment>
 801332e:	4601      	mov	r1, r0
 8013330:	4620      	mov	r0, r4
 8013332:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013336:	f000 ff6b 	bl	8014210 <ucdr_advance_buffer>
 801333a:	2104      	movs	r1, #4
 801333c:	4620      	mov	r0, r4
 801333e:	f000 febf 	bl	80140c0 <ucdr_check_buffer_available_for>
 8013342:	2800      	cmp	r0, #0
 8013344:	d138      	bne.n	80133b8 <ucdr_deserialize_uint32_t+0x98>
 8013346:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801334a:	42b7      	cmp	r7, r6
 801334c:	d92f      	bls.n	80133ae <ucdr_deserialize_uint32_t+0x8e>
 801334e:	6923      	ldr	r3, [r4, #16]
 8013350:	4620      	mov	r0, r4
 8013352:	60a7      	str	r7, [r4, #8]
 8013354:	1bbf      	subs	r7, r7, r6
 8013356:	443b      	add	r3, r7
 8013358:	f1c7 0904 	rsb	r9, r7, #4
 801335c:	6123      	str	r3, [r4, #16]
 801335e:	4649      	mov	r1, r9
 8013360:	f000 feba 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8013364:	2800      	cmp	r0, #0
 8013366:	d046      	beq.n	80133f6 <ucdr_deserialize_uint32_t+0xd6>
 8013368:	7d23      	ldrb	r3, [r4, #20]
 801336a:	2b01      	cmp	r3, #1
 801336c:	d05c      	beq.n	8013428 <ucdr_deserialize_uint32_t+0x108>
 801336e:	78f3      	ldrb	r3, [r6, #3]
 8013370:	702b      	strb	r3, [r5, #0]
 8013372:	2f00      	cmp	r7, #0
 8013374:	d04c      	beq.n	8013410 <ucdr_deserialize_uint32_t+0xf0>
 8013376:	78b3      	ldrb	r3, [r6, #2]
 8013378:	2f01      	cmp	r7, #1
 801337a:	706b      	strb	r3, [r5, #1]
 801337c:	f105 0302 	add.w	r3, r5, #2
 8013380:	d04a      	beq.n	8013418 <ucdr_deserialize_uint32_t+0xf8>
 8013382:	7873      	ldrb	r3, [r6, #1]
 8013384:	2f02      	cmp	r7, #2
 8013386:	70ab      	strb	r3, [r5, #2]
 8013388:	f105 0303 	add.w	r3, r5, #3
 801338c:	d048      	beq.n	8013420 <ucdr_deserialize_uint32_t+0x100>
 801338e:	7833      	ldrb	r3, [r6, #0]
 8013390:	70eb      	strb	r3, [r5, #3]
 8013392:	6923      	ldr	r3, [r4, #16]
 8013394:	2104      	movs	r1, #4
 8013396:	68a2      	ldr	r2, [r4, #8]
 8013398:	3304      	adds	r3, #4
 801339a:	7da0      	ldrb	r0, [r4, #22]
 801339c:	444a      	add	r2, r9
 801339e:	7561      	strb	r1, [r4, #21]
 80133a0:	1bdb      	subs	r3, r3, r7
 80133a2:	f080 0001 	eor.w	r0, r0, #1
 80133a6:	60a2      	str	r2, [r4, #8]
 80133a8:	6123      	str	r3, [r4, #16]
 80133aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133ae:	2104      	movs	r1, #4
 80133b0:	4620      	mov	r0, r4
 80133b2:	f000 fe91 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 80133b6:	b1b0      	cbz	r0, 80133e6 <ucdr_deserialize_uint32_t+0xc6>
 80133b8:	7d23      	ldrb	r3, [r4, #20]
 80133ba:	2b01      	cmp	r3, #1
 80133bc:	68a3      	ldr	r3, [r4, #8]
 80133be:	d017      	beq.n	80133f0 <ucdr_deserialize_uint32_t+0xd0>
 80133c0:	78db      	ldrb	r3, [r3, #3]
 80133c2:	702b      	strb	r3, [r5, #0]
 80133c4:	68a3      	ldr	r3, [r4, #8]
 80133c6:	789b      	ldrb	r3, [r3, #2]
 80133c8:	706b      	strb	r3, [r5, #1]
 80133ca:	68a3      	ldr	r3, [r4, #8]
 80133cc:	785b      	ldrb	r3, [r3, #1]
 80133ce:	70ab      	strb	r3, [r5, #2]
 80133d0:	68a3      	ldr	r3, [r4, #8]
 80133d2:	781b      	ldrb	r3, [r3, #0]
 80133d4:	70eb      	strb	r3, [r5, #3]
 80133d6:	2104      	movs	r1, #4
 80133d8:	68a2      	ldr	r2, [r4, #8]
 80133da:	6923      	ldr	r3, [r4, #16]
 80133dc:	440a      	add	r2, r1
 80133de:	7561      	strb	r1, [r4, #21]
 80133e0:	440b      	add	r3, r1
 80133e2:	60a2      	str	r2, [r4, #8]
 80133e4:	6123      	str	r3, [r4, #16]
 80133e6:	7da0      	ldrb	r0, [r4, #22]
 80133e8:	f080 0001 	eor.w	r0, r0, #1
 80133ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	602b      	str	r3, [r5, #0]
 80133f4:	e7ef      	b.n	80133d6 <ucdr_deserialize_uint32_t+0xb6>
 80133f6:	68a2      	ldr	r2, [r4, #8]
 80133f8:	6923      	ldr	r3, [r4, #16]
 80133fa:	1bd2      	subs	r2, r2, r7
 80133fc:	7da0      	ldrb	r0, [r4, #22]
 80133fe:	1bdb      	subs	r3, r3, r7
 8013400:	f884 8015 	strb.w	r8, [r4, #21]
 8013404:	f080 0001 	eor.w	r0, r0, #1
 8013408:	60a2      	str	r2, [r4, #8]
 801340a:	6123      	str	r3, [r4, #16]
 801340c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013410:	68a3      	ldr	r3, [r4, #8]
 8013412:	789b      	ldrb	r3, [r3, #2]
 8013414:	706b      	strb	r3, [r5, #1]
 8013416:	1cab      	adds	r3, r5, #2
 8013418:	68a2      	ldr	r2, [r4, #8]
 801341a:	7852      	ldrb	r2, [r2, #1]
 801341c:	f803 2b01 	strb.w	r2, [r3], #1
 8013420:	68a2      	ldr	r2, [r4, #8]
 8013422:	7812      	ldrb	r2, [r2, #0]
 8013424:	701a      	strb	r2, [r3, #0]
 8013426:	e7b4      	b.n	8013392 <ucdr_deserialize_uint32_t+0x72>
 8013428:	4631      	mov	r1, r6
 801342a:	463a      	mov	r2, r7
 801342c:	4628      	mov	r0, r5
 801342e:	f00f f85e 	bl	80224ee <memcpy>
 8013432:	464a      	mov	r2, r9
 8013434:	19e8      	adds	r0, r5, r7
 8013436:	68a1      	ldr	r1, [r4, #8]
 8013438:	f00f f859 	bl	80224ee <memcpy>
 801343c:	e7a9      	b.n	8013392 <ucdr_deserialize_uint32_t+0x72>
 801343e:	bf00      	nop

08013440 <ucdr_deserialize_endian_uint32_t>:
 8013440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013444:	4604      	mov	r4, r0
 8013446:	460e      	mov	r6, r1
 8013448:	2104      	movs	r1, #4
 801344a:	4615      	mov	r5, r2
 801344c:	f000 fe98 	bl	8014180 <ucdr_buffer_alignment>
 8013450:	4601      	mov	r1, r0
 8013452:	4620      	mov	r0, r4
 8013454:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013458:	f000 feda 	bl	8014210 <ucdr_advance_buffer>
 801345c:	2104      	movs	r1, #4
 801345e:	4620      	mov	r0, r4
 8013460:	f000 fe2e 	bl	80140c0 <ucdr_check_buffer_available_for>
 8013464:	2800      	cmp	r0, #0
 8013466:	d13c      	bne.n	80134e2 <ucdr_deserialize_endian_uint32_t+0xa2>
 8013468:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 801346c:	42bb      	cmp	r3, r7
 801346e:	d933      	bls.n	80134d8 <ucdr_deserialize_endian_uint32_t+0x98>
 8013470:	eba3 0907 	sub.w	r9, r3, r7
 8013474:	60a3      	str	r3, [r4, #8]
 8013476:	6923      	ldr	r3, [r4, #16]
 8013478:	4620      	mov	r0, r4
 801347a:	f1c9 0a04 	rsb	sl, r9, #4
 801347e:	444b      	add	r3, r9
 8013480:	4651      	mov	r1, sl
 8013482:	6123      	str	r3, [r4, #16]
 8013484:	f000 fe28 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8013488:	2800      	cmp	r0, #0
 801348a:	d048      	beq.n	801351e <ucdr_deserialize_endian_uint32_t+0xde>
 801348c:	2e01      	cmp	r6, #1
 801348e:	d061      	beq.n	8013554 <ucdr_deserialize_endian_uint32_t+0x114>
 8013490:	78fb      	ldrb	r3, [r7, #3]
 8013492:	702b      	strb	r3, [r5, #0]
 8013494:	f1b9 0f00 	cmp.w	r9, #0
 8013498:	d050      	beq.n	801353c <ucdr_deserialize_endian_uint32_t+0xfc>
 801349a:	78bb      	ldrb	r3, [r7, #2]
 801349c:	f1b9 0f01 	cmp.w	r9, #1
 80134a0:	706b      	strb	r3, [r5, #1]
 80134a2:	f105 0302 	add.w	r3, r5, #2
 80134a6:	d04d      	beq.n	8013544 <ucdr_deserialize_endian_uint32_t+0x104>
 80134a8:	787b      	ldrb	r3, [r7, #1]
 80134aa:	f1b9 0f02 	cmp.w	r9, #2
 80134ae:	70ab      	strb	r3, [r5, #2]
 80134b0:	f105 0303 	add.w	r3, r5, #3
 80134b4:	d04a      	beq.n	801354c <ucdr_deserialize_endian_uint32_t+0x10c>
 80134b6:	783b      	ldrb	r3, [r7, #0]
 80134b8:	70eb      	strb	r3, [r5, #3]
 80134ba:	6923      	ldr	r3, [r4, #16]
 80134bc:	2104      	movs	r1, #4
 80134be:	68a2      	ldr	r2, [r4, #8]
 80134c0:	3304      	adds	r3, #4
 80134c2:	7da0      	ldrb	r0, [r4, #22]
 80134c4:	4452      	add	r2, sl
 80134c6:	7561      	strb	r1, [r4, #21]
 80134c8:	eba3 0309 	sub.w	r3, r3, r9
 80134cc:	f080 0001 	eor.w	r0, r0, #1
 80134d0:	60a2      	str	r2, [r4, #8]
 80134d2:	6123      	str	r3, [r4, #16]
 80134d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134d8:	2104      	movs	r1, #4
 80134da:	4620      	mov	r0, r4
 80134dc:	f000 fdfc 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 80134e0:	b1a8      	cbz	r0, 801350e <ucdr_deserialize_endian_uint32_t+0xce>
 80134e2:	2e01      	cmp	r6, #1
 80134e4:	68a3      	ldr	r3, [r4, #8]
 80134e6:	d017      	beq.n	8013518 <ucdr_deserialize_endian_uint32_t+0xd8>
 80134e8:	78db      	ldrb	r3, [r3, #3]
 80134ea:	702b      	strb	r3, [r5, #0]
 80134ec:	68a3      	ldr	r3, [r4, #8]
 80134ee:	789b      	ldrb	r3, [r3, #2]
 80134f0:	706b      	strb	r3, [r5, #1]
 80134f2:	68a3      	ldr	r3, [r4, #8]
 80134f4:	785b      	ldrb	r3, [r3, #1]
 80134f6:	70ab      	strb	r3, [r5, #2]
 80134f8:	68a3      	ldr	r3, [r4, #8]
 80134fa:	781b      	ldrb	r3, [r3, #0]
 80134fc:	70eb      	strb	r3, [r5, #3]
 80134fe:	2104      	movs	r1, #4
 8013500:	68a2      	ldr	r2, [r4, #8]
 8013502:	6923      	ldr	r3, [r4, #16]
 8013504:	440a      	add	r2, r1
 8013506:	7561      	strb	r1, [r4, #21]
 8013508:	440b      	add	r3, r1
 801350a:	60a2      	str	r2, [r4, #8]
 801350c:	6123      	str	r3, [r4, #16]
 801350e:	7da0      	ldrb	r0, [r4, #22]
 8013510:	f080 0001 	eor.w	r0, r0, #1
 8013514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	602b      	str	r3, [r5, #0]
 801351c:	e7ef      	b.n	80134fe <ucdr_deserialize_endian_uint32_t+0xbe>
 801351e:	68a2      	ldr	r2, [r4, #8]
 8013520:	6923      	ldr	r3, [r4, #16]
 8013522:	eba2 0209 	sub.w	r2, r2, r9
 8013526:	7da0      	ldrb	r0, [r4, #22]
 8013528:	eba3 0309 	sub.w	r3, r3, r9
 801352c:	f884 8015 	strb.w	r8, [r4, #21]
 8013530:	f080 0001 	eor.w	r0, r0, #1
 8013534:	60a2      	str	r2, [r4, #8]
 8013536:	6123      	str	r3, [r4, #16]
 8013538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801353c:	68a3      	ldr	r3, [r4, #8]
 801353e:	789b      	ldrb	r3, [r3, #2]
 8013540:	706b      	strb	r3, [r5, #1]
 8013542:	1cab      	adds	r3, r5, #2
 8013544:	68a2      	ldr	r2, [r4, #8]
 8013546:	7852      	ldrb	r2, [r2, #1]
 8013548:	f803 2b01 	strb.w	r2, [r3], #1
 801354c:	68a2      	ldr	r2, [r4, #8]
 801354e:	7812      	ldrb	r2, [r2, #0]
 8013550:	701a      	strb	r2, [r3, #0]
 8013552:	e7b2      	b.n	80134ba <ucdr_deserialize_endian_uint32_t+0x7a>
 8013554:	4639      	mov	r1, r7
 8013556:	464a      	mov	r2, r9
 8013558:	4628      	mov	r0, r5
 801355a:	f00e ffc8 	bl	80224ee <memcpy>
 801355e:	4652      	mov	r2, sl
 8013560:	eb05 0009 	add.w	r0, r5, r9
 8013564:	68a1      	ldr	r1, [r4, #8]
 8013566:	f00e ffc2 	bl	80224ee <memcpy>
 801356a:	e7a6      	b.n	80134ba <ucdr_deserialize_endian_uint32_t+0x7a>

0801356c <ucdr_serialize_uint64_t>:
 801356c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013570:	4604      	mov	r4, r0
 8013572:	b082      	sub	sp, #8
 8013574:	2108      	movs	r1, #8
 8013576:	e9cd 2300 	strd	r2, r3, [sp]
 801357a:	f000 fe01 	bl	8014180 <ucdr_buffer_alignment>
 801357e:	4601      	mov	r1, r0
 8013580:	4620      	mov	r0, r4
 8013582:	7d67      	ldrb	r7, [r4, #21]
 8013584:	f000 fe44 	bl	8014210 <ucdr_advance_buffer>
 8013588:	2108      	movs	r1, #8
 801358a:	4620      	mov	r0, r4
 801358c:	f000 fd98 	bl	80140c0 <ucdr_check_buffer_available_for>
 8013590:	2800      	cmp	r0, #0
 8013592:	d14e      	bne.n	8013632 <ucdr_serialize_uint64_t+0xc6>
 8013594:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013598:	42ab      	cmp	r3, r5
 801359a:	d945      	bls.n	8013628 <ucdr_serialize_uint64_t+0xbc>
 801359c:	1b5e      	subs	r6, r3, r5
 801359e:	60a3      	str	r3, [r4, #8]
 80135a0:	6923      	ldr	r3, [r4, #16]
 80135a2:	4620      	mov	r0, r4
 80135a4:	f1c6 0808 	rsb	r8, r6, #8
 80135a8:	4433      	add	r3, r6
 80135aa:	4641      	mov	r1, r8
 80135ac:	6123      	str	r3, [r4, #16]
 80135ae:	f000 fd93 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 80135b2:	2800      	cmp	r0, #0
 80135b4:	d074      	beq.n	80136a0 <ucdr_serialize_uint64_t+0x134>
 80135b6:	7d23      	ldrb	r3, [r4, #20]
 80135b8:	2b01      	cmp	r3, #1
 80135ba:	f000 809b 	beq.w	80136f4 <ucdr_serialize_uint64_t+0x188>
 80135be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80135c2:	702b      	strb	r3, [r5, #0]
 80135c4:	2e00      	cmp	r6, #0
 80135c6:	d078      	beq.n	80136ba <ucdr_serialize_uint64_t+0x14e>
 80135c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80135cc:	2e01      	cmp	r6, #1
 80135ce:	706b      	strb	r3, [r5, #1]
 80135d0:	d077      	beq.n	80136c2 <ucdr_serialize_uint64_t+0x156>
 80135d2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80135d6:	2e02      	cmp	r6, #2
 80135d8:	70ab      	strb	r3, [r5, #2]
 80135da:	d076      	beq.n	80136ca <ucdr_serialize_uint64_t+0x15e>
 80135dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80135e0:	2e03      	cmp	r6, #3
 80135e2:	70eb      	strb	r3, [r5, #3]
 80135e4:	d075      	beq.n	80136d2 <ucdr_serialize_uint64_t+0x166>
 80135e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80135ea:	2e04      	cmp	r6, #4
 80135ec:	712b      	strb	r3, [r5, #4]
 80135ee:	d074      	beq.n	80136da <ucdr_serialize_uint64_t+0x16e>
 80135f0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80135f4:	2e05      	cmp	r6, #5
 80135f6:	716b      	strb	r3, [r5, #5]
 80135f8:	d073      	beq.n	80136e2 <ucdr_serialize_uint64_t+0x176>
 80135fa:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80135fe:	2e06      	cmp	r6, #6
 8013600:	71ab      	strb	r3, [r5, #6]
 8013602:	d072      	beq.n	80136ea <ucdr_serialize_uint64_t+0x17e>
 8013604:	f89d 3000 	ldrb.w	r3, [sp]
 8013608:	71eb      	strb	r3, [r5, #7]
 801360a:	6923      	ldr	r3, [r4, #16]
 801360c:	2108      	movs	r1, #8
 801360e:	68a2      	ldr	r2, [r4, #8]
 8013610:	3308      	adds	r3, #8
 8013612:	7da0      	ldrb	r0, [r4, #22]
 8013614:	4442      	add	r2, r8
 8013616:	7561      	strb	r1, [r4, #21]
 8013618:	1b9e      	subs	r6, r3, r6
 801361a:	f080 0001 	eor.w	r0, r0, #1
 801361e:	60a2      	str	r2, [r4, #8]
 8013620:	6126      	str	r6, [r4, #16]
 8013622:	b002      	add	sp, #8
 8013624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013628:	2108      	movs	r1, #8
 801362a:	4620      	mov	r0, r4
 801362c:	f000 fd54 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8013630:	b350      	cbz	r0, 8013688 <ucdr_serialize_uint64_t+0x11c>
 8013632:	7d23      	ldrb	r3, [r4, #20]
 8013634:	2b01      	cmp	r3, #1
 8013636:	d02d      	beq.n	8013694 <ucdr_serialize_uint64_t+0x128>
 8013638:	68a3      	ldr	r3, [r4, #8]
 801363a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801363e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013642:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013646:	7018      	strb	r0, [r3, #0]
 8013648:	68a3      	ldr	r3, [r4, #8]
 801364a:	705a      	strb	r2, [r3, #1]
 801364c:	68a3      	ldr	r3, [r4, #8]
 801364e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013652:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8013656:	7099      	strb	r1, [r3, #2]
 8013658:	68a3      	ldr	r3, [r4, #8]
 801365a:	70da      	strb	r2, [r3, #3]
 801365c:	68a3      	ldr	r3, [r4, #8]
 801365e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013662:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8013666:	7118      	strb	r0, [r3, #4]
 8013668:	68a3      	ldr	r3, [r4, #8]
 801366a:	715a      	strb	r2, [r3, #5]
 801366c:	68a3      	ldr	r3, [r4, #8]
 801366e:	f89d 2000 	ldrb.w	r2, [sp]
 8013672:	7199      	strb	r1, [r3, #6]
 8013674:	68a3      	ldr	r3, [r4, #8]
 8013676:	71da      	strb	r2, [r3, #7]
 8013678:	2108      	movs	r1, #8
 801367a:	68a2      	ldr	r2, [r4, #8]
 801367c:	6923      	ldr	r3, [r4, #16]
 801367e:	440a      	add	r2, r1
 8013680:	7561      	strb	r1, [r4, #21]
 8013682:	440b      	add	r3, r1
 8013684:	60a2      	str	r2, [r4, #8]
 8013686:	6123      	str	r3, [r4, #16]
 8013688:	7da0      	ldrb	r0, [r4, #22]
 801368a:	f080 0001 	eor.w	r0, r0, #1
 801368e:	b002      	add	sp, #8
 8013690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013694:	466b      	mov	r3, sp
 8013696:	68a2      	ldr	r2, [r4, #8]
 8013698:	cb03      	ldmia	r3!, {r0, r1}
 801369a:	6010      	str	r0, [r2, #0]
 801369c:	6051      	str	r1, [r2, #4]
 801369e:	e7eb      	b.n	8013678 <ucdr_serialize_uint64_t+0x10c>
 80136a0:	68a2      	ldr	r2, [r4, #8]
 80136a2:	6923      	ldr	r3, [r4, #16]
 80136a4:	7da0      	ldrb	r0, [r4, #22]
 80136a6:	1b92      	subs	r2, r2, r6
 80136a8:	1b9b      	subs	r3, r3, r6
 80136aa:	7567      	strb	r7, [r4, #21]
 80136ac:	f080 0001 	eor.w	r0, r0, #1
 80136b0:	60a2      	str	r2, [r4, #8]
 80136b2:	6123      	str	r3, [r4, #16]
 80136b4:	b002      	add	sp, #8
 80136b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136ba:	68a3      	ldr	r3, [r4, #8]
 80136bc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80136c0:	701a      	strb	r2, [r3, #0]
 80136c2:	68a3      	ldr	r3, [r4, #8]
 80136c4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80136c8:	701a      	strb	r2, [r3, #0]
 80136ca:	68a3      	ldr	r3, [r4, #8]
 80136cc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80136d0:	701a      	strb	r2, [r3, #0]
 80136d2:	68a3      	ldr	r3, [r4, #8]
 80136d4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80136d8:	701a      	strb	r2, [r3, #0]
 80136da:	68a3      	ldr	r3, [r4, #8]
 80136dc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80136e0:	701a      	strb	r2, [r3, #0]
 80136e2:	68a3      	ldr	r3, [r4, #8]
 80136e4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80136e8:	701a      	strb	r2, [r3, #0]
 80136ea:	68a3      	ldr	r3, [r4, #8]
 80136ec:	f89d 2000 	ldrb.w	r2, [sp]
 80136f0:	701a      	strb	r2, [r3, #0]
 80136f2:	e78a      	b.n	801360a <ucdr_serialize_uint64_t+0x9e>
 80136f4:	4628      	mov	r0, r5
 80136f6:	466d      	mov	r5, sp
 80136f8:	4632      	mov	r2, r6
 80136fa:	4629      	mov	r1, r5
 80136fc:	f00e fef7 	bl	80224ee <memcpy>
 8013700:	4642      	mov	r2, r8
 8013702:	19a9      	adds	r1, r5, r6
 8013704:	68a0      	ldr	r0, [r4, #8]
 8013706:	f00e fef2 	bl	80224ee <memcpy>
 801370a:	e77e      	b.n	801360a <ucdr_serialize_uint64_t+0x9e>

0801370c <ucdr_serialize_int16_t>:
 801370c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013710:	460b      	mov	r3, r1
 8013712:	b082      	sub	sp, #8
 8013714:	4604      	mov	r4, r0
 8013716:	2102      	movs	r1, #2
 8013718:	f8ad 3006 	strh.w	r3, [sp, #6]
 801371c:	f000 fd30 	bl	8014180 <ucdr_buffer_alignment>
 8013720:	4601      	mov	r1, r0
 8013722:	4620      	mov	r0, r4
 8013724:	7d67      	ldrb	r7, [r4, #21]
 8013726:	f000 fd73 	bl	8014210 <ucdr_advance_buffer>
 801372a:	2102      	movs	r1, #2
 801372c:	4620      	mov	r0, r4
 801372e:	f000 fcc7 	bl	80140c0 <ucdr_check_buffer_available_for>
 8013732:	bb78      	cbnz	r0, 8013794 <ucdr_serialize_int16_t+0x88>
 8013734:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013738:	42ab      	cmp	r3, r5
 801373a:	d926      	bls.n	801378a <ucdr_serialize_int16_t+0x7e>
 801373c:	1b5e      	subs	r6, r3, r5
 801373e:	60a3      	str	r3, [r4, #8]
 8013740:	6923      	ldr	r3, [r4, #16]
 8013742:	4620      	mov	r0, r4
 8013744:	f1c6 0802 	rsb	r8, r6, #2
 8013748:	4433      	add	r3, r6
 801374a:	4641      	mov	r1, r8
 801374c:	6123      	str	r3, [r4, #16]
 801374e:	f000 fcc3 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8013752:	2800      	cmp	r0, #0
 8013754:	d03b      	beq.n	80137ce <ucdr_serialize_int16_t+0xc2>
 8013756:	7d23      	ldrb	r3, [r4, #20]
 8013758:	2b01      	cmp	r3, #1
 801375a:	d04a      	beq.n	80137f2 <ucdr_serialize_int16_t+0xe6>
 801375c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013760:	702b      	strb	r3, [r5, #0]
 8013762:	2e00      	cmp	r6, #0
 8013764:	d040      	beq.n	80137e8 <ucdr_serialize_int16_t+0xdc>
 8013766:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801376a:	706b      	strb	r3, [r5, #1]
 801376c:	6923      	ldr	r3, [r4, #16]
 801376e:	2102      	movs	r1, #2
 8013770:	68a2      	ldr	r2, [r4, #8]
 8013772:	3302      	adds	r3, #2
 8013774:	7da0      	ldrb	r0, [r4, #22]
 8013776:	4442      	add	r2, r8
 8013778:	7561      	strb	r1, [r4, #21]
 801377a:	1b9e      	subs	r6, r3, r6
 801377c:	f080 0001 	eor.w	r0, r0, #1
 8013780:	60a2      	str	r2, [r4, #8]
 8013782:	6126      	str	r6, [r4, #16]
 8013784:	b002      	add	sp, #8
 8013786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801378a:	2102      	movs	r1, #2
 801378c:	4620      	mov	r0, r4
 801378e:	f000 fca3 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8013792:	b190      	cbz	r0, 80137ba <ucdr_serialize_int16_t+0xae>
 8013794:	7d23      	ldrb	r3, [r4, #20]
 8013796:	2b01      	cmp	r3, #1
 8013798:	68a3      	ldr	r3, [r4, #8]
 801379a:	d014      	beq.n	80137c6 <ucdr_serialize_int16_t+0xba>
 801379c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80137a0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80137a4:	7019      	strb	r1, [r3, #0]
 80137a6:	68a3      	ldr	r3, [r4, #8]
 80137a8:	705a      	strb	r2, [r3, #1]
 80137aa:	2102      	movs	r1, #2
 80137ac:	68a2      	ldr	r2, [r4, #8]
 80137ae:	6923      	ldr	r3, [r4, #16]
 80137b0:	440a      	add	r2, r1
 80137b2:	7561      	strb	r1, [r4, #21]
 80137b4:	440b      	add	r3, r1
 80137b6:	60a2      	str	r2, [r4, #8]
 80137b8:	6123      	str	r3, [r4, #16]
 80137ba:	7da0      	ldrb	r0, [r4, #22]
 80137bc:	f080 0001 	eor.w	r0, r0, #1
 80137c0:	b002      	add	sp, #8
 80137c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137c6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80137ca:	801a      	strh	r2, [r3, #0]
 80137cc:	e7ed      	b.n	80137aa <ucdr_serialize_int16_t+0x9e>
 80137ce:	68a2      	ldr	r2, [r4, #8]
 80137d0:	6923      	ldr	r3, [r4, #16]
 80137d2:	7da0      	ldrb	r0, [r4, #22]
 80137d4:	1b92      	subs	r2, r2, r6
 80137d6:	1b9b      	subs	r3, r3, r6
 80137d8:	7567      	strb	r7, [r4, #21]
 80137da:	f080 0001 	eor.w	r0, r0, #1
 80137de:	60a2      	str	r2, [r4, #8]
 80137e0:	6123      	str	r3, [r4, #16]
 80137e2:	b002      	add	sp, #8
 80137e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137e8:	68a3      	ldr	r3, [r4, #8]
 80137ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80137ee:	701a      	strb	r2, [r3, #0]
 80137f0:	e7bc      	b.n	801376c <ucdr_serialize_int16_t+0x60>
 80137f2:	4628      	mov	r0, r5
 80137f4:	f10d 0506 	add.w	r5, sp, #6
 80137f8:	4632      	mov	r2, r6
 80137fa:	4629      	mov	r1, r5
 80137fc:	f00e fe77 	bl	80224ee <memcpy>
 8013800:	4642      	mov	r2, r8
 8013802:	19a9      	adds	r1, r5, r6
 8013804:	68a0      	ldr	r0, [r4, #8]
 8013806:	f00e fe72 	bl	80224ee <memcpy>
 801380a:	e7af      	b.n	801376c <ucdr_serialize_int16_t+0x60>

0801380c <ucdr_deserialize_int16_t>:
 801380c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013810:	4604      	mov	r4, r0
 8013812:	460d      	mov	r5, r1
 8013814:	2102      	movs	r1, #2
 8013816:	f000 fcb3 	bl	8014180 <ucdr_buffer_alignment>
 801381a:	4601      	mov	r1, r0
 801381c:	4620      	mov	r0, r4
 801381e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013822:	f000 fcf5 	bl	8014210 <ucdr_advance_buffer>
 8013826:	2102      	movs	r1, #2
 8013828:	4620      	mov	r0, r4
 801382a:	f000 fc49 	bl	80140c0 <ucdr_check_buffer_available_for>
 801382e:	bb60      	cbnz	r0, 801388a <ucdr_deserialize_int16_t+0x7e>
 8013830:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013834:	42be      	cmp	r6, r7
 8013836:	d923      	bls.n	8013880 <ucdr_deserialize_int16_t+0x74>
 8013838:	6923      	ldr	r3, [r4, #16]
 801383a:	4620      	mov	r0, r4
 801383c:	60a6      	str	r6, [r4, #8]
 801383e:	1bf6      	subs	r6, r6, r7
 8013840:	4433      	add	r3, r6
 8013842:	f1c6 0902 	rsb	r9, r6, #2
 8013846:	6123      	str	r3, [r4, #16]
 8013848:	4649      	mov	r1, r9
 801384a:	f000 fc45 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 801384e:	2800      	cmp	r0, #0
 8013850:	d034      	beq.n	80138bc <ucdr_deserialize_int16_t+0xb0>
 8013852:	7d23      	ldrb	r3, [r4, #20]
 8013854:	2b01      	cmp	r3, #1
 8013856:	d042      	beq.n	80138de <ucdr_deserialize_int16_t+0xd2>
 8013858:	787b      	ldrb	r3, [r7, #1]
 801385a:	702b      	strb	r3, [r5, #0]
 801385c:	2e00      	cmp	r6, #0
 801385e:	d03a      	beq.n	80138d6 <ucdr_deserialize_int16_t+0xca>
 8013860:	783b      	ldrb	r3, [r7, #0]
 8013862:	706b      	strb	r3, [r5, #1]
 8013864:	6923      	ldr	r3, [r4, #16]
 8013866:	2102      	movs	r1, #2
 8013868:	68a2      	ldr	r2, [r4, #8]
 801386a:	3302      	adds	r3, #2
 801386c:	7da0      	ldrb	r0, [r4, #22]
 801386e:	444a      	add	r2, r9
 8013870:	7561      	strb	r1, [r4, #21]
 8013872:	1b9b      	subs	r3, r3, r6
 8013874:	f080 0001 	eor.w	r0, r0, #1
 8013878:	60a2      	str	r2, [r4, #8]
 801387a:	6123      	str	r3, [r4, #16]
 801387c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013880:	2102      	movs	r1, #2
 8013882:	4620      	mov	r0, r4
 8013884:	f000 fc28 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8013888:	b180      	cbz	r0, 80138ac <ucdr_deserialize_int16_t+0xa0>
 801388a:	7d23      	ldrb	r3, [r4, #20]
 801388c:	2b01      	cmp	r3, #1
 801388e:	68a3      	ldr	r3, [r4, #8]
 8013890:	d011      	beq.n	80138b6 <ucdr_deserialize_int16_t+0xaa>
 8013892:	785b      	ldrb	r3, [r3, #1]
 8013894:	702b      	strb	r3, [r5, #0]
 8013896:	68a3      	ldr	r3, [r4, #8]
 8013898:	781b      	ldrb	r3, [r3, #0]
 801389a:	706b      	strb	r3, [r5, #1]
 801389c:	2102      	movs	r1, #2
 801389e:	68a2      	ldr	r2, [r4, #8]
 80138a0:	6923      	ldr	r3, [r4, #16]
 80138a2:	440a      	add	r2, r1
 80138a4:	7561      	strb	r1, [r4, #21]
 80138a6:	440b      	add	r3, r1
 80138a8:	60a2      	str	r2, [r4, #8]
 80138aa:	6123      	str	r3, [r4, #16]
 80138ac:	7da0      	ldrb	r0, [r4, #22]
 80138ae:	f080 0001 	eor.w	r0, r0, #1
 80138b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138b6:	881b      	ldrh	r3, [r3, #0]
 80138b8:	802b      	strh	r3, [r5, #0]
 80138ba:	e7ef      	b.n	801389c <ucdr_deserialize_int16_t+0x90>
 80138bc:	68a2      	ldr	r2, [r4, #8]
 80138be:	6923      	ldr	r3, [r4, #16]
 80138c0:	1b92      	subs	r2, r2, r6
 80138c2:	7da0      	ldrb	r0, [r4, #22]
 80138c4:	1b9b      	subs	r3, r3, r6
 80138c6:	f884 8015 	strb.w	r8, [r4, #21]
 80138ca:	f080 0001 	eor.w	r0, r0, #1
 80138ce:	60a2      	str	r2, [r4, #8]
 80138d0:	6123      	str	r3, [r4, #16]
 80138d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138d6:	68a3      	ldr	r3, [r4, #8]
 80138d8:	781b      	ldrb	r3, [r3, #0]
 80138da:	706b      	strb	r3, [r5, #1]
 80138dc:	e7c2      	b.n	8013864 <ucdr_deserialize_int16_t+0x58>
 80138de:	4639      	mov	r1, r7
 80138e0:	4632      	mov	r2, r6
 80138e2:	4628      	mov	r0, r5
 80138e4:	f00e fe03 	bl	80224ee <memcpy>
 80138e8:	464a      	mov	r2, r9
 80138ea:	19a8      	adds	r0, r5, r6
 80138ec:	68a1      	ldr	r1, [r4, #8]
 80138ee:	f00e fdfe 	bl	80224ee <memcpy>
 80138f2:	e7b7      	b.n	8013864 <ucdr_deserialize_int16_t+0x58>

080138f4 <ucdr_serialize_int32_t>:
 80138f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138f8:	b082      	sub	sp, #8
 80138fa:	4604      	mov	r4, r0
 80138fc:	9101      	str	r1, [sp, #4]
 80138fe:	2104      	movs	r1, #4
 8013900:	f000 fc3e 	bl	8014180 <ucdr_buffer_alignment>
 8013904:	4601      	mov	r1, r0
 8013906:	4620      	mov	r0, r4
 8013908:	7d67      	ldrb	r7, [r4, #21]
 801390a:	f000 fc81 	bl	8014210 <ucdr_advance_buffer>
 801390e:	2104      	movs	r1, #4
 8013910:	4620      	mov	r0, r4
 8013912:	f000 fbd5 	bl	80140c0 <ucdr_check_buffer_available_for>
 8013916:	2800      	cmp	r0, #0
 8013918:	d139      	bne.n	801398e <ucdr_serialize_int32_t+0x9a>
 801391a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801391e:	42ab      	cmp	r3, r5
 8013920:	d930      	bls.n	8013984 <ucdr_serialize_int32_t+0x90>
 8013922:	1b5e      	subs	r6, r3, r5
 8013924:	60a3      	str	r3, [r4, #8]
 8013926:	6923      	ldr	r3, [r4, #16]
 8013928:	4620      	mov	r0, r4
 801392a:	f1c6 0804 	rsb	r8, r6, #4
 801392e:	4433      	add	r3, r6
 8013930:	4641      	mov	r1, r8
 8013932:	6123      	str	r3, [r4, #16]
 8013934:	f000 fbd0 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8013938:	2800      	cmp	r0, #0
 801393a:	d04c      	beq.n	80139d6 <ucdr_serialize_int32_t+0xe2>
 801393c:	7d23      	ldrb	r3, [r4, #20]
 801393e:	2b01      	cmp	r3, #1
 8013940:	d063      	beq.n	8013a0a <ucdr_serialize_int32_t+0x116>
 8013942:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013946:	702b      	strb	r3, [r5, #0]
 8013948:	2e00      	cmp	r6, #0
 801394a:	d051      	beq.n	80139f0 <ucdr_serialize_int32_t+0xfc>
 801394c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013950:	2e01      	cmp	r6, #1
 8013952:	706b      	strb	r3, [r5, #1]
 8013954:	d050      	beq.n	80139f8 <ucdr_serialize_int32_t+0x104>
 8013956:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801395a:	2e02      	cmp	r6, #2
 801395c:	70ab      	strb	r3, [r5, #2]
 801395e:	d04f      	beq.n	8013a00 <ucdr_serialize_int32_t+0x10c>
 8013960:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013964:	70eb      	strb	r3, [r5, #3]
 8013966:	6923      	ldr	r3, [r4, #16]
 8013968:	2104      	movs	r1, #4
 801396a:	68a2      	ldr	r2, [r4, #8]
 801396c:	3304      	adds	r3, #4
 801396e:	7da0      	ldrb	r0, [r4, #22]
 8013970:	4442      	add	r2, r8
 8013972:	7561      	strb	r1, [r4, #21]
 8013974:	1b9e      	subs	r6, r3, r6
 8013976:	f080 0001 	eor.w	r0, r0, #1
 801397a:	60a2      	str	r2, [r4, #8]
 801397c:	6126      	str	r6, [r4, #16]
 801397e:	b002      	add	sp, #8
 8013980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013984:	2104      	movs	r1, #4
 8013986:	4620      	mov	r0, r4
 8013988:	f000 fba6 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 801398c:	b1d0      	cbz	r0, 80139c4 <ucdr_serialize_int32_t+0xd0>
 801398e:	7d23      	ldrb	r3, [r4, #20]
 8013990:	2b01      	cmp	r3, #1
 8013992:	68a3      	ldr	r3, [r4, #8]
 8013994:	d01c      	beq.n	80139d0 <ucdr_serialize_int32_t+0xdc>
 8013996:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801399a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801399e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80139a2:	7018      	strb	r0, [r3, #0]
 80139a4:	68a3      	ldr	r3, [r4, #8]
 80139a6:	705a      	strb	r2, [r3, #1]
 80139a8:	68a3      	ldr	r3, [r4, #8]
 80139aa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80139ae:	7099      	strb	r1, [r3, #2]
 80139b0:	68a3      	ldr	r3, [r4, #8]
 80139b2:	70da      	strb	r2, [r3, #3]
 80139b4:	2104      	movs	r1, #4
 80139b6:	68a2      	ldr	r2, [r4, #8]
 80139b8:	6923      	ldr	r3, [r4, #16]
 80139ba:	440a      	add	r2, r1
 80139bc:	7561      	strb	r1, [r4, #21]
 80139be:	440b      	add	r3, r1
 80139c0:	60a2      	str	r2, [r4, #8]
 80139c2:	6123      	str	r3, [r4, #16]
 80139c4:	7da0      	ldrb	r0, [r4, #22]
 80139c6:	f080 0001 	eor.w	r0, r0, #1
 80139ca:	b002      	add	sp, #8
 80139cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139d0:	9a01      	ldr	r2, [sp, #4]
 80139d2:	601a      	str	r2, [r3, #0]
 80139d4:	e7ee      	b.n	80139b4 <ucdr_serialize_int32_t+0xc0>
 80139d6:	68a2      	ldr	r2, [r4, #8]
 80139d8:	6923      	ldr	r3, [r4, #16]
 80139da:	7da0      	ldrb	r0, [r4, #22]
 80139dc:	1b92      	subs	r2, r2, r6
 80139de:	1b9b      	subs	r3, r3, r6
 80139e0:	7567      	strb	r7, [r4, #21]
 80139e2:	f080 0001 	eor.w	r0, r0, #1
 80139e6:	60a2      	str	r2, [r4, #8]
 80139e8:	6123      	str	r3, [r4, #16]
 80139ea:	b002      	add	sp, #8
 80139ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139f0:	68a3      	ldr	r3, [r4, #8]
 80139f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80139f6:	701a      	strb	r2, [r3, #0]
 80139f8:	68a3      	ldr	r3, [r4, #8]
 80139fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80139fe:	701a      	strb	r2, [r3, #0]
 8013a00:	68a3      	ldr	r3, [r4, #8]
 8013a02:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013a06:	701a      	strb	r2, [r3, #0]
 8013a08:	e7ad      	b.n	8013966 <ucdr_serialize_int32_t+0x72>
 8013a0a:	4628      	mov	r0, r5
 8013a0c:	ad01      	add	r5, sp, #4
 8013a0e:	4632      	mov	r2, r6
 8013a10:	4629      	mov	r1, r5
 8013a12:	f00e fd6c 	bl	80224ee <memcpy>
 8013a16:	4642      	mov	r2, r8
 8013a18:	19a9      	adds	r1, r5, r6
 8013a1a:	68a0      	ldr	r0, [r4, #8]
 8013a1c:	f00e fd67 	bl	80224ee <memcpy>
 8013a20:	e7a1      	b.n	8013966 <ucdr_serialize_int32_t+0x72>
 8013a22:	bf00      	nop

08013a24 <ucdr_deserialize_int32_t>:
 8013a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a28:	4604      	mov	r4, r0
 8013a2a:	460d      	mov	r5, r1
 8013a2c:	2104      	movs	r1, #4
 8013a2e:	f000 fba7 	bl	8014180 <ucdr_buffer_alignment>
 8013a32:	4601      	mov	r1, r0
 8013a34:	4620      	mov	r0, r4
 8013a36:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013a3a:	f000 fbe9 	bl	8014210 <ucdr_advance_buffer>
 8013a3e:	2104      	movs	r1, #4
 8013a40:	4620      	mov	r0, r4
 8013a42:	f000 fb3d 	bl	80140c0 <ucdr_check_buffer_available_for>
 8013a46:	2800      	cmp	r0, #0
 8013a48:	d138      	bne.n	8013abc <ucdr_deserialize_int32_t+0x98>
 8013a4a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013a4e:	42b7      	cmp	r7, r6
 8013a50:	d92f      	bls.n	8013ab2 <ucdr_deserialize_int32_t+0x8e>
 8013a52:	6923      	ldr	r3, [r4, #16]
 8013a54:	4620      	mov	r0, r4
 8013a56:	60a7      	str	r7, [r4, #8]
 8013a58:	1bbf      	subs	r7, r7, r6
 8013a5a:	443b      	add	r3, r7
 8013a5c:	f1c7 0904 	rsb	r9, r7, #4
 8013a60:	6123      	str	r3, [r4, #16]
 8013a62:	4649      	mov	r1, r9
 8013a64:	f000 fb38 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8013a68:	2800      	cmp	r0, #0
 8013a6a:	d046      	beq.n	8013afa <ucdr_deserialize_int32_t+0xd6>
 8013a6c:	7d23      	ldrb	r3, [r4, #20]
 8013a6e:	2b01      	cmp	r3, #1
 8013a70:	d05c      	beq.n	8013b2c <ucdr_deserialize_int32_t+0x108>
 8013a72:	78f3      	ldrb	r3, [r6, #3]
 8013a74:	702b      	strb	r3, [r5, #0]
 8013a76:	2f00      	cmp	r7, #0
 8013a78:	d04c      	beq.n	8013b14 <ucdr_deserialize_int32_t+0xf0>
 8013a7a:	78b3      	ldrb	r3, [r6, #2]
 8013a7c:	2f01      	cmp	r7, #1
 8013a7e:	706b      	strb	r3, [r5, #1]
 8013a80:	f105 0302 	add.w	r3, r5, #2
 8013a84:	d04a      	beq.n	8013b1c <ucdr_deserialize_int32_t+0xf8>
 8013a86:	7873      	ldrb	r3, [r6, #1]
 8013a88:	2f02      	cmp	r7, #2
 8013a8a:	70ab      	strb	r3, [r5, #2]
 8013a8c:	f105 0303 	add.w	r3, r5, #3
 8013a90:	d048      	beq.n	8013b24 <ucdr_deserialize_int32_t+0x100>
 8013a92:	7833      	ldrb	r3, [r6, #0]
 8013a94:	70eb      	strb	r3, [r5, #3]
 8013a96:	6923      	ldr	r3, [r4, #16]
 8013a98:	2104      	movs	r1, #4
 8013a9a:	68a2      	ldr	r2, [r4, #8]
 8013a9c:	3304      	adds	r3, #4
 8013a9e:	7da0      	ldrb	r0, [r4, #22]
 8013aa0:	444a      	add	r2, r9
 8013aa2:	7561      	strb	r1, [r4, #21]
 8013aa4:	1bdb      	subs	r3, r3, r7
 8013aa6:	f080 0001 	eor.w	r0, r0, #1
 8013aaa:	60a2      	str	r2, [r4, #8]
 8013aac:	6123      	str	r3, [r4, #16]
 8013aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ab2:	2104      	movs	r1, #4
 8013ab4:	4620      	mov	r0, r4
 8013ab6:	f000 fb0f 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8013aba:	b1b0      	cbz	r0, 8013aea <ucdr_deserialize_int32_t+0xc6>
 8013abc:	7d23      	ldrb	r3, [r4, #20]
 8013abe:	2b01      	cmp	r3, #1
 8013ac0:	68a3      	ldr	r3, [r4, #8]
 8013ac2:	d017      	beq.n	8013af4 <ucdr_deserialize_int32_t+0xd0>
 8013ac4:	78db      	ldrb	r3, [r3, #3]
 8013ac6:	702b      	strb	r3, [r5, #0]
 8013ac8:	68a3      	ldr	r3, [r4, #8]
 8013aca:	789b      	ldrb	r3, [r3, #2]
 8013acc:	706b      	strb	r3, [r5, #1]
 8013ace:	68a3      	ldr	r3, [r4, #8]
 8013ad0:	785b      	ldrb	r3, [r3, #1]
 8013ad2:	70ab      	strb	r3, [r5, #2]
 8013ad4:	68a3      	ldr	r3, [r4, #8]
 8013ad6:	781b      	ldrb	r3, [r3, #0]
 8013ad8:	70eb      	strb	r3, [r5, #3]
 8013ada:	2104      	movs	r1, #4
 8013adc:	68a2      	ldr	r2, [r4, #8]
 8013ade:	6923      	ldr	r3, [r4, #16]
 8013ae0:	440a      	add	r2, r1
 8013ae2:	7561      	strb	r1, [r4, #21]
 8013ae4:	440b      	add	r3, r1
 8013ae6:	60a2      	str	r2, [r4, #8]
 8013ae8:	6123      	str	r3, [r4, #16]
 8013aea:	7da0      	ldrb	r0, [r4, #22]
 8013aec:	f080 0001 	eor.w	r0, r0, #1
 8013af0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	602b      	str	r3, [r5, #0]
 8013af8:	e7ef      	b.n	8013ada <ucdr_deserialize_int32_t+0xb6>
 8013afa:	68a2      	ldr	r2, [r4, #8]
 8013afc:	6923      	ldr	r3, [r4, #16]
 8013afe:	1bd2      	subs	r2, r2, r7
 8013b00:	7da0      	ldrb	r0, [r4, #22]
 8013b02:	1bdb      	subs	r3, r3, r7
 8013b04:	f884 8015 	strb.w	r8, [r4, #21]
 8013b08:	f080 0001 	eor.w	r0, r0, #1
 8013b0c:	60a2      	str	r2, [r4, #8]
 8013b0e:	6123      	str	r3, [r4, #16]
 8013b10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b14:	68a3      	ldr	r3, [r4, #8]
 8013b16:	789b      	ldrb	r3, [r3, #2]
 8013b18:	706b      	strb	r3, [r5, #1]
 8013b1a:	1cab      	adds	r3, r5, #2
 8013b1c:	68a2      	ldr	r2, [r4, #8]
 8013b1e:	7852      	ldrb	r2, [r2, #1]
 8013b20:	f803 2b01 	strb.w	r2, [r3], #1
 8013b24:	68a2      	ldr	r2, [r4, #8]
 8013b26:	7812      	ldrb	r2, [r2, #0]
 8013b28:	701a      	strb	r2, [r3, #0]
 8013b2a:	e7b4      	b.n	8013a96 <ucdr_deserialize_int32_t+0x72>
 8013b2c:	4631      	mov	r1, r6
 8013b2e:	463a      	mov	r2, r7
 8013b30:	4628      	mov	r0, r5
 8013b32:	f00e fcdc 	bl	80224ee <memcpy>
 8013b36:	464a      	mov	r2, r9
 8013b38:	19e8      	adds	r0, r5, r7
 8013b3a:	68a1      	ldr	r1, [r4, #8]
 8013b3c:	f00e fcd7 	bl	80224ee <memcpy>
 8013b40:	e7a9      	b.n	8013a96 <ucdr_deserialize_int32_t+0x72>
 8013b42:	bf00      	nop

08013b44 <ucdr_serialize_float>:
 8013b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b48:	4604      	mov	r4, r0
 8013b4a:	b082      	sub	sp, #8
 8013b4c:	2104      	movs	r1, #4
 8013b4e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013b52:	f000 fb15 	bl	8014180 <ucdr_buffer_alignment>
 8013b56:	4601      	mov	r1, r0
 8013b58:	4620      	mov	r0, r4
 8013b5a:	7d67      	ldrb	r7, [r4, #21]
 8013b5c:	f000 fb58 	bl	8014210 <ucdr_advance_buffer>
 8013b60:	2104      	movs	r1, #4
 8013b62:	4620      	mov	r0, r4
 8013b64:	f000 faac 	bl	80140c0 <ucdr_check_buffer_available_for>
 8013b68:	2800      	cmp	r0, #0
 8013b6a:	d139      	bne.n	8013be0 <ucdr_serialize_float+0x9c>
 8013b6c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013b70:	42ab      	cmp	r3, r5
 8013b72:	d930      	bls.n	8013bd6 <ucdr_serialize_float+0x92>
 8013b74:	1b5e      	subs	r6, r3, r5
 8013b76:	60a3      	str	r3, [r4, #8]
 8013b78:	6923      	ldr	r3, [r4, #16]
 8013b7a:	4620      	mov	r0, r4
 8013b7c:	f1c6 0804 	rsb	r8, r6, #4
 8013b80:	4433      	add	r3, r6
 8013b82:	4641      	mov	r1, r8
 8013b84:	6123      	str	r3, [r4, #16]
 8013b86:	f000 faa7 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8013b8a:	2800      	cmp	r0, #0
 8013b8c:	d04c      	beq.n	8013c28 <ucdr_serialize_float+0xe4>
 8013b8e:	7d23      	ldrb	r3, [r4, #20]
 8013b90:	2b01      	cmp	r3, #1
 8013b92:	d063      	beq.n	8013c5c <ucdr_serialize_float+0x118>
 8013b94:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013b98:	702b      	strb	r3, [r5, #0]
 8013b9a:	2e00      	cmp	r6, #0
 8013b9c:	d051      	beq.n	8013c42 <ucdr_serialize_float+0xfe>
 8013b9e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013ba2:	2e01      	cmp	r6, #1
 8013ba4:	706b      	strb	r3, [r5, #1]
 8013ba6:	d050      	beq.n	8013c4a <ucdr_serialize_float+0x106>
 8013ba8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013bac:	2e02      	cmp	r6, #2
 8013bae:	70ab      	strb	r3, [r5, #2]
 8013bb0:	d04f      	beq.n	8013c52 <ucdr_serialize_float+0x10e>
 8013bb2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013bb6:	70eb      	strb	r3, [r5, #3]
 8013bb8:	6923      	ldr	r3, [r4, #16]
 8013bba:	2104      	movs	r1, #4
 8013bbc:	68a2      	ldr	r2, [r4, #8]
 8013bbe:	3304      	adds	r3, #4
 8013bc0:	7da0      	ldrb	r0, [r4, #22]
 8013bc2:	4442      	add	r2, r8
 8013bc4:	7561      	strb	r1, [r4, #21]
 8013bc6:	1b9e      	subs	r6, r3, r6
 8013bc8:	f080 0001 	eor.w	r0, r0, #1
 8013bcc:	60a2      	str	r2, [r4, #8]
 8013bce:	6126      	str	r6, [r4, #16]
 8013bd0:	b002      	add	sp, #8
 8013bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bd6:	2104      	movs	r1, #4
 8013bd8:	4620      	mov	r0, r4
 8013bda:	f000 fa7d 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8013bde:	b1d0      	cbz	r0, 8013c16 <ucdr_serialize_float+0xd2>
 8013be0:	7d23      	ldrb	r3, [r4, #20]
 8013be2:	2b01      	cmp	r3, #1
 8013be4:	68a3      	ldr	r3, [r4, #8]
 8013be6:	d01c      	beq.n	8013c22 <ucdr_serialize_float+0xde>
 8013be8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013bec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013bf0:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013bf4:	7018      	strb	r0, [r3, #0]
 8013bf6:	68a3      	ldr	r3, [r4, #8]
 8013bf8:	705a      	strb	r2, [r3, #1]
 8013bfa:	68a3      	ldr	r3, [r4, #8]
 8013bfc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013c00:	7099      	strb	r1, [r3, #2]
 8013c02:	68a3      	ldr	r3, [r4, #8]
 8013c04:	70da      	strb	r2, [r3, #3]
 8013c06:	2104      	movs	r1, #4
 8013c08:	68a2      	ldr	r2, [r4, #8]
 8013c0a:	6923      	ldr	r3, [r4, #16]
 8013c0c:	440a      	add	r2, r1
 8013c0e:	7561      	strb	r1, [r4, #21]
 8013c10:	440b      	add	r3, r1
 8013c12:	60a2      	str	r2, [r4, #8]
 8013c14:	6123      	str	r3, [r4, #16]
 8013c16:	7da0      	ldrb	r0, [r4, #22]
 8013c18:	f080 0001 	eor.w	r0, r0, #1
 8013c1c:	b002      	add	sp, #8
 8013c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c22:	9a01      	ldr	r2, [sp, #4]
 8013c24:	601a      	str	r2, [r3, #0]
 8013c26:	e7ee      	b.n	8013c06 <ucdr_serialize_float+0xc2>
 8013c28:	68a2      	ldr	r2, [r4, #8]
 8013c2a:	6923      	ldr	r3, [r4, #16]
 8013c2c:	7da0      	ldrb	r0, [r4, #22]
 8013c2e:	1b92      	subs	r2, r2, r6
 8013c30:	1b9b      	subs	r3, r3, r6
 8013c32:	7567      	strb	r7, [r4, #21]
 8013c34:	f080 0001 	eor.w	r0, r0, #1
 8013c38:	60a2      	str	r2, [r4, #8]
 8013c3a:	6123      	str	r3, [r4, #16]
 8013c3c:	b002      	add	sp, #8
 8013c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c42:	68a3      	ldr	r3, [r4, #8]
 8013c44:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013c48:	701a      	strb	r2, [r3, #0]
 8013c4a:	68a3      	ldr	r3, [r4, #8]
 8013c4c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013c50:	701a      	strb	r2, [r3, #0]
 8013c52:	68a3      	ldr	r3, [r4, #8]
 8013c54:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013c58:	701a      	strb	r2, [r3, #0]
 8013c5a:	e7ad      	b.n	8013bb8 <ucdr_serialize_float+0x74>
 8013c5c:	4628      	mov	r0, r5
 8013c5e:	ad01      	add	r5, sp, #4
 8013c60:	4632      	mov	r2, r6
 8013c62:	4629      	mov	r1, r5
 8013c64:	f00e fc43 	bl	80224ee <memcpy>
 8013c68:	4642      	mov	r2, r8
 8013c6a:	19a9      	adds	r1, r5, r6
 8013c6c:	68a0      	ldr	r0, [r4, #8]
 8013c6e:	f00e fc3e 	bl	80224ee <memcpy>
 8013c72:	e7a1      	b.n	8013bb8 <ucdr_serialize_float+0x74>

08013c74 <ucdr_deserialize_float>:
 8013c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c78:	4604      	mov	r4, r0
 8013c7a:	460d      	mov	r5, r1
 8013c7c:	2104      	movs	r1, #4
 8013c7e:	f000 fa7f 	bl	8014180 <ucdr_buffer_alignment>
 8013c82:	4601      	mov	r1, r0
 8013c84:	4620      	mov	r0, r4
 8013c86:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013c8a:	f000 fac1 	bl	8014210 <ucdr_advance_buffer>
 8013c8e:	2104      	movs	r1, #4
 8013c90:	4620      	mov	r0, r4
 8013c92:	f000 fa15 	bl	80140c0 <ucdr_check_buffer_available_for>
 8013c96:	2800      	cmp	r0, #0
 8013c98:	d138      	bne.n	8013d0c <ucdr_deserialize_float+0x98>
 8013c9a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013c9e:	42b7      	cmp	r7, r6
 8013ca0:	d92f      	bls.n	8013d02 <ucdr_deserialize_float+0x8e>
 8013ca2:	6923      	ldr	r3, [r4, #16]
 8013ca4:	4620      	mov	r0, r4
 8013ca6:	60a7      	str	r7, [r4, #8]
 8013ca8:	1bbf      	subs	r7, r7, r6
 8013caa:	443b      	add	r3, r7
 8013cac:	f1c7 0904 	rsb	r9, r7, #4
 8013cb0:	6123      	str	r3, [r4, #16]
 8013cb2:	4649      	mov	r1, r9
 8013cb4:	f000 fa10 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8013cb8:	2800      	cmp	r0, #0
 8013cba:	d046      	beq.n	8013d4a <ucdr_deserialize_float+0xd6>
 8013cbc:	7d23      	ldrb	r3, [r4, #20]
 8013cbe:	2b01      	cmp	r3, #1
 8013cc0:	d05c      	beq.n	8013d7c <ucdr_deserialize_float+0x108>
 8013cc2:	78f3      	ldrb	r3, [r6, #3]
 8013cc4:	702b      	strb	r3, [r5, #0]
 8013cc6:	2f00      	cmp	r7, #0
 8013cc8:	d04c      	beq.n	8013d64 <ucdr_deserialize_float+0xf0>
 8013cca:	78b3      	ldrb	r3, [r6, #2]
 8013ccc:	2f01      	cmp	r7, #1
 8013cce:	706b      	strb	r3, [r5, #1]
 8013cd0:	f105 0302 	add.w	r3, r5, #2
 8013cd4:	d04a      	beq.n	8013d6c <ucdr_deserialize_float+0xf8>
 8013cd6:	7873      	ldrb	r3, [r6, #1]
 8013cd8:	2f02      	cmp	r7, #2
 8013cda:	70ab      	strb	r3, [r5, #2]
 8013cdc:	f105 0303 	add.w	r3, r5, #3
 8013ce0:	d048      	beq.n	8013d74 <ucdr_deserialize_float+0x100>
 8013ce2:	7833      	ldrb	r3, [r6, #0]
 8013ce4:	70eb      	strb	r3, [r5, #3]
 8013ce6:	6923      	ldr	r3, [r4, #16]
 8013ce8:	2104      	movs	r1, #4
 8013cea:	68a2      	ldr	r2, [r4, #8]
 8013cec:	3304      	adds	r3, #4
 8013cee:	7da0      	ldrb	r0, [r4, #22]
 8013cf0:	444a      	add	r2, r9
 8013cf2:	7561      	strb	r1, [r4, #21]
 8013cf4:	1bdb      	subs	r3, r3, r7
 8013cf6:	f080 0001 	eor.w	r0, r0, #1
 8013cfa:	60a2      	str	r2, [r4, #8]
 8013cfc:	6123      	str	r3, [r4, #16]
 8013cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d02:	2104      	movs	r1, #4
 8013d04:	4620      	mov	r0, r4
 8013d06:	f000 f9e7 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8013d0a:	b1b0      	cbz	r0, 8013d3a <ucdr_deserialize_float+0xc6>
 8013d0c:	7d23      	ldrb	r3, [r4, #20]
 8013d0e:	2b01      	cmp	r3, #1
 8013d10:	68a3      	ldr	r3, [r4, #8]
 8013d12:	d017      	beq.n	8013d44 <ucdr_deserialize_float+0xd0>
 8013d14:	78db      	ldrb	r3, [r3, #3]
 8013d16:	702b      	strb	r3, [r5, #0]
 8013d18:	68a3      	ldr	r3, [r4, #8]
 8013d1a:	789b      	ldrb	r3, [r3, #2]
 8013d1c:	706b      	strb	r3, [r5, #1]
 8013d1e:	68a3      	ldr	r3, [r4, #8]
 8013d20:	785b      	ldrb	r3, [r3, #1]
 8013d22:	70ab      	strb	r3, [r5, #2]
 8013d24:	68a3      	ldr	r3, [r4, #8]
 8013d26:	781b      	ldrb	r3, [r3, #0]
 8013d28:	70eb      	strb	r3, [r5, #3]
 8013d2a:	2104      	movs	r1, #4
 8013d2c:	68a2      	ldr	r2, [r4, #8]
 8013d2e:	6923      	ldr	r3, [r4, #16]
 8013d30:	440a      	add	r2, r1
 8013d32:	7561      	strb	r1, [r4, #21]
 8013d34:	440b      	add	r3, r1
 8013d36:	60a2      	str	r2, [r4, #8]
 8013d38:	6123      	str	r3, [r4, #16]
 8013d3a:	7da0      	ldrb	r0, [r4, #22]
 8013d3c:	f080 0001 	eor.w	r0, r0, #1
 8013d40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	602b      	str	r3, [r5, #0]
 8013d48:	e7ef      	b.n	8013d2a <ucdr_deserialize_float+0xb6>
 8013d4a:	68a2      	ldr	r2, [r4, #8]
 8013d4c:	6923      	ldr	r3, [r4, #16]
 8013d4e:	1bd2      	subs	r2, r2, r7
 8013d50:	7da0      	ldrb	r0, [r4, #22]
 8013d52:	1bdb      	subs	r3, r3, r7
 8013d54:	f884 8015 	strb.w	r8, [r4, #21]
 8013d58:	f080 0001 	eor.w	r0, r0, #1
 8013d5c:	60a2      	str	r2, [r4, #8]
 8013d5e:	6123      	str	r3, [r4, #16]
 8013d60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d64:	68a3      	ldr	r3, [r4, #8]
 8013d66:	789b      	ldrb	r3, [r3, #2]
 8013d68:	706b      	strb	r3, [r5, #1]
 8013d6a:	1cab      	adds	r3, r5, #2
 8013d6c:	68a2      	ldr	r2, [r4, #8]
 8013d6e:	7852      	ldrb	r2, [r2, #1]
 8013d70:	f803 2b01 	strb.w	r2, [r3], #1
 8013d74:	68a2      	ldr	r2, [r4, #8]
 8013d76:	7812      	ldrb	r2, [r2, #0]
 8013d78:	701a      	strb	r2, [r3, #0]
 8013d7a:	e7b4      	b.n	8013ce6 <ucdr_deserialize_float+0x72>
 8013d7c:	4631      	mov	r1, r6
 8013d7e:	463a      	mov	r2, r7
 8013d80:	4628      	mov	r0, r5
 8013d82:	f00e fbb4 	bl	80224ee <memcpy>
 8013d86:	464a      	mov	r2, r9
 8013d88:	19e8      	adds	r0, r5, r7
 8013d8a:	68a1      	ldr	r1, [r4, #8]
 8013d8c:	f00e fbaf 	bl	80224ee <memcpy>
 8013d90:	e7a9      	b.n	8013ce6 <ucdr_deserialize_float+0x72>
 8013d92:	bf00      	nop

08013d94 <ucdr_serialize_double>:
 8013d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d98:	4604      	mov	r4, r0
 8013d9a:	b082      	sub	sp, #8
 8013d9c:	2108      	movs	r1, #8
 8013d9e:	ed8d 0b00 	vstr	d0, [sp]
 8013da2:	f000 f9ed 	bl	8014180 <ucdr_buffer_alignment>
 8013da6:	4601      	mov	r1, r0
 8013da8:	4620      	mov	r0, r4
 8013daa:	7d67      	ldrb	r7, [r4, #21]
 8013dac:	f000 fa30 	bl	8014210 <ucdr_advance_buffer>
 8013db0:	2108      	movs	r1, #8
 8013db2:	4620      	mov	r0, r4
 8013db4:	f000 f984 	bl	80140c0 <ucdr_check_buffer_available_for>
 8013db8:	2800      	cmp	r0, #0
 8013dba:	d14e      	bne.n	8013e5a <ucdr_serialize_double+0xc6>
 8013dbc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013dc0:	42ab      	cmp	r3, r5
 8013dc2:	d945      	bls.n	8013e50 <ucdr_serialize_double+0xbc>
 8013dc4:	1b5e      	subs	r6, r3, r5
 8013dc6:	60a3      	str	r3, [r4, #8]
 8013dc8:	6923      	ldr	r3, [r4, #16]
 8013dca:	4620      	mov	r0, r4
 8013dcc:	f1c6 0808 	rsb	r8, r6, #8
 8013dd0:	4433      	add	r3, r6
 8013dd2:	4641      	mov	r1, r8
 8013dd4:	6123      	str	r3, [r4, #16]
 8013dd6:	f000 f97f 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8013dda:	2800      	cmp	r0, #0
 8013ddc:	d074      	beq.n	8013ec8 <ucdr_serialize_double+0x134>
 8013dde:	7d23      	ldrb	r3, [r4, #20]
 8013de0:	2b01      	cmp	r3, #1
 8013de2:	f000 809b 	beq.w	8013f1c <ucdr_serialize_double+0x188>
 8013de6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013dea:	702b      	strb	r3, [r5, #0]
 8013dec:	2e00      	cmp	r6, #0
 8013dee:	d078      	beq.n	8013ee2 <ucdr_serialize_double+0x14e>
 8013df0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013df4:	2e01      	cmp	r6, #1
 8013df6:	706b      	strb	r3, [r5, #1]
 8013df8:	d077      	beq.n	8013eea <ucdr_serialize_double+0x156>
 8013dfa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013dfe:	2e02      	cmp	r6, #2
 8013e00:	70ab      	strb	r3, [r5, #2]
 8013e02:	d076      	beq.n	8013ef2 <ucdr_serialize_double+0x15e>
 8013e04:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013e08:	2e03      	cmp	r6, #3
 8013e0a:	70eb      	strb	r3, [r5, #3]
 8013e0c:	d075      	beq.n	8013efa <ucdr_serialize_double+0x166>
 8013e0e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013e12:	2e04      	cmp	r6, #4
 8013e14:	712b      	strb	r3, [r5, #4]
 8013e16:	d074      	beq.n	8013f02 <ucdr_serialize_double+0x16e>
 8013e18:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8013e1c:	2e05      	cmp	r6, #5
 8013e1e:	716b      	strb	r3, [r5, #5]
 8013e20:	d073      	beq.n	8013f0a <ucdr_serialize_double+0x176>
 8013e22:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8013e26:	2e06      	cmp	r6, #6
 8013e28:	71ab      	strb	r3, [r5, #6]
 8013e2a:	d072      	beq.n	8013f12 <ucdr_serialize_double+0x17e>
 8013e2c:	f89d 3000 	ldrb.w	r3, [sp]
 8013e30:	71eb      	strb	r3, [r5, #7]
 8013e32:	6923      	ldr	r3, [r4, #16]
 8013e34:	2108      	movs	r1, #8
 8013e36:	68a2      	ldr	r2, [r4, #8]
 8013e38:	3308      	adds	r3, #8
 8013e3a:	7da0      	ldrb	r0, [r4, #22]
 8013e3c:	4442      	add	r2, r8
 8013e3e:	7561      	strb	r1, [r4, #21]
 8013e40:	1b9e      	subs	r6, r3, r6
 8013e42:	f080 0001 	eor.w	r0, r0, #1
 8013e46:	60a2      	str	r2, [r4, #8]
 8013e48:	6126      	str	r6, [r4, #16]
 8013e4a:	b002      	add	sp, #8
 8013e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e50:	2108      	movs	r1, #8
 8013e52:	4620      	mov	r0, r4
 8013e54:	f000 f940 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8013e58:	b350      	cbz	r0, 8013eb0 <ucdr_serialize_double+0x11c>
 8013e5a:	7d23      	ldrb	r3, [r4, #20]
 8013e5c:	2b01      	cmp	r3, #1
 8013e5e:	d02d      	beq.n	8013ebc <ucdr_serialize_double+0x128>
 8013e60:	68a3      	ldr	r3, [r4, #8]
 8013e62:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013e66:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013e6a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013e6e:	7018      	strb	r0, [r3, #0]
 8013e70:	68a3      	ldr	r3, [r4, #8]
 8013e72:	705a      	strb	r2, [r3, #1]
 8013e74:	68a3      	ldr	r3, [r4, #8]
 8013e76:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013e7a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8013e7e:	7099      	strb	r1, [r3, #2]
 8013e80:	68a3      	ldr	r3, [r4, #8]
 8013e82:	70da      	strb	r2, [r3, #3]
 8013e84:	68a3      	ldr	r3, [r4, #8]
 8013e86:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013e8a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8013e8e:	7118      	strb	r0, [r3, #4]
 8013e90:	68a3      	ldr	r3, [r4, #8]
 8013e92:	715a      	strb	r2, [r3, #5]
 8013e94:	68a3      	ldr	r3, [r4, #8]
 8013e96:	f89d 2000 	ldrb.w	r2, [sp]
 8013e9a:	7199      	strb	r1, [r3, #6]
 8013e9c:	68a3      	ldr	r3, [r4, #8]
 8013e9e:	71da      	strb	r2, [r3, #7]
 8013ea0:	2108      	movs	r1, #8
 8013ea2:	68a2      	ldr	r2, [r4, #8]
 8013ea4:	6923      	ldr	r3, [r4, #16]
 8013ea6:	440a      	add	r2, r1
 8013ea8:	7561      	strb	r1, [r4, #21]
 8013eaa:	440b      	add	r3, r1
 8013eac:	60a2      	str	r2, [r4, #8]
 8013eae:	6123      	str	r3, [r4, #16]
 8013eb0:	7da0      	ldrb	r0, [r4, #22]
 8013eb2:	f080 0001 	eor.w	r0, r0, #1
 8013eb6:	b002      	add	sp, #8
 8013eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ebc:	466b      	mov	r3, sp
 8013ebe:	68a2      	ldr	r2, [r4, #8]
 8013ec0:	cb03      	ldmia	r3!, {r0, r1}
 8013ec2:	6010      	str	r0, [r2, #0]
 8013ec4:	6051      	str	r1, [r2, #4]
 8013ec6:	e7eb      	b.n	8013ea0 <ucdr_serialize_double+0x10c>
 8013ec8:	68a2      	ldr	r2, [r4, #8]
 8013eca:	6923      	ldr	r3, [r4, #16]
 8013ecc:	7da0      	ldrb	r0, [r4, #22]
 8013ece:	1b92      	subs	r2, r2, r6
 8013ed0:	1b9b      	subs	r3, r3, r6
 8013ed2:	7567      	strb	r7, [r4, #21]
 8013ed4:	f080 0001 	eor.w	r0, r0, #1
 8013ed8:	60a2      	str	r2, [r4, #8]
 8013eda:	6123      	str	r3, [r4, #16]
 8013edc:	b002      	add	sp, #8
 8013ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ee2:	68a3      	ldr	r3, [r4, #8]
 8013ee4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013ee8:	701a      	strb	r2, [r3, #0]
 8013eea:	68a3      	ldr	r3, [r4, #8]
 8013eec:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013ef0:	701a      	strb	r2, [r3, #0]
 8013ef2:	68a3      	ldr	r3, [r4, #8]
 8013ef4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013ef8:	701a      	strb	r2, [r3, #0]
 8013efa:	68a3      	ldr	r3, [r4, #8]
 8013efc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013f00:	701a      	strb	r2, [r3, #0]
 8013f02:	68a3      	ldr	r3, [r4, #8]
 8013f04:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013f08:	701a      	strb	r2, [r3, #0]
 8013f0a:	68a3      	ldr	r3, [r4, #8]
 8013f0c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013f10:	701a      	strb	r2, [r3, #0]
 8013f12:	68a3      	ldr	r3, [r4, #8]
 8013f14:	f89d 2000 	ldrb.w	r2, [sp]
 8013f18:	701a      	strb	r2, [r3, #0]
 8013f1a:	e78a      	b.n	8013e32 <ucdr_serialize_double+0x9e>
 8013f1c:	4628      	mov	r0, r5
 8013f1e:	466d      	mov	r5, sp
 8013f20:	4632      	mov	r2, r6
 8013f22:	4629      	mov	r1, r5
 8013f24:	f00e fae3 	bl	80224ee <memcpy>
 8013f28:	4642      	mov	r2, r8
 8013f2a:	19a9      	adds	r1, r5, r6
 8013f2c:	68a0      	ldr	r0, [r4, #8]
 8013f2e:	f00e fade 	bl	80224ee <memcpy>
 8013f32:	e77e      	b.n	8013e32 <ucdr_serialize_double+0x9e>

08013f34 <ucdr_deserialize_double>:
 8013f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f38:	4604      	mov	r4, r0
 8013f3a:	460d      	mov	r5, r1
 8013f3c:	2108      	movs	r1, #8
 8013f3e:	f000 f91f 	bl	8014180 <ucdr_buffer_alignment>
 8013f42:	4601      	mov	r1, r0
 8013f44:	4620      	mov	r0, r4
 8013f46:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013f4a:	f000 f961 	bl	8014210 <ucdr_advance_buffer>
 8013f4e:	2108      	movs	r1, #8
 8013f50:	4620      	mov	r0, r4
 8013f52:	f000 f8b5 	bl	80140c0 <ucdr_check_buffer_available_for>
 8013f56:	2800      	cmp	r0, #0
 8013f58:	d151      	bne.n	8013ffe <ucdr_deserialize_double+0xca>
 8013f5a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013f5e:	42be      	cmp	r6, r7
 8013f60:	d948      	bls.n	8013ff4 <ucdr_deserialize_double+0xc0>
 8013f62:	6923      	ldr	r3, [r4, #16]
 8013f64:	4620      	mov	r0, r4
 8013f66:	60a6      	str	r6, [r4, #8]
 8013f68:	1bf6      	subs	r6, r6, r7
 8013f6a:	4433      	add	r3, r6
 8013f6c:	f1c6 0908 	rsb	r9, r6, #8
 8013f70:	6123      	str	r3, [r4, #16]
 8013f72:	4649      	mov	r1, r9
 8013f74:	f000 f8b0 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8013f78:	2800      	cmp	r0, #0
 8013f7a:	d06d      	beq.n	8014058 <ucdr_deserialize_double+0x124>
 8013f7c:	7d23      	ldrb	r3, [r4, #20]
 8013f7e:	2b01      	cmp	r3, #1
 8013f80:	f000 8093 	beq.w	80140aa <ucdr_deserialize_double+0x176>
 8013f84:	79fb      	ldrb	r3, [r7, #7]
 8013f86:	702b      	strb	r3, [r5, #0]
 8013f88:	2e00      	cmp	r6, #0
 8013f8a:	d072      	beq.n	8014072 <ucdr_deserialize_double+0x13e>
 8013f8c:	79bb      	ldrb	r3, [r7, #6]
 8013f8e:	2e01      	cmp	r6, #1
 8013f90:	706b      	strb	r3, [r5, #1]
 8013f92:	f105 0302 	add.w	r3, r5, #2
 8013f96:	d070      	beq.n	801407a <ucdr_deserialize_double+0x146>
 8013f98:	797b      	ldrb	r3, [r7, #5]
 8013f9a:	2e02      	cmp	r6, #2
 8013f9c:	70ab      	strb	r3, [r5, #2]
 8013f9e:	f105 0303 	add.w	r3, r5, #3
 8013fa2:	d06e      	beq.n	8014082 <ucdr_deserialize_double+0x14e>
 8013fa4:	793b      	ldrb	r3, [r7, #4]
 8013fa6:	2e03      	cmp	r6, #3
 8013fa8:	70eb      	strb	r3, [r5, #3]
 8013faa:	f105 0304 	add.w	r3, r5, #4
 8013fae:	d06c      	beq.n	801408a <ucdr_deserialize_double+0x156>
 8013fb0:	78fb      	ldrb	r3, [r7, #3]
 8013fb2:	2e04      	cmp	r6, #4
 8013fb4:	712b      	strb	r3, [r5, #4]
 8013fb6:	f105 0305 	add.w	r3, r5, #5
 8013fba:	d06a      	beq.n	8014092 <ucdr_deserialize_double+0x15e>
 8013fbc:	78bb      	ldrb	r3, [r7, #2]
 8013fbe:	2e05      	cmp	r6, #5
 8013fc0:	716b      	strb	r3, [r5, #5]
 8013fc2:	f105 0306 	add.w	r3, r5, #6
 8013fc6:	d068      	beq.n	801409a <ucdr_deserialize_double+0x166>
 8013fc8:	787b      	ldrb	r3, [r7, #1]
 8013fca:	2e06      	cmp	r6, #6
 8013fcc:	71ab      	strb	r3, [r5, #6]
 8013fce:	f105 0307 	add.w	r3, r5, #7
 8013fd2:	d066      	beq.n	80140a2 <ucdr_deserialize_double+0x16e>
 8013fd4:	783b      	ldrb	r3, [r7, #0]
 8013fd6:	71eb      	strb	r3, [r5, #7]
 8013fd8:	6923      	ldr	r3, [r4, #16]
 8013fda:	2108      	movs	r1, #8
 8013fdc:	68a2      	ldr	r2, [r4, #8]
 8013fde:	3308      	adds	r3, #8
 8013fe0:	7da0      	ldrb	r0, [r4, #22]
 8013fe2:	444a      	add	r2, r9
 8013fe4:	7561      	strb	r1, [r4, #21]
 8013fe6:	1b9e      	subs	r6, r3, r6
 8013fe8:	f080 0001 	eor.w	r0, r0, #1
 8013fec:	60a2      	str	r2, [r4, #8]
 8013fee:	6126      	str	r6, [r4, #16]
 8013ff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ff4:	2108      	movs	r1, #8
 8013ff6:	4620      	mov	r0, r4
 8013ff8:	f000 f86e 	bl	80140d8 <ucdr_check_final_buffer_behavior>
 8013ffc:	b310      	cbz	r0, 8014044 <ucdr_deserialize_double+0x110>
 8013ffe:	7d23      	ldrb	r3, [r4, #20]
 8014000:	2b01      	cmp	r3, #1
 8014002:	68a3      	ldr	r3, [r4, #8]
 8014004:	d023      	beq.n	801404e <ucdr_deserialize_double+0x11a>
 8014006:	79db      	ldrb	r3, [r3, #7]
 8014008:	702b      	strb	r3, [r5, #0]
 801400a:	68a3      	ldr	r3, [r4, #8]
 801400c:	799b      	ldrb	r3, [r3, #6]
 801400e:	706b      	strb	r3, [r5, #1]
 8014010:	68a3      	ldr	r3, [r4, #8]
 8014012:	795b      	ldrb	r3, [r3, #5]
 8014014:	70ab      	strb	r3, [r5, #2]
 8014016:	68a3      	ldr	r3, [r4, #8]
 8014018:	791b      	ldrb	r3, [r3, #4]
 801401a:	70eb      	strb	r3, [r5, #3]
 801401c:	68a3      	ldr	r3, [r4, #8]
 801401e:	78db      	ldrb	r3, [r3, #3]
 8014020:	712b      	strb	r3, [r5, #4]
 8014022:	68a3      	ldr	r3, [r4, #8]
 8014024:	789b      	ldrb	r3, [r3, #2]
 8014026:	716b      	strb	r3, [r5, #5]
 8014028:	68a3      	ldr	r3, [r4, #8]
 801402a:	785b      	ldrb	r3, [r3, #1]
 801402c:	71ab      	strb	r3, [r5, #6]
 801402e:	68a3      	ldr	r3, [r4, #8]
 8014030:	781b      	ldrb	r3, [r3, #0]
 8014032:	71eb      	strb	r3, [r5, #7]
 8014034:	2108      	movs	r1, #8
 8014036:	68a2      	ldr	r2, [r4, #8]
 8014038:	6923      	ldr	r3, [r4, #16]
 801403a:	440a      	add	r2, r1
 801403c:	7561      	strb	r1, [r4, #21]
 801403e:	440b      	add	r3, r1
 8014040:	60a2      	str	r2, [r4, #8]
 8014042:	6123      	str	r3, [r4, #16]
 8014044:	7da0      	ldrb	r0, [r4, #22]
 8014046:	f080 0001 	eor.w	r0, r0, #1
 801404a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801404e:	681a      	ldr	r2, [r3, #0]
 8014050:	685b      	ldr	r3, [r3, #4]
 8014052:	602a      	str	r2, [r5, #0]
 8014054:	606b      	str	r3, [r5, #4]
 8014056:	e7ed      	b.n	8014034 <ucdr_deserialize_double+0x100>
 8014058:	68a2      	ldr	r2, [r4, #8]
 801405a:	6923      	ldr	r3, [r4, #16]
 801405c:	1b92      	subs	r2, r2, r6
 801405e:	7da0      	ldrb	r0, [r4, #22]
 8014060:	1b9b      	subs	r3, r3, r6
 8014062:	f884 8015 	strb.w	r8, [r4, #21]
 8014066:	f080 0001 	eor.w	r0, r0, #1
 801406a:	60a2      	str	r2, [r4, #8]
 801406c:	6123      	str	r3, [r4, #16]
 801406e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014072:	68a3      	ldr	r3, [r4, #8]
 8014074:	799b      	ldrb	r3, [r3, #6]
 8014076:	706b      	strb	r3, [r5, #1]
 8014078:	1cab      	adds	r3, r5, #2
 801407a:	68a2      	ldr	r2, [r4, #8]
 801407c:	7952      	ldrb	r2, [r2, #5]
 801407e:	f803 2b01 	strb.w	r2, [r3], #1
 8014082:	68a2      	ldr	r2, [r4, #8]
 8014084:	7912      	ldrb	r2, [r2, #4]
 8014086:	f803 2b01 	strb.w	r2, [r3], #1
 801408a:	68a2      	ldr	r2, [r4, #8]
 801408c:	78d2      	ldrb	r2, [r2, #3]
 801408e:	f803 2b01 	strb.w	r2, [r3], #1
 8014092:	68a2      	ldr	r2, [r4, #8]
 8014094:	7892      	ldrb	r2, [r2, #2]
 8014096:	f803 2b01 	strb.w	r2, [r3], #1
 801409a:	68a2      	ldr	r2, [r4, #8]
 801409c:	7852      	ldrb	r2, [r2, #1]
 801409e:	f803 2b01 	strb.w	r2, [r3], #1
 80140a2:	68a2      	ldr	r2, [r4, #8]
 80140a4:	7812      	ldrb	r2, [r2, #0]
 80140a6:	701a      	strb	r2, [r3, #0]
 80140a8:	e796      	b.n	8013fd8 <ucdr_deserialize_double+0xa4>
 80140aa:	4639      	mov	r1, r7
 80140ac:	4632      	mov	r2, r6
 80140ae:	4628      	mov	r0, r5
 80140b0:	f00e fa1d 	bl	80224ee <memcpy>
 80140b4:	464a      	mov	r2, r9
 80140b6:	19a8      	adds	r0, r5, r6
 80140b8:	68a1      	ldr	r1, [r4, #8]
 80140ba:	f00e fa18 	bl	80224ee <memcpy>
 80140be:	e78b      	b.n	8013fd8 <ucdr_deserialize_double+0xa4>

080140c0 <ucdr_check_buffer_available_for>:
 80140c0:	7d83      	ldrb	r3, [r0, #22]
 80140c2:	b93b      	cbnz	r3, 80140d4 <ucdr_check_buffer_available_for+0x14>
 80140c4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80140c8:	4419      	add	r1, r3
 80140ca:	4288      	cmp	r0, r1
 80140cc:	bf34      	ite	cc
 80140ce:	2000      	movcc	r0, #0
 80140d0:	2001      	movcs	r0, #1
 80140d2:	4770      	bx	lr
 80140d4:	2000      	movs	r0, #0
 80140d6:	4770      	bx	lr

080140d8 <ucdr_check_final_buffer_behavior>:
 80140d8:	7d83      	ldrb	r3, [r0, #22]
 80140da:	b943      	cbnz	r3, 80140ee <ucdr_check_final_buffer_behavior+0x16>
 80140dc:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 80140e0:	b510      	push	{r4, lr}
 80140e2:	4291      	cmp	r1, r2
 80140e4:	4604      	mov	r4, r0
 80140e6:	d205      	bcs.n	80140f4 <ucdr_check_final_buffer_behavior+0x1c>
 80140e8:	2301      	movs	r3, #1
 80140ea:	4618      	mov	r0, r3
 80140ec:	bd10      	pop	{r4, pc}
 80140ee:	2300      	movs	r3, #0
 80140f0:	4618      	mov	r0, r3
 80140f2:	4770      	bx	lr
 80140f4:	6982      	ldr	r2, [r0, #24]
 80140f6:	b13a      	cbz	r2, 8014108 <ucdr_check_final_buffer_behavior+0x30>
 80140f8:	69c1      	ldr	r1, [r0, #28]
 80140fa:	4790      	blx	r2
 80140fc:	f080 0301 	eor.w	r3, r0, #1
 8014100:	75a0      	strb	r0, [r4, #22]
 8014102:	b2db      	uxtb	r3, r3
 8014104:	4618      	mov	r0, r3
 8014106:	bd10      	pop	{r4, pc}
 8014108:	2001      	movs	r0, #1
 801410a:	75a0      	strb	r0, [r4, #22]
 801410c:	e7fa      	b.n	8014104 <ucdr_check_final_buffer_behavior+0x2c>
 801410e:	bf00      	nop

08014110 <ucdr_set_on_full_buffer_callback>:
 8014110:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8014114:	4770      	bx	lr
 8014116:	bf00      	nop

08014118 <ucdr_init_buffer_origin_offset_endian>:
 8014118:	b410      	push	{r4}
 801411a:	9c01      	ldr	r4, [sp, #4]
 801411c:	440a      	add	r2, r1
 801411e:	6001      	str	r1, [r0, #0]
 8014120:	6042      	str	r2, [r0, #4]
 8014122:	190a      	adds	r2, r1, r4
 8014124:	441c      	add	r4, r3
 8014126:	6082      	str	r2, [r0, #8]
 8014128:	2200      	movs	r2, #0
 801412a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 801412e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8014132:	7542      	strb	r2, [r0, #21]
 8014134:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014138:	7582      	strb	r2, [r0, #22]
 801413a:	7503      	strb	r3, [r0, #20]
 801413c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8014140:	4770      	bx	lr
 8014142:	bf00      	nop

08014144 <ucdr_init_buffer_origin_offset>:
 8014144:	b510      	push	{r4, lr}
 8014146:	b082      	sub	sp, #8
 8014148:	9c04      	ldr	r4, [sp, #16]
 801414a:	9400      	str	r4, [sp, #0]
 801414c:	2401      	movs	r4, #1
 801414e:	9401      	str	r4, [sp, #4]
 8014150:	f7ff ffe2 	bl	8014118 <ucdr_init_buffer_origin_offset_endian>
 8014154:	b002      	add	sp, #8
 8014156:	bd10      	pop	{r4, pc}

08014158 <ucdr_init_buffer_origin>:
 8014158:	b510      	push	{r4, lr}
 801415a:	2400      	movs	r4, #0
 801415c:	b082      	sub	sp, #8
 801415e:	9400      	str	r4, [sp, #0]
 8014160:	f7ff fff0 	bl	8014144 <ucdr_init_buffer_origin_offset>
 8014164:	b002      	add	sp, #8
 8014166:	bd10      	pop	{r4, pc}

08014168 <ucdr_init_buffer>:
 8014168:	2300      	movs	r3, #0
 801416a:	f7ff bff5 	b.w	8014158 <ucdr_init_buffer_origin>
 801416e:	bf00      	nop

08014170 <ucdr_alignment>:
 8014170:	fbb0 f2f1 	udiv	r2, r0, r1
 8014174:	fb02 0011 	mls	r0, r2, r1, r0
 8014178:	1e4b      	subs	r3, r1, #1
 801417a:	1a08      	subs	r0, r1, r0
 801417c:	4018      	ands	r0, r3
 801417e:	4770      	bx	lr

08014180 <ucdr_buffer_alignment>:
 8014180:	7d43      	ldrb	r3, [r0, #21]
 8014182:	428b      	cmp	r3, r1
 8014184:	d209      	bcs.n	801419a <ucdr_buffer_alignment+0x1a>
 8014186:	6903      	ldr	r3, [r0, #16]
 8014188:	1e4a      	subs	r2, r1, #1
 801418a:	fbb3 f0f1 	udiv	r0, r3, r1
 801418e:	fb01 3010 	mls	r0, r1, r0, r3
 8014192:	1a09      	subs	r1, r1, r0
 8014194:	ea01 0002 	and.w	r0, r1, r2
 8014198:	4770      	bx	lr
 801419a:	2000      	movs	r0, #0
 801419c:	4770      	bx	lr
 801419e:	bf00      	nop

080141a0 <ucdr_align_to>:
 80141a0:	b538      	push	{r3, r4, r5, lr}
 80141a2:	4604      	mov	r4, r0
 80141a4:	460d      	mov	r5, r1
 80141a6:	f7ff ffeb 	bl	8014180 <ucdr_buffer_alignment>
 80141aa:	68a3      	ldr	r3, [r4, #8]
 80141ac:	7565      	strb	r5, [r4, #21]
 80141ae:	181a      	adds	r2, r3, r0
 80141b0:	6923      	ldr	r3, [r4, #16]
 80141b2:	4418      	add	r0, r3
 80141b4:	6863      	ldr	r3, [r4, #4]
 80141b6:	4293      	cmp	r3, r2
 80141b8:	6120      	str	r0, [r4, #16]
 80141ba:	bf28      	it	cs
 80141bc:	4613      	movcs	r3, r2
 80141be:	60a3      	str	r3, [r4, #8]
 80141c0:	bd38      	pop	{r3, r4, r5, pc}
 80141c2:	bf00      	nop

080141c4 <ucdr_buffer_length>:
 80141c4:	6882      	ldr	r2, [r0, #8]
 80141c6:	6800      	ldr	r0, [r0, #0]
 80141c8:	1a10      	subs	r0, r2, r0
 80141ca:	4770      	bx	lr

080141cc <ucdr_buffer_remaining>:
 80141cc:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80141d0:	1a10      	subs	r0, r2, r0
 80141d2:	4770      	bx	lr

080141d4 <ucdr_check_final_buffer_behavior_array>:
 80141d4:	b538      	push	{r3, r4, r5, lr}
 80141d6:	7d83      	ldrb	r3, [r0, #22]
 80141d8:	b9a3      	cbnz	r3, 8014204 <ucdr_check_final_buffer_behavior_array+0x30>
 80141da:	4604      	mov	r4, r0
 80141dc:	460d      	mov	r5, r1
 80141de:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80141e2:	429a      	cmp	r2, r3
 80141e4:	d300      	bcc.n	80141e8 <ucdr_check_final_buffer_behavior_array+0x14>
 80141e6:	b931      	cbnz	r1, 80141f6 <ucdr_check_final_buffer_behavior_array+0x22>
 80141e8:	4620      	mov	r0, r4
 80141ea:	f7ff ffef 	bl	80141cc <ucdr_buffer_remaining>
 80141ee:	42a8      	cmp	r0, r5
 80141f0:	bf28      	it	cs
 80141f2:	4628      	movcs	r0, r5
 80141f4:	bd38      	pop	{r3, r4, r5, pc}
 80141f6:	6983      	ldr	r3, [r0, #24]
 80141f8:	b133      	cbz	r3, 8014208 <ucdr_check_final_buffer_behavior_array+0x34>
 80141fa:	69c1      	ldr	r1, [r0, #28]
 80141fc:	4798      	blx	r3
 80141fe:	75a0      	strb	r0, [r4, #22]
 8014200:	2800      	cmp	r0, #0
 8014202:	d0f1      	beq.n	80141e8 <ucdr_check_final_buffer_behavior_array+0x14>
 8014204:	2000      	movs	r0, #0
 8014206:	bd38      	pop	{r3, r4, r5, pc}
 8014208:	2301      	movs	r3, #1
 801420a:	7583      	strb	r3, [r0, #22]
 801420c:	e7fa      	b.n	8014204 <ucdr_check_final_buffer_behavior_array+0x30>
 801420e:	bf00      	nop

08014210 <ucdr_advance_buffer>:
 8014210:	b538      	push	{r3, r4, r5, lr}
 8014212:	4604      	mov	r4, r0
 8014214:	460d      	mov	r5, r1
 8014216:	f7ff ff53 	bl	80140c0 <ucdr_check_buffer_available_for>
 801421a:	b178      	cbz	r0, 801423c <ucdr_advance_buffer+0x2c>
 801421c:	6923      	ldr	r3, [r4, #16]
 801421e:	68a2      	ldr	r2, [r4, #8]
 8014220:	442b      	add	r3, r5
 8014222:	442a      	add	r2, r5
 8014224:	6123      	str	r3, [r4, #16]
 8014226:	2301      	movs	r3, #1
 8014228:	60a2      	str	r2, [r4, #8]
 801422a:	7563      	strb	r3, [r4, #21]
 801422c:	bd38      	pop	{r3, r4, r5, pc}
 801422e:	68a2      	ldr	r2, [r4, #8]
 8014230:	1a2d      	subs	r5, r5, r0
 8014232:	6923      	ldr	r3, [r4, #16]
 8014234:	4402      	add	r2, r0
 8014236:	4418      	add	r0, r3
 8014238:	60a2      	str	r2, [r4, #8]
 801423a:	6120      	str	r0, [r4, #16]
 801423c:	4629      	mov	r1, r5
 801423e:	2201      	movs	r2, #1
 8014240:	4620      	mov	r0, r4
 8014242:	f7ff ffc7 	bl	80141d4 <ucdr_check_final_buffer_behavior_array>
 8014246:	2800      	cmp	r0, #0
 8014248:	d1f1      	bne.n	801422e <ucdr_advance_buffer+0x1e>
 801424a:	2301      	movs	r3, #1
 801424c:	7563      	strb	r3, [r4, #21]
 801424e:	bd38      	pop	{r3, r4, r5, pc}

08014250 <rcl_get_zero_initialized_publisher>:
 8014250:	4b01      	ldr	r3, [pc, #4]	@ (8014258 <rcl_get_zero_initialized_publisher+0x8>)
 8014252:	6818      	ldr	r0, [r3, #0]
 8014254:	4770      	bx	lr
 8014256:	bf00      	nop
 8014258:	080248a8 	.word	0x080248a8

0801425c <rcl_publisher_init>:
 801425c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014260:	b088      	sub	sp, #32
 8014262:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8014264:	2e00      	cmp	r6, #0
 8014266:	d06b      	beq.n	8014340 <rcl_publisher_init+0xe4>
 8014268:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 801426c:	4605      	mov	r5, r0
 801426e:	460f      	mov	r7, r1
 8014270:	4690      	mov	r8, r2
 8014272:	4650      	mov	r0, sl
 8014274:	4699      	mov	r9, r3
 8014276:	f001 f917 	bl	80154a8 <rcutils_allocator_is_valid>
 801427a:	f080 0401 	eor.w	r4, r0, #1
 801427e:	b2e4      	uxtb	r4, r4
 8014280:	2c00      	cmp	r4, #0
 8014282:	d15d      	bne.n	8014340 <rcl_publisher_init+0xe4>
 8014284:	2d00      	cmp	r5, #0
 8014286:	d05b      	beq.n	8014340 <rcl_publisher_init+0xe4>
 8014288:	682b      	ldr	r3, [r5, #0]
 801428a:	b123      	cbz	r3, 8014296 <rcl_publisher_init+0x3a>
 801428c:	2464      	movs	r4, #100	@ 0x64
 801428e:	4620      	mov	r0, r4
 8014290:	b008      	add	sp, #32
 8014292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014296:	4638      	mov	r0, r7
 8014298:	f007 f812 	bl	801b2c0 <rcl_node_is_valid>
 801429c:	2800      	cmp	r0, #0
 801429e:	d054      	beq.n	801434a <rcl_publisher_init+0xee>
 80142a0:	f1b8 0f00 	cmp.w	r8, #0
 80142a4:	d04c      	beq.n	8014340 <rcl_publisher_init+0xe4>
 80142a6:	fab9 f389 	clz	r3, r9
 80142aa:	095b      	lsrs	r3, r3, #5
 80142ac:	f1b9 0f00 	cmp.w	r9, #0
 80142b0:	d046      	beq.n	8014340 <rcl_publisher_init+0xe4>
 80142b2:	aa07      	add	r2, sp, #28
 80142b4:	9307      	str	r3, [sp, #28]
 80142b6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80142ba:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 80142be:	9205      	str	r2, [sp, #20]
 80142c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80142c4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80142c8:	4649      	mov	r1, r9
 80142ca:	4638      	mov	r0, r7
 80142cc:	e89a 000c 	ldmia.w	sl, {r2, r3}
 80142d0:	f007 f84e 	bl	801b370 <rcl_node_resolve_name>
 80142d4:	2800      	cmp	r0, #0
 80142d6:	d14f      	bne.n	8014378 <rcl_publisher_init+0x11c>
 80142d8:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 80142da:	20c8      	movs	r0, #200	@ 0xc8
 80142dc:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80142de:	4798      	blx	r3
 80142e0:	6028      	str	r0, [r5, #0]
 80142e2:	2800      	cmp	r0, #0
 80142e4:	d050      	beq.n	8014388 <rcl_publisher_init+0x12c>
 80142e6:	4638      	mov	r0, r7
 80142e8:	f007 f80c 	bl	801b304 <rcl_node_get_rmw_handle>
 80142ec:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 80142f0:	4641      	mov	r1, r8
 80142f2:	9a07      	ldr	r2, [sp, #28]
 80142f4:	9300      	str	r3, [sp, #0]
 80142f6:	4633      	mov	r3, r6
 80142f8:	682c      	ldr	r4, [r5, #0]
 80142fa:	f001 fa23 	bl	8015744 <rmw_create_publisher>
 80142fe:	682b      	ldr	r3, [r5, #0]
 8014300:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 8014304:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8014308:	b370      	cbz	r0, 8014368 <rcl_publisher_init+0x10c>
 801430a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 801430e:	f001 fafd 	bl	801590c <rmw_publisher_get_actual_qos>
 8014312:	682b      	ldr	r3, [r5, #0]
 8014314:	4604      	mov	r4, r0
 8014316:	b9d0      	cbnz	r0, 801434e <rcl_publisher_init+0xf2>
 8014318:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 801431c:	4631      	mov	r1, r6
 801431e:	4618      	mov	r0, r3
 8014320:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8014324:	2270      	movs	r2, #112	@ 0x70
 8014326:	f00e f8e2 	bl	80224ee <memcpy>
 801432a:	683a      	ldr	r2, [r7, #0]
 801432c:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 8014330:	9807      	ldr	r0, [sp, #28]
 8014332:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8014334:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8014336:	4798      	blx	r3
 8014338:	4620      	mov	r0, r4
 801433a:	b008      	add	sp, #32
 801433c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014340:	240b      	movs	r4, #11
 8014342:	4620      	mov	r0, r4
 8014344:	b008      	add	sp, #32
 8014346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801434a:	24c8      	movs	r4, #200	@ 0xc8
 801434c:	e79f      	b.n	801428e <rcl_publisher_init+0x32>
 801434e:	b1cb      	cbz	r3, 8014384 <rcl_publisher_init+0x128>
 8014350:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8014354:	b142      	cbz	r2, 8014368 <rcl_publisher_init+0x10c>
 8014356:	4638      	mov	r0, r7
 8014358:	f006 ffd4 	bl	801b304 <rcl_node_get_rmw_handle>
 801435c:	682b      	ldr	r3, [r5, #0]
 801435e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8014362:	f001 fae7 	bl	8015934 <rmw_destroy_publisher>
 8014366:	682b      	ldr	r3, [r5, #0]
 8014368:	4618      	mov	r0, r3
 801436a:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 801436c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801436e:	2401      	movs	r4, #1
 8014370:	4790      	blx	r2
 8014372:	2300      	movs	r3, #0
 8014374:	602b      	str	r3, [r5, #0]
 8014376:	e7db      	b.n	8014330 <rcl_publisher_init+0xd4>
 8014378:	2867      	cmp	r0, #103	@ 0x67
 801437a:	d007      	beq.n	801438c <rcl_publisher_init+0x130>
 801437c:	2869      	cmp	r0, #105	@ 0x69
 801437e:	d005      	beq.n	801438c <rcl_publisher_init+0x130>
 8014380:	280a      	cmp	r0, #10
 8014382:	d001      	beq.n	8014388 <rcl_publisher_init+0x12c>
 8014384:	2401      	movs	r4, #1
 8014386:	e7d3      	b.n	8014330 <rcl_publisher_init+0xd4>
 8014388:	240a      	movs	r4, #10
 801438a:	e7d1      	b.n	8014330 <rcl_publisher_init+0xd4>
 801438c:	2467      	movs	r4, #103	@ 0x67
 801438e:	e7cf      	b.n	8014330 <rcl_publisher_init+0xd4>

08014390 <rcl_publisher_get_default_options>:
 8014390:	b570      	push	{r4, r5, r6, lr}
 8014392:	4d14      	ldr	r5, [pc, #80]	@ (80143e4 <rcl_publisher_get_default_options+0x54>)
 8014394:	b088      	sub	sp, #32
 8014396:	4604      	mov	r4, r0
 8014398:	2250      	movs	r2, #80	@ 0x50
 801439a:	4913      	ldr	r1, [pc, #76]	@ (80143e8 <rcl_publisher_get_default_options+0x58>)
 801439c:	4628      	mov	r0, r5
 801439e:	f00e f8a6 	bl	80224ee <memcpy>
 80143a2:	a802      	add	r0, sp, #8
 80143a4:	f001 f872 	bl	801548c <rcutils_get_default_allocator>
 80143a8:	f10d 0c08 	add.w	ip, sp, #8
 80143ac:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80143b0:	466e      	mov	r6, sp
 80143b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80143b6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80143ba:	f8dc 3000 	ldr.w	r3, [ip]
 80143be:	4630      	mov	r0, r6
 80143c0:	f8ce 3000 	str.w	r3, [lr]
 80143c4:	f001 f8fc 	bl	80155c0 <rmw_get_default_publisher_options>
 80143c8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80143cc:	2270      	movs	r2, #112	@ 0x70
 80143ce:	e896 0003 	ldmia.w	r6, {r0, r1}
 80143d2:	e883 0003 	stmia.w	r3, {r0, r1}
 80143d6:	4629      	mov	r1, r5
 80143d8:	4620      	mov	r0, r4
 80143da:	f00e f888 	bl	80224ee <memcpy>
 80143de:	4620      	mov	r0, r4
 80143e0:	b008      	add	sp, #32
 80143e2:	bd70      	pop	{r4, r5, r6, pc}
 80143e4:	24064880 	.word	0x24064880
 80143e8:	080248b0 	.word	0x080248b0

080143ec <rcl_publish>:
 80143ec:	b1f8      	cbz	r0, 801442e <rcl_publish+0x42>
 80143ee:	6803      	ldr	r3, [r0, #0]
 80143f0:	b570      	push	{r4, r5, r6, lr}
 80143f2:	4604      	mov	r4, r0
 80143f4:	b1b3      	cbz	r3, 8014424 <rcl_publish+0x38>
 80143f6:	4616      	mov	r6, r2
 80143f8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80143fc:	b192      	cbz	r2, 8014424 <rcl_publish+0x38>
 80143fe:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8014402:	460d      	mov	r5, r1
 8014404:	f006 fb7c 	bl	801ab00 <rcl_context_is_valid>
 8014408:	b160      	cbz	r0, 8014424 <rcl_publish+0x38>
 801440a:	6823      	ldr	r3, [r4, #0]
 801440c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8014410:	b140      	cbz	r0, 8014424 <rcl_publish+0x38>
 8014412:	b155      	cbz	r5, 801442a <rcl_publish+0x3e>
 8014414:	4632      	mov	r2, r6
 8014416:	4629      	mov	r1, r5
 8014418:	f001 f934 	bl	8015684 <rmw_publish>
 801441c:	3800      	subs	r0, #0
 801441e:	bf18      	it	ne
 8014420:	2001      	movne	r0, #1
 8014422:	bd70      	pop	{r4, r5, r6, pc}
 8014424:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8014428:	bd70      	pop	{r4, r5, r6, pc}
 801442a:	200b      	movs	r0, #11
 801442c:	bd70      	pop	{r4, r5, r6, pc}
 801442e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8014432:	4770      	bx	lr

08014434 <rcl_publisher_is_valid>:
 8014434:	b1a0      	cbz	r0, 8014460 <rcl_publisher_is_valid+0x2c>
 8014436:	6803      	ldr	r3, [r0, #0]
 8014438:	b510      	push	{r4, lr}
 801443a:	4604      	mov	r4, r0
 801443c:	b173      	cbz	r3, 801445c <rcl_publisher_is_valid+0x28>
 801443e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8014442:	b15a      	cbz	r2, 801445c <rcl_publisher_is_valid+0x28>
 8014444:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8014448:	f006 fb5a 	bl	801ab00 <rcl_context_is_valid>
 801444c:	b130      	cbz	r0, 801445c <rcl_publisher_is_valid+0x28>
 801444e:	6823      	ldr	r3, [r4, #0]
 8014450:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8014454:	3800      	subs	r0, #0
 8014456:	bf18      	it	ne
 8014458:	2001      	movne	r0, #1
 801445a:	bd10      	pop	{r4, pc}
 801445c:	2000      	movs	r0, #0
 801445e:	bd10      	pop	{r4, pc}
 8014460:	2000      	movs	r0, #0
 8014462:	4770      	bx	lr

08014464 <rcl_publisher_is_valid_except_context>:
 8014464:	b130      	cbz	r0, 8014474 <rcl_publisher_is_valid_except_context+0x10>
 8014466:	6800      	ldr	r0, [r0, #0]
 8014468:	b120      	cbz	r0, 8014474 <rcl_publisher_is_valid_except_context+0x10>
 801446a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 801446e:	3800      	subs	r0, #0
 8014470:	bf18      	it	ne
 8014472:	2001      	movne	r0, #1
 8014474:	4770      	bx	lr
 8014476:	bf00      	nop

08014478 <_rclc_check_for_new_data>:
 8014478:	2800      	cmp	r0, #0
 801447a:	d046      	beq.n	801450a <_rclc_check_for_new_data+0x92>
 801447c:	4603      	mov	r3, r0
 801447e:	b530      	push	{r4, r5, lr}
 8014480:	7802      	ldrb	r2, [r0, #0]
 8014482:	b085      	sub	sp, #20
 8014484:	2a0a      	cmp	r2, #10
 8014486:	d842      	bhi.n	801450e <_rclc_check_for_new_data+0x96>
 8014488:	e8df f002 	tbb	[pc, r2]
 801448c:	14181212 	.word	0x14181212
 8014490:	06060614 	.word	0x06060614
 8014494:	2e1a      	.short	0x2e1a
 8014496:	16          	.byte	0x16
 8014497:	00          	.byte	0x00
 8014498:	6a0a      	ldr	r2, [r1, #32]
 801449a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801449c:	2000      	movs	r0, #0
 801449e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80144a2:	1a12      	subs	r2, r2, r0
 80144a4:	bf18      	it	ne
 80144a6:	2201      	movne	r2, #1
 80144a8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80144ac:	b005      	add	sp, #20
 80144ae:	bd30      	pop	{r4, r5, pc}
 80144b0:	680a      	ldr	r2, [r1, #0]
 80144b2:	e7f2      	b.n	801449a <_rclc_check_for_new_data+0x22>
 80144b4:	698a      	ldr	r2, [r1, #24]
 80144b6:	e7f0      	b.n	801449a <_rclc_check_for_new_data+0x22>
 80144b8:	688a      	ldr	r2, [r1, #8]
 80144ba:	e7ee      	b.n	801449a <_rclc_check_for_new_data+0x22>
 80144bc:	690a      	ldr	r2, [r1, #16]
 80144be:	e7ec      	b.n	801449a <_rclc_check_for_new_data+0x22>
 80144c0:	685c      	ldr	r4, [r3, #4]
 80144c2:	4608      	mov	r0, r1
 80144c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80144c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80144cc:	f104 0542 	add.w	r5, r4, #66	@ 0x42
 80144d0:	f104 0110 	add.w	r1, r4, #16
 80144d4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80144d8:	9500      	str	r5, [sp, #0]
 80144da:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 80144de:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 80144e2:	f008 ff3d 	bl	801d360 <rcl_action_client_wait_set_get_entities_ready>
 80144e6:	e7e1      	b.n	80144ac <_rclc_check_for_new_data+0x34>
 80144e8:	685c      	ldr	r4, [r3, #4]
 80144ea:	4608      	mov	r0, r1
 80144ec:	f104 0222 	add.w	r2, r4, #34	@ 0x22
 80144f0:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 80144f4:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 80144f8:	e9cd 2100 	strd	r2, r1, [sp]
 80144fc:	f104 0220 	add.w	r2, r4, #32
 8014500:	f104 0110 	add.w	r1, r4, #16
 8014504:	f009 f946 	bl	801d794 <rcl_action_server_wait_set_get_entities_ready>
 8014508:	e7d0      	b.n	80144ac <_rclc_check_for_new_data+0x34>
 801450a:	200b      	movs	r0, #11
 801450c:	4770      	bx	lr
 801450e:	2001      	movs	r0, #1
 8014510:	e7cc      	b.n	80144ac <_rclc_check_for_new_data+0x34>
 8014512:	bf00      	nop

08014514 <_rclc_take_new_data>:
 8014514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014516:	b09b      	sub	sp, #108	@ 0x6c
 8014518:	2800      	cmp	r0, #0
 801451a:	f000 8088 	beq.w	801462e <_rclc_take_new_data+0x11a>
 801451e:	7803      	ldrb	r3, [r0, #0]
 8014520:	4604      	mov	r4, r0
 8014522:	2b0a      	cmp	r3, #10
 8014524:	f200 8167 	bhi.w	80147f6 <_rclc_take_new_data+0x2e2>
 8014528:	e8df f003 	tbb	[pc, r3]
 801452c:	44152d2d 	.word	0x44152d2d
 8014530:	19191944 	.word	0x19191944
 8014534:	065a      	.short	0x065a
 8014536:	15          	.byte	0x15
 8014537:	00          	.byte	0x00
 8014538:	6840      	ldr	r0, [r0, #4]
 801453a:	f890 3020 	ldrb.w	r3, [r0, #32]
 801453e:	2b00      	cmp	r3, #0
 8014540:	f040 80b2 	bne.w	80146a8 <_rclc_take_new_data+0x194>
 8014544:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8014548:	2b00      	cmp	r3, #0
 801454a:	f040 80e4 	bne.w	8014716 <_rclc_take_new_data+0x202>
 801454e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8014552:	2b00      	cmp	r3, #0
 8014554:	d16f      	bne.n	8014636 <_rclc_take_new_data+0x122>
 8014556:	2500      	movs	r5, #0
 8014558:	4628      	mov	r0, r5
 801455a:	b01b      	add	sp, #108	@ 0x6c
 801455c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801455e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8014560:	6a0b      	ldr	r3, [r1, #32]
 8014562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d0f5      	beq.n	8014556 <_rclc_take_new_data+0x42>
 801456a:	6882      	ldr	r2, [r0, #8]
 801456c:	f100 0110 	add.w	r1, r0, #16
 8014570:	6840      	ldr	r0, [r0, #4]
 8014572:	f007 f993 	bl	801b89c <rcl_take_request>
 8014576:	4605      	mov	r5, r0
 8014578:	2800      	cmp	r0, #0
 801457a:	d0ec      	beq.n	8014556 <_rclc_take_new_data+0x42>
 801457c:	f240 2359 	movw	r3, #601	@ 0x259
 8014580:	4298      	cmp	r0, r3
 8014582:	d013      	beq.n	80145ac <_rclc_take_new_data+0x98>
 8014584:	e029      	b.n	80145da <_rclc_take_new_data+0xc6>
 8014586:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8014588:	680b      	ldr	r3, [r1, #0]
 801458a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d0e1      	beq.n	8014556 <_rclc_take_new_data+0x42>
 8014592:	2300      	movs	r3, #0
 8014594:	aa0a      	add	r2, sp, #40	@ 0x28
 8014596:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 801459a:	f007 fac3 	bl	801bb24 <rcl_take>
 801459e:	4605      	mov	r5, r0
 80145a0:	2800      	cmp	r0, #0
 80145a2:	d0d9      	beq.n	8014558 <_rclc_take_new_data+0x44>
 80145a4:	f240 1391 	movw	r3, #401	@ 0x191
 80145a8:	4298      	cmp	r0, r3
 80145aa:	d116      	bne.n	80145da <_rclc_take_new_data+0xc6>
 80145ac:	2300      	movs	r3, #0
 80145ae:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 80145b2:	e7d1      	b.n	8014558 <_rclc_take_new_data+0x44>
 80145b4:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80145b6:	698b      	ldr	r3, [r1, #24]
 80145b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d0ca      	beq.n	8014556 <_rclc_take_new_data+0x42>
 80145c0:	6882      	ldr	r2, [r0, #8]
 80145c2:	f100 0110 	add.w	r1, r0, #16
 80145c6:	6840      	ldr	r0, [r0, #4]
 80145c8:	f006 fa2a 	bl	801aa20 <rcl_take_response>
 80145cc:	4605      	mov	r5, r0
 80145ce:	2800      	cmp	r0, #0
 80145d0:	d0c1      	beq.n	8014556 <_rclc_take_new_data+0x42>
 80145d2:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80145d6:	4298      	cmp	r0, r3
 80145d8:	d0be      	beq.n	8014558 <_rclc_take_new_data+0x44>
 80145da:	f000 ff89 	bl	80154f0 <rcutils_reset_error>
 80145de:	e7bb      	b.n	8014558 <_rclc_take_new_data+0x44>
 80145e0:	6840      	ldr	r0, [r0, #4]
 80145e2:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d17d      	bne.n	80146e6 <_rclc_take_new_data+0x1d2>
 80145ea:	69c3      	ldr	r3, [r0, #28]
 80145ec:	b11b      	cbz	r3, 80145f6 <_rclc_take_new_data+0xe2>
 80145ee:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d144      	bne.n	8014680 <_rclc_take_new_data+0x16c>
 80145f6:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	f040 80ac 	bne.w	8014758 <_rclc_take_new_data+0x244>
 8014600:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8014604:	2b00      	cmp	r3, #0
 8014606:	d0a6      	beq.n	8014556 <_rclc_take_new_data+0x42>
 8014608:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801460a:	a90a      	add	r1, sp, #40	@ 0x28
 801460c:	3010      	adds	r0, #16
 801460e:	f008 fd7f 	bl	801d110 <rcl_action_take_result_response>
 8014612:	4605      	mov	r5, r0
 8014614:	2800      	cmp	r0, #0
 8014616:	d1e0      	bne.n	80145da <_rclc_take_new_data+0xc6>
 8014618:	6860      	ldr	r0, [r4, #4]
 801461a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801461e:	f009 f9e9 	bl	801d9f4 <rclc_action_find_handle_by_result_request_sequence_number>
 8014622:	2800      	cmp	r0, #0
 8014624:	d098      	beq.n	8014558 <_rclc_take_new_data+0x44>
 8014626:	2301      	movs	r3, #1
 8014628:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 801462c:	e794      	b.n	8014558 <_rclc_take_new_data+0x44>
 801462e:	250b      	movs	r5, #11
 8014630:	4628      	mov	r0, r5
 8014632:	b01b      	add	sp, #108	@ 0x6c
 8014634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014636:	ae04      	add	r6, sp, #16
 8014638:	3010      	adds	r0, #16
 801463a:	aa0a      	add	r2, sp, #40	@ 0x28
 801463c:	4631      	mov	r1, r6
 801463e:	f008 ffdd 	bl	801d5fc <rcl_action_take_cancel_request>
 8014642:	4605      	mov	r5, r0
 8014644:	2800      	cmp	r0, #0
 8014646:	d1c8      	bne.n	80145da <_rclc_take_new_data+0xc6>
 8014648:	a90a      	add	r1, sp, #40	@ 0x28
 801464a:	6860      	ldr	r0, [r4, #4]
 801464c:	f009 f992 	bl	801d974 <rclc_action_find_goal_handle_by_uuid>
 8014650:	4607      	mov	r7, r0
 8014652:	2800      	cmp	r0, #0
 8014654:	f000 80bb 	beq.w	80147ce <_rclc_take_new_data+0x2ba>
 8014658:	2101      	movs	r1, #1
 801465a:	f990 0008 	ldrsb.w	r0, [r0, #8]
 801465e:	f009 f913 	bl	801d888 <rcl_action_transition_goal_state>
 8014662:	2803      	cmp	r0, #3
 8014664:	4684      	mov	ip, r0
 8014666:	f040 80a7 	bne.w	80147b8 <_rclc_take_new_data+0x2a4>
 801466a:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 801466e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014672:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014676:	e884 0003 	stmia.w	r4, {r0, r1}
 801467a:	f887 c008 	strb.w	ip, [r7, #8]
 801467e:	e76b      	b.n	8014558 <_rclc_take_new_data+0x44>
 8014680:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8014682:	3010      	adds	r0, #16
 8014684:	f008 fdc4 	bl	801d210 <rcl_action_take_feedback>
 8014688:	4605      	mov	r5, r0
 801468a:	2800      	cmp	r0, #0
 801468c:	d1a5      	bne.n	80145da <_rclc_take_new_data+0xc6>
 801468e:	6860      	ldr	r0, [r4, #4]
 8014690:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8014692:	f009 f96f 	bl	801d974 <rclc_action_find_goal_handle_by_uuid>
 8014696:	4603      	mov	r3, r0
 8014698:	2800      	cmp	r0, #0
 801469a:	f000 80a3 	beq.w	80147e4 <_rclc_take_new_data+0x2d0>
 801469e:	2201      	movs	r2, #1
 80146a0:	6860      	ldr	r0, [r4, #4]
 80146a2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80146a6:	e7a6      	b.n	80145f6 <_rclc_take_new_data+0xe2>
 80146a8:	f009 f93e 	bl	801d928 <rclc_action_take_goal_handle>
 80146ac:	4606      	mov	r6, r0
 80146ae:	6860      	ldr	r0, [r4, #4]
 80146b0:	2e00      	cmp	r6, #0
 80146b2:	f43f af47 	beq.w	8014544 <_rclc_take_new_data+0x30>
 80146b6:	6070      	str	r0, [r6, #4]
 80146b8:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 80146bc:	69f2      	ldr	r2, [r6, #28]
 80146be:	3010      	adds	r0, #16
 80146c0:	f008 fee4 	bl	801d48c <rcl_action_take_goal_request>
 80146c4:	4605      	mov	r5, r0
 80146c6:	2800      	cmp	r0, #0
 80146c8:	f040 808e 	bne.w	80147e8 <_rclc_take_new_data+0x2d4>
 80146cc:	69f7      	ldr	r7, [r6, #28]
 80146ce:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80146d0:	7235      	strb	r5, [r6, #8]
 80146d2:	f8c6 0009 	str.w	r0, [r6, #9]
 80146d6:	f8c6 100d 	str.w	r1, [r6, #13]
 80146da:	6860      	ldr	r0, [r4, #4]
 80146dc:	f8c6 2011 	str.w	r2, [r6, #17]
 80146e0:	f8c6 3015 	str.w	r3, [r6, #21]
 80146e4:	e72e      	b.n	8014544 <_rclc_take_new_data+0x30>
 80146e6:	aa04      	add	r2, sp, #16
 80146e8:	a90a      	add	r1, sp, #40	@ 0x28
 80146ea:	3010      	adds	r0, #16
 80146ec:	f008 fc98 	bl	801d020 <rcl_action_take_goal_response>
 80146f0:	4605      	mov	r5, r0
 80146f2:	2800      	cmp	r0, #0
 80146f4:	f47f af71 	bne.w	80145da <_rclc_take_new_data+0xc6>
 80146f8:	6860      	ldr	r0, [r4, #4]
 80146fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80146fe:	f009 f967 	bl	801d9d0 <rclc_action_find_handle_by_goal_request_sequence_number>
 8014702:	b130      	cbz	r0, 8014712 <_rclc_take_new_data+0x1fe>
 8014704:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8014708:	2201      	movs	r2, #1
 801470a:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 801470e:	f880 2020 	strb.w	r2, [r0, #32]
 8014712:	6860      	ldr	r0, [r4, #4]
 8014714:	e769      	b.n	80145ea <_rclc_take_new_data+0xd6>
 8014716:	3010      	adds	r0, #16
 8014718:	aa04      	add	r2, sp, #16
 801471a:	a90a      	add	r1, sp, #40	@ 0x28
 801471c:	f008 ff2e 	bl	801d57c <rcl_action_take_result_request>
 8014720:	4605      	mov	r5, r0
 8014722:	2800      	cmp	r0, #0
 8014724:	f47f af59 	bne.w	80145da <_rclc_take_new_data+0xc6>
 8014728:	a904      	add	r1, sp, #16
 801472a:	6860      	ldr	r0, [r4, #4]
 801472c:	f009 f922 	bl	801d974 <rclc_action_find_goal_handle_by_uuid>
 8014730:	4607      	mov	r7, r0
 8014732:	b160      	cbz	r0, 801474e <_rclc_take_new_data+0x23a>
 8014734:	ad0a      	add	r5, sp, #40	@ 0x28
 8014736:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 801473a:	f04f 0c02 	mov.w	ip, #2
 801473e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014740:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014742:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014746:	e886 0003 	stmia.w	r6, {r0, r1}
 801474a:	f887 c008 	strb.w	ip, [r7, #8]
 801474e:	6860      	ldr	r0, [r4, #4]
 8014750:	2300      	movs	r3, #0
 8014752:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8014756:	e6fa      	b.n	801454e <_rclc_take_new_data+0x3a>
 8014758:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 801475c:	a90a      	add	r1, sp, #40	@ 0x28
 801475e:	3010      	adds	r0, #16
 8014760:	f008 fd16 	bl	801d190 <rcl_action_take_cancel_response>
 8014764:	4605      	mov	r5, r0
 8014766:	2800      	cmp	r0, #0
 8014768:	f47f af37 	bne.w	80145da <_rclc_take_new_data+0xc6>
 801476c:	6860      	ldr	r0, [r4, #4]
 801476e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8014772:	f009 f951 	bl	801da18 <rclc_action_find_handle_by_cancel_request_sequence_number>
 8014776:	4606      	mov	r6, r0
 8014778:	6860      	ldr	r0, [r4, #4]
 801477a:	2e00      	cmp	r6, #0
 801477c:	f43f af40 	beq.w	8014600 <_rclc_take_new_data+0xec>
 8014780:	2701      	movs	r7, #1
 8014782:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8014784:	84b7      	strh	r7, [r6, #36]	@ 0x24
 8014786:	2b00      	cmp	r3, #0
 8014788:	f43f af3a 	beq.w	8014600 <_rclc_take_new_data+0xec>
 801478c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801478e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8014792:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8014796:	f009 f8ed 	bl	801d974 <rclc_action_find_goal_handle_by_uuid>
 801479a:	b138      	cbz	r0, 80147ac <_rclc_take_new_data+0x298>
 801479c:	6860      	ldr	r0, [r4, #4]
 801479e:	3501      	adds	r5, #1
 80147a0:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 80147a4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80147a6:	42ab      	cmp	r3, r5
 80147a8:	d8f0      	bhi.n	801478c <_rclc_take_new_data+0x278>
 80147aa:	e729      	b.n	8014600 <_rclc_take_new_data+0xec>
 80147ac:	6860      	ldr	r0, [r4, #4]
 80147ae:	3501      	adds	r5, #1
 80147b0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80147b2:	42ab      	cmp	r3, r5
 80147b4:	d8ea      	bhi.n	801478c <_rclc_take_new_data+0x278>
 80147b6:	e723      	b.n	8014600 <_rclc_take_new_data+0xec>
 80147b8:	ab06      	add	r3, sp, #24
 80147ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80147bc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80147c0:	2103      	movs	r1, #3
 80147c2:	6860      	ldr	r0, [r4, #4]
 80147c4:	e896 000c 	ldmia.w	r6, {r2, r3}
 80147c8:	f009 f99a 	bl	801db00 <rclc_action_server_goal_cancel_reject>
 80147cc:	e6c4      	b.n	8014558 <_rclc_take_new_data+0x44>
 80147ce:	ab06      	add	r3, sp, #24
 80147d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80147d2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80147d6:	2102      	movs	r1, #2
 80147d8:	6860      	ldr	r0, [r4, #4]
 80147da:	e896 000c 	ldmia.w	r6, {r2, r3}
 80147de:	f009 f98f 	bl	801db00 <rclc_action_server_goal_cancel_reject>
 80147e2:	e6b9      	b.n	8014558 <_rclc_take_new_data+0x44>
 80147e4:	6860      	ldr	r0, [r4, #4]
 80147e6:	e706      	b.n	80145f6 <_rclc_take_new_data+0xe2>
 80147e8:	4631      	mov	r1, r6
 80147ea:	6860      	ldr	r0, [r4, #4]
 80147ec:	f009 f8ac 	bl	801d948 <rclc_action_remove_used_goal_handle>
 80147f0:	f000 fe7e 	bl	80154f0 <rcutils_reset_error>
 80147f4:	e6b0      	b.n	8014558 <_rclc_take_new_data+0x44>
 80147f6:	2501      	movs	r5, #1
 80147f8:	e6ae      	b.n	8014558 <_rclc_take_new_data+0x44>
 80147fa:	bf00      	nop

080147fc <_rclc_execute.part.0>:
 80147fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147fe:	7803      	ldrb	r3, [r0, #0]
 8014800:	b085      	sub	sp, #20
 8014802:	4604      	mov	r4, r0
 8014804:	2b0a      	cmp	r3, #10
 8014806:	f200 8139 	bhi.w	8014a7c <_rclc_execute.part.0+0x280>
 801480a:	e8df f003 	tbb	[pc, r3]
 801480e:	4268      	.short	0x4268
 8014810:	06a75b4d 	.word	0x06a75b4d
 8014814:	721d0606 	.word	0x721d0606
 8014818:	62          	.byte	0x62
 8014819:	00          	.byte	0x00
 801481a:	2b06      	cmp	r3, #6
 801481c:	f000 8126 	beq.w	8014a6c <_rclc_execute.part.0+0x270>
 8014820:	2b07      	cmp	r3, #7
 8014822:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014824:	f040 811c 	bne.w	8014a60 <_rclc_execute.part.0+0x264>
 8014828:	f104 0510 	add.w	r5, r4, #16
 801482c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 8014830:	6880      	ldr	r0, [r0, #8]
 8014832:	4798      	blx	r3
 8014834:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8014836:	4629      	mov	r1, r5
 8014838:	6860      	ldr	r0, [r4, #4]
 801483a:	f007 f86f 	bl	801b91c <rcl_send_response>
 801483e:	4604      	mov	r4, r0
 8014840:	b378      	cbz	r0, 80148a2 <_rclc_execute.part.0+0xa6>
 8014842:	f000 fe55 	bl	80154f0 <rcutils_reset_error>
 8014846:	e02c      	b.n	80148a2 <_rclc_execute.part.0+0xa6>
 8014848:	6840      	ldr	r0, [r0, #4]
 801484a:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 801484e:	2b00      	cmp	r3, #0
 8014850:	f000 808e 	beq.w	8014970 <_rclc_execute.part.0+0x174>
 8014854:	2600      	movs	r6, #0
 8014856:	2701      	movs	r7, #1
 8014858:	e004      	b.n	8014864 <_rclc_execute.part.0+0x68>
 801485a:	f009 f83f 	bl	801d8dc <rclc_action_send_result_request>
 801485e:	b998      	cbnz	r0, 8014888 <_rclc_execute.part.0+0x8c>
 8014860:	722f      	strb	r7, [r5, #8]
 8014862:	6860      	ldr	r0, [r4, #4]
 8014864:	f009 f8ea 	bl	801da3c <rclc_action_find_first_handle_with_goal_response>
 8014868:	4605      	mov	r5, r0
 801486a:	2800      	cmp	r0, #0
 801486c:	d07f      	beq.n	801496e <_rclc_execute.part.0+0x172>
 801486e:	6863      	ldr	r3, [r4, #4]
 8014870:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014872:	699b      	ldr	r3, [r3, #24]
 8014874:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8014878:	f885 6020 	strb.w	r6, [r5, #32]
 801487c:	4798      	blx	r3
 801487e:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8014882:	4628      	mov	r0, r5
 8014884:	2b00      	cmp	r3, #0
 8014886:	d1e8      	bne.n	801485a <_rclc_execute.part.0+0x5e>
 8014888:	6860      	ldr	r0, [r4, #4]
 801488a:	4629      	mov	r1, r5
 801488c:	f009 f85c 	bl	801d948 <rclc_action_remove_used_goal_handle>
 8014890:	e7e7      	b.n	8014862 <_rclc_execute.part.0+0x66>
 8014892:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8014896:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 801489a:	b100      	cbz	r0, 801489e <_rclc_execute.part.0+0xa2>
 801489c:	68a0      	ldr	r0, [r4, #8]
 801489e:	2400      	movs	r4, #0
 80148a0:	4798      	blx	r3
 80148a2:	4620      	mov	r0, r4
 80148a4:	b005      	add	sp, #20
 80148a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148a8:	6840      	ldr	r0, [r0, #4]
 80148aa:	f007 fc6f 	bl	801c18c <rcl_timer_call>
 80148ae:	f240 3321 	movw	r3, #801	@ 0x321
 80148b2:	4604      	mov	r4, r0
 80148b4:	4298      	cmp	r0, r3
 80148b6:	d001      	beq.n	80148bc <_rclc_execute.part.0+0xc0>
 80148b8:	2800      	cmp	r0, #0
 80148ba:	d1c2      	bne.n	8014842 <_rclc_execute.part.0+0x46>
 80148bc:	2400      	movs	r4, #0
 80148be:	4620      	mov	r0, r4
 80148c0:	b005      	add	sp, #20
 80148c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148c4:	2400      	movs	r4, #0
 80148c6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80148c8:	6880      	ldr	r0, [r0, #8]
 80148ca:	4798      	blx	r3
 80148cc:	4620      	mov	r0, r4
 80148ce:	b005      	add	sp, #20
 80148d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148d2:	2400      	movs	r4, #0
 80148d4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80148d6:	4798      	blx	r3
 80148d8:	4620      	mov	r0, r4
 80148da:	b005      	add	sp, #20
 80148dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148de:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 80148e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80148e4:	b100      	cbz	r0, 80148e8 <_rclc_execute.part.0+0xec>
 80148e6:	68a0      	ldr	r0, [r4, #8]
 80148e8:	2400      	movs	r4, #0
 80148ea:	4798      	blx	r3
 80148ec:	4620      	mov	r0, r4
 80148ee:	b005      	add	sp, #20
 80148f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148f2:	6840      	ldr	r0, [r0, #4]
 80148f4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80148f8:	bb3b      	cbnz	r3, 801494a <_rclc_execute.part.0+0x14e>
 80148fa:	f890 3020 	ldrb.w	r3, [r0, #32]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d07d      	beq.n	80149fe <_rclc_execute.part.0+0x202>
 8014902:	f640 0634 	movw	r6, #2100	@ 0x834
 8014906:	2701      	movs	r7, #1
 8014908:	e007      	b.n	801491a <_rclc_execute.part.0+0x11e>
 801490a:	4628      	mov	r0, r5
 801490c:	f009 f8ae 	bl	801da6c <rclc_action_server_response_goal_request>
 8014910:	4629      	mov	r1, r5
 8014912:	6860      	ldr	r0, [r4, #4]
 8014914:	f009 f818 	bl	801d948 <rclc_action_remove_used_goal_handle>
 8014918:	6860      	ldr	r0, [r4, #4]
 801491a:	2100      	movs	r1, #0
 801491c:	f009 f840 	bl	801d9a0 <rclc_action_find_first_handle_by_status>
 8014920:	4605      	mov	r5, r0
 8014922:	2800      	cmp	r0, #0
 8014924:	d068      	beq.n	80149f8 <_rclc_execute.part.0+0x1fc>
 8014926:	6863      	ldr	r3, [r4, #4]
 8014928:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801492a:	699b      	ldr	r3, [r3, #24]
 801492c:	4798      	blx	r3
 801492e:	42b0      	cmp	r0, r6
 8014930:	f04f 0100 	mov.w	r1, #0
 8014934:	d1e9      	bne.n	801490a <_rclc_execute.part.0+0x10e>
 8014936:	2101      	movs	r1, #1
 8014938:	4628      	mov	r0, r5
 801493a:	f009 f897 	bl	801da6c <rclc_action_server_response_goal_request>
 801493e:	722f      	strb	r7, [r5, #8]
 8014940:	e7ea      	b.n	8014918 <_rclc_execute.part.0+0x11c>
 8014942:	6848      	ldr	r0, [r1, #4]
 8014944:	f009 f800 	bl	801d948 <rclc_action_remove_used_goal_handle>
 8014948:	6860      	ldr	r0, [r4, #4]
 801494a:	f009 f835 	bl	801d9b8 <rclc_action_find_first_terminated_handle>
 801494e:	4601      	mov	r1, r0
 8014950:	2800      	cmp	r0, #0
 8014952:	d1f6      	bne.n	8014942 <_rclc_execute.part.0+0x146>
 8014954:	6860      	ldr	r0, [r4, #4]
 8014956:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 801495a:	e7ce      	b.n	80148fa <_rclc_execute.part.0+0xfe>
 801495c:	2400      	movs	r4, #0
 801495e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014960:	f100 0110 	add.w	r1, r0, #16
 8014964:	6880      	ldr	r0, [r0, #8]
 8014966:	4798      	blx	r3
 8014968:	4620      	mov	r0, r4
 801496a:	b005      	add	sp, #20
 801496c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801496e:	6860      	ldr	r0, [r4, #4]
 8014970:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8014974:	b18b      	cbz	r3, 801499a <_rclc_execute.part.0+0x19e>
 8014976:	68c5      	ldr	r5, [r0, #12]
 8014978:	b32d      	cbz	r5, 80149c6 <_rclc_execute.part.0+0x1ca>
 801497a:	2600      	movs	r6, #0
 801497c:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8014980:	b143      	cbz	r3, 8014994 <_rclc_execute.part.0+0x198>
 8014982:	69c3      	ldr	r3, [r0, #28]
 8014984:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8014988:	b123      	cbz	r3, 8014994 <_rclc_execute.part.0+0x198>
 801498a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 801498c:	4628      	mov	r0, r5
 801498e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014990:	4798      	blx	r3
 8014992:	6860      	ldr	r0, [r4, #4]
 8014994:	682d      	ldr	r5, [r5, #0]
 8014996:	2d00      	cmp	r5, #0
 8014998:	d1f0      	bne.n	801497c <_rclc_execute.part.0+0x180>
 801499a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 801499e:	b193      	cbz	r3, 80149c6 <_rclc_execute.part.0+0x1ca>
 80149a0:	68c5      	ldr	r5, [r0, #12]
 80149a2:	b185      	cbz	r5, 80149c6 <_rclc_execute.part.0+0x1ca>
 80149a4:	2600      	movs	r6, #0
 80149a6:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 80149aa:	b14b      	cbz	r3, 80149c0 <_rclc_execute.part.0+0x1c4>
 80149ac:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80149ae:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 80149b2:	b12b      	cbz	r3, 80149c0 <_rclc_execute.part.0+0x1c4>
 80149b4:	4628      	mov	r0, r5
 80149b6:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 80149ba:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80149bc:	4798      	blx	r3
 80149be:	6860      	ldr	r0, [r4, #4]
 80149c0:	682d      	ldr	r5, [r5, #0]
 80149c2:	2d00      	cmp	r5, #0
 80149c4:	d1ef      	bne.n	80149a6 <_rclc_execute.part.0+0x1aa>
 80149c6:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	f43f af76 	beq.w	80148bc <_rclc_execute.part.0+0xc0>
 80149d0:	2700      	movs	r7, #0
 80149d2:	e00b      	b.n	80149ec <_rclc_execute.part.0+0x1f0>
 80149d4:	6863      	ldr	r3, [r4, #4]
 80149d6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80149d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80149da:	6a1e      	ldr	r6, [r3, #32]
 80149dc:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 80149e0:	47b0      	blx	r6
 80149e2:	6860      	ldr	r0, [r4, #4]
 80149e4:	4629      	mov	r1, r5
 80149e6:	f008 ffaf 	bl	801d948 <rclc_action_remove_used_goal_handle>
 80149ea:	6860      	ldr	r0, [r4, #4]
 80149ec:	f009 f832 	bl	801da54 <rclc_action_find_first_handle_with_result_response>
 80149f0:	4605      	mov	r5, r0
 80149f2:	2800      	cmp	r0, #0
 80149f4:	d1ee      	bne.n	80149d4 <_rclc_execute.part.0+0x1d8>
 80149f6:	e761      	b.n	80148bc <_rclc_execute.part.0+0xc0>
 80149f8:	6860      	ldr	r0, [r4, #4]
 80149fa:	f880 5020 	strb.w	r5, [r0, #32]
 80149fe:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	f43f af5a 	beq.w	80148bc <_rclc_execute.part.0+0xc0>
 8014a08:	68c5      	ldr	r5, [r0, #12]
 8014a0a:	b1b5      	cbz	r5, 8014a3a <_rclc_execute.part.0+0x23e>
 8014a0c:	2602      	movs	r6, #2
 8014a0e:	e001      	b.n	8014a14 <_rclc_execute.part.0+0x218>
 8014a10:	682d      	ldr	r5, [r5, #0]
 8014a12:	b195      	cbz	r5, 8014a3a <_rclc_execute.part.0+0x23e>
 8014a14:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8014a18:	2b03      	cmp	r3, #3
 8014a1a:	d1f9      	bne.n	8014a10 <_rclc_execute.part.0+0x214>
 8014a1c:	69c3      	ldr	r3, [r0, #28]
 8014a1e:	4628      	mov	r0, r5
 8014a20:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014a22:	4798      	blx	r3
 8014a24:	4603      	mov	r3, r0
 8014a26:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8014a2a:	4628      	mov	r0, r5
 8014a2c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8014a30:	b143      	cbz	r3, 8014a44 <_rclc_execute.part.0+0x248>
 8014a32:	f009 f839 	bl	801daa8 <rclc_action_server_goal_cancel_accept>
 8014a36:	6860      	ldr	r0, [r4, #4]
 8014a38:	e7ea      	b.n	8014a10 <_rclc_execute.part.0+0x214>
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	461c      	mov	r4, r3
 8014a3e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8014a42:	e72e      	b.n	80148a2 <_rclc_execute.part.0+0xa6>
 8014a44:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8014a46:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8014a4a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014a4e:	2101      	movs	r1, #1
 8014a50:	6860      	ldr	r0, [r4, #4]
 8014a52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014a56:	f009 f853 	bl	801db00 <rclc_action_server_goal_cancel_reject>
 8014a5a:	722e      	strb	r6, [r5, #8]
 8014a5c:	6860      	ldr	r0, [r4, #4]
 8014a5e:	e7d7      	b.n	8014a10 <_rclc_execute.part.0+0x214>
 8014a60:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8014a62:	f104 0510 	add.w	r5, r4, #16
 8014a66:	6880      	ldr	r0, [r0, #8]
 8014a68:	4798      	blx	r3
 8014a6a:	e6e3      	b.n	8014834 <_rclc_execute.part.0+0x38>
 8014a6c:	f100 0510 	add.w	r5, r0, #16
 8014a70:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014a72:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8014a74:	4629      	mov	r1, r5
 8014a76:	6880      	ldr	r0, [r0, #8]
 8014a78:	4798      	blx	r3
 8014a7a:	e6db      	b.n	8014834 <_rclc_execute.part.0+0x38>
 8014a7c:	2401      	movs	r4, #1
 8014a7e:	e710      	b.n	80148a2 <_rclc_execute.part.0+0xa6>

08014a80 <rclc_executor_trigger_any>:
 8014a80:	2800      	cmp	r0, #0
 8014a82:	d03d      	beq.n	8014b00 <rclc_executor_trigger_any+0x80>
 8014a84:	2900      	cmp	r1, #0
 8014a86:	d03c      	beq.n	8014b02 <rclc_executor_trigger_any+0x82>
 8014a88:	4603      	mov	r3, r0
 8014a8a:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8014a8e:	2200      	movs	r2, #0
 8014a90:	2800      	cmp	r0, #0
 8014a92:	d035      	beq.n	8014b00 <rclc_executor_trigger_any+0x80>
 8014a94:	b430      	push	{r4, r5}
 8014a96:	f893 c000 	ldrb.w	ip, [r3]
 8014a9a:	f1bc 0f08 	cmp.w	ip, #8
 8014a9e:	d11d      	bne.n	8014adc <rclc_executor_trigger_any+0x5c>
 8014aa0:	685c      	ldr	r4, [r3, #4]
 8014aa2:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8014aa4:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8014aa8:	d105      	bne.n	8014ab6 <rclc_executor_trigger_any+0x36>
 8014aaa:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8014aae:	b910      	cbnz	r0, 8014ab6 <rclc_executor_trigger_any+0x36>
 8014ab0:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8014ab4:	b128      	cbz	r0, 8014ac2 <rclc_executor_trigger_any+0x42>
 8014ab6:	bc30      	pop	{r4, r5}
 8014ab8:	4770      	bx	lr
 8014aba:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8014abe:	2800      	cmp	r0, #0
 8014ac0:	d1f9      	bne.n	8014ab6 <rclc_executor_trigger_any+0x36>
 8014ac2:	3201      	adds	r2, #1
 8014ac4:	3340      	adds	r3, #64	@ 0x40
 8014ac6:	4291      	cmp	r1, r2
 8014ac8:	d017      	beq.n	8014afa <rclc_executor_trigger_any+0x7a>
 8014aca:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8014ace:	2800      	cmp	r0, #0
 8014ad0:	d0f1      	beq.n	8014ab6 <rclc_executor_trigger_any+0x36>
 8014ad2:	f893 c000 	ldrb.w	ip, [r3]
 8014ad6:	f1bc 0f08 	cmp.w	ip, #8
 8014ada:	d0e1      	beq.n	8014aa0 <rclc_executor_trigger_any+0x20>
 8014adc:	f1bc 0f09 	cmp.w	ip, #9
 8014ae0:	d1eb      	bne.n	8014aba <rclc_executor_trigger_any+0x3a>
 8014ae2:	685c      	ldr	r4, [r3, #4]
 8014ae4:	6a25      	ldr	r5, [r4, #32]
 8014ae6:	2d00      	cmp	r5, #0
 8014ae8:	d1e5      	bne.n	8014ab6 <rclc_executor_trigger_any+0x36>
 8014aea:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8014aee:	2800      	cmp	r0, #0
 8014af0:	d1e1      	bne.n	8014ab6 <rclc_executor_trigger_any+0x36>
 8014af2:	3201      	adds	r2, #1
 8014af4:	3340      	adds	r3, #64	@ 0x40
 8014af6:	4291      	cmp	r1, r2
 8014af8:	d1e7      	bne.n	8014aca <rclc_executor_trigger_any+0x4a>
 8014afa:	2000      	movs	r0, #0
 8014afc:	bc30      	pop	{r4, r5}
 8014afe:	4770      	bx	lr
 8014b00:	4770      	bx	lr
 8014b02:	4608      	mov	r0, r1
 8014b04:	4770      	bx	lr
 8014b06:	bf00      	nop

08014b08 <rclc_executor_get_zero_initialized_executor>:
 8014b08:	b510      	push	{r4, lr}
 8014b0a:	4604      	mov	r4, r0
 8014b0c:	2288      	movs	r2, #136	@ 0x88
 8014b0e:	4902      	ldr	r1, [pc, #8]	@ (8014b18 <rclc_executor_get_zero_initialized_executor+0x10>)
 8014b10:	f00d fced 	bl	80224ee <memcpy>
 8014b14:	4620      	mov	r0, r4
 8014b16:	bd10      	pop	{r4, pc}
 8014b18:	08024900 	.word	0x08024900
 8014b1c:	00000000 	.word	0x00000000

08014b20 <rclc_executor_init>:
 8014b20:	2900      	cmp	r1, #0
 8014b22:	d06a      	beq.n	8014bfa <rclc_executor_init+0xda>
 8014b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b28:	4605      	mov	r5, r0
 8014b2a:	b0b0      	sub	sp, #192	@ 0xc0
 8014b2c:	2800      	cmp	r0, #0
 8014b2e:	d05c      	beq.n	8014bea <rclc_executor_init+0xca>
 8014b30:	4616      	mov	r6, r2
 8014b32:	4618      	mov	r0, r3
 8014b34:	4688      	mov	r8, r1
 8014b36:	461f      	mov	r7, r3
 8014b38:	f000 fcb6 	bl	80154a8 <rcutils_allocator_is_valid>
 8014b3c:	2e00      	cmp	r6, #0
 8014b3e:	d054      	beq.n	8014bea <rclc_executor_init+0xca>
 8014b40:	f080 0401 	eor.w	r4, r0, #1
 8014b44:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8014b48:	d14f      	bne.n	8014bea <rclc_executor_init+0xca>
 8014b4a:	2288      	movs	r2, #136	@ 0x88
 8014b4c:	4930      	ldr	r1, [pc, #192]	@ (8014c10 <rclc_executor_init+0xf0>)
 8014b4e:	a80e      	add	r0, sp, #56	@ 0x38
 8014b50:	f00d fccd 	bl	80224ee <memcpy>
 8014b54:	a90e      	add	r1, sp, #56	@ 0x38
 8014b56:	2288      	movs	r2, #136	@ 0x88
 8014b58:	4628      	mov	r0, r5
 8014b5a:	f00d fcc8 	bl	80224ee <memcpy>
 8014b5e:	4668      	mov	r0, sp
 8014b60:	f8c5 8000 	str.w	r8, [r5]
 8014b64:	60ae      	str	r6, [r5, #8]
 8014b66:	f007 fc87 	bl	801c478 <rcl_get_zero_initialized_wait_set>
 8014b6a:	46ec      	mov	ip, sp
 8014b6c:	f105 0e14 	add.w	lr, r5, #20
 8014b70:	f8d7 8000 	ldr.w	r8, [r7]
 8014b74:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014b78:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014b7c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014b80:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014b84:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014b88:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8014c08 <rclc_executor_init+0xe8>
 8014b8c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014b90:	f8dc 3000 	ldr.w	r3, [ip]
 8014b94:	01b0      	lsls	r0, r6, #6
 8014b96:	6939      	ldr	r1, [r7, #16]
 8014b98:	f8ce 3000 	str.w	r3, [lr]
 8014b9c:	612f      	str	r7, [r5, #16]
 8014b9e:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8014ba2:	47c0      	blx	r8
 8014ba4:	6068      	str	r0, [r5, #4]
 8014ba6:	b908      	cbnz	r0, 8014bac <rclc_executor_init+0x8c>
 8014ba8:	e029      	b.n	8014bfe <rclc_executor_init+0xde>
 8014baa:	6868      	ldr	r0, [r5, #4]
 8014bac:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8014bb0:	3401      	adds	r4, #1
 8014bb2:	4631      	mov	r1, r6
 8014bb4:	f000 fac0 	bl	8015138 <rclc_executor_handle_init>
 8014bb8:	42a6      	cmp	r6, r4
 8014bba:	d8f6      	bhi.n	8014baa <rclc_executor_init+0x8a>
 8014bbc:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8014bc0:	f000 faae 	bl	8015120 <rclc_executor_handle_counters_zero_init>
 8014bc4:	4a13      	ldr	r2, [pc, #76]	@ (8014c14 <rclc_executor_init+0xf4>)
 8014bc6:	2300      	movs	r3, #0
 8014bc8:	6868      	ldr	r0, [r5, #4]
 8014bca:	e9c5 231e 	strd	r2, r3, [r5, #120]	@ 0x78
 8014bce:	b168      	cbz	r0, 8014bec <rclc_executor_init+0xcc>
 8014bd0:	68ab      	ldr	r3, [r5, #8]
 8014bd2:	b173      	cbz	r3, 8014bf2 <rclc_executor_init+0xd2>
 8014bd4:	692a      	ldr	r2, [r5, #16]
 8014bd6:	fab2 f382 	clz	r3, r2
 8014bda:	095b      	lsrs	r3, r3, #5
 8014bdc:	b14a      	cbz	r2, 8014bf2 <rclc_executor_init+0xd2>
 8014bde:	4618      	mov	r0, r3
 8014be0:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
 8014be4:	b030      	add	sp, #192	@ 0xc0
 8014be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bea:	200b      	movs	r0, #11
 8014bec:	b030      	add	sp, #192	@ 0xc0
 8014bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bf2:	2000      	movs	r0, #0
 8014bf4:	b030      	add	sp, #192	@ 0xc0
 8014bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bfa:	200b      	movs	r0, #11
 8014bfc:	4770      	bx	lr
 8014bfe:	200a      	movs	r0, #10
 8014c00:	e7f4      	b.n	8014bec <rclc_executor_init+0xcc>
 8014c02:	bf00      	nop
 8014c04:	f3af 8000 	nop.w
 8014c08:	3b9aca00 	.word	0x3b9aca00
 8014c0c:	00000000 	.word	0x00000000
 8014c10:	08024900 	.word	0x08024900
 8014c14:	08014a81 	.word	0x08014a81

08014c18 <rclc_executor_add_subscription>:
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	bf18      	it	ne
 8014c1c:	2a00      	cmpne	r2, #0
 8014c1e:	b570      	push	{r4, r5, r6, lr}
 8014c20:	4604      	mov	r4, r0
 8014c22:	bf0c      	ite	eq
 8014c24:	2001      	moveq	r0, #1
 8014c26:	2000      	movne	r0, #0
 8014c28:	f89d c010 	ldrb.w	ip, [sp, #16]
 8014c2c:	2900      	cmp	r1, #0
 8014c2e:	bf08      	it	eq
 8014c30:	f040 0001 	orreq.w	r0, r0, #1
 8014c34:	bb28      	cbnz	r0, 8014c82 <rclc_executor_add_subscription+0x6a>
 8014c36:	fab4 f584 	clz	r5, r4
 8014c3a:	096d      	lsrs	r5, r5, #5
 8014c3c:	b30c      	cbz	r4, 8014c82 <rclc_executor_add_subscription+0x6a>
 8014c3e:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 8014c42:	4286      	cmp	r6, r0
 8014c44:	d301      	bcc.n	8014c4a <rclc_executor_add_subscription+0x32>
 8014c46:	2001      	movs	r0, #1
 8014c48:	bd70      	pop	{r4, r5, r6, pc}
 8014c4a:	6860      	ldr	r0, [r4, #4]
 8014c4c:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 8014c50:	f800 500e 	strb.w	r5, [r0, lr]
 8014c54:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8014c58:	3601      	adds	r6, #1
 8014c5a:	6303      	str	r3, [r0, #48]	@ 0x30
 8014c5c:	2301      	movs	r3, #1
 8014c5e:	62c5      	str	r5, [r0, #44]	@ 0x2c
 8014c60:	f104 0514 	add.w	r5, r4, #20
 8014c64:	f880 c001 	strb.w	ip, [r0, #1]
 8014c68:	8703      	strh	r3, [r0, #56]	@ 0x38
 8014c6a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8014c6e:	4628      	mov	r0, r5
 8014c70:	60e6      	str	r6, [r4, #12]
 8014c72:	f007 fc15 	bl	801c4a0 <rcl_wait_set_is_valid>
 8014c76:	b930      	cbnz	r0, 8014c86 <rclc_executor_add_subscription+0x6e>
 8014c78:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8014c7a:	2000      	movs	r0, #0
 8014c7c:	3301      	adds	r3, #1
 8014c7e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8014c80:	bd70      	pop	{r4, r5, r6, pc}
 8014c82:	200b      	movs	r0, #11
 8014c84:	bd70      	pop	{r4, r5, r6, pc}
 8014c86:	4628      	mov	r0, r5
 8014c88:	f007 fc10 	bl	801c4ac <rcl_wait_set_fini>
 8014c8c:	2800      	cmp	r0, #0
 8014c8e:	d0f3      	beq.n	8014c78 <rclc_executor_add_subscription+0x60>
 8014c90:	bd70      	pop	{r4, r5, r6, pc}
 8014c92:	bf00      	nop

08014c94 <rclc_executor_add_service>:
 8014c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c96:	9d06      	ldr	r5, [sp, #24]
 8014c98:	4604      	mov	r4, r0
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	bf18      	it	ne
 8014c9e:	2d00      	cmpne	r5, #0
 8014ca0:	bf0c      	ite	eq
 8014ca2:	2001      	moveq	r0, #1
 8014ca4:	2000      	movne	r0, #0
 8014ca6:	2a00      	cmp	r2, #0
 8014ca8:	bf08      	it	eq
 8014caa:	f040 0001 	orreq.w	r0, r0, #1
 8014cae:	2900      	cmp	r1, #0
 8014cb0:	bf08      	it	eq
 8014cb2:	f040 0001 	orreq.w	r0, r0, #1
 8014cb6:	bb40      	cbnz	r0, 8014d0a <rclc_executor_add_service+0x76>
 8014cb8:	fab4 f684 	clz	r6, r4
 8014cbc:	0976      	lsrs	r6, r6, #5
 8014cbe:	b324      	cbz	r4, 8014d0a <rclc_executor_add_service+0x76>
 8014cc0:	e9d4 7002 	ldrd	r7, r0, [r4, #8]
 8014cc4:	42b8      	cmp	r0, r7
 8014cc6:	d301      	bcc.n	8014ccc <rclc_executor_add_service+0x38>
 8014cc8:	2001      	movs	r0, #1
 8014cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ccc:	6867      	ldr	r7, [r4, #4]
 8014cce:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 8014cd2:	f100 0c01 	add.w	ip, r0, #1
 8014cd6:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 8014cda:	6283      	str	r3, [r0, #40]	@ 0x28
 8014cdc:	2305      	movs	r3, #5
 8014cde:	6305      	str	r5, [r0, #48]	@ 0x30
 8014ce0:	f104 0514 	add.w	r5, r4, #20
 8014ce4:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8014ce8:	f827 300e 	strh.w	r3, [r7, lr]
 8014cec:	2301      	movs	r3, #1
 8014cee:	62c6      	str	r6, [r0, #44]	@ 0x2c
 8014cf0:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8014cf4:	4628      	mov	r0, r5
 8014cf6:	f8c4 c00c 	str.w	ip, [r4, #12]
 8014cfa:	f007 fbd1 	bl	801c4a0 <rcl_wait_set_is_valid>
 8014cfe:	b930      	cbnz	r0, 8014d0e <rclc_executor_add_service+0x7a>
 8014d00:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8014d02:	2000      	movs	r0, #0
 8014d04:	3301      	adds	r3, #1
 8014d06:	6563      	str	r3, [r4, #84]	@ 0x54
 8014d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d0a:	200b      	movs	r0, #11
 8014d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d0e:	4628      	mov	r0, r5
 8014d10:	f007 fbcc 	bl	801c4ac <rcl_wait_set_fini>
 8014d14:	2800      	cmp	r0, #0
 8014d16:	d0f3      	beq.n	8014d00 <rclc_executor_add_service+0x6c>
 8014d18:	e7d7      	b.n	8014cca <rclc_executor_add_service+0x36>
 8014d1a:	bf00      	nop

08014d1c <rclc_executor_prepare>:
 8014d1c:	2800      	cmp	r0, #0
 8014d1e:	d044      	beq.n	8014daa <rclc_executor_prepare+0x8e>
 8014d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d22:	f100 0514 	add.w	r5, r0, #20
 8014d26:	b09b      	sub	sp, #108	@ 0x6c
 8014d28:	4604      	mov	r4, r0
 8014d2a:	4628      	mov	r0, r5
 8014d2c:	f007 fbb8 	bl	801c4a0 <rcl_wait_set_is_valid>
 8014d30:	b110      	cbz	r0, 8014d38 <rclc_executor_prepare+0x1c>
 8014d32:	2000      	movs	r0, #0
 8014d34:	b01b      	add	sp, #108	@ 0x6c
 8014d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d38:	4628      	mov	r0, r5
 8014d3a:	f007 fbb7 	bl	801c4ac <rcl_wait_set_fini>
 8014d3e:	2800      	cmp	r0, #0
 8014d40:	d130      	bne.n	8014da4 <rclc_executor_prepare+0x88>
 8014d42:	a80c      	add	r0, sp, #48	@ 0x30
 8014d44:	ae04      	add	r6, sp, #16
 8014d46:	f007 fb97 	bl	801c478 <rcl_get_zero_initialized_wait_set>
 8014d4a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8014d4e:	46ae      	mov	lr, r5
 8014d50:	6927      	ldr	r7, [r4, #16]
 8014d52:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014d56:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014d5a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014d5e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014d62:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014d66:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014d6a:	f8dc 3000 	ldr.w	r3, [ip]
 8014d6e:	f8ce 3000 	str.w	r3, [lr]
 8014d72:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014d74:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014d76:	683b      	ldr	r3, [r7, #0]
 8014d78:	4628      	mov	r0, r5
 8014d7a:	6822      	ldr	r2, [r4, #0]
 8014d7c:	6033      	str	r3, [r6, #0]
 8014d7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014d80:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8014d82:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014d86:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 8014d8a:	e9cd 2100 	strd	r2, r1, [sp]
 8014d8e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8014d90:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8014d92:	f007 fe8b 	bl	801caac <rcl_wait_set_init>
 8014d96:	2800      	cmp	r0, #0
 8014d98:	d0cc      	beq.n	8014d34 <rclc_executor_prepare+0x18>
 8014d9a:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014d9c:	f000 fba8 	bl	80154f0 <rcutils_reset_error>
 8014da0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8014da2:	e7c7      	b.n	8014d34 <rclc_executor_prepare+0x18>
 8014da4:	f000 fba4 	bl	80154f0 <rcutils_reset_error>
 8014da8:	e7cb      	b.n	8014d42 <rclc_executor_prepare+0x26>
 8014daa:	200b      	movs	r0, #11
 8014dac:	4770      	bx	lr
 8014dae:	bf00      	nop

08014db0 <rclc_executor_spin_some.part.0>:
 8014db0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014db4:	4605      	mov	r5, r0
 8014db6:	4691      	mov	r9, r2
 8014db8:	4698      	mov	r8, r3
 8014dba:	f7ff ffaf 	bl	8014d1c <rclc_executor_prepare>
 8014dbe:	f105 0614 	add.w	r6, r5, #20
 8014dc2:	4630      	mov	r0, r6
 8014dc4:	f007 fc3e 	bl	801c644 <rcl_wait_set_clear>
 8014dc8:	4607      	mov	r7, r0
 8014dca:	2800      	cmp	r0, #0
 8014dcc:	f040 80a8 	bne.w	8014f20 <rclc_executor_spin_some.part.0+0x170>
 8014dd0:	68ab      	ldr	r3, [r5, #8]
 8014dd2:	b30b      	cbz	r3, 8014e18 <rclc_executor_spin_some.part.0+0x68>
 8014dd4:	4604      	mov	r4, r0
 8014dd6:	6869      	ldr	r1, [r5, #4]
 8014dd8:	01a2      	lsls	r2, r4, #6
 8014dda:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8014dde:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8014de2:	b1cb      	cbz	r3, 8014e18 <rclc_executor_spin_some.part.0+0x68>
 8014de4:	5c8b      	ldrb	r3, [r1, r2]
 8014de6:	2b0a      	cmp	r3, #10
 8014de8:	f200 80de 	bhi.w	8014fa8 <rclc_executor_spin_some.part.0+0x1f8>
 8014dec:	e8df f003 	tbb	[pc, r3]
 8014df0:	8da99d9d 	.word	0x8da99d9d
 8014df4:	0606068d 	.word	0x0606068d
 8014df8:	c1ce      	.short	0xc1ce
 8014dfa:	b5          	.byte	0xb5
 8014dfb:	00          	.byte	0x00
 8014dfc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014e00:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014e04:	4630      	mov	r0, r6
 8014e06:	f007 ff6d 	bl	801cce4 <rcl_wait_set_add_service>
 8014e0a:	2800      	cmp	r0, #0
 8014e0c:	f040 8087 	bne.w	8014f1e <rclc_executor_spin_some.part.0+0x16e>
 8014e10:	3401      	adds	r4, #1
 8014e12:	68ab      	ldr	r3, [r5, #8]
 8014e14:	429c      	cmp	r4, r3
 8014e16:	d3de      	bcc.n	8014dd6 <rclc_executor_spin_some.part.0+0x26>
 8014e18:	4643      	mov	r3, r8
 8014e1a:	464a      	mov	r2, r9
 8014e1c:	4630      	mov	r0, r6
 8014e1e:	f007 ff8f 	bl	801cd40 <rcl_wait>
 8014e22:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	f000 80c6 	beq.w	8014fb8 <rclc_executor_spin_some.part.0+0x208>
 8014e2c:	2b01      	cmp	r3, #1
 8014e2e:	f040 80bb 	bne.w	8014fa8 <rclc_executor_spin_some.part.0+0x1f8>
 8014e32:	68ab      	ldr	r3, [r5, #8]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	f000 8159 	beq.w	80150ec <rclc_executor_spin_some.part.0+0x33c>
 8014e3a:	2400      	movs	r4, #0
 8014e3c:	f240 1991 	movw	r9, #401	@ 0x191
 8014e40:	46a0      	mov	r8, r4
 8014e42:	e00a      	b.n	8014e5a <rclc_executor_spin_some.part.0+0xaa>
 8014e44:	f7ff fb18 	bl	8014478 <_rclc_check_for_new_data>
 8014e48:	4604      	mov	r4, r0
 8014e4a:	b110      	cbz	r0, 8014e52 <rclc_executor_spin_some.part.0+0xa2>
 8014e4c:	4548      	cmp	r0, r9
 8014e4e:	f040 80b1 	bne.w	8014fb4 <rclc_executor_spin_some.part.0+0x204>
 8014e52:	68ab      	ldr	r3, [r5, #8]
 8014e54:	4598      	cmp	r8, r3
 8014e56:	f080 8126 	bcs.w	80150a6 <rclc_executor_spin_some.part.0+0x2f6>
 8014e5a:	686a      	ldr	r2, [r5, #4]
 8014e5c:	4631      	mov	r1, r6
 8014e5e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8014e62:	f108 0801 	add.w	r8, r8, #1
 8014e66:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8014e6a:	f1bc 0f00 	cmp.w	ip, #0
 8014e6e:	d1e9      	bne.n	8014e44 <rclc_executor_spin_some.part.0+0x94>
 8014e70:	4619      	mov	r1, r3
 8014e72:	4610      	mov	r0, r2
 8014e74:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8014e78:	4798      	blx	r3
 8014e7a:	2800      	cmp	r0, #0
 8014e7c:	f000 809a 	beq.w	8014fb4 <rclc_executor_spin_some.part.0+0x204>
 8014e80:	68ab      	ldr	r3, [r5, #8]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	f000 8096 	beq.w	8014fb4 <rclc_executor_spin_some.part.0+0x204>
 8014e88:	f04f 0800 	mov.w	r8, #0
 8014e8c:	f240 1991 	movw	r9, #401	@ 0x191
 8014e90:	e009      	b.n	8014ea6 <rclc_executor_spin_some.part.0+0xf6>
 8014e92:	f7ff fb3f 	bl	8014514 <_rclc_take_new_data>
 8014e96:	4604      	mov	r4, r0
 8014e98:	b110      	cbz	r0, 8014ea0 <rclc_executor_spin_some.part.0+0xf0>
 8014e9a:	4548      	cmp	r0, r9
 8014e9c:	f040 808a 	bne.w	8014fb4 <rclc_executor_spin_some.part.0+0x204>
 8014ea0:	68ab      	ldr	r3, [r5, #8]
 8014ea2:	4598      	cmp	r8, r3
 8014ea4:	d209      	bcs.n	8014eba <rclc_executor_spin_some.part.0+0x10a>
 8014ea6:	6868      	ldr	r0, [r5, #4]
 8014ea8:	4631      	mov	r1, r6
 8014eaa:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8014eae:	f108 0801 	add.w	r8, r8, #1
 8014eb2:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8014eb6:	2a00      	cmp	r2, #0
 8014eb8:	d1eb      	bne.n	8014e92 <rclc_executor_spin_some.part.0+0xe2>
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d07a      	beq.n	8014fb4 <rclc_executor_spin_some.part.0+0x204>
 8014ebe:	2600      	movs	r6, #0
 8014ec0:	e00e      	b.n	8014ee0 <rclc_executor_spin_some.part.0+0x130>
 8014ec2:	f812 200c 	ldrb.w	r2, [r2, ip]
 8014ec6:	2a08      	cmp	r2, #8
 8014ec8:	f000 80fc 	beq.w	80150c4 <rclc_executor_spin_some.part.0+0x314>
 8014ecc:	2a09      	cmp	r2, #9
 8014ece:	f000 80ee 	beq.w	80150ae <rclc_executor_spin_some.part.0+0x2fe>
 8014ed2:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 8014ed6:	b98a      	cbnz	r2, 8014efc <rclc_executor_spin_some.part.0+0x14c>
 8014ed8:	3601      	adds	r6, #1
 8014eda:	429e      	cmp	r6, r3
 8014edc:	d267      	bcs.n	8014fae <rclc_executor_spin_some.part.0+0x1fe>
 8014ede:	2400      	movs	r4, #0
 8014ee0:	686a      	ldr	r2, [r5, #4]
 8014ee2:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8014ee6:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8014eea:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8014eee:	2900      	cmp	r1, #0
 8014ef0:	d060      	beq.n	8014fb4 <rclc_executor_spin_some.part.0+0x204>
 8014ef2:	7841      	ldrb	r1, [r0, #1]
 8014ef4:	2900      	cmp	r1, #0
 8014ef6:	d0e4      	beq.n	8014ec2 <rclc_executor_spin_some.part.0+0x112>
 8014ef8:	2901      	cmp	r1, #1
 8014efa:	d1ed      	bne.n	8014ed8 <rclc_executor_spin_some.part.0+0x128>
 8014efc:	f7ff fc7e 	bl	80147fc <_rclc_execute.part.0>
 8014f00:	2800      	cmp	r0, #0
 8014f02:	f040 80b5 	bne.w	8015070 <rclc_executor_spin_some.part.0+0x2c0>
 8014f06:	68ab      	ldr	r3, [r5, #8]
 8014f08:	e7e6      	b.n	8014ed8 <rclc_executor_spin_some.part.0+0x128>
 8014f0a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014f0e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014f12:	4630      	mov	r0, r6
 8014f14:	f007 feba 	bl	801cc8c <rcl_wait_set_add_client>
 8014f18:	2800      	cmp	r0, #0
 8014f1a:	f43f af79 	beq.w	8014e10 <rclc_executor_spin_some.part.0+0x60>
 8014f1e:	4607      	mov	r7, r0
 8014f20:	f000 fae6 	bl	80154f0 <rcutils_reset_error>
 8014f24:	4638      	mov	r0, r7
 8014f26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f2a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014f2e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014f32:	4630      	mov	r0, r6
 8014f34:	f007 fb5a 	bl	801c5ec <rcl_wait_set_add_subscription>
 8014f38:	2800      	cmp	r0, #0
 8014f3a:	f43f af69 	beq.w	8014e10 <rclc_executor_spin_some.part.0+0x60>
 8014f3e:	4607      	mov	r7, r0
 8014f40:	e7ee      	b.n	8014f20 <rclc_executor_spin_some.part.0+0x170>
 8014f42:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014f46:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014f4a:	4630      	mov	r0, r6
 8014f4c:	f007 fe6e 	bl	801cc2c <rcl_wait_set_add_timer>
 8014f50:	2800      	cmp	r0, #0
 8014f52:	f43f af5d 	beq.w	8014e10 <rclc_executor_spin_some.part.0+0x60>
 8014f56:	4607      	mov	r7, r0
 8014f58:	e7e2      	b.n	8014f20 <rclc_executor_spin_some.part.0+0x170>
 8014f5a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014f5e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014f62:	4630      	mov	r0, r6
 8014f64:	f007 fe36 	bl	801cbd4 <rcl_wait_set_add_guard_condition>
 8014f68:	2800      	cmp	r0, #0
 8014f6a:	f43f af51 	beq.w	8014e10 <rclc_executor_spin_some.part.0+0x60>
 8014f6e:	4607      	mov	r7, r0
 8014f70:	e7d6      	b.n	8014f20 <rclc_executor_spin_some.part.0+0x170>
 8014f72:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014f76:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014f7a:	4630      	mov	r0, r6
 8014f7c:	3110      	adds	r1, #16
 8014f7e:	f008 fbb5 	bl	801d6ec <rcl_action_wait_set_add_action_server>
 8014f82:	2800      	cmp	r0, #0
 8014f84:	f43f af44 	beq.w	8014e10 <rclc_executor_spin_some.part.0+0x60>
 8014f88:	4607      	mov	r7, r0
 8014f8a:	e7c9      	b.n	8014f20 <rclc_executor_spin_some.part.0+0x170>
 8014f8c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014f90:	2300      	movs	r3, #0
 8014f92:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014f96:	4630      	mov	r0, r6
 8014f98:	3110      	adds	r1, #16
 8014f9a:	f008 f97d 	bl	801d298 <rcl_action_wait_set_add_action_client>
 8014f9e:	2800      	cmp	r0, #0
 8014fa0:	f43f af36 	beq.w	8014e10 <rclc_executor_spin_some.part.0+0x60>
 8014fa4:	4607      	mov	r7, r0
 8014fa6:	e7bb      	b.n	8014f20 <rclc_executor_spin_some.part.0+0x170>
 8014fa8:	2701      	movs	r7, #1
 8014faa:	f000 faa1 	bl	80154f0 <rcutils_reset_error>
 8014fae:	4638      	mov	r0, r7
 8014fb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fb4:	4627      	mov	r7, r4
 8014fb6:	e7fa      	b.n	8014fae <rclc_executor_spin_some.part.0+0x1fe>
 8014fb8:	68ab      	ldr	r3, [r5, #8]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	f000 8093 	beq.w	80150e6 <rclc_executor_spin_some.part.0+0x336>
 8014fc0:	2400      	movs	r4, #0
 8014fc2:	f240 1991 	movw	r9, #401	@ 0x191
 8014fc6:	46a0      	mov	r8, r4
 8014fc8:	e008      	b.n	8014fdc <rclc_executor_spin_some.part.0+0x22c>
 8014fca:	f7ff fa55 	bl	8014478 <_rclc_check_for_new_data>
 8014fce:	4604      	mov	r4, r0
 8014fd0:	b108      	cbz	r0, 8014fd6 <rclc_executor_spin_some.part.0+0x226>
 8014fd2:	4548      	cmp	r0, r9
 8014fd4:	d1ee      	bne.n	8014fb4 <rclc_executor_spin_some.part.0+0x204>
 8014fd6:	68ab      	ldr	r3, [r5, #8]
 8014fd8:	4598      	cmp	r8, r3
 8014fda:	d266      	bcs.n	80150aa <rclc_executor_spin_some.part.0+0x2fa>
 8014fdc:	686a      	ldr	r2, [r5, #4]
 8014fde:	4631      	mov	r1, r6
 8014fe0:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8014fe4:	f108 0801 	add.w	r8, r8, #1
 8014fe8:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8014fec:	f1bc 0f00 	cmp.w	ip, #0
 8014ff0:	d1eb      	bne.n	8014fca <rclc_executor_spin_some.part.0+0x21a>
 8014ff2:	4619      	mov	r1, r3
 8014ff4:	4610      	mov	r0, r2
 8014ff6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8014ffa:	4798      	blx	r3
 8014ffc:	2800      	cmp	r0, #0
 8014ffe:	d0d9      	beq.n	8014fb4 <rclc_executor_spin_some.part.0+0x204>
 8015000:	68ab      	ldr	r3, [r5, #8]
 8015002:	2b00      	cmp	r3, #0
 8015004:	d0d6      	beq.n	8014fb4 <rclc_executor_spin_some.part.0+0x204>
 8015006:	f04f 0a00 	mov.w	sl, #0
 801500a:	f240 1891 	movw	r8, #401	@ 0x191
 801500e:	f240 2959 	movw	r9, #601	@ 0x259
 8015012:	e00e      	b.n	8015032 <rclc_executor_spin_some.part.0+0x282>
 8015014:	f813 300b 	ldrb.w	r3, [r3, fp]
 8015018:	2b08      	cmp	r3, #8
 801501a:	d034      	beq.n	8015086 <rclc_executor_spin_some.part.0+0x2d6>
 801501c:	2b09      	cmp	r3, #9
 801501e:	d029      	beq.n	8015074 <rclc_executor_spin_some.part.0+0x2c4>
 8015020:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8015024:	bb03      	cbnz	r3, 8015068 <rclc_executor_spin_some.part.0+0x2b8>
 8015026:	f10a 0a01 	add.w	sl, sl, #1
 801502a:	68ab      	ldr	r3, [r5, #8]
 801502c:	459a      	cmp	sl, r3
 801502e:	d2be      	bcs.n	8014fae <rclc_executor_spin_some.part.0+0x1fe>
 8015030:	2400      	movs	r4, #0
 8015032:	6868      	ldr	r0, [r5, #4]
 8015034:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8015038:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 801503c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8015040:	2b00      	cmp	r3, #0
 8015042:	d0b7      	beq.n	8014fb4 <rclc_executor_spin_some.part.0+0x204>
 8015044:	4631      	mov	r1, r6
 8015046:	f7ff fa65 	bl	8014514 <_rclc_take_new_data>
 801504a:	2800      	cmp	r0, #0
 801504c:	bf18      	it	ne
 801504e:	4540      	cmpne	r0, r8
 8015050:	d001      	beq.n	8015056 <rclc_executor_spin_some.part.0+0x2a6>
 8015052:	4548      	cmp	r0, r9
 8015054:	d10c      	bne.n	8015070 <rclc_executor_spin_some.part.0+0x2c0>
 8015056:	686b      	ldr	r3, [r5, #4]
 8015058:	eb13 000b 	adds.w	r0, r3, fp
 801505c:	d021      	beq.n	80150a2 <rclc_executor_spin_some.part.0+0x2f2>
 801505e:	7842      	ldrb	r2, [r0, #1]
 8015060:	2a00      	cmp	r2, #0
 8015062:	d0d7      	beq.n	8015014 <rclc_executor_spin_some.part.0+0x264>
 8015064:	2a01      	cmp	r2, #1
 8015066:	d1de      	bne.n	8015026 <rclc_executor_spin_some.part.0+0x276>
 8015068:	f7ff fbc8 	bl	80147fc <_rclc_execute.part.0>
 801506c:	2800      	cmp	r0, #0
 801506e:	d0da      	beq.n	8015026 <rclc_executor_spin_some.part.0+0x276>
 8015070:	4607      	mov	r7, r0
 8015072:	e79c      	b.n	8014fae <rclc_executor_spin_some.part.0+0x1fe>
 8015074:	6843      	ldr	r3, [r0, #4]
 8015076:	6a1a      	ldr	r2, [r3, #32]
 8015078:	2a00      	cmp	r2, #0
 801507a:	d1f5      	bne.n	8015068 <rclc_executor_spin_some.part.0+0x2b8>
 801507c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8015080:	2b00      	cmp	r3, #0
 8015082:	d0d0      	beq.n	8015026 <rclc_executor_spin_some.part.0+0x276>
 8015084:	e7f0      	b.n	8015068 <rclc_executor_spin_some.part.0+0x2b8>
 8015086:	6843      	ldr	r3, [r0, #4]
 8015088:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801508a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 801508e:	d1eb      	bne.n	8015068 <rclc_executor_spin_some.part.0+0x2b8>
 8015090:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8015094:	2a00      	cmp	r2, #0
 8015096:	d1e7      	bne.n	8015068 <rclc_executor_spin_some.part.0+0x2b8>
 8015098:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801509c:	2b00      	cmp	r3, #0
 801509e:	d0c2      	beq.n	8015026 <rclc_executor_spin_some.part.0+0x276>
 80150a0:	e7e2      	b.n	8015068 <rclc_executor_spin_some.part.0+0x2b8>
 80150a2:	270b      	movs	r7, #11
 80150a4:	e783      	b.n	8014fae <rclc_executor_spin_some.part.0+0x1fe>
 80150a6:	686a      	ldr	r2, [r5, #4]
 80150a8:	e6e2      	b.n	8014e70 <rclc_executor_spin_some.part.0+0xc0>
 80150aa:	686a      	ldr	r2, [r5, #4]
 80150ac:	e7a1      	b.n	8014ff2 <rclc_executor_spin_some.part.0+0x242>
 80150ae:	6842      	ldr	r2, [r0, #4]
 80150b0:	6a11      	ldr	r1, [r2, #32]
 80150b2:	2900      	cmp	r1, #0
 80150b4:	f47f af22 	bne.w	8014efc <rclc_executor_spin_some.part.0+0x14c>
 80150b8:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 80150bc:	2a00      	cmp	r2, #0
 80150be:	f43f af0b 	beq.w	8014ed8 <rclc_executor_spin_some.part.0+0x128>
 80150c2:	e71b      	b.n	8014efc <rclc_executor_spin_some.part.0+0x14c>
 80150c4:	6842      	ldr	r2, [r0, #4]
 80150c6:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80150c8:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 80150cc:	f47f af16 	bne.w	8014efc <rclc_executor_spin_some.part.0+0x14c>
 80150d0:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 80150d4:	2900      	cmp	r1, #0
 80150d6:	f47f af11 	bne.w	8014efc <rclc_executor_spin_some.part.0+0x14c>
 80150da:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 80150de:	2a00      	cmp	r2, #0
 80150e0:	f43f aefa 	beq.w	8014ed8 <rclc_executor_spin_some.part.0+0x128>
 80150e4:	e70a      	b.n	8014efc <rclc_executor_spin_some.part.0+0x14c>
 80150e6:	686a      	ldr	r2, [r5, #4]
 80150e8:	461c      	mov	r4, r3
 80150ea:	e782      	b.n	8014ff2 <rclc_executor_spin_some.part.0+0x242>
 80150ec:	686a      	ldr	r2, [r5, #4]
 80150ee:	461c      	mov	r4, r3
 80150f0:	e6be      	b.n	8014e70 <rclc_executor_spin_some.part.0+0xc0>
 80150f2:	bf00      	nop

080150f4 <rclc_executor_spin_some>:
 80150f4:	b190      	cbz	r0, 801511c <rclc_executor_spin_some+0x28>
 80150f6:	b570      	push	{r4, r5, r6, lr}
 80150f8:	4604      	mov	r4, r0
 80150fa:	6800      	ldr	r0, [r0, #0]
 80150fc:	4616      	mov	r6, r2
 80150fe:	461d      	mov	r5, r3
 8015100:	f005 fcfe 	bl	801ab00 <rcl_context_is_valid>
 8015104:	b130      	cbz	r0, 8015114 <rclc_executor_spin_some+0x20>
 8015106:	4632      	mov	r2, r6
 8015108:	462b      	mov	r3, r5
 801510a:	4620      	mov	r0, r4
 801510c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015110:	f7ff be4e 	b.w	8014db0 <rclc_executor_spin_some.part.0>
 8015114:	f000 f9ec 	bl	80154f0 <rcutils_reset_error>
 8015118:	2001      	movs	r0, #1
 801511a:	bd70      	pop	{r4, r5, r6, pc}
 801511c:	200b      	movs	r0, #11
 801511e:	4770      	bx	lr

08015120 <rclc_executor_handle_counters_zero_init>:
 8015120:	b130      	cbz	r0, 8015130 <rclc_executor_handle_counters_zero_init+0x10>
 8015122:	2220      	movs	r2, #32
 8015124:	2100      	movs	r1, #0
 8015126:	b508      	push	{r3, lr}
 8015128:	f00d f8c2 	bl	80222b0 <memset>
 801512c:	2000      	movs	r0, #0
 801512e:	bd08      	pop	{r3, pc}
 8015130:	200b      	movs	r0, #11
 8015132:	4770      	bx	lr
 8015134:	0000      	movs	r0, r0
	...

08015138 <rclc_executor_handle_init>:
 8015138:	4603      	mov	r3, r0
 801513a:	b178      	cbz	r0, 801515c <rclc_executor_handle_init+0x24>
 801513c:	2200      	movs	r2, #0
 801513e:	f04f 0c0b 	mov.w	ip, #11
 8015142:	6341      	str	r1, [r0, #52]	@ 0x34
 8015144:	4610      	mov	r0, r2
 8015146:	f8a3 c000 	strh.w	ip, [r3]
 801514a:	631a      	str	r2, [r3, #48]	@ 0x30
 801514c:	871a      	strh	r2, [r3, #56]	@ 0x38
 801514e:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 8015160 <rclc_executor_handle_init+0x28>
 8015152:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8015156:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 801515a:	4770      	bx	lr
 801515c:	200b      	movs	r0, #11
 801515e:	4770      	bx	lr
	...

08015168 <rclc_support_init>:
 8015168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801516c:	b086      	sub	sp, #24
 801516e:	b3bb      	cbz	r3, 80151e0 <rclc_support_init+0x78>
 8015170:	4606      	mov	r6, r0
 8015172:	b3a8      	cbz	r0, 80151e0 <rclc_support_init+0x78>
 8015174:	461c      	mov	r4, r3
 8015176:	460f      	mov	r7, r1
 8015178:	4690      	mov	r8, r2
 801517a:	f005 fe2d 	bl	801add8 <rcl_get_zero_initialized_init_options>
 801517e:	f104 050c 	add.w	r5, r4, #12
 8015182:	9005      	str	r0, [sp, #20]
 8015184:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015188:	e88d 0003 	stmia.w	sp, {r0, r1}
 801518c:	a805      	add	r0, sp, #20
 801518e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015192:	f005 fe23 	bl	801addc <rcl_init_options_init>
 8015196:	4605      	mov	r5, r0
 8015198:	b9e0      	cbnz	r0, 80151d4 <rclc_support_init+0x6c>
 801519a:	ad02      	add	r5, sp, #8
 801519c:	4628      	mov	r0, r5
 801519e:	f005 fca5 	bl	801aaec <rcl_get_zero_initialized_context>
 80151a2:	4633      	mov	r3, r6
 80151a4:	aa05      	add	r2, sp, #20
 80151a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80151aa:	e886 0003 	stmia.w	r6, {r0, r1}
 80151ae:	4641      	mov	r1, r8
 80151b0:	4638      	mov	r0, r7
 80151b2:	f005 fd0b 	bl	801abcc <rcl_init>
 80151b6:	4605      	mov	r5, r0
 80151b8:	b9b8      	cbnz	r0, 80151ea <rclc_support_init+0x82>
 80151ba:	4622      	mov	r2, r4
 80151bc:	f106 010c 	add.w	r1, r6, #12
 80151c0:	2003      	movs	r0, #3
 80151c2:	60b4      	str	r4, [r6, #8]
 80151c4:	f006 fd2e 	bl	801bc24 <rcl_clock_init>
 80151c8:	4605      	mov	r5, r0
 80151ca:	b970      	cbnz	r0, 80151ea <rclc_support_init+0x82>
 80151cc:	a805      	add	r0, sp, #20
 80151ce:	f005 fe6b 	bl	801aea8 <rcl_init_options_fini>
 80151d2:	b108      	cbz	r0, 80151d8 <rclc_support_init+0x70>
 80151d4:	f000 f98c 	bl	80154f0 <rcutils_reset_error>
 80151d8:	4628      	mov	r0, r5
 80151da:	b006      	add	sp, #24
 80151dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151e0:	250b      	movs	r5, #11
 80151e2:	4628      	mov	r0, r5
 80151e4:	b006      	add	sp, #24
 80151e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151ea:	f000 f981 	bl	80154f0 <rcutils_reset_error>
 80151ee:	a805      	add	r0, sp, #20
 80151f0:	f005 fe5a 	bl	801aea8 <rcl_init_options_fini>
 80151f4:	2800      	cmp	r0, #0
 80151f6:	d0ef      	beq.n	80151d8 <rclc_support_init+0x70>
 80151f8:	e7ec      	b.n	80151d4 <rclc_support_init+0x6c>
 80151fa:	bf00      	nop

080151fc <rclc_node_init_default>:
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	bf18      	it	ne
 8015200:	2a00      	cmpne	r2, #0
 8015202:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015206:	4616      	mov	r6, r2
 8015208:	bf0c      	ite	eq
 801520a:	2201      	moveq	r2, #1
 801520c:	2200      	movne	r2, #0
 801520e:	b0a1      	sub	sp, #132	@ 0x84
 8015210:	2900      	cmp	r1, #0
 8015212:	bf08      	it	eq
 8015214:	f042 0201 	orreq.w	r2, r2, #1
 8015218:	bb22      	cbnz	r2, 8015264 <rclc_node_init_default+0x68>
 801521a:	4604      	mov	r4, r0
 801521c:	b310      	cbz	r0, 8015264 <rclc_node_init_default+0x68>
 801521e:	f10d 0810 	add.w	r8, sp, #16
 8015222:	461f      	mov	r7, r3
 8015224:	460d      	mov	r5, r1
 8015226:	f10d 0918 	add.w	r9, sp, #24
 801522a:	4640      	mov	r0, r8
 801522c:	f005 fef6 	bl	801b01c <rcl_get_zero_initialized_node>
 8015230:	e898 0003 	ldmia.w	r8, {r0, r1}
 8015234:	e884 0003 	stmia.w	r4, {r0, r1}
 8015238:	4648      	mov	r0, r9
 801523a:	f006 f869 	bl	801b310 <rcl_node_get_default_options>
 801523e:	4640      	mov	r0, r8
 8015240:	f005 feec 	bl	801b01c <rcl_get_zero_initialized_node>
 8015244:	f8cd 9000 	str.w	r9, [sp]
 8015248:	463b      	mov	r3, r7
 801524a:	4632      	mov	r2, r6
 801524c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8015250:	e884 0003 	stmia.w	r4, {r0, r1}
 8015254:	4629      	mov	r1, r5
 8015256:	4620      	mov	r0, r4
 8015258:	f005 feea 	bl	801b030 <rcl_node_init>
 801525c:	b930      	cbnz	r0, 801526c <rclc_node_init_default+0x70>
 801525e:	b021      	add	sp, #132	@ 0x84
 8015260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015264:	200b      	movs	r0, #11
 8015266:	b021      	add	sp, #132	@ 0x84
 8015268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801526c:	9003      	str	r0, [sp, #12]
 801526e:	f000 f93f 	bl	80154f0 <rcutils_reset_error>
 8015272:	f000 f93d 	bl	80154f0 <rcutils_reset_error>
 8015276:	9803      	ldr	r0, [sp, #12]
 8015278:	b021      	add	sp, #132	@ 0x84
 801527a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801527e:	bf00      	nop

08015280 <rclc_publisher_init>:
 8015280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015284:	b0a1      	sub	sp, #132	@ 0x84
 8015286:	9e28      	ldr	r6, [sp, #160]	@ 0xa0
 8015288:	2e00      	cmp	r6, #0
 801528a:	bf18      	it	ne
 801528c:	2b00      	cmpne	r3, #0
 801528e:	bf0c      	ite	eq
 8015290:	f04f 0c01 	moveq.w	ip, #1
 8015294:	f04f 0c00 	movne.w	ip, #0
 8015298:	2a00      	cmp	r2, #0
 801529a:	bf08      	it	eq
 801529c:	f04c 0c01 	orreq.w	ip, ip, #1
 80152a0:	2900      	cmp	r1, #0
 80152a2:	bf08      	it	eq
 80152a4:	f04c 0c01 	orreq.w	ip, ip, #1
 80152a8:	f1bc 0f00 	cmp.w	ip, #0
 80152ac:	d11d      	bne.n	80152ea <rclc_publisher_init+0x6a>
 80152ae:	4604      	mov	r4, r0
 80152b0:	b1d8      	cbz	r0, 80152ea <rclc_publisher_init+0x6a>
 80152b2:	f10d 0910 	add.w	r9, sp, #16
 80152b6:	461f      	mov	r7, r3
 80152b8:	4690      	mov	r8, r2
 80152ba:	460d      	mov	r5, r1
 80152bc:	f7fe ffc8 	bl	8014250 <rcl_get_zero_initialized_publisher>
 80152c0:	6020      	str	r0, [r4, #0]
 80152c2:	4648      	mov	r0, r9
 80152c4:	f7ff f864 	bl	8014390 <rcl_publisher_get_default_options>
 80152c8:	4631      	mov	r1, r6
 80152ca:	2250      	movs	r2, #80	@ 0x50
 80152cc:	4648      	mov	r0, r9
 80152ce:	f00d f90e 	bl	80224ee <memcpy>
 80152d2:	463b      	mov	r3, r7
 80152d4:	4642      	mov	r2, r8
 80152d6:	4629      	mov	r1, r5
 80152d8:	4620      	mov	r0, r4
 80152da:	f8cd 9000 	str.w	r9, [sp]
 80152de:	f7fe ffbd 	bl	801425c <rcl_publisher_init>
 80152e2:	b930      	cbnz	r0, 80152f2 <rclc_publisher_init+0x72>
 80152e4:	b021      	add	sp, #132	@ 0x84
 80152e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152ea:	200b      	movs	r0, #11
 80152ec:	b021      	add	sp, #132	@ 0x84
 80152ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152f2:	9003      	str	r0, [sp, #12]
 80152f4:	f000 f8fc 	bl	80154f0 <rcutils_reset_error>
 80152f8:	9803      	ldr	r0, [sp, #12]
 80152fa:	b021      	add	sp, #132	@ 0x84
 80152fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015300 <rclc_service_init>:
 8015300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015304:	b09f      	sub	sp, #124	@ 0x7c
 8015306:	9e26      	ldr	r6, [sp, #152]	@ 0x98
 8015308:	2e00      	cmp	r6, #0
 801530a:	bf18      	it	ne
 801530c:	2b00      	cmpne	r3, #0
 801530e:	bf0c      	ite	eq
 8015310:	f04f 0c01 	moveq.w	ip, #1
 8015314:	f04f 0c00 	movne.w	ip, #0
 8015318:	2a00      	cmp	r2, #0
 801531a:	bf08      	it	eq
 801531c:	f04c 0c01 	orreq.w	ip, ip, #1
 8015320:	2900      	cmp	r1, #0
 8015322:	bf08      	it	eq
 8015324:	f04c 0c01 	orreq.w	ip, ip, #1
 8015328:	f1bc 0f00 	cmp.w	ip, #0
 801532c:	d11d      	bne.n	801536a <rclc_service_init+0x6a>
 801532e:	4604      	mov	r4, r0
 8015330:	b1d8      	cbz	r0, 801536a <rclc_service_init+0x6a>
 8015332:	f10d 0910 	add.w	r9, sp, #16
 8015336:	461f      	mov	r7, r3
 8015338:	4690      	mov	r8, r2
 801533a:	460d      	mov	r5, r1
 801533c:	f006 f9ec 	bl	801b718 <rcl_get_zero_initialized_service>
 8015340:	6020      	str	r0, [r4, #0]
 8015342:	4648      	mov	r0, r9
 8015344:	f006 fa80 	bl	801b848 <rcl_service_get_default_options>
 8015348:	4631      	mov	r1, r6
 801534a:	2250      	movs	r2, #80	@ 0x50
 801534c:	4648      	mov	r0, r9
 801534e:	f00d f8ce 	bl	80224ee <memcpy>
 8015352:	463b      	mov	r3, r7
 8015354:	4642      	mov	r2, r8
 8015356:	4629      	mov	r1, r5
 8015358:	4620      	mov	r0, r4
 801535a:	f8cd 9000 	str.w	r9, [sp]
 801535e:	f006 f9e1 	bl	801b724 <rcl_service_init>
 8015362:	b930      	cbnz	r0, 8015372 <rclc_service_init+0x72>
 8015364:	b01f      	add	sp, #124	@ 0x7c
 8015366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801536a:	200b      	movs	r0, #11
 801536c:	b01f      	add	sp, #124	@ 0x7c
 801536e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015372:	9003      	str	r0, [sp, #12]
 8015374:	f000 f8bc 	bl	80154f0 <rcutils_reset_error>
 8015378:	9803      	ldr	r0, [sp, #12]
 801537a:	b01f      	add	sp, #124	@ 0x7c
 801537c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015380 <rclc_subscription_init>:
 8015380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015384:	b0a1      	sub	sp, #132	@ 0x84
 8015386:	9e28      	ldr	r6, [sp, #160]	@ 0xa0
 8015388:	2e00      	cmp	r6, #0
 801538a:	bf18      	it	ne
 801538c:	2b00      	cmpne	r3, #0
 801538e:	bf0c      	ite	eq
 8015390:	f04f 0c01 	moveq.w	ip, #1
 8015394:	f04f 0c00 	movne.w	ip, #0
 8015398:	2a00      	cmp	r2, #0
 801539a:	bf08      	it	eq
 801539c:	f04c 0c01 	orreq.w	ip, ip, #1
 80153a0:	2900      	cmp	r1, #0
 80153a2:	bf08      	it	eq
 80153a4:	f04c 0c01 	orreq.w	ip, ip, #1
 80153a8:	f1bc 0f00 	cmp.w	ip, #0
 80153ac:	d11d      	bne.n	80153ea <rclc_subscription_init+0x6a>
 80153ae:	4604      	mov	r4, r0
 80153b0:	b1d8      	cbz	r0, 80153ea <rclc_subscription_init+0x6a>
 80153b2:	f10d 0910 	add.w	r9, sp, #16
 80153b6:	461f      	mov	r7, r3
 80153b8:	4690      	mov	r8, r2
 80153ba:	460d      	mov	r5, r1
 80153bc:	f006 fad0 	bl	801b960 <rcl_get_zero_initialized_subscription>
 80153c0:	6020      	str	r0, [r4, #0]
 80153c2:	4648      	mov	r0, r9
 80153c4:	f006 fb80 	bl	801bac8 <rcl_subscription_get_default_options>
 80153c8:	4631      	mov	r1, r6
 80153ca:	2250      	movs	r2, #80	@ 0x50
 80153cc:	4648      	mov	r0, r9
 80153ce:	f00d f88e 	bl	80224ee <memcpy>
 80153d2:	463b      	mov	r3, r7
 80153d4:	4642      	mov	r2, r8
 80153d6:	4629      	mov	r1, r5
 80153d8:	4620      	mov	r0, r4
 80153da:	f8cd 9000 	str.w	r9, [sp]
 80153de:	f006 fac5 	bl	801b96c <rcl_subscription_init>
 80153e2:	b930      	cbnz	r0, 80153f2 <rclc_subscription_init+0x72>
 80153e4:	b021      	add	sp, #132	@ 0x84
 80153e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153ea:	200b      	movs	r0, #11
 80153ec:	b021      	add	sp, #132	@ 0x84
 80153ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153f2:	9003      	str	r0, [sp, #12]
 80153f4:	f000 f87c 	bl	80154f0 <rcutils_reset_error>
 80153f8:	9803      	ldr	r0, [sp, #12]
 80153fa:	b021      	add	sp, #132	@ 0x84
 80153fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015400 <rclc_timer_init_default>:
 8015400:	b361      	cbz	r1, 801545c <rclc_timer_init_default+0x5c>
 8015402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015406:	4606      	mov	r6, r0
 8015408:	b08a      	sub	sp, #40	@ 0x28
 801540a:	b318      	cbz	r0, 8015454 <rclc_timer_init_default+0x54>
 801540c:	460d      	mov	r5, r1
 801540e:	4690      	mov	r8, r2
 8015410:	461f      	mov	r7, r3
 8015412:	f006 fdff 	bl	801c014 <rcl_get_zero_initialized_timer>
 8015416:	68ac      	ldr	r4, [r5, #8]
 8015418:	f10d 0c0c 	add.w	ip, sp, #12
 801541c:	6030      	str	r0, [r6, #0]
 801541e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015420:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015424:	6823      	ldr	r3, [r4, #0]
 8015426:	462a      	mov	r2, r5
 8015428:	f105 010c 	add.w	r1, r5, #12
 801542c:	4630      	mov	r0, r6
 801542e:	f8cc 3000 	str.w	r3, [ip]
 8015432:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015434:	e9cd 8700 	strd	r8, r7, [sp]
 8015438:	9302      	str	r3, [sp, #8]
 801543a:	f006 fdf1 	bl	801c020 <rcl_timer_init>
 801543e:	b910      	cbnz	r0, 8015446 <rclc_timer_init_default+0x46>
 8015440:	b00a      	add	sp, #40	@ 0x28
 8015442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015446:	9009      	str	r0, [sp, #36]	@ 0x24
 8015448:	f000 f852 	bl	80154f0 <rcutils_reset_error>
 801544c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801544e:	b00a      	add	sp, #40	@ 0x28
 8015450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015454:	200b      	movs	r0, #11
 8015456:	b00a      	add	sp, #40	@ 0x28
 8015458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801545c:	200b      	movs	r0, #11
 801545e:	4770      	bx	lr

08015460 <__default_zero_allocate>:
 8015460:	f00c ba4e 	b.w	8021900 <calloc>

08015464 <__default_reallocate>:
 8015464:	f00c bbec 	b.w	8021c40 <realloc>

08015468 <__default_deallocate>:
 8015468:	f00c bac8 	b.w	80219fc <free>

0801546c <__default_allocate>:
 801546c:	f00c babe 	b.w	80219ec <malloc>

08015470 <rcutils_get_zero_initialized_allocator>:
 8015470:	b510      	push	{r4, lr}
 8015472:	4c05      	ldr	r4, [pc, #20]	@ (8015488 <rcutils_get_zero_initialized_allocator+0x18>)
 8015474:	4686      	mov	lr, r0
 8015476:	4684      	mov	ip, r0
 8015478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801547a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801547e:	6823      	ldr	r3, [r4, #0]
 8015480:	4670      	mov	r0, lr
 8015482:	f8cc 3000 	str.w	r3, [ip]
 8015486:	bd10      	pop	{r4, pc}
 8015488:	08024988 	.word	0x08024988

0801548c <rcutils_get_default_allocator>:
 801548c:	b510      	push	{r4, lr}
 801548e:	4c05      	ldr	r4, [pc, #20]	@ (80154a4 <rcutils_get_default_allocator+0x18>)
 8015490:	4686      	mov	lr, r0
 8015492:	4684      	mov	ip, r0
 8015494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015496:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801549a:	6823      	ldr	r3, [r4, #0]
 801549c:	4670      	mov	r0, lr
 801549e:	f8cc 3000 	str.w	r3, [ip]
 80154a2:	bd10      	pop	{r4, pc}
 80154a4:	24000c94 	.word	0x24000c94

080154a8 <rcutils_allocator_is_valid>:
 80154a8:	b158      	cbz	r0, 80154c2 <rcutils_allocator_is_valid+0x1a>
 80154aa:	6803      	ldr	r3, [r0, #0]
 80154ac:	b143      	cbz	r3, 80154c0 <rcutils_allocator_is_valid+0x18>
 80154ae:	6843      	ldr	r3, [r0, #4]
 80154b0:	b133      	cbz	r3, 80154c0 <rcutils_allocator_is_valid+0x18>
 80154b2:	68c3      	ldr	r3, [r0, #12]
 80154b4:	b123      	cbz	r3, 80154c0 <rcutils_allocator_is_valid+0x18>
 80154b6:	6880      	ldr	r0, [r0, #8]
 80154b8:	3800      	subs	r0, #0
 80154ba:	bf18      	it	ne
 80154bc:	2001      	movne	r0, #1
 80154be:	4770      	bx	lr
 80154c0:	4618      	mov	r0, r3
 80154c2:	4770      	bx	lr

080154c4 <rcutils_get_error_string>:
 80154c4:	4b06      	ldr	r3, [pc, #24]	@ (80154e0 <rcutils_get_error_string+0x1c>)
 80154c6:	781b      	ldrb	r3, [r3, #0]
 80154c8:	b13b      	cbz	r3, 80154da <rcutils_get_error_string+0x16>
 80154ca:	4b06      	ldr	r3, [pc, #24]	@ (80154e4 <rcutils_get_error_string+0x20>)
 80154cc:	781a      	ldrb	r2, [r3, #0]
 80154ce:	b90a      	cbnz	r2, 80154d4 <rcutils_get_error_string+0x10>
 80154d0:	2201      	movs	r2, #1
 80154d2:	701a      	strb	r2, [r3, #0]
 80154d4:	4b04      	ldr	r3, [pc, #16]	@ (80154e8 <rcutils_get_error_string+0x24>)
 80154d6:	7818      	ldrb	r0, [r3, #0]
 80154d8:	4770      	bx	lr
 80154da:	4b04      	ldr	r3, [pc, #16]	@ (80154ec <rcutils_get_error_string+0x28>)
 80154dc:	7818      	ldrb	r0, [r3, #0]
 80154de:	4770      	bx	lr
 80154e0:	240648f0 	.word	0x240648f0
 80154e4:	24064909 	.word	0x24064909
 80154e8:	24064908 	.word	0x24064908
 80154ec:	08023998 	.word	0x08023998

080154f0 <rcutils_reset_error>:
 80154f0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8015510 <rcutils_reset_error+0x20>
 80154f4:	2300      	movs	r3, #0
 80154f6:	4a08      	ldr	r2, [pc, #32]	@ (8015518 <rcutils_reset_error+0x28>)
 80154f8:	4808      	ldr	r0, [pc, #32]	@ (801551c <rcutils_reset_error+0x2c>)
 80154fa:	8013      	strh	r3, [r2, #0]
 80154fc:	4908      	ldr	r1, [pc, #32]	@ (8015520 <rcutils_reset_error+0x30>)
 80154fe:	7003      	strb	r3, [r0, #0]
 8015500:	700b      	strb	r3, [r1, #0]
 8015502:	ed82 7b02 	vstr	d7, [r2, #8]
 8015506:	4a07      	ldr	r2, [pc, #28]	@ (8015524 <rcutils_reset_error+0x34>)
 8015508:	7013      	strb	r3, [r2, #0]
 801550a:	4770      	bx	lr
 801550c:	f3af 8000 	nop.w
	...
 8015518:	240648f8 	.word	0x240648f8
 801551c:	24064909 	.word	0x24064909
 8015520:	24064908 	.word	0x24064908
 8015524:	240648f0 	.word	0x240648f0

08015528 <rcutils_system_time_now>:
 8015528:	b300      	cbz	r0, 801556c <rcutils_system_time_now+0x44>
 801552a:	b570      	push	{r4, r5, r6, lr}
 801552c:	b084      	sub	sp, #16
 801552e:	4604      	mov	r4, r0
 8015530:	2001      	movs	r0, #1
 8015532:	4669      	mov	r1, sp
 8015534:	f7ec ff48 	bl	80023c8 <clock_gettime>
 8015538:	e9dd 3100 	ldrd	r3, r1, [sp]
 801553c:	2900      	cmp	r1, #0
 801553e:	db12      	blt.n	8015566 <rcutils_system_time_now+0x3e>
 8015540:	ea53 0201 	orrs.w	r2, r3, r1
 8015544:	9d02      	ldr	r5, [sp, #8]
 8015546:	d101      	bne.n	801554c <rcutils_system_time_now+0x24>
 8015548:	2d00      	cmp	r5, #0
 801554a:	db0c      	blt.n	8015566 <rcutils_system_time_now+0x3e>
 801554c:	4e08      	ldr	r6, [pc, #32]	@ (8015570 <rcutils_system_time_now+0x48>)
 801554e:	2000      	movs	r0, #0
 8015550:	fba3 3206 	umull	r3, r2, r3, r6
 8015554:	195b      	adds	r3, r3, r5
 8015556:	fb06 2201 	mla	r2, r6, r1, r2
 801555a:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 801555e:	e9c4 3200 	strd	r3, r2, [r4]
 8015562:	b004      	add	sp, #16
 8015564:	bd70      	pop	{r4, r5, r6, pc}
 8015566:	2002      	movs	r0, #2
 8015568:	b004      	add	sp, #16
 801556a:	bd70      	pop	{r4, r5, r6, pc}
 801556c:	200b      	movs	r0, #11
 801556e:	4770      	bx	lr
 8015570:	3b9aca00 	.word	0x3b9aca00

08015574 <rcutils_steady_time_now>:
 8015574:	b300      	cbz	r0, 80155b8 <rcutils_steady_time_now+0x44>
 8015576:	b570      	push	{r4, r5, r6, lr}
 8015578:	b084      	sub	sp, #16
 801557a:	4604      	mov	r4, r0
 801557c:	2000      	movs	r0, #0
 801557e:	4669      	mov	r1, sp
 8015580:	f7ec ff22 	bl	80023c8 <clock_gettime>
 8015584:	e9dd 3100 	ldrd	r3, r1, [sp]
 8015588:	2900      	cmp	r1, #0
 801558a:	db12      	blt.n	80155b2 <rcutils_steady_time_now+0x3e>
 801558c:	ea53 0201 	orrs.w	r2, r3, r1
 8015590:	9d02      	ldr	r5, [sp, #8]
 8015592:	d101      	bne.n	8015598 <rcutils_steady_time_now+0x24>
 8015594:	2d00      	cmp	r5, #0
 8015596:	db0c      	blt.n	80155b2 <rcutils_steady_time_now+0x3e>
 8015598:	4e08      	ldr	r6, [pc, #32]	@ (80155bc <rcutils_steady_time_now+0x48>)
 801559a:	2000      	movs	r0, #0
 801559c:	fba3 3206 	umull	r3, r2, r3, r6
 80155a0:	195b      	adds	r3, r3, r5
 80155a2:	fb06 2201 	mla	r2, r6, r1, r2
 80155a6:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80155aa:	e9c4 3200 	strd	r3, r2, [r4]
 80155ae:	b004      	add	sp, #16
 80155b0:	bd70      	pop	{r4, r5, r6, pc}
 80155b2:	2002      	movs	r0, #2
 80155b4:	b004      	add	sp, #16
 80155b6:	bd70      	pop	{r4, r5, r6, pc}
 80155b8:	200b      	movs	r0, #11
 80155ba:	4770      	bx	lr
 80155bc:	3b9aca00 	.word	0x3b9aca00

080155c0 <rmw_get_default_publisher_options>:
 80155c0:	2200      	movs	r2, #0
 80155c2:	6002      	str	r2, [r0, #0]
 80155c4:	7102      	strb	r2, [r0, #4]
 80155c6:	4770      	bx	lr

080155c8 <rmw_uros_set_custom_transport>:
 80155c8:	b470      	push	{r4, r5, r6}
 80155ca:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 80155ce:	b162      	cbz	r2, 80155ea <rmw_uros_set_custom_transport+0x22>
 80155d0:	b15b      	cbz	r3, 80155ea <rmw_uros_set_custom_transport+0x22>
 80155d2:	b155      	cbz	r5, 80155ea <rmw_uros_set_custom_transport+0x22>
 80155d4:	b14e      	cbz	r6, 80155ea <rmw_uros_set_custom_transport+0x22>
 80155d6:	4c06      	ldr	r4, [pc, #24]	@ (80155f0 <rmw_uros_set_custom_transport+0x28>)
 80155d8:	7020      	strb	r0, [r4, #0]
 80155da:	2000      	movs	r0, #0
 80155dc:	6166      	str	r6, [r4, #20]
 80155de:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80155e2:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80155e6:	bc70      	pop	{r4, r5, r6}
 80155e8:	4770      	bx	lr
 80155ea:	200b      	movs	r0, #11
 80155ec:	bc70      	pop	{r4, r5, r6}
 80155ee:	4770      	bx	lr
 80155f0:	2406490c 	.word	0x2406490c

080155f4 <rmw_uros_ping_agent>:
 80155f4:	4b1f      	ldr	r3, [pc, #124]	@ (8015674 <rmw_uros_ping_agent+0x80>)
 80155f6:	7b1a      	ldrb	r2, [r3, #12]
 80155f8:	b570      	push	{r4, r5, r6, lr}
 80155fa:	4605      	mov	r5, r0
 80155fc:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8015600:	460e      	mov	r6, r1
 8015602:	b192      	cbz	r2, 801562a <rmw_uros_ping_agent+0x36>
 8015604:	681c      	ldr	r4, [r3, #0]
 8015606:	b184      	cbz	r4, 801562a <rmw_uros_ping_agent+0x36>
 8015608:	68a0      	ldr	r0, [r4, #8]
 801560a:	4632      	mov	r2, r6
 801560c:	4629      	mov	r1, r5
 801560e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015612:	f001 ff0f 	bl	8017434 <uxr_ping_agent_session>
 8015616:	6864      	ldr	r4, [r4, #4]
 8015618:	f080 0301 	eor.w	r3, r0, #1
 801561c:	b2d8      	uxtb	r0, r3
 801561e:	b10c      	cbz	r4, 8015624 <rmw_uros_ping_agent+0x30>
 8015620:	2800      	cmp	r0, #0
 8015622:	d1f1      	bne.n	8015608 <rmw_uros_ping_agent+0x14>
 8015624:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8015628:	bd70      	pop	{r4, r5, r6, pc}
 801562a:	4b13      	ldr	r3, [pc, #76]	@ (8015678 <rmw_uros_ping_agent+0x84>)
 801562c:	2100      	movs	r1, #0
 801562e:	781a      	ldrb	r2, [r3, #0]
 8015630:	6918      	ldr	r0, [r3, #16]
 8015632:	f88d 2200 	strb.w	r2, [sp, #512]	@ 0x200
 8015636:	685a      	ldr	r2, [r3, #4]
 8015638:	909c      	str	r0, [sp, #624]	@ 0x270
 801563a:	92a3      	str	r2, [sp, #652]	@ 0x28c
 801563c:	6958      	ldr	r0, [r3, #20]
 801563e:	68da      	ldr	r2, [r3, #12]
 8015640:	689b      	ldr	r3, [r3, #8]
 8015642:	929b      	str	r2, [sp, #620]	@ 0x26c
 8015644:	466a      	mov	r2, sp
 8015646:	909d      	str	r0, [sp, #628]	@ 0x274
 8015648:	4608      	mov	r0, r1
 801564a:	939a      	str	r3, [sp, #616]	@ 0x268
 801564c:	f000 f9c6 	bl	80159dc <rmw_uxrce_transport_init>
 8015650:	2800      	cmp	r0, #0
 8015652:	d1e7      	bne.n	8015624 <rmw_uros_ping_agent+0x30>
 8015654:	4632      	mov	r2, r6
 8015656:	4629      	mov	r1, r5
 8015658:	a89e      	add	r0, sp, #632	@ 0x278
 801565a:	f001 ff37 	bl	80174cc <uxr_ping_agent_attempts>
 801565e:	4604      	mov	r4, r0
 8015660:	4668      	mov	r0, sp
 8015662:	f001 feb3 	bl	80173cc <uxr_close_custom_transport>
 8015666:	f084 0301 	eor.w	r3, r4, #1
 801566a:	b2d8      	uxtb	r0, r3
 801566c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8015670:	bd70      	pop	{r4, r5, r6, pc}
 8015672:	bf00      	nop
 8015674:	24069224 	.word	0x24069224
 8015678:	2406490c 	.word	0x2406490c

0801567c <flush_session>:
 801567c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 801567e:	f002 bcb7 	b.w	8017ff0 <uxr_run_session_until_confirm_delivery>
 8015682:	bf00      	nop

08015684 <rmw_publish>:
 8015684:	2800      	cmp	r0, #0
 8015686:	d053      	beq.n	8015730 <rmw_publish+0xac>
 8015688:	b570      	push	{r4, r5, r6, lr}
 801568a:	460d      	mov	r5, r1
 801568c:	b08e      	sub	sp, #56	@ 0x38
 801568e:	2900      	cmp	r1, #0
 8015690:	d04b      	beq.n	801572a <rmw_publish+0xa6>
 8015692:	4604      	mov	r4, r0
 8015694:	6800      	ldr	r0, [r0, #0]
 8015696:	f000 fdcf 	bl	8016238 <is_uxrce_rmw_identifier_valid>
 801569a:	2800      	cmp	r0, #0
 801569c:	d045      	beq.n	801572a <rmw_publish+0xa6>
 801569e:	6866      	ldr	r6, [r4, #4]
 80156a0:	2e00      	cmp	r6, #0
 80156a2:	d042      	beq.n	801572a <rmw_publish+0xa6>
 80156a4:	69b4      	ldr	r4, [r6, #24]
 80156a6:	4628      	mov	r0, r5
 80156a8:	6923      	ldr	r3, [r4, #16]
 80156aa:	4798      	blx	r3
 80156ac:	69f3      	ldr	r3, [r6, #28]
 80156ae:	9005      	str	r0, [sp, #20]
 80156b0:	b113      	cbz	r3, 80156b8 <rmw_publish+0x34>
 80156b2:	a805      	add	r0, sp, #20
 80156b4:	4798      	blx	r3
 80156b6:	9805      	ldr	r0, [sp, #20]
 80156b8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80156bc:	691b      	ldr	r3, [r3, #16]
 80156be:	9000      	str	r0, [sp, #0]
 80156c0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80156c4:	6972      	ldr	r2, [r6, #20]
 80156c6:	ab06      	add	r3, sp, #24
 80156c8:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 80156ca:	f003 ff8b 	bl	80195e4 <uxr_prepare_output_stream>
 80156ce:	b1d8      	cbz	r0, 8015708 <rmw_publish+0x84>
 80156d0:	68a3      	ldr	r3, [r4, #8]
 80156d2:	a906      	add	r1, sp, #24
 80156d4:	4628      	mov	r0, r5
 80156d6:	4798      	blx	r3
 80156d8:	6a33      	ldr	r3, [r6, #32]
 80156da:	4604      	mov	r4, r0
 80156dc:	b10b      	cbz	r3, 80156e2 <rmw_publish+0x5e>
 80156de:	a806      	add	r0, sp, #24
 80156e0:	4798      	blx	r3
 80156e2:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 80156e6:	2b01      	cmp	r3, #1
 80156e8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80156ec:	d022      	beq.n	8015734 <rmw_publish+0xb0>
 80156ee:	6918      	ldr	r0, [r3, #16]
 80156f0:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 80156f2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80156f6:	f002 fc7b 	bl	8017ff0 <uxr_run_session_until_confirm_delivery>
 80156fa:	4020      	ands	r0, r4
 80156fc:	b2c4      	uxtb	r4, r0
 80156fe:	f084 0001 	eor.w	r0, r4, #1
 8015702:	b2c0      	uxtb	r0, r0
 8015704:	b00e      	add	sp, #56	@ 0x38
 8015706:	bd70      	pop	{r4, r5, r6, pc}
 8015708:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801570c:	6918      	ldr	r0, [r3, #16]
 801570e:	9b05      	ldr	r3, [sp, #20]
 8015710:	9602      	str	r6, [sp, #8]
 8015712:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015716:	9300      	str	r3, [sp, #0]
 8015718:	4b09      	ldr	r3, [pc, #36]	@ (8015740 <rmw_publish+0xbc>)
 801571a:	9301      	str	r3, [sp, #4]
 801571c:	ab06      	add	r3, sp, #24
 801571e:	6972      	ldr	r2, [r6, #20]
 8015720:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8015722:	f003 ff8f 	bl	8019644 <uxr_prepare_output_stream_fragmented>
 8015726:	2800      	cmp	r0, #0
 8015728:	d1d2      	bne.n	80156d0 <rmw_publish+0x4c>
 801572a:	2001      	movs	r0, #1
 801572c:	b00e      	add	sp, #56	@ 0x38
 801572e:	bd70      	pop	{r4, r5, r6, pc}
 8015730:	2001      	movs	r0, #1
 8015732:	4770      	bx	lr
 8015734:	6918      	ldr	r0, [r3, #16]
 8015736:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801573a:	f002 f89f 	bl	801787c <uxr_flash_output_streams>
 801573e:	e7de      	b.n	80156fe <rmw_publish+0x7a>
 8015740:	0801567d 	.word	0x0801567d

08015744 <rmw_create_publisher>:
 8015744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015748:	b087      	sub	sp, #28
 801574a:	2800      	cmp	r0, #0
 801574c:	f000 80d2 	beq.w	80158f4 <rmw_create_publisher+0x1b0>
 8015750:	460e      	mov	r6, r1
 8015752:	2900      	cmp	r1, #0
 8015754:	f000 80ce 	beq.w	80158f4 <rmw_create_publisher+0x1b0>
 8015758:	4604      	mov	r4, r0
 801575a:	6800      	ldr	r0, [r0, #0]
 801575c:	4615      	mov	r5, r2
 801575e:	461f      	mov	r7, r3
 8015760:	f000 fd6a 	bl	8016238 <is_uxrce_rmw_identifier_valid>
 8015764:	f080 0001 	eor.w	r0, r0, #1
 8015768:	b2c0      	uxtb	r0, r0
 801576a:	2800      	cmp	r0, #0
 801576c:	f040 80c2 	bne.w	80158f4 <rmw_create_publisher+0x1b0>
 8015770:	2d00      	cmp	r5, #0
 8015772:	f000 80bf 	beq.w	80158f4 <rmw_create_publisher+0x1b0>
 8015776:	782b      	ldrb	r3, [r5, #0]
 8015778:	2b00      	cmp	r3, #0
 801577a:	f000 80bb 	beq.w	80158f4 <rmw_create_publisher+0x1b0>
 801577e:	2f00      	cmp	r7, #0
 8015780:	f000 80b8 	beq.w	80158f4 <rmw_create_publisher+0x1b0>
 8015784:	485e      	ldr	r0, [pc, #376]	@ (8015900 <rmw_create_publisher+0x1bc>)
 8015786:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801578a:	f008 ff73 	bl	801e674 <get_memory>
 801578e:	2800      	cmp	r0, #0
 8015790:	f000 80b0 	beq.w	80158f4 <rmw_create_publisher+0x1b0>
 8015794:	6884      	ldr	r4, [r0, #8]
 8015796:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 801579a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 801579e:	f008 ffd1 	bl	801e744 <rmw_get_implementation_identifier>
 80157a2:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 80157a6:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 80157aa:	4628      	mov	r0, r5
 80157ac:	f7ea fda2 	bl	80002f4 <strlen>
 80157b0:	3001      	adds	r0, #1
 80157b2:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 80157b6:	283c      	cmp	r0, #60	@ 0x3c
 80157b8:	f200 808f 	bhi.w	80158da <rmw_create_publisher+0x196>
 80157bc:	462b      	mov	r3, r5
 80157be:	4a51      	ldr	r2, [pc, #324]	@ (8015904 <rmw_create_publisher+0x1c0>)
 80157c0:	213c      	movs	r1, #60	@ 0x3c
 80157c2:	4650      	mov	r0, sl
 80157c4:	f00c fc06 	bl	8021fd4 <sniprintf>
 80157c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80157cc:	4639      	mov	r1, r7
 80157ce:	2250      	movs	r2, #80	@ 0x50
 80157d0:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80157d2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80157d6:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 80157da:	f00c fe88 	bl	80224ee <memcpy>
 80157de:	7a3b      	ldrb	r3, [r7, #8]
 80157e0:	4630      	mov	r0, r6
 80157e2:	4949      	ldr	r1, [pc, #292]	@ (8015908 <rmw_create_publisher+0x1c4>)
 80157e4:	2b02      	cmp	r3, #2
 80157e6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80157ea:	bf0c      	ite	eq
 80157ec:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 80157f0:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 80157f4:	67a3      	str	r3, [r4, #120]	@ 0x78
 80157f6:	2300      	movs	r3, #0
 80157f8:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80157fc:	f000 fd98 	bl	8016330 <get_message_typesupport_handle>
 8015800:	2800      	cmp	r0, #0
 8015802:	d06a      	beq.n	80158da <rmw_create_publisher+0x196>
 8015804:	6842      	ldr	r2, [r0, #4]
 8015806:	61a2      	str	r2, [r4, #24]
 8015808:	2a00      	cmp	r2, #0
 801580a:	d066      	beq.n	80158da <rmw_create_publisher+0x196>
 801580c:	4629      	mov	r1, r5
 801580e:	463b      	mov	r3, r7
 8015810:	4648      	mov	r0, r9
 8015812:	f009 fa03 	bl	801ec1c <create_topic>
 8015816:	6260      	str	r0, [r4, #36]	@ 0x24
 8015818:	2800      	cmp	r0, #0
 801581a:	d062      	beq.n	80158e2 <rmw_create_publisher+0x19e>
 801581c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015820:	2103      	movs	r1, #3
 8015822:	2506      	movs	r5, #6
 8015824:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015828:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 801582c:	1c42      	adds	r2, r0, #1
 801582e:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 8015832:	f001 fdcf 	bl	80173d4 <uxr_object_id>
 8015836:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 801583a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801583e:	6120      	str	r0, [r4, #16]
 8015840:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 8015844:	6910      	ldr	r0, [r2, #16]
 8015846:	9500      	str	r5, [sp, #0]
 8015848:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801584c:	6819      	ldr	r1, [r3, #0]
 801584e:	6922      	ldr	r2, [r4, #16]
 8015850:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015854:	f001 fb78 	bl	8016f48 <uxr_buffer_create_publisher_bin>
 8015858:	4602      	mov	r2, r0
 801585a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801585e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8015862:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015866:	f000 fbd5 	bl	8016014 <run_xrce_session>
 801586a:	b3b0      	cbz	r0, 80158da <rmw_create_publisher+0x196>
 801586c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015870:	2105      	movs	r1, #5
 8015872:	f10d 0a10 	add.w	sl, sp, #16
 8015876:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801587a:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 801587e:	1c42      	adds	r2, r0, #1
 8015880:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 8015884:	f001 fda6 	bl	80173d4 <uxr_object_id>
 8015888:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801588c:	4639      	mov	r1, r7
 801588e:	6160      	str	r0, [r4, #20]
 8015890:	691e      	ldr	r6, [r3, #16]
 8015892:	4650      	mov	r0, sl
 8015894:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015898:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 801589c:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 80158a0:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 80158a4:	f000 fbd2 	bl	801604c <convert_qos_profile>
 80158a8:	9503      	str	r5, [sp, #12]
 80158aa:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80158ae:	9001      	str	r0, [sp, #4]
 80158b0:	4630      	mov	r0, r6
 80158b2:	f8ad 1008 	strh.w	r1, [sp, #8]
 80158b6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80158ba:	9300      	str	r3, [sp, #0]
 80158bc:	6839      	ldr	r1, [r7, #0]
 80158be:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80158c2:	f001 fba1 	bl	8017008 <uxr_buffer_create_datawriter_bin>
 80158c6:	4602      	mov	r2, r0
 80158c8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80158cc:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80158d0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80158d4:	f000 fb9e 	bl	8016014 <run_xrce_session>
 80158d8:	b970      	cbnz	r0, 80158f8 <rmw_create_publisher+0x1b4>
 80158da:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80158dc:	b108      	cbz	r0, 80158e2 <rmw_create_publisher+0x19e>
 80158de:	f000 fa8b 	bl	8015df8 <rmw_uxrce_fini_topic_memory>
 80158e2:	4640      	mov	r0, r8
 80158e4:	f04f 0800 	mov.w	r8, #0
 80158e8:	f000 fa2e 	bl	8015d48 <rmw_uxrce_fini_publisher_memory>
 80158ec:	4640      	mov	r0, r8
 80158ee:	b007      	add	sp, #28
 80158f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158f4:	f04f 0800 	mov.w	r8, #0
 80158f8:	4640      	mov	r0, r8
 80158fa:	b007      	add	sp, #28
 80158fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015900:	24069204 	.word	0x24069204
 8015904:	080249ac 	.word	0x080249ac
 8015908:	08023678 	.word	0x08023678

0801590c <rmw_publisher_get_actual_qos>:
 801590c:	b178      	cbz	r0, 801592e <rmw_publisher_get_actual_qos+0x22>
 801590e:	b510      	push	{r4, lr}
 8015910:	fab1 f481 	clz	r4, r1
 8015914:	0964      	lsrs	r4, r4, #5
 8015916:	b141      	cbz	r1, 801592a <rmw_publisher_get_actual_qos+0x1e>
 8015918:	6843      	ldr	r3, [r0, #4]
 801591a:	2250      	movs	r2, #80	@ 0x50
 801591c:	4608      	mov	r0, r1
 801591e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8015922:	f00c fde4 	bl	80224ee <memcpy>
 8015926:	4620      	mov	r0, r4
 8015928:	bd10      	pop	{r4, pc}
 801592a:	200b      	movs	r0, #11
 801592c:	bd10      	pop	{r4, pc}
 801592e:	200b      	movs	r0, #11
 8015930:	4770      	bx	lr
 8015932:	bf00      	nop

08015934 <rmw_destroy_publisher>:
 8015934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015938:	b128      	cbz	r0, 8015946 <rmw_destroy_publisher+0x12>
 801593a:	4604      	mov	r4, r0
 801593c:	6800      	ldr	r0, [r0, #0]
 801593e:	460d      	mov	r5, r1
 8015940:	f000 fc7a 	bl	8016238 <is_uxrce_rmw_identifier_valid>
 8015944:	b918      	cbnz	r0, 801594e <rmw_destroy_publisher+0x1a>
 8015946:	2401      	movs	r4, #1
 8015948:	4620      	mov	r0, r4
 801594a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801594e:	6863      	ldr	r3, [r4, #4]
 8015950:	2b00      	cmp	r3, #0
 8015952:	d0f8      	beq.n	8015946 <rmw_destroy_publisher+0x12>
 8015954:	fab5 f485 	clz	r4, r5
 8015958:	0964      	lsrs	r4, r4, #5
 801595a:	2d00      	cmp	r5, #0
 801595c:	d0f3      	beq.n	8015946 <rmw_destroy_publisher+0x12>
 801595e:	6828      	ldr	r0, [r5, #0]
 8015960:	f000 fc6a 	bl	8016238 <is_uxrce_rmw_identifier_valid>
 8015964:	2800      	cmp	r0, #0
 8015966:	d0ee      	beq.n	8015946 <rmw_destroy_publisher+0x12>
 8015968:	686e      	ldr	r6, [r5, #4]
 801596a:	2e00      	cmp	r6, #0
 801596c:	d0eb      	beq.n	8015946 <rmw_destroy_publisher+0x12>
 801596e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8015970:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 8015974:	f009 f9a2 	bl	801ecbc <destroy_topic>
 8015978:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801597c:	6972      	ldr	r2, [r6, #20]
 801597e:	6918      	ldr	r0, [r3, #16]
 8015980:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015984:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015988:	6819      	ldr	r1, [r3, #0]
 801598a:	f001 fa29 	bl	8016de0 <uxr_buffer_delete_entity>
 801598e:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8015992:	4680      	mov	r8, r0
 8015994:	6932      	ldr	r2, [r6, #16]
 8015996:	6918      	ldr	r0, [r3, #16]
 8015998:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801599c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80159a0:	6819      	ldr	r1, [r3, #0]
 80159a2:	f001 fa1d 	bl	8016de0 <uxr_buffer_delete_entity>
 80159a6:	4606      	mov	r6, r0
 80159a8:	6938      	ldr	r0, [r7, #16]
 80159aa:	4642      	mov	r2, r8
 80159ac:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80159b0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80159b4:	f000 fb2e 	bl	8016014 <run_xrce_session>
 80159b8:	693f      	ldr	r7, [r7, #16]
 80159ba:	4632      	mov	r2, r6
 80159bc:	4606      	mov	r6, r0
 80159be:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80159c2:	4638      	mov	r0, r7
 80159c4:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 80159c8:	f000 fb24 	bl	8016014 <run_xrce_session>
 80159cc:	b126      	cbz	r6, 80159d8 <rmw_destroy_publisher+0xa4>
 80159ce:	b118      	cbz	r0, 80159d8 <rmw_destroy_publisher+0xa4>
 80159d0:	4628      	mov	r0, r5
 80159d2:	f000 f9b9 	bl	8015d48 <rmw_uxrce_fini_publisher_memory>
 80159d6:	e7b7      	b.n	8015948 <rmw_destroy_publisher+0x14>
 80159d8:	2402      	movs	r4, #2
 80159da:	e7f9      	b.n	80159d0 <rmw_destroy_publisher+0x9c>

080159dc <rmw_uxrce_transport_init>:
 80159dc:	b508      	push	{r3, lr}
 80159de:	b108      	cbz	r0, 80159e4 <rmw_uxrce_transport_init+0x8>
 80159e0:	f100 0210 	add.w	r2, r0, #16
 80159e4:	b139      	cbz	r1, 80159f6 <rmw_uxrce_transport_init+0x1a>
 80159e6:	6949      	ldr	r1, [r1, #20]
 80159e8:	4610      	mov	r0, r2
 80159ea:	f001 fcbb 	bl	8017364 <uxr_init_custom_transport>
 80159ee:	f080 0001 	eor.w	r0, r0, #1
 80159f2:	b2c0      	uxtb	r0, r0
 80159f4:	bd08      	pop	{r3, pc}
 80159f6:	4b04      	ldr	r3, [pc, #16]	@ (8015a08 <rmw_uxrce_transport_init+0x2c>)
 80159f8:	4610      	mov	r0, r2
 80159fa:	6859      	ldr	r1, [r3, #4]
 80159fc:	f001 fcb2 	bl	8017364 <uxr_init_custom_transport>
 8015a00:	f080 0001 	eor.w	r0, r0, #1
 8015a04:	b2c0      	uxtb	r0, r0
 8015a06:	bd08      	pop	{r3, pc}
 8015a08:	2406490c 	.word	0x2406490c

08015a0c <rmw_uros_epoch_nanos>:
 8015a0c:	4b05      	ldr	r3, [pc, #20]	@ (8015a24 <rmw_uros_epoch_nanos+0x18>)
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	b123      	cbz	r3, 8015a1c <rmw_uros_epoch_nanos+0x10>
 8015a12:	6898      	ldr	r0, [r3, #8]
 8015a14:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015a18:	f001 bf26 	b.w	8017868 <uxr_epoch_nanos>
 8015a1c:	2000      	movs	r0, #0
 8015a1e:	2100      	movs	r1, #0
 8015a20:	4770      	bx	lr
 8015a22:	bf00      	nop
 8015a24:	24069224 	.word	0x24069224

08015a28 <rmw_uros_sync_session>:
 8015a28:	b508      	push	{r3, lr}
 8015a2a:	4b07      	ldr	r3, [pc, #28]	@ (8015a48 <rmw_uros_sync_session+0x20>)
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	b14b      	cbz	r3, 8015a44 <rmw_uros_sync_session+0x1c>
 8015a30:	4601      	mov	r1, r0
 8015a32:	6898      	ldr	r0, [r3, #8]
 8015a34:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015a38:	f002 fb56 	bl	80180e8 <uxr_sync_session>
 8015a3c:	f080 0001 	eor.w	r0, r0, #1
 8015a40:	b2c0      	uxtb	r0, r0
 8015a42:	bd08      	pop	{r3, pc}
 8015a44:	2001      	movs	r0, #1
 8015a46:	bd08      	pop	{r3, pc}
 8015a48:	24069224 	.word	0x24069224

08015a4c <rmw_uxrce_init_service_memory>:
 8015a4c:	b1e2      	cbz	r2, 8015a88 <rmw_uxrce_init_service_memory+0x3c>
 8015a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a52:	7b05      	ldrb	r5, [r0, #12]
 8015a54:	4606      	mov	r6, r0
 8015a56:	b9ad      	cbnz	r5, 8015a84 <rmw_uxrce_init_service_memory+0x38>
 8015a58:	23c8      	movs	r3, #200	@ 0xc8
 8015a5a:	4617      	mov	r7, r2
 8015a5c:	460c      	mov	r4, r1
 8015a5e:	46a8      	mov	r8, r5
 8015a60:	6083      	str	r3, [r0, #8]
 8015a62:	f240 1301 	movw	r3, #257	@ 0x101
 8015a66:	e9c0 5500 	strd	r5, r5, [r0]
 8015a6a:	8183      	strh	r3, [r0, #12]
 8015a6c:	3501      	adds	r5, #1
 8015a6e:	4621      	mov	r1, r4
 8015a70:	4630      	mov	r0, r6
 8015a72:	f008 fe0f 	bl	801e694 <put_memory>
 8015a76:	42af      	cmp	r7, r5
 8015a78:	60a4      	str	r4, [r4, #8]
 8015a7a:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8015a7e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8015a82:	d1f3      	bne.n	8015a6c <rmw_uxrce_init_service_memory+0x20>
 8015a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a88:	4770      	bx	lr
 8015a8a:	bf00      	nop

08015a8c <rmw_uxrce_init_client_memory>:
 8015a8c:	b1e2      	cbz	r2, 8015ac8 <rmw_uxrce_init_client_memory+0x3c>
 8015a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a92:	7b05      	ldrb	r5, [r0, #12]
 8015a94:	4606      	mov	r6, r0
 8015a96:	b9ad      	cbnz	r5, 8015ac4 <rmw_uxrce_init_client_memory+0x38>
 8015a98:	23c8      	movs	r3, #200	@ 0xc8
 8015a9a:	4617      	mov	r7, r2
 8015a9c:	460c      	mov	r4, r1
 8015a9e:	46a8      	mov	r8, r5
 8015aa0:	6083      	str	r3, [r0, #8]
 8015aa2:	f240 1301 	movw	r3, #257	@ 0x101
 8015aa6:	e9c0 5500 	strd	r5, r5, [r0]
 8015aaa:	8183      	strh	r3, [r0, #12]
 8015aac:	3501      	adds	r5, #1
 8015aae:	4621      	mov	r1, r4
 8015ab0:	4630      	mov	r0, r6
 8015ab2:	f008 fdef 	bl	801e694 <put_memory>
 8015ab6:	42af      	cmp	r7, r5
 8015ab8:	60a4      	str	r4, [r4, #8]
 8015aba:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8015abe:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8015ac2:	d1f3      	bne.n	8015aac <rmw_uxrce_init_client_memory+0x20>
 8015ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ac8:	4770      	bx	lr
 8015aca:	bf00      	nop

08015acc <rmw_uxrce_init_publisher_memory>:
 8015acc:	b1e2      	cbz	r2, 8015b08 <rmw_uxrce_init_publisher_memory+0x3c>
 8015ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ad2:	7b05      	ldrb	r5, [r0, #12]
 8015ad4:	4606      	mov	r6, r0
 8015ad6:	b9ad      	cbnz	r5, 8015b04 <rmw_uxrce_init_publisher_memory+0x38>
 8015ad8:	23d8      	movs	r3, #216	@ 0xd8
 8015ada:	4617      	mov	r7, r2
 8015adc:	460c      	mov	r4, r1
 8015ade:	46a8      	mov	r8, r5
 8015ae0:	6083      	str	r3, [r0, #8]
 8015ae2:	f240 1301 	movw	r3, #257	@ 0x101
 8015ae6:	e9c0 5500 	strd	r5, r5, [r0]
 8015aea:	8183      	strh	r3, [r0, #12]
 8015aec:	3501      	adds	r5, #1
 8015aee:	4621      	mov	r1, r4
 8015af0:	4630      	mov	r0, r6
 8015af2:	f008 fdcf 	bl	801e694 <put_memory>
 8015af6:	42af      	cmp	r7, r5
 8015af8:	60a4      	str	r4, [r4, #8]
 8015afa:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8015afe:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8015b02:	d1f3      	bne.n	8015aec <rmw_uxrce_init_publisher_memory+0x20>
 8015b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b08:	4770      	bx	lr
 8015b0a:	bf00      	nop

08015b0c <rmw_uxrce_init_subscription_memory>:
 8015b0c:	b1e2      	cbz	r2, 8015b48 <rmw_uxrce_init_subscription_memory+0x3c>
 8015b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b12:	7b05      	ldrb	r5, [r0, #12]
 8015b14:	4606      	mov	r6, r0
 8015b16:	b9ad      	cbnz	r5, 8015b44 <rmw_uxrce_init_subscription_memory+0x38>
 8015b18:	23d8      	movs	r3, #216	@ 0xd8
 8015b1a:	4617      	mov	r7, r2
 8015b1c:	460c      	mov	r4, r1
 8015b1e:	46a8      	mov	r8, r5
 8015b20:	6083      	str	r3, [r0, #8]
 8015b22:	f240 1301 	movw	r3, #257	@ 0x101
 8015b26:	e9c0 5500 	strd	r5, r5, [r0]
 8015b2a:	8183      	strh	r3, [r0, #12]
 8015b2c:	3501      	adds	r5, #1
 8015b2e:	4621      	mov	r1, r4
 8015b30:	4630      	mov	r0, r6
 8015b32:	f008 fdaf 	bl	801e694 <put_memory>
 8015b36:	42af      	cmp	r7, r5
 8015b38:	60a4      	str	r4, [r4, #8]
 8015b3a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8015b3e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8015b42:	d1f3      	bne.n	8015b2c <rmw_uxrce_init_subscription_memory+0x20>
 8015b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b48:	4770      	bx	lr
 8015b4a:	bf00      	nop

08015b4c <rmw_uxrce_init_node_memory>:
 8015b4c:	b1e2      	cbz	r2, 8015b88 <rmw_uxrce_init_node_memory+0x3c>
 8015b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b52:	7b05      	ldrb	r5, [r0, #12]
 8015b54:	4606      	mov	r6, r0
 8015b56:	b9ad      	cbnz	r5, 8015b84 <rmw_uxrce_init_node_memory+0x38>
 8015b58:	23a4      	movs	r3, #164	@ 0xa4
 8015b5a:	4617      	mov	r7, r2
 8015b5c:	460c      	mov	r4, r1
 8015b5e:	46a8      	mov	r8, r5
 8015b60:	6083      	str	r3, [r0, #8]
 8015b62:	f240 1301 	movw	r3, #257	@ 0x101
 8015b66:	e9c0 5500 	strd	r5, r5, [r0]
 8015b6a:	8183      	strh	r3, [r0, #12]
 8015b6c:	3501      	adds	r5, #1
 8015b6e:	4621      	mov	r1, r4
 8015b70:	4630      	mov	r0, r6
 8015b72:	f008 fd8f 	bl	801e694 <put_memory>
 8015b76:	42af      	cmp	r7, r5
 8015b78:	60a4      	str	r4, [r4, #8]
 8015b7a:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8015b7e:	f804 8c98 	strb.w	r8, [r4, #-152]
 8015b82:	d1f3      	bne.n	8015b6c <rmw_uxrce_init_node_memory+0x20>
 8015b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b88:	4770      	bx	lr
 8015b8a:	bf00      	nop

08015b8c <rmw_uxrce_init_session_memory>:
 8015b8c:	b1ea      	cbz	r2, 8015bca <rmw_uxrce_init_session_memory+0x3e>
 8015b8e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b92:	7b05      	ldrb	r5, [r0, #12]
 8015b94:	4606      	mov	r6, r0
 8015b96:	b9b5      	cbnz	r5, 8015bc6 <rmw_uxrce_init_session_memory+0x3a>
 8015b98:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8015b9c:	f240 1301 	movw	r3, #257	@ 0x101
 8015ba0:	4617      	mov	r7, r2
 8015ba2:	460c      	mov	r4, r1
 8015ba4:	46a9      	mov	r9, r5
 8015ba6:	f8c0 8008 	str.w	r8, [r0, #8]
 8015baa:	8183      	strh	r3, [r0, #12]
 8015bac:	e9c0 5500 	strd	r5, r5, [r0]
 8015bb0:	3501      	adds	r5, #1
 8015bb2:	4621      	mov	r1, r4
 8015bb4:	4630      	mov	r0, r6
 8015bb6:	f008 fd6d 	bl	801e694 <put_memory>
 8015bba:	42af      	cmp	r7, r5
 8015bbc:	60a4      	str	r4, [r4, #8]
 8015bbe:	f884 900c 	strb.w	r9, [r4, #12]
 8015bc2:	4444      	add	r4, r8
 8015bc4:	d1f4      	bne.n	8015bb0 <rmw_uxrce_init_session_memory+0x24>
 8015bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015bca:	4770      	bx	lr

08015bcc <rmw_uxrce_init_topic_memory>:
 8015bcc:	b1e2      	cbz	r2, 8015c08 <rmw_uxrce_init_topic_memory+0x3c>
 8015bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bd2:	7b05      	ldrb	r5, [r0, #12]
 8015bd4:	4606      	mov	r6, r0
 8015bd6:	b9ad      	cbnz	r5, 8015c04 <rmw_uxrce_init_topic_memory+0x38>
 8015bd8:	231c      	movs	r3, #28
 8015bda:	4617      	mov	r7, r2
 8015bdc:	460c      	mov	r4, r1
 8015bde:	46a8      	mov	r8, r5
 8015be0:	6083      	str	r3, [r0, #8]
 8015be2:	f240 1301 	movw	r3, #257	@ 0x101
 8015be6:	e9c0 5500 	strd	r5, r5, [r0]
 8015bea:	8183      	strh	r3, [r0, #12]
 8015bec:	3501      	adds	r5, #1
 8015bee:	4621      	mov	r1, r4
 8015bf0:	4630      	mov	r0, r6
 8015bf2:	f008 fd4f 	bl	801e694 <put_memory>
 8015bf6:	42af      	cmp	r7, r5
 8015bf8:	60a4      	str	r4, [r4, #8]
 8015bfa:	f104 041c 	add.w	r4, r4, #28
 8015bfe:	f804 8c10 	strb.w	r8, [r4, #-16]
 8015c02:	d1f3      	bne.n	8015bec <rmw_uxrce_init_topic_memory+0x20>
 8015c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c08:	4770      	bx	lr
 8015c0a:	bf00      	nop

08015c0c <rmw_uxrce_init_static_input_buffer_memory>:
 8015c0c:	b1ea      	cbz	r2, 8015c4a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8015c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c12:	7b05      	ldrb	r5, [r0, #12]
 8015c14:	4606      	mov	r6, r0
 8015c16:	b9b5      	cbnz	r5, 8015c46 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8015c18:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8015c1c:	4617      	mov	r7, r2
 8015c1e:	460c      	mov	r4, r1
 8015c20:	46a8      	mov	r8, r5
 8015c22:	6083      	str	r3, [r0, #8]
 8015c24:	f240 1301 	movw	r3, #257	@ 0x101
 8015c28:	e9c0 5500 	strd	r5, r5, [r0]
 8015c2c:	8183      	strh	r3, [r0, #12]
 8015c2e:	3501      	adds	r5, #1
 8015c30:	4621      	mov	r1, r4
 8015c32:	4630      	mov	r0, r6
 8015c34:	f008 fd2e 	bl	801e694 <put_memory>
 8015c38:	42af      	cmp	r7, r5
 8015c3a:	60a4      	str	r4, [r4, #8]
 8015c3c:	f884 800c 	strb.w	r8, [r4, #12]
 8015c40:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8015c44:	d1f3      	bne.n	8015c2e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8015c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c4a:	4770      	bx	lr

08015c4c <rmw_uxrce_init_init_options_impl_memory>:
 8015c4c:	b1e2      	cbz	r2, 8015c88 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8015c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c52:	7b05      	ldrb	r5, [r0, #12]
 8015c54:	4606      	mov	r6, r0
 8015c56:	b9ad      	cbnz	r5, 8015c84 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8015c58:	232c      	movs	r3, #44	@ 0x2c
 8015c5a:	4617      	mov	r7, r2
 8015c5c:	460c      	mov	r4, r1
 8015c5e:	46a8      	mov	r8, r5
 8015c60:	6083      	str	r3, [r0, #8]
 8015c62:	f240 1301 	movw	r3, #257	@ 0x101
 8015c66:	e9c0 5500 	strd	r5, r5, [r0]
 8015c6a:	8183      	strh	r3, [r0, #12]
 8015c6c:	3501      	adds	r5, #1
 8015c6e:	4621      	mov	r1, r4
 8015c70:	4630      	mov	r0, r6
 8015c72:	f008 fd0f 	bl	801e694 <put_memory>
 8015c76:	42af      	cmp	r7, r5
 8015c78:	60a4      	str	r4, [r4, #8]
 8015c7a:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8015c7e:	f804 8c20 	strb.w	r8, [r4, #-32]
 8015c82:	d1f3      	bne.n	8015c6c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8015c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c88:	4770      	bx	lr
 8015c8a:	bf00      	nop

08015c8c <rmw_uxrce_init_wait_set_memory>:
 8015c8c:	b1e2      	cbz	r2, 8015cc8 <rmw_uxrce_init_wait_set_memory+0x3c>
 8015c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c92:	7b05      	ldrb	r5, [r0, #12]
 8015c94:	4606      	mov	r6, r0
 8015c96:	b9ad      	cbnz	r5, 8015cc4 <rmw_uxrce_init_wait_set_memory+0x38>
 8015c98:	231c      	movs	r3, #28
 8015c9a:	4617      	mov	r7, r2
 8015c9c:	460c      	mov	r4, r1
 8015c9e:	46a8      	mov	r8, r5
 8015ca0:	6083      	str	r3, [r0, #8]
 8015ca2:	f240 1301 	movw	r3, #257	@ 0x101
 8015ca6:	e9c0 5500 	strd	r5, r5, [r0]
 8015caa:	8183      	strh	r3, [r0, #12]
 8015cac:	3501      	adds	r5, #1
 8015cae:	4621      	mov	r1, r4
 8015cb0:	4630      	mov	r0, r6
 8015cb2:	f008 fcef 	bl	801e694 <put_memory>
 8015cb6:	42af      	cmp	r7, r5
 8015cb8:	60a4      	str	r4, [r4, #8]
 8015cba:	f104 041c 	add.w	r4, r4, #28
 8015cbe:	f804 8c10 	strb.w	r8, [r4, #-16]
 8015cc2:	d1f3      	bne.n	8015cac <rmw_uxrce_init_wait_set_memory+0x20>
 8015cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cc8:	4770      	bx	lr
 8015cca:	bf00      	nop

08015ccc <rmw_uxrce_init_guard_condition_memory>:
 8015ccc:	b1e2      	cbz	r2, 8015d08 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8015cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cd2:	7b05      	ldrb	r5, [r0, #12]
 8015cd4:	4606      	mov	r6, r0
 8015cd6:	b9ad      	cbnz	r5, 8015d04 <rmw_uxrce_init_guard_condition_memory+0x38>
 8015cd8:	2320      	movs	r3, #32
 8015cda:	4617      	mov	r7, r2
 8015cdc:	460c      	mov	r4, r1
 8015cde:	46a8      	mov	r8, r5
 8015ce0:	6083      	str	r3, [r0, #8]
 8015ce2:	f240 1301 	movw	r3, #257	@ 0x101
 8015ce6:	e9c0 5500 	strd	r5, r5, [r0]
 8015cea:	8183      	strh	r3, [r0, #12]
 8015cec:	3501      	adds	r5, #1
 8015cee:	4621      	mov	r1, r4
 8015cf0:	4630      	mov	r0, r6
 8015cf2:	f008 fccf 	bl	801e694 <put_memory>
 8015cf6:	42af      	cmp	r7, r5
 8015cf8:	60a4      	str	r4, [r4, #8]
 8015cfa:	f104 0420 	add.w	r4, r4, #32
 8015cfe:	f804 8c14 	strb.w	r8, [r4, #-20]
 8015d02:	d1f3      	bne.n	8015cec <rmw_uxrce_init_guard_condition_memory+0x20>
 8015d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d08:	4770      	bx	lr
 8015d0a:	bf00      	nop

08015d0c <rmw_uxrce_fini_session_memory>:
 8015d0c:	4601      	mov	r1, r0
 8015d0e:	4801      	ldr	r0, [pc, #4]	@ (8015d14 <rmw_uxrce_fini_session_memory+0x8>)
 8015d10:	f008 bcc0 	b.w	801e694 <put_memory>
 8015d14:	24069224 	.word	0x24069224

08015d18 <rmw_uxrce_fini_node_memory>:
 8015d18:	b538      	push	{r3, r4, r5, lr}
 8015d1a:	4604      	mov	r4, r0
 8015d1c:	6800      	ldr	r0, [r0, #0]
 8015d1e:	b128      	cbz	r0, 8015d2c <rmw_uxrce_fini_node_memory+0x14>
 8015d20:	4b07      	ldr	r3, [pc, #28]	@ (8015d40 <rmw_uxrce_fini_node_memory+0x28>)
 8015d22:	6819      	ldr	r1, [r3, #0]
 8015d24:	f7ea fadc 	bl	80002e0 <strcmp>
 8015d28:	b940      	cbnz	r0, 8015d3c <rmw_uxrce_fini_node_memory+0x24>
 8015d2a:	6020      	str	r0, [r4, #0]
 8015d2c:	6861      	ldr	r1, [r4, #4]
 8015d2e:	b129      	cbz	r1, 8015d3c <rmw_uxrce_fini_node_memory+0x24>
 8015d30:	2500      	movs	r5, #0
 8015d32:	4804      	ldr	r0, [pc, #16]	@ (8015d44 <rmw_uxrce_fini_node_memory+0x2c>)
 8015d34:	610d      	str	r5, [r1, #16]
 8015d36:	f008 fcad 	bl	801e694 <put_memory>
 8015d3a:	6065      	str	r5, [r4, #4]
 8015d3c:	bd38      	pop	{r3, r4, r5, pc}
 8015d3e:	bf00      	nop
 8015d40:	08025928 	.word	0x08025928
 8015d44:	240691f4 	.word	0x240691f4

08015d48 <rmw_uxrce_fini_publisher_memory>:
 8015d48:	b510      	push	{r4, lr}
 8015d4a:	4604      	mov	r4, r0
 8015d4c:	6800      	ldr	r0, [r0, #0]
 8015d4e:	b128      	cbz	r0, 8015d5c <rmw_uxrce_fini_publisher_memory+0x14>
 8015d50:	4b06      	ldr	r3, [pc, #24]	@ (8015d6c <rmw_uxrce_fini_publisher_memory+0x24>)
 8015d52:	6819      	ldr	r1, [r3, #0]
 8015d54:	f7ea fac4 	bl	80002e0 <strcmp>
 8015d58:	b938      	cbnz	r0, 8015d6a <rmw_uxrce_fini_publisher_memory+0x22>
 8015d5a:	6020      	str	r0, [r4, #0]
 8015d5c:	6861      	ldr	r1, [r4, #4]
 8015d5e:	b121      	cbz	r1, 8015d6a <rmw_uxrce_fini_publisher_memory+0x22>
 8015d60:	4803      	ldr	r0, [pc, #12]	@ (8015d70 <rmw_uxrce_fini_publisher_memory+0x28>)
 8015d62:	f008 fc97 	bl	801e694 <put_memory>
 8015d66:	2300      	movs	r3, #0
 8015d68:	6063      	str	r3, [r4, #4]
 8015d6a:	bd10      	pop	{r4, pc}
 8015d6c:	08025928 	.word	0x08025928
 8015d70:	24069204 	.word	0x24069204

08015d74 <rmw_uxrce_fini_subscription_memory>:
 8015d74:	b510      	push	{r4, lr}
 8015d76:	4604      	mov	r4, r0
 8015d78:	6800      	ldr	r0, [r0, #0]
 8015d7a:	b128      	cbz	r0, 8015d88 <rmw_uxrce_fini_subscription_memory+0x14>
 8015d7c:	4b06      	ldr	r3, [pc, #24]	@ (8015d98 <rmw_uxrce_fini_subscription_memory+0x24>)
 8015d7e:	6819      	ldr	r1, [r3, #0]
 8015d80:	f7ea faae 	bl	80002e0 <strcmp>
 8015d84:	b938      	cbnz	r0, 8015d96 <rmw_uxrce_fini_subscription_memory+0x22>
 8015d86:	6020      	str	r0, [r4, #0]
 8015d88:	6861      	ldr	r1, [r4, #4]
 8015d8a:	b121      	cbz	r1, 8015d96 <rmw_uxrce_fini_subscription_memory+0x22>
 8015d8c:	4803      	ldr	r0, [pc, #12]	@ (8015d9c <rmw_uxrce_fini_subscription_memory+0x28>)
 8015d8e:	f008 fc81 	bl	801e694 <put_memory>
 8015d92:	2300      	movs	r3, #0
 8015d94:	6063      	str	r3, [r4, #4]
 8015d96:	bd10      	pop	{r4, pc}
 8015d98:	08025928 	.word	0x08025928
 8015d9c:	24069244 	.word	0x24069244

08015da0 <rmw_uxrce_fini_service_memory>:
 8015da0:	b510      	push	{r4, lr}
 8015da2:	4604      	mov	r4, r0
 8015da4:	6800      	ldr	r0, [r0, #0]
 8015da6:	b128      	cbz	r0, 8015db4 <rmw_uxrce_fini_service_memory+0x14>
 8015da8:	4b06      	ldr	r3, [pc, #24]	@ (8015dc4 <rmw_uxrce_fini_service_memory+0x24>)
 8015daa:	6819      	ldr	r1, [r3, #0]
 8015dac:	f7ea fa98 	bl	80002e0 <strcmp>
 8015db0:	b938      	cbnz	r0, 8015dc2 <rmw_uxrce_fini_service_memory+0x22>
 8015db2:	6020      	str	r0, [r4, #0]
 8015db4:	6861      	ldr	r1, [r4, #4]
 8015db6:	b121      	cbz	r1, 8015dc2 <rmw_uxrce_fini_service_memory+0x22>
 8015db8:	4803      	ldr	r0, [pc, #12]	@ (8015dc8 <rmw_uxrce_fini_service_memory+0x28>)
 8015dba:	f008 fc6b 	bl	801e694 <put_memory>
 8015dbe:	2300      	movs	r3, #0
 8015dc0:	6063      	str	r3, [r4, #4]
 8015dc2:	bd10      	pop	{r4, pc}
 8015dc4:	08025928 	.word	0x08025928
 8015dc8:	24069214 	.word	0x24069214

08015dcc <rmw_uxrce_fini_client_memory>:
 8015dcc:	b510      	push	{r4, lr}
 8015dce:	4604      	mov	r4, r0
 8015dd0:	6800      	ldr	r0, [r0, #0]
 8015dd2:	b128      	cbz	r0, 8015de0 <rmw_uxrce_fini_client_memory+0x14>
 8015dd4:	4b06      	ldr	r3, [pc, #24]	@ (8015df0 <rmw_uxrce_fini_client_memory+0x24>)
 8015dd6:	6819      	ldr	r1, [r3, #0]
 8015dd8:	f7ea fa82 	bl	80002e0 <strcmp>
 8015ddc:	b938      	cbnz	r0, 8015dee <rmw_uxrce_fini_client_memory+0x22>
 8015dde:	6020      	str	r0, [r4, #0]
 8015de0:	6861      	ldr	r1, [r4, #4]
 8015de2:	b121      	cbz	r1, 8015dee <rmw_uxrce_fini_client_memory+0x22>
 8015de4:	4803      	ldr	r0, [pc, #12]	@ (8015df4 <rmw_uxrce_fini_client_memory+0x28>)
 8015de6:	f008 fc55 	bl	801e694 <put_memory>
 8015dea:	2300      	movs	r3, #0
 8015dec:	6063      	str	r3, [r4, #4]
 8015dee:	bd10      	pop	{r4, pc}
 8015df0:	08025928 	.word	0x08025928
 8015df4:	24064928 	.word	0x24064928

08015df8 <rmw_uxrce_fini_topic_memory>:
 8015df8:	b510      	push	{r4, lr}
 8015dfa:	4604      	mov	r4, r0
 8015dfc:	4803      	ldr	r0, [pc, #12]	@ (8015e0c <rmw_uxrce_fini_topic_memory+0x14>)
 8015dfe:	4621      	mov	r1, r4
 8015e00:	f008 fc48 	bl	801e694 <put_memory>
 8015e04:	2300      	movs	r3, #0
 8015e06:	61a3      	str	r3, [r4, #24]
 8015e08:	bd10      	pop	{r4, pc}
 8015e0a:	bf00      	nop
 8015e0c:	24069254 	.word	0x24069254

08015e10 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8015e10:	b082      	sub	sp, #8
 8015e12:	492b      	ldr	r1, [pc, #172]	@ (8015ec0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8015e14:	b530      	push	{r4, r5, lr}
 8015e16:	680d      	ldr	r5, [r1, #0]
 8015e18:	ac03      	add	r4, sp, #12
 8015e1a:	e884 000c 	stmia.w	r4, {r2, r3}
 8015e1e:	461c      	mov	r4, r3
 8015e20:	2d00      	cmp	r5, #0
 8015e22:	d04b      	beq.n	8015ebc <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8015e24:	462b      	mov	r3, r5
 8015e26:	2100      	movs	r1, #0
 8015e28:	689a      	ldr	r2, [r3, #8]
 8015e2a:	685b      	ldr	r3, [r3, #4]
 8015e2c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8015e30:	4290      	cmp	r0, r2
 8015e32:	bf08      	it	eq
 8015e34:	3101      	addeq	r1, #1
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d1f6      	bne.n	8015e28 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8015e3a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8015e3e:	2b02      	cmp	r3, #2
 8015e40:	d029      	beq.n	8015e96 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8015e42:	d820      	bhi.n	8015e86 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8015e44:	428c      	cmp	r4, r1
 8015e46:	d828      	bhi.n	8015e9a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8015e48:	fab4 f284 	clz	r2, r4
 8015e4c:	0952      	lsrs	r2, r2, #5
 8015e4e:	b324      	cbz	r4, 8015e9a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8015e50:	b1dd      	cbz	r5, 8015e8a <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8015e52:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8015e56:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8015e5a:	e001      	b.n	8015e60 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8015e5c:	686d      	ldr	r5, [r5, #4]
 8015e5e:	b1ad      	cbz	r5, 8015e8c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8015e60:	68ab      	ldr	r3, [r5, #8]
 8015e62:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 8015e66:	4288      	cmp	r0, r1
 8015e68:	d1f8      	bne.n	8015e5c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8015e6a:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 8015e6e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8015e72:	4561      	cmp	r1, ip
 8015e74:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8015e78:	eb73 0e04 	sbcs.w	lr, r3, r4
 8015e7c:	daee      	bge.n	8015e5c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8015e7e:	468c      	mov	ip, r1
 8015e80:	461c      	mov	r4, r3
 8015e82:	462a      	mov	r2, r5
 8015e84:	e7ea      	b.n	8015e5c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8015e86:	2b03      	cmp	r3, #3
 8015e88:	d0dc      	beq.n	8015e44 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8015e8a:	2200      	movs	r2, #0
 8015e8c:	4610      	mov	r0, r2
 8015e8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015e92:	b002      	add	sp, #8
 8015e94:	4770      	bx	lr
 8015e96:	428c      	cmp	r4, r1
 8015e98:	d905      	bls.n	8015ea6 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8015e9a:	4809      	ldr	r0, [pc, #36]	@ (8015ec0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8015e9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ea0:	b002      	add	sp, #8
 8015ea2:	f008 bbe7 	b.w	801e674 <get_memory>
 8015ea6:	fab4 f284 	clz	r2, r4
 8015eaa:	0952      	lsrs	r2, r2, #5
 8015eac:	2c00      	cmp	r4, #0
 8015eae:	d1ed      	bne.n	8015e8c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8015eb0:	4803      	ldr	r0, [pc, #12]	@ (8015ec0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8015eb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015eb6:	b002      	add	sp, #8
 8015eb8:	f008 bbdc 	b.w	801e674 <get_memory>
 8015ebc:	4629      	mov	r1, r5
 8015ebe:	e7bc      	b.n	8015e3a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8015ec0:	24069234 	.word	0x24069234

08015ec4 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8015ec4:	4b12      	ldr	r3, [pc, #72]	@ (8015f10 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	b530      	push	{r4, r5, lr}
 8015eca:	b1f3      	cbz	r3, 8015f0a <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8015ecc:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8015ed0:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8015ed4:	2400      	movs	r4, #0
 8015ed6:	e001      	b.n	8015edc <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8015ed8:	685b      	ldr	r3, [r3, #4]
 8015eda:	b1a3      	cbz	r3, 8015f06 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8015edc:	689a      	ldr	r2, [r3, #8]
 8015ede:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8015ee2:	4288      	cmp	r0, r1
 8015ee4:	d1f8      	bne.n	8015ed8 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8015ee6:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8015eea:	f502 6202 	add.w	r2, r2, #2080	@ 0x820
 8015eee:	4571      	cmp	r1, lr
 8015ef0:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8015ef4:	eb72 050c 	sbcs.w	r5, r2, ip
 8015ef8:	daee      	bge.n	8015ed8 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8015efa:	461c      	mov	r4, r3
 8015efc:	685b      	ldr	r3, [r3, #4]
 8015efe:	468e      	mov	lr, r1
 8015f00:	4694      	mov	ip, r2
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d1ea      	bne.n	8015edc <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8015f06:	4620      	mov	r0, r4
 8015f08:	bd30      	pop	{r4, r5, pc}
 8015f0a:	461c      	mov	r4, r3
 8015f0c:	4620      	mov	r0, r4
 8015f0e:	bd30      	pop	{r4, r5, pc}
 8015f10:	24069234 	.word	0x24069234
 8015f14:	00000000 	.word	0x00000000

08015f18 <rmw_uxrce_clean_expired_static_input_buffer>:
 8015f18:	4b3d      	ldr	r3, [pc, #244]	@ (8016010 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8015f1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f1e:	681f      	ldr	r7, [r3, #0]
 8015f20:	ed2d 8b06 	vpush	{d8-d10}
 8015f24:	b08d      	sub	sp, #52	@ 0x34
 8015f26:	f7ff fd71 	bl	8015a0c <rmw_uros_epoch_nanos>
 8015f2a:	2f00      	cmp	r7, #0
 8015f2c:	d05d      	beq.n	8015fea <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8015f2e:	46b8      	mov	r8, r7
 8015f30:	4681      	mov	r9, r0
 8015f32:	468a      	mov	sl, r1
 8015f34:	ac04      	add	r4, sp, #16
 8015f36:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015f3a:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8015f3e:	2b04      	cmp	r3, #4
 8015f40:	ed9f 8b2d 	vldr	d8, [pc, #180]	@ 8015ff8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8015f44:	ed9f ab2e 	vldr	d10, [pc, #184]	@ 8016000 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8015f48:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 8016008 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8015f4c:	d03f      	beq.n	8015fce <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8015f4e:	2b05      	cmp	r3, #5
 8015f50:	d044      	beq.n	8015fdc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8015f52:	2b03      	cmp	r3, #3
 8015f54:	d03b      	beq.n	8015fce <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8015f56:	ed8d 8b04 	vstr	d8, [sp, #16]
 8015f5a:	ed8d ab06 	vstr	d10, [sp, #24]
 8015f5e:	ab08      	add	r3, sp, #32
 8015f60:	ed8d 8b08 	vstr	d8, [sp, #32]
 8015f64:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8015f68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015f6a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015f6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015f72:	f008 f9a1 	bl	801e2b8 <rmw_time_equal>
 8015f76:	b118      	cbz	r0, 8015f80 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8015f78:	ed8d 9b04 	vstr	d9, [sp, #16]
 8015f7c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8015f80:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8015f84:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8015f88:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8015f8c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8015f90:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015f94:	f008 f9e6 	bl	801e364 <rmw_time_total_nsec>
 8015f98:	1830      	adds	r0, r6, r0
 8015f9a:	eb47 0101 	adc.w	r1, r7, r1
 8015f9e:	4548      	cmp	r0, r9
 8015fa0:	eb71 030a 	sbcs.w	r3, r1, sl
 8015fa4:	db05      	blt.n	8015fb2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8015fa6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8015faa:	4591      	cmp	r9, r2
 8015fac:	eb7a 0303 	sbcs.w	r3, sl, r3
 8015fb0:	da03      	bge.n	8015fba <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8015fb2:	4641      	mov	r1, r8
 8015fb4:	4816      	ldr	r0, [pc, #88]	@ (8016010 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8015fb6:	f008 fb6d 	bl	801e694 <put_memory>
 8015fba:	f1bb 0f00 	cmp.w	fp, #0
 8015fbe:	d014      	beq.n	8015fea <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8015fc0:	46d8      	mov	r8, fp
 8015fc2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015fc6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8015fca:	2b04      	cmp	r3, #4
 8015fcc:	d1bf      	bne.n	8015f4e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8015fce:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8015fd2:	3340      	adds	r3, #64	@ 0x40
 8015fd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015fd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015fda:	e7c0      	b.n	8015f5e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8015fdc:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8015fe0:	3348      	adds	r3, #72	@ 0x48
 8015fe2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015fe4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015fe8:	e7b9      	b.n	8015f5e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8015fea:	b00d      	add	sp, #52	@ 0x34
 8015fec:	ecbd 8b06 	vpop	{d8-d10}
 8015ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ff4:	f3af 8000 	nop.w
	...
 8016000:	00000001 	.word	0x00000001
 8016004:	00000000 	.word	0x00000000
 8016008:	0000001e 	.word	0x0000001e
 801600c:	00000000 	.word	0x00000000
 8016010:	24069234 	.word	0x24069234

08016014 <run_xrce_session>:
 8016014:	b510      	push	{r4, lr}
 8016016:	788c      	ldrb	r4, [r1, #2]
 8016018:	b086      	sub	sp, #24
 801601a:	2c01      	cmp	r4, #1
 801601c:	f8ad 200e 	strh.w	r2, [sp, #14]
 8016020:	d00c      	beq.n	801603c <run_xrce_session+0x28>
 8016022:	2401      	movs	r4, #1
 8016024:	4619      	mov	r1, r3
 8016026:	f10d 020e 	add.w	r2, sp, #14
 801602a:	f10d 0317 	add.w	r3, sp, #23
 801602e:	9400      	str	r4, [sp, #0]
 8016030:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016034:	f002 f800 	bl	8018038 <uxr_run_session_until_all_status>
 8016038:	b006      	add	sp, #24
 801603a:	bd10      	pop	{r4, pc}
 801603c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016040:	f001 fc1c 	bl	801787c <uxr_flash_output_streams>
 8016044:	4620      	mov	r0, r4
 8016046:	b006      	add	sp, #24
 8016048:	bd10      	pop	{r4, pc}
 801604a:	bf00      	nop

0801604c <convert_qos_profile>:
 801604c:	7a4a      	ldrb	r2, [r1, #9]
 801604e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8016052:	2a02      	cmp	r2, #2
 8016054:	bf18      	it	ne
 8016056:	2200      	movne	r2, #0
 8016058:	7002      	strb	r2, [r0, #0]
 801605a:	f1ac 0202 	sub.w	r2, ip, #2
 801605e:	fab2 f282 	clz	r2, r2
 8016062:	0952      	lsrs	r2, r2, #5
 8016064:	7042      	strb	r2, [r0, #1]
 8016066:	780a      	ldrb	r2, [r1, #0]
 8016068:	8889      	ldrh	r1, [r1, #4]
 801606a:	f1a2 0202 	sub.w	r2, r2, #2
 801606e:	8081      	strh	r1, [r0, #4]
 8016070:	fab2 f282 	clz	r2, r2
 8016074:	0952      	lsrs	r2, r2, #5
 8016076:	7082      	strb	r2, [r0, #2]
 8016078:	4770      	bx	lr
 801607a:	bf00      	nop

0801607c <generate_service_topics>:
 801607c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801607e:	461d      	mov	r5, r3
 8016080:	b083      	sub	sp, #12
 8016082:	4606      	mov	r6, r0
 8016084:	4c11      	ldr	r4, [pc, #68]	@ (80160cc <generate_service_topics+0x50>)
 8016086:	4608      	mov	r0, r1
 8016088:	4b11      	ldr	r3, [pc, #68]	@ (80160d0 <generate_service_topics+0x54>)
 801608a:	4617      	mov	r7, r2
 801608c:	4629      	mov	r1, r5
 801608e:	4a11      	ldr	r2, [pc, #68]	@ (80160d4 <generate_service_topics+0x58>)
 8016090:	9401      	str	r4, [sp, #4]
 8016092:	9600      	str	r6, [sp, #0]
 8016094:	f00b ff9e 	bl	8021fd4 <sniprintf>
 8016098:	4a0f      	ldr	r2, [pc, #60]	@ (80160d8 <generate_service_topics+0x5c>)
 801609a:	4604      	mov	r4, r0
 801609c:	4b0f      	ldr	r3, [pc, #60]	@ (80160dc <generate_service_topics+0x60>)
 801609e:	9201      	str	r2, [sp, #4]
 80160a0:	4638      	mov	r0, r7
 80160a2:	4a0c      	ldr	r2, [pc, #48]	@ (80160d4 <generate_service_topics+0x58>)
 80160a4:	4629      	mov	r1, r5
 80160a6:	9600      	str	r6, [sp, #0]
 80160a8:	f00b ff94 	bl	8021fd4 <sniprintf>
 80160ac:	2c00      	cmp	r4, #0
 80160ae:	bfa8      	it	ge
 80160b0:	42a5      	cmpge	r5, r4
 80160b2:	bfcc      	ite	gt
 80160b4:	2401      	movgt	r4, #1
 80160b6:	2400      	movle	r4, #0
 80160b8:	dd05      	ble.n	80160c6 <generate_service_topics+0x4a>
 80160ba:	2800      	cmp	r0, #0
 80160bc:	bfa8      	it	ge
 80160be:	4285      	cmpge	r5, r0
 80160c0:	bfcc      	ite	gt
 80160c2:	2401      	movgt	r4, #1
 80160c4:	2400      	movle	r4, #0
 80160c6:	4620      	mov	r0, r4
 80160c8:	b003      	add	sp, #12
 80160ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160cc:	080249d0 	.word	0x080249d0
 80160d0:	080249cc 	.word	0x080249cc
 80160d4:	080249a8 	.word	0x080249a8
 80160d8:	080249c4 	.word	0x080249c4
 80160dc:	080249c0 	.word	0x080249c0

080160e0 <generate_service_types>:
 80160e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160e4:	4606      	mov	r6, r0
 80160e6:	b087      	sub	sp, #28
 80160e8:	461c      	mov	r4, r3
 80160ea:	6883      	ldr	r3, [r0, #8]
 80160ec:	460d      	mov	r5, r1
 80160ee:	4617      	mov	r7, r2
 80160f0:	4798      	blx	r3
 80160f2:	68f3      	ldr	r3, [r6, #12]
 80160f4:	4606      	mov	r6, r0
 80160f6:	4798      	blx	r3
 80160f8:	2300      	movs	r3, #0
 80160fa:	f8d0 b004 	ldr.w	fp, [r0, #4]
 80160fe:	6872      	ldr	r2, [r6, #4]
 8016100:	702b      	strb	r3, [r5, #0]
 8016102:	6813      	ldr	r3, [r2, #0]
 8016104:	2b00      	cmp	r3, #0
 8016106:	d03f      	beq.n	8016188 <generate_service_types+0xa8>
 8016108:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801619c <generate_service_types+0xbc>
 801610c:	4649      	mov	r1, r9
 801610e:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 80161a4 <generate_service_types+0xc4>
 8016112:	4628      	mov	r0, r5
 8016114:	f8df a090 	ldr.w	sl, [pc, #144]	@ 80161a8 <generate_service_types+0xc8>
 8016118:	f8cd 8014 	str.w	r8, [sp, #20]
 801611c:	6852      	ldr	r2, [r2, #4]
 801611e:	9100      	str	r1, [sp, #0]
 8016120:	4621      	mov	r1, r4
 8016122:	f8cd 8008 	str.w	r8, [sp, #8]
 8016126:	f8cd a004 	str.w	sl, [sp, #4]
 801612a:	e9cd 9203 	strd	r9, r2, [sp, #12]
 801612e:	4a1a      	ldr	r2, [pc, #104]	@ (8016198 <generate_service_types+0xb8>)
 8016130:	f00b ff50 	bl	8021fd4 <sniprintf>
 8016134:	2300      	movs	r3, #0
 8016136:	42a0      	cmp	r0, r4
 8016138:	ea6f 0600 	mvn.w	r6, r0
 801613c:	703b      	strb	r3, [r7, #0]
 801613e:	f8db 3000 	ldr.w	r3, [fp]
 8016142:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 8016146:	bfac      	ite	ge
 8016148:	2500      	movge	r5, #0
 801614a:	2501      	movlt	r5, #1
 801614c:	b30b      	cbz	r3, 8016192 <generate_service_types+0xb2>
 801614e:	4a13      	ldr	r2, [pc, #76]	@ (801619c <generate_service_types+0xbc>)
 8016150:	f8cd 8014 	str.w	r8, [sp, #20]
 8016154:	402e      	ands	r6, r5
 8016156:	f8db 1004 	ldr.w	r1, [fp, #4]
 801615a:	4638      	mov	r0, r7
 801615c:	9104      	str	r1, [sp, #16]
 801615e:	4621      	mov	r1, r4
 8016160:	e9cd 2a00 	strd	r2, sl, [sp]
 8016164:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8016168:	4a0b      	ldr	r2, [pc, #44]	@ (8016198 <generate_service_types+0xb8>)
 801616a:	f00b ff33 	bl	8021fd4 <sniprintf>
 801616e:	2800      	cmp	r0, #0
 8016170:	bfb4      	ite	lt
 8016172:	2600      	movlt	r6, #0
 8016174:	f006 0601 	andge.w	r6, r6, #1
 8016178:	42a0      	cmp	r0, r4
 801617a:	bfac      	ite	ge
 801617c:	2000      	movge	r0, #0
 801617e:	f006 0001 	andlt.w	r0, r6, #1
 8016182:	b007      	add	sp, #28
 8016184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016188:	4b05      	ldr	r3, [pc, #20]	@ (80161a0 <generate_service_types+0xc0>)
 801618a:	f8df 9010 	ldr.w	r9, [pc, #16]	@ 801619c <generate_service_types+0xbc>
 801618e:	4619      	mov	r1, r3
 8016190:	e7bd      	b.n	801610e <generate_service_types+0x2e>
 8016192:	4b03      	ldr	r3, [pc, #12]	@ (80161a0 <generate_service_types+0xc0>)
 8016194:	461a      	mov	r2, r3
 8016196:	e7db      	b.n	8016150 <generate_service_types+0x70>
 8016198:	080249a0 	.word	0x080249a0
 801619c:	0802499c 	.word	0x0802499c
 80161a0:	08025a64 	.word	0x08025a64
 80161a4:	080249b0 	.word	0x080249b0
 80161a8:	080249b4 	.word	0x080249b4

080161ac <generate_type_name>:
 80161ac:	2300      	movs	r3, #0
 80161ae:	b530      	push	{r4, r5, lr}
 80161b0:	700b      	strb	r3, [r1, #0]
 80161b2:	b087      	sub	sp, #28
 80161b4:	6803      	ldr	r3, [r0, #0]
 80161b6:	4614      	mov	r4, r2
 80161b8:	b1bb      	cbz	r3, 80161ea <generate_type_name+0x3e>
 80161ba:	4a0e      	ldr	r2, [pc, #56]	@ (80161f4 <generate_type_name+0x48>)
 80161bc:	4615      	mov	r5, r2
 80161be:	9500      	str	r5, [sp, #0]
 80161c0:	9203      	str	r2, [sp, #12]
 80161c2:	4d0d      	ldr	r5, [pc, #52]	@ (80161f8 <generate_type_name+0x4c>)
 80161c4:	6842      	ldr	r2, [r0, #4]
 80161c6:	4608      	mov	r0, r1
 80161c8:	490c      	ldr	r1, [pc, #48]	@ (80161fc <generate_type_name+0x50>)
 80161ca:	9204      	str	r2, [sp, #16]
 80161cc:	9105      	str	r1, [sp, #20]
 80161ce:	9102      	str	r1, [sp, #8]
 80161d0:	4621      	mov	r1, r4
 80161d2:	4a0b      	ldr	r2, [pc, #44]	@ (8016200 <generate_type_name+0x54>)
 80161d4:	9501      	str	r5, [sp, #4]
 80161d6:	f00b fefd 	bl	8021fd4 <sniprintf>
 80161da:	2800      	cmp	r0, #0
 80161dc:	bfa8      	it	ge
 80161de:	4284      	cmpge	r4, r0
 80161e0:	bfcc      	ite	gt
 80161e2:	2001      	movgt	r0, #1
 80161e4:	2000      	movle	r0, #0
 80161e6:	b007      	add	sp, #28
 80161e8:	bd30      	pop	{r4, r5, pc}
 80161ea:	4b06      	ldr	r3, [pc, #24]	@ (8016204 <generate_type_name+0x58>)
 80161ec:	4a01      	ldr	r2, [pc, #4]	@ (80161f4 <generate_type_name+0x48>)
 80161ee:	461d      	mov	r5, r3
 80161f0:	e7e5      	b.n	80161be <generate_type_name+0x12>
 80161f2:	bf00      	nop
 80161f4:	0802499c 	.word	0x0802499c
 80161f8:	080249b4 	.word	0x080249b4
 80161fc:	080249b0 	.word	0x080249b0
 8016200:	080249a0 	.word	0x080249a0
 8016204:	08025a64 	.word	0x08025a64

08016208 <generate_topic_name>:
 8016208:	b530      	push	{r4, r5, lr}
 801620a:	4614      	mov	r4, r2
 801620c:	b083      	sub	sp, #12
 801620e:	4605      	mov	r5, r0
 8016210:	4b07      	ldr	r3, [pc, #28]	@ (8016230 <generate_topic_name+0x28>)
 8016212:	4a08      	ldr	r2, [pc, #32]	@ (8016234 <generate_topic_name+0x2c>)
 8016214:	4608      	mov	r0, r1
 8016216:	9500      	str	r5, [sp, #0]
 8016218:	4621      	mov	r1, r4
 801621a:	f00b fedb 	bl	8021fd4 <sniprintf>
 801621e:	2800      	cmp	r0, #0
 8016220:	bfa8      	it	ge
 8016222:	4284      	cmpge	r4, r0
 8016224:	bfcc      	ite	gt
 8016226:	2001      	movgt	r0, #1
 8016228:	2000      	movle	r0, #0
 801622a:	b003      	add	sp, #12
 801622c:	bd30      	pop	{r4, r5, pc}
 801622e:	bf00      	nop
 8016230:	080249d8 	.word	0x080249d8
 8016234:	080249b8 	.word	0x080249b8

08016238 <is_uxrce_rmw_identifier_valid>:
 8016238:	b510      	push	{r4, lr}
 801623a:	4604      	mov	r4, r0
 801623c:	b140      	cbz	r0, 8016250 <is_uxrce_rmw_identifier_valid+0x18>
 801623e:	f008 fa81 	bl	801e744 <rmw_get_implementation_identifier>
 8016242:	4601      	mov	r1, r0
 8016244:	4620      	mov	r0, r4
 8016246:	f7ea f84b 	bl	80002e0 <strcmp>
 801624a:	fab0 f080 	clz	r0, r0
 801624e:	0940      	lsrs	r0, r0, #5
 8016250:	bd10      	pop	{r4, pc}
 8016252:	bf00      	nop

08016254 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 8016254:	4b04      	ldr	r3, [pc, #16]	@ (8016268 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x14>)
 8016256:	681a      	ldr	r2, [r3, #0]
 8016258:	b10a      	cbz	r2, 801625e <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0xa>
 801625a:	4803      	ldr	r0, [pc, #12]	@ (8016268 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x14>)
 801625c:	4770      	bx	lr
 801625e:	4a03      	ldr	r2, [pc, #12]	@ (801626c <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x18>)
 8016260:	4801      	ldr	r0, [pc, #4]	@ (8016268 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x14>)
 8016262:	6812      	ldr	r2, [r2, #0]
 8016264:	601a      	str	r2, [r3, #0]
 8016266:	4770      	bx	lr
 8016268:	24000cb0 	.word	0x24000cb0
 801626c:	24000d2c 	.word	0x24000d2c

08016270 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 8016270:	4a02      	ldr	r2, [pc, #8]	@ (801627c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0xc>)
 8016272:	4b03      	ldr	r3, [pc, #12]	@ (8016280 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x10>)
 8016274:	6812      	ldr	r2, [r2, #0]
 8016276:	601a      	str	r2, [r3, #0]
 8016278:	4770      	bx	lr
 801627a:	bf00      	nop
 801627c:	24000d2c 	.word	0x24000d2c
 8016280:	24000cb0 	.word	0x24000cb0

08016284 <rosgraph_msgs__msg__Clock__rosidl_typesupport_introspection_c__Clock_init_function>:
 8016284:	f009 bc2a 	b.w	801fadc <rosgraph_msgs__msg__Clock__init>

08016288 <rosgraph_msgs__msg__Clock__rosidl_typesupport_introspection_c__Clock_fini_function>:
 8016288:	f009 bc3a 	b.w	801fb00 <rosgraph_msgs__msg__Clock__fini>

0801628c <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 801628c:	b508      	push	{r3, lr}
 801628e:	f7fc fc5d 	bl	8012b4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016292:	4b06      	ldr	r3, [pc, #24]	@ (80162ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x20>)
 8016294:	4906      	ldr	r1, [pc, #24]	@ (80162b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x24>)
 8016296:	681a      	ldr	r2, [r3, #0]
 8016298:	60c8      	str	r0, [r1, #12]
 801629a:	b10a      	cbz	r2, 80162a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x14>
 801629c:	4803      	ldr	r0, [pc, #12]	@ (80162ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x20>)
 801629e:	bd08      	pop	{r3, pc}
 80162a0:	4a04      	ldr	r2, [pc, #16]	@ (80162b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x28>)
 80162a2:	4802      	ldr	r0, [pc, #8]	@ (80162ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x20>)
 80162a4:	6812      	ldr	r2, [r2, #0]
 80162a6:	601a      	str	r2, [r3, #0]
 80162a8:	bd08      	pop	{r3, pc}
 80162aa:	bf00      	nop
 80162ac:	24000cf8 	.word	0x24000cf8
 80162b0:	24000cbc 	.word	0x24000cbc
 80162b4:	24000d30 	.word	0x24000d30

080162b8 <get_serialized_size_rosgraph_msgs__msg__Clock>:
 80162b8:	b108      	cbz	r0, 80162be <get_serialized_size_rosgraph_msgs__msg__Clock+0x6>
 80162ba:	f7fc bc55 	b.w	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 80162be:	4770      	bx	lr

080162c0 <_Clock__max_serialized_size>:
 80162c0:	b500      	push	{lr}
 80162c2:	b083      	sub	sp, #12
 80162c4:	2301      	movs	r3, #1
 80162c6:	2100      	movs	r1, #0
 80162c8:	f10d 0007 	add.w	r0, sp, #7
 80162cc:	f88d 3007 	strb.w	r3, [sp, #7]
 80162d0:	f7fc fc9a 	bl	8012c08 <max_serialized_size_builtin_interfaces__msg__Time>
 80162d4:	b003      	add	sp, #12
 80162d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80162da:	bf00      	nop

080162dc <_Clock__get_serialized_size>:
 80162dc:	b110      	cbz	r0, 80162e4 <_Clock__get_serialized_size+0x8>
 80162de:	2100      	movs	r1, #0
 80162e0:	f7fc bc42 	b.w	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 80162e4:	4770      	bx	lr
 80162e6:	bf00      	nop

080162e8 <_Clock__cdr_deserialize>:
 80162e8:	b570      	push	{r4, r5, r6, lr}
 80162ea:	460c      	mov	r4, r1
 80162ec:	b151      	cbz	r1, 8016304 <_Clock__cdr_deserialize+0x1c>
 80162ee:	4605      	mov	r5, r0
 80162f0:	f7fc fc9e 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80162f4:	4603      	mov	r3, r0
 80162f6:	4621      	mov	r1, r4
 80162f8:	4628      	mov	r0, r5
 80162fa:	685b      	ldr	r3, [r3, #4]
 80162fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016300:	68db      	ldr	r3, [r3, #12]
 8016302:	4718      	bx	r3
 8016304:	4608      	mov	r0, r1
 8016306:	bd70      	pop	{r4, r5, r6, pc}

08016308 <_Clock__cdr_serialize>:
 8016308:	b160      	cbz	r0, 8016324 <_Clock__cdr_serialize+0x1c>
 801630a:	b570      	push	{r4, r5, r6, lr}
 801630c:	4604      	mov	r4, r0
 801630e:	460d      	mov	r5, r1
 8016310:	f7fc fc8e 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016314:	4603      	mov	r3, r0
 8016316:	4629      	mov	r1, r5
 8016318:	4620      	mov	r0, r4
 801631a:	685b      	ldr	r3, [r3, #4]
 801631c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016320:	689b      	ldr	r3, [r3, #8]
 8016322:	4718      	bx	r3
 8016324:	4770      	bx	lr
 8016326:	bf00      	nop

08016328 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 8016328:	4800      	ldr	r0, [pc, #0]	@ (801632c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x4>)
 801632a:	4770      	bx	lr
 801632c:	24000d04 	.word	0x24000d04

08016330 <get_message_typesupport_handle>:
 8016330:	6883      	ldr	r3, [r0, #8]
 8016332:	4718      	bx	r3

08016334 <get_message_typesupport_handle_function>:
 8016334:	b510      	push	{r4, lr}
 8016336:	4604      	mov	r4, r0
 8016338:	6800      	ldr	r0, [r0, #0]
 801633a:	f7e9 ffd1 	bl	80002e0 <strcmp>
 801633e:	2800      	cmp	r0, #0
 8016340:	bf0c      	ite	eq
 8016342:	4620      	moveq	r0, r4
 8016344:	2000      	movne	r0, #0
 8016346:	bd10      	pop	{r4, pc}

08016348 <get_service_typesupport_handle>:
 8016348:	6883      	ldr	r3, [r0, #8]
 801634a:	4718      	bx	r3

0801634c <get_service_typesupport_handle_function>:
 801634c:	b510      	push	{r4, lr}
 801634e:	4604      	mov	r4, r0
 8016350:	6800      	ldr	r0, [r0, #0]
 8016352:	f7e9 ffc5 	bl	80002e0 <strcmp>
 8016356:	2800      	cmp	r0, #0
 8016358:	bf0c      	ite	eq
 801635a:	4620      	moveq	r0, r4
 801635c:	2000      	movne	r0, #0
 801635e:	bd10      	pop	{r4, pc}

08016360 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8016360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016364:	6805      	ldr	r5, [r0, #0]
 8016366:	4604      	mov	r4, r0
 8016368:	460e      	mov	r6, r1
 801636a:	4628      	mov	r0, r5
 801636c:	f7e9 ffb8 	bl	80002e0 <strcmp>
 8016370:	b1c8      	cbz	r0, 80163a6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8016372:	4b11      	ldr	r3, [pc, #68]	@ (80163b8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	429d      	cmp	r5, r3
 8016378:	d112      	bne.n	80163a0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801637a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801637e:	f8d8 4000 	ldr.w	r4, [r8]
 8016382:	b16c      	cbz	r4, 80163a0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8016384:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016388:	2700      	movs	r7, #0
 801638a:	3d04      	subs	r5, #4
 801638c:	4631      	mov	r1, r6
 801638e:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8016392:	f7e9 ffa5 	bl	80002e0 <strcmp>
 8016396:	00bb      	lsls	r3, r7, #2
 8016398:	b140      	cbz	r0, 80163ac <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801639a:	3701      	adds	r7, #1
 801639c:	42bc      	cmp	r4, r7
 801639e:	d1f5      	bne.n	801638c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80163a0:	2000      	movs	r0, #0
 80163a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163a6:	4620      	mov	r0, r4
 80163a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163ac:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80163b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80163b4:	58d3      	ldr	r3, [r2, r3]
 80163b6:	4718      	bx	r3
 80163b8:	24000d2c 	.word	0x24000d2c

080163bc <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 80163bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163c0:	6805      	ldr	r5, [r0, #0]
 80163c2:	4604      	mov	r4, r0
 80163c4:	460e      	mov	r6, r1
 80163c6:	4628      	mov	r0, r5
 80163c8:	f7e9 ff8a 	bl	80002e0 <strcmp>
 80163cc:	b1c8      	cbz	r0, 8016402 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 80163ce:	4b11      	ldr	r3, [pc, #68]	@ (8016414 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	429d      	cmp	r5, r3
 80163d4:	d112      	bne.n	80163fc <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 80163d6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80163da:	f8d8 4000 	ldr.w	r4, [r8]
 80163de:	b16c      	cbz	r4, 80163fc <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 80163e0:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80163e4:	2700      	movs	r7, #0
 80163e6:	3d04      	subs	r5, #4
 80163e8:	4631      	mov	r1, r6
 80163ea:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80163ee:	f7e9 ff77 	bl	80002e0 <strcmp>
 80163f2:	00bb      	lsls	r3, r7, #2
 80163f4:	b140      	cbz	r0, 8016408 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 80163f6:	3701      	adds	r7, #1
 80163f8:	42bc      	cmp	r4, r7
 80163fa:	d1f5      	bne.n	80163e8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 80163fc:	2000      	movs	r0, #0
 80163fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016402:	4620      	mov	r0, r4
 8016404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016408:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801640c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016410:	58d3      	ldr	r3, [r2, r3]
 8016412:	4718      	bx	r3
 8016414:	24000d2c 	.word	0x24000d2c

08016418 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 8016418:	f009 bb76 	b.w	801fb08 <std_msgs__msg__Header__init>

0801641c <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 801641c:	f009 bb98 	b.w	801fb50 <std_msgs__msg__Header__fini>

08016420 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8016420:	b508      	push	{r3, lr}
 8016422:	f7fc fb93 	bl	8012b4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016426:	4b06      	ldr	r3, [pc, #24]	@ (8016440 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8016428:	4906      	ldr	r1, [pc, #24]	@ (8016444 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 801642a:	681a      	ldr	r2, [r3, #0]
 801642c:	60c8      	str	r0, [r1, #12]
 801642e:	b10a      	cbz	r2, 8016434 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 8016430:	4803      	ldr	r0, [pc, #12]	@ (8016440 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8016432:	bd08      	pop	{r3, pc}
 8016434:	4a04      	ldr	r2, [pc, #16]	@ (8016448 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 8016436:	4802      	ldr	r0, [pc, #8]	@ (8016440 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8016438:	6812      	ldr	r2, [r2, #0]
 801643a:	601a      	str	r2, [r3, #0]
 801643c:	bd08      	pop	{r3, pc}
 801643e:	bf00      	nop
 8016440:	24000dac 	.word	0x24000dac
 8016444:	24000d34 	.word	0x24000d34
 8016448:	24000d30 	.word	0x24000d30

0801644c <_Header__max_serialized_size>:
 801644c:	b500      	push	{lr}
 801644e:	b083      	sub	sp, #12
 8016450:	2301      	movs	r3, #1
 8016452:	2100      	movs	r1, #0
 8016454:	f10d 0007 	add.w	r0, sp, #7
 8016458:	f88d 3007 	strb.w	r3, [sp, #7]
 801645c:	f7fc fbd4 	bl	8012c08 <max_serialized_size_builtin_interfaces__msg__Time>
 8016460:	b003      	add	sp, #12
 8016462:	f85d fb04 	ldr.w	pc, [sp], #4
 8016466:	bf00      	nop

08016468 <get_serialized_size_std_msgs__msg__Header>:
 8016468:	b570      	push	{r4, r5, r6, lr}
 801646a:	4605      	mov	r5, r0
 801646c:	b168      	cbz	r0, 801648a <get_serialized_size_std_msgs__msg__Header+0x22>
 801646e:	460c      	mov	r4, r1
 8016470:	f7fc fb7a 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 8016474:	2104      	movs	r1, #4
 8016476:	1826      	adds	r6, r4, r0
 8016478:	f1c4 0405 	rsb	r4, r4, #5
 801647c:	4630      	mov	r0, r6
 801647e:	f7fd fe77 	bl	8014170 <ucdr_alignment>
 8016482:	68e9      	ldr	r1, [r5, #12]
 8016484:	440c      	add	r4, r1
 8016486:	4404      	add	r4, r0
 8016488:	19a0      	adds	r0, r4, r6
 801648a:	bd70      	pop	{r4, r5, r6, pc}

0801648c <_Header__cdr_deserialize>:
 801648c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801648e:	460c      	mov	r4, r1
 8016490:	b083      	sub	sp, #12
 8016492:	b1e9      	cbz	r1, 80164d0 <_Header__cdr_deserialize+0x44>
 8016494:	4606      	mov	r6, r0
 8016496:	f7fc fbcb 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801649a:	4603      	mov	r3, r0
 801649c:	4621      	mov	r1, r4
 801649e:	4630      	mov	r0, r6
 80164a0:	685b      	ldr	r3, [r3, #4]
 80164a2:	68db      	ldr	r3, [r3, #12]
 80164a4:	4798      	blx	r3
 80164a6:	6927      	ldr	r7, [r4, #16]
 80164a8:	ab01      	add	r3, sp, #4
 80164aa:	68a1      	ldr	r1, [r4, #8]
 80164ac:	463a      	mov	r2, r7
 80164ae:	4630      	mov	r0, r6
 80164b0:	f000 fc50 	bl	8016d54 <ucdr_deserialize_sequence_char>
 80164b4:	9b01      	ldr	r3, [sp, #4]
 80164b6:	4605      	mov	r5, r0
 80164b8:	b920      	cbnz	r0, 80164c4 <_Header__cdr_deserialize+0x38>
 80164ba:	429f      	cmp	r7, r3
 80164bc:	d30c      	bcc.n	80164d8 <_Header__cdr_deserialize+0x4c>
 80164be:	4628      	mov	r0, r5
 80164c0:	b003      	add	sp, #12
 80164c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164c4:	b103      	cbz	r3, 80164c8 <_Header__cdr_deserialize+0x3c>
 80164c6:	3b01      	subs	r3, #1
 80164c8:	4628      	mov	r0, r5
 80164ca:	60e3      	str	r3, [r4, #12]
 80164cc:	b003      	add	sp, #12
 80164ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164d0:	460d      	mov	r5, r1
 80164d2:	4628      	mov	r0, r5
 80164d4:	b003      	add	sp, #12
 80164d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164d8:	2101      	movs	r1, #1
 80164da:	4630      	mov	r0, r6
 80164dc:	75b5      	strb	r5, [r6, #22]
 80164de:	7571      	strb	r1, [r6, #21]
 80164e0:	60e5      	str	r5, [r4, #12]
 80164e2:	f7fd fe5d 	bl	80141a0 <ucdr_align_to>
 80164e6:	4630      	mov	r0, r6
 80164e8:	9901      	ldr	r1, [sp, #4]
 80164ea:	f7fd fe91 	bl	8014210 <ucdr_advance_buffer>
 80164ee:	4628      	mov	r0, r5
 80164f0:	b003      	add	sp, #12
 80164f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080164f4 <_Header__cdr_serialize>:
 80164f4:	b308      	cbz	r0, 801653a <_Header__cdr_serialize+0x46>
 80164f6:	b570      	push	{r4, r5, r6, lr}
 80164f8:	4604      	mov	r4, r0
 80164fa:	460d      	mov	r5, r1
 80164fc:	f7fc fb98 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016500:	4603      	mov	r3, r0
 8016502:	4629      	mov	r1, r5
 8016504:	4620      	mov	r0, r4
 8016506:	685b      	ldr	r3, [r3, #4]
 8016508:	689b      	ldr	r3, [r3, #8]
 801650a:	4798      	blx	r3
 801650c:	68a6      	ldr	r6, [r4, #8]
 801650e:	b15e      	cbz	r6, 8016528 <_Header__cdr_serialize+0x34>
 8016510:	4630      	mov	r0, r6
 8016512:	f7e9 feef 	bl	80002f4 <strlen>
 8016516:	4603      	mov	r3, r0
 8016518:	1c42      	adds	r2, r0, #1
 801651a:	4631      	mov	r1, r6
 801651c:	4628      	mov	r0, r5
 801651e:	60e3      	str	r3, [r4, #12]
 8016520:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016524:	f000 bc04 	b.w	8016d30 <ucdr_serialize_sequence_char>
 8016528:	4633      	mov	r3, r6
 801652a:	4632      	mov	r2, r6
 801652c:	4631      	mov	r1, r6
 801652e:	4628      	mov	r0, r5
 8016530:	60e3      	str	r3, [r4, #12]
 8016532:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016536:	f000 bbfb 	b.w	8016d30 <ucdr_serialize_sequence_char>
 801653a:	4770      	bx	lr

0801653c <_Header__get_serialized_size>:
 801653c:	b538      	push	{r3, r4, r5, lr}
 801653e:	4604      	mov	r4, r0
 8016540:	b150      	cbz	r0, 8016558 <_Header__get_serialized_size+0x1c>
 8016542:	2100      	movs	r1, #0
 8016544:	f7fc fb10 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 8016548:	2104      	movs	r1, #4
 801654a:	4605      	mov	r5, r0
 801654c:	f7fd fe10 	bl	8014170 <ucdr_alignment>
 8016550:	68e2      	ldr	r2, [r4, #12]
 8016552:	3205      	adds	r2, #5
 8016554:	1953      	adds	r3, r2, r5
 8016556:	4418      	add	r0, r3
 8016558:	bd38      	pop	{r3, r4, r5, pc}
 801655a:	bf00      	nop

0801655c <max_serialized_size_std_msgs__msg__Header>:
 801655c:	2301      	movs	r3, #1
 801655e:	b510      	push	{r4, lr}
 8016560:	7003      	strb	r3, [r0, #0]
 8016562:	4604      	mov	r4, r0
 8016564:	f7fc fb50 	bl	8012c08 <max_serialized_size_builtin_interfaces__msg__Time>
 8016568:	2300      	movs	r3, #0
 801656a:	7023      	strb	r3, [r4, #0]
 801656c:	bd10      	pop	{r4, pc}
 801656e:	bf00      	nop

08016570 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8016570:	4800      	ldr	r0, [pc, #0]	@ (8016574 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 8016572:	4770      	bx	lr
 8016574:	24000db8 	.word	0x24000db8

08016578 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8016578:	4b04      	ldr	r3, [pc, #16]	@ (801658c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 801657a:	681a      	ldr	r2, [r3, #0]
 801657c:	b10a      	cbz	r2, 8016582 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xa>
 801657e:	4803      	ldr	r0, [pc, #12]	@ (801658c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 8016580:	4770      	bx	lr
 8016582:	4a03      	ldr	r2, [pc, #12]	@ (8016590 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x18>)
 8016584:	4801      	ldr	r0, [pc, #4]	@ (801658c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 8016586:	6812      	ldr	r2, [r2, #0]
 8016588:	601a      	str	r2, [r3, #0]
 801658a:	4770      	bx	lr
 801658c:	24000de8 	.word	0x24000de8
 8016590:	24000d2c 	.word	0x24000d2c

08016594 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8016594:	4a02      	ldr	r2, [pc, #8]	@ (80165a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xc>)
 8016596:	4b03      	ldr	r3, [pc, #12]	@ (80165a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x10>)
 8016598:	6812      	ldr	r2, [r2, #0]
 801659a:	601a      	str	r2, [r3, #0]
 801659c:	4770      	bx	lr
 801659e:	bf00      	nop
 80165a0:	24000d2c 	.word	0x24000d2c
 80165a4:	24000de8 	.word	0x24000de8

080165a8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80165a8:	4b04      	ldr	r3, [pc, #16]	@ (80165bc <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 80165aa:	681a      	ldr	r2, [r3, #0]
 80165ac:	b10a      	cbz	r2, 80165b2 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xa>
 80165ae:	4803      	ldr	r0, [pc, #12]	@ (80165bc <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 80165b0:	4770      	bx	lr
 80165b2:	4a03      	ldr	r2, [pc, #12]	@ (80165c0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x18>)
 80165b4:	4801      	ldr	r0, [pc, #4]	@ (80165bc <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 80165b6:	6812      	ldr	r2, [r2, #0]
 80165b8:	601a      	str	r2, [r3, #0]
 80165ba:	4770      	bx	lr
 80165bc:	24000dfc 	.word	0x24000dfc
 80165c0:	24000d2c 	.word	0x24000d2c

080165c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80165c4:	4a02      	ldr	r2, [pc, #8]	@ (80165d0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xc>)
 80165c6:	4b03      	ldr	r3, [pc, #12]	@ (80165d4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x10>)
 80165c8:	6812      	ldr	r2, [r2, #0]
 80165ca:	601a      	str	r2, [r3, #0]
 80165cc:	4770      	bx	lr
 80165ce:	bf00      	nop
 80165d0:	24000d2c 	.word	0x24000d2c
 80165d4:	24000dfc 	.word	0x24000dfc

080165d8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80165d8:	4b04      	ldr	r3, [pc, #16]	@ (80165ec <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 80165da:	681a      	ldr	r2, [r3, #0]
 80165dc:	b10a      	cbz	r2, 80165e2 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xa>
 80165de:	4803      	ldr	r0, [pc, #12]	@ (80165ec <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 80165e0:	4770      	bx	lr
 80165e2:	4a03      	ldr	r2, [pc, #12]	@ (80165f0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x18>)
 80165e4:	4801      	ldr	r0, [pc, #4]	@ (80165ec <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 80165e6:	6812      	ldr	r2, [r2, #0]
 80165e8:	601a      	str	r2, [r3, #0]
 80165ea:	4770      	bx	lr
 80165ec:	24000e10 	.word	0x24000e10
 80165f0:	24000d2c 	.word	0x24000d2c

080165f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80165f4:	4a02      	ldr	r2, [pc, #8]	@ (8016600 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xc>)
 80165f6:	4b03      	ldr	r3, [pc, #12]	@ (8016604 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x10>)
 80165f8:	6812      	ldr	r2, [r2, #0]
 80165fa:	601a      	str	r2, [r3, #0]
 80165fc:	4770      	bx	lr
 80165fe:	bf00      	nop
 8016600:	24000d2c 	.word	0x24000d2c
 8016604:	24000e10 	.word	0x24000e10

08016608 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8016608:	4b04      	ldr	r3, [pc, #16]	@ (801661c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 801660a:	681a      	ldr	r2, [r3, #0]
 801660c:	b10a      	cbz	r2, 8016612 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xa>
 801660e:	4803      	ldr	r0, [pc, #12]	@ (801661c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 8016610:	4770      	bx	lr
 8016612:	4a03      	ldr	r2, [pc, #12]	@ (8016620 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x18>)
 8016614:	4801      	ldr	r0, [pc, #4]	@ (801661c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 8016616:	6812      	ldr	r2, [r2, #0]
 8016618:	601a      	str	r2, [r3, #0]
 801661a:	4770      	bx	lr
 801661c:	24000e24 	.word	0x24000e24
 8016620:	24000d2c 	.word	0x24000d2c

08016624 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8016624:	4a02      	ldr	r2, [pc, #8]	@ (8016630 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xc>)
 8016626:	4b03      	ldr	r3, [pc, #12]	@ (8016634 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x10>)
 8016628:	6812      	ldr	r2, [r2, #0]
 801662a:	601a      	str	r2, [r3, #0]
 801662c:	4770      	bx	lr
 801662e:	bf00      	nop
 8016630:	24000d2c 	.word	0x24000d2c
 8016634:	24000e24 	.word	0x24000e24

08016638 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_init_function>:
 8016638:	f009 ba96 	b.w	801fb68 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>

0801663c <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_fini_function>:
 801663c:	f009 bab8 	b.w	801fbb0 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>

08016640 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8016640:	b510      	push	{r4, lr}
 8016642:	4c08      	ldr	r4, [pc, #32]	@ (8016664 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x24>)
 8016644:	f7ff feec 	bl	8016420 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8016648:	60e0      	str	r0, [r4, #12]
 801664a:	f009 fb1d 	bl	801fc88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 801664e:	4b06      	ldr	r3, [pc, #24]	@ (8016668 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8016650:	64a0      	str	r0, [r4, #72]	@ 0x48
 8016652:	681a      	ldr	r2, [r3, #0]
 8016654:	b10a      	cbz	r2, 801665a <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1a>
 8016656:	4804      	ldr	r0, [pc, #16]	@ (8016668 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8016658:	bd10      	pop	{r4, pc}
 801665a:	4a04      	ldr	r2, [pc, #16]	@ (801666c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x2c>)
 801665c:	4802      	ldr	r0, [pc, #8]	@ (8016668 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 801665e:	6812      	ldr	r2, [r2, #0]
 8016660:	601a      	str	r2, [r3, #0]
 8016662:	bd10      	pop	{r4, pc}
 8016664:	24000e30 	.word	0x24000e30
 8016668:	24000ea8 	.word	0x24000ea8
 801666c:	24000d30 	.word	0x24000d30

08016670 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_init_function>:
 8016670:	f009 baaa 	b.w	801fbc8 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>

08016674 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_fini_function>:
 8016674:	f009 bacc 	b.w	801fc10 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>

08016678 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8016678:	b510      	push	{r4, lr}
 801667a:	4c08      	ldr	r4, [pc, #32]	@ (801669c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x24>)
 801667c:	f7ff fed0 	bl	8016420 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8016680:	60e0      	str	r0, [r4, #12]
 8016682:	f009 fb13 	bl	801fcac <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8016686:	4b06      	ldr	r3, [pc, #24]	@ (80166a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8016688:	64a0      	str	r0, [r4, #72]	@ 0x48
 801668a:	681a      	ldr	r2, [r3, #0]
 801668c:	b10a      	cbz	r2, 8016692 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1a>
 801668e:	4804      	ldr	r0, [pc, #16]	@ (80166a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8016690:	bd10      	pop	{r4, pc}
 8016692:	4a04      	ldr	r2, [pc, #16]	@ (80166a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x2c>)
 8016694:	4802      	ldr	r0, [pc, #8]	@ (80166a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8016696:	6812      	ldr	r2, [r2, #0]
 8016698:	601a      	str	r2, [r3, #0]
 801669a:	bd10      	pop	{r4, pc}
 801669c:	24000eb4 	.word	0x24000eb4
 80166a0:	24000f2c 	.word	0x24000f2c
 80166a4:	24000d30 	.word	0x24000d30

080166a8 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_init_function>:
 80166a8:	f009 babe 	b.w	801fc28 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>

080166ac <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_fini_function>:
 80166ac:	f009 bace 	b.w	801fc4c <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>

080166b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80166b0:	b508      	push	{r3, lr}
 80166b2:	f7fc fa4b 	bl	8012b4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80166b6:	4b06      	ldr	r3, [pc, #24]	@ (80166d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 80166b8:	4906      	ldr	r1, [pc, #24]	@ (80166d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x24>)
 80166ba:	681a      	ldr	r2, [r3, #0]
 80166bc:	60c8      	str	r0, [r1, #12]
 80166be:	b10a      	cbz	r2, 80166c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>
 80166c0:	4803      	ldr	r0, [pc, #12]	@ (80166d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 80166c2:	bd08      	pop	{r3, pc}
 80166c4:	4a04      	ldr	r2, [pc, #16]	@ (80166d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x28>)
 80166c6:	4802      	ldr	r0, [pc, #8]	@ (80166d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 80166c8:	6812      	ldr	r2, [r2, #0]
 80166ca:	601a      	str	r2, [r3, #0]
 80166cc:	bd08      	pop	{r3, pc}
 80166ce:	bf00      	nop
 80166d0:	24000fb0 	.word	0x24000fb0
 80166d4:	24000f38 	.word	0x24000f38
 80166d8:	24000d30 	.word	0x24000d30

080166dc <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_init_function>:
 80166dc:	f009 baba 	b.w	801fc54 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>

080166e0 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_fini_function>:
 80166e0:	f009 baca 	b.w	801fc78 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>

080166e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 80166e4:	b508      	push	{r3, lr}
 80166e6:	f7fc fa31 	bl	8012b4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80166ea:	4b06      	ldr	r3, [pc, #24]	@ (8016704 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 80166ec:	4906      	ldr	r1, [pc, #24]	@ (8016708 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x24>)
 80166ee:	681a      	ldr	r2, [r3, #0]
 80166f0:	60c8      	str	r0, [r1, #12]
 80166f2:	b10a      	cbz	r2, 80166f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>
 80166f4:	4803      	ldr	r0, [pc, #12]	@ (8016704 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 80166f6:	bd08      	pop	{r3, pc}
 80166f8:	4a04      	ldr	r2, [pc, #16]	@ (801670c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x28>)
 80166fa:	4802      	ldr	r0, [pc, #8]	@ (8016704 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 80166fc:	6812      	ldr	r2, [r2, #0]
 80166fe:	601a      	str	r2, [r3, #0]
 8016700:	bd08      	pop	{r3, pc}
 8016702:	bf00      	nop
 8016704:	24001034 	.word	0x24001034
 8016708:	24000fbc 	.word	0x24000fbc
 801670c:	24000d30 	.word	0x24000d30

08016710 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8016710:	b538      	push	{r3, r4, r5, lr}
 8016712:	4604      	mov	r4, r0
 8016714:	b150      	cbz	r0, 801672c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1c>
 8016716:	460d      	mov	r5, r1
 8016718:	f7ff fea6 	bl	8016468 <get_serialized_size_std_msgs__msg__Header>
 801671c:	4603      	mov	r3, r0
 801671e:	f104 0018 	add.w	r0, r4, #24
 8016722:	461c      	mov	r4, r3
 8016724:	18e9      	adds	r1, r5, r3
 8016726:	f009 facf 	bl	801fcc8 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 801672a:	4420      	add	r0, r4
 801672c:	bd38      	pop	{r3, r4, r5, pc}
 801672e:	bf00      	nop

08016730 <_ActuationCommandStamped__cdr_deserialize>:
 8016730:	b570      	push	{r4, r5, r6, lr}
 8016732:	460c      	mov	r4, r1
 8016734:	b199      	cbz	r1, 801675e <_ActuationCommandStamped__cdr_deserialize+0x2e>
 8016736:	4605      	mov	r5, r0
 8016738:	f7ff ff1a 	bl	8016570 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801673c:	4603      	mov	r3, r0
 801673e:	4621      	mov	r1, r4
 8016740:	4628      	mov	r0, r5
 8016742:	685b      	ldr	r3, [r3, #4]
 8016744:	68db      	ldr	r3, [r3, #12]
 8016746:	4798      	blx	r3
 8016748:	f009 fb46 	bl	801fdd8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 801674c:	4603      	mov	r3, r0
 801674e:	f104 0118 	add.w	r1, r4, #24
 8016752:	4628      	mov	r0, r5
 8016754:	685b      	ldr	r3, [r3, #4]
 8016756:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801675a:	68db      	ldr	r3, [r3, #12]
 801675c:	4718      	bx	r3
 801675e:	4608      	mov	r0, r1
 8016760:	bd70      	pop	{r4, r5, r6, pc}
 8016762:	bf00      	nop

08016764 <_ActuationCommandStamped__cdr_serialize>:
 8016764:	b510      	push	{r4, lr}
 8016766:	b082      	sub	sp, #8
 8016768:	9101      	str	r1, [sp, #4]
 801676a:	b1a0      	cbz	r0, 8016796 <_ActuationCommandStamped__cdr_serialize+0x32>
 801676c:	4604      	mov	r4, r0
 801676e:	f7ff feff 	bl	8016570 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8016772:	4603      	mov	r3, r0
 8016774:	9901      	ldr	r1, [sp, #4]
 8016776:	4620      	mov	r0, r4
 8016778:	685b      	ldr	r3, [r3, #4]
 801677a:	689b      	ldr	r3, [r3, #8]
 801677c:	4798      	blx	r3
 801677e:	f009 fb2b 	bl	801fdd8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8016782:	4603      	mov	r3, r0
 8016784:	9901      	ldr	r1, [sp, #4]
 8016786:	f104 0018 	add.w	r0, r4, #24
 801678a:	685b      	ldr	r3, [r3, #4]
 801678c:	689b      	ldr	r3, [r3, #8]
 801678e:	b002      	add	sp, #8
 8016790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016794:	4718      	bx	r3
 8016796:	b002      	add	sp, #8
 8016798:	bd10      	pop	{r4, pc}
 801679a:	bf00      	nop

0801679c <_ActuationCommandStamped__get_serialized_size>:
 801679c:	b510      	push	{r4, lr}
 801679e:	4604      	mov	r4, r0
 80167a0:	b148      	cbz	r0, 80167b6 <_ActuationCommandStamped__get_serialized_size+0x1a>
 80167a2:	2100      	movs	r1, #0
 80167a4:	f7ff fe60 	bl	8016468 <get_serialized_size_std_msgs__msg__Header>
 80167a8:	4601      	mov	r1, r0
 80167aa:	f104 0018 	add.w	r0, r4, #24
 80167ae:	460c      	mov	r4, r1
 80167b0:	f009 fa8a 	bl	801fcc8 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 80167b4:	4420      	add	r0, r4
 80167b6:	bd10      	pop	{r4, pc}

080167b8 <_ActuationCommandStamped__max_serialized_size>:
 80167b8:	b510      	push	{r4, lr}
 80167ba:	b082      	sub	sp, #8
 80167bc:	2301      	movs	r3, #1
 80167be:	2100      	movs	r1, #0
 80167c0:	f10d 0007 	add.w	r0, sp, #7
 80167c4:	f88d 3007 	strb.w	r3, [sp, #7]
 80167c8:	f7ff fec8 	bl	801655c <max_serialized_size_std_msgs__msg__Header>
 80167cc:	4604      	mov	r4, r0
 80167ce:	f10d 0007 	add.w	r0, sp, #7
 80167d2:	4621      	mov	r1, r4
 80167d4:	f009 fae6 	bl	801fda4 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 80167d8:	4420      	add	r0, r4
 80167da:	b002      	add	sp, #8
 80167dc:	bd10      	pop	{r4, pc}
 80167de:	bf00      	nop

080167e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 80167e0:	4800      	ldr	r0, [pc, #0]	@ (80167e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x4>)
 80167e2:	4770      	bx	lr
 80167e4:	24001040 	.word	0x24001040

080167e8 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80167e8:	b538      	push	{r3, r4, r5, lr}
 80167ea:	4604      	mov	r4, r0
 80167ec:	b150      	cbz	r0, 8016804 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1c>
 80167ee:	460d      	mov	r5, r1
 80167f0:	f7ff fe3a 	bl	8016468 <get_serialized_size_std_msgs__msg__Header>
 80167f4:	4603      	mov	r3, r0
 80167f6:	f104 0018 	add.w	r0, r4, #24
 80167fa:	461c      	mov	r4, r3
 80167fc:	18e9      	adds	r1, r5, r3
 80167fe:	f009 faef 	bl	801fde0 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8016802:	4420      	add	r0, r4
 8016804:	bd38      	pop	{r3, r4, r5, pc}
 8016806:	bf00      	nop

08016808 <_ActuationStatusStamped__cdr_deserialize>:
 8016808:	b570      	push	{r4, r5, r6, lr}
 801680a:	460c      	mov	r4, r1
 801680c:	b199      	cbz	r1, 8016836 <_ActuationStatusStamped__cdr_deserialize+0x2e>
 801680e:	4605      	mov	r5, r0
 8016810:	f7ff feae 	bl	8016570 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8016814:	4603      	mov	r3, r0
 8016816:	4621      	mov	r1, r4
 8016818:	4628      	mov	r0, r5
 801681a:	685b      	ldr	r3, [r3, #4]
 801681c:	68db      	ldr	r3, [r3, #12]
 801681e:	4798      	blx	r3
 8016820:	f009 fb66 	bl	801fef0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8016824:	4603      	mov	r3, r0
 8016826:	f104 0118 	add.w	r1, r4, #24
 801682a:	4628      	mov	r0, r5
 801682c:	685b      	ldr	r3, [r3, #4]
 801682e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016832:	68db      	ldr	r3, [r3, #12]
 8016834:	4718      	bx	r3
 8016836:	4608      	mov	r0, r1
 8016838:	bd70      	pop	{r4, r5, r6, pc}
 801683a:	bf00      	nop

0801683c <_ActuationStatusStamped__cdr_serialize>:
 801683c:	b510      	push	{r4, lr}
 801683e:	b082      	sub	sp, #8
 8016840:	9101      	str	r1, [sp, #4]
 8016842:	b1a0      	cbz	r0, 801686e <_ActuationStatusStamped__cdr_serialize+0x32>
 8016844:	4604      	mov	r4, r0
 8016846:	f7ff fe93 	bl	8016570 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801684a:	4603      	mov	r3, r0
 801684c:	9901      	ldr	r1, [sp, #4]
 801684e:	4620      	mov	r0, r4
 8016850:	685b      	ldr	r3, [r3, #4]
 8016852:	689b      	ldr	r3, [r3, #8]
 8016854:	4798      	blx	r3
 8016856:	f009 fb4b 	bl	801fef0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 801685a:	4603      	mov	r3, r0
 801685c:	9901      	ldr	r1, [sp, #4]
 801685e:	f104 0018 	add.w	r0, r4, #24
 8016862:	685b      	ldr	r3, [r3, #4]
 8016864:	689b      	ldr	r3, [r3, #8]
 8016866:	b002      	add	sp, #8
 8016868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801686c:	4718      	bx	r3
 801686e:	b002      	add	sp, #8
 8016870:	bd10      	pop	{r4, pc}
 8016872:	bf00      	nop

08016874 <_ActuationStatusStamped__get_serialized_size>:
 8016874:	b510      	push	{r4, lr}
 8016876:	4604      	mov	r4, r0
 8016878:	b148      	cbz	r0, 801688e <_ActuationStatusStamped__get_serialized_size+0x1a>
 801687a:	2100      	movs	r1, #0
 801687c:	f7ff fdf4 	bl	8016468 <get_serialized_size_std_msgs__msg__Header>
 8016880:	4601      	mov	r1, r0
 8016882:	f104 0018 	add.w	r0, r4, #24
 8016886:	460c      	mov	r4, r1
 8016888:	f009 faaa 	bl	801fde0 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 801688c:	4420      	add	r0, r4
 801688e:	bd10      	pop	{r4, pc}

08016890 <_ActuationStatusStamped__max_serialized_size>:
 8016890:	b510      	push	{r4, lr}
 8016892:	b082      	sub	sp, #8
 8016894:	2301      	movs	r3, #1
 8016896:	2100      	movs	r1, #0
 8016898:	f10d 0007 	add.w	r0, sp, #7
 801689c:	f88d 3007 	strb.w	r3, [sp, #7]
 80168a0:	f7ff fe5c 	bl	801655c <max_serialized_size_std_msgs__msg__Header>
 80168a4:	4604      	mov	r4, r0
 80168a6:	f10d 0007 	add.w	r0, sp, #7
 80168aa:	4621      	mov	r1, r4
 80168ac:	f009 fb06 	bl	801febc <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 80168b0:	4420      	add	r0, r4
 80168b2:	b002      	add	sp, #8
 80168b4:	bd10      	pop	{r4, pc}
 80168b6:	bf00      	nop

080168b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80168b8:	4800      	ldr	r0, [pc, #0]	@ (80168bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x4>)
 80168ba:	4770      	bx	lr
 80168bc:	24001068 	.word	0x24001068

080168c0 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80168c0:	b538      	push	{r3, r4, r5, lr}
 80168c2:	b158      	cbz	r0, 80168dc <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x1c>
 80168c4:	460d      	mov	r5, r1
 80168c6:	f7fc f94f 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 80168ca:	2104      	movs	r1, #4
 80168cc:	182c      	adds	r4, r5, r0
 80168ce:	f1c5 0504 	rsb	r5, r5, #4
 80168d2:	4620      	mov	r0, r4
 80168d4:	f7fd fc4c 	bl	8014170 <ucdr_alignment>
 80168d8:	4428      	add	r0, r5
 80168da:	4420      	add	r0, r4
 80168dc:	bd38      	pop	{r3, r4, r5, pc}
 80168de:	bf00      	nop

080168e0 <_SteeringWheelStatusStamped__cdr_deserialize>:
 80168e0:	b538      	push	{r3, r4, r5, lr}
 80168e2:	460c      	mov	r4, r1
 80168e4:	b179      	cbz	r1, 8016906 <_SteeringWheelStatusStamped__cdr_deserialize+0x26>
 80168e6:	4605      	mov	r5, r0
 80168e8:	f7fc f9a2 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80168ec:	4603      	mov	r3, r0
 80168ee:	4621      	mov	r1, r4
 80168f0:	4628      	mov	r0, r5
 80168f2:	685b      	ldr	r3, [r3, #4]
 80168f4:	68db      	ldr	r3, [r3, #12]
 80168f6:	4798      	blx	r3
 80168f8:	f104 0108 	add.w	r1, r4, #8
 80168fc:	4628      	mov	r0, r5
 80168fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016902:	f7fd b9b7 	b.w	8013c74 <ucdr_deserialize_float>
 8016906:	4608      	mov	r0, r1
 8016908:	bd38      	pop	{r3, r4, r5, pc}
 801690a:	bf00      	nop

0801690c <_SteeringWheelStatusStamped__cdr_serialize>:
 801690c:	b188      	cbz	r0, 8016932 <_SteeringWheelStatusStamped__cdr_serialize+0x26>
 801690e:	b538      	push	{r3, r4, r5, lr}
 8016910:	4604      	mov	r4, r0
 8016912:	460d      	mov	r5, r1
 8016914:	f7fc f98c 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016918:	4603      	mov	r3, r0
 801691a:	4629      	mov	r1, r5
 801691c:	4620      	mov	r0, r4
 801691e:	685b      	ldr	r3, [r3, #4]
 8016920:	689b      	ldr	r3, [r3, #8]
 8016922:	4798      	blx	r3
 8016924:	ed94 0a02 	vldr	s0, [r4, #8]
 8016928:	4628      	mov	r0, r5
 801692a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801692e:	f7fd b909 	b.w	8013b44 <ucdr_serialize_float>
 8016932:	4770      	bx	lr

08016934 <_SteeringWheelStatusStamped__get_serialized_size>:
 8016934:	b150      	cbz	r0, 801694c <_SteeringWheelStatusStamped__get_serialized_size+0x18>
 8016936:	2100      	movs	r1, #0
 8016938:	b510      	push	{r4, lr}
 801693a:	f7fc f915 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 801693e:	4604      	mov	r4, r0
 8016940:	2104      	movs	r1, #4
 8016942:	f7fd fc15 	bl	8014170 <ucdr_alignment>
 8016946:	4420      	add	r0, r4
 8016948:	3004      	adds	r0, #4
 801694a:	bd10      	pop	{r4, pc}
 801694c:	4770      	bx	lr
 801694e:	bf00      	nop

08016950 <_SteeringWheelStatusStamped__max_serialized_size>:
 8016950:	b510      	push	{r4, lr}
 8016952:	b082      	sub	sp, #8
 8016954:	2301      	movs	r3, #1
 8016956:	2100      	movs	r1, #0
 8016958:	f10d 0007 	add.w	r0, sp, #7
 801695c:	f88d 3007 	strb.w	r3, [sp, #7]
 8016960:	f7fc f952 	bl	8012c08 <max_serialized_size_builtin_interfaces__msg__Time>
 8016964:	4604      	mov	r4, r0
 8016966:	2104      	movs	r1, #4
 8016968:	f7fd fc02 	bl	8014170 <ucdr_alignment>
 801696c:	4420      	add	r0, r4
 801696e:	3004      	adds	r0, #4
 8016970:	b002      	add	sp, #8
 8016972:	bd10      	pop	{r4, pc}

08016974 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8016974:	4800      	ldr	r0, [pc, #0]	@ (8016978 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x4>)
 8016976:	4770      	bx	lr
 8016978:	24001090 	.word	0x24001090

0801697c <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 801697c:	b538      	push	{r3, r4, r5, lr}
 801697e:	b158      	cbz	r0, 8016998 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x1c>
 8016980:	460d      	mov	r5, r1
 8016982:	f7fc f8f1 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 8016986:	2101      	movs	r1, #1
 8016988:	182c      	adds	r4, r5, r0
 801698a:	f1c5 0501 	rsb	r5, r5, #1
 801698e:	4620      	mov	r0, r4
 8016990:	f7fd fbee 	bl	8014170 <ucdr_alignment>
 8016994:	4428      	add	r0, r5
 8016996:	4420      	add	r0, r4
 8016998:	bd38      	pop	{r3, r4, r5, pc}
 801699a:	bf00      	nop

0801699c <_VehicleEmergencyStamped__cdr_deserialize>:
 801699c:	b538      	push	{r3, r4, r5, lr}
 801699e:	460c      	mov	r4, r1
 80169a0:	b179      	cbz	r1, 80169c2 <_VehicleEmergencyStamped__cdr_deserialize+0x26>
 80169a2:	4605      	mov	r5, r0
 80169a4:	f7fc f944 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80169a8:	4603      	mov	r3, r0
 80169aa:	4621      	mov	r1, r4
 80169ac:	4628      	mov	r0, r5
 80169ae:	685b      	ldr	r3, [r3, #4]
 80169b0:	68db      	ldr	r3, [r3, #12]
 80169b2:	4798      	blx	r3
 80169b4:	f104 0108 	add.w	r1, r4, #8
 80169b8:	4628      	mov	r0, r5
 80169ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80169be:	f7fc b951 	b.w	8012c64 <ucdr_deserialize_bool>
 80169c2:	4608      	mov	r0, r1
 80169c4:	bd38      	pop	{r3, r4, r5, pc}
 80169c6:	bf00      	nop

080169c8 <_VehicleEmergencyStamped__cdr_serialize>:
 80169c8:	b180      	cbz	r0, 80169ec <_VehicleEmergencyStamped__cdr_serialize+0x24>
 80169ca:	b538      	push	{r3, r4, r5, lr}
 80169cc:	4604      	mov	r4, r0
 80169ce:	460d      	mov	r5, r1
 80169d0:	f7fc f92e 	bl	8012c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80169d4:	4603      	mov	r3, r0
 80169d6:	4629      	mov	r1, r5
 80169d8:	4620      	mov	r0, r4
 80169da:	685b      	ldr	r3, [r3, #4]
 80169dc:	689b      	ldr	r3, [r3, #8]
 80169de:	4798      	blx	r3
 80169e0:	7a21      	ldrb	r1, [r4, #8]
 80169e2:	4628      	mov	r0, r5
 80169e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80169e8:	f7fc b926 	b.w	8012c38 <ucdr_serialize_bool>
 80169ec:	4770      	bx	lr
 80169ee:	bf00      	nop

080169f0 <_VehicleEmergencyStamped__get_serialized_size>:
 80169f0:	b150      	cbz	r0, 8016a08 <_VehicleEmergencyStamped__get_serialized_size+0x18>
 80169f2:	2100      	movs	r1, #0
 80169f4:	b510      	push	{r4, lr}
 80169f6:	f7fc f8b7 	bl	8012b68 <get_serialized_size_builtin_interfaces__msg__Time>
 80169fa:	4604      	mov	r4, r0
 80169fc:	2101      	movs	r1, #1
 80169fe:	f7fd fbb7 	bl	8014170 <ucdr_alignment>
 8016a02:	4420      	add	r0, r4
 8016a04:	3001      	adds	r0, #1
 8016a06:	bd10      	pop	{r4, pc}
 8016a08:	4770      	bx	lr
 8016a0a:	bf00      	nop

08016a0c <_VehicleEmergencyStamped__max_serialized_size>:
 8016a0c:	b510      	push	{r4, lr}
 8016a0e:	b082      	sub	sp, #8
 8016a10:	2401      	movs	r4, #1
 8016a12:	2100      	movs	r1, #0
 8016a14:	f10d 0007 	add.w	r0, sp, #7
 8016a18:	f88d 4007 	strb.w	r4, [sp, #7]
 8016a1c:	f7fc f8f4 	bl	8012c08 <max_serialized_size_builtin_interfaces__msg__Time>
 8016a20:	4621      	mov	r1, r4
 8016a22:	4604      	mov	r4, r0
 8016a24:	f7fd fba4 	bl	8014170 <ucdr_alignment>
 8016a28:	4420      	add	r0, r4
 8016a2a:	3001      	adds	r0, #1
 8016a2c:	b002      	add	sp, #8
 8016a2e:	bd10      	pop	{r4, pc}

08016a30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8016a30:	4800      	ldr	r0, [pc, #0]	@ (8016a34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x4>)
 8016a32:	4770      	bx	lr
 8016a34:	240010b8 	.word	0x240010b8

08016a38 <autoware_auto_control_msgs__msg__AckermannControlCommand__init>:
 8016a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a3a:	4605      	mov	r5, r0
 8016a3c:	b300      	cbz	r0, 8016a80 <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x48>
 8016a3e:	f000 f971 	bl	8016d24 <builtin_interfaces__msg__Time__init>
 8016a42:	4604      	mov	r4, r0
 8016a44:	b178      	cbz	r0, 8016a66 <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x2e>
 8016a46:	f105 0608 	add.w	r6, r5, #8
 8016a4a:	4630      	mov	r0, r6
 8016a4c:	f000 f842 	bl	8016ad4 <autoware_auto_control_msgs__msg__AckermannLateralCommand__init>
 8016a50:	4604      	mov	r4, r0
 8016a52:	b1c0      	cbz	r0, 8016a86 <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x4e>
 8016a54:	f105 0718 	add.w	r7, r5, #24
 8016a58:	4638      	mov	r0, r7
 8016a5a:	f000 f853 	bl	8016b04 <autoware_auto_control_msgs__msg__LongitudinalCommand__init>
 8016a5e:	4604      	mov	r4, r0
 8016a60:	b1e8      	cbz	r0, 8016a9e <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x66>
 8016a62:	4620      	mov	r0, r4
 8016a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a66:	4628      	mov	r0, r5
 8016a68:	f000 f960 	bl	8016d2c <builtin_interfaces__msg__Time__fini>
 8016a6c:	f105 0008 	add.w	r0, r5, #8
 8016a70:	f000 f844 	bl	8016afc <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>
 8016a74:	f105 0018 	add.w	r0, r5, #24
 8016a78:	f000 f85a 	bl	8016b30 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>
 8016a7c:	4620      	mov	r0, r4
 8016a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a80:	4604      	mov	r4, r0
 8016a82:	4620      	mov	r0, r4
 8016a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a86:	4628      	mov	r0, r5
 8016a88:	f000 f950 	bl	8016d2c <builtin_interfaces__msg__Time__fini>
 8016a8c:	4630      	mov	r0, r6
 8016a8e:	f000 f835 	bl	8016afc <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>
 8016a92:	f105 0018 	add.w	r0, r5, #24
 8016a96:	f000 f84b 	bl	8016b30 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>
 8016a9a:	4620      	mov	r0, r4
 8016a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a9e:	4628      	mov	r0, r5
 8016aa0:	f000 f944 	bl	8016d2c <builtin_interfaces__msg__Time__fini>
 8016aa4:	4630      	mov	r0, r6
 8016aa6:	f000 f829 	bl	8016afc <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>
 8016aaa:	4638      	mov	r0, r7
 8016aac:	f000 f840 	bl	8016b30 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>
 8016ab0:	e7d7      	b.n	8016a62 <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x2a>
 8016ab2:	bf00      	nop

08016ab4 <autoware_auto_control_msgs__msg__AckermannControlCommand__fini>:
 8016ab4:	b168      	cbz	r0, 8016ad2 <autoware_auto_control_msgs__msg__AckermannControlCommand__fini+0x1e>
 8016ab6:	b510      	push	{r4, lr}
 8016ab8:	4604      	mov	r4, r0
 8016aba:	f000 f937 	bl	8016d2c <builtin_interfaces__msg__Time__fini>
 8016abe:	f104 0008 	add.w	r0, r4, #8
 8016ac2:	f000 f81b 	bl	8016afc <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>
 8016ac6:	f104 0018 	add.w	r0, r4, #24
 8016aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ace:	f000 b82f 	b.w	8016b30 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>
 8016ad2:	4770      	bx	lr

08016ad4 <autoware_auto_control_msgs__msg__AckermannLateralCommand__init>:
 8016ad4:	b538      	push	{r3, r4, r5, lr}
 8016ad6:	4604      	mov	r4, r0
 8016ad8:	b140      	cbz	r0, 8016aec <autoware_auto_control_msgs__msg__AckermannLateralCommand__init+0x18>
 8016ada:	f000 f923 	bl	8016d24 <builtin_interfaces__msg__Time__init>
 8016ade:	4605      	mov	r5, r0
 8016ae0:	b138      	cbz	r0, 8016af2 <autoware_auto_control_msgs__msg__AckermannLateralCommand__init+0x1e>
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	4628      	mov	r0, r5
 8016ae6:	60a3      	str	r3, [r4, #8]
 8016ae8:	60e3      	str	r3, [r4, #12]
 8016aea:	bd38      	pop	{r3, r4, r5, pc}
 8016aec:	4605      	mov	r5, r0
 8016aee:	4628      	mov	r0, r5
 8016af0:	bd38      	pop	{r3, r4, r5, pc}
 8016af2:	4620      	mov	r0, r4
 8016af4:	f000 f91a 	bl	8016d2c <builtin_interfaces__msg__Time__fini>
 8016af8:	4628      	mov	r0, r5
 8016afa:	bd38      	pop	{r3, r4, r5, pc}

08016afc <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>:
 8016afc:	b108      	cbz	r0, 8016b02 <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini+0x6>
 8016afe:	f000 b915 	b.w	8016d2c <builtin_interfaces__msg__Time__fini>
 8016b02:	4770      	bx	lr

08016b04 <autoware_auto_control_msgs__msg__LongitudinalCommand__init>:
 8016b04:	b538      	push	{r3, r4, r5, lr}
 8016b06:	4604      	mov	r4, r0
 8016b08:	b148      	cbz	r0, 8016b1e <autoware_auto_control_msgs__msg__LongitudinalCommand__init+0x1a>
 8016b0a:	f000 f90b 	bl	8016d24 <builtin_interfaces__msg__Time__init>
 8016b0e:	4605      	mov	r5, r0
 8016b10:	b140      	cbz	r0, 8016b24 <autoware_auto_control_msgs__msg__LongitudinalCommand__init+0x20>
 8016b12:	2300      	movs	r3, #0
 8016b14:	4628      	mov	r0, r5
 8016b16:	60a3      	str	r3, [r4, #8]
 8016b18:	60e3      	str	r3, [r4, #12]
 8016b1a:	6123      	str	r3, [r4, #16]
 8016b1c:	bd38      	pop	{r3, r4, r5, pc}
 8016b1e:	4605      	mov	r5, r0
 8016b20:	4628      	mov	r0, r5
 8016b22:	bd38      	pop	{r3, r4, r5, pc}
 8016b24:	4620      	mov	r0, r4
 8016b26:	f000 f901 	bl	8016d2c <builtin_interfaces__msg__Time__fini>
 8016b2a:	4628      	mov	r0, r5
 8016b2c:	bd38      	pop	{r3, r4, r5, pc}
 8016b2e:	bf00      	nop

08016b30 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>:
 8016b30:	b108      	cbz	r0, 8016b36 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini+0x6>
 8016b32:	f000 b8fb 	b.w	8016d2c <builtin_interfaces__msg__Time__fini>
 8016b36:	4770      	bx	lr

08016b38 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__init>:
 8016b38:	b538      	push	{r3, r4, r5, lr}
 8016b3a:	4604      	mov	r4, r0
 8016b3c:	b128      	cbz	r0, 8016b4a <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__init+0x12>
 8016b3e:	f000 f8f1 	bl	8016d24 <builtin_interfaces__msg__Time__init>
 8016b42:	4605      	mov	r5, r0
 8016b44:	b120      	cbz	r0, 8016b50 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__init+0x18>
 8016b46:	4628      	mov	r0, r5
 8016b48:	bd38      	pop	{r3, r4, r5, pc}
 8016b4a:	4605      	mov	r5, r0
 8016b4c:	4628      	mov	r0, r5
 8016b4e:	bd38      	pop	{r3, r4, r5, pc}
 8016b50:	4620      	mov	r0, r4
 8016b52:	f000 f8eb 	bl	8016d2c <builtin_interfaces__msg__Time__fini>
 8016b56:	4628      	mov	r0, r5
 8016b58:	bd38      	pop	{r3, r4, r5, pc}
 8016b5a:	bf00      	nop

08016b5c <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__fini>:
 8016b5c:	b108      	cbz	r0, 8016b62 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__fini+0x6>
 8016b5e:	f000 b8e5 	b.w	8016d2c <builtin_interfaces__msg__Time__fini>
 8016b62:	4770      	bx	lr

08016b64 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__init>:
 8016b64:	3800      	subs	r0, #0
 8016b66:	bf18      	it	ne
 8016b68:	2001      	movne	r0, #1
 8016b6a:	4770      	bx	lr

08016b6c <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__fini>:
 8016b6c:	4770      	bx	lr
 8016b6e:	bf00      	nop

08016b70 <autoware_auto_vehicle_msgs__msg__ControlModeReport__init>:
 8016b70:	b538      	push	{r3, r4, r5, lr}
 8016b72:	4604      	mov	r4, r0
 8016b74:	b138      	cbz	r0, 8016b86 <autoware_auto_vehicle_msgs__msg__ControlModeReport__init+0x16>
 8016b76:	f000 f8d5 	bl	8016d24 <builtin_interfaces__msg__Time__init>
 8016b7a:	4605      	mov	r5, r0
 8016b7c:	b130      	cbz	r0, 8016b8c <autoware_auto_vehicle_msgs__msg__ControlModeReport__init+0x1c>
 8016b7e:	2300      	movs	r3, #0
 8016b80:	4628      	mov	r0, r5
 8016b82:	7223      	strb	r3, [r4, #8]
 8016b84:	bd38      	pop	{r3, r4, r5, pc}
 8016b86:	4605      	mov	r5, r0
 8016b88:	4628      	mov	r0, r5
 8016b8a:	bd38      	pop	{r3, r4, r5, pc}
 8016b8c:	4620      	mov	r0, r4
 8016b8e:	f000 f8cd 	bl	8016d2c <builtin_interfaces__msg__Time__fini>
 8016b92:	4628      	mov	r0, r5
 8016b94:	bd38      	pop	{r3, r4, r5, pc}
 8016b96:	bf00      	nop

08016b98 <autoware_auto_vehicle_msgs__msg__ControlModeReport__fini>:
 8016b98:	b108      	cbz	r0, 8016b9e <autoware_auto_vehicle_msgs__msg__ControlModeReport__fini+0x6>
 8016b9a:	f000 b8c7 	b.w	8016d2c <builtin_interfaces__msg__Time__fini>
 8016b9e:	4770      	bx	lr

08016ba0 <autoware_auto_vehicle_msgs__msg__GearCommand__init>:
 8016ba0:	b538      	push	{r3, r4, r5, lr}
 8016ba2:	4604      	mov	r4, r0
 8016ba4:	b138      	cbz	r0, 8016bb6 <autoware_auto_vehicle_msgs__msg__GearCommand__init+0x16>
 8016ba6:	f000 f8bd 	bl	8016d24 <builtin_interfaces__msg__Time__init>
 8016baa:	4605      	mov	r5, r0
 8016bac:	b130      	cbz	r0, 8016bbc <autoware_auto_vehicle_msgs__msg__GearCommand__init+0x1c>
 8016bae:	2300      	movs	r3, #0
 8016bb0:	4628      	mov	r0, r5
 8016bb2:	7223      	strb	r3, [r4, #8]
 8016bb4:	bd38      	pop	{r3, r4, r5, pc}
 8016bb6:	4605      	mov	r5, r0
 8016bb8:	4628      	mov	r0, r5
 8016bba:	bd38      	pop	{r3, r4, r5, pc}
 8016bbc:	4620      	mov	r0, r4
 8016bbe:	f000 f8b5 	bl	8016d2c <builtin_interfaces__msg__Time__fini>
 8016bc2:	4628      	mov	r0, r5
 8016bc4:	bd38      	pop	{r3, r4, r5, pc}
 8016bc6:	bf00      	nop

08016bc8 <autoware_auto_vehicle_msgs__msg__GearCommand__fini>:
 8016bc8:	b108      	cbz	r0, 8016bce <autoware_auto_vehicle_msgs__msg__GearCommand__fini+0x6>
 8016bca:	f000 b8af 	b.w	8016d2c <builtin_interfaces__msg__Time__fini>
 8016bce:	4770      	bx	lr

08016bd0 <autoware_auto_vehicle_msgs__msg__GearReport__init>:
 8016bd0:	b538      	push	{r3, r4, r5, lr}
 8016bd2:	4604      	mov	r4, r0
 8016bd4:	b138      	cbz	r0, 8016be6 <autoware_auto_vehicle_msgs__msg__GearReport__init+0x16>
 8016bd6:	f000 f8a5 	bl	8016d24 <builtin_interfaces__msg__Time__init>
 8016bda:	4605      	mov	r5, r0
 8016bdc:	b130      	cbz	r0, 8016bec <autoware_auto_vehicle_msgs__msg__GearReport__init+0x1c>
 8016bde:	2300      	movs	r3, #0
 8016be0:	4628      	mov	r0, r5
 8016be2:	7223      	strb	r3, [r4, #8]
 8016be4:	bd38      	pop	{r3, r4, r5, pc}
 8016be6:	4605      	mov	r5, r0
 8016be8:	4628      	mov	r0, r5
 8016bea:	bd38      	pop	{r3, r4, r5, pc}
 8016bec:	4620      	mov	r0, r4
 8016bee:	f000 f89d 	bl	8016d2c <builtin_interfaces__msg__Time__fini>
 8016bf2:	4628      	mov	r0, r5
 8016bf4:	bd38      	pop	{r3, r4, r5, pc}
 8016bf6:	bf00      	nop

08016bf8 <autoware_auto_vehicle_msgs__msg__GearReport__fini>:
 8016bf8:	b108      	cbz	r0, 8016bfe <autoware_auto_vehicle_msgs__msg__GearReport__fini+0x6>
 8016bfa:	f000 b897 	b.w	8016d2c <builtin_interfaces__msg__Time__fini>
 8016bfe:	4770      	bx	lr

08016c00 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__init>:
 8016c00:	b538      	push	{r3, r4, r5, lr}
 8016c02:	4604      	mov	r4, r0
 8016c04:	b138      	cbz	r0, 8016c16 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__init+0x16>
 8016c06:	f000 f88d 	bl	8016d24 <builtin_interfaces__msg__Time__init>
 8016c0a:	4605      	mov	r5, r0
 8016c0c:	b130      	cbz	r0, 8016c1c <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__init+0x1c>
 8016c0e:	2300      	movs	r3, #0
 8016c10:	4628      	mov	r0, r5
 8016c12:	7223      	strb	r3, [r4, #8]
 8016c14:	bd38      	pop	{r3, r4, r5, pc}
 8016c16:	4605      	mov	r5, r0
 8016c18:	4628      	mov	r0, r5
 8016c1a:	bd38      	pop	{r3, r4, r5, pc}
 8016c1c:	4620      	mov	r0, r4
 8016c1e:	f000 f885 	bl	8016d2c <builtin_interfaces__msg__Time__fini>
 8016c22:	4628      	mov	r0, r5
 8016c24:	bd38      	pop	{r3, r4, r5, pc}
 8016c26:	bf00      	nop

08016c28 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__fini>:
 8016c28:	b108      	cbz	r0, 8016c2e <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__fini+0x6>
 8016c2a:	f000 b87f 	b.w	8016d2c <builtin_interfaces__msg__Time__fini>
 8016c2e:	4770      	bx	lr

08016c30 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__init>:
 8016c30:	b538      	push	{r3, r4, r5, lr}
 8016c32:	4604      	mov	r4, r0
 8016c34:	b138      	cbz	r0, 8016c46 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__init+0x16>
 8016c36:	f000 f875 	bl	8016d24 <builtin_interfaces__msg__Time__init>
 8016c3a:	4605      	mov	r5, r0
 8016c3c:	b130      	cbz	r0, 8016c4c <autoware_auto_vehicle_msgs__msg__HazardLightsReport__init+0x1c>
 8016c3e:	2300      	movs	r3, #0
 8016c40:	4628      	mov	r0, r5
 8016c42:	7223      	strb	r3, [r4, #8]
 8016c44:	bd38      	pop	{r3, r4, r5, pc}
 8016c46:	4605      	mov	r5, r0
 8016c48:	4628      	mov	r0, r5
 8016c4a:	bd38      	pop	{r3, r4, r5, pc}
 8016c4c:	4620      	mov	r0, r4
 8016c4e:	f000 f86d 	bl	8016d2c <builtin_interfaces__msg__Time__fini>
 8016c52:	4628      	mov	r0, r5
 8016c54:	bd38      	pop	{r3, r4, r5, pc}
 8016c56:	bf00      	nop

08016c58 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__fini>:
 8016c58:	b108      	cbz	r0, 8016c5e <autoware_auto_vehicle_msgs__msg__HazardLightsReport__fini+0x6>
 8016c5a:	f000 b867 	b.w	8016d2c <builtin_interfaces__msg__Time__fini>
 8016c5e:	4770      	bx	lr

08016c60 <autoware_auto_vehicle_msgs__msg__SteeringReport__init>:
 8016c60:	b538      	push	{r3, r4, r5, lr}
 8016c62:	4604      	mov	r4, r0
 8016c64:	b138      	cbz	r0, 8016c76 <autoware_auto_vehicle_msgs__msg__SteeringReport__init+0x16>
 8016c66:	f000 f85d 	bl	8016d24 <builtin_interfaces__msg__Time__init>
 8016c6a:	4605      	mov	r5, r0
 8016c6c:	b130      	cbz	r0, 8016c7c <autoware_auto_vehicle_msgs__msg__SteeringReport__init+0x1c>
 8016c6e:	2300      	movs	r3, #0
 8016c70:	4628      	mov	r0, r5
 8016c72:	60a3      	str	r3, [r4, #8]
 8016c74:	bd38      	pop	{r3, r4, r5, pc}
 8016c76:	4605      	mov	r5, r0
 8016c78:	4628      	mov	r0, r5
 8016c7a:	bd38      	pop	{r3, r4, r5, pc}
 8016c7c:	4620      	mov	r0, r4
 8016c7e:	f000 f855 	bl	8016d2c <builtin_interfaces__msg__Time__fini>
 8016c82:	4628      	mov	r0, r5
 8016c84:	bd38      	pop	{r3, r4, r5, pc}
 8016c86:	bf00      	nop

08016c88 <autoware_auto_vehicle_msgs__msg__SteeringReport__fini>:
 8016c88:	b108      	cbz	r0, 8016c8e <autoware_auto_vehicle_msgs__msg__SteeringReport__fini+0x6>
 8016c8a:	f000 b84f 	b.w	8016d2c <builtin_interfaces__msg__Time__fini>
 8016c8e:	4770      	bx	lr

08016c90 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__init>:
 8016c90:	b538      	push	{r3, r4, r5, lr}
 8016c92:	4604      	mov	r4, r0
 8016c94:	b138      	cbz	r0, 8016ca6 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x16>
 8016c96:	f000 f845 	bl	8016d24 <builtin_interfaces__msg__Time__init>
 8016c9a:	4605      	mov	r5, r0
 8016c9c:	b130      	cbz	r0, 8016cac <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x1c>
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	4628      	mov	r0, r5
 8016ca2:	7223      	strb	r3, [r4, #8]
 8016ca4:	bd38      	pop	{r3, r4, r5, pc}
 8016ca6:	4605      	mov	r5, r0
 8016ca8:	4628      	mov	r0, r5
 8016caa:	bd38      	pop	{r3, r4, r5, pc}
 8016cac:	4620      	mov	r0, r4
 8016cae:	f000 f83d 	bl	8016d2c <builtin_interfaces__msg__Time__fini>
 8016cb2:	4628      	mov	r0, r5
 8016cb4:	bd38      	pop	{r3, r4, r5, pc}
 8016cb6:	bf00      	nop

08016cb8 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__fini>:
 8016cb8:	b108      	cbz	r0, 8016cbe <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__fini+0x6>
 8016cba:	f000 b837 	b.w	8016d2c <builtin_interfaces__msg__Time__fini>
 8016cbe:	4770      	bx	lr

08016cc0 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__init>:
 8016cc0:	b538      	push	{r3, r4, r5, lr}
 8016cc2:	4604      	mov	r4, r0
 8016cc4:	b138      	cbz	r0, 8016cd6 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__init+0x16>
 8016cc6:	f000 f82d 	bl	8016d24 <builtin_interfaces__msg__Time__init>
 8016cca:	4605      	mov	r5, r0
 8016ccc:	b130      	cbz	r0, 8016cdc <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__init+0x1c>
 8016cce:	2300      	movs	r3, #0
 8016cd0:	4628      	mov	r0, r5
 8016cd2:	7223      	strb	r3, [r4, #8]
 8016cd4:	bd38      	pop	{r3, r4, r5, pc}
 8016cd6:	4605      	mov	r5, r0
 8016cd8:	4628      	mov	r0, r5
 8016cda:	bd38      	pop	{r3, r4, r5, pc}
 8016cdc:	4620      	mov	r0, r4
 8016cde:	f000 f825 	bl	8016d2c <builtin_interfaces__msg__Time__fini>
 8016ce2:	4628      	mov	r0, r5
 8016ce4:	bd38      	pop	{r3, r4, r5, pc}
 8016ce6:	bf00      	nop

08016ce8 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__fini>:
 8016ce8:	b108      	cbz	r0, 8016cee <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__fini+0x6>
 8016cea:	f000 b81f 	b.w	8016d2c <builtin_interfaces__msg__Time__fini>
 8016cee:	4770      	bx	lr

08016cf0 <autoware_auto_vehicle_msgs__msg__VelocityReport__init>:
 8016cf0:	b538      	push	{r3, r4, r5, lr}
 8016cf2:	4604      	mov	r4, r0
 8016cf4:	b148      	cbz	r0, 8016d0a <autoware_auto_vehicle_msgs__msg__VelocityReport__init+0x1a>
 8016cf6:	f008 ff07 	bl	801fb08 <std_msgs__msg__Header__init>
 8016cfa:	4605      	mov	r5, r0
 8016cfc:	b140      	cbz	r0, 8016d10 <autoware_auto_vehicle_msgs__msg__VelocityReport__init+0x20>
 8016cfe:	2300      	movs	r3, #0
 8016d00:	4628      	mov	r0, r5
 8016d02:	6163      	str	r3, [r4, #20]
 8016d04:	61a3      	str	r3, [r4, #24]
 8016d06:	61e3      	str	r3, [r4, #28]
 8016d08:	bd38      	pop	{r3, r4, r5, pc}
 8016d0a:	4605      	mov	r5, r0
 8016d0c:	4628      	mov	r0, r5
 8016d0e:	bd38      	pop	{r3, r4, r5, pc}
 8016d10:	4620      	mov	r0, r4
 8016d12:	f008 ff1d 	bl	801fb50 <std_msgs__msg__Header__fini>
 8016d16:	4628      	mov	r0, r5
 8016d18:	bd38      	pop	{r3, r4, r5, pc}
 8016d1a:	bf00      	nop

08016d1c <autoware_auto_vehicle_msgs__msg__VelocityReport__fini>:
 8016d1c:	b108      	cbz	r0, 8016d22 <autoware_auto_vehicle_msgs__msg__VelocityReport__fini+0x6>
 8016d1e:	f008 bf17 	b.w	801fb50 <std_msgs__msg__Header__fini>
 8016d22:	4770      	bx	lr

08016d24 <builtin_interfaces__msg__Time__init>:
 8016d24:	3800      	subs	r0, #0
 8016d26:	bf18      	it	ne
 8016d28:	2001      	movne	r0, #1
 8016d2a:	4770      	bx	lr

08016d2c <builtin_interfaces__msg__Time__fini>:
 8016d2c:	4770      	bx	lr
 8016d2e:	bf00      	nop

08016d30 <ucdr_serialize_sequence_char>:
 8016d30:	b570      	push	{r4, r5, r6, lr}
 8016d32:	4615      	mov	r5, r2
 8016d34:	460e      	mov	r6, r1
 8016d36:	7d01      	ldrb	r1, [r0, #20]
 8016d38:	4604      	mov	r4, r0
 8016d3a:	f7fc fa59 	bl	80131f0 <ucdr_serialize_endian_uint32_t>
 8016d3e:	b90d      	cbnz	r5, 8016d44 <ucdr_serialize_sequence_char+0x14>
 8016d40:	2001      	movs	r0, #1
 8016d42:	bd70      	pop	{r4, r5, r6, pc}
 8016d44:	462b      	mov	r3, r5
 8016d46:	4632      	mov	r2, r6
 8016d48:	7d21      	ldrb	r1, [r4, #20]
 8016d4a:	4620      	mov	r0, r4
 8016d4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d50:	f009 b8d2 	b.w	801fef8 <ucdr_serialize_endian_array_char>

08016d54 <ucdr_deserialize_sequence_char>:
 8016d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d58:	461d      	mov	r5, r3
 8016d5a:	4616      	mov	r6, r2
 8016d5c:	460f      	mov	r7, r1
 8016d5e:	461a      	mov	r2, r3
 8016d60:	7d01      	ldrb	r1, [r0, #20]
 8016d62:	4604      	mov	r4, r0
 8016d64:	f7fc fb6c 	bl	8013440 <ucdr_deserialize_endian_uint32_t>
 8016d68:	682b      	ldr	r3, [r5, #0]
 8016d6a:	429e      	cmp	r6, r3
 8016d6c:	d201      	bcs.n	8016d72 <ucdr_deserialize_sequence_char+0x1e>
 8016d6e:	2201      	movs	r2, #1
 8016d70:	75a2      	strb	r2, [r4, #22]
 8016d72:	b913      	cbnz	r3, 8016d7a <ucdr_deserialize_sequence_char+0x26>
 8016d74:	2001      	movs	r0, #1
 8016d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d7a:	463a      	mov	r2, r7
 8016d7c:	7d21      	ldrb	r1, [r4, #20]
 8016d7e:	4620      	mov	r0, r4
 8016d80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016d84:	f009 b8ea 	b.w	801ff5c <ucdr_deserialize_endian_array_char>

08016d88 <ucdr_serialize_sequence_uint8_t>:
 8016d88:	b570      	push	{r4, r5, r6, lr}
 8016d8a:	4615      	mov	r5, r2
 8016d8c:	460e      	mov	r6, r1
 8016d8e:	7d01      	ldrb	r1, [r0, #20]
 8016d90:	4604      	mov	r4, r0
 8016d92:	f7fc fa2d 	bl	80131f0 <ucdr_serialize_endian_uint32_t>
 8016d96:	b90d      	cbnz	r5, 8016d9c <ucdr_serialize_sequence_uint8_t+0x14>
 8016d98:	2001      	movs	r0, #1
 8016d9a:	bd70      	pop	{r4, r5, r6, pc}
 8016d9c:	462b      	mov	r3, r5
 8016d9e:	4632      	mov	r2, r6
 8016da0:	7d21      	ldrb	r1, [r4, #20]
 8016da2:	4620      	mov	r0, r4
 8016da4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016da8:	f009 b93e 	b.w	8020028 <ucdr_serialize_endian_array_uint8_t>

08016dac <ucdr_deserialize_sequence_uint8_t>:
 8016dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016db0:	461d      	mov	r5, r3
 8016db2:	4616      	mov	r6, r2
 8016db4:	460f      	mov	r7, r1
 8016db6:	461a      	mov	r2, r3
 8016db8:	7d01      	ldrb	r1, [r0, #20]
 8016dba:	4604      	mov	r4, r0
 8016dbc:	f7fc fb40 	bl	8013440 <ucdr_deserialize_endian_uint32_t>
 8016dc0:	682b      	ldr	r3, [r5, #0]
 8016dc2:	429e      	cmp	r6, r3
 8016dc4:	d201      	bcs.n	8016dca <ucdr_deserialize_sequence_uint8_t+0x1e>
 8016dc6:	2201      	movs	r2, #1
 8016dc8:	75a2      	strb	r2, [r4, #22]
 8016dca:	b913      	cbnz	r3, 8016dd2 <ucdr_deserialize_sequence_uint8_t+0x26>
 8016dcc:	2001      	movs	r0, #1
 8016dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016dd2:	463a      	mov	r2, r7
 8016dd4:	7d21      	ldrb	r1, [r4, #20]
 8016dd6:	4620      	mov	r0, r4
 8016dd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ddc:	f009 b98a 	b.w	80200f4 <ucdr_deserialize_endian_array_uint8_t>

08016de0 <uxr_buffer_delete_entity>:
 8016de0:	b510      	push	{r4, lr}
 8016de2:	2300      	movs	r3, #0
 8016de4:	b08e      	sub	sp, #56	@ 0x38
 8016de6:	4604      	mov	r4, r0
 8016de8:	9103      	str	r1, [sp, #12]
 8016dea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8016dee:	2303      	movs	r3, #3
 8016df0:	2204      	movs	r2, #4
 8016df2:	9300      	str	r3, [sp, #0]
 8016df4:	ab06      	add	r3, sp, #24
 8016df6:	f001 fbcb 	bl	8018590 <uxr_prepare_stream_to_write_submessage>
 8016dfa:	b918      	cbnz	r0, 8016e04 <uxr_buffer_delete_entity+0x24>
 8016dfc:	4604      	mov	r4, r0
 8016dfe:	4620      	mov	r0, r4
 8016e00:	b00e      	add	sp, #56	@ 0x38
 8016e02:	bd10      	pop	{r4, pc}
 8016e04:	9902      	ldr	r1, [sp, #8]
 8016e06:	aa05      	add	r2, sp, #20
 8016e08:	4620      	mov	r0, r4
 8016e0a:	f001 fcfd 	bl	8018808 <uxr_init_base_object_request>
 8016e0e:	4604      	mov	r4, r0
 8016e10:	a905      	add	r1, sp, #20
 8016e12:	a806      	add	r0, sp, #24
 8016e14:	f003 fc18 	bl	801a648 <uxr_serialize_DELETE_Payload>
 8016e18:	4620      	mov	r0, r4
 8016e1a:	b00e      	add	sp, #56	@ 0x38
 8016e1c:	bd10      	pop	{r4, pc}
 8016e1e:	bf00      	nop

08016e20 <uxr_common_create_entity>:
 8016e20:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8016e24:	b510      	push	{r4, lr}
 8016e26:	f1bc 0f01 	cmp.w	ip, #1
 8016e2a:	b08c      	sub	sp, #48	@ 0x30
 8016e2c:	4604      	mov	r4, r0
 8016e2e:	9202      	str	r2, [sp, #8]
 8016e30:	bf0c      	ite	eq
 8016e32:	f003 0201 	andeq.w	r2, r3, #1
 8016e36:	2200      	movne	r2, #0
 8016e38:	330e      	adds	r3, #14
 8016e3a:	9103      	str	r1, [sp, #12]
 8016e3c:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8016e40:	441a      	add	r2, r3
 8016e42:	ab04      	add	r3, sp, #16
 8016e44:	9101      	str	r1, [sp, #4]
 8016e46:	2101      	movs	r1, #1
 8016e48:	b292      	uxth	r2, r2
 8016e4a:	9100      	str	r1, [sp, #0]
 8016e4c:	9903      	ldr	r1, [sp, #12]
 8016e4e:	f001 fb9f 	bl	8018590 <uxr_prepare_stream_to_write_submessage>
 8016e52:	b918      	cbnz	r0, 8016e5c <uxr_common_create_entity+0x3c>
 8016e54:	4604      	mov	r4, r0
 8016e56:	4620      	mov	r0, r4
 8016e58:	b00c      	add	sp, #48	@ 0x30
 8016e5a:	bd10      	pop	{r4, pc}
 8016e5c:	9902      	ldr	r1, [sp, #8]
 8016e5e:	4620      	mov	r0, r4
 8016e60:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016e62:	f001 fcd1 	bl	8018808 <uxr_init_base_object_request>
 8016e66:	4604      	mov	r4, r0
 8016e68:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8016e6a:	a804      	add	r0, sp, #16
 8016e6c:	f003 fb30 	bl	801a4d0 <uxr_serialize_CREATE_Payload>
 8016e70:	4620      	mov	r0, r4
 8016e72:	b00c      	add	sp, #48	@ 0x30
 8016e74:	bd10      	pop	{r4, pc}
 8016e76:	bf00      	nop

08016e78 <uxr_buffer_create_participant_bin>:
 8016e78:	b570      	push	{r4, r5, r6, lr}
 8016e7a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8016e7e:	4605      	mov	r5, r0
 8016e80:	ac11      	add	r4, sp, #68	@ 0x44
 8016e82:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8016e86:	2303      	movs	r3, #3
 8016e88:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8016e8c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8016e90:	7223      	strb	r3, [r4, #8]
 8016e92:	2300      	movs	r3, #0
 8016e94:	2201      	movs	r2, #1
 8016e96:	f88d 3014 	strb.w	r3, [sp, #20]
 8016e9a:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8016e9c:	7122      	strb	r2, [r4, #4]
 8016e9e:	b1cb      	cbz	r3, 8016ed4 <uxr_buffer_create_participant_bin+0x5c>
 8016ea0:	f88d 201c 	strb.w	r2, [sp, #28]
 8016ea4:	9308      	str	r3, [sp, #32]
 8016ea6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016eaa:	a915      	add	r1, sp, #84	@ 0x54
 8016eac:	a809      	add	r0, sp, #36	@ 0x24
 8016eae:	f7fd f95b 	bl	8014168 <ucdr_init_buffer>
 8016eb2:	a905      	add	r1, sp, #20
 8016eb4:	a809      	add	r0, sp, #36	@ 0x24
 8016eb6:	f002 fec1 	bl	8019c3c <uxr_serialize_OBJK_DomainParticipant_Binary>
 8016eba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016ebc:	9600      	str	r6, [sp, #0]
 8016ebe:	4628      	mov	r0, r5
 8016ec0:	9401      	str	r4, [sp, #4]
 8016ec2:	60e3      	str	r3, [r4, #12]
 8016ec4:	b29b      	uxth	r3, r3
 8016ec6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8016eca:	f7ff ffa9 	bl	8016e20 <uxr_common_create_entity>
 8016ece:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8016ed2:	bd70      	pop	{r4, r5, r6, pc}
 8016ed4:	f88d 301c 	strb.w	r3, [sp, #28]
 8016ed8:	e7e5      	b.n	8016ea6 <uxr_buffer_create_participant_bin+0x2e>
 8016eda:	bf00      	nop

08016edc <uxr_buffer_create_topic_bin>:
 8016edc:	b570      	push	{r4, r5, r6, lr}
 8016ede:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8016ee2:	4605      	mov	r5, r0
 8016ee4:	4618      	mov	r0, r3
 8016ee6:	9105      	str	r1, [sp, #20]
 8016ee8:	a997      	add	r1, sp, #604	@ 0x25c
 8016eea:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8016eee:	ac13      	add	r4, sp, #76	@ 0x4c
 8016ef0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8016ef4:	2302      	movs	r3, #2
 8016ef6:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8016efa:	f000 fa8d 	bl	8017418 <uxr_object_id_to_raw>
 8016efe:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8016f00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016f04:	a917      	add	r1, sp, #92	@ 0x5c
 8016f06:	a80b      	add	r0, sp, #44	@ 0x2c
 8016f08:	9306      	str	r3, [sp, #24]
 8016f0a:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8016f0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8016f0e:	2303      	movs	r3, #3
 8016f10:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8016f14:	2301      	movs	r3, #1
 8016f16:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8016f1a:	2300      	movs	r3, #0
 8016f1c:	f88d 301c 	strb.w	r3, [sp, #28]
 8016f20:	f7fd f922 	bl	8014168 <ucdr_init_buffer>
 8016f24:	a906      	add	r1, sp, #24
 8016f26:	a80b      	add	r0, sp, #44	@ 0x2c
 8016f28:	f002 feaa 	bl	8019c80 <uxr_serialize_OBJK_Topic_Binary>
 8016f2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016f2e:	4628      	mov	r0, r5
 8016f30:	9600      	str	r6, [sp, #0]
 8016f32:	9316      	str	r3, [sp, #88]	@ 0x58
 8016f34:	b29b      	uxth	r3, r3
 8016f36:	9401      	str	r4, [sp, #4]
 8016f38:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8016f3c:	f7ff ff70 	bl	8016e20 <uxr_common_create_entity>
 8016f40:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8016f44:	bd70      	pop	{r4, r5, r6, pc}
 8016f46:	bf00      	nop

08016f48 <uxr_buffer_create_publisher_bin>:
 8016f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f4a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8016f4e:	2603      	movs	r6, #3
 8016f50:	4605      	mov	r5, r0
 8016f52:	4618      	mov	r0, r3
 8016f54:	9105      	str	r1, [sp, #20]
 8016f56:	a992      	add	r1, sp, #584	@ 0x248
 8016f58:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8016f5c:	ac0e      	add	r4, sp, #56	@ 0x38
 8016f5e:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8016f62:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8016f66:	f000 fa57 	bl	8017418 <uxr_object_id_to_raw>
 8016f6a:	2300      	movs	r3, #0
 8016f6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016f70:	a912      	add	r1, sp, #72	@ 0x48
 8016f72:	a806      	add	r0, sp, #24
 8016f74:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8016f78:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8016f7c:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8016f80:	f7fd f8f2 	bl	8014168 <ucdr_init_buffer>
 8016f84:	a993      	add	r1, sp, #588	@ 0x24c
 8016f86:	a806      	add	r0, sp, #24
 8016f88:	f002 ff2e 	bl	8019de8 <uxr_serialize_OBJK_Publisher_Binary>
 8016f8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016f8e:	4628      	mov	r0, r5
 8016f90:	9700      	str	r7, [sp, #0]
 8016f92:	9311      	str	r3, [sp, #68]	@ 0x44
 8016f94:	b29b      	uxth	r3, r3
 8016f96:	9401      	str	r4, [sp, #4]
 8016f98:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8016f9c:	f7ff ff40 	bl	8016e20 <uxr_common_create_entity>
 8016fa0:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8016fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fa6:	bf00      	nop

08016fa8 <uxr_buffer_create_subscriber_bin>:
 8016fa8:	b570      	push	{r4, r5, r6, lr}
 8016faa:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 8016fae:	4605      	mov	r5, r0
 8016fb0:	4618      	mov	r0, r3
 8016fb2:	9105      	str	r1, [sp, #20]
 8016fb4:	a992      	add	r1, sp, #584	@ 0x248
 8016fb6:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 8016fba:	ac0e      	add	r4, sp, #56	@ 0x38
 8016fbc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8016fc0:	2304      	movs	r3, #4
 8016fc2:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8016fc6:	f000 fa27 	bl	8017418 <uxr_object_id_to_raw>
 8016fca:	2300      	movs	r3, #0
 8016fcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016fd0:	a912      	add	r1, sp, #72	@ 0x48
 8016fd2:	a806      	add	r0, sp, #24
 8016fd4:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8016fd8:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8016fdc:	2303      	movs	r3, #3
 8016fde:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8016fe2:	f7fd f8c1 	bl	8014168 <ucdr_init_buffer>
 8016fe6:	a993      	add	r1, sp, #588	@ 0x24c
 8016fe8:	a806      	add	r0, sp, #24
 8016fea:	f002 ffad 	bl	8019f48 <uxr_serialize_OBJK_Subscriber_Binary>
 8016fee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016ff0:	4628      	mov	r0, r5
 8016ff2:	9600      	str	r6, [sp, #0]
 8016ff4:	9311      	str	r3, [sp, #68]	@ 0x44
 8016ff6:	b29b      	uxth	r3, r3
 8016ff8:	9401      	str	r4, [sp, #4]
 8016ffa:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8016ffe:	f7ff ff0f 	bl	8016e20 <uxr_common_create_entity>
 8017002:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 8017006:	bd70      	pop	{r4, r5, r6, pc}

08017008 <uxr_buffer_create_datawriter_bin>:
 8017008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801700c:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8017010:	4606      	mov	r6, r0
 8017012:	4618      	mov	r0, r3
 8017014:	2703      	movs	r7, #3
 8017016:	ac1d      	add	r4, sp, #116	@ 0x74
 8017018:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 801701c:	9105      	str	r1, [sp, #20]
 801701e:	a9a1      	add	r1, sp, #644	@ 0x284
 8017020:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8017024:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017028:	2305      	movs	r3, #5
 801702a:	7123      	strb	r3, [r4, #4]
 801702c:	f000 f9f4 	bl	8017418 <uxr_object_id_to_raw>
 8017030:	a90e      	add	r1, sp, #56	@ 0x38
 8017032:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8017034:	7227      	strb	r7, [r4, #8]
 8017036:	f000 f9ef 	bl	8017418 <uxr_object_id_to_raw>
 801703a:	2300      	movs	r3, #0
 801703c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8017040:	3d00      	subs	r5, #0
 8017042:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8017046:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801704a:	bf18      	it	ne
 801704c:	2501      	movne	r5, #1
 801704e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8017052:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8017056:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801705a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801705e:	2301      	movs	r3, #1
 8017060:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8017064:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8017068:	bb8a      	cbnz	r2, 80170ce <uxr_buffer_create_datawriter_bin+0xc6>
 801706a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801706e:	f04f 0c13 	mov.w	ip, #19
 8017072:	250b      	movs	r5, #11
 8017074:	2221      	movs	r2, #33	@ 0x21
 8017076:	2111      	movs	r1, #17
 8017078:	2009      	movs	r0, #9
 801707a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801707e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8017082:	b923      	cbnz	r3, 801708e <uxr_buffer_create_datawriter_bin+0x86>
 8017084:	4672      	mov	r2, lr
 8017086:	4661      	mov	r1, ip
 8017088:	4628      	mov	r0, r5
 801708a:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801708e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8017092:	2b01      	cmp	r3, #1
 8017094:	d025      	beq.n	80170e2 <uxr_buffer_create_datawriter_bin+0xda>
 8017096:	2b03      	cmp	r3, #3
 8017098:	d029      	beq.n	80170ee <uxr_buffer_create_datawriter_bin+0xe6>
 801709a:	b32b      	cbz	r3, 80170e8 <uxr_buffer_create_datawriter_bin+0xe0>
 801709c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80170a0:	a921      	add	r1, sp, #132	@ 0x84
 80170a2:	a806      	add	r0, sp, #24
 80170a4:	f7fd f860 	bl	8014168 <ucdr_init_buffer>
 80170a8:	a90e      	add	r1, sp, #56	@ 0x38
 80170aa:	a806      	add	r0, sp, #24
 80170ac:	f002 fffe 	bl	801a0ac <uxr_serialize_OBJK_DataWriter_Binary>
 80170b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80170b2:	f8cd 8000 	str.w	r8, [sp]
 80170b6:	4630      	mov	r0, r6
 80170b8:	9401      	str	r4, [sp, #4]
 80170ba:	60e3      	str	r3, [r4, #12]
 80170bc:	b29b      	uxth	r3, r3
 80170be:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80170c2:	f7ff fead 	bl	8016e20 <uxr_common_create_entity>
 80170c6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80170ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170ce:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80170d2:	f04f 0c12 	mov.w	ip, #18
 80170d6:	250a      	movs	r5, #10
 80170d8:	2220      	movs	r2, #32
 80170da:	2110      	movs	r1, #16
 80170dc:	2008      	movs	r0, #8
 80170de:	2702      	movs	r7, #2
 80170e0:	e7cd      	b.n	801707e <uxr_buffer_create_datawriter_bin+0x76>
 80170e2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80170e6:	e7d9      	b.n	801709c <uxr_buffer_create_datawriter_bin+0x94>
 80170e8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80170ec:	e7d6      	b.n	801709c <uxr_buffer_create_datawriter_bin+0x94>
 80170ee:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80170f2:	e7d3      	b.n	801709c <uxr_buffer_create_datawriter_bin+0x94>

080170f4 <uxr_buffer_create_datareader_bin>:
 80170f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170f8:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80170fc:	4606      	mov	r6, r0
 80170fe:	4618      	mov	r0, r3
 8017100:	2703      	movs	r7, #3
 8017102:	ac1f      	add	r4, sp, #124	@ 0x7c
 8017104:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 8017108:	9105      	str	r1, [sp, #20]
 801710a:	a9a3      	add	r1, sp, #652	@ 0x28c
 801710c:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 8017110:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017114:	2306      	movs	r3, #6
 8017116:	7123      	strb	r3, [r4, #4]
 8017118:	f000 f97e 	bl	8017418 <uxr_object_id_to_raw>
 801711c:	a90e      	add	r1, sp, #56	@ 0x38
 801711e:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 8017120:	7227      	strb	r7, [r4, #8]
 8017122:	f000 f979 	bl	8017418 <uxr_object_id_to_raw>
 8017126:	2300      	movs	r3, #0
 8017128:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 801712c:	3d00      	subs	r5, #0
 801712e:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 8017132:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8017136:	bf18      	it	ne
 8017138:	2501      	movne	r5, #1
 801713a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801713e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8017142:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8017146:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801714a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801714e:	2301      	movs	r3, #1
 8017150:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8017154:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8017158:	bb8a      	cbnz	r2, 80171be <uxr_buffer_create_datareader_bin+0xca>
 801715a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801715e:	f04f 0c13 	mov.w	ip, #19
 8017162:	250b      	movs	r5, #11
 8017164:	2221      	movs	r2, #33	@ 0x21
 8017166:	2111      	movs	r1, #17
 8017168:	2009      	movs	r0, #9
 801716a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801716e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 8017172:	b923      	cbnz	r3, 801717e <uxr_buffer_create_datareader_bin+0x8a>
 8017174:	4672      	mov	r2, lr
 8017176:	4661      	mov	r1, ip
 8017178:	4628      	mov	r0, r5
 801717a:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801717e:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 8017182:	2b01      	cmp	r3, #1
 8017184:	d025      	beq.n	80171d2 <uxr_buffer_create_datareader_bin+0xde>
 8017186:	2b03      	cmp	r3, #3
 8017188:	d029      	beq.n	80171de <uxr_buffer_create_datareader_bin+0xea>
 801718a:	b32b      	cbz	r3, 80171d8 <uxr_buffer_create_datareader_bin+0xe4>
 801718c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017190:	a923      	add	r1, sp, #140	@ 0x8c
 8017192:	a806      	add	r0, sp, #24
 8017194:	f7fc ffe8 	bl	8014168 <ucdr_init_buffer>
 8017198:	a90e      	add	r1, sp, #56	@ 0x38
 801719a:	a806      	add	r0, sp, #24
 801719c:	f002 ff4a 	bl	801a034 <uxr_serialize_OBJK_DataReader_Binary>
 80171a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80171a2:	f8cd 8000 	str.w	r8, [sp]
 80171a6:	4630      	mov	r0, r6
 80171a8:	9401      	str	r4, [sp, #4]
 80171aa:	60e3      	str	r3, [r4, #12]
 80171ac:	b29b      	uxth	r3, r3
 80171ae:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80171b2:	f7ff fe35 	bl	8016e20 <uxr_common_create_entity>
 80171b6:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80171ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171be:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80171c2:	f04f 0c12 	mov.w	ip, #18
 80171c6:	250a      	movs	r5, #10
 80171c8:	2220      	movs	r2, #32
 80171ca:	2110      	movs	r1, #16
 80171cc:	2008      	movs	r0, #8
 80171ce:	2702      	movs	r7, #2
 80171d0:	e7cd      	b.n	801716e <uxr_buffer_create_datareader_bin+0x7a>
 80171d2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80171d6:	e7d9      	b.n	801718c <uxr_buffer_create_datareader_bin+0x98>
 80171d8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80171dc:	e7d6      	b.n	801718c <uxr_buffer_create_datareader_bin+0x98>
 80171de:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80171e2:	e7d3      	b.n	801718c <uxr_buffer_create_datareader_bin+0x98>

080171e4 <uxr_buffer_create_replier_bin>:
 80171e4:	b570      	push	{r4, r5, r6, lr}
 80171e6:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 80171ea:	4605      	mov	r5, r0
 80171ec:	4618      	mov	r0, r3
 80171ee:	9105      	str	r1, [sp, #20]
 80171f0:	a999      	add	r1, sp, #612	@ 0x264
 80171f2:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 80171f6:	ac15      	add	r4, sp, #84	@ 0x54
 80171f8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80171fc:	2308      	movs	r3, #8
 80171fe:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 8017202:	f000 f909 	bl	8017418 <uxr_object_id_to_raw>
 8017206:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 8017208:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801720c:	a919      	add	r1, sp, #100	@ 0x64
 801720e:	a80d      	add	r0, sp, #52	@ 0x34
 8017210:	9306      	str	r3, [sp, #24]
 8017212:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 8017214:	9307      	str	r3, [sp, #28]
 8017216:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 8017218:	9308      	str	r3, [sp, #32]
 801721a:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 801721c:	930c      	str	r3, [sp, #48]	@ 0x30
 801721e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017220:	930a      	str	r3, [sp, #40]	@ 0x28
 8017222:	2301      	movs	r3, #1
 8017224:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8017228:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801722c:	2303      	movs	r3, #3
 801722e:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 8017232:	f7fc ff99 	bl	8014168 <ucdr_init_buffer>
 8017236:	a906      	add	r1, sp, #24
 8017238:	a80d      	add	r0, sp, #52	@ 0x34
 801723a:	f002 ff63 	bl	801a104 <uxr_serialize_OBJK_Replier_Binary>
 801723e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017240:	4628      	mov	r0, r5
 8017242:	9600      	str	r6, [sp, #0]
 8017244:	9318      	str	r3, [sp, #96]	@ 0x60
 8017246:	b29b      	uxth	r3, r3
 8017248:	9401      	str	r4, [sp, #4]
 801724a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801724e:	f7ff fde7 	bl	8016e20 <uxr_common_create_entity>
 8017252:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 8017256:	bd70      	pop	{r4, r5, r6, pc}

08017258 <get_custom_error>:
 8017258:	4b01      	ldr	r3, [pc, #4]	@ (8017260 <get_custom_error+0x8>)
 801725a:	7818      	ldrb	r0, [r3, #0]
 801725c:	4770      	bx	lr
 801725e:	bf00      	nop
 8017260:	24069274 	.word	0x24069274

08017264 <recv_custom_msg>:
 8017264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017268:	4693      	mov	fp, r2
 801726a:	b089      	sub	sp, #36	@ 0x24
 801726c:	2200      	movs	r2, #0
 801726e:	4604      	mov	r4, r0
 8017270:	468a      	mov	sl, r1
 8017272:	9305      	str	r3, [sp, #20]
 8017274:	f88d 201e 	strb.w	r2, [sp, #30]
 8017278:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 801727c:	b322      	cbz	r2, 80172c8 <recv_custom_msg+0x64>
 801727e:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8017282:	f10d 081f 	add.w	r8, sp, #31
 8017286:	af05      	add	r7, sp, #20
 8017288:	f10d 061e 	add.w	r6, sp, #30
 801728c:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8017290:	e002      	b.n	8017298 <recv_custom_msg+0x34>
 8017292:	9b05      	ldr	r3, [sp, #20]
 8017294:	2b00      	cmp	r3, #0
 8017296:	dd0f      	ble.n	80172b8 <recv_custom_msg+0x54>
 8017298:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 801729c:	4623      	mov	r3, r4
 801729e:	4622      	mov	r2, r4
 80172a0:	4648      	mov	r0, r9
 80172a2:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80172a6:	e9cd 5600 	strd	r5, r6, [sp]
 80172aa:	f001 fcc3 	bl	8018c34 <uxr_read_framed_msg>
 80172ae:	2800      	cmp	r0, #0
 80172b0:	d0ef      	beq.n	8017292 <recv_custom_msg+0x2e>
 80172b2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80172b6:	b1b3      	cbz	r3, 80172e6 <recv_custom_msg+0x82>
 80172b8:	4b0f      	ldr	r3, [pc, #60]	@ (80172f8 <recv_custom_msg+0x94>)
 80172ba:	2000      	movs	r0, #0
 80172bc:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80172c0:	701a      	strb	r2, [r3, #0]
 80172c2:	b009      	add	sp, #36	@ 0x24
 80172c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172c8:	f10d 021f 	add.w	r2, sp, #31
 80172cc:	4601      	mov	r1, r0
 80172ce:	9200      	str	r2, [sp, #0]
 80172d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80172d4:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 80172d8:	47a8      	blx	r5
 80172da:	2800      	cmp	r0, #0
 80172dc:	d0ec      	beq.n	80172b8 <recv_custom_msg+0x54>
 80172de:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d1e8      	bne.n	80172b8 <recv_custom_msg+0x54>
 80172e6:	f8cb 0000 	str.w	r0, [fp]
 80172ea:	2001      	movs	r0, #1
 80172ec:	f8ca 4000 	str.w	r4, [sl]
 80172f0:	b009      	add	sp, #36	@ 0x24
 80172f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172f6:	bf00      	nop
 80172f8:	24069274 	.word	0x24069274

080172fc <send_custom_msg>:
 80172fc:	b530      	push	{r4, r5, lr}
 80172fe:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8017302:	b087      	sub	sp, #28
 8017304:	4614      	mov	r4, r2
 8017306:	b995      	cbnz	r5, 801732e <send_custom_msg+0x32>
 8017308:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 801730c:	f10d 0317 	add.w	r3, sp, #23
 8017310:	47a8      	blx	r5
 8017312:	1e03      	subs	r3, r0, #0
 8017314:	bf18      	it	ne
 8017316:	2301      	movne	r3, #1
 8017318:	42a0      	cmp	r0, r4
 801731a:	bf18      	it	ne
 801731c:	2300      	movne	r3, #0
 801731e:	b91b      	cbnz	r3, 8017328 <send_custom_msg+0x2c>
 8017320:	4a0a      	ldr	r2, [pc, #40]	@ (801734c <send_custom_msg+0x50>)
 8017322:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8017326:	7011      	strb	r1, [r2, #0]
 8017328:	4618      	mov	r0, r3
 801732a:	b007      	add	sp, #28
 801732c:	bd30      	pop	{r4, r5, pc}
 801732e:	460b      	mov	r3, r1
 8017330:	2200      	movs	r2, #0
 8017332:	f10d 0117 	add.w	r1, sp, #23
 8017336:	9400      	str	r4, [sp, #0]
 8017338:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801733c:	4602      	mov	r2, r0
 801733e:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8017342:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8017346:	f001 fa97 	bl	8018878 <uxr_write_framed_msg>
 801734a:	e7e2      	b.n	8017312 <send_custom_msg+0x16>
 801734c:	24069274 	.word	0x24069274

08017350 <uxr_set_custom_transport_callbacks>:
 8017350:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8017354:	9901      	ldr	r1, [sp, #4]
 8017356:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 801735a:	9b00      	ldr	r3, [sp, #0]
 801735c:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 8017360:	4770      	bx	lr
 8017362:	bf00      	nop

08017364 <uxr_init_custom_transport>:
 8017364:	b538      	push	{r3, r4, r5, lr}
 8017366:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801736a:	b303      	cbz	r3, 80173ae <uxr_init_custom_transport+0x4a>
 801736c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8017370:	4604      	mov	r4, r0
 8017372:	b1e2      	cbz	r2, 80173ae <uxr_init_custom_transport+0x4a>
 8017374:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8017378:	b1ca      	cbz	r2, 80173ae <uxr_init_custom_transport+0x4a>
 801737a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801737e:	b1b2      	cbz	r2, 80173ae <uxr_init_custom_transport+0x4a>
 8017380:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8017384:	4798      	blx	r3
 8017386:	4605      	mov	r5, r0
 8017388:	b188      	cbz	r0, 80173ae <uxr_init_custom_transport+0x4a>
 801738a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801738e:	b98b      	cbnz	r3, 80173b4 <uxr_init_custom_transport+0x50>
 8017390:	4b0b      	ldr	r3, [pc, #44]	@ (80173c0 <uxr_init_custom_transport+0x5c>)
 8017392:	4628      	mov	r0, r5
 8017394:	490b      	ldr	r1, [pc, #44]	@ (80173c4 <uxr_init_custom_transport+0x60>)
 8017396:	4a0c      	ldr	r2, [pc, #48]	@ (80173c8 <uxr_init_custom_transport+0x64>)
 8017398:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 801739c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80173a0:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 80173a4:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 80173a8:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80173ac:	bd38      	pop	{r3, r4, r5, pc}
 80173ae:	2500      	movs	r5, #0
 80173b0:	4628      	mov	r0, r5
 80173b2:	bd38      	pop	{r3, r4, r5, pc}
 80173b4:	2100      	movs	r1, #0
 80173b6:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80173ba:	f001 fa57 	bl	801886c <uxr_init_framing_io>
 80173be:	e7e7      	b.n	8017390 <uxr_init_custom_transport+0x2c>
 80173c0:	08017265 	.word	0x08017265
 80173c4:	080172fd 	.word	0x080172fd
 80173c8:	08017259 	.word	0x08017259

080173cc <uxr_close_custom_transport>:
 80173cc:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 80173d0:	4718      	bx	r3
 80173d2:	bf00      	nop

080173d4 <uxr_object_id>:
 80173d4:	b082      	sub	sp, #8
 80173d6:	2300      	movs	r3, #0
 80173d8:	f88d 1006 	strb.w	r1, [sp, #6]
 80173dc:	f360 030f 	bfi	r3, r0, #0, #16
 80173e0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80173e4:	f362 431f 	bfi	r3, r2, #16, #16
 80173e8:	4618      	mov	r0, r3
 80173ea:	b002      	add	sp, #8
 80173ec:	4770      	bx	lr
 80173ee:	bf00      	nop

080173f0 <uxr_object_id_from_raw>:
 80173f0:	7843      	ldrb	r3, [r0, #1]
 80173f2:	b082      	sub	sp, #8
 80173f4:	7801      	ldrb	r1, [r0, #0]
 80173f6:	2000      	movs	r0, #0
 80173f8:	091a      	lsrs	r2, r3, #4
 80173fa:	f003 030f 	and.w	r3, r3, #15
 80173fe:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8017402:	f88d 3006 	strb.w	r3, [sp, #6]
 8017406:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801740a:	f362 000f 	bfi	r0, r2, #0, #16
 801740e:	f363 401f 	bfi	r0, r3, #16, #16
 8017412:	b002      	add	sp, #8
 8017414:	4770      	bx	lr
 8017416:	bf00      	nop

08017418 <uxr_object_id_to_raw>:
 8017418:	4602      	mov	r2, r0
 801741a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801741e:	b082      	sub	sp, #8
 8017420:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8017424:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8017428:	f881 c000 	strb.w	ip, [r1]
 801742c:	7048      	strb	r0, [r1, #1]
 801742e:	b002      	add	sp, #8
 8017430:	4770      	bx	lr
 8017432:	bf00      	nop

08017434 <uxr_ping_agent_session>:
 8017434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017438:	4617      	mov	r7, r2
 801743a:	b091      	sub	sp, #68	@ 0x44
 801743c:	2210      	movs	r2, #16
 801743e:	4606      	mov	r6, r0
 8017440:	4688      	mov	r8, r1
 8017442:	a808      	add	r0, sp, #32
 8017444:	eb0d 0102 	add.w	r1, sp, r2
 8017448:	2500      	movs	r5, #0
 801744a:	f7fc fe8d 	bl	8014168 <ucdr_init_buffer>
 801744e:	4b1e      	ldr	r3, [pc, #120]	@ (80174c8 <uxr_ping_agent_session+0x94>)
 8017450:	2402      	movs	r4, #2
 8017452:	462a      	mov	r2, r5
 8017454:	881b      	ldrh	r3, [r3, #0]
 8017456:	a808      	add	r0, sp, #32
 8017458:	9500      	str	r5, [sp, #0]
 801745a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801745e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8017462:	7831      	ldrb	r1, [r6, #0]
 8017464:	f8ad 3008 	strh.w	r3, [sp, #8]
 8017468:	462b      	mov	r3, r5
 801746a:	9403      	str	r4, [sp, #12]
 801746c:	f002 f9b4 	bl	80197d8 <uxr_serialize_message_header>
 8017470:	4621      	mov	r1, r4
 8017472:	462b      	mov	r3, r5
 8017474:	2208      	movs	r2, #8
 8017476:	a808      	add	r0, sp, #32
 8017478:	f001 ffb2 	bl	80193e0 <uxr_buffer_submessage_header>
 801747c:	4604      	mov	r4, r0
 801747e:	a902      	add	r1, sp, #8
 8017480:	a808      	add	r0, sp, #32
 8017482:	f003 f8b5 	bl	801a5f0 <uxr_serialize_GET_INFO_Payload>
 8017486:	b104      	cbz	r4, 801748a <uxr_ping_agent_session+0x56>
 8017488:	b918      	cbnz	r0, 8017492 <uxr_ping_agent_session+0x5e>
 801748a:	2000      	movs	r0, #0
 801748c:	b011      	add	sp, #68	@ 0x44
 801748e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017492:	a808      	add	r0, sp, #32
 8017494:	f7fc fe96 	bl	80141c4 <ucdr_buffer_length>
 8017498:	4681      	mov	r9, r0
 801749a:	e00d      	b.n	80174b8 <uxr_ping_agent_session+0x84>
 801749c:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 801749e:	e9d3 0400 	ldrd	r0, r4, [r3]
 80174a2:	47a0      	blx	r4
 80174a4:	4604      	mov	r4, r0
 80174a6:	4641      	mov	r1, r8
 80174a8:	4630      	mov	r0, r6
 80174aa:	f000 fe71 	bl	8018190 <uxr_run_session_until_pong>
 80174ae:	ea04 0c00 	and.w	ip, r4, r0
 80174b2:	f01c 00ff 	ands.w	r0, ip, #255	@ 0xff
 80174b6:	d1e9      	bne.n	801748c <uxr_ping_agent_session+0x58>
 80174b8:	42af      	cmp	r7, r5
 80174ba:	464a      	mov	r2, r9
 80174bc:	a904      	add	r1, sp, #16
 80174be:	f105 0501 	add.w	r5, r5, #1
 80174c2:	d1eb      	bne.n	801749c <uxr_ping_agent_session+0x68>
 80174c4:	e7e1      	b.n	801748a <uxr_ping_agent_session+0x56>
 80174c6:	bf00      	nop
 80174c8:	08023420 	.word	0x08023420

080174cc <uxr_ping_agent_attempts>:
 80174cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174d0:	ed2d 8b02 	vpush	{d8}
 80174d4:	b0d3      	sub	sp, #332	@ 0x14c
 80174d6:	4606      	mov	r6, r0
 80174d8:	468a      	mov	sl, r1
 80174da:	2400      	movs	r4, #0
 80174dc:	a90c      	add	r1, sp, #48	@ 0x30
 80174de:	a810      	add	r0, sp, #64	@ 0x40
 80174e0:	9205      	str	r2, [sp, #20]
 80174e2:	2210      	movs	r2, #16
 80174e4:	f7fc fe40 	bl	8014168 <ucdr_init_buffer>
 80174e8:	4b53      	ldr	r3, [pc, #332]	@ (8017638 <uxr_ping_agent_attempts+0x16c>)
 80174ea:	2502      	movs	r5, #2
 80174ec:	4622      	mov	r2, r4
 80174ee:	881b      	ldrh	r3, [r3, #0]
 80174f0:	2180      	movs	r1, #128	@ 0x80
 80174f2:	a810      	add	r0, sp, #64	@ 0x40
 80174f4:	9400      	str	r4, [sp, #0]
 80174f6:	f8ad 3082 	strh.w	r3, [sp, #130]	@ 0x82
 80174fa:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80174fe:	9521      	str	r5, [sp, #132]	@ 0x84
 8017500:	f8ad 3080 	strh.w	r3, [sp, #128]	@ 0x80
 8017504:	4623      	mov	r3, r4
 8017506:	f002 f967 	bl	80197d8 <uxr_serialize_message_header>
 801750a:	4623      	mov	r3, r4
 801750c:	4629      	mov	r1, r5
 801750e:	2208      	movs	r2, #8
 8017510:	a810      	add	r0, sp, #64	@ 0x40
 8017512:	f001 ff65 	bl	80193e0 <uxr_buffer_submessage_header>
 8017516:	4681      	mov	r9, r0
 8017518:	a920      	add	r1, sp, #128	@ 0x80
 801751a:	a810      	add	r0, sp, #64	@ 0x40
 801751c:	f003 f868 	bl	801a5f0 <uxr_serialize_GET_INFO_Payload>
 8017520:	ea09 0000 	and.w	r0, r9, r0
 8017524:	f010 09ff 	ands.w	r9, r0, #255	@ 0xff
 8017528:	d107      	bne.n	801753a <uxr_ping_agent_attempts+0x6e>
 801752a:	f04f 0b00 	mov.w	fp, #0
 801752e:	4658      	mov	r0, fp
 8017530:	b053      	add	sp, #332	@ 0x14c
 8017532:	ecbd 8b02 	vpop	{d8}
 8017536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801753a:	a810      	add	r0, sp, #64	@ 0x40
 801753c:	9404      	str	r4, [sp, #16]
 801753e:	f7fc fe41 	bl	80141c4 <ucdr_buffer_length>
 8017542:	ee08 0a10 	vmov	s16, r0
 8017546:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801754a:	4293      	cmp	r3, r2
 801754c:	d0ed      	beq.n	801752a <uxr_ping_agent_attempts+0x5e>
 801754e:	ee18 2a10 	vmov	r2, s16
 8017552:	a90c      	add	r1, sp, #48	@ 0x30
 8017554:	4655      	mov	r5, sl
 8017556:	f04f 0800 	mov.w	r8, #0
 801755a:	e9d6 0300 	ldrd	r0, r3, [r6]
 801755e:	4798      	blx	r3
 8017560:	f001 ff84 	bl	801946c <uxr_millis>
 8017564:	9003      	str	r0, [sp, #12]
 8017566:	e00b      	b.n	8017580 <uxr_ping_agent_attempts+0xb4>
 8017568:	f001 ff80 	bl	801946c <uxr_millis>
 801756c:	9b03      	ldr	r3, [sp, #12]
 801756e:	1ac0      	subs	r0, r0, r3
 8017570:	1a2d      	subs	r5, r5, r0
 8017572:	f001 ff7b 	bl	801946c <uxr_millis>
 8017576:	9003      	str	r0, [sp, #12]
 8017578:	2d00      	cmp	r5, #0
 801757a:	dd30      	ble.n	80175de <uxr_ping_agent_attempts+0x112>
 801757c:	2f00      	cmp	r7, #0
 801757e:	d02e      	beq.n	80175de <uxr_ping_agent_attempts+0x112>
 8017580:	4653      	mov	r3, sl
 8017582:	aa09      	add	r2, sp, #36	@ 0x24
 8017584:	a908      	add	r1, sp, #32
 8017586:	6830      	ldr	r0, [r6, #0]
 8017588:	68b4      	ldr	r4, [r6, #8]
 801758a:	464f      	mov	r7, r9
 801758c:	f8cd 8020 	str.w	r8, [sp, #32]
 8017590:	47a0      	blx	r4
 8017592:	4683      	mov	fp, r0
 8017594:	2800      	cmp	r0, #0
 8017596:	d0e7      	beq.n	8017568 <uxr_ping_agent_attempts+0x9c>
 8017598:	a818      	add	r0, sp, #96	@ 0x60
 801759a:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801759e:	f7fc fde3 	bl	8014168 <ucdr_init_buffer>
 80175a2:	ab07      	add	r3, sp, #28
 80175a4:	f10d 0219 	add.w	r2, sp, #25
 80175a8:	a918      	add	r1, sp, #96	@ 0x60
 80175aa:	a80a      	add	r0, sp, #40	@ 0x28
 80175ac:	e9cd 880a 	strd	r8, r8, [sp, #40]	@ 0x28
 80175b0:	f001 f8e2 	bl	8018778 <uxr_read_session_header>
 80175b4:	22c8      	movs	r2, #200	@ 0xc8
 80175b6:	2100      	movs	r1, #0
 80175b8:	a820      	add	r0, sp, #128	@ 0x80
 80175ba:	f00a fe79 	bl	80222b0 <memset>
 80175be:	a818      	add	r0, sp, #96	@ 0x60
 80175c0:	f7fc fe04 	bl	80141cc <ucdr_buffer_remaining>
 80175c4:	2804      	cmp	r0, #4
 80175c6:	d816      	bhi.n	80175f6 <uxr_ping_agent_attempts+0x12a>
 80175c8:	f89d 3135 	ldrb.w	r3, [sp, #309]	@ 0x135
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	bf13      	iteet	ne
 80175d0:	f04f 0b01 	movne.w	fp, #1
 80175d4:	f04f 0b00 	moveq.w	fp, #0
 80175d8:	2701      	moveq	r7, #1
 80175da:	2700      	movne	r7, #0
 80175dc:	e7c4      	b.n	8017568 <uxr_ping_agent_attempts+0x9c>
 80175de:	9b04      	ldr	r3, [sp, #16]
 80175e0:	3301      	adds	r3, #1
 80175e2:	9304      	str	r3, [sp, #16]
 80175e4:	f1bb 0f00 	cmp.w	fp, #0
 80175e8:	d0ad      	beq.n	8017546 <uxr_ping_agent_attempts+0x7a>
 80175ea:	4658      	mov	r0, fp
 80175ec:	b053      	add	sp, #332	@ 0x14c
 80175ee:	ecbd 8b02 	vpop	{d8}
 80175f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175f6:	f10d 031e 	add.w	r3, sp, #30
 80175fa:	f10d 021b 	add.w	r2, sp, #27
 80175fe:	f10d 011a 	add.w	r1, sp, #26
 8017602:	a818      	add	r0, sp, #96	@ 0x60
 8017604:	f88d 801a 	strb.w	r8, [sp, #26]
 8017608:	f8ad 801e 	strh.w	r8, [sp, #30]
 801760c:	f88d 801b 	strb.w	r8, [sp, #27]
 8017610:	f002 f934 	bl	801987c <uxr_deserialize_submessage_header>
 8017614:	a818      	add	r0, sp, #96	@ 0x60
 8017616:	f7fc fdd9 	bl	80141cc <ucdr_buffer_remaining>
 801761a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801761e:	4298      	cmp	r0, r3
 8017620:	d3d2      	bcc.n	80175c8 <uxr_ping_agent_attempts+0xfc>
 8017622:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8017626:	2b06      	cmp	r3, #6
 8017628:	d1ce      	bne.n	80175c8 <uxr_ping_agent_attempts+0xfc>
 801762a:	a918      	add	r1, sp, #96	@ 0x60
 801762c:	a820      	add	r0, sp, #128	@ 0x80
 801762e:	f88d 8135 	strb.w	r8, [sp, #309]	@ 0x135
 8017632:	f000 f997 	bl	8017964 <read_submessage_info>
 8017636:	e7c7      	b.n	80175c8 <uxr_ping_agent_attempts+0xfc>
 8017638:	08023420 	.word	0x08023420

0801763c <on_get_fragmentation_info>:
 801763c:	b500      	push	{lr}
 801763e:	b08b      	sub	sp, #44	@ 0x2c
 8017640:	4601      	mov	r1, r0
 8017642:	2204      	movs	r2, #4
 8017644:	a802      	add	r0, sp, #8
 8017646:	f7fc fd8f 	bl	8014168 <ucdr_init_buffer>
 801764a:	f10d 0305 	add.w	r3, sp, #5
 801764e:	f10d 0206 	add.w	r2, sp, #6
 8017652:	a901      	add	r1, sp, #4
 8017654:	a802      	add	r0, sp, #8
 8017656:	f001 fedd 	bl	8019414 <uxr_read_submessage_header>
 801765a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801765e:	2b0d      	cmp	r3, #13
 8017660:	d003      	beq.n	801766a <on_get_fragmentation_info+0x2e>
 8017662:	2000      	movs	r0, #0
 8017664:	b00b      	add	sp, #44	@ 0x2c
 8017666:	f85d fb04 	ldr.w	pc, [sp], #4
 801766a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801766e:	f013 0f02 	tst.w	r3, #2
 8017672:	bf14      	ite	ne
 8017674:	2002      	movne	r0, #2
 8017676:	2001      	moveq	r0, #1
 8017678:	b00b      	add	sp, #44	@ 0x2c
 801767a:	f85d fb04 	ldr.w	pc, [sp], #4
 801767e:	bf00      	nop

08017680 <read_submessage_get_info>:
 8017680:	b570      	push	{r4, r5, r6, lr}
 8017682:	2500      	movs	r5, #0
 8017684:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8017688:	460e      	mov	r6, r1
 801768a:	4604      	mov	r4, r0
 801768c:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8017690:	4629      	mov	r1, r5
 8017692:	a810      	add	r0, sp, #64	@ 0x40
 8017694:	9503      	str	r5, [sp, #12]
 8017696:	9504      	str	r5, [sp, #16]
 8017698:	f00a fe0a 	bl	80222b0 <memset>
 801769c:	a903      	add	r1, sp, #12
 801769e:	4630      	mov	r0, r6
 80176a0:	f002 ffbc 	bl	801a61c <uxr_deserialize_GET_INFO_Payload>
 80176a4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80176a8:	4620      	mov	r0, r4
 80176aa:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80176ae:	f001 f8a3 	bl	80187f8 <uxr_session_header_offset>
 80176b2:	462b      	mov	r3, r5
 80176b4:	220c      	movs	r2, #12
 80176b6:	a905      	add	r1, sp, #20
 80176b8:	9000      	str	r0, [sp, #0]
 80176ba:	a808      	add	r0, sp, #32
 80176bc:	f7fc fd42 	bl	8014144 <ucdr_init_buffer_origin_offset>
 80176c0:	a910      	add	r1, sp, #64	@ 0x40
 80176c2:	a808      	add	r0, sp, #32
 80176c4:	f003 f81e 	bl	801a704 <uxr_serialize_INFO_Payload>
 80176c8:	9b08      	ldr	r3, [sp, #32]
 80176ca:	462a      	mov	r2, r5
 80176cc:	4629      	mov	r1, r5
 80176ce:	4620      	mov	r0, r4
 80176d0:	f001 f83e 	bl	8018750 <uxr_stamp_session_header>
 80176d4:	a808      	add	r0, sp, #32
 80176d6:	f7fc fd75 	bl	80141c4 <ucdr_buffer_length>
 80176da:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80176dc:	4602      	mov	r2, r0
 80176de:	a905      	add	r1, sp, #20
 80176e0:	e9d3 0400 	ldrd	r0, r4, [r3]
 80176e4:	47a0      	blx	r4
 80176e6:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 80176ea:	bd70      	pop	{r4, r5, r6, pc}

080176ec <write_submessage_acknack.isra.0>:
 80176ec:	b570      	push	{r4, r5, r6, lr}
 80176ee:	b092      	sub	sp, #72	@ 0x48
 80176f0:	4605      	mov	r5, r0
 80176f2:	460e      	mov	r6, r1
 80176f4:	4614      	mov	r4, r2
 80176f6:	f001 f87f 	bl	80187f8 <uxr_session_header_offset>
 80176fa:	a905      	add	r1, sp, #20
 80176fc:	9000      	str	r0, [sp, #0]
 80176fe:	2300      	movs	r3, #0
 8017700:	a80a      	add	r0, sp, #40	@ 0x28
 8017702:	2211      	movs	r2, #17
 8017704:	f7fc fd1e 	bl	8014144 <ucdr_init_buffer_origin_offset>
 8017708:	2218      	movs	r2, #24
 801770a:	2300      	movs	r3, #0
 801770c:	210a      	movs	r1, #10
 801770e:	fb02 5404 	mla	r4, r2, r4, r5
 8017712:	a80a      	add	r0, sp, #40	@ 0x28
 8017714:	2205      	movs	r2, #5
 8017716:	3450      	adds	r4, #80	@ 0x50
 8017718:	f001 fe62 	bl	80193e0 <uxr_buffer_submessage_header>
 801771c:	a903      	add	r1, sp, #12
 801771e:	4620      	mov	r0, r4
 8017720:	f008 fece 	bl	80204c0 <uxr_compute_acknack>
 8017724:	ba40      	rev16	r0, r0
 8017726:	a903      	add	r1, sp, #12
 8017728:	f88d 6010 	strb.w	r6, [sp, #16]
 801772c:	f8ad 000e 	strh.w	r0, [sp, #14]
 8017730:	a80a      	add	r0, sp, #40	@ 0x28
 8017732:	f003 f859 	bl	801a7e8 <uxr_serialize_ACKNACK_Payload>
 8017736:	2200      	movs	r2, #0
 8017738:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801773a:	4628      	mov	r0, r5
 801773c:	4611      	mov	r1, r2
 801773e:	f001 f807 	bl	8018750 <uxr_stamp_session_header>
 8017742:	a80a      	add	r0, sp, #40	@ 0x28
 8017744:	f7fc fd3e 	bl	80141c4 <ucdr_buffer_length>
 8017748:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801774a:	4602      	mov	r2, r0
 801774c:	a905      	add	r1, sp, #20
 801774e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8017752:	47a0      	blx	r4
 8017754:	b012      	add	sp, #72	@ 0x48
 8017756:	bd70      	pop	{r4, r5, r6, pc}

08017758 <uxr_init_session>:
 8017758:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8017790 <uxr_init_session+0x38>
 801775c:	2300      	movs	r3, #0
 801775e:	b510      	push	{r4, lr}
 8017760:	4604      	mov	r4, r0
 8017762:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8017766:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 801776a:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 801776e:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8017772:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8017776:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 801777a:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 801777e:	2181      	movs	r1, #129	@ 0x81
 8017780:	f000 ff4a 	bl	8018618 <uxr_init_session_info>
 8017784:	f104 0008 	add.w	r0, r4, #8
 8017788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801778c:	f001 bd44 	b.w	8019218 <uxr_init_stream_storage>
	...

08017798 <uxr_set_status_callback>:
 8017798:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 801779c:	4770      	bx	lr
 801779e:	bf00      	nop

080177a0 <uxr_set_topic_callback>:
 80177a0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80177a4:	4770      	bx	lr
 80177a6:	bf00      	nop

080177a8 <uxr_set_request_callback>:
 80177a8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 80177ac:	4770      	bx	lr
 80177ae:	bf00      	nop

080177b0 <uxr_set_reply_callback>:
 80177b0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 80177b4:	4770      	bx	lr
 80177b6:	bf00      	nop

080177b8 <uxr_create_output_best_effort_stream>:
 80177b8:	b510      	push	{r4, lr}
 80177ba:	4604      	mov	r4, r0
 80177bc:	b084      	sub	sp, #16
 80177be:	e9cd 2100 	strd	r2, r1, [sp]
 80177c2:	f001 f819 	bl	80187f8 <uxr_session_header_offset>
 80177c6:	4603      	mov	r3, r0
 80177c8:	f104 0008 	add.w	r0, r4, #8
 80177cc:	e9dd 2100 	ldrd	r2, r1, [sp]
 80177d0:	b004      	add	sp, #16
 80177d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177d6:	f001 bd65 	b.w	80192a4 <uxr_add_output_best_effort_buffer>
 80177da:	bf00      	nop

080177dc <uxr_create_output_reliable_stream>:
 80177dc:	b530      	push	{r4, r5, lr}
 80177de:	b089      	sub	sp, #36	@ 0x24
 80177e0:	4604      	mov	r4, r0
 80177e2:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80177e6:	9303      	str	r3, [sp, #12]
 80177e8:	f001 f806 	bl	80187f8 <uxr_session_header_offset>
 80177ec:	4605      	mov	r5, r0
 80177ee:	9905      	ldr	r1, [sp, #20]
 80177f0:	f104 0008 	add.w	r0, r4, #8
 80177f4:	9500      	str	r5, [sp, #0]
 80177f6:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80177fa:	f001 fd67 	bl	80192cc <uxr_add_output_reliable_buffer>
 80177fe:	2200      	movs	r2, #0
 8017800:	fa5f fc80 	uxtb.w	ip, r0
 8017804:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8017808:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801780c:	0e03      	lsrs	r3, r0, #24
 801780e:	f36c 0207 	bfi	r2, ip, #0, #8
 8017812:	f364 220f 	bfi	r2, r4, #8, #8
 8017816:	f361 4217 	bfi	r2, r1, #16, #8
 801781a:	f363 621f 	bfi	r2, r3, #24, #8
 801781e:	4610      	mov	r0, r2
 8017820:	b009      	add	sp, #36	@ 0x24
 8017822:	bd30      	pop	{r4, r5, pc}

08017824 <uxr_create_input_best_effort_stream>:
 8017824:	b082      	sub	sp, #8
 8017826:	3008      	adds	r0, #8
 8017828:	b002      	add	sp, #8
 801782a:	f001 bd69 	b.w	8019300 <uxr_add_input_best_effort_buffer>
 801782e:	bf00      	nop

08017830 <uxr_create_input_reliable_stream>:
 8017830:	b510      	push	{r4, lr}
 8017832:	4c0c      	ldr	r4, [pc, #48]	@ (8017864 <uxr_create_input_reliable_stream+0x34>)
 8017834:	b084      	sub	sp, #16
 8017836:	3008      	adds	r0, #8
 8017838:	9400      	str	r4, [sp, #0]
 801783a:	f001 fd77 	bl	801932c <uxr_add_input_reliable_buffer>
 801783e:	2200      	movs	r2, #0
 8017840:	fa5f fe80 	uxtb.w	lr, r0
 8017844:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8017848:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801784c:	0e03      	lsrs	r3, r0, #24
 801784e:	f36e 0207 	bfi	r2, lr, #0, #8
 8017852:	f36c 220f 	bfi	r2, ip, #8, #8
 8017856:	f361 4217 	bfi	r2, r1, #16, #8
 801785a:	f363 621f 	bfi	r2, r3, #24, #8
 801785e:	4610      	mov	r0, r2
 8017860:	b004      	add	sp, #16
 8017862:	bd10      	pop	{r4, pc}
 8017864:	0801763d 	.word	0x0801763d

08017868 <uxr_epoch_nanos>:
 8017868:	b510      	push	{r4, lr}
 801786a:	4604      	mov	r4, r0
 801786c:	f001 fe1a 	bl	80194a4 <uxr_nanos>
 8017870:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8017874:	1ac0      	subs	r0, r0, r3
 8017876:	eb61 0102 	sbc.w	r1, r1, r2
 801787a:	bd10      	pop	{r4, pc}

0801787c <uxr_flash_output_streams>:
 801787c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017880:	7e03      	ldrb	r3, [r0, #24]
 8017882:	b084      	sub	sp, #16
 8017884:	4604      	mov	r4, r0
 8017886:	b1fb      	cbz	r3, 80178c8 <uxr_flash_output_streams+0x4c>
 8017888:	f04f 0900 	mov.w	r9, #0
 801788c:	f10d 0802 	add.w	r8, sp, #2
 8017890:	af03      	add	r7, sp, #12
 8017892:	ae02      	add	r6, sp, #8
 8017894:	4648      	mov	r0, r9
 8017896:	2201      	movs	r2, #1
 8017898:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801789c:	4611      	mov	r1, r2
 801789e:	3508      	adds	r5, #8
 80178a0:	f001 fc60 	bl	8019164 <uxr_stream_id>
 80178a4:	4684      	mov	ip, r0
 80178a6:	4643      	mov	r3, r8
 80178a8:	463a      	mov	r2, r7
 80178aa:	4631      	mov	r1, r6
 80178ac:	4628      	mov	r0, r5
 80178ae:	f8cd c004 	str.w	ip, [sp, #4]
 80178b2:	f008 fe8f 	bl	80205d4 <uxr_prepare_best_effort_buffer_to_send>
 80178b6:	2800      	cmp	r0, #0
 80178b8:	d13d      	bne.n	8017936 <uxr_flash_output_streams+0xba>
 80178ba:	f109 0901 	add.w	r9, r9, #1
 80178be:	7e23      	ldrb	r3, [r4, #24]
 80178c0:	fa5f f089 	uxtb.w	r0, r9
 80178c4:	4283      	cmp	r3, r0
 80178c6:	d8e6      	bhi.n	8017896 <uxr_flash_output_streams+0x1a>
 80178c8:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80178cc:	b383      	cbz	r3, 8017930 <uxr_flash_output_streams+0xb4>
 80178ce:	f04f 0900 	mov.w	r9, #0
 80178d2:	f10d 0802 	add.w	r8, sp, #2
 80178d6:	af03      	add	r7, sp, #12
 80178d8:	ae02      	add	r6, sp, #8
 80178da:	4648      	mov	r0, r9
 80178dc:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80178e0:	2201      	movs	r2, #1
 80178e2:	2102      	movs	r1, #2
 80178e4:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80178e8:	f001 fc3c 	bl	8019164 <uxr_stream_id>
 80178ec:	9001      	str	r0, [sp, #4]
 80178ee:	3520      	adds	r5, #32
 80178f0:	e00c      	b.n	801790c <uxr_flash_output_streams+0x90>
 80178f2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80178f6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80178fa:	9b02      	ldr	r3, [sp, #8]
 80178fc:	f000 ff28 	bl	8018750 <uxr_stamp_session_header>
 8017900:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8017902:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8017906:	e9d3 0a00 	ldrd	r0, sl, [r3]
 801790a:	47d0      	blx	sl
 801790c:	4643      	mov	r3, r8
 801790e:	463a      	mov	r2, r7
 8017910:	4631      	mov	r1, r6
 8017912:	4628      	mov	r0, r5
 8017914:	f009 f880 	bl	8020a18 <uxr_prepare_next_reliable_buffer_to_send>
 8017918:	4603      	mov	r3, r0
 801791a:	4620      	mov	r0, r4
 801791c:	2b00      	cmp	r3, #0
 801791e:	d1e8      	bne.n	80178f2 <uxr_flash_output_streams+0x76>
 8017920:	f109 0901 	add.w	r9, r9, #1
 8017924:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8017928:	fa5f f089 	uxtb.w	r0, r9
 801792c:	4283      	cmp	r3, r0
 801792e:	d8d5      	bhi.n	80178dc <uxr_flash_output_streams+0x60>
 8017930:	b004      	add	sp, #16
 8017932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017936:	9b02      	ldr	r3, [sp, #8]
 8017938:	4620      	mov	r0, r4
 801793a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801793e:	f109 0901 	add.w	r9, r9, #1
 8017942:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8017946:	f000 ff03 	bl	8018750 <uxr_stamp_session_header>
 801794a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801794c:	9a03      	ldr	r2, [sp, #12]
 801794e:	685d      	ldr	r5, [r3, #4]
 8017950:	6818      	ldr	r0, [r3, #0]
 8017952:	9902      	ldr	r1, [sp, #8]
 8017954:	47a8      	blx	r5
 8017956:	7e23      	ldrb	r3, [r4, #24]
 8017958:	fa5f f089 	uxtb.w	r0, r9
 801795c:	4283      	cmp	r3, r0
 801795e:	d89a      	bhi.n	8017896 <uxr_flash_output_streams+0x1a>
 8017960:	e7b2      	b.n	80178c8 <uxr_flash_output_streams+0x4c>
 8017962:	bf00      	nop

08017964 <read_submessage_info>:
 8017964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017968:	460d      	mov	r5, r1
 801796a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801796e:	4606      	mov	r6, r0
 8017970:	4669      	mov	r1, sp
 8017972:	4628      	mov	r0, r5
 8017974:	f002 fd4e 	bl	801a414 <uxr_deserialize_BaseObjectReply>
 8017978:	4604      	mov	r4, r0
 801797a:	a902      	add	r1, sp, #8
 801797c:	4628      	mov	r0, r5
 801797e:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8017982:	f7fb f96f 	bl	8012c64 <ucdr_deserialize_bool>
 8017986:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801798a:	4004      	ands	r4, r0
 801798c:	b2e4      	uxtb	r4, r4
 801798e:	b95b      	cbnz	r3, 80179a8 <read_submessage_info+0x44>
 8017990:	a987      	add	r1, sp, #540	@ 0x21c
 8017992:	4628      	mov	r0, r5
 8017994:	f7fb f966 	bl	8012c64 <ucdr_deserialize_bool>
 8017998:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 801799c:	4680      	mov	r8, r0
 801799e:	b94b      	cbnz	r3, 80179b4 <read_submessage_info+0x50>
 80179a0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80179a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179a8:	a903      	add	r1, sp, #12
 80179aa:	4628      	mov	r0, r5
 80179ac:	f002 fbde 	bl	801a16c <uxr_deserialize_ObjectVariant>
 80179b0:	4004      	ands	r4, r0
 80179b2:	e7ed      	b.n	8017990 <read_submessage_info+0x2c>
 80179b4:	a988      	add	r1, sp, #544	@ 0x220
 80179b6:	4628      	mov	r0, r5
 80179b8:	f7fb f982 	bl	8012cc0 <ucdr_deserialize_uint8_t>
 80179bc:	ea14 0f08 	tst.w	r4, r8
 80179c0:	d0ee      	beq.n	80179a0 <read_submessage_info+0x3c>
 80179c2:	2800      	cmp	r0, #0
 80179c4:	d0ec      	beq.n	80179a0 <read_submessage_info+0x3c>
 80179c6:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 80179ca:	2b0d      	cmp	r3, #13
 80179cc:	d1e8      	bne.n	80179a0 <read_submessage_info+0x3c>
 80179ce:	a98a      	add	r1, sp, #552	@ 0x228
 80179d0:	4628      	mov	r0, r5
 80179d2:	f7fb ff1b 	bl	801380c <ucdr_deserialize_int16_t>
 80179d6:	b138      	cbz	r0, 80179e8 <read_submessage_info+0x84>
 80179d8:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 80179dc:	2b00      	cmp	r3, #0
 80179de:	dd06      	ble.n	80179ee <read_submessage_info+0x8a>
 80179e0:	2f00      	cmp	r7, #0
 80179e2:	bf14      	ite	ne
 80179e4:	2001      	movne	r0, #1
 80179e6:	2002      	moveq	r0, #2
 80179e8:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 80179ec:	e7d8      	b.n	80179a0 <read_submessage_info+0x3c>
 80179ee:	2000      	movs	r0, #0
 80179f0:	e7fa      	b.n	80179e8 <read_submessage_info+0x84>
 80179f2:	bf00      	nop

080179f4 <read_submessage_list>:
 80179f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179f8:	4604      	mov	r4, r0
 80179fa:	b097      	sub	sp, #92	@ 0x5c
 80179fc:	460d      	mov	r5, r1
 80179fe:	4ec1      	ldr	r6, [pc, #772]	@ (8017d04 <read_submessage_list+0x310>)
 8017a00:	9209      	str	r2, [sp, #36]	@ 0x24
 8017a02:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8017a06:	aa0c      	add	r2, sp, #48	@ 0x30
 8017a08:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8017a0c:	4628      	mov	r0, r5
 8017a0e:	f001 fd01 	bl	8019414 <uxr_read_submessage_header>
 8017a12:	2800      	cmp	r0, #0
 8017a14:	f000 8142 	beq.w	8017c9c <read_submessage_list+0x2a8>
 8017a18:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8017a1c:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8017a20:	3b02      	subs	r3, #2
 8017a22:	2b0d      	cmp	r3, #13
 8017a24:	d8ed      	bhi.n	8017a02 <read_submessage_list+0xe>
 8017a26:	a101      	add	r1, pc, #4	@ (adr r1, 8017a2c <read_submessage_list+0x38>)
 8017a28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017a2c:	08017c93 	.word	0x08017c93
 8017a30:	08017a03 	.word	0x08017a03
 8017a34:	08017c83 	.word	0x08017c83
 8017a38:	08017c21 	.word	0x08017c21
 8017a3c:	08017c17 	.word	0x08017c17
 8017a40:	08017a03 	.word	0x08017a03
 8017a44:	08017a03 	.word	0x08017a03
 8017a48:	08017b6d 	.word	0x08017b6d
 8017a4c:	08017aff 	.word	0x08017aff
 8017a50:	08017abf 	.word	0x08017abf
 8017a54:	08017a03 	.word	0x08017a03
 8017a58:	08017a03 	.word	0x08017a03
 8017a5c:	08017a03 	.word	0x08017a03
 8017a60:	08017a65 	.word	0x08017a65
 8017a64:	a910      	add	r1, sp, #64	@ 0x40
 8017a66:	4628      	mov	r0, r5
 8017a68:	f002 ff20 	bl	801a8ac <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8017a6c:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 8017a70:	f1b8 0f00 	cmp.w	r8, #0
 8017a74:	f000 811a 	beq.w	8017cac <read_submessage_list+0x2b8>
 8017a78:	f001 fd14 	bl	80194a4 <uxr_nanos>
 8017a7c:	4602      	mov	r2, r0
 8017a7e:	460b      	mov	r3, r1
 8017a80:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8017a84:	2100      	movs	r1, #0
 8017a86:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8017a88:	9006      	str	r0, [sp, #24]
 8017a8a:	468c      	mov	ip, r1
 8017a8c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8017a8e:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8017a92:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8017a94:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8017a98:	468c      	mov	ip, r1
 8017a9a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8017a9c:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8017aa0:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8017aa4:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 8017aa8:	fbc7 0106 	smlal	r0, r1, r7, r6
 8017aac:	e9cd 0100 	strd	r0, r1, [sp]
 8017ab0:	4620      	mov	r0, r4
 8017ab2:	47c0      	blx	r8
 8017ab4:	f04f 0301 	mov.w	r3, #1
 8017ab8:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8017abc:	e7a1      	b.n	8017a02 <read_submessage_list+0xe>
 8017abe:	a910      	add	r1, sp, #64	@ 0x40
 8017ac0:	4628      	mov	r0, r5
 8017ac2:	f002 fed1 	bl	801a868 <uxr_deserialize_HEARTBEAT_Payload>
 8017ac6:	2100      	movs	r1, #0
 8017ac8:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8017acc:	f001 fb78 	bl	80191c0 <uxr_stream_id_from_raw>
 8017ad0:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8017ad4:	900f      	str	r0, [sp, #60]	@ 0x3c
 8017ad6:	f104 0008 	add.w	r0, r4, #8
 8017ada:	4641      	mov	r1, r8
 8017adc:	f001 fc5e 	bl	801939c <uxr_get_input_reliable_stream>
 8017ae0:	2800      	cmp	r0, #0
 8017ae2:	d08e      	beq.n	8017a02 <read_submessage_list+0xe>
 8017ae4:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8017ae8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8017aec:	f008 fcdc 	bl	80204a8 <uxr_process_heartbeat>
 8017af0:	4642      	mov	r2, r8
 8017af2:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8017af6:	4620      	mov	r0, r4
 8017af8:	f7ff fdf8 	bl	80176ec <write_submessage_acknack.isra.0>
 8017afc:	e781      	b.n	8017a02 <read_submessage_list+0xe>
 8017afe:	a910      	add	r1, sp, #64	@ 0x40
 8017b00:	4628      	mov	r0, r5
 8017b02:	f002 fe89 	bl	801a818 <uxr_deserialize_ACKNACK_Payload>
 8017b06:	2100      	movs	r1, #0
 8017b08:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8017b0c:	f001 fb58 	bl	80191c0 <uxr_stream_id_from_raw>
 8017b10:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8017b14:	900d      	str	r0, [sp, #52]	@ 0x34
 8017b16:	f104 0008 	add.w	r0, r4, #8
 8017b1a:	f001 fc29 	bl	8019370 <uxr_get_output_reliable_stream>
 8017b1e:	4680      	mov	r8, r0
 8017b20:	2800      	cmp	r0, #0
 8017b22:	f43f af6e 	beq.w	8017a02 <read_submessage_list+0xe>
 8017b26:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8017b2a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8017b2e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8017b32:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8017b36:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8017b3a:	b289      	uxth	r1, r1
 8017b3c:	f009 f814 	bl	8020b68 <uxr_process_acknack>
 8017b40:	4640      	mov	r0, r8
 8017b42:	f008 ffd5 	bl	8020af0 <uxr_begin_output_nack_buffer_it>
 8017b46:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8017b4a:	e005      	b.n	8017b58 <read_submessage_list+0x164>
 8017b4c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8017b4e:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 8017b52:	e9d3 0900 	ldrd	r0, r9, [r3]
 8017b56:	47c8      	blx	r9
 8017b58:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8017b5c:	aa0f      	add	r2, sp, #60	@ 0x3c
 8017b5e:	4651      	mov	r1, sl
 8017b60:	4640      	mov	r0, r8
 8017b62:	f008 ffc7 	bl	8020af4 <uxr_next_reliable_nack_buffer_to_send>
 8017b66:	2800      	cmp	r0, #0
 8017b68:	d1f0      	bne.n	8017b4c <read_submessage_list+0x158>
 8017b6a:	e74a      	b.n	8017a02 <read_submessage_list+0xe>
 8017b6c:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8017b70:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8017b74:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 8017b78:	4628      	mov	r0, r5
 8017b7a:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8017b7e:	4651      	mov	r1, sl
 8017b80:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8017b84:	f1a8 0804 	sub.w	r8, r8, #4
 8017b88:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8017b8c:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8017b90:	fa1f f888 	uxth.w	r8, r8
 8017b94:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8017b98:	f009 090e 	and.w	r9, r9, #14
 8017b9c:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8017ba0:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8017ba4:	f002 fb84 	bl	801a2b0 <uxr_deserialize_BaseObjectRequest>
 8017ba8:	4650      	mov	r0, sl
 8017baa:	a90f      	add	r1, sp, #60	@ 0x3c
 8017bac:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8017bb0:	f000 fe4a 	bl	8018848 <uxr_parse_base_object_request>
 8017bb4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8017bb6:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8017bba:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8017bbe:	9110      	str	r1, [sp, #64]	@ 0x40
 8017bc0:	f1bb 0f00 	cmp.w	fp, #0
 8017bc4:	d006      	beq.n	8017bd4 <read_submessage_list+0x1e0>
 8017bc6:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8017bca:	4652      	mov	r2, sl
 8017bcc:	4620      	mov	r0, r4
 8017bce:	9300      	str	r3, [sp, #0]
 8017bd0:	2300      	movs	r3, #0
 8017bd2:	47d8      	blx	fp
 8017bd4:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8017bd6:	b182      	cbz	r2, 8017bfa <read_submessage_list+0x206>
 8017bd8:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8017bda:	f04f 0c00 	mov.w	ip, #0
 8017bde:	3902      	subs	r1, #2
 8017be0:	e003      	b.n	8017bea <read_submessage_list+0x1f6>
 8017be2:	f10c 0c01 	add.w	ip, ip, #1
 8017be6:	4594      	cmp	ip, r2
 8017be8:	d007      	beq.n	8017bfa <read_submessage_list+0x206>
 8017bea:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8017bee:	4553      	cmp	r3, sl
 8017bf0:	d1f7      	bne.n	8017be2 <read_submessage_list+0x1ee>
 8017bf2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8017bf4:	2200      	movs	r2, #0
 8017bf6:	f803 200c 	strb.w	r2, [r3, ip]
 8017bfa:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8017bfe:	464b      	mov	r3, r9
 8017c00:	4642      	mov	r2, r8
 8017c02:	4620      	mov	r0, r4
 8017c04:	9102      	str	r1, [sp, #8]
 8017c06:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8017c08:	9101      	str	r1, [sp, #4]
 8017c0a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8017c0c:	9100      	str	r1, [sp, #0]
 8017c0e:	4629      	mov	r1, r5
 8017c10:	f009 f86c 	bl	8020cec <read_submessage_format>
 8017c14:	e6f5      	b.n	8017a02 <read_submessage_list+0xe>
 8017c16:	4629      	mov	r1, r5
 8017c18:	4620      	mov	r0, r4
 8017c1a:	f7ff fea3 	bl	8017964 <read_submessage_info>
 8017c1e:	e6f0      	b.n	8017a02 <read_submessage_list+0xe>
 8017c20:	2a00      	cmp	r2, #0
 8017c22:	d03e      	beq.n	8017ca2 <read_submessage_list+0x2ae>
 8017c24:	a910      	add	r1, sp, #64	@ 0x40
 8017c26:	4628      	mov	r0, r5
 8017c28:	f002 fd4e 	bl	801a6c8 <uxr_deserialize_STATUS_Payload>
 8017c2c:	a90e      	add	r1, sp, #56	@ 0x38
 8017c2e:	aa0d      	add	r2, sp, #52	@ 0x34
 8017c30:	a810      	add	r0, sp, #64	@ 0x40
 8017c32:	f000 fe09 	bl	8018848 <uxr_parse_base_object_request>
 8017c36:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8017c38:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8017c3c:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8017c40:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 8017c44:	910f      	str	r1, [sp, #60]	@ 0x3c
 8017c46:	f1ba 0f00 	cmp.w	sl, #0
 8017c4a:	d006      	beq.n	8017c5a <read_submessage_list+0x266>
 8017c4c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8017c50:	4642      	mov	r2, r8
 8017c52:	4620      	mov	r0, r4
 8017c54:	9300      	str	r3, [sp, #0]
 8017c56:	464b      	mov	r3, r9
 8017c58:	47d0      	blx	sl
 8017c5a:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8017c5c:	2a00      	cmp	r2, #0
 8017c5e:	f43f aed0 	beq.w	8017a02 <read_submessage_list+0xe>
 8017c62:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8017c64:	2100      	movs	r1, #0
 8017c66:	3802      	subs	r0, #2
 8017c68:	e003      	b.n	8017c72 <read_submessage_list+0x27e>
 8017c6a:	3101      	adds	r1, #1
 8017c6c:	4291      	cmp	r1, r2
 8017c6e:	f43f aec8 	beq.w	8017a02 <read_submessage_list+0xe>
 8017c72:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8017c76:	4543      	cmp	r3, r8
 8017c78:	d1f7      	bne.n	8017c6a <read_submessage_list+0x276>
 8017c7a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8017c7c:	f803 9001 	strb.w	r9, [r3, r1]
 8017c80:	e6bf      	b.n	8017a02 <read_submessage_list+0xe>
 8017c82:	2a00      	cmp	r2, #0
 8017c84:	f47f aebd 	bne.w	8017a02 <read_submessage_list+0xe>
 8017c88:	4629      	mov	r1, r5
 8017c8a:	4620      	mov	r0, r4
 8017c8c:	f000 fd20 	bl	80186d0 <uxr_read_create_session_status>
 8017c90:	e6b7      	b.n	8017a02 <read_submessage_list+0xe>
 8017c92:	4629      	mov	r1, r5
 8017c94:	4620      	mov	r0, r4
 8017c96:	f7ff fcf3 	bl	8017680 <read_submessage_get_info>
 8017c9a:	e6b2      	b.n	8017a02 <read_submessage_list+0xe>
 8017c9c:	b017      	add	sp, #92	@ 0x5c
 8017c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ca2:	4629      	mov	r1, r5
 8017ca4:	4620      	mov	r0, r4
 8017ca6:	f000 fd21 	bl	80186ec <uxr_read_delete_session_status>
 8017caa:	e6aa      	b.n	8017a02 <read_submessage_list+0xe>
 8017cac:	f001 fbfa 	bl	80194a4 <uxr_nanos>
 8017cb0:	4642      	mov	r2, r8
 8017cb2:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8017cb4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017cb6:	fbc7 3206 	smlal	r3, r2, r7, r6
 8017cba:	1818      	adds	r0, r3, r0
 8017cbc:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8017cbe:	eb42 0101 	adc.w	r1, r2, r1
 8017cc2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017cc4:	4642      	mov	r2, r8
 8017cc6:	fbc7 3206 	smlal	r3, r2, r7, r6
 8017cca:	469c      	mov	ip, r3
 8017ccc:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 8017cd0:	fbc3 7806 	smlal	r7, r8, r3, r6
 8017cd4:	4643      	mov	r3, r8
 8017cd6:	eb1c 0c07 	adds.w	ip, ip, r7
 8017cda:	eb42 0203 	adc.w	r2, r2, r3
 8017cde:	ebb0 030c 	subs.w	r3, r0, ip
 8017ce2:	eb61 0202 	sbc.w	r2, r1, r2
 8017ce6:	2a00      	cmp	r2, #0
 8017ce8:	db08      	blt.n	8017cfc <read_submessage_list+0x308>
 8017cea:	085b      	lsrs	r3, r3, #1
 8017cec:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8017cf0:	1052      	asrs	r2, r2, #1
 8017cf2:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8017cf6:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 8017cfa:	e6db      	b.n	8017ab4 <read_submessage_list+0xc0>
 8017cfc:	3301      	adds	r3, #1
 8017cfe:	f142 0200 	adc.w	r2, r2, #0
 8017d02:	e7f2      	b.n	8017cea <read_submessage_list+0x2f6>
 8017d04:	3b9aca00 	.word	0x3b9aca00

08017d08 <listen_message_reliably>:
 8017d08:	1e0b      	subs	r3, r1, #0
 8017d0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d0e:	bfb8      	it	lt
 8017d10:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8017d14:	b09d      	sub	sp, #116	@ 0x74
 8017d16:	4680      	mov	r8, r0
 8017d18:	9305      	str	r3, [sp, #20]
 8017d1a:	f001 fba7 	bl	801946c <uxr_millis>
 8017d1e:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8017d22:	4681      	mov	r9, r0
 8017d24:	2a00      	cmp	r2, #0
 8017d26:	f000 809a 	beq.w	8017e5e <listen_message_reliably+0x156>
 8017d2a:	2600      	movs	r6, #0
 8017d2c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017d30:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8017d34:	460f      	mov	r7, r1
 8017d36:	4630      	mov	r0, r6
 8017d38:	9303      	str	r3, [sp, #12]
 8017d3a:	e00e      	b.n	8017d5a <listen_message_reliably+0x52>
 8017d3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017d3e:	3601      	adds	r6, #1
 8017d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017d42:	455a      	cmp	r2, fp
 8017d44:	9903      	ldr	r1, [sp, #12]
 8017d46:	b2f0      	uxtb	r0, r6
 8017d48:	eb73 0101 	sbcs.w	r1, r3, r1
 8017d4c:	da01      	bge.n	8017d52 <listen_message_reliably+0x4a>
 8017d4e:	4693      	mov	fp, r2
 8017d50:	9303      	str	r3, [sp, #12]
 8017d52:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8017d56:	4283      	cmp	r3, r0
 8017d58:	d95f      	bls.n	8017e1a <listen_message_reliably+0x112>
 8017d5a:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8017d5e:	2102      	movs	r1, #2
 8017d60:	2201      	movs	r2, #1
 8017d62:	00e4      	lsls	r4, r4, #3
 8017d64:	f001 f9fe 	bl	8019164 <uxr_stream_id>
 8017d68:	4601      	mov	r1, r0
 8017d6a:	f104 0520 	add.w	r5, r4, #32
 8017d6e:	463b      	mov	r3, r7
 8017d70:	464a      	mov	r2, r9
 8017d72:	9109      	str	r1, [sp, #36]	@ 0x24
 8017d74:	4445      	add	r5, r8
 8017d76:	4628      	mov	r0, r5
 8017d78:	f008 fe8e 	bl	8020a98 <uxr_update_output_stream_heartbeat_timestamp>
 8017d7c:	eb08 0304 	add.w	r3, r8, r4
 8017d80:	2800      	cmp	r0, #0
 8017d82:	d0db      	beq.n	8017d3c <listen_message_reliably+0x34>
 8017d84:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8017d88:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8017d8c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8017d90:	4640      	mov	r0, r8
 8017d92:	3501      	adds	r5, #1
 8017d94:	4444      	add	r4, r8
 8017d96:	9304      	str	r3, [sp, #16]
 8017d98:	f000 fd2e 	bl	80187f8 <uxr_session_header_offset>
 8017d9c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8017da0:	2300      	movs	r3, #0
 8017da2:	2211      	movs	r2, #17
 8017da4:	a90c      	add	r1, sp, #48	@ 0x30
 8017da6:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8017daa:	9000      	str	r0, [sp, #0]
 8017dac:	4650      	mov	r0, sl
 8017dae:	3601      	adds	r6, #1
 8017db0:	f7fc f9c8 	bl	8014144 <ucdr_init_buffer_origin_offset>
 8017db4:	2300      	movs	r3, #0
 8017db6:	2205      	movs	r2, #5
 8017db8:	210b      	movs	r1, #11
 8017dba:	4650      	mov	r0, sl
 8017dbc:	f001 fb10 	bl	80193e0 <uxr_buffer_submessage_header>
 8017dc0:	2101      	movs	r1, #1
 8017dc2:	8968      	ldrh	r0, [r5, #10]
 8017dc4:	f009 f85c 	bl	8020e80 <uxr_seq_num_add>
 8017dc8:	892b      	ldrh	r3, [r5, #8]
 8017dca:	4602      	mov	r2, r0
 8017dcc:	a90a      	add	r1, sp, #40	@ 0x28
 8017dce:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8017dd2:	4650      	mov	r0, sl
 8017dd4:	9b04      	ldr	r3, [sp, #16]
 8017dd6:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8017dda:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8017dde:	f002 fd2f 	bl	801a840 <uxr_serialize_HEARTBEAT_Payload>
 8017de2:	2200      	movs	r2, #0
 8017de4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017de6:	4640      	mov	r0, r8
 8017de8:	4611      	mov	r1, r2
 8017dea:	f000 fcb1 	bl	8018750 <uxr_stamp_session_header>
 8017dee:	4650      	mov	r0, sl
 8017df0:	f7fc f9e8 	bl	80141c4 <ucdr_buffer_length>
 8017df4:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8017df8:	4602      	mov	r2, r0
 8017dfa:	a90c      	add	r1, sp, #48	@ 0x30
 8017dfc:	e9d3 0500 	ldrd	r0, r5, [r3]
 8017e00:	47a8      	blx	r5
 8017e02:	9903      	ldr	r1, [sp, #12]
 8017e04:	b2f0      	uxtb	r0, r6
 8017e06:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8017e0a:	455a      	cmp	r2, fp
 8017e0c:	eb73 0101 	sbcs.w	r1, r3, r1
 8017e10:	db9d      	blt.n	8017d4e <listen_message_reliably+0x46>
 8017e12:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8017e16:	4283      	cmp	r3, r0
 8017e18:	d89f      	bhi.n	8017d5a <listen_message_reliably+0x52>
 8017e1a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017e1e:	9a03      	ldr	r2, [sp, #12]
 8017e20:	429a      	cmp	r2, r3
 8017e22:	bf08      	it	eq
 8017e24:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8017e28:	d019      	beq.n	8017e5e <listen_message_reliably+0x156>
 8017e2a:	ebab 0309 	sub.w	r3, fp, r9
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	9d05      	ldr	r5, [sp, #20]
 8017e32:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 8017e36:	aa08      	add	r2, sp, #32
 8017e38:	bf08      	it	eq
 8017e3a:	2301      	moveq	r3, #1
 8017e3c:	a907      	add	r1, sp, #28
 8017e3e:	6884      	ldr	r4, [r0, #8]
 8017e40:	429d      	cmp	r5, r3
 8017e42:	6800      	ldr	r0, [r0, #0]
 8017e44:	bfa8      	it	ge
 8017e46:	461d      	movge	r5, r3
 8017e48:	462b      	mov	r3, r5
 8017e4a:	47a0      	blx	r4
 8017e4c:	b948      	cbnz	r0, 8017e62 <listen_message_reliably+0x15a>
 8017e4e:	9b05      	ldr	r3, [sp, #20]
 8017e50:	1b5b      	subs	r3, r3, r5
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	9305      	str	r3, [sp, #20]
 8017e56:	f73f af60 	bgt.w	8017d1a <listen_message_reliably+0x12>
 8017e5a:	4604      	mov	r4, r0
 8017e5c:	e012      	b.n	8017e84 <listen_message_reliably+0x17c>
 8017e5e:	9b05      	ldr	r3, [sp, #20]
 8017e60:	e7e5      	b.n	8017e2e <listen_message_reliably+0x126>
 8017e62:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8017e66:	4604      	mov	r4, r0
 8017e68:	2500      	movs	r5, #0
 8017e6a:	a80c      	add	r0, sp, #48	@ 0x30
 8017e6c:	f7fc f97c 	bl	8014168 <ucdr_init_buffer>
 8017e70:	f10d 031a 	add.w	r3, sp, #26
 8017e74:	aa06      	add	r2, sp, #24
 8017e76:	a90c      	add	r1, sp, #48	@ 0x30
 8017e78:	4640      	mov	r0, r8
 8017e7a:	f88d 5018 	strb.w	r5, [sp, #24]
 8017e7e:	f000 fc7b 	bl	8018778 <uxr_read_session_header>
 8017e82:	b918      	cbnz	r0, 8017e8c <listen_message_reliably+0x184>
 8017e84:	4620      	mov	r0, r4
 8017e86:	b01d      	add	sp, #116	@ 0x74
 8017e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e8c:	4629      	mov	r1, r5
 8017e8e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8017e92:	f001 f995 	bl	80191c0 <uxr_stream_id_from_raw>
 8017e96:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8017e9a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8017e9e:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8017ea2:	2e01      	cmp	r6, #1
 8017ea4:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8017ea8:	d04b      	beq.n	8017f42 <listen_message_reliably+0x23a>
 8017eaa:	2e02      	cmp	r6, #2
 8017eac:	d00f      	beq.n	8017ece <listen_message_reliably+0x1c6>
 8017eae:	2e00      	cmp	r6, #0
 8017eb0:	d1e8      	bne.n	8017e84 <listen_message_reliably+0x17c>
 8017eb2:	4631      	mov	r1, r6
 8017eb4:	4630      	mov	r0, r6
 8017eb6:	f001 f983 	bl	80191c0 <uxr_stream_id_from_raw>
 8017eba:	4602      	mov	r2, r0
 8017ebc:	a90c      	add	r1, sp, #48	@ 0x30
 8017ebe:	4640      	mov	r0, r8
 8017ec0:	920a      	str	r2, [sp, #40]	@ 0x28
 8017ec2:	f7ff fd97 	bl	80179f4 <read_submessage_list>
 8017ec6:	4620      	mov	r0, r4
 8017ec8:	b01d      	add	sp, #116	@ 0x74
 8017eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ece:	4629      	mov	r1, r5
 8017ed0:	f108 0008 	add.w	r0, r8, #8
 8017ed4:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8017ed8:	f001 fa60 	bl	801939c <uxr_get_input_reliable_stream>
 8017edc:	4607      	mov	r7, r0
 8017ede:	b338      	cbz	r0, 8017f30 <listen_message_reliably+0x228>
 8017ee0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017ee2:	a80c      	add	r0, sp, #48	@ 0x30
 8017ee4:	9203      	str	r2, [sp, #12]
 8017ee6:	f7fc f971 	bl	80141cc <ucdr_buffer_remaining>
 8017eea:	4603      	mov	r3, r0
 8017eec:	f10d 0019 	add.w	r0, sp, #25
 8017ef0:	9a03      	ldr	r2, [sp, #12]
 8017ef2:	4651      	mov	r1, sl
 8017ef4:	9000      	str	r0, [sp, #0]
 8017ef6:	4638      	mov	r0, r7
 8017ef8:	f008 f9da 	bl	80202b0 <uxr_receive_reliable_message>
 8017efc:	b1c0      	cbz	r0, 8017f30 <listen_message_reliably+0x228>
 8017efe:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8017f02:	b393      	cbz	r3, 8017f6a <listen_message_reliably+0x262>
 8017f04:	ae14      	add	r6, sp, #80	@ 0x50
 8017f06:	f04f 0a02 	mov.w	sl, #2
 8017f0a:	e00a      	b.n	8017f22 <listen_message_reliably+0x21a>
 8017f0c:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8017f10:	4631      	mov	r1, r6
 8017f12:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 8017f16:	4640      	mov	r0, r8
 8017f18:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8017f1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017f1e:	f7ff fd69 	bl	80179f4 <read_submessage_list>
 8017f22:	2204      	movs	r2, #4
 8017f24:	4631      	mov	r1, r6
 8017f26:	4638      	mov	r0, r7
 8017f28:	f008 fa44 	bl	80203b4 <uxr_next_input_reliable_buffer_available>
 8017f2c:	2800      	cmp	r0, #0
 8017f2e:	d1ed      	bne.n	8017f0c <listen_message_reliably+0x204>
 8017f30:	4640      	mov	r0, r8
 8017f32:	462a      	mov	r2, r5
 8017f34:	4649      	mov	r1, r9
 8017f36:	f7ff fbd9 	bl	80176ec <write_submessage_acknack.isra.0>
 8017f3a:	4620      	mov	r0, r4
 8017f3c:	b01d      	add	sp, #116	@ 0x74
 8017f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f42:	4629      	mov	r1, r5
 8017f44:	f108 0008 	add.w	r0, r8, #8
 8017f48:	f001 fa1e 	bl	8019388 <uxr_get_input_best_effort_stream>
 8017f4c:	2800      	cmp	r0, #0
 8017f4e:	d099      	beq.n	8017e84 <listen_message_reliably+0x17c>
 8017f50:	4651      	mov	r1, sl
 8017f52:	f008 f923 	bl	802019c <uxr_receive_best_effort_message>
 8017f56:	2800      	cmp	r0, #0
 8017f58:	d094      	beq.n	8017e84 <listen_message_reliably+0x17c>
 8017f5a:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8017f5e:	a90c      	add	r1, sp, #48	@ 0x30
 8017f60:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017f62:	4640      	mov	r0, r8
 8017f64:	f7ff fd46 	bl	80179f4 <read_submessage_list>
 8017f68:	e78c      	b.n	8017e84 <listen_message_reliably+0x17c>
 8017f6a:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8017f6e:	a90c      	add	r1, sp, #48	@ 0x30
 8017f70:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017f72:	4640      	mov	r0, r8
 8017f74:	f7ff fd3e 	bl	80179f4 <read_submessage_list>
 8017f78:	e7c4      	b.n	8017f04 <listen_message_reliably+0x1fc>
 8017f7a:	bf00      	nop

08017f7c <uxr_run_session_timeout>:
 8017f7c:	b570      	push	{r4, r5, r6, lr}
 8017f7e:	4604      	mov	r4, r0
 8017f80:	460d      	mov	r5, r1
 8017f82:	f001 fa73 	bl	801946c <uxr_millis>
 8017f86:	4606      	mov	r6, r0
 8017f88:	4620      	mov	r0, r4
 8017f8a:	f7ff fc77 	bl	801787c <uxr_flash_output_streams>
 8017f8e:	4629      	mov	r1, r5
 8017f90:	4620      	mov	r0, r4
 8017f92:	f7ff feb9 	bl	8017d08 <listen_message_reliably>
 8017f96:	f001 fa69 	bl	801946c <uxr_millis>
 8017f9a:	1b83      	subs	r3, r0, r6
 8017f9c:	1ae9      	subs	r1, r5, r3
 8017f9e:	2900      	cmp	r1, #0
 8017fa0:	dcf6      	bgt.n	8017f90 <uxr_run_session_timeout+0x14>
 8017fa2:	f104 0008 	add.w	r0, r4, #8
 8017fa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017faa:	f001 ba03 	b.w	80193b4 <uxr_output_streams_confirmed>
 8017fae:	bf00      	nop

08017fb0 <uxr_run_session_until_data>:
 8017fb0:	b570      	push	{r4, r5, r6, lr}
 8017fb2:	4604      	mov	r4, r0
 8017fb4:	460d      	mov	r5, r1
 8017fb6:	f001 fa59 	bl	801946c <uxr_millis>
 8017fba:	4606      	mov	r6, r0
 8017fbc:	4620      	mov	r0, r4
 8017fbe:	f7ff fc5d 	bl	801787c <uxr_flash_output_streams>
 8017fc2:	2300      	movs	r3, #0
 8017fc4:	4629      	mov	r1, r5
 8017fc6:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8017fca:	e005      	b.n	8017fd8 <uxr_run_session_until_data+0x28>
 8017fcc:	f001 fa4e 	bl	801946c <uxr_millis>
 8017fd0:	1b83      	subs	r3, r0, r6
 8017fd2:	1ae9      	subs	r1, r5, r3
 8017fd4:	2900      	cmp	r1, #0
 8017fd6:	dd07      	ble.n	8017fe8 <uxr_run_session_until_data+0x38>
 8017fd8:	4620      	mov	r0, r4
 8017fda:	f7ff fe95 	bl	8017d08 <listen_message_reliably>
 8017fde:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8017fe2:	2800      	cmp	r0, #0
 8017fe4:	d0f2      	beq.n	8017fcc <uxr_run_session_until_data+0x1c>
 8017fe6:	bd70      	pop	{r4, r5, r6, pc}
 8017fe8:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8017fec:	bd70      	pop	{r4, r5, r6, pc}
 8017fee:	bf00      	nop

08017ff0 <uxr_run_session_until_confirm_delivery>:
 8017ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ff4:	4606      	mov	r6, r0
 8017ff6:	460d      	mov	r5, r1
 8017ff8:	f001 fa38 	bl	801946c <uxr_millis>
 8017ffc:	4607      	mov	r7, r0
 8017ffe:	4630      	mov	r0, r6
 8018000:	f106 0808 	add.w	r8, r6, #8
 8018004:	f7ff fc3a 	bl	801787c <uxr_flash_output_streams>
 8018008:	2d00      	cmp	r5, #0
 801800a:	db10      	blt.n	801802e <uxr_run_session_until_confirm_delivery+0x3e>
 801800c:	462c      	mov	r4, r5
 801800e:	e006      	b.n	801801e <uxr_run_session_until_confirm_delivery+0x2e>
 8018010:	f7ff fe7a 	bl	8017d08 <listen_message_reliably>
 8018014:	f001 fa2a 	bl	801946c <uxr_millis>
 8018018:	1bc3      	subs	r3, r0, r7
 801801a:	1aec      	subs	r4, r5, r3
 801801c:	d407      	bmi.n	801802e <uxr_run_session_until_confirm_delivery+0x3e>
 801801e:	4640      	mov	r0, r8
 8018020:	f001 f9c8 	bl	80193b4 <uxr_output_streams_confirmed>
 8018024:	4603      	mov	r3, r0
 8018026:	4621      	mov	r1, r4
 8018028:	4630      	mov	r0, r6
 801802a:	2b00      	cmp	r3, #0
 801802c:	d0f0      	beq.n	8018010 <uxr_run_session_until_confirm_delivery+0x20>
 801802e:	4640      	mov	r0, r8
 8018030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018034:	f001 b9be 	b.w	80193b4 <uxr_output_streams_confirmed>

08018038 <uxr_run_session_until_all_status>:
 8018038:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801803c:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8018040:	4606      	mov	r6, r0
 8018042:	4688      	mov	r8, r1
 8018044:	4692      	mov	sl, r2
 8018046:	461f      	mov	r7, r3
 8018048:	f7ff fc18 	bl	801787c <uxr_flash_output_streams>
 801804c:	f1bb 0f00 	cmp.w	fp, #0
 8018050:	d004      	beq.n	801805c <uxr_run_session_until_all_status+0x24>
 8018052:	465a      	mov	r2, fp
 8018054:	21ff      	movs	r1, #255	@ 0xff
 8018056:	4638      	mov	r0, r7
 8018058:	f00a f92a 	bl	80222b0 <memset>
 801805c:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8018060:	1e7d      	subs	r5, r7, #1
 8018062:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 8018066:	f001 fa01 	bl	801946c <uxr_millis>
 801806a:	4641      	mov	r1, r8
 801806c:	4681      	mov	r9, r0
 801806e:	4630      	mov	r0, r6
 8018070:	f7ff fe4a 	bl	8017d08 <listen_message_reliably>
 8018074:	f001 f9fa 	bl	801946c <uxr_millis>
 8018078:	eba0 0009 	sub.w	r0, r0, r9
 801807c:	eba8 0100 	sub.w	r1, r8, r0
 8018080:	f1bb 0f00 	cmp.w	fp, #0
 8018084:	d029      	beq.n	80180da <uxr_run_session_until_all_status+0xa2>
 8018086:	46ae      	mov	lr, r5
 8018088:	f04f 0c00 	mov.w	ip, #0
 801808c:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8018090:	2cff      	cmp	r4, #255	@ 0xff
 8018092:	d015      	beq.n	80180c0 <uxr_run_session_until_all_status+0x88>
 8018094:	f10c 0c01 	add.w	ip, ip, #1
 8018098:	45e3      	cmp	fp, ip
 801809a:	d8f7      	bhi.n	801808c <uxr_run_session_until_all_status+0x54>
 801809c:	2300      	movs	r3, #0
 801809e:	67f3      	str	r3, [r6, #124]	@ 0x7c
 80180a0:	e000      	b.n	80180a4 <uxr_run_session_until_all_status+0x6c>
 80180a2:	b158      	cbz	r0, 80180bc <uxr_run_session_until_all_status+0x84>
 80180a4:	462b      	mov	r3, r5
 80180a6:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80180aa:	3302      	adds	r3, #2
 80180ac:	2801      	cmp	r0, #1
 80180ae:	eba3 0307 	sub.w	r3, r3, r7
 80180b2:	bf8c      	ite	hi
 80180b4:	2000      	movhi	r0, #0
 80180b6:	2001      	movls	r0, #1
 80180b8:	459b      	cmp	fp, r3
 80180ba:	d8f2      	bhi.n	80180a2 <uxr_run_session_until_all_status+0x6a>
 80180bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180c0:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 80180c4:	f10c 0c01 	add.w	ip, ip, #1
 80180c8:	45dc      	cmp	ip, fp
 80180ca:	d201      	bcs.n	80180d0 <uxr_run_session_until_all_status+0x98>
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d0dd      	beq.n	801808c <uxr_run_session_until_all_status+0x54>
 80180d0:	2900      	cmp	r1, #0
 80180d2:	dde3      	ble.n	801809c <uxr_run_session_until_all_status+0x64>
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d1ca      	bne.n	801806e <uxr_run_session_until_all_status+0x36>
 80180d8:	e7e0      	b.n	801809c <uxr_run_session_until_all_status+0x64>
 80180da:	2001      	movs	r0, #1
 80180dc:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 80180e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180e4:	0000      	movs	r0, r0
	...

080180e8 <uxr_sync_session>:
 80180e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80180ea:	b093      	sub	sp, #76	@ 0x4c
 80180ec:	4604      	mov	r4, r0
 80180ee:	460d      	mov	r5, r1
 80180f0:	f000 fb82 	bl	80187f8 <uxr_session_header_offset>
 80180f4:	2214      	movs	r2, #20
 80180f6:	2300      	movs	r3, #0
 80180f8:	9000      	str	r0, [sp, #0]
 80180fa:	a80a      	add	r0, sp, #40	@ 0x28
 80180fc:	eb0d 0102 	add.w	r1, sp, r2
 8018100:	f7fc f820 	bl	8014144 <ucdr_init_buffer_origin_offset>
 8018104:	2300      	movs	r3, #0
 8018106:	2208      	movs	r2, #8
 8018108:	210e      	movs	r1, #14
 801810a:	a80a      	add	r0, sp, #40	@ 0x28
 801810c:	f001 f968 	bl	80193e0 <uxr_buffer_submessage_header>
 8018110:	f001 f9c8 	bl	80194a4 <uxr_nanos>
 8018114:	460e      	mov	r6, r1
 8018116:	4607      	mov	r7, r0
 8018118:	a31b      	add	r3, pc, #108	@ (adr r3, 8018188 <uxr_sync_session+0xa0>)
 801811a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801811e:	f7e8 f947 	bl	80003b0 <__aeabi_ldivmod>
 8018122:	4631      	mov	r1, r6
 8018124:	9003      	str	r0, [sp, #12]
 8018126:	4638      	mov	r0, r7
 8018128:	a317      	add	r3, pc, #92	@ (adr r3, 8018188 <uxr_sync_session+0xa0>)
 801812a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801812e:	f7e8 f93f 	bl	80003b0 <__aeabi_ldivmod>
 8018132:	a903      	add	r1, sp, #12
 8018134:	a80a      	add	r0, sp, #40	@ 0x28
 8018136:	9204      	str	r2, [sp, #16]
 8018138:	f002 fbaa 	bl	801a890 <uxr_serialize_TIMESTAMP_Payload>
 801813c:	2200      	movs	r2, #0
 801813e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018140:	4620      	mov	r0, r4
 8018142:	4611      	mov	r1, r2
 8018144:	f000 fb04 	bl	8018750 <uxr_stamp_session_header>
 8018148:	a80a      	add	r0, sp, #40	@ 0x28
 801814a:	f7fc f83b 	bl	80141c4 <ucdr_buffer_length>
 801814e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018150:	4602      	mov	r2, r0
 8018152:	a905      	add	r1, sp, #20
 8018154:	e9d3 0600 	ldrd	r0, r6, [r3]
 8018158:	47b0      	blx	r6
 801815a:	f001 f987 	bl	801946c <uxr_millis>
 801815e:	2300      	movs	r3, #0
 8018160:	4606      	mov	r6, r0
 8018162:	4629      	mov	r1, r5
 8018164:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8018168:	e000      	b.n	801816c <uxr_sync_session+0x84>
 801816a:	b950      	cbnz	r0, 8018182 <uxr_sync_session+0x9a>
 801816c:	4620      	mov	r0, r4
 801816e:	f7ff fdcb 	bl	8017d08 <listen_message_reliably>
 8018172:	f001 f97b 	bl	801946c <uxr_millis>
 8018176:	1b83      	subs	r3, r0, r6
 8018178:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 801817c:	1ae9      	subs	r1, r5, r3
 801817e:	2900      	cmp	r1, #0
 8018180:	dcf3      	bgt.n	801816a <uxr_sync_session+0x82>
 8018182:	b013      	add	sp, #76	@ 0x4c
 8018184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018186:	bf00      	nop
 8018188:	3b9aca00 	.word	0x3b9aca00
 801818c:	00000000 	.word	0x00000000

08018190 <uxr_run_session_until_pong>:
 8018190:	b570      	push	{r4, r5, r6, lr}
 8018192:	4604      	mov	r4, r0
 8018194:	460d      	mov	r5, r1
 8018196:	f001 f969 	bl	801946c <uxr_millis>
 801819a:	4606      	mov	r6, r0
 801819c:	4620      	mov	r0, r4
 801819e:	f7ff fb6d 	bl	801787c <uxr_flash_output_streams>
 80181a2:	2300      	movs	r3, #0
 80181a4:	4629      	mov	r1, r5
 80181a6:	f884 30b5 	strb.w	r3, [r4, #181]	@ 0xb5
 80181aa:	e005      	b.n	80181b8 <uxr_run_session_until_pong+0x28>
 80181ac:	f001 f95e 	bl	801946c <uxr_millis>
 80181b0:	1b83      	subs	r3, r0, r6
 80181b2:	1ae9      	subs	r1, r5, r3
 80181b4:	2900      	cmp	r1, #0
 80181b6:	dd0c      	ble.n	80181d2 <uxr_run_session_until_pong+0x42>
 80181b8:	4620      	mov	r0, r4
 80181ba:	f7ff fda5 	bl	8017d08 <listen_message_reliably>
 80181be:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 80181c2:	2800      	cmp	r0, #0
 80181c4:	d0f2      	beq.n	80181ac <uxr_run_session_until_pong+0x1c>
 80181c6:	f1a0 0001 	sub.w	r0, r0, #1
 80181ca:	fab0 f080 	clz	r0, r0
 80181ce:	0940      	lsrs	r0, r0, #5
 80181d0:	bd70      	pop	{r4, r5, r6, pc}
 80181d2:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 80181d6:	f1a0 0001 	sub.w	r0, r0, #1
 80181da:	fab0 f080 	clz	r0, r0
 80181de:	0940      	lsrs	r0, r0, #5
 80181e0:	bd70      	pop	{r4, r5, r6, pc}
 80181e2:	bf00      	nop

080181e4 <wait_session_status>:
 80181e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181e8:	4604      	mov	r4, r0
 80181ea:	b09d      	sub	sp, #116	@ 0x74
 80181ec:	20ff      	movs	r0, #255	@ 0xff
 80181ee:	9303      	str	r3, [sp, #12]
 80181f0:	7160      	strb	r0, [r4, #5]
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	f000 80b6 	beq.w	8018364 <wait_session_status+0x180>
 80181f8:	4689      	mov	r9, r1
 80181fa:	4692      	mov	sl, r2
 80181fc:	f04f 0b00 	mov.w	fp, #0
 8018200:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018202:	4652      	mov	r2, sl
 8018204:	4649      	mov	r1, r9
 8018206:	e9d3 0500 	ldrd	r0, r5, [r3]
 801820a:	47a8      	blx	r5
 801820c:	f001 f92e 	bl	801946c <uxr_millis>
 8018210:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8018214:	4605      	mov	r5, r0
 8018216:	e009      	b.n	801822c <wait_session_status+0x48>
 8018218:	f001 f928 	bl	801946c <uxr_millis>
 801821c:	1b40      	subs	r0, r0, r5
 801821e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8018222:	2b00      	cmp	r3, #0
 8018224:	dd40      	ble.n	80182a8 <wait_session_status+0xc4>
 8018226:	7960      	ldrb	r0, [r4, #5]
 8018228:	28ff      	cmp	r0, #255	@ 0xff
 801822a:	d145      	bne.n	80182b8 <wait_session_status+0xd4>
 801822c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801822e:	a908      	add	r1, sp, #32
 8018230:	6896      	ldr	r6, [r2, #8]
 8018232:	6810      	ldr	r0, [r2, #0]
 8018234:	aa09      	add	r2, sp, #36	@ 0x24
 8018236:	47b0      	blx	r6
 8018238:	2800      	cmp	r0, #0
 801823a:	d0ed      	beq.n	8018218 <wait_session_status+0x34>
 801823c:	a80c      	add	r0, sp, #48	@ 0x30
 801823e:	2600      	movs	r6, #0
 8018240:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8018244:	f7fb ff90 	bl	8014168 <ucdr_init_buffer>
 8018248:	f10d 031e 	add.w	r3, sp, #30
 801824c:	aa07      	add	r2, sp, #28
 801824e:	a90c      	add	r1, sp, #48	@ 0x30
 8018250:	4620      	mov	r0, r4
 8018252:	f88d 601c 	strb.w	r6, [sp, #28]
 8018256:	f000 fa8f 	bl	8018778 <uxr_read_session_header>
 801825a:	2800      	cmp	r0, #0
 801825c:	d0dc      	beq.n	8018218 <wait_session_status+0x34>
 801825e:	4631      	mov	r1, r6
 8018260:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8018264:	f000 ffac 	bl	80191c0 <uxr_stream_id_from_raw>
 8018268:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801826c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8018270:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8018274:	2f01      	cmp	r7, #1
 8018276:	9302      	str	r3, [sp, #8]
 8018278:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 801827c:	d05c      	beq.n	8018338 <wait_session_status+0x154>
 801827e:	2f02      	cmp	r7, #2
 8018280:	d020      	beq.n	80182c4 <wait_session_status+0xe0>
 8018282:	2f00      	cmp	r7, #0
 8018284:	d1c8      	bne.n	8018218 <wait_session_status+0x34>
 8018286:	4639      	mov	r1, r7
 8018288:	4638      	mov	r0, r7
 801828a:	f000 ff99 	bl	80191c0 <uxr_stream_id_from_raw>
 801828e:	a90c      	add	r1, sp, #48	@ 0x30
 8018290:	4602      	mov	r2, r0
 8018292:	900b      	str	r0, [sp, #44]	@ 0x2c
 8018294:	4620      	mov	r0, r4
 8018296:	f7ff fbad 	bl	80179f4 <read_submessage_list>
 801829a:	f001 f8e7 	bl	801946c <uxr_millis>
 801829e:	1b40      	subs	r0, r0, r5
 80182a0:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	dcbe      	bgt.n	8018226 <wait_session_status+0x42>
 80182a8:	f10b 0b01 	add.w	fp, fp, #1
 80182ac:	9b03      	ldr	r3, [sp, #12]
 80182ae:	7960      	ldrb	r0, [r4, #5]
 80182b0:	455b      	cmp	r3, fp
 80182b2:	d001      	beq.n	80182b8 <wait_session_status+0xd4>
 80182b4:	28ff      	cmp	r0, #255	@ 0xff
 80182b6:	d0a3      	beq.n	8018200 <wait_session_status+0x1c>
 80182b8:	38ff      	subs	r0, #255	@ 0xff
 80182ba:	bf18      	it	ne
 80182bc:	2001      	movne	r0, #1
 80182be:	b01d      	add	sp, #116	@ 0x74
 80182c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182c4:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80182c8:	4631      	mov	r1, r6
 80182ca:	f104 0008 	add.w	r0, r4, #8
 80182ce:	9304      	str	r3, [sp, #16]
 80182d0:	f001 f864 	bl	801939c <uxr_get_input_reliable_stream>
 80182d4:	4680      	mov	r8, r0
 80182d6:	b348      	cbz	r0, 801832c <wait_session_status+0x148>
 80182d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80182da:	a80c      	add	r0, sp, #48	@ 0x30
 80182dc:	9205      	str	r2, [sp, #20]
 80182de:	f7fb ff75 	bl	80141cc <ucdr_buffer_remaining>
 80182e2:	4603      	mov	r3, r0
 80182e4:	f10d 001d 	add.w	r0, sp, #29
 80182e8:	9a05      	ldr	r2, [sp, #20]
 80182ea:	9000      	str	r0, [sp, #0]
 80182ec:	4640      	mov	r0, r8
 80182ee:	9902      	ldr	r1, [sp, #8]
 80182f0:	f007 ffde 	bl	80202b0 <uxr_receive_reliable_message>
 80182f4:	b1d0      	cbz	r0, 801832c <wait_session_status+0x148>
 80182f6:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d03a      	beq.n	8018374 <wait_session_status+0x190>
 80182fe:	9f04      	ldr	r7, [sp, #16]
 8018300:	e00a      	b.n	8018318 <wait_session_status+0x134>
 8018302:	f04f 0302 	mov.w	r3, #2
 8018306:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 801830a:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801830e:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8018312:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018314:	f7ff fb6e 	bl	80179f4 <read_submessage_list>
 8018318:	a914      	add	r1, sp, #80	@ 0x50
 801831a:	2204      	movs	r2, #4
 801831c:	4640      	mov	r0, r8
 801831e:	f008 f849 	bl	80203b4 <uxr_next_input_reliable_buffer_available>
 8018322:	4603      	mov	r3, r0
 8018324:	a914      	add	r1, sp, #80	@ 0x50
 8018326:	4620      	mov	r0, r4
 8018328:	2b00      	cmp	r3, #0
 801832a:	d1ea      	bne.n	8018302 <wait_session_status+0x11e>
 801832c:	4632      	mov	r2, r6
 801832e:	9904      	ldr	r1, [sp, #16]
 8018330:	4620      	mov	r0, r4
 8018332:	f7ff f9db 	bl	80176ec <write_submessage_acknack.isra.0>
 8018336:	e76f      	b.n	8018218 <wait_session_status+0x34>
 8018338:	4631      	mov	r1, r6
 801833a:	f104 0008 	add.w	r0, r4, #8
 801833e:	f001 f823 	bl	8019388 <uxr_get_input_best_effort_stream>
 8018342:	2800      	cmp	r0, #0
 8018344:	f43f af68 	beq.w	8018218 <wait_session_status+0x34>
 8018348:	9902      	ldr	r1, [sp, #8]
 801834a:	f007 ff27 	bl	802019c <uxr_receive_best_effort_message>
 801834e:	2800      	cmp	r0, #0
 8018350:	f43f af62 	beq.w	8018218 <wait_session_status+0x34>
 8018354:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8018358:	a90c      	add	r1, sp, #48	@ 0x30
 801835a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801835c:	4620      	mov	r0, r4
 801835e:	f7ff fb49 	bl	80179f4 <read_submessage_list>
 8018362:	e759      	b.n	8018218 <wait_session_status+0x34>
 8018364:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018366:	e9d3 0400 	ldrd	r0, r4, [r3]
 801836a:	47a0      	blx	r4
 801836c:	2001      	movs	r0, #1
 801836e:	b01d      	add	sp, #116	@ 0x74
 8018370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018374:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8018378:	a90c      	add	r1, sp, #48	@ 0x30
 801837a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801837c:	4620      	mov	r0, r4
 801837e:	f7ff fb39 	bl	80179f4 <read_submessage_list>
 8018382:	e7bc      	b.n	80182fe <wait_session_status+0x11a>

08018384 <uxr_delete_session_retries>:
 8018384:	b530      	push	{r4, r5, lr}
 8018386:	b08f      	sub	sp, #60	@ 0x3c
 8018388:	4604      	mov	r4, r0
 801838a:	460d      	mov	r5, r1
 801838c:	f000 fa34 	bl	80187f8 <uxr_session_header_offset>
 8018390:	2300      	movs	r3, #0
 8018392:	2210      	movs	r2, #16
 8018394:	a902      	add	r1, sp, #8
 8018396:	9000      	str	r0, [sp, #0]
 8018398:	a806      	add	r0, sp, #24
 801839a:	f7fb fed3 	bl	8014144 <ucdr_init_buffer_origin_offset>
 801839e:	a906      	add	r1, sp, #24
 80183a0:	4620      	mov	r0, r4
 80183a2:	f000 f979 	bl	8018698 <uxr_buffer_delete_session>
 80183a6:	2200      	movs	r2, #0
 80183a8:	9b06      	ldr	r3, [sp, #24]
 80183aa:	4620      	mov	r0, r4
 80183ac:	4611      	mov	r1, r2
 80183ae:	f000 f9cf 	bl	8018750 <uxr_stamp_session_header>
 80183b2:	a806      	add	r0, sp, #24
 80183b4:	f7fb ff06 	bl	80141c4 <ucdr_buffer_length>
 80183b8:	462b      	mov	r3, r5
 80183ba:	4602      	mov	r2, r0
 80183bc:	a902      	add	r1, sp, #8
 80183be:	4620      	mov	r0, r4
 80183c0:	f7ff ff10 	bl	80181e4 <wait_session_status>
 80183c4:	b118      	cbz	r0, 80183ce <uxr_delete_session_retries+0x4a>
 80183c6:	7960      	ldrb	r0, [r4, #5]
 80183c8:	fab0 f080 	clz	r0, r0
 80183cc:	0940      	lsrs	r0, r0, #5
 80183ce:	b00f      	add	sp, #60	@ 0x3c
 80183d0:	bd30      	pop	{r4, r5, pc}
 80183d2:	bf00      	nop

080183d4 <uxr_create_session>:
 80183d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183d8:	f100 0b08 	add.w	fp, r0, #8
 80183dc:	4604      	mov	r4, r0
 80183de:	b0ab      	sub	sp, #172	@ 0xac
 80183e0:	4658      	mov	r0, fp
 80183e2:	465e      	mov	r6, fp
 80183e4:	f000 ff22 	bl	801922c <uxr_reset_stream_storage>
 80183e8:	4620      	mov	r0, r4
 80183ea:	f000 fa05 	bl	80187f8 <uxr_session_header_offset>
 80183ee:	2300      	movs	r3, #0
 80183f0:	221c      	movs	r2, #28
 80183f2:	a90b      	add	r1, sp, #44	@ 0x2c
 80183f4:	9000      	str	r0, [sp, #0]
 80183f6:	a812      	add	r0, sp, #72	@ 0x48
 80183f8:	f7fb fea4 	bl	8014144 <ucdr_init_buffer_origin_offset>
 80183fc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80183fe:	a912      	add	r1, sp, #72	@ 0x48
 8018400:	4620      	mov	r0, r4
 8018402:	8a1a      	ldrh	r2, [r3, #16]
 8018404:	3a04      	subs	r2, #4
 8018406:	b292      	uxth	r2, r2
 8018408:	f000 f91c 	bl	8018644 <uxr_buffer_create_session>
 801840c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801840e:	4620      	mov	r0, r4
 8018410:	f000 f98a 	bl	8018728 <uxr_stamp_create_session_header>
 8018414:	a812      	add	r0, sp, #72	@ 0x48
 8018416:	f7fb fed5 	bl	80141c4 <ucdr_buffer_length>
 801841a:	23ff      	movs	r3, #255	@ 0xff
 801841c:	4681      	mov	r9, r0
 801841e:	7163      	strb	r3, [r4, #5]
 8018420:	230a      	movs	r3, #10
 8018422:	9303      	str	r3, [sp, #12]
 8018424:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018426:	464a      	mov	r2, r9
 8018428:	a90b      	add	r1, sp, #44	@ 0x2c
 801842a:	e9d3 0500 	ldrd	r0, r5, [r3]
 801842e:	47a8      	blx	r5
 8018430:	f001 f81c 	bl	801946c <uxr_millis>
 8018434:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8018438:	4605      	mov	r5, r0
 801843a:	e009      	b.n	8018450 <uxr_create_session+0x7c>
 801843c:	f001 f816 	bl	801946c <uxr_millis>
 8018440:	1b40      	subs	r0, r0, r5
 8018442:	7962      	ldrb	r2, [r4, #5]
 8018444:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8018448:	2b00      	cmp	r3, #0
 801844a:	dd38      	ble.n	80184be <uxr_create_session+0xea>
 801844c:	2aff      	cmp	r2, #255	@ 0xff
 801844e:	d13c      	bne.n	80184ca <uxr_create_session+0xf6>
 8018450:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8018452:	a907      	add	r1, sp, #28
 8018454:	6897      	ldr	r7, [r2, #8]
 8018456:	6810      	ldr	r0, [r2, #0]
 8018458:	aa08      	add	r2, sp, #32
 801845a:	47b8      	blx	r7
 801845c:	2800      	cmp	r0, #0
 801845e:	d0ed      	beq.n	801843c <uxr_create_session+0x68>
 8018460:	a81a      	add	r0, sp, #104	@ 0x68
 8018462:	2700      	movs	r7, #0
 8018464:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8018468:	f7fb fe7e 	bl	8014168 <ucdr_init_buffer>
 801846c:	f10d 031a 	add.w	r3, sp, #26
 8018470:	aa06      	add	r2, sp, #24
 8018472:	a91a      	add	r1, sp, #104	@ 0x68
 8018474:	4620      	mov	r0, r4
 8018476:	f88d 7018 	strb.w	r7, [sp, #24]
 801847a:	f000 f97d 	bl	8018778 <uxr_read_session_header>
 801847e:	2800      	cmp	r0, #0
 8018480:	d0dc      	beq.n	801843c <uxr_create_session+0x68>
 8018482:	4639      	mov	r1, r7
 8018484:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8018488:	f000 fe9a 	bl	80191c0 <uxr_stream_id_from_raw>
 801848c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8018490:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8018494:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8018498:	2f01      	cmp	r7, #1
 801849a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801849e:	d053      	beq.n	8018548 <uxr_create_session+0x174>
 80184a0:	2f02      	cmp	r7, #2
 80184a2:	d018      	beq.n	80184d6 <uxr_create_session+0x102>
 80184a4:	2f00      	cmp	r7, #0
 80184a6:	d1c9      	bne.n	801843c <uxr_create_session+0x68>
 80184a8:	4639      	mov	r1, r7
 80184aa:	4638      	mov	r0, r7
 80184ac:	f000 fe88 	bl	80191c0 <uxr_stream_id_from_raw>
 80184b0:	a91a      	add	r1, sp, #104	@ 0x68
 80184b2:	4602      	mov	r2, r0
 80184b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80184b6:	4620      	mov	r0, r4
 80184b8:	f7ff fa9c 	bl	80179f4 <read_submessage_list>
 80184bc:	e7be      	b.n	801843c <uxr_create_session+0x68>
 80184be:	9b03      	ldr	r3, [sp, #12]
 80184c0:	3b01      	subs	r3, #1
 80184c2:	9303      	str	r3, [sp, #12]
 80184c4:	d001      	beq.n	80184ca <uxr_create_session+0xf6>
 80184c6:	2aff      	cmp	r2, #255	@ 0xff
 80184c8:	d0ac      	beq.n	8018424 <uxr_create_session+0x50>
 80184ca:	2a00      	cmp	r2, #0
 80184cc:	d051      	beq.n	8018572 <uxr_create_session+0x19e>
 80184ce:	2000      	movs	r0, #0
 80184d0:	b02b      	add	sp, #172	@ 0xac
 80184d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184d6:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80184da:	4641      	mov	r1, r8
 80184dc:	4630      	mov	r0, r6
 80184de:	9304      	str	r3, [sp, #16]
 80184e0:	f000 ff5c 	bl	801939c <uxr_get_input_reliable_stream>
 80184e4:	4682      	mov	sl, r0
 80184e6:	b348      	cbz	r0, 801853c <uxr_create_session+0x168>
 80184e8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80184ea:	a81a      	add	r0, sp, #104	@ 0x68
 80184ec:	9205      	str	r2, [sp, #20]
 80184ee:	f7fb fe6d 	bl	80141cc <ucdr_buffer_remaining>
 80184f2:	4603      	mov	r3, r0
 80184f4:	f10d 0019 	add.w	r0, sp, #25
 80184f8:	9a05      	ldr	r2, [sp, #20]
 80184fa:	4659      	mov	r1, fp
 80184fc:	9000      	str	r0, [sp, #0]
 80184fe:	4650      	mov	r0, sl
 8018500:	f007 fed6 	bl	80202b0 <uxr_receive_reliable_message>
 8018504:	b1d0      	cbz	r0, 801853c <uxr_create_session+0x168>
 8018506:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801850a:	2b00      	cmp	r3, #0
 801850c:	d038      	beq.n	8018580 <uxr_create_session+0x1ac>
 801850e:	9f04      	ldr	r7, [sp, #16]
 8018510:	e00a      	b.n	8018528 <uxr_create_session+0x154>
 8018512:	f04f 0302 	mov.w	r3, #2
 8018516:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 801851a:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 801851e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018522:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018524:	f7ff fa66 	bl	80179f4 <read_submessage_list>
 8018528:	a922      	add	r1, sp, #136	@ 0x88
 801852a:	2204      	movs	r2, #4
 801852c:	4650      	mov	r0, sl
 801852e:	f007 ff41 	bl	80203b4 <uxr_next_input_reliable_buffer_available>
 8018532:	4603      	mov	r3, r0
 8018534:	a922      	add	r1, sp, #136	@ 0x88
 8018536:	4620      	mov	r0, r4
 8018538:	2b00      	cmp	r3, #0
 801853a:	d1ea      	bne.n	8018512 <uxr_create_session+0x13e>
 801853c:	4642      	mov	r2, r8
 801853e:	9904      	ldr	r1, [sp, #16]
 8018540:	4620      	mov	r0, r4
 8018542:	f7ff f8d3 	bl	80176ec <write_submessage_acknack.isra.0>
 8018546:	e779      	b.n	801843c <uxr_create_session+0x68>
 8018548:	4641      	mov	r1, r8
 801854a:	4630      	mov	r0, r6
 801854c:	f000 ff1c 	bl	8019388 <uxr_get_input_best_effort_stream>
 8018550:	2800      	cmp	r0, #0
 8018552:	f43f af73 	beq.w	801843c <uxr_create_session+0x68>
 8018556:	4659      	mov	r1, fp
 8018558:	f007 fe20 	bl	802019c <uxr_receive_best_effort_message>
 801855c:	2800      	cmp	r0, #0
 801855e:	f43f af6d 	beq.w	801843c <uxr_create_session+0x68>
 8018562:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8018566:	a91a      	add	r1, sp, #104	@ 0x68
 8018568:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801856a:	4620      	mov	r0, r4
 801856c:	f7ff fa42 	bl	80179f4 <read_submessage_list>
 8018570:	e764      	b.n	801843c <uxr_create_session+0x68>
 8018572:	4630      	mov	r0, r6
 8018574:	f000 fe5a 	bl	801922c <uxr_reset_stream_storage>
 8018578:	2001      	movs	r0, #1
 801857a:	b02b      	add	sp, #172	@ 0xac
 801857c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018580:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8018584:	a91a      	add	r1, sp, #104	@ 0x68
 8018586:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018588:	4620      	mov	r0, r4
 801858a:	f7ff fa33 	bl	80179f4 <read_submessage_list>
 801858e:	e7be      	b.n	801850e <uxr_create_session+0x13a>

08018590 <uxr_prepare_stream_to_write_submessage>:
 8018590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018594:	b082      	sub	sp, #8
 8018596:	4604      	mov	r4, r0
 8018598:	4610      	mov	r0, r2
 801859a:	4615      	mov	r5, r2
 801859c:	461e      	mov	r6, r3
 801859e:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 80185a2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80185a6:	f105 0904 	add.w	r9, r5, #4
 80185aa:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80185ae:	9101      	str	r1, [sp, #4]
 80185b0:	f000 ff56 	bl	8019460 <uxr_submessage_padding>
 80185b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80185b8:	4481      	add	r9, r0
 80185ba:	2b01      	cmp	r3, #1
 80185bc:	d01d      	beq.n	80185fa <uxr_prepare_stream_to_write_submessage+0x6a>
 80185be:	2b02      	cmp	r3, #2
 80185c0:	d116      	bne.n	80185f0 <uxr_prepare_stream_to_write_submessage+0x60>
 80185c2:	f104 0008 	add.w	r0, r4, #8
 80185c6:	4651      	mov	r1, sl
 80185c8:	f000 fed2 	bl	8019370 <uxr_get_output_reliable_stream>
 80185cc:	4604      	mov	r4, r0
 80185ce:	b158      	cbz	r0, 80185e8 <uxr_prepare_stream_to_write_submessage+0x58>
 80185d0:	4649      	mov	r1, r9
 80185d2:	4632      	mov	r2, r6
 80185d4:	f008 f8b2 	bl	802073c <uxr_prepare_reliable_buffer_to_write>
 80185d8:	4604      	mov	r4, r0
 80185da:	b12c      	cbz	r4, 80185e8 <uxr_prepare_stream_to_write_submessage+0x58>
 80185dc:	4643      	mov	r3, r8
 80185de:	b2aa      	uxth	r2, r5
 80185e0:	4639      	mov	r1, r7
 80185e2:	4630      	mov	r0, r6
 80185e4:	f000 fefc 	bl	80193e0 <uxr_buffer_submessage_header>
 80185e8:	4620      	mov	r0, r4
 80185ea:	b002      	add	sp, #8
 80185ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185f0:	2400      	movs	r4, #0
 80185f2:	4620      	mov	r0, r4
 80185f4:	b002      	add	sp, #8
 80185f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185fa:	f104 0008 	add.w	r0, r4, #8
 80185fe:	4651      	mov	r1, sl
 8018600:	f000 feae 	bl	8019360 <uxr_get_output_best_effort_stream>
 8018604:	4604      	mov	r4, r0
 8018606:	2800      	cmp	r0, #0
 8018608:	d0ee      	beq.n	80185e8 <uxr_prepare_stream_to_write_submessage+0x58>
 801860a:	4649      	mov	r1, r9
 801860c:	4632      	mov	r2, r6
 801860e:	f007 ffc1 	bl	8020594 <uxr_prepare_best_effort_buffer_to_write>
 8018612:	4604      	mov	r4, r0
 8018614:	e7e1      	b.n	80185da <uxr_prepare_stream_to_write_submessage+0x4a>
 8018616:	bf00      	nop

08018618 <uxr_init_session_info>:
 8018618:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801861c:	23ff      	movs	r3, #255	@ 0xff
 801861e:	7102      	strb	r2, [r0, #4]
 8018620:	f880 c001 	strb.w	ip, [r0, #1]
 8018624:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8018628:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801862c:	7001      	strb	r1, [r0, #0]
 801862e:	f880 c002 	strb.w	ip, [r0, #2]
 8018632:	7143      	strb	r3, [r0, #5]
 8018634:	70c2      	strb	r2, [r0, #3]
 8018636:	b500      	push	{lr}
 8018638:	f04f 0e09 	mov.w	lr, #9
 801863c:	f8a0 e006 	strh.w	lr, [r0, #6]
 8018640:	f85d fb04 	ldr.w	pc, [sp], #4

08018644 <uxr_buffer_create_session>:
 8018644:	b530      	push	{r4, r5, lr}
 8018646:	2300      	movs	r3, #0
 8018648:	b089      	sub	sp, #36	@ 0x24
 801864a:	4d12      	ldr	r5, [pc, #72]	@ (8018694 <uxr_buffer_create_session+0x50>)
 801864c:	460c      	mov	r4, r1
 801864e:	9307      	str	r3, [sp, #28]
 8018650:	4619      	mov	r1, r3
 8018652:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018656:	2201      	movs	r2, #1
 8018658:	9301      	str	r3, [sp, #4]
 801865a:	80c2      	strh	r2, [r0, #6]
 801865c:	f88d 2004 	strb.w	r2, [sp, #4]
 8018660:	682a      	ldr	r2, [r5, #0]
 8018662:	9303      	str	r3, [sp, #12]
 8018664:	9200      	str	r2, [sp, #0]
 8018666:	88aa      	ldrh	r2, [r5, #4]
 8018668:	9306      	str	r3, [sp, #24]
 801866a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801866e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8018672:	9202      	str	r2, [sp, #8]
 8018674:	7802      	ldrb	r2, [r0, #0]
 8018676:	4620      	mov	r0, r4
 8018678:	f88d 200c 	strb.w	r2, [sp, #12]
 801867c:	2210      	movs	r2, #16
 801867e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8018682:	f000 fead 	bl	80193e0 <uxr_buffer_submessage_header>
 8018686:	4669      	mov	r1, sp
 8018688:	4620      	mov	r0, r4
 801868a:	f001 ff1f 	bl	801a4cc <uxr_serialize_CREATE_CLIENT_Payload>
 801868e:	b009      	add	sp, #36	@ 0x24
 8018690:	bd30      	pop	{r4, r5, pc}
 8018692:	bf00      	nop
 8018694:	08023424 	.word	0x08023424

08018698 <uxr_buffer_delete_session>:
 8018698:	4a0c      	ldr	r2, [pc, #48]	@ (80186cc <uxr_buffer_delete_session+0x34>)
 801869a:	2302      	movs	r3, #2
 801869c:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 80186a0:	b510      	push	{r4, lr}
 80186a2:	460c      	mov	r4, r1
 80186a4:	b082      	sub	sp, #8
 80186a6:	8911      	ldrh	r1, [r2, #8]
 80186a8:	2204      	movs	r2, #4
 80186aa:	80c3      	strh	r3, [r0, #6]
 80186ac:	2300      	movs	r3, #0
 80186ae:	f8ad 1006 	strh.w	r1, [sp, #6]
 80186b2:	4620      	mov	r0, r4
 80186b4:	2103      	movs	r1, #3
 80186b6:	f8ad c004 	strh.w	ip, [sp, #4]
 80186ba:	f000 fe91 	bl	80193e0 <uxr_buffer_submessage_header>
 80186be:	a901      	add	r1, sp, #4
 80186c0:	4620      	mov	r0, r4
 80186c2:	f001 ffc1 	bl	801a648 <uxr_serialize_DELETE_Payload>
 80186c6:	b002      	add	sp, #8
 80186c8:	bd10      	pop	{r4, pc}
 80186ca:	bf00      	nop
 80186cc:	08023424 	.word	0x08023424

080186d0 <uxr_read_create_session_status>:
 80186d0:	b510      	push	{r4, lr}
 80186d2:	460b      	mov	r3, r1
 80186d4:	b088      	sub	sp, #32
 80186d6:	4604      	mov	r4, r0
 80186d8:	a901      	add	r1, sp, #4
 80186da:	4618      	mov	r0, r3
 80186dc:	f001 ffc4 	bl	801a668 <uxr_deserialize_STATUS_AGENT_Payload>
 80186e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80186e4:	7163      	strb	r3, [r4, #5]
 80186e6:	b008      	add	sp, #32
 80186e8:	bd10      	pop	{r4, pc}
 80186ea:	bf00      	nop

080186ec <uxr_read_delete_session_status>:
 80186ec:	b510      	push	{r4, lr}
 80186ee:	b084      	sub	sp, #16
 80186f0:	4604      	mov	r4, r0
 80186f2:	4608      	mov	r0, r1
 80186f4:	a902      	add	r1, sp, #8
 80186f6:	f001 ffe7 	bl	801a6c8 <uxr_deserialize_STATUS_Payload>
 80186fa:	88e3      	ldrh	r3, [r4, #6]
 80186fc:	2b02      	cmp	r3, #2
 80186fe:	d001      	beq.n	8018704 <uxr_read_delete_session_status+0x18>
 8018700:	b004      	add	sp, #16
 8018702:	bd10      	pop	{r4, pc}
 8018704:	f10d 000a 	add.w	r0, sp, #10
 8018708:	f7fe fe72 	bl	80173f0 <uxr_object_id_from_raw>
 801870c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8018710:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8018714:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8018718:	b29b      	uxth	r3, r3
 801871a:	2b02      	cmp	r3, #2
 801871c:	d1f0      	bne.n	8018700 <uxr_read_delete_session_status+0x14>
 801871e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8018722:	7163      	strb	r3, [r4, #5]
 8018724:	e7ec      	b.n	8018700 <uxr_read_delete_session_status+0x14>
 8018726:	bf00      	nop

08018728 <uxr_stamp_create_session_header>:
 8018728:	b510      	push	{r4, lr}
 801872a:	2208      	movs	r2, #8
 801872c:	b08a      	sub	sp, #40	@ 0x28
 801872e:	4604      	mov	r4, r0
 8018730:	eb0d 0002 	add.w	r0, sp, r2
 8018734:	f7fb fd18 	bl	8014168 <ucdr_init_buffer>
 8018738:	f814 1b01 	ldrb.w	r1, [r4], #1
 801873c:	2300      	movs	r3, #0
 801873e:	a802      	add	r0, sp, #8
 8018740:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8018744:	9400      	str	r4, [sp, #0]
 8018746:	461a      	mov	r2, r3
 8018748:	f001 f846 	bl	80197d8 <uxr_serialize_message_header>
 801874c:	b00a      	add	sp, #40	@ 0x28
 801874e:	bd10      	pop	{r4, pc}

08018750 <uxr_stamp_session_header>:
 8018750:	b530      	push	{r4, r5, lr}
 8018752:	b08d      	sub	sp, #52	@ 0x34
 8018754:	4604      	mov	r4, r0
 8018756:	460d      	mov	r5, r1
 8018758:	4619      	mov	r1, r3
 801875a:	a804      	add	r0, sp, #16
 801875c:	9203      	str	r2, [sp, #12]
 801875e:	2208      	movs	r2, #8
 8018760:	f7fb fd02 	bl	8014168 <ucdr_init_buffer>
 8018764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018768:	9b03      	ldr	r3, [sp, #12]
 801876a:	462a      	mov	r2, r5
 801876c:	a804      	add	r0, sp, #16
 801876e:	9400      	str	r4, [sp, #0]
 8018770:	f001 f832 	bl	80197d8 <uxr_serialize_message_header>
 8018774:	b00d      	add	sp, #52	@ 0x34
 8018776:	bd30      	pop	{r4, r5, pc}

08018778 <uxr_read_session_header>:
 8018778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801877c:	4607      	mov	r7, r0
 801877e:	b084      	sub	sp, #16
 8018780:	4608      	mov	r0, r1
 8018782:	460c      	mov	r4, r1
 8018784:	4615      	mov	r5, r2
 8018786:	461e      	mov	r6, r3
 8018788:	f7fb fd20 	bl	80141cc <ucdr_buffer_remaining>
 801878c:	2808      	cmp	r0, #8
 801878e:	d803      	bhi.n	8018798 <uxr_read_session_header+0x20>
 8018790:	2000      	movs	r0, #0
 8018792:	b004      	add	sp, #16
 8018794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018798:	f10d 080c 	add.w	r8, sp, #12
 801879c:	4633      	mov	r3, r6
 801879e:	462a      	mov	r2, r5
 80187a0:	4620      	mov	r0, r4
 80187a2:	f10d 010b 	add.w	r1, sp, #11
 80187a6:	f8cd 8000 	str.w	r8, [sp]
 80187aa:	f001 f833 	bl	8019814 <uxr_deserialize_message_header>
 80187ae:	783a      	ldrb	r2, [r7, #0]
 80187b0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80187b4:	4293      	cmp	r3, r2
 80187b6:	d1eb      	bne.n	8018790 <uxr_read_session_header+0x18>
 80187b8:	061b      	lsls	r3, r3, #24
 80187ba:	d41b      	bmi.n	80187f4 <uxr_read_session_header+0x7c>
 80187bc:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80187c0:	787b      	ldrb	r3, [r7, #1]
 80187c2:	429a      	cmp	r2, r3
 80187c4:	d003      	beq.n	80187ce <uxr_read_session_header+0x56>
 80187c6:	2001      	movs	r0, #1
 80187c8:	f080 0001 	eor.w	r0, r0, #1
 80187cc:	e7e1      	b.n	8018792 <uxr_read_session_header+0x1a>
 80187ce:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80187d2:	1cb8      	adds	r0, r7, #2
 80187d4:	78bb      	ldrb	r3, [r7, #2]
 80187d6:	429a      	cmp	r2, r3
 80187d8:	d1f5      	bne.n	80187c6 <uxr_read_session_header+0x4e>
 80187da:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80187de:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80187e2:	429a      	cmp	r2, r3
 80187e4:	d1ef      	bne.n	80187c6 <uxr_read_session_header+0x4e>
 80187e6:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80187ea:	7843      	ldrb	r3, [r0, #1]
 80187ec:	429a      	cmp	r2, r3
 80187ee:	d1ea      	bne.n	80187c6 <uxr_read_session_header+0x4e>
 80187f0:	2000      	movs	r0, #0
 80187f2:	e7e9      	b.n	80187c8 <uxr_read_session_header+0x50>
 80187f4:	2001      	movs	r0, #1
 80187f6:	e7cc      	b.n	8018792 <uxr_read_session_header+0x1a>

080187f8 <uxr_session_header_offset>:
 80187f8:	f990 3000 	ldrsb.w	r3, [r0]
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	bfac      	ite	ge
 8018800:	2008      	movge	r0, #8
 8018802:	2004      	movlt	r0, #4
 8018804:	4770      	bx	lr
 8018806:	bf00      	nop

08018808 <uxr_init_base_object_request>:
 8018808:	b510      	push	{r4, lr}
 801880a:	b082      	sub	sp, #8
 801880c:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8018810:	9101      	str	r1, [sp, #4]
 8018812:	88c3      	ldrh	r3, [r0, #6]
 8018814:	f1a3 010a 	sub.w	r1, r3, #10
 8018818:	b289      	uxth	r1, r1
 801881a:	42a1      	cmp	r1, r4
 801881c:	d80f      	bhi.n	801883e <uxr_init_base_object_request+0x36>
 801881e:	3301      	adds	r3, #1
 8018820:	b29c      	uxth	r4, r3
 8018822:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8018826:	b2db      	uxtb	r3, r3
 8018828:	80c4      	strh	r4, [r0, #6]
 801882a:	1c91      	adds	r1, r2, #2
 801882c:	9801      	ldr	r0, [sp, #4]
 801882e:	f882 c000 	strb.w	ip, [r2]
 8018832:	7053      	strb	r3, [r2, #1]
 8018834:	f7fe fdf0 	bl	8017418 <uxr_object_id_to_raw>
 8018838:	4620      	mov	r0, r4
 801883a:	b002      	add	sp, #8
 801883c:	bd10      	pop	{r4, pc}
 801883e:	230a      	movs	r3, #10
 8018840:	f04f 0c00 	mov.w	ip, #0
 8018844:	461c      	mov	r4, r3
 8018846:	e7ef      	b.n	8018828 <uxr_init_base_object_request+0x20>

08018848 <uxr_parse_base_object_request>:
 8018848:	b570      	push	{r4, r5, r6, lr}
 801884a:	4604      	mov	r4, r0
 801884c:	3002      	adds	r0, #2
 801884e:	460d      	mov	r5, r1
 8018850:	4616      	mov	r6, r2
 8018852:	f7fe fdcd 	bl	80173f0 <uxr_object_id_from_raw>
 8018856:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801885a:	8028      	strh	r0, [r5, #0]
 801885c:	806b      	strh	r3, [r5, #2]
 801885e:	7822      	ldrb	r2, [r4, #0]
 8018860:	7863      	ldrb	r3, [r4, #1]
 8018862:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8018866:	8033      	strh	r3, [r6, #0]
 8018868:	bd70      	pop	{r4, r5, r6, pc}
 801886a:	bf00      	nop

0801886c <uxr_init_framing_io>:
 801886c:	2300      	movs	r3, #0
 801886e:	7041      	strb	r1, [r0, #1]
 8018870:	7003      	strb	r3, [r0, #0]
 8018872:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8018874:	4770      	bx	lr
 8018876:	bf00      	nop

08018878 <uxr_write_framed_msg>:
 8018878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801887c:	4617      	mov	r7, r2
 801887e:	7842      	ldrb	r2, [r0, #1]
 8018880:	460e      	mov	r6, r1
 8018882:	b083      	sub	sp, #12
 8018884:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8018888:	469b      	mov	fp, r3
 801888a:	237e      	movs	r3, #126	@ 0x7e
 801888c:	4604      	mov	r4, r0
 801888e:	2901      	cmp	r1, #1
 8018890:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8018894:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8018898:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801889c:	f240 8115 	bls.w	8018aca <uxr_write_framed_msg+0x252>
 80188a0:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80188a4:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80188a8:	2202      	movs	r2, #2
 80188aa:	2901      	cmp	r1, #1
 80188ac:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80188b0:	d952      	bls.n	8018958 <uxr_write_framed_msg+0xe0>
 80188b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80188b4:	2103      	movs	r1, #3
 80188b6:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80188ba:	b2dd      	uxtb	r5, r3
 80188bc:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80188c0:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 80188c4:	2a01      	cmp	r2, #1
 80188c6:	d95c      	bls.n	8018982 <uxr_write_framed_msg+0x10a>
 80188c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80188ca:	1862      	adds	r2, r4, r1
 80188cc:	3101      	adds	r1, #1
 80188ce:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80188d2:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 80188d6:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80188da:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80188de:	2a01      	cmp	r2, #1
 80188e0:	d961      	bls.n	80189a6 <uxr_write_framed_msg+0x12e>
 80188e2:	1c4a      	adds	r2, r1, #1
 80188e4:	4421      	add	r1, r4
 80188e6:	b2d2      	uxtb	r2, r2
 80188e8:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80188ec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d06a      	beq.n	80189ca <uxr_write_framed_msg+0x152>
 80188f4:	f04f 0800 	mov.w	r8, #0
 80188f8:	46c1      	mov	r9, r8
 80188fa:	e016      	b.n	801892a <uxr_write_framed_msg+0xb2>
 80188fc:	2a29      	cmp	r2, #41	@ 0x29
 80188fe:	d868      	bhi.n	80189d2 <uxr_write_framed_msg+0x15a>
 8018900:	18a0      	adds	r0, r4, r2
 8018902:	3201      	adds	r2, #1
 8018904:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8018908:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801890c:	ea88 0101 	eor.w	r1, r8, r1
 8018910:	4b7d      	ldr	r3, [pc, #500]	@ (8018b08 <uxr_write_framed_msg+0x290>)
 8018912:	f109 0901 	add.w	r9, r9, #1
 8018916:	b2c9      	uxtb	r1, r1
 8018918:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 801891c:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8018920:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018922:	454b      	cmp	r3, r9
 8018924:	d969      	bls.n	80189fa <uxr_write_framed_msg+0x182>
 8018926:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801892a:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801892e:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8018932:	2801      	cmp	r0, #1
 8018934:	d8e2      	bhi.n	80188fc <uxr_write_framed_msg+0x84>
 8018936:	1c50      	adds	r0, r2, #1
 8018938:	b2c0      	uxtb	r0, r0
 801893a:	2829      	cmp	r0, #41	@ 0x29
 801893c:	d849      	bhi.n	80189d2 <uxr_write_framed_msg+0x15a>
 801893e:	18a0      	adds	r0, r4, r2
 8018940:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8018944:	3202      	adds	r2, #2
 8018946:	f081 0520 	eor.w	r5, r1, #32
 801894a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801894e:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8018952:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018956:	e7d9      	b.n	801890c <uxr_write_framed_msg+0x94>
 8018958:	2104      	movs	r1, #4
 801895a:	f04f 0c03 	mov.w	ip, #3
 801895e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018960:	4422      	add	r2, r4
 8018962:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8018966:	44a4      	add	ip, r4
 8018968:	b2dd      	uxtb	r5, r3
 801896a:	f080 0020 	eor.w	r0, r0, #32
 801896e:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 8018972:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8018976:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 801897a:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801897e:	2a01      	cmp	r2, #1
 8018980:	d8a2      	bhi.n	80188c8 <uxr_write_framed_msg+0x50>
 8018982:	1862      	adds	r2, r4, r1
 8018984:	207d      	movs	r0, #125	@ 0x7d
 8018986:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018988:	f085 0520 	eor.w	r5, r5, #32
 801898c:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 8018990:	3102      	adds	r1, #2
 8018992:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8018996:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 801899a:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801899e:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80189a2:	2a01      	cmp	r2, #1
 80189a4:	d89d      	bhi.n	80188e2 <uxr_write_framed_msg+0x6a>
 80189a6:	1c4d      	adds	r5, r1, #1
 80189a8:	1c8a      	adds	r2, r1, #2
 80189aa:	f080 0020 	eor.w	r0, r0, #32
 80189ae:	4421      	add	r1, r4
 80189b0:	fa54 f585 	uxtab	r5, r4, r5
 80189b4:	b2d2      	uxtb	r2, r2
 80189b6:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80189ba:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 80189be:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 80189c2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d194      	bne.n	80188f4 <uxr_write_framed_msg+0x7c>
 80189ca:	4619      	mov	r1, r3
 80189cc:	f8ad 3004 	strh.w	r3, [sp, #4]
 80189d0:	e019      	b.n	8018a06 <uxr_write_framed_msg+0x18e>
 80189d2:	2500      	movs	r5, #0
 80189d4:	e000      	b.n	80189d8 <uxr_write_framed_msg+0x160>
 80189d6:	b160      	cbz	r0, 80189f2 <uxr_write_framed_msg+0x17a>
 80189d8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80189dc:	1b52      	subs	r2, r2, r5
 80189de:	4653      	mov	r3, sl
 80189e0:	4638      	mov	r0, r7
 80189e2:	4421      	add	r1, r4
 80189e4:	47b0      	blx	r6
 80189e6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80189ea:	4405      	add	r5, r0
 80189ec:	4295      	cmp	r5, r2
 80189ee:	d3f2      	bcc.n	80189d6 <uxr_write_framed_msg+0x15e>
 80189f0:	d066      	beq.n	8018ac0 <uxr_write_framed_msg+0x248>
 80189f2:	2000      	movs	r0, #0
 80189f4:	b003      	add	sp, #12
 80189f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189fa:	fa5f f188 	uxtb.w	r1, r8
 80189fe:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018a02:	f8ad 8004 	strh.w	r8, [sp, #4]
 8018a06:	f04f 0900 	mov.w	r9, #0
 8018a0a:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 8018a0e:	46c8      	mov	r8, r9
 8018a10:	e013      	b.n	8018a3a <uxr_write_framed_msg+0x1c2>
 8018a12:	2a29      	cmp	r2, #41	@ 0x29
 8018a14:	d824      	bhi.n	8018a60 <uxr_write_framed_msg+0x1e8>
 8018a16:	18a3      	adds	r3, r4, r2
 8018a18:	3201      	adds	r2, #1
 8018a1a:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 8018a1e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018a22:	f109 0901 	add.w	r9, r9, #1
 8018a26:	f1b9 0f02 	cmp.w	r9, #2
 8018a2a:	d02d      	beq.n	8018a88 <uxr_write_framed_msg+0x210>
 8018a2c:	f109 0308 	add.w	r3, r9, #8
 8018a30:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018a34:	446b      	add	r3, sp
 8018a36:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8018a3a:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8018a3e:	2b01      	cmp	r3, #1
 8018a40:	d8e7      	bhi.n	8018a12 <uxr_write_framed_msg+0x19a>
 8018a42:	1c53      	adds	r3, r2, #1
 8018a44:	b2db      	uxtb	r3, r3
 8018a46:	2b29      	cmp	r3, #41	@ 0x29
 8018a48:	d80a      	bhi.n	8018a60 <uxr_write_framed_msg+0x1e8>
 8018a4a:	18a3      	adds	r3, r4, r2
 8018a4c:	f081 0120 	eor.w	r1, r1, #32
 8018a50:	3202      	adds	r2, #2
 8018a52:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 8018a56:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 8018a5a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018a5e:	e7e0      	b.n	8018a22 <uxr_write_framed_msg+0x1aa>
 8018a60:	2500      	movs	r5, #0
 8018a62:	e001      	b.n	8018a68 <uxr_write_framed_msg+0x1f0>
 8018a64:	2800      	cmp	r0, #0
 8018a66:	d0c4      	beq.n	80189f2 <uxr_write_framed_msg+0x17a>
 8018a68:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8018a6c:	1b52      	subs	r2, r2, r5
 8018a6e:	4653      	mov	r3, sl
 8018a70:	4638      	mov	r0, r7
 8018a72:	4421      	add	r1, r4
 8018a74:	47b0      	blx	r6
 8018a76:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018a7a:	4405      	add	r5, r0
 8018a7c:	4295      	cmp	r5, r2
 8018a7e:	d3f1      	bcc.n	8018a64 <uxr_write_framed_msg+0x1ec>
 8018a80:	d1b7      	bne.n	80189f2 <uxr_write_framed_msg+0x17a>
 8018a82:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 8018a86:	e7d1      	b.n	8018a2c <uxr_write_framed_msg+0x1b4>
 8018a88:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018a8c:	b19a      	cbz	r2, 8018ab6 <uxr_write_framed_msg+0x23e>
 8018a8e:	2500      	movs	r5, #0
 8018a90:	e001      	b.n	8018a96 <uxr_write_framed_msg+0x21e>
 8018a92:	2800      	cmp	r0, #0
 8018a94:	d0ad      	beq.n	80189f2 <uxr_write_framed_msg+0x17a>
 8018a96:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8018a9a:	1b52      	subs	r2, r2, r5
 8018a9c:	4653      	mov	r3, sl
 8018a9e:	4638      	mov	r0, r7
 8018aa0:	4421      	add	r1, r4
 8018aa2:	47b0      	blx	r6
 8018aa4:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018aa8:	4405      	add	r5, r0
 8018aaa:	4295      	cmp	r5, r2
 8018aac:	d3f1      	bcc.n	8018a92 <uxr_write_framed_msg+0x21a>
 8018aae:	d1a0      	bne.n	80189f2 <uxr_write_framed_msg+0x17a>
 8018ab0:	2300      	movs	r3, #0
 8018ab2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8018ab6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018ab8:	b298      	uxth	r0, r3
 8018aba:	b003      	add	sp, #12
 8018abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ac0:	f04f 0300 	mov.w	r3, #0
 8018ac4:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8018ac8:	e72a      	b.n	8018920 <uxr_write_framed_msg+0xa8>
 8018aca:	217d      	movs	r1, #125	@ 0x7d
 8018acc:	f082 0220 	eor.w	r2, r2, #32
 8018ad0:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8018ad4:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8018ad8:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8018adc:	2203      	movs	r2, #3
 8018ade:	2901      	cmp	r1, #1
 8018ae0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018ae4:	d803      	bhi.n	8018aee <uxr_write_framed_msg+0x276>
 8018ae6:	2105      	movs	r1, #5
 8018ae8:	f04f 0c04 	mov.w	ip, #4
 8018aec:	e737      	b.n	801895e <uxr_write_framed_msg+0xe6>
 8018aee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018af0:	2104      	movs	r1, #4
 8018af2:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8018af6:	b2dd      	uxtb	r5, r3
 8018af8:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8018afc:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8018b00:	2a01      	cmp	r2, #1
 8018b02:	f63f aee1 	bhi.w	80188c8 <uxr_write_framed_msg+0x50>
 8018b06:	e73c      	b.n	8018982 <uxr_write_framed_msg+0x10a>
 8018b08:	08025114 	.word	0x08025114

08018b0c <uxr_framing_read_transport>:
 8018b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b10:	4604      	mov	r4, r0
 8018b12:	b085      	sub	sp, #20
 8018b14:	4692      	mov	sl, r2
 8018b16:	4689      	mov	r9, r1
 8018b18:	461d      	mov	r5, r3
 8018b1a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8018b1c:	f000 fca6 	bl	801946c <uxr_millis>
 8018b20:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8018b24:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8018b28:	4680      	mov	r8, r0
 8018b2a:	42ba      	cmp	r2, r7
 8018b2c:	d05f      	beq.n	8018bee <uxr_framing_read_transport+0xe2>
 8018b2e:	d817      	bhi.n	8018b60 <uxr_framing_read_transport+0x54>
 8018b30:	3f01      	subs	r7, #1
 8018b32:	1aba      	subs	r2, r7, r2
 8018b34:	2700      	movs	r7, #0
 8018b36:	b2d2      	uxtb	r2, r2
 8018b38:	42b2      	cmp	r2, r6
 8018b3a:	d81a      	bhi.n	8018b72 <uxr_framing_read_transport+0x66>
 8018b3c:	19d3      	adds	r3, r2, r7
 8018b3e:	42b3      	cmp	r3, r6
 8018b40:	d852      	bhi.n	8018be8 <uxr_framing_read_transport+0xdc>
 8018b42:	b9d2      	cbnz	r2, 8018b7a <uxr_framing_read_transport+0x6e>
 8018b44:	2600      	movs	r6, #0
 8018b46:	f000 fc91 	bl	801946c <uxr_millis>
 8018b4a:	682b      	ldr	r3, [r5, #0]
 8018b4c:	eba0 0008 	sub.w	r0, r0, r8
 8018b50:	1a1b      	subs	r3, r3, r0
 8018b52:	4630      	mov	r0, r6
 8018b54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018b58:	602b      	str	r3, [r5, #0]
 8018b5a:	b005      	add	sp, #20
 8018b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b60:	2f00      	cmp	r7, #0
 8018b62:	d060      	beq.n	8018c26 <uxr_framing_read_transport+0x11a>
 8018b64:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 8018b68:	3f01      	subs	r7, #1
 8018b6a:	b2d2      	uxtb	r2, r2
 8018b6c:	b2ff      	uxtb	r7, r7
 8018b6e:	42b2      	cmp	r2, r6
 8018b70:	d9e4      	bls.n	8018b3c <uxr_framing_read_transport+0x30>
 8018b72:	b2f2      	uxtb	r2, r6
 8018b74:	2700      	movs	r7, #0
 8018b76:	2a00      	cmp	r2, #0
 8018b78:	d0e4      	beq.n	8018b44 <uxr_framing_read_transport+0x38>
 8018b7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018b7c:	4650      	mov	r0, sl
 8018b7e:	9203      	str	r2, [sp, #12]
 8018b80:	9300      	str	r3, [sp, #0]
 8018b82:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018b86:	682b      	ldr	r3, [r5, #0]
 8018b88:	3102      	adds	r1, #2
 8018b8a:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 8018c30 <uxr_framing_read_transport+0x124>
 8018b8e:	4421      	add	r1, r4
 8018b90:	47c8      	blx	r9
 8018b92:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018b96:	4606      	mov	r6, r0
 8018b98:	4403      	add	r3, r0
 8018b9a:	0859      	lsrs	r1, r3, #1
 8018b9c:	fbab 2101 	umull	r2, r1, fp, r1
 8018ba0:	222a      	movs	r2, #42	@ 0x2a
 8018ba2:	0889      	lsrs	r1, r1, #2
 8018ba4:	fb02 3111 	mls	r1, r2, r1, r3
 8018ba8:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8018bac:	2800      	cmp	r0, #0
 8018bae:	d0c9      	beq.n	8018b44 <uxr_framing_read_transport+0x38>
 8018bb0:	9a03      	ldr	r2, [sp, #12]
 8018bb2:	4290      	cmp	r0, r2
 8018bb4:	d1c7      	bne.n	8018b46 <uxr_framing_read_transport+0x3a>
 8018bb6:	2f00      	cmp	r7, #0
 8018bb8:	d0c5      	beq.n	8018b46 <uxr_framing_read_transport+0x3a>
 8018bba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018bbc:	3102      	adds	r1, #2
 8018bbe:	463a      	mov	r2, r7
 8018bc0:	4650      	mov	r0, sl
 8018bc2:	4421      	add	r1, r4
 8018bc4:	9300      	str	r3, [sp, #0]
 8018bc6:	2300      	movs	r3, #0
 8018bc8:	47c8      	blx	r9
 8018bca:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8018bce:	4406      	add	r6, r0
 8018bd0:	1813      	adds	r3, r2, r0
 8018bd2:	085a      	lsrs	r2, r3, #1
 8018bd4:	fbab 1b02 	umull	r1, fp, fp, r2
 8018bd8:	222a      	movs	r2, #42	@ 0x2a
 8018bda:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8018bde:	fb02 331b 	mls	r3, r2, fp, r3
 8018be2:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8018be6:	e7ae      	b.n	8018b46 <uxr_framing_read_transport+0x3a>
 8018be8:	1ab6      	subs	r6, r6, r2
 8018bea:	b2f7      	uxtb	r7, r6
 8018bec:	e7a9      	b.n	8018b42 <uxr_framing_read_transport+0x36>
 8018bee:	2300      	movs	r3, #0
 8018bf0:	2e28      	cmp	r6, #40	@ 0x28
 8018bf2:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8018bf4:	d9bd      	bls.n	8018b72 <uxr_framing_read_transport+0x66>
 8018bf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018bf8:	2229      	movs	r2, #41	@ 0x29
 8018bfa:	1ca1      	adds	r1, r4, #2
 8018bfc:	4650      	mov	r0, sl
 8018bfe:	9300      	str	r3, [sp, #0]
 8018c00:	682b      	ldr	r3, [r5, #0]
 8018c02:	47c8      	blx	r9
 8018c04:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018c08:	4606      	mov	r6, r0
 8018c0a:	212a      	movs	r1, #42	@ 0x2a
 8018c0c:	4403      	add	r3, r0
 8018c0e:	4808      	ldr	r0, [pc, #32]	@ (8018c30 <uxr_framing_read_transport+0x124>)
 8018c10:	085a      	lsrs	r2, r3, #1
 8018c12:	fba0 0202 	umull	r0, r2, r0, r2
 8018c16:	0892      	lsrs	r2, r2, #2
 8018c18:	fb01 3312 	mls	r3, r1, r2, r3
 8018c1c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8018c20:	2e00      	cmp	r6, #0
 8018c22:	d08f      	beq.n	8018b44 <uxr_framing_read_transport+0x38>
 8018c24:	e78f      	b.n	8018b46 <uxr_framing_read_transport+0x3a>
 8018c26:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 8018c2a:	b2d2      	uxtb	r2, r2
 8018c2c:	e784      	b.n	8018b38 <uxr_framing_read_transport+0x2c>
 8018c2e:	bf00      	nop
 8018c30:	30c30c31 	.word	0x30c30c31

08018c34 <uxr_read_framed_msg>:
 8018c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c38:	461e      	mov	r6, r3
 8018c3a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8018c3e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8018c42:	b083      	sub	sp, #12
 8018c44:	4604      	mov	r4, r0
 8018c46:	4688      	mov	r8, r1
 8018c48:	429d      	cmp	r5, r3
 8018c4a:	4691      	mov	r9, r2
 8018c4c:	f000 818c 	beq.w	8018f68 <uxr_read_framed_msg+0x334>
 8018c50:	7823      	ldrb	r3, [r4, #0]
 8018c52:	4dc3      	ldr	r5, [pc, #780]	@ (8018f60 <uxr_read_framed_msg+0x32c>)
 8018c54:	4fc3      	ldr	r7, [pc, #780]	@ (8018f64 <uxr_read_framed_msg+0x330>)
 8018c56:	2b07      	cmp	r3, #7
 8018c58:	d8fd      	bhi.n	8018c56 <uxr_read_framed_msg+0x22>
 8018c5a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8018c5e:	011c      	.short	0x011c
 8018c60:	00d900fb 	.word	0x00d900fb
 8018c64:	008f00ba 	.word	0x008f00ba
 8018c68:	00320051 	.word	0x00320051
 8018c6c:	0008      	.short	0x0008
 8018c6e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018c72:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018c76:	4299      	cmp	r1, r3
 8018c78:	f000 814d 	beq.w	8018f16 <uxr_read_framed_msg+0x2e2>
 8018c7c:	18e2      	adds	r2, r4, r3
 8018c7e:	7892      	ldrb	r2, [r2, #2]
 8018c80:	2a7d      	cmp	r2, #125	@ 0x7d
 8018c82:	f000 81b8 	beq.w	8018ff6 <uxr_read_framed_msg+0x3c2>
 8018c86:	3301      	adds	r3, #1
 8018c88:	212a      	movs	r1, #42	@ 0x2a
 8018c8a:	2a7e      	cmp	r2, #126	@ 0x7e
 8018c8c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8018c90:	fba5 c000 	umull	ip, r0, r5, r0
 8018c94:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8018c98:	fb01 3310 	mls	r3, r1, r0, r3
 8018c9c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018ca0:	f000 8257 	beq.w	8019152 <uxr_read_framed_msg+0x51e>
 8018ca4:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8018ca6:	2000      	movs	r0, #0
 8018ca8:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8018caa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8018cae:	7020      	strb	r0, [r4, #0]
 8018cb0:	b29b      	uxth	r3, r3
 8018cb2:	4299      	cmp	r1, r3
 8018cb4:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8018cb6:	f000 8178 	beq.w	8018faa <uxr_read_framed_msg+0x376>
 8018cba:	2000      	movs	r0, #0
 8018cbc:	b003      	add	sp, #12
 8018cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cc2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018cc6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018cca:	4298      	cmp	r0, r3
 8018ccc:	f000 8132 	beq.w	8018f34 <uxr_read_framed_msg+0x300>
 8018cd0:	18e2      	adds	r2, r4, r3
 8018cd2:	7891      	ldrb	r1, [r2, #2]
 8018cd4:	297d      	cmp	r1, #125	@ 0x7d
 8018cd6:	f000 8170 	beq.w	8018fba <uxr_read_framed_msg+0x386>
 8018cda:	3301      	adds	r3, #1
 8018cdc:	202a      	movs	r0, #42	@ 0x2a
 8018cde:	297e      	cmp	r1, #126	@ 0x7e
 8018ce0:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018ce4:	fba5 c202 	umull	ip, r2, r5, r2
 8018ce8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018cec:	fb00 3312 	mls	r3, r0, r2, r3
 8018cf0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018cf4:	f000 821d 	beq.w	8019132 <uxr_read_framed_msg+0x4fe>
 8018cf8:	2307      	movs	r3, #7
 8018cfa:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8018cfc:	7023      	strb	r3, [r4, #0]
 8018cfe:	e7aa      	b.n	8018c56 <uxr_read_framed_msg+0x22>
 8018d00:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8018d02:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8018d06:	459e      	cmp	lr, r3
 8018d08:	d827      	bhi.n	8018d5a <uxr_read_framed_msg+0x126>
 8018d0a:	e032      	b.n	8018d72 <uxr_read_framed_msg+0x13e>
 8018d0c:	fba5 b101 	umull	fp, r1, r5, r1
 8018d10:	f89c c002 	ldrb.w	ip, [ip, #2]
 8018d14:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8018d18:	0889      	lsrs	r1, r1, #2
 8018d1a:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8018d1e:	fb0b 0111 	mls	r1, fp, r1, r0
 8018d22:	f000 80d4 	beq.w	8018ece <uxr_read_framed_msg+0x29a>
 8018d26:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8018d2a:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 8018d2e:	f000 80cb 	beq.w	8018ec8 <uxr_read_framed_msg+0x294>
 8018d32:	f806 c003 	strb.w	ip, [r6, r3]
 8018d36:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8018d38:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8018d3a:	ea80 010c 	eor.w	r1, r0, ip
 8018d3e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8018d42:	3301      	adds	r3, #1
 8018d44:	b2c9      	uxtb	r1, r1
 8018d46:	b29b      	uxth	r3, r3
 8018d48:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8018d4c:	4573      	cmp	r3, lr
 8018d4e:	8663      	strh	r3, [r4, #50]	@ 0x32
 8018d50:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8018d54:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8018d56:	f080 811d 	bcs.w	8018f94 <uxr_read_framed_msg+0x360>
 8018d5a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8018d5e:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8018d62:	1c50      	adds	r0, r2, #1
 8018d64:	eb04 0c02 	add.w	ip, r4, r2
 8018d68:	4592      	cmp	sl, r2
 8018d6a:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8018d6e:	d1cd      	bne.n	8018d0c <uxr_read_framed_msg+0xd8>
 8018d70:	459e      	cmp	lr, r3
 8018d72:	f040 8114 	bne.w	8018f9e <uxr_read_framed_msg+0x36a>
 8018d76:	2306      	movs	r3, #6
 8018d78:	7023      	strb	r3, [r4, #0]
 8018d7a:	e76c      	b.n	8018c56 <uxr_read_framed_msg+0x22>
 8018d7c:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018d80:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018d84:	4298      	cmp	r0, r3
 8018d86:	f000 80c6 	beq.w	8018f16 <uxr_read_framed_msg+0x2e2>
 8018d8a:	18e2      	adds	r2, r4, r3
 8018d8c:	7891      	ldrb	r1, [r2, #2]
 8018d8e:	297d      	cmp	r1, #125	@ 0x7d
 8018d90:	f000 8193 	beq.w	80190ba <uxr_read_framed_msg+0x486>
 8018d94:	3301      	adds	r3, #1
 8018d96:	202a      	movs	r0, #42	@ 0x2a
 8018d98:	297e      	cmp	r1, #126	@ 0x7e
 8018d9a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018d9e:	fba5 c202 	umull	ip, r2, r5, r2
 8018da2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018da6:	fb00 3312 	mls	r3, r0, r2, r3
 8018daa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018dae:	f000 81d0 	beq.w	8019152 <uxr_read_framed_msg+0x51e>
 8018db2:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8018db4:	2000      	movs	r0, #0
 8018db6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8018dba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018dbc:	8660      	strh	r0, [r4, #50]	@ 0x32
 8018dbe:	b29b      	uxth	r3, r3
 8018dc0:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8018dc2:	428b      	cmp	r3, r1
 8018dc4:	8623      	strh	r3, [r4, #48]	@ 0x30
 8018dc6:	f240 80e2 	bls.w	8018f8e <uxr_read_framed_msg+0x35a>
 8018dca:	7020      	strb	r0, [r4, #0]
 8018dcc:	b003      	add	sp, #12
 8018dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dd2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018dd6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018dda:	4298      	cmp	r0, r3
 8018ddc:	f000 80aa 	beq.w	8018f34 <uxr_read_framed_msg+0x300>
 8018de0:	18e2      	adds	r2, r4, r3
 8018de2:	7891      	ldrb	r1, [r2, #2]
 8018de4:	297d      	cmp	r1, #125	@ 0x7d
 8018de6:	f000 8186 	beq.w	80190f6 <uxr_read_framed_msg+0x4c2>
 8018dea:	3301      	adds	r3, #1
 8018dec:	202a      	movs	r0, #42	@ 0x2a
 8018dee:	297e      	cmp	r1, #126	@ 0x7e
 8018df0:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018df4:	fba5 c202 	umull	ip, r2, r5, r2
 8018df8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018dfc:	fb00 3312 	mls	r3, r0, r2, r3
 8018e00:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018e04:	f000 8195 	beq.w	8019132 <uxr_read_framed_msg+0x4fe>
 8018e08:	2304      	movs	r3, #4
 8018e0a:	8621      	strh	r1, [r4, #48]	@ 0x30
 8018e0c:	7023      	strb	r3, [r4, #0]
 8018e0e:	e722      	b.n	8018c56 <uxr_read_framed_msg+0x22>
 8018e10:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018e14:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8018e18:	4290      	cmp	r0, r2
 8018e1a:	f000 80b4 	beq.w	8018f86 <uxr_read_framed_msg+0x352>
 8018e1e:	18a3      	adds	r3, r4, r2
 8018e20:	7899      	ldrb	r1, [r3, #2]
 8018e22:	297d      	cmp	r1, #125	@ 0x7d
 8018e24:	f000 8107 	beq.w	8019036 <uxr_read_framed_msg+0x402>
 8018e28:	3201      	adds	r2, #1
 8018e2a:	232a      	movs	r3, #42	@ 0x2a
 8018e2c:	297e      	cmp	r1, #126	@ 0x7e
 8018e2e:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8018e32:	fba5 c000 	umull	ip, r0, r5, r0
 8018e36:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8018e3a:	fb03 2210 	mls	r2, r3, r0, r2
 8018e3e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018e42:	f000 818a 	beq.w	801915a <uxr_read_framed_msg+0x526>
 8018e46:	7863      	ldrb	r3, [r4, #1]
 8018e48:	428b      	cmp	r3, r1
 8018e4a:	bf0c      	ite	eq
 8018e4c:	2303      	moveq	r3, #3
 8018e4e:	2300      	movne	r3, #0
 8018e50:	7023      	strb	r3, [r4, #0]
 8018e52:	e700      	b.n	8018c56 <uxr_read_framed_msg+0x22>
 8018e54:	2300      	movs	r3, #0
 8018e56:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018e5a:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8018e5e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018e62:	4299      	cmp	r1, r3
 8018e64:	d06a      	beq.n	8018f3c <uxr_read_framed_msg+0x308>
 8018e66:	18e2      	adds	r2, r4, r3
 8018e68:	7890      	ldrb	r0, [r2, #2]
 8018e6a:	287d      	cmp	r0, #125	@ 0x7d
 8018e6c:	f000 8100 	beq.w	8019070 <uxr_read_framed_msg+0x43c>
 8018e70:	3301      	adds	r3, #1
 8018e72:	212a      	movs	r1, #42	@ 0x2a
 8018e74:	287e      	cmp	r0, #126	@ 0x7e
 8018e76:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8018e7a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018e7e:	fba5 c202 	umull	ip, r2, r5, r2
 8018e82:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018e86:	fb01 3312 	mls	r3, r1, r2, r3
 8018e8a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018e8e:	d055      	beq.n	8018f3c <uxr_read_framed_msg+0x308>
 8018e90:	2302      	movs	r3, #2
 8018e92:	7023      	strb	r3, [r4, #0]
 8018e94:	e6df      	b.n	8018c56 <uxr_read_framed_msg+0x22>
 8018e96:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 8018e9a:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8018e9e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018ea2:	1c5a      	adds	r2, r3, #1
 8018ea4:	459c      	cmp	ip, r3
 8018ea6:	eb04 0103 	add.w	r1, r4, r3
 8018eaa:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8018eae:	f43f af04 	beq.w	8018cba <uxr_read_framed_msg+0x86>
 8018eb2:	fba5 0303 	umull	r0, r3, r5, r3
 8018eb6:	7889      	ldrb	r1, [r1, #2]
 8018eb8:	089b      	lsrs	r3, r3, #2
 8018eba:	297e      	cmp	r1, #126	@ 0x7e
 8018ebc:	fb0e 2313 	mls	r3, lr, r3, r2
 8018ec0:	b2db      	uxtb	r3, r3
 8018ec2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018ec6:	d1ec      	bne.n	8018ea2 <uxr_read_framed_msg+0x26e>
 8018ec8:	2301      	movs	r3, #1
 8018eca:	7023      	strb	r3, [r4, #0]
 8018ecc:	e6c3      	b.n	8018c56 <uxr_read_framed_msg+0x22>
 8018ece:	1c50      	adds	r0, r2, #1
 8018ed0:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8018ed4:	3202      	adds	r2, #2
 8018ed6:	0841      	lsrs	r1, r0, #1
 8018ed8:	fba5 c101 	umull	ip, r1, r5, r1
 8018edc:	0889      	lsrs	r1, r1, #2
 8018ede:	fb0b 0111 	mls	r1, fp, r1, r0
 8018ee2:	1860      	adds	r0, r4, r1
 8018ee4:	b2c9      	uxtb	r1, r1
 8018ee6:	458a      	cmp	sl, r1
 8018ee8:	f43f af42 	beq.w	8018d70 <uxr_read_framed_msg+0x13c>
 8018eec:	0851      	lsrs	r1, r2, #1
 8018eee:	7880      	ldrb	r0, [r0, #2]
 8018ef0:	fba5 a101 	umull	sl, r1, r5, r1
 8018ef4:	287e      	cmp	r0, #126	@ 0x7e
 8018ef6:	f080 0c20 	eor.w	ip, r0, #32
 8018efa:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8018efe:	fb0b 2211 	mls	r2, fp, r1, r2
 8018f02:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018f06:	f47f af14 	bne.w	8018d32 <uxr_read_framed_msg+0xfe>
 8018f0a:	459e      	cmp	lr, r3
 8018f0c:	f43f af33 	beq.w	8018d76 <uxr_read_framed_msg+0x142>
 8018f10:	2301      	movs	r3, #1
 8018f12:	7023      	strb	r3, [r4, #0]
 8018f14:	e69f      	b.n	8018c56 <uxr_read_framed_msg+0x22>
 8018f16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018f18:	9300      	str	r3, [sp, #0]
 8018f1a:	2301      	movs	r3, #1
 8018f1c:	9301      	str	r3, [sp, #4]
 8018f1e:	464a      	mov	r2, r9
 8018f20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018f22:	4641      	mov	r1, r8
 8018f24:	4620      	mov	r0, r4
 8018f26:	f7ff fdf1 	bl	8018b0c <uxr_framing_read_transport>
 8018f2a:	2800      	cmp	r0, #0
 8018f2c:	f43f aec5 	beq.w	8018cba <uxr_read_framed_msg+0x86>
 8018f30:	7823      	ldrb	r3, [r4, #0]
 8018f32:	e690      	b.n	8018c56 <uxr_read_framed_msg+0x22>
 8018f34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018f36:	9300      	str	r3, [sp, #0]
 8018f38:	2302      	movs	r3, #2
 8018f3a:	e7ef      	b.n	8018f1c <uxr_read_framed_msg+0x2e8>
 8018f3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018f3e:	464a      	mov	r2, r9
 8018f40:	4641      	mov	r1, r8
 8018f42:	4620      	mov	r0, r4
 8018f44:	9300      	str	r3, [sp, #0]
 8018f46:	2304      	movs	r3, #4
 8018f48:	9301      	str	r3, [sp, #4]
 8018f4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018f4c:	f7ff fdde 	bl	8018b0c <uxr_framing_read_transport>
 8018f50:	2800      	cmp	r0, #0
 8018f52:	d1ed      	bne.n	8018f30 <uxr_read_framed_msg+0x2fc>
 8018f54:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8018f58:	2b7e      	cmp	r3, #126	@ 0x7e
 8018f5a:	d0e9      	beq.n	8018f30 <uxr_read_framed_msg+0x2fc>
 8018f5c:	e6ad      	b.n	8018cba <uxr_read_framed_msg+0x86>
 8018f5e:	bf00      	nop
 8018f60:	30c30c31 	.word	0x30c30c31
 8018f64:	08025114 	.word	0x08025114
 8018f68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018f6a:	9300      	str	r3, [sp, #0]
 8018f6c:	2305      	movs	r3, #5
 8018f6e:	9301      	str	r3, [sp, #4]
 8018f70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018f72:	f7ff fdcb 	bl	8018b0c <uxr_framing_read_transport>
 8018f76:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8018f7a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018f7e:	429a      	cmp	r2, r3
 8018f80:	f43f ae9b 	beq.w	8018cba <uxr_read_framed_msg+0x86>
 8018f84:	e664      	b.n	8018c50 <uxr_read_framed_msg+0x1c>
 8018f86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018f88:	9300      	str	r3, [sp, #0]
 8018f8a:	2303      	movs	r3, #3
 8018f8c:	e7c6      	b.n	8018f1c <uxr_read_framed_msg+0x2e8>
 8018f8e:	2305      	movs	r3, #5
 8018f90:	7023      	strb	r3, [r4, #0]
 8018f92:	e660      	b.n	8018c56 <uxr_read_framed_msg+0x22>
 8018f94:	f43f aeef 	beq.w	8018d76 <uxr_read_framed_msg+0x142>
 8018f98:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8018f9c:	d094      	beq.n	8018ec8 <uxr_read_framed_msg+0x294>
 8018f9e:	ebae 0303 	sub.w	r3, lr, r3
 8018fa2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018fa4:	3302      	adds	r3, #2
 8018fa6:	9200      	str	r2, [sp, #0]
 8018fa8:	e7b8      	b.n	8018f1c <uxr_read_framed_msg+0x2e8>
 8018faa:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8018fae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018fb0:	7013      	strb	r3, [r2, #0]
 8018fb2:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8018fb4:	b003      	add	sp, #12
 8018fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fba:	1c59      	adds	r1, r3, #1
 8018fbc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8018fc0:	084a      	lsrs	r2, r1, #1
 8018fc2:	fba5 e202 	umull	lr, r2, r5, r2
 8018fc6:	0892      	lsrs	r2, r2, #2
 8018fc8:	fb0c 1212 	mls	r2, ip, r2, r1
 8018fcc:	b2d1      	uxtb	r1, r2
 8018fce:	4288      	cmp	r0, r1
 8018fd0:	d0b0      	beq.n	8018f34 <uxr_read_framed_msg+0x300>
 8018fd2:	3302      	adds	r3, #2
 8018fd4:	4422      	add	r2, r4
 8018fd6:	7891      	ldrb	r1, [r2, #2]
 8018fd8:	085a      	lsrs	r2, r3, #1
 8018fda:	fba5 0202 	umull	r0, r2, r5, r2
 8018fde:	297e      	cmp	r1, #126	@ 0x7e
 8018fe0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018fe4:	fb0c 3312 	mls	r3, ip, r2, r3
 8018fe8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018fec:	f000 80a1 	beq.w	8019132 <uxr_read_framed_msg+0x4fe>
 8018ff0:	f081 0120 	eor.w	r1, r1, #32
 8018ff4:	e680      	b.n	8018cf8 <uxr_read_framed_msg+0xc4>
 8018ff6:	f103 0c01 	add.w	ip, r3, #1
 8018ffa:	202a      	movs	r0, #42	@ 0x2a
 8018ffc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019000:	fba5 e202 	umull	lr, r2, r5, r2
 8019004:	0892      	lsrs	r2, r2, #2
 8019006:	fb00 c212 	mls	r2, r0, r2, ip
 801900a:	fa5f fc82 	uxtb.w	ip, r2
 801900e:	4561      	cmp	r1, ip
 8019010:	d081      	beq.n	8018f16 <uxr_read_framed_msg+0x2e2>
 8019012:	3302      	adds	r3, #2
 8019014:	4422      	add	r2, r4
 8019016:	0859      	lsrs	r1, r3, #1
 8019018:	7892      	ldrb	r2, [r2, #2]
 801901a:	fba5 c101 	umull	ip, r1, r5, r1
 801901e:	2a7e      	cmp	r2, #126	@ 0x7e
 8019020:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8019024:	fb00 3311 	mls	r3, r0, r1, r3
 8019028:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801902c:	f000 8091 	beq.w	8019152 <uxr_read_framed_msg+0x51e>
 8019030:	f082 0220 	eor.w	r2, r2, #32
 8019034:	e636      	b.n	8018ca4 <uxr_read_framed_msg+0x70>
 8019036:	1c51      	adds	r1, r2, #1
 8019038:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801903c:	084b      	lsrs	r3, r1, #1
 801903e:	fba5 e303 	umull	lr, r3, r5, r3
 8019042:	089b      	lsrs	r3, r3, #2
 8019044:	fb0c 1313 	mls	r3, ip, r3, r1
 8019048:	b2d9      	uxtb	r1, r3
 801904a:	4288      	cmp	r0, r1
 801904c:	d09b      	beq.n	8018f86 <uxr_read_framed_msg+0x352>
 801904e:	3202      	adds	r2, #2
 8019050:	4423      	add	r3, r4
 8019052:	0850      	lsrs	r0, r2, #1
 8019054:	789b      	ldrb	r3, [r3, #2]
 8019056:	fba5 1000 	umull	r1, r0, r5, r0
 801905a:	2b7e      	cmp	r3, #126	@ 0x7e
 801905c:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8019060:	fb0c 2210 	mls	r2, ip, r0, r2
 8019064:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8019068:	d077      	beq.n	801915a <uxr_read_framed_msg+0x526>
 801906a:	f083 0120 	eor.w	r1, r3, #32
 801906e:	e6ea      	b.n	8018e46 <uxr_read_framed_msg+0x212>
 8019070:	f103 0c01 	add.w	ip, r3, #1
 8019074:	202a      	movs	r0, #42	@ 0x2a
 8019076:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801907a:	fba5 e202 	umull	lr, r2, r5, r2
 801907e:	0892      	lsrs	r2, r2, #2
 8019080:	fb00 c212 	mls	r2, r0, r2, ip
 8019084:	fa5f fc82 	uxtb.w	ip, r2
 8019088:	4561      	cmp	r1, ip
 801908a:	f43f af57 	beq.w	8018f3c <uxr_read_framed_msg+0x308>
 801908e:	3302      	adds	r3, #2
 8019090:	4422      	add	r2, r4
 8019092:	7891      	ldrb	r1, [r2, #2]
 8019094:	085a      	lsrs	r2, r3, #1
 8019096:	fba5 c202 	umull	ip, r2, r5, r2
 801909a:	297e      	cmp	r1, #126	@ 0x7e
 801909c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80190a0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80190a4:	fb00 3312 	mls	r3, r0, r2, r3
 80190a8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80190ac:	f43f af46 	beq.w	8018f3c <uxr_read_framed_msg+0x308>
 80190b0:	f081 0120 	eor.w	r1, r1, #32
 80190b4:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80190b8:	e6ea      	b.n	8018e90 <uxr_read_framed_msg+0x25c>
 80190ba:	1c59      	adds	r1, r3, #1
 80190bc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80190c0:	084a      	lsrs	r2, r1, #1
 80190c2:	fba5 e202 	umull	lr, r2, r5, r2
 80190c6:	0892      	lsrs	r2, r2, #2
 80190c8:	fb0c 1212 	mls	r2, ip, r2, r1
 80190cc:	b2d1      	uxtb	r1, r2
 80190ce:	4288      	cmp	r0, r1
 80190d0:	f43f af21 	beq.w	8018f16 <uxr_read_framed_msg+0x2e2>
 80190d4:	3302      	adds	r3, #2
 80190d6:	4422      	add	r2, r4
 80190d8:	7891      	ldrb	r1, [r2, #2]
 80190da:	085a      	lsrs	r2, r3, #1
 80190dc:	fba5 0202 	umull	r0, r2, r5, r2
 80190e0:	297e      	cmp	r1, #126	@ 0x7e
 80190e2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80190e6:	fb0c 3312 	mls	r3, ip, r2, r3
 80190ea:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80190ee:	d030      	beq.n	8019152 <uxr_read_framed_msg+0x51e>
 80190f0:	f081 0120 	eor.w	r1, r1, #32
 80190f4:	e65d      	b.n	8018db2 <uxr_read_framed_msg+0x17e>
 80190f6:	1c59      	adds	r1, r3, #1
 80190f8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80190fc:	084a      	lsrs	r2, r1, #1
 80190fe:	fba5 e202 	umull	lr, r2, r5, r2
 8019102:	0892      	lsrs	r2, r2, #2
 8019104:	fb0c 1212 	mls	r2, ip, r2, r1
 8019108:	b2d1      	uxtb	r1, r2
 801910a:	4288      	cmp	r0, r1
 801910c:	f43f af12 	beq.w	8018f34 <uxr_read_framed_msg+0x300>
 8019110:	3302      	adds	r3, #2
 8019112:	4422      	add	r2, r4
 8019114:	7891      	ldrb	r1, [r2, #2]
 8019116:	085a      	lsrs	r2, r3, #1
 8019118:	fba5 0202 	umull	r0, r2, r5, r2
 801911c:	297e      	cmp	r1, #126	@ 0x7e
 801911e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019122:	fb0c 3312 	mls	r3, ip, r2, r3
 8019126:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801912a:	d002      	beq.n	8019132 <uxr_read_framed_msg+0x4fe>
 801912c:	f081 0120 	eor.w	r1, r1, #32
 8019130:	e66a      	b.n	8018e08 <uxr_read_framed_msg+0x1d4>
 8019132:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019134:	9300      	str	r3, [sp, #0]
 8019136:	2302      	movs	r3, #2
 8019138:	9301      	str	r3, [sp, #4]
 801913a:	464a      	mov	r2, r9
 801913c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801913e:	4641      	mov	r1, r8
 8019140:	4620      	mov	r0, r4
 8019142:	f7ff fce3 	bl	8018b0c <uxr_framing_read_transport>
 8019146:	2800      	cmp	r0, #0
 8019148:	f47f aef2 	bne.w	8018f30 <uxr_read_framed_msg+0x2fc>
 801914c:	2301      	movs	r3, #1
 801914e:	7023      	strb	r3, [r4, #0]
 8019150:	e581      	b.n	8018c56 <uxr_read_framed_msg+0x22>
 8019152:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019154:	9300      	str	r3, [sp, #0]
 8019156:	2301      	movs	r3, #1
 8019158:	e7ee      	b.n	8019138 <uxr_read_framed_msg+0x504>
 801915a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801915c:	9300      	str	r3, [sp, #0]
 801915e:	2303      	movs	r3, #3
 8019160:	e7ea      	b.n	8019138 <uxr_read_framed_msg+0x504>
 8019162:	bf00      	nop

08019164 <uxr_stream_id>:
 8019164:	2901      	cmp	r1, #1
 8019166:	4684      	mov	ip, r0
 8019168:	b500      	push	{lr}
 801916a:	b083      	sub	sp, #12
 801916c:	d01f      	beq.n	80191ae <uxr_stream_id+0x4a>
 801916e:	2902      	cmp	r1, #2
 8019170:	f04f 0e00 	mov.w	lr, #0
 8019174:	d020      	beq.n	80191b8 <uxr_stream_id+0x54>
 8019176:	2300      	movs	r3, #0
 8019178:	2000      	movs	r0, #0
 801917a:	f36e 0307 	bfi	r3, lr, #0, #8
 801917e:	f36c 230f 	bfi	r3, ip, #8, #8
 8019182:	f361 4317 	bfi	r3, r1, #16, #8
 8019186:	f362 631f 	bfi	r3, r2, #24, #8
 801918a:	fa5f fc83 	uxtb.w	ip, r3
 801918e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019192:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8019196:	0e1b      	lsrs	r3, r3, #24
 8019198:	f36c 0007 	bfi	r0, ip, #0, #8
 801919c:	f361 200f 	bfi	r0, r1, #8, #8
 80191a0:	f362 4017 	bfi	r0, r2, #16, #8
 80191a4:	f363 601f 	bfi	r0, r3, #24, #8
 80191a8:	b003      	add	sp, #12
 80191aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80191ae:	f100 0e01 	add.w	lr, r0, #1
 80191b2:	fa5f fe8e 	uxtb.w	lr, lr
 80191b6:	e7de      	b.n	8019176 <uxr_stream_id+0x12>
 80191b8:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 80191bc:	e7db      	b.n	8019176 <uxr_stream_id+0x12>
 80191be:	bf00      	nop

080191c0 <uxr_stream_id_from_raw>:
 80191c0:	b082      	sub	sp, #8
 80191c2:	b130      	cbz	r0, 80191d2 <uxr_stream_id_from_raw+0x12>
 80191c4:	0603      	lsls	r3, r0, #24
 80191c6:	d421      	bmi.n	801920c <uxr_stream_id_from_raw+0x4c>
 80191c8:	1e42      	subs	r2, r0, #1
 80191ca:	f04f 0c01 	mov.w	ip, #1
 80191ce:	b2d2      	uxtb	r2, r2
 80191d0:	e001      	b.n	80191d6 <uxr_stream_id_from_raw+0x16>
 80191d2:	4684      	mov	ip, r0
 80191d4:	4602      	mov	r2, r0
 80191d6:	2300      	movs	r3, #0
 80191d8:	f360 0307 	bfi	r3, r0, #0, #8
 80191dc:	2000      	movs	r0, #0
 80191de:	f362 230f 	bfi	r3, r2, #8, #8
 80191e2:	f36c 4317 	bfi	r3, ip, #16, #8
 80191e6:	f361 631f 	bfi	r3, r1, #24, #8
 80191ea:	fa5f fc83 	uxtb.w	ip, r3
 80191ee:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80191f2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80191f6:	0e1b      	lsrs	r3, r3, #24
 80191f8:	f36c 0007 	bfi	r0, ip, #0, #8
 80191fc:	f361 200f 	bfi	r0, r1, #8, #8
 8019200:	f362 4017 	bfi	r0, r2, #16, #8
 8019204:	f363 601f 	bfi	r0, r3, #24, #8
 8019208:	b002      	add	sp, #8
 801920a:	4770      	bx	lr
 801920c:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8019210:	f04f 0c02 	mov.w	ip, #2
 8019214:	e7df      	b.n	80191d6 <uxr_stream_id_from_raw+0x16>
 8019216:	bf00      	nop

08019218 <uxr_init_stream_storage>:
 8019218:	2300      	movs	r3, #0
 801921a:	7403      	strb	r3, [r0, #16]
 801921c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8019220:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8019224:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8019228:	4770      	bx	lr
 801922a:	bf00      	nop

0801922c <uxr_reset_stream_storage>:
 801922c:	b570      	push	{r4, r5, r6, lr}
 801922e:	7c03      	ldrb	r3, [r0, #16]
 8019230:	4604      	mov	r4, r0
 8019232:	b14b      	cbz	r3, 8019248 <uxr_reset_stream_storage+0x1c>
 8019234:	4606      	mov	r6, r0
 8019236:	2500      	movs	r5, #0
 8019238:	4630      	mov	r0, r6
 801923a:	3501      	adds	r5, #1
 801923c:	f007 f9a4 	bl	8020588 <uxr_reset_output_best_effort_stream>
 8019240:	7c23      	ldrb	r3, [r4, #16]
 8019242:	3610      	adds	r6, #16
 8019244:	42ab      	cmp	r3, r5
 8019246:	d8f7      	bhi.n	8019238 <uxr_reset_stream_storage+0xc>
 8019248:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801924c:	b15b      	cbz	r3, 8019266 <uxr_reset_stream_storage+0x3a>
 801924e:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019252:	2500      	movs	r5, #0
 8019254:	4630      	mov	r0, r6
 8019256:	3501      	adds	r5, #1
 8019258:	f006 ff9c 	bl	8020194 <uxr_reset_input_best_effort_stream>
 801925c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8019260:	3602      	adds	r6, #2
 8019262:	42ab      	cmp	r3, r5
 8019264:	d8f6      	bhi.n	8019254 <uxr_reset_stream_storage+0x28>
 8019266:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801926a:	b15b      	cbz	r3, 8019284 <uxr_reset_stream_storage+0x58>
 801926c:	f104 0618 	add.w	r6, r4, #24
 8019270:	2500      	movs	r5, #0
 8019272:	4630      	mov	r0, r6
 8019274:	3501      	adds	r5, #1
 8019276:	f007 fa33 	bl	80206e0 <uxr_reset_output_reliable_stream>
 801927a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801927e:	3628      	adds	r6, #40	@ 0x28
 8019280:	42ab      	cmp	r3, r5
 8019282:	d8f6      	bhi.n	8019272 <uxr_reset_stream_storage+0x46>
 8019284:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8019288:	b15b      	cbz	r3, 80192a2 <uxr_reset_stream_storage+0x76>
 801928a:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 801928e:	2500      	movs	r5, #0
 8019290:	4630      	mov	r0, r6
 8019292:	3501      	adds	r5, #1
 8019294:	f006 ffea 	bl	802026c <uxr_reset_input_reliable_stream>
 8019298:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801929c:	3618      	adds	r6, #24
 801929e:	42ab      	cmp	r3, r5
 80192a0:	d8f6      	bhi.n	8019290 <uxr_reset_stream_storage+0x64>
 80192a2:	bd70      	pop	{r4, r5, r6, pc}

080192a4 <uxr_add_output_best_effort_buffer>:
 80192a4:	b510      	push	{r4, lr}
 80192a6:	7c04      	ldrb	r4, [r0, #16]
 80192a8:	b082      	sub	sp, #8
 80192aa:	f104 0c01 	add.w	ip, r4, #1
 80192ae:	f880 c010 	strb.w	ip, [r0, #16]
 80192b2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80192b6:	f007 f95d 	bl	8020574 <uxr_init_output_best_effort_stream>
 80192ba:	2201      	movs	r2, #1
 80192bc:	4620      	mov	r0, r4
 80192be:	4611      	mov	r1, r2
 80192c0:	b002      	add	sp, #8
 80192c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80192c6:	f7ff bf4d 	b.w	8019164 <uxr_stream_id>
 80192ca:	bf00      	nop

080192cc <uxr_add_output_reliable_buffer>:
 80192cc:	b510      	push	{r4, lr}
 80192ce:	b084      	sub	sp, #16
 80192d0:	4684      	mov	ip, r0
 80192d2:	2028      	movs	r0, #40	@ 0x28
 80192d4:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80192d8:	9400      	str	r4, [sp, #0]
 80192da:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 80192de:	fb00 c004 	mla	r0, r0, r4, ip
 80192e2:	f104 0e01 	add.w	lr, r4, #1
 80192e6:	3018      	adds	r0, #24
 80192e8:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 80192ec:	f007 f9c2 	bl	8020674 <uxr_init_output_reliable_stream>
 80192f0:	2201      	movs	r2, #1
 80192f2:	2102      	movs	r1, #2
 80192f4:	4620      	mov	r0, r4
 80192f6:	b004      	add	sp, #16
 80192f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80192fc:	f7ff bf32 	b.w	8019164 <uxr_stream_id>

08019300 <uxr_add_input_best_effort_buffer>:
 8019300:	b510      	push	{r4, lr}
 8019302:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8019306:	b082      	sub	sp, #8
 8019308:	1c62      	adds	r2, r4, #1
 801930a:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 801930e:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8019312:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019316:	f006 ff39 	bl	802018c <uxr_init_input_best_effort_stream>
 801931a:	2200      	movs	r2, #0
 801931c:	2101      	movs	r1, #1
 801931e:	4620      	mov	r0, r4
 8019320:	b002      	add	sp, #8
 8019322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019326:	f7ff bf1d 	b.w	8019164 <uxr_stream_id>
 801932a:	bf00      	nop

0801932c <uxr_add_input_reliable_buffer>:
 801932c:	b510      	push	{r4, lr}
 801932e:	b084      	sub	sp, #16
 8019330:	4684      	mov	ip, r0
 8019332:	2018      	movs	r0, #24
 8019334:	9c06      	ldr	r4, [sp, #24]
 8019336:	9400      	str	r4, [sp, #0]
 8019338:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 801933c:	fb00 c004 	mla	r0, r0, r4, ip
 8019340:	f104 0e01 	add.w	lr, r4, #1
 8019344:	3048      	adds	r0, #72	@ 0x48
 8019346:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801934a:	f006 ff69 	bl	8020220 <uxr_init_input_reliable_stream>
 801934e:	2200      	movs	r2, #0
 8019350:	2102      	movs	r1, #2
 8019352:	4620      	mov	r0, r4
 8019354:	b004      	add	sp, #16
 8019356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801935a:	f7ff bf03 	b.w	8019164 <uxr_stream_id>
 801935e:	bf00      	nop

08019360 <uxr_get_output_best_effort_stream>:
 8019360:	7c03      	ldrb	r3, [r0, #16]
 8019362:	428b      	cmp	r3, r1
 8019364:	bf8c      	ite	hi
 8019366:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801936a:	2000      	movls	r0, #0
 801936c:	4770      	bx	lr
 801936e:	bf00      	nop

08019370 <uxr_get_output_reliable_stream>:
 8019370:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8019374:	428b      	cmp	r3, r1
 8019376:	d904      	bls.n	8019382 <uxr_get_output_reliable_stream+0x12>
 8019378:	2328      	movs	r3, #40	@ 0x28
 801937a:	fb03 0001 	mla	r0, r3, r1, r0
 801937e:	3018      	adds	r0, #24
 8019380:	4770      	bx	lr
 8019382:	2000      	movs	r0, #0
 8019384:	4770      	bx	lr
 8019386:	bf00      	nop

08019388 <uxr_get_input_best_effort_stream>:
 8019388:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 801938c:	428b      	cmp	r3, r1
 801938e:	d903      	bls.n	8019398 <uxr_get_input_best_effort_stream+0x10>
 8019390:	3121      	adds	r1, #33	@ 0x21
 8019392:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8019396:	4770      	bx	lr
 8019398:	2000      	movs	r0, #0
 801939a:	4770      	bx	lr

0801939c <uxr_get_input_reliable_stream>:
 801939c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80193a0:	428b      	cmp	r3, r1
 80193a2:	d904      	bls.n	80193ae <uxr_get_input_reliable_stream+0x12>
 80193a4:	2318      	movs	r3, #24
 80193a6:	fb03 0001 	mla	r0, r3, r1, r0
 80193aa:	3048      	adds	r0, #72	@ 0x48
 80193ac:	4770      	bx	lr
 80193ae:	2000      	movs	r0, #0
 80193b0:	4770      	bx	lr
 80193b2:	bf00      	nop

080193b4 <uxr_output_streams_confirmed>:
 80193b4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80193b8:	b183      	cbz	r3, 80193dc <uxr_output_streams_confirmed+0x28>
 80193ba:	b570      	push	{r4, r5, r6, lr}
 80193bc:	4606      	mov	r6, r0
 80193be:	f100 0518 	add.w	r5, r0, #24
 80193c2:	2400      	movs	r4, #0
 80193c4:	e000      	b.n	80193c8 <uxr_output_streams_confirmed+0x14>
 80193c6:	b140      	cbz	r0, 80193da <uxr_output_streams_confirmed+0x26>
 80193c8:	4628      	mov	r0, r5
 80193ca:	3401      	adds	r4, #1
 80193cc:	f007 fbfc 	bl	8020bc8 <uxr_is_output_up_to_date>
 80193d0:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 80193d4:	3528      	adds	r5, #40	@ 0x28
 80193d6:	42a3      	cmp	r3, r4
 80193d8:	d8f5      	bhi.n	80193c6 <uxr_output_streams_confirmed+0x12>
 80193da:	bd70      	pop	{r4, r5, r6, pc}
 80193dc:	2001      	movs	r0, #1
 80193de:	4770      	bx	lr

080193e0 <uxr_buffer_submessage_header>:
 80193e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193e2:	460e      	mov	r6, r1
 80193e4:	2104      	movs	r1, #4
 80193e6:	4604      	mov	r4, r0
 80193e8:	4615      	mov	r5, r2
 80193ea:	461f      	mov	r7, r3
 80193ec:	f7fa fed8 	bl	80141a0 <ucdr_align_to>
 80193f0:	2301      	movs	r3, #1
 80193f2:	4631      	mov	r1, r6
 80193f4:	4620      	mov	r0, r4
 80193f6:	ea47 0203 	orr.w	r2, r7, r3
 80193fa:	7523      	strb	r3, [r4, #20]
 80193fc:	462b      	mov	r3, r5
 80193fe:	f000 fa29 	bl	8019854 <uxr_serialize_submessage_header>
 8019402:	4620      	mov	r0, r4
 8019404:	f7fa fee2 	bl	80141cc <ucdr_buffer_remaining>
 8019408:	42a8      	cmp	r0, r5
 801940a:	bf34      	ite	cc
 801940c:	2000      	movcc	r0, #0
 801940e:	2001      	movcs	r0, #1
 8019410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019412:	bf00      	nop

08019414 <uxr_read_submessage_header>:
 8019414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019418:	4604      	mov	r4, r0
 801941a:	460d      	mov	r5, r1
 801941c:	2104      	movs	r1, #4
 801941e:	4616      	mov	r6, r2
 8019420:	4698      	mov	r8, r3
 8019422:	f7fa febd 	bl	80141a0 <ucdr_align_to>
 8019426:	4620      	mov	r0, r4
 8019428:	f7fa fed0 	bl	80141cc <ucdr_buffer_remaining>
 801942c:	2803      	cmp	r0, #3
 801942e:	bf8c      	ite	hi
 8019430:	2701      	movhi	r7, #1
 8019432:	2700      	movls	r7, #0
 8019434:	d802      	bhi.n	801943c <uxr_read_submessage_header+0x28>
 8019436:	4638      	mov	r0, r7
 8019438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801943c:	4633      	mov	r3, r6
 801943e:	4642      	mov	r2, r8
 8019440:	4620      	mov	r0, r4
 8019442:	4629      	mov	r1, r5
 8019444:	f000 fa1a 	bl	801987c <uxr_deserialize_submessage_header>
 8019448:	f898 3000 	ldrb.w	r3, [r8]
 801944c:	4638      	mov	r0, r7
 801944e:	f003 0201 	and.w	r2, r3, #1
 8019452:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8019456:	f888 3000 	strb.w	r3, [r8]
 801945a:	7522      	strb	r2, [r4, #20]
 801945c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019460 <uxr_submessage_padding>:
 8019460:	f010 0003 	ands.w	r0, r0, #3
 8019464:	bf18      	it	ne
 8019466:	f1c0 0004 	rsbne	r0, r0, #4
 801946a:	4770      	bx	lr

0801946c <uxr_millis>:
 801946c:	b510      	push	{r4, lr}
 801946e:	b084      	sub	sp, #16
 8019470:	2001      	movs	r0, #1
 8019472:	4669      	mov	r1, sp
 8019474:	f7e8 ffa8 	bl	80023c8 <clock_gettime>
 8019478:	4908      	ldr	r1, [pc, #32]	@ (801949c <uxr_millis+0x30>)
 801947a:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 801947e:	fba0 0301 	umull	r0, r3, r0, r1
 8019482:	1900      	adds	r0, r0, r4
 8019484:	fb01 3102 	mla	r1, r1, r2, r3
 8019488:	4a05      	ldr	r2, [pc, #20]	@ (80194a0 <uxr_millis+0x34>)
 801948a:	f04f 0300 	mov.w	r3, #0
 801948e:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8019492:	f7e6 ff8d 	bl	80003b0 <__aeabi_ldivmod>
 8019496:	b004      	add	sp, #16
 8019498:	bd10      	pop	{r4, pc}
 801949a:	bf00      	nop
 801949c:	3b9aca00 	.word	0x3b9aca00
 80194a0:	000f4240 	.word	0x000f4240

080194a4 <uxr_nanos>:
 80194a4:	b510      	push	{r4, lr}
 80194a6:	b084      	sub	sp, #16
 80194a8:	2001      	movs	r0, #1
 80194aa:	4669      	mov	r1, sp
 80194ac:	f7e8 ff8c 	bl	80023c8 <clock_gettime>
 80194b0:	4a06      	ldr	r2, [pc, #24]	@ (80194cc <uxr_nanos+0x28>)
 80194b2:	9800      	ldr	r0, [sp, #0]
 80194b4:	9902      	ldr	r1, [sp, #8]
 80194b6:	fba0 0302 	umull	r0, r3, r0, r2
 80194ba:	9c01      	ldr	r4, [sp, #4]
 80194bc:	1840      	adds	r0, r0, r1
 80194be:	fb02 3304 	mla	r3, r2, r4, r3
 80194c2:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80194c6:	b004      	add	sp, #16
 80194c8:	bd10      	pop	{r4, pc}
 80194ca:	bf00      	nop
 80194cc:	3b9aca00 	.word	0x3b9aca00

080194d0 <on_full_output_buffer_fragmented>:
 80194d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194d4:	460c      	mov	r4, r1
 80194d6:	b08a      	sub	sp, #40	@ 0x28
 80194d8:	4606      	mov	r6, r0
 80194da:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 80194de:	f104 0008 	add.w	r0, r4, #8
 80194e2:	f7ff ff45 	bl	8019370 <uxr_get_output_reliable_stream>
 80194e6:	4605      	mov	r5, r0
 80194e8:	f007 fb78 	bl	8020bdc <get_available_free_slots>
 80194ec:	b968      	cbnz	r0, 801950a <on_full_output_buffer_fragmented+0x3a>
 80194ee:	4620      	mov	r0, r4
 80194f0:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 80194f4:	4798      	blx	r3
 80194f6:	b918      	cbnz	r0, 8019500 <on_full_output_buffer_fragmented+0x30>
 80194f8:	2001      	movs	r0, #1
 80194fa:	b00a      	add	sp, #40	@ 0x28
 80194fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019500:	4628      	mov	r0, r5
 8019502:	f007 fb6b 	bl	8020bdc <get_available_free_slots>
 8019506:	2800      	cmp	r0, #0
 8019508:	d0f6      	beq.n	80194f8 <on_full_output_buffer_fragmented+0x28>
 801950a:	8929      	ldrh	r1, [r5, #8]
 801950c:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8019510:	89eb      	ldrh	r3, [r5, #14]
 8019512:	7b28      	ldrb	r0, [r5, #12]
 8019514:	686f      	ldr	r7, [r5, #4]
 8019516:	1a12      	subs	r2, r2, r0
 8019518:	fbb3 f0f1 	udiv	r0, r3, r1
 801951c:	fbb7 f7f1 	udiv	r7, r7, r1
 8019520:	fb01 3110 	mls	r1, r1, r0, r3
 8019524:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8019528:	b289      	uxth	r1, r1
 801952a:	fb07 f101 	mul.w	r1, r7, r1
 801952e:	3f04      	subs	r7, #4
 8019530:	443a      	add	r2, r7
 8019532:	3104      	adds	r1, #4
 8019534:	fa1f f882 	uxth.w	r8, r2
 8019538:	463a      	mov	r2, r7
 801953a:	eba3 0308 	sub.w	r3, r3, r8
 801953e:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8019542:	682b      	ldr	r3, [r5, #0]
 8019544:	4419      	add	r1, r3
 8019546:	2300      	movs	r3, #0
 8019548:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801954c:	9000      	str	r0, [sp, #0]
 801954e:	a802      	add	r0, sp, #8
 8019550:	f7fa fdf8 	bl	8014144 <ucdr_init_buffer_origin_offset>
 8019554:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8019558:	f102 0308 	add.w	r3, r2, #8
 801955c:	42bb      	cmp	r3, r7
 801955e:	d927      	bls.n	80195b0 <on_full_output_buffer_fragmented+0xe0>
 8019560:	4642      	mov	r2, r8
 8019562:	2300      	movs	r3, #0
 8019564:	210d      	movs	r1, #13
 8019566:	a802      	add	r0, sp, #8
 8019568:	f7ff ff3a 	bl	80193e0 <uxr_buffer_submessage_header>
 801956c:	8929      	ldrh	r1, [r5, #8]
 801956e:	89eb      	ldrh	r3, [r5, #14]
 8019570:	686a      	ldr	r2, [r5, #4]
 8019572:	fbb3 f0f1 	udiv	r0, r3, r1
 8019576:	fbb2 f2f1 	udiv	r2, r2, r1
 801957a:	fb01 3310 	mls	r3, r1, r0, r3
 801957e:	b29b      	uxth	r3, r3
 8019580:	fb02 f303 	mul.w	r3, r2, r3
 8019584:	682a      	ldr	r2, [r5, #0]
 8019586:	50d7      	str	r7, [r2, r3]
 8019588:	2101      	movs	r1, #1
 801958a:	89e8      	ldrh	r0, [r5, #14]
 801958c:	f007 fc78 	bl	8020e80 <uxr_seq_num_add>
 8019590:	9904      	ldr	r1, [sp, #16]
 8019592:	9a03      	ldr	r2, [sp, #12]
 8019594:	81e8      	strh	r0, [r5, #14]
 8019596:	4630      	mov	r0, r6
 8019598:	1a52      	subs	r2, r2, r1
 801959a:	f7fa fde5 	bl	8014168 <ucdr_init_buffer>
 801959e:	4630      	mov	r0, r6
 80195a0:	4622      	mov	r2, r4
 80195a2:	490f      	ldr	r1, [pc, #60]	@ (80195e0 <on_full_output_buffer_fragmented+0x110>)
 80195a4:	f7fa fdb4 	bl	8014110 <ucdr_set_on_full_buffer_callback>
 80195a8:	2000      	movs	r0, #0
 80195aa:	b00a      	add	sp, #40	@ 0x28
 80195ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195b0:	b292      	uxth	r2, r2
 80195b2:	2302      	movs	r3, #2
 80195b4:	210d      	movs	r1, #13
 80195b6:	a802      	add	r0, sp, #8
 80195b8:	f7ff ff12 	bl	80193e0 <uxr_buffer_submessage_header>
 80195bc:	8928      	ldrh	r0, [r5, #8]
 80195be:	89eb      	ldrh	r3, [r5, #14]
 80195c0:	6869      	ldr	r1, [r5, #4]
 80195c2:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80195c6:	fbb3 f7f0 	udiv	r7, r3, r0
 80195ca:	fbb1 f1f0 	udiv	r1, r1, r0
 80195ce:	fb00 3317 	mls	r3, r0, r7, r3
 80195d2:	3208      	adds	r2, #8
 80195d4:	b29b      	uxth	r3, r3
 80195d6:	fb01 f303 	mul.w	r3, r1, r3
 80195da:	6829      	ldr	r1, [r5, #0]
 80195dc:	50ca      	str	r2, [r1, r3]
 80195de:	e7d3      	b.n	8019588 <on_full_output_buffer_fragmented+0xb8>
 80195e0:	080194d1 	.word	0x080194d1

080195e4 <uxr_prepare_output_stream>:
 80195e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80195e6:	b087      	sub	sp, #28
 80195e8:	2707      	movs	r7, #7
 80195ea:	2500      	movs	r5, #0
 80195ec:	461c      	mov	r4, r3
 80195ee:	4606      	mov	r6, r0
 80195f0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80195f4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80195f6:	e9cd 7500 	strd	r7, r5, [sp]
 80195fa:	3204      	adds	r2, #4
 80195fc:	f7fe ffc8 	bl	8018590 <uxr_prepare_stream_to_write_submessage>
 8019600:	f080 0201 	eor.w	r2, r0, #1
 8019604:	b2d2      	uxtb	r2, r2
 8019606:	75a2      	strb	r2, [r4, #22]
 8019608:	b112      	cbz	r2, 8019610 <uxr_prepare_output_stream+0x2c>
 801960a:	4628      	mov	r0, r5
 801960c:	b007      	add	sp, #28
 801960e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019610:	aa05      	add	r2, sp, #20
 8019612:	9902      	ldr	r1, [sp, #8]
 8019614:	4630      	mov	r0, r6
 8019616:	f7ff f8f7 	bl	8018808 <uxr_init_base_object_request>
 801961a:	a905      	add	r1, sp, #20
 801961c:	4605      	mov	r5, r0
 801961e:	4620      	mov	r0, r4
 8019620:	f001 f8d2 	bl	801a7c8 <uxr_serialize_WRITE_DATA_Payload_Data>
 8019624:	69a6      	ldr	r6, [r4, #24]
 8019626:	69e7      	ldr	r7, [r4, #28]
 8019628:	4620      	mov	r0, r4
 801962a:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801962e:	1a52      	subs	r2, r2, r1
 8019630:	f7fa fd9a 	bl	8014168 <ucdr_init_buffer>
 8019634:	4620      	mov	r0, r4
 8019636:	463a      	mov	r2, r7
 8019638:	4631      	mov	r1, r6
 801963a:	f7fa fd69 	bl	8014110 <ucdr_set_on_full_buffer_callback>
 801963e:	4628      	mov	r0, r5
 8019640:	b007      	add	sp, #28
 8019642:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019644 <uxr_prepare_output_stream_fragmented>:
 8019644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019648:	b091      	sub	sp, #68	@ 0x44
 801964a:	4605      	mov	r5, r0
 801964c:	3008      	adds	r0, #8
 801964e:	461e      	mov	r6, r3
 8019650:	9105      	str	r1, [sp, #20]
 8019652:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8019656:	9204      	str	r2, [sp, #16]
 8019658:	f7ff fe8a 	bl	8019370 <uxr_get_output_reliable_stream>
 801965c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8019660:	2b01      	cmp	r3, #1
 8019662:	f000 8093 	beq.w	801978c <uxr_prepare_output_stream_fragmented+0x148>
 8019666:	4604      	mov	r4, r0
 8019668:	2800      	cmp	r0, #0
 801966a:	f000 808f 	beq.w	801978c <uxr_prepare_output_stream_fragmented+0x148>
 801966e:	f007 fab5 	bl	8020bdc <get_available_free_slots>
 8019672:	2800      	cmp	r0, #0
 8019674:	f000 8085 	beq.w	8019782 <uxr_prepare_output_stream_fragmented+0x13e>
 8019678:	8923      	ldrh	r3, [r4, #8]
 801967a:	89e7      	ldrh	r7, [r4, #14]
 801967c:	6862      	ldr	r2, [r4, #4]
 801967e:	fbb7 f9f3 	udiv	r9, r7, r3
 8019682:	fbb2 f2f3 	udiv	r2, r2, r3
 8019686:	fb03 7919 	mls	r9, r3, r9, r7
 801968a:	6823      	ldr	r3, [r4, #0]
 801968c:	f1a2 0b04 	sub.w	fp, r2, #4
 8019690:	9203      	str	r2, [sp, #12]
 8019692:	fa1f f989 	uxth.w	r9, r9
 8019696:	fb02 f909 	mul.w	r9, r2, r9
 801969a:	f109 0904 	add.w	r9, r9, #4
 801969e:	4499      	add	r9, r3
 80196a0:	7b23      	ldrb	r3, [r4, #12]
 80196a2:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80196a6:	4543      	cmp	r3, r8
 80196a8:	d37c      	bcc.n	80197a4 <uxr_prepare_output_stream_fragmented+0x160>
 80196aa:	f1ab 0a04 	sub.w	sl, fp, #4
 80196ae:	465a      	mov	r2, fp
 80196b0:	4649      	mov	r1, r9
 80196b2:	a808      	add	r0, sp, #32
 80196b4:	ebaa 0a03 	sub.w	sl, sl, r3
 80196b8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80196ba:	f8cd 8000 	str.w	r8, [sp]
 80196be:	3308      	adds	r3, #8
 80196c0:	fa1f fa8a 	uxth.w	sl, sl
 80196c4:	9302      	str	r3, [sp, #8]
 80196c6:	2300      	movs	r3, #0
 80196c8:	f7fa fd3c 	bl	8014144 <ucdr_init_buffer_origin_offset>
 80196cc:	9b02      	ldr	r3, [sp, #8]
 80196ce:	4652      	mov	r2, sl
 80196d0:	210d      	movs	r1, #13
 80196d2:	455b      	cmp	r3, fp
 80196d4:	bf34      	ite	cc
 80196d6:	2302      	movcc	r3, #2
 80196d8:	2300      	movcs	r3, #0
 80196da:	a808      	add	r0, sp, #32
 80196dc:	f7ff fe80 	bl	80193e0 <uxr_buffer_submessage_header>
 80196e0:	8921      	ldrh	r1, [r4, #8]
 80196e2:	6863      	ldr	r3, [r4, #4]
 80196e4:	4638      	mov	r0, r7
 80196e6:	fbb7 f2f1 	udiv	r2, r7, r1
 80196ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80196ee:	fb01 7212 	mls	r2, r1, r2, r7
 80196f2:	2101      	movs	r1, #1
 80196f4:	b292      	uxth	r2, r2
 80196f6:	fb02 f303 	mul.w	r3, r2, r3
 80196fa:	6822      	ldr	r2, [r4, #0]
 80196fc:	f842 b003 	str.w	fp, [r2, r3]
 8019700:	f007 fbbe 	bl	8020e80 <uxr_seq_num_add>
 8019704:	9b03      	ldr	r3, [sp, #12]
 8019706:	f108 0104 	add.w	r1, r8, #4
 801970a:	4607      	mov	r7, r0
 801970c:	f1a3 0208 	sub.w	r2, r3, #8
 8019710:	4630      	mov	r0, r6
 8019712:	4449      	add	r1, r9
 8019714:	eba2 0208 	sub.w	r2, r2, r8
 8019718:	f7fa fd26 	bl	8014168 <ucdr_init_buffer>
 801971c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801971e:	2107      	movs	r1, #7
 8019720:	81e7      	strh	r7, [r4, #14]
 8019722:	1d1a      	adds	r2, r3, #4
 8019724:	2300      	movs	r3, #0
 8019726:	4630      	mov	r0, r6
 8019728:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 801972c:	bf28      	it	cs
 801972e:	461a      	movcs	r2, r3
 8019730:	b292      	uxth	r2, r2
 8019732:	f7ff fe55 	bl	80193e0 <uxr_buffer_submessage_header>
 8019736:	aa07      	add	r2, sp, #28
 8019738:	9904      	ldr	r1, [sp, #16]
 801973a:	4628      	mov	r0, r5
 801973c:	f7ff f864 	bl	8018808 <uxr_init_base_object_request>
 8019740:	4604      	mov	r4, r0
 8019742:	b320      	cbz	r0, 801978e <uxr_prepare_output_stream_fragmented+0x14a>
 8019744:	a907      	add	r1, sp, #28
 8019746:	4630      	mov	r0, r6
 8019748:	f001 f83e 	bl	801a7c8 <uxr_serialize_WRITE_DATA_Payload_Data>
 801974c:	4630      	mov	r0, r6
 801974e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8019752:	1a52      	subs	r2, r2, r1
 8019754:	f7fa fd08 	bl	8014168 <ucdr_init_buffer>
 8019758:	9b05      	ldr	r3, [sp, #20]
 801975a:	9a02      	ldr	r2, [sp, #8]
 801975c:	4630      	mov	r0, r6
 801975e:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8019762:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8019764:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 8019768:	462a      	mov	r2, r5
 801976a:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 801976e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8019770:	4918      	ldr	r1, [pc, #96]	@ (80197d4 <uxr_prepare_output_stream_fragmented+0x190>)
 8019772:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8019776:	f7fa fccb 	bl	8014110 <ucdr_set_on_full_buffer_callback>
 801977a:	4620      	mov	r0, r4
 801977c:	b011      	add	sp, #68	@ 0x44
 801977e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019782:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8019784:	4628      	mov	r0, r5
 8019786:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8019788:	4798      	blx	r3
 801978a:	b920      	cbnz	r0, 8019796 <uxr_prepare_output_stream_fragmented+0x152>
 801978c:	2400      	movs	r4, #0
 801978e:	4620      	mov	r0, r4
 8019790:	b011      	add	sp, #68	@ 0x44
 8019792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019796:	4620      	mov	r0, r4
 8019798:	f007 fa20 	bl	8020bdc <get_available_free_slots>
 801979c:	2800      	cmp	r0, #0
 801979e:	f47f af6b 	bne.w	8019678 <uxr_prepare_output_stream_fragmented+0x34>
 80197a2:	e7f3      	b.n	801978c <uxr_prepare_output_stream_fragmented+0x148>
 80197a4:	4638      	mov	r0, r7
 80197a6:	2101      	movs	r1, #1
 80197a8:	f007 fb6a 	bl	8020e80 <uxr_seq_num_add>
 80197ac:	8922      	ldrh	r2, [r4, #8]
 80197ae:	6863      	ldr	r3, [r4, #4]
 80197b0:	4607      	mov	r7, r0
 80197b2:	fbb3 f9f2 	udiv	r9, r3, r2
 80197b6:	fbb0 f3f2 	udiv	r3, r0, r2
 80197ba:	fb02 0313 	mls	r3, r2, r3, r0
 80197be:	b29b      	uxth	r3, r3
 80197c0:	fb03 f909 	mul.w	r9, r3, r9
 80197c4:	6823      	ldr	r3, [r4, #0]
 80197c6:	f109 0904 	add.w	r9, r9, #4
 80197ca:	4499      	add	r9, r3
 80197cc:	7b23      	ldrb	r3, [r4, #12]
 80197ce:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80197d2:	e76a      	b.n	80196aa <uxr_prepare_output_stream_fragmented+0x66>
 80197d4:	080194d1 	.word	0x080194d1

080197d8 <uxr_serialize_message_header>:
 80197d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80197da:	4616      	mov	r6, r2
 80197dc:	b083      	sub	sp, #12
 80197de:	4604      	mov	r4, r0
 80197e0:	460d      	mov	r5, r1
 80197e2:	9301      	str	r3, [sp, #4]
 80197e4:	9f08      	ldr	r7, [sp, #32]
 80197e6:	f7f9 fa55 	bl	8012c94 <ucdr_serialize_uint8_t>
 80197ea:	4631      	mov	r1, r6
 80197ec:	4620      	mov	r0, r4
 80197ee:	f7f9 fa51 	bl	8012c94 <ucdr_serialize_uint8_t>
 80197f2:	9a01      	ldr	r2, [sp, #4]
 80197f4:	2101      	movs	r1, #1
 80197f6:	4620      	mov	r0, r4
 80197f8:	f7f9 faf8 	bl	8012dec <ucdr_serialize_endian_uint16_t>
 80197fc:	062b      	lsls	r3, r5, #24
 80197fe:	d501      	bpl.n	8019804 <uxr_serialize_message_header+0x2c>
 8019800:	b003      	add	sp, #12
 8019802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019804:	2204      	movs	r2, #4
 8019806:	4639      	mov	r1, r7
 8019808:	4620      	mov	r0, r4
 801980a:	b003      	add	sp, #12
 801980c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019810:	f006 bbd8 	b.w	801ffc4 <ucdr_serialize_array_uint8_t>

08019814 <uxr_deserialize_message_header>:
 8019814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019816:	4616      	mov	r6, r2
 8019818:	b083      	sub	sp, #12
 801981a:	4604      	mov	r4, r0
 801981c:	460d      	mov	r5, r1
 801981e:	9301      	str	r3, [sp, #4]
 8019820:	9f08      	ldr	r7, [sp, #32]
 8019822:	f7f9 fa4d 	bl	8012cc0 <ucdr_deserialize_uint8_t>
 8019826:	4631      	mov	r1, r6
 8019828:	4620      	mov	r0, r4
 801982a:	f7f9 fa49 	bl	8012cc0 <ucdr_deserialize_uint8_t>
 801982e:	9a01      	ldr	r2, [sp, #4]
 8019830:	2101      	movs	r1, #1
 8019832:	4620      	mov	r0, r4
 8019834:	f7f9 fbce 	bl	8012fd4 <ucdr_deserialize_endian_uint16_t>
 8019838:	f995 3000 	ldrsb.w	r3, [r5]
 801983c:	2b00      	cmp	r3, #0
 801983e:	da01      	bge.n	8019844 <uxr_deserialize_message_header+0x30>
 8019840:	b003      	add	sp, #12
 8019842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019844:	2204      	movs	r2, #4
 8019846:	4639      	mov	r1, r7
 8019848:	4620      	mov	r0, r4
 801984a:	b003      	add	sp, #12
 801984c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019850:	f006 bc1c 	b.w	802008c <ucdr_deserialize_array_uint8_t>

08019854 <uxr_serialize_submessage_header>:
 8019854:	b530      	push	{r4, r5, lr}
 8019856:	4615      	mov	r5, r2
 8019858:	b083      	sub	sp, #12
 801985a:	4604      	mov	r4, r0
 801985c:	9301      	str	r3, [sp, #4]
 801985e:	f7f9 fa19 	bl	8012c94 <ucdr_serialize_uint8_t>
 8019862:	4629      	mov	r1, r5
 8019864:	4620      	mov	r0, r4
 8019866:	f7f9 fa15 	bl	8012c94 <ucdr_serialize_uint8_t>
 801986a:	9a01      	ldr	r2, [sp, #4]
 801986c:	2101      	movs	r1, #1
 801986e:	4620      	mov	r0, r4
 8019870:	b003      	add	sp, #12
 8019872:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019876:	f7f9 bab9 	b.w	8012dec <ucdr_serialize_endian_uint16_t>
 801987a:	bf00      	nop

0801987c <uxr_deserialize_submessage_header>:
 801987c:	b530      	push	{r4, r5, lr}
 801987e:	4615      	mov	r5, r2
 8019880:	b083      	sub	sp, #12
 8019882:	4604      	mov	r4, r0
 8019884:	9301      	str	r3, [sp, #4]
 8019886:	f7f9 fa1b 	bl	8012cc0 <ucdr_deserialize_uint8_t>
 801988a:	4629      	mov	r1, r5
 801988c:	4620      	mov	r0, r4
 801988e:	f7f9 fa17 	bl	8012cc0 <ucdr_deserialize_uint8_t>
 8019892:	9a01      	ldr	r2, [sp, #4]
 8019894:	2101      	movs	r1, #1
 8019896:	4620      	mov	r0, r4
 8019898:	b003      	add	sp, #12
 801989a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801989e:	f7f9 bb99 	b.w	8012fd4 <ucdr_deserialize_endian_uint16_t>
 80198a2:	bf00      	nop

080198a4 <uxr_serialize_CLIENT_Representation>:
 80198a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80198a8:	2204      	movs	r2, #4
 80198aa:	460e      	mov	r6, r1
 80198ac:	4605      	mov	r5, r0
 80198ae:	f006 fb89 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 80198b2:	4607      	mov	r7, r0
 80198b4:	2202      	movs	r2, #2
 80198b6:	1d31      	adds	r1, r6, #4
 80198b8:	4628      	mov	r0, r5
 80198ba:	f006 fb83 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 80198be:	4038      	ands	r0, r7
 80198c0:	2202      	movs	r2, #2
 80198c2:	1db1      	adds	r1, r6, #6
 80198c4:	b2c7      	uxtb	r7, r0
 80198c6:	4628      	mov	r0, r5
 80198c8:	f006 fb7c 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 80198cc:	2204      	movs	r2, #4
 80198ce:	4007      	ands	r7, r0
 80198d0:	f106 0108 	add.w	r1, r6, #8
 80198d4:	4628      	mov	r0, r5
 80198d6:	f006 fb75 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 80198da:	4007      	ands	r7, r0
 80198dc:	7b31      	ldrb	r1, [r6, #12]
 80198de:	4628      	mov	r0, r5
 80198e0:	f7f9 f9d8 	bl	8012c94 <ucdr_serialize_uint8_t>
 80198e4:	7b71      	ldrb	r1, [r6, #13]
 80198e6:	4007      	ands	r7, r0
 80198e8:	4628      	mov	r0, r5
 80198ea:	f7f9 f9a5 	bl	8012c38 <ucdr_serialize_bool>
 80198ee:	7b73      	ldrb	r3, [r6, #13]
 80198f0:	ea07 0800 	and.w	r8, r7, r0
 80198f4:	b93b      	cbnz	r3, 8019906 <uxr_serialize_CLIENT_Representation+0x62>
 80198f6:	8bb1      	ldrh	r1, [r6, #28]
 80198f8:	4628      	mov	r0, r5
 80198fa:	f7f9 f9f7 	bl	8012cec <ucdr_serialize_uint16_t>
 80198fe:	ea08 0000 	and.w	r0, r8, r0
 8019902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019906:	6931      	ldr	r1, [r6, #16]
 8019908:	4628      	mov	r0, r5
 801990a:	f7f9 fbd9 	bl	80130c0 <ucdr_serialize_uint32_t>
 801990e:	6933      	ldr	r3, [r6, #16]
 8019910:	b1e3      	cbz	r3, 801994c <uxr_serialize_CLIENT_Representation+0xa8>
 8019912:	b1c0      	cbz	r0, 8019946 <uxr_serialize_CLIENT_Representation+0xa2>
 8019914:	4637      	mov	r7, r6
 8019916:	f04f 0900 	mov.w	r9, #0
 801991a:	e000      	b.n	801991e <uxr_serialize_CLIENT_Representation+0x7a>
 801991c:	b19c      	cbz	r4, 8019946 <uxr_serialize_CLIENT_Representation+0xa2>
 801991e:	6979      	ldr	r1, [r7, #20]
 8019920:	4628      	mov	r0, r5
 8019922:	f006 fc1b 	bl	802015c <ucdr_serialize_string>
 8019926:	69b9      	ldr	r1, [r7, #24]
 8019928:	4604      	mov	r4, r0
 801992a:	4628      	mov	r0, r5
 801992c:	f006 fc16 	bl	802015c <ucdr_serialize_string>
 8019930:	f109 0901 	add.w	r9, r9, #1
 8019934:	6933      	ldr	r3, [r6, #16]
 8019936:	4004      	ands	r4, r0
 8019938:	3708      	adds	r7, #8
 801993a:	4599      	cmp	r9, r3
 801993c:	b2e4      	uxtb	r4, r4
 801993e:	d3ed      	bcc.n	801991c <uxr_serialize_CLIENT_Representation+0x78>
 8019940:	ea08 0804 	and.w	r8, r8, r4
 8019944:	e7d7      	b.n	80198f6 <uxr_serialize_CLIENT_Representation+0x52>
 8019946:	f04f 0800 	mov.w	r8, #0
 801994a:	e7d4      	b.n	80198f6 <uxr_serialize_CLIENT_Representation+0x52>
 801994c:	ea08 0800 	and.w	r8, r8, r0
 8019950:	e7d1      	b.n	80198f6 <uxr_serialize_CLIENT_Representation+0x52>
 8019952:	bf00      	nop

08019954 <uxr_deserialize_CLIENT_Representation>:
 8019954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019958:	2204      	movs	r2, #4
 801995a:	460c      	mov	r4, r1
 801995c:	4605      	mov	r5, r0
 801995e:	f006 fb95 	bl	802008c <ucdr_deserialize_array_uint8_t>
 8019962:	4607      	mov	r7, r0
 8019964:	2202      	movs	r2, #2
 8019966:	1d21      	adds	r1, r4, #4
 8019968:	4628      	mov	r0, r5
 801996a:	f006 fb8f 	bl	802008c <ucdr_deserialize_array_uint8_t>
 801996e:	4038      	ands	r0, r7
 8019970:	2202      	movs	r2, #2
 8019972:	1da1      	adds	r1, r4, #6
 8019974:	b2c6      	uxtb	r6, r0
 8019976:	4628      	mov	r0, r5
 8019978:	f006 fb88 	bl	802008c <ucdr_deserialize_array_uint8_t>
 801997c:	2204      	movs	r2, #4
 801997e:	4006      	ands	r6, r0
 8019980:	f104 0108 	add.w	r1, r4, #8
 8019984:	4628      	mov	r0, r5
 8019986:	f006 fb81 	bl	802008c <ucdr_deserialize_array_uint8_t>
 801998a:	4006      	ands	r6, r0
 801998c:	f104 010c 	add.w	r1, r4, #12
 8019990:	4628      	mov	r0, r5
 8019992:	f7f9 f995 	bl	8012cc0 <ucdr_deserialize_uint8_t>
 8019996:	f104 010d 	add.w	r1, r4, #13
 801999a:	ea06 0700 	and.w	r7, r6, r0
 801999e:	4628      	mov	r0, r5
 80199a0:	f7f9 f960 	bl	8012c64 <ucdr_deserialize_bool>
 80199a4:	7b63      	ldrb	r3, [r4, #13]
 80199a6:	4007      	ands	r7, r0
 80199a8:	b93b      	cbnz	r3, 80199ba <uxr_deserialize_CLIENT_Representation+0x66>
 80199aa:	f104 011c 	add.w	r1, r4, #28
 80199ae:	4628      	mov	r0, r5
 80199b0:	f7f9 fa9c 	bl	8012eec <ucdr_deserialize_uint16_t>
 80199b4:	4038      	ands	r0, r7
 80199b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80199ba:	f104 0110 	add.w	r1, r4, #16
 80199be:	4628      	mov	r0, r5
 80199c0:	f7f9 fcae 	bl	8013320 <ucdr_deserialize_uint32_t>
 80199c4:	6923      	ldr	r3, [r4, #16]
 80199c6:	2b01      	cmp	r3, #1
 80199c8:	d903      	bls.n	80199d2 <uxr_deserialize_CLIENT_Representation+0x7e>
 80199ca:	2301      	movs	r3, #1
 80199cc:	2700      	movs	r7, #0
 80199ce:	75ab      	strb	r3, [r5, #22]
 80199d0:	e7eb      	b.n	80199aa <uxr_deserialize_CLIENT_Representation+0x56>
 80199d2:	b30b      	cbz	r3, 8019a18 <uxr_deserialize_CLIENT_Representation+0xc4>
 80199d4:	b1f0      	cbz	r0, 8019a14 <uxr_deserialize_CLIENT_Representation+0xc0>
 80199d6:	46a0      	mov	r8, r4
 80199d8:	f04f 0900 	mov.w	r9, #0
 80199dc:	e000      	b.n	80199e0 <uxr_deserialize_CLIENT_Representation+0x8c>
 80199de:	b1ce      	cbz	r6, 8019a14 <uxr_deserialize_CLIENT_Representation+0xc0>
 80199e0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80199e4:	f108 0808 	add.w	r8, r8, #8
 80199e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80199ec:	4628      	mov	r0, r5
 80199ee:	f006 fbc5 	bl	802017c <ucdr_deserialize_string>
 80199f2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80199f6:	4606      	mov	r6, r0
 80199f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80199fc:	4628      	mov	r0, r5
 80199fe:	f109 0901 	add.w	r9, r9, #1
 8019a02:	f006 fbbb 	bl	802017c <ucdr_deserialize_string>
 8019a06:	6923      	ldr	r3, [r4, #16]
 8019a08:	4006      	ands	r6, r0
 8019a0a:	4599      	cmp	r9, r3
 8019a0c:	b2f6      	uxtb	r6, r6
 8019a0e:	d3e6      	bcc.n	80199de <uxr_deserialize_CLIENT_Representation+0x8a>
 8019a10:	4037      	ands	r7, r6
 8019a12:	e7ca      	b.n	80199aa <uxr_deserialize_CLIENT_Representation+0x56>
 8019a14:	2700      	movs	r7, #0
 8019a16:	e7c8      	b.n	80199aa <uxr_deserialize_CLIENT_Representation+0x56>
 8019a18:	4007      	ands	r7, r0
 8019a1a:	e7c6      	b.n	80199aa <uxr_deserialize_CLIENT_Representation+0x56>

08019a1c <uxr_serialize_AGENT_Representation>:
 8019a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a20:	2204      	movs	r2, #4
 8019a22:	460f      	mov	r7, r1
 8019a24:	4605      	mov	r5, r0
 8019a26:	f006 facd 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 8019a2a:	4604      	mov	r4, r0
 8019a2c:	2202      	movs	r2, #2
 8019a2e:	1d39      	adds	r1, r7, #4
 8019a30:	4628      	mov	r0, r5
 8019a32:	f006 fac7 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 8019a36:	4020      	ands	r0, r4
 8019a38:	2202      	movs	r2, #2
 8019a3a:	1db9      	adds	r1, r7, #6
 8019a3c:	b2c4      	uxtb	r4, r0
 8019a3e:	4628      	mov	r0, r5
 8019a40:	f006 fac0 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 8019a44:	7a39      	ldrb	r1, [r7, #8]
 8019a46:	4004      	ands	r4, r0
 8019a48:	4628      	mov	r0, r5
 8019a4a:	f7f9 f8f5 	bl	8012c38 <ucdr_serialize_bool>
 8019a4e:	7a3b      	ldrb	r3, [r7, #8]
 8019a50:	ea00 0804 	and.w	r8, r0, r4
 8019a54:	b913      	cbnz	r3, 8019a5c <uxr_serialize_AGENT_Representation+0x40>
 8019a56:	4640      	mov	r0, r8
 8019a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a5c:	68f9      	ldr	r1, [r7, #12]
 8019a5e:	4628      	mov	r0, r5
 8019a60:	f7f9 fb2e 	bl	80130c0 <ucdr_serialize_uint32_t>
 8019a64:	68fb      	ldr	r3, [r7, #12]
 8019a66:	b303      	cbz	r3, 8019aaa <uxr_serialize_AGENT_Representation+0x8e>
 8019a68:	b1d0      	cbz	r0, 8019aa0 <uxr_serialize_AGENT_Representation+0x84>
 8019a6a:	463e      	mov	r6, r7
 8019a6c:	f04f 0900 	mov.w	r9, #0
 8019a70:	e000      	b.n	8019a74 <uxr_serialize_AGENT_Representation+0x58>
 8019a72:	b1ac      	cbz	r4, 8019aa0 <uxr_serialize_AGENT_Representation+0x84>
 8019a74:	6931      	ldr	r1, [r6, #16]
 8019a76:	4628      	mov	r0, r5
 8019a78:	f006 fb70 	bl	802015c <ucdr_serialize_string>
 8019a7c:	6971      	ldr	r1, [r6, #20]
 8019a7e:	4604      	mov	r4, r0
 8019a80:	4628      	mov	r0, r5
 8019a82:	f006 fb6b 	bl	802015c <ucdr_serialize_string>
 8019a86:	f109 0901 	add.w	r9, r9, #1
 8019a8a:	68fb      	ldr	r3, [r7, #12]
 8019a8c:	4004      	ands	r4, r0
 8019a8e:	3608      	adds	r6, #8
 8019a90:	4599      	cmp	r9, r3
 8019a92:	b2e4      	uxtb	r4, r4
 8019a94:	d3ed      	bcc.n	8019a72 <uxr_serialize_AGENT_Representation+0x56>
 8019a96:	ea08 0804 	and.w	r8, r8, r4
 8019a9a:	4640      	mov	r0, r8
 8019a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019aa0:	f04f 0800 	mov.w	r8, #0
 8019aa4:	4640      	mov	r0, r8
 8019aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019aaa:	ea08 0800 	and.w	r8, r8, r0
 8019aae:	e7d2      	b.n	8019a56 <uxr_serialize_AGENT_Representation+0x3a>

08019ab0 <uxr_serialize_DATAWRITER_Representation>:
 8019ab0:	b570      	push	{r4, r5, r6, lr}
 8019ab2:	460d      	mov	r5, r1
 8019ab4:	7809      	ldrb	r1, [r1, #0]
 8019ab6:	4606      	mov	r6, r0
 8019ab8:	f7f9 f8ec 	bl	8012c94 <ucdr_serialize_uint8_t>
 8019abc:	4604      	mov	r4, r0
 8019abe:	b130      	cbz	r0, 8019ace <uxr_serialize_DATAWRITER_Representation+0x1e>
 8019ac0:	782b      	ldrb	r3, [r5, #0]
 8019ac2:	2b02      	cmp	r3, #2
 8019ac4:	d00c      	beq.n	8019ae0 <uxr_serialize_DATAWRITER_Representation+0x30>
 8019ac6:	2b03      	cmp	r3, #3
 8019ac8:	d010      	beq.n	8019aec <uxr_serialize_DATAWRITER_Representation+0x3c>
 8019aca:	2b01      	cmp	r3, #1
 8019acc:	d008      	beq.n	8019ae0 <uxr_serialize_DATAWRITER_Representation+0x30>
 8019ace:	2202      	movs	r2, #2
 8019ad0:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8019ad4:	4630      	mov	r0, r6
 8019ad6:	f006 fa75 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 8019ada:	4020      	ands	r0, r4
 8019adc:	b2c0      	uxtb	r0, r0
 8019ade:	bd70      	pop	{r4, r5, r6, pc}
 8019ae0:	6869      	ldr	r1, [r5, #4]
 8019ae2:	4630      	mov	r0, r6
 8019ae4:	f006 fb3a 	bl	802015c <ucdr_serialize_string>
 8019ae8:	4604      	mov	r4, r0
 8019aea:	e7f0      	b.n	8019ace <uxr_serialize_DATAWRITER_Representation+0x1e>
 8019aec:	4629      	mov	r1, r5
 8019aee:	4630      	mov	r0, r6
 8019af0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8019af4:	3104      	adds	r1, #4
 8019af6:	f7fd f947 	bl	8016d88 <ucdr_serialize_sequence_uint8_t>
 8019afa:	4604      	mov	r4, r0
 8019afc:	e7e7      	b.n	8019ace <uxr_serialize_DATAWRITER_Representation+0x1e>
 8019afe:	bf00      	nop

08019b00 <uxr_serialize_ObjectVariant.part.0>:
 8019b00:	b570      	push	{r4, r5, r6, lr}
 8019b02:	780b      	ldrb	r3, [r1, #0]
 8019b04:	460c      	mov	r4, r1
 8019b06:	4605      	mov	r5, r0
 8019b08:	3b01      	subs	r3, #1
 8019b0a:	2b0d      	cmp	r3, #13
 8019b0c:	d854      	bhi.n	8019bb8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8019b0e:	e8df f003 	tbb	[pc, r3]
 8019b12:	0730      	.short	0x0730
 8019b14:	07071b1b 	.word	0x07071b1b
 8019b18:	0c530707 	.word	0x0c530707
 8019b1c:	494e0c0c 	.word	0x494e0c0c
 8019b20:	3104      	adds	r1, #4
 8019b22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019b26:	f7ff bfc3 	b.w	8019ab0 <uxr_serialize_DATAWRITER_Representation>
 8019b2a:	7909      	ldrb	r1, [r1, #4]
 8019b2c:	f7f9 f8b2 	bl	8012c94 <ucdr_serialize_uint8_t>
 8019b30:	b1e8      	cbz	r0, 8019b6e <uxr_serialize_ObjectVariant.part.0+0x6e>
 8019b32:	7923      	ldrb	r3, [r4, #4]
 8019b34:	2b01      	cmp	r3, #1
 8019b36:	d001      	beq.n	8019b3c <uxr_serialize_ObjectVariant.part.0+0x3c>
 8019b38:	2b02      	cmp	r3, #2
 8019b3a:	d13d      	bne.n	8019bb8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8019b3c:	68a1      	ldr	r1, [r4, #8]
 8019b3e:	4628      	mov	r0, r5
 8019b40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019b44:	f006 bb0a 	b.w	802015c <ucdr_serialize_string>
 8019b48:	7909      	ldrb	r1, [r1, #4]
 8019b4a:	f7f9 f8a3 	bl	8012c94 <ucdr_serialize_uint8_t>
 8019b4e:	4606      	mov	r6, r0
 8019b50:	b120      	cbz	r0, 8019b5c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8019b52:	7923      	ldrb	r3, [r4, #4]
 8019b54:	2b02      	cmp	r3, #2
 8019b56:	d039      	beq.n	8019bcc <uxr_serialize_ObjectVariant.part.0+0xcc>
 8019b58:	2b03      	cmp	r3, #3
 8019b5a:	d02f      	beq.n	8019bbc <uxr_serialize_ObjectVariant.part.0+0xbc>
 8019b5c:	2202      	movs	r2, #2
 8019b5e:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8019b62:	4628      	mov	r0, r5
 8019b64:	f006 fa2e 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 8019b68:	4030      	ands	r0, r6
 8019b6a:	b2c0      	uxtb	r0, r0
 8019b6c:	bd70      	pop	{r4, r5, r6, pc}
 8019b6e:	2000      	movs	r0, #0
 8019b70:	bd70      	pop	{r4, r5, r6, pc}
 8019b72:	7909      	ldrb	r1, [r1, #4]
 8019b74:	f7f9 f88e 	bl	8012c94 <ucdr_serialize_uint8_t>
 8019b78:	4606      	mov	r6, r0
 8019b7a:	b158      	cbz	r0, 8019b94 <uxr_serialize_ObjectVariant.part.0+0x94>
 8019b7c:	7923      	ldrb	r3, [r4, #4]
 8019b7e:	2b02      	cmp	r3, #2
 8019b80:	d003      	beq.n	8019b8a <uxr_serialize_ObjectVariant.part.0+0x8a>
 8019b82:	2b03      	cmp	r3, #3
 8019b84:	d028      	beq.n	8019bd8 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8019b86:	2b01      	cmp	r3, #1
 8019b88:	d104      	bne.n	8019b94 <uxr_serialize_ObjectVariant.part.0+0x94>
 8019b8a:	68a1      	ldr	r1, [r4, #8]
 8019b8c:	4628      	mov	r0, r5
 8019b8e:	f006 fae5 	bl	802015c <ucdr_serialize_string>
 8019b92:	4606      	mov	r6, r0
 8019b94:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8019b98:	4628      	mov	r0, r5
 8019b9a:	f7f9 fdb7 	bl	801370c <ucdr_serialize_int16_t>
 8019b9e:	4030      	ands	r0, r6
 8019ba0:	b2c0      	uxtb	r0, r0
 8019ba2:	bd70      	pop	{r4, r5, r6, pc}
 8019ba4:	3104      	adds	r1, #4
 8019ba6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019baa:	f7ff be7b 	b.w	80198a4 <uxr_serialize_CLIENT_Representation>
 8019bae:	3104      	adds	r1, #4
 8019bb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019bb4:	f7ff bf32 	b.w	8019a1c <uxr_serialize_AGENT_Representation>
 8019bb8:	2001      	movs	r0, #1
 8019bba:	bd70      	pop	{r4, r5, r6, pc}
 8019bbc:	68a2      	ldr	r2, [r4, #8]
 8019bbe:	f104 010c 	add.w	r1, r4, #12
 8019bc2:	4628      	mov	r0, r5
 8019bc4:	f7fd f8e0 	bl	8016d88 <ucdr_serialize_sequence_uint8_t>
 8019bc8:	4606      	mov	r6, r0
 8019bca:	e7c7      	b.n	8019b5c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8019bcc:	68a1      	ldr	r1, [r4, #8]
 8019bce:	4628      	mov	r0, r5
 8019bd0:	f006 fac4 	bl	802015c <ucdr_serialize_string>
 8019bd4:	4606      	mov	r6, r0
 8019bd6:	e7c1      	b.n	8019b5c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8019bd8:	68a2      	ldr	r2, [r4, #8]
 8019bda:	f104 010c 	add.w	r1, r4, #12
 8019bde:	4628      	mov	r0, r5
 8019be0:	f7fd f8d2 	bl	8016d88 <ucdr_serialize_sequence_uint8_t>
 8019be4:	4606      	mov	r6, r0
 8019be6:	e7d5      	b.n	8019b94 <uxr_serialize_ObjectVariant.part.0+0x94>

08019be8 <uxr_deserialize_DATAWRITER_Representation>:
 8019be8:	b570      	push	{r4, r5, r6, lr}
 8019bea:	4606      	mov	r6, r0
 8019bec:	460d      	mov	r5, r1
 8019bee:	f7f9 f867 	bl	8012cc0 <ucdr_deserialize_uint8_t>
 8019bf2:	4604      	mov	r4, r0
 8019bf4:	b130      	cbz	r0, 8019c04 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8019bf6:	782b      	ldrb	r3, [r5, #0]
 8019bf8:	2b02      	cmp	r3, #2
 8019bfa:	d00c      	beq.n	8019c16 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8019bfc:	2b03      	cmp	r3, #3
 8019bfe:	d012      	beq.n	8019c26 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8019c00:	2b01      	cmp	r3, #1
 8019c02:	d008      	beq.n	8019c16 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8019c04:	2202      	movs	r2, #2
 8019c06:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8019c0a:	4630      	mov	r0, r6
 8019c0c:	f006 fa3e 	bl	802008c <ucdr_deserialize_array_uint8_t>
 8019c10:	4020      	ands	r0, r4
 8019c12:	b2c0      	uxtb	r0, r0
 8019c14:	bd70      	pop	{r4, r5, r6, pc}
 8019c16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019c1a:	6869      	ldr	r1, [r5, #4]
 8019c1c:	4630      	mov	r0, r6
 8019c1e:	f006 faad 	bl	802017c <ucdr_deserialize_string>
 8019c22:	4604      	mov	r4, r0
 8019c24:	e7ee      	b.n	8019c04 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8019c26:	1d2b      	adds	r3, r5, #4
 8019c28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019c2c:	f105 0108 	add.w	r1, r5, #8
 8019c30:	4630      	mov	r0, r6
 8019c32:	f7fd f8bb 	bl	8016dac <ucdr_deserialize_sequence_uint8_t>
 8019c36:	4604      	mov	r4, r0
 8019c38:	e7e4      	b.n	8019c04 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8019c3a:	bf00      	nop

08019c3c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8019c3c:	b570      	push	{r4, r5, r6, lr}
 8019c3e:	460d      	mov	r5, r1
 8019c40:	7809      	ldrb	r1, [r1, #0]
 8019c42:	4606      	mov	r6, r0
 8019c44:	f7f8 fff8 	bl	8012c38 <ucdr_serialize_bool>
 8019c48:	782b      	ldrb	r3, [r5, #0]
 8019c4a:	4604      	mov	r4, r0
 8019c4c:	b94b      	cbnz	r3, 8019c62 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8019c4e:	7a29      	ldrb	r1, [r5, #8]
 8019c50:	4630      	mov	r0, r6
 8019c52:	f7f8 fff1 	bl	8012c38 <ucdr_serialize_bool>
 8019c56:	7a2b      	ldrb	r3, [r5, #8]
 8019c58:	4004      	ands	r4, r0
 8019c5a:	b2e4      	uxtb	r4, r4
 8019c5c:	b943      	cbnz	r3, 8019c70 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8019c5e:	4620      	mov	r0, r4
 8019c60:	bd70      	pop	{r4, r5, r6, pc}
 8019c62:	6869      	ldr	r1, [r5, #4]
 8019c64:	4630      	mov	r0, r6
 8019c66:	f006 fa79 	bl	802015c <ucdr_serialize_string>
 8019c6a:	4004      	ands	r4, r0
 8019c6c:	b2e4      	uxtb	r4, r4
 8019c6e:	e7ee      	b.n	8019c4e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8019c70:	68e9      	ldr	r1, [r5, #12]
 8019c72:	4630      	mov	r0, r6
 8019c74:	f006 fa72 	bl	802015c <ucdr_serialize_string>
 8019c78:	4004      	ands	r4, r0
 8019c7a:	4620      	mov	r0, r4
 8019c7c:	bd70      	pop	{r4, r5, r6, pc}
 8019c7e:	bf00      	nop

08019c80 <uxr_serialize_OBJK_Topic_Binary>:
 8019c80:	b570      	push	{r4, r5, r6, lr}
 8019c82:	460d      	mov	r5, r1
 8019c84:	4606      	mov	r6, r0
 8019c86:	6809      	ldr	r1, [r1, #0]
 8019c88:	f006 fa68 	bl	802015c <ucdr_serialize_string>
 8019c8c:	4604      	mov	r4, r0
 8019c8e:	7929      	ldrb	r1, [r5, #4]
 8019c90:	4630      	mov	r0, r6
 8019c92:	f7f8 ffd1 	bl	8012c38 <ucdr_serialize_bool>
 8019c96:	792b      	ldrb	r3, [r5, #4]
 8019c98:	4004      	ands	r4, r0
 8019c9a:	b2e4      	uxtb	r4, r4
 8019c9c:	b943      	cbnz	r3, 8019cb0 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8019c9e:	7b29      	ldrb	r1, [r5, #12]
 8019ca0:	4630      	mov	r0, r6
 8019ca2:	f7f8 ffc9 	bl	8012c38 <ucdr_serialize_bool>
 8019ca6:	7b2b      	ldrb	r3, [r5, #12]
 8019ca8:	4004      	ands	r4, r0
 8019caa:	b93b      	cbnz	r3, 8019cbc <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8019cac:	4620      	mov	r0, r4
 8019cae:	bd70      	pop	{r4, r5, r6, pc}
 8019cb0:	68a9      	ldr	r1, [r5, #8]
 8019cb2:	4630      	mov	r0, r6
 8019cb4:	f006 fa52 	bl	802015c <ucdr_serialize_string>
 8019cb8:	4004      	ands	r4, r0
 8019cba:	e7f0      	b.n	8019c9e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8019cbc:	6929      	ldr	r1, [r5, #16]
 8019cbe:	4630      	mov	r0, r6
 8019cc0:	f006 fa4c 	bl	802015c <ucdr_serialize_string>
 8019cc4:	4004      	ands	r4, r0
 8019cc6:	b2e4      	uxtb	r4, r4
 8019cc8:	4620      	mov	r0, r4
 8019cca:	bd70      	pop	{r4, r5, r6, pc}

08019ccc <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8019ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019cd0:	460c      	mov	r4, r1
 8019cd2:	7809      	ldrb	r1, [r1, #0]
 8019cd4:	4606      	mov	r6, r0
 8019cd6:	f7f8 ffaf 	bl	8012c38 <ucdr_serialize_bool>
 8019cda:	7823      	ldrb	r3, [r4, #0]
 8019cdc:	4605      	mov	r5, r0
 8019cde:	b96b      	cbnz	r3, 8019cfc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8019ce0:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8019ce4:	4630      	mov	r0, r6
 8019ce6:	f7f8 ffa7 	bl	8012c38 <ucdr_serialize_bool>
 8019cea:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8019cee:	4005      	ands	r5, r0
 8019cf0:	b2ed      	uxtb	r5, r5
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	d169      	bne.n	8019dca <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8019cf6:	4628      	mov	r0, r5
 8019cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019cfc:	6861      	ldr	r1, [r4, #4]
 8019cfe:	4630      	mov	r0, r6
 8019d00:	f7f9 f9de 	bl	80130c0 <ucdr_serialize_uint32_t>
 8019d04:	6863      	ldr	r3, [r4, #4]
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d06b      	beq.n	8019de2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8019d0a:	2800      	cmp	r0, #0
 8019d0c:	d067      	beq.n	8019dde <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019d0e:	68a1      	ldr	r1, [r4, #8]
 8019d10:	4630      	mov	r0, r6
 8019d12:	f006 fa23 	bl	802015c <ucdr_serialize_string>
 8019d16:	6863      	ldr	r3, [r4, #4]
 8019d18:	2b01      	cmp	r3, #1
 8019d1a:	d953      	bls.n	8019dc4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019d1c:	2800      	cmp	r0, #0
 8019d1e:	d05e      	beq.n	8019dde <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019d20:	68e1      	ldr	r1, [r4, #12]
 8019d22:	4630      	mov	r0, r6
 8019d24:	f006 fa1a 	bl	802015c <ucdr_serialize_string>
 8019d28:	6863      	ldr	r3, [r4, #4]
 8019d2a:	2b02      	cmp	r3, #2
 8019d2c:	d94a      	bls.n	8019dc4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019d2e:	2800      	cmp	r0, #0
 8019d30:	d055      	beq.n	8019dde <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019d32:	6921      	ldr	r1, [r4, #16]
 8019d34:	4630      	mov	r0, r6
 8019d36:	f006 fa11 	bl	802015c <ucdr_serialize_string>
 8019d3a:	6863      	ldr	r3, [r4, #4]
 8019d3c:	2b03      	cmp	r3, #3
 8019d3e:	d941      	bls.n	8019dc4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019d40:	2800      	cmp	r0, #0
 8019d42:	d04c      	beq.n	8019dde <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019d44:	6961      	ldr	r1, [r4, #20]
 8019d46:	4630      	mov	r0, r6
 8019d48:	f006 fa08 	bl	802015c <ucdr_serialize_string>
 8019d4c:	6863      	ldr	r3, [r4, #4]
 8019d4e:	2b04      	cmp	r3, #4
 8019d50:	d938      	bls.n	8019dc4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019d52:	2800      	cmp	r0, #0
 8019d54:	d043      	beq.n	8019dde <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019d56:	69a1      	ldr	r1, [r4, #24]
 8019d58:	4630      	mov	r0, r6
 8019d5a:	f006 f9ff 	bl	802015c <ucdr_serialize_string>
 8019d5e:	6863      	ldr	r3, [r4, #4]
 8019d60:	2b05      	cmp	r3, #5
 8019d62:	d92f      	bls.n	8019dc4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019d64:	2800      	cmp	r0, #0
 8019d66:	d03a      	beq.n	8019dde <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019d68:	69e1      	ldr	r1, [r4, #28]
 8019d6a:	4630      	mov	r0, r6
 8019d6c:	f006 f9f6 	bl	802015c <ucdr_serialize_string>
 8019d70:	6863      	ldr	r3, [r4, #4]
 8019d72:	2b06      	cmp	r3, #6
 8019d74:	d926      	bls.n	8019dc4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019d76:	b390      	cbz	r0, 8019dde <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019d78:	6a21      	ldr	r1, [r4, #32]
 8019d7a:	4630      	mov	r0, r6
 8019d7c:	f006 f9ee 	bl	802015c <ucdr_serialize_string>
 8019d80:	6863      	ldr	r3, [r4, #4]
 8019d82:	2b07      	cmp	r3, #7
 8019d84:	d91e      	bls.n	8019dc4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019d86:	b350      	cbz	r0, 8019dde <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019d88:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8019d8a:	4630      	mov	r0, r6
 8019d8c:	f006 f9e6 	bl	802015c <ucdr_serialize_string>
 8019d90:	6863      	ldr	r3, [r4, #4]
 8019d92:	2b08      	cmp	r3, #8
 8019d94:	d916      	bls.n	8019dc4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019d96:	b310      	cbz	r0, 8019dde <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019d98:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8019d9a:	4630      	mov	r0, r6
 8019d9c:	f006 f9de 	bl	802015c <ucdr_serialize_string>
 8019da0:	6863      	ldr	r3, [r4, #4]
 8019da2:	2b09      	cmp	r3, #9
 8019da4:	d90e      	bls.n	8019dc4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019da6:	b1d0      	cbz	r0, 8019dde <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019da8:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8019dac:	2709      	movs	r7, #9
 8019dae:	e000      	b.n	8019db2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8019db0:	b1a8      	cbz	r0, 8019dde <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019db2:	f858 1b04 	ldr.w	r1, [r8], #4
 8019db6:	4630      	mov	r0, r6
 8019db8:	f006 f9d0 	bl	802015c <ucdr_serialize_string>
 8019dbc:	3701      	adds	r7, #1
 8019dbe:	6862      	ldr	r2, [r4, #4]
 8019dc0:	4297      	cmp	r7, r2
 8019dc2:	d3f5      	bcc.n	8019db0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8019dc4:	4005      	ands	r5, r0
 8019dc6:	b2ed      	uxtb	r5, r5
 8019dc8:	e78a      	b.n	8019ce0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8019dca:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019dcc:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8019dd0:	4630      	mov	r0, r6
 8019dd2:	f7fc ffd9 	bl	8016d88 <ucdr_serialize_sequence_uint8_t>
 8019dd6:	4005      	ands	r5, r0
 8019dd8:	4628      	mov	r0, r5
 8019dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019dde:	2500      	movs	r5, #0
 8019de0:	e77e      	b.n	8019ce0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8019de2:	4028      	ands	r0, r5
 8019de4:	b2c5      	uxtb	r5, r0
 8019de6:	e77b      	b.n	8019ce0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08019de8 <uxr_serialize_OBJK_Publisher_Binary>:
 8019de8:	b570      	push	{r4, r5, r6, lr}
 8019dea:	460d      	mov	r5, r1
 8019dec:	7809      	ldrb	r1, [r1, #0]
 8019dee:	4606      	mov	r6, r0
 8019df0:	f7f8 ff22 	bl	8012c38 <ucdr_serialize_bool>
 8019df4:	782b      	ldrb	r3, [r5, #0]
 8019df6:	4604      	mov	r4, r0
 8019df8:	b94b      	cbnz	r3, 8019e0e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8019dfa:	7a29      	ldrb	r1, [r5, #8]
 8019dfc:	4630      	mov	r0, r6
 8019dfe:	f7f8 ff1b 	bl	8012c38 <ucdr_serialize_bool>
 8019e02:	7a2b      	ldrb	r3, [r5, #8]
 8019e04:	4004      	ands	r4, r0
 8019e06:	b2e4      	uxtb	r4, r4
 8019e08:	b943      	cbnz	r3, 8019e1c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8019e0a:	4620      	mov	r0, r4
 8019e0c:	bd70      	pop	{r4, r5, r6, pc}
 8019e0e:	6869      	ldr	r1, [r5, #4]
 8019e10:	4630      	mov	r0, r6
 8019e12:	f006 f9a3 	bl	802015c <ucdr_serialize_string>
 8019e16:	4004      	ands	r4, r0
 8019e18:	b2e4      	uxtb	r4, r4
 8019e1a:	e7ee      	b.n	8019dfa <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8019e1c:	f105 010c 	add.w	r1, r5, #12
 8019e20:	4630      	mov	r0, r6
 8019e22:	f7ff ff53 	bl	8019ccc <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8019e26:	4004      	ands	r4, r0
 8019e28:	4620      	mov	r0, r4
 8019e2a:	bd70      	pop	{r4, r5, r6, pc}

08019e2c <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8019e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e30:	460c      	mov	r4, r1
 8019e32:	7809      	ldrb	r1, [r1, #0]
 8019e34:	4606      	mov	r6, r0
 8019e36:	f7f8 feff 	bl	8012c38 <ucdr_serialize_bool>
 8019e3a:	7823      	ldrb	r3, [r4, #0]
 8019e3c:	4605      	mov	r5, r0
 8019e3e:	b96b      	cbnz	r3, 8019e5c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8019e40:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8019e44:	4630      	mov	r0, r6
 8019e46:	f7f8 fef7 	bl	8012c38 <ucdr_serialize_bool>
 8019e4a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8019e4e:	4005      	ands	r5, r0
 8019e50:	b2ed      	uxtb	r5, r5
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	d169      	bne.n	8019f2a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8019e56:	4628      	mov	r0, r5
 8019e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e5c:	6861      	ldr	r1, [r4, #4]
 8019e5e:	4630      	mov	r0, r6
 8019e60:	f7f9 f92e 	bl	80130c0 <ucdr_serialize_uint32_t>
 8019e64:	6863      	ldr	r3, [r4, #4]
 8019e66:	2b00      	cmp	r3, #0
 8019e68:	d06b      	beq.n	8019f42 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8019e6a:	2800      	cmp	r0, #0
 8019e6c:	d067      	beq.n	8019f3e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019e6e:	68a1      	ldr	r1, [r4, #8]
 8019e70:	4630      	mov	r0, r6
 8019e72:	f006 f973 	bl	802015c <ucdr_serialize_string>
 8019e76:	6863      	ldr	r3, [r4, #4]
 8019e78:	2b01      	cmp	r3, #1
 8019e7a:	d953      	bls.n	8019f24 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019e7c:	2800      	cmp	r0, #0
 8019e7e:	d05e      	beq.n	8019f3e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019e80:	68e1      	ldr	r1, [r4, #12]
 8019e82:	4630      	mov	r0, r6
 8019e84:	f006 f96a 	bl	802015c <ucdr_serialize_string>
 8019e88:	6863      	ldr	r3, [r4, #4]
 8019e8a:	2b02      	cmp	r3, #2
 8019e8c:	d94a      	bls.n	8019f24 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019e8e:	2800      	cmp	r0, #0
 8019e90:	d055      	beq.n	8019f3e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019e92:	6921      	ldr	r1, [r4, #16]
 8019e94:	4630      	mov	r0, r6
 8019e96:	f006 f961 	bl	802015c <ucdr_serialize_string>
 8019e9a:	6863      	ldr	r3, [r4, #4]
 8019e9c:	2b03      	cmp	r3, #3
 8019e9e:	d941      	bls.n	8019f24 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019ea0:	2800      	cmp	r0, #0
 8019ea2:	d04c      	beq.n	8019f3e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019ea4:	6961      	ldr	r1, [r4, #20]
 8019ea6:	4630      	mov	r0, r6
 8019ea8:	f006 f958 	bl	802015c <ucdr_serialize_string>
 8019eac:	6863      	ldr	r3, [r4, #4]
 8019eae:	2b04      	cmp	r3, #4
 8019eb0:	d938      	bls.n	8019f24 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019eb2:	2800      	cmp	r0, #0
 8019eb4:	d043      	beq.n	8019f3e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019eb6:	69a1      	ldr	r1, [r4, #24]
 8019eb8:	4630      	mov	r0, r6
 8019eba:	f006 f94f 	bl	802015c <ucdr_serialize_string>
 8019ebe:	6863      	ldr	r3, [r4, #4]
 8019ec0:	2b05      	cmp	r3, #5
 8019ec2:	d92f      	bls.n	8019f24 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019ec4:	2800      	cmp	r0, #0
 8019ec6:	d03a      	beq.n	8019f3e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019ec8:	69e1      	ldr	r1, [r4, #28]
 8019eca:	4630      	mov	r0, r6
 8019ecc:	f006 f946 	bl	802015c <ucdr_serialize_string>
 8019ed0:	6863      	ldr	r3, [r4, #4]
 8019ed2:	2b06      	cmp	r3, #6
 8019ed4:	d926      	bls.n	8019f24 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019ed6:	b390      	cbz	r0, 8019f3e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019ed8:	6a21      	ldr	r1, [r4, #32]
 8019eda:	4630      	mov	r0, r6
 8019edc:	f006 f93e 	bl	802015c <ucdr_serialize_string>
 8019ee0:	6863      	ldr	r3, [r4, #4]
 8019ee2:	2b07      	cmp	r3, #7
 8019ee4:	d91e      	bls.n	8019f24 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019ee6:	b350      	cbz	r0, 8019f3e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019ee8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8019eea:	4630      	mov	r0, r6
 8019eec:	f006 f936 	bl	802015c <ucdr_serialize_string>
 8019ef0:	6863      	ldr	r3, [r4, #4]
 8019ef2:	2b08      	cmp	r3, #8
 8019ef4:	d916      	bls.n	8019f24 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019ef6:	b310      	cbz	r0, 8019f3e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019ef8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8019efa:	4630      	mov	r0, r6
 8019efc:	f006 f92e 	bl	802015c <ucdr_serialize_string>
 8019f00:	6863      	ldr	r3, [r4, #4]
 8019f02:	2b09      	cmp	r3, #9
 8019f04:	d90e      	bls.n	8019f24 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019f06:	b1d0      	cbz	r0, 8019f3e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019f08:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8019f0c:	2709      	movs	r7, #9
 8019f0e:	e000      	b.n	8019f12 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8019f10:	b1a8      	cbz	r0, 8019f3e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019f12:	f858 1b04 	ldr.w	r1, [r8], #4
 8019f16:	4630      	mov	r0, r6
 8019f18:	f006 f920 	bl	802015c <ucdr_serialize_string>
 8019f1c:	3701      	adds	r7, #1
 8019f1e:	6862      	ldr	r2, [r4, #4]
 8019f20:	4297      	cmp	r7, r2
 8019f22:	d3f5      	bcc.n	8019f10 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8019f24:	4005      	ands	r5, r0
 8019f26:	b2ed      	uxtb	r5, r5
 8019f28:	e78a      	b.n	8019e40 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8019f2a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019f2c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8019f30:	4630      	mov	r0, r6
 8019f32:	f7fc ff29 	bl	8016d88 <ucdr_serialize_sequence_uint8_t>
 8019f36:	4005      	ands	r5, r0
 8019f38:	4628      	mov	r0, r5
 8019f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f3e:	2500      	movs	r5, #0
 8019f40:	e77e      	b.n	8019e40 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8019f42:	4028      	ands	r0, r5
 8019f44:	b2c5      	uxtb	r5, r0
 8019f46:	e77b      	b.n	8019e40 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08019f48 <uxr_serialize_OBJK_Subscriber_Binary>:
 8019f48:	b570      	push	{r4, r5, r6, lr}
 8019f4a:	460d      	mov	r5, r1
 8019f4c:	7809      	ldrb	r1, [r1, #0]
 8019f4e:	4606      	mov	r6, r0
 8019f50:	f7f8 fe72 	bl	8012c38 <ucdr_serialize_bool>
 8019f54:	782b      	ldrb	r3, [r5, #0]
 8019f56:	4604      	mov	r4, r0
 8019f58:	b94b      	cbnz	r3, 8019f6e <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8019f5a:	7a29      	ldrb	r1, [r5, #8]
 8019f5c:	4630      	mov	r0, r6
 8019f5e:	f7f8 fe6b 	bl	8012c38 <ucdr_serialize_bool>
 8019f62:	7a2b      	ldrb	r3, [r5, #8]
 8019f64:	4004      	ands	r4, r0
 8019f66:	b2e4      	uxtb	r4, r4
 8019f68:	b943      	cbnz	r3, 8019f7c <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8019f6a:	4620      	mov	r0, r4
 8019f6c:	bd70      	pop	{r4, r5, r6, pc}
 8019f6e:	6869      	ldr	r1, [r5, #4]
 8019f70:	4630      	mov	r0, r6
 8019f72:	f006 f8f3 	bl	802015c <ucdr_serialize_string>
 8019f76:	4004      	ands	r4, r0
 8019f78:	b2e4      	uxtb	r4, r4
 8019f7a:	e7ee      	b.n	8019f5a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8019f7c:	f105 010c 	add.w	r1, r5, #12
 8019f80:	4630      	mov	r0, r6
 8019f82:	f7ff ff53 	bl	8019e2c <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8019f86:	4004      	ands	r4, r0
 8019f88:	4620      	mov	r0, r4
 8019f8a:	bd70      	pop	{r4, r5, r6, pc}

08019f8c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8019f8c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8019f90:	4688      	mov	r8, r1
 8019f92:	4681      	mov	r9, r0
 8019f94:	8809      	ldrh	r1, [r1, #0]
 8019f96:	f7f8 fea9 	bl	8012cec <ucdr_serialize_uint16_t>
 8019f9a:	4606      	mov	r6, r0
 8019f9c:	f898 1002 	ldrb.w	r1, [r8, #2]
 8019fa0:	4648      	mov	r0, r9
 8019fa2:	f7f8 fe49 	bl	8012c38 <ucdr_serialize_bool>
 8019fa6:	f898 3002 	ldrb.w	r3, [r8, #2]
 8019faa:	4006      	ands	r6, r0
 8019fac:	b2f5      	uxtb	r5, r6
 8019fae:	b9eb      	cbnz	r3, 8019fec <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8019fb0:	f898 1006 	ldrb.w	r1, [r8, #6]
 8019fb4:	4648      	mov	r0, r9
 8019fb6:	f7f8 fe3f 	bl	8012c38 <ucdr_serialize_bool>
 8019fba:	f898 3006 	ldrb.w	r3, [r8, #6]
 8019fbe:	4005      	ands	r5, r0
 8019fc0:	bb7b      	cbnz	r3, 801a022 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8019fc2:	f898 100c 	ldrb.w	r1, [r8, #12]
 8019fc6:	4648      	mov	r0, r9
 8019fc8:	f7f8 fe36 	bl	8012c38 <ucdr_serialize_bool>
 8019fcc:	f898 300c 	ldrb.w	r3, [r8, #12]
 8019fd0:	4005      	ands	r5, r0
 8019fd2:	b9f3      	cbnz	r3, 801a012 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8019fd4:	f898 1014 	ldrb.w	r1, [r8, #20]
 8019fd8:	4648      	mov	r0, r9
 8019fda:	f7f8 fe2d 	bl	8012c38 <ucdr_serialize_bool>
 8019fde:	f898 3014 	ldrb.w	r3, [r8, #20]
 8019fe2:	4005      	ands	r5, r0
 8019fe4:	b94b      	cbnz	r3, 8019ffa <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8019fe6:	4628      	mov	r0, r5
 8019fe8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8019fec:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8019ff0:	4648      	mov	r0, r9
 8019ff2:	f7f8 fe7b 	bl	8012cec <ucdr_serialize_uint16_t>
 8019ff6:	4005      	ands	r5, r0
 8019ff8:	e7da      	b.n	8019fb0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8019ffa:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8019ffe:	f108 011c 	add.w	r1, r8, #28
 801a002:	4648      	mov	r0, r9
 801a004:	f7fc fec0 	bl	8016d88 <ucdr_serialize_sequence_uint8_t>
 801a008:	4028      	ands	r0, r5
 801a00a:	b2c5      	uxtb	r5, r0
 801a00c:	4628      	mov	r0, r5
 801a00e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801a012:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801a016:	4648      	mov	r0, r9
 801a018:	f7f9 f852 	bl	80130c0 <ucdr_serialize_uint32_t>
 801a01c:	4028      	ands	r0, r5
 801a01e:	b2c5      	uxtb	r5, r0
 801a020:	e7d8      	b.n	8019fd4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801a022:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801a026:	4648      	mov	r0, r9
 801a028:	f7f9 f84a 	bl	80130c0 <ucdr_serialize_uint32_t>
 801a02c:	4028      	ands	r0, r5
 801a02e:	b2c5      	uxtb	r5, r0
 801a030:	e7c7      	b.n	8019fc2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801a032:	bf00      	nop

0801a034 <uxr_serialize_OBJK_DataReader_Binary>:
 801a034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a036:	2202      	movs	r2, #2
 801a038:	460c      	mov	r4, r1
 801a03a:	4606      	mov	r6, r0
 801a03c:	f005 ffc2 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 801a040:	4605      	mov	r5, r0
 801a042:	78a1      	ldrb	r1, [r4, #2]
 801a044:	4630      	mov	r0, r6
 801a046:	f7f8 fdf7 	bl	8012c38 <ucdr_serialize_bool>
 801a04a:	78a3      	ldrb	r3, [r4, #2]
 801a04c:	4005      	ands	r5, r0
 801a04e:	b2ed      	uxtb	r5, r5
 801a050:	b90b      	cbnz	r3, 801a056 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801a052:	4628      	mov	r0, r5
 801a054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a056:	f104 0108 	add.w	r1, r4, #8
 801a05a:	4630      	mov	r0, r6
 801a05c:	f7ff ff96 	bl	8019f8c <uxr_serialize_OBJK_Endpoint_QosBinary>
 801a060:	4607      	mov	r7, r0
 801a062:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801a066:	4630      	mov	r0, r6
 801a068:	f7f8 fde6 	bl	8012c38 <ucdr_serialize_bool>
 801a06c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801a070:	4038      	ands	r0, r7
 801a072:	b2c7      	uxtb	r7, r0
 801a074:	b95b      	cbnz	r3, 801a08e <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801a076:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801a07a:	4630      	mov	r0, r6
 801a07c:	f7f8 fddc 	bl	8012c38 <ucdr_serialize_bool>
 801a080:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801a084:	4007      	ands	r7, r0
 801a086:	b94b      	cbnz	r3, 801a09c <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801a088:	403d      	ands	r5, r7
 801a08a:	4628      	mov	r0, r5
 801a08c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a08e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 801a092:	4630      	mov	r0, r6
 801a094:	f7f9 fa6a 	bl	801356c <ucdr_serialize_uint64_t>
 801a098:	4007      	ands	r7, r0
 801a09a:	e7ec      	b.n	801a076 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801a09c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801a09e:	4630      	mov	r0, r6
 801a0a0:	f006 f85c 	bl	802015c <ucdr_serialize_string>
 801a0a4:	4007      	ands	r7, r0
 801a0a6:	b2ff      	uxtb	r7, r7
 801a0a8:	e7ee      	b.n	801a088 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801a0aa:	bf00      	nop

0801a0ac <uxr_serialize_OBJK_DataWriter_Binary>:
 801a0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0ae:	2202      	movs	r2, #2
 801a0b0:	460d      	mov	r5, r1
 801a0b2:	4606      	mov	r6, r0
 801a0b4:	f005 ff86 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 801a0b8:	4604      	mov	r4, r0
 801a0ba:	78a9      	ldrb	r1, [r5, #2]
 801a0bc:	4630      	mov	r0, r6
 801a0be:	f7f8 fdbb 	bl	8012c38 <ucdr_serialize_bool>
 801a0c2:	78ab      	ldrb	r3, [r5, #2]
 801a0c4:	4004      	ands	r4, r0
 801a0c6:	b2e4      	uxtb	r4, r4
 801a0c8:	b90b      	cbnz	r3, 801a0ce <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801a0ca:	4620      	mov	r0, r4
 801a0cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a0ce:	f105 0108 	add.w	r1, r5, #8
 801a0d2:	4630      	mov	r0, r6
 801a0d4:	f7ff ff5a 	bl	8019f8c <uxr_serialize_OBJK_Endpoint_QosBinary>
 801a0d8:	4607      	mov	r7, r0
 801a0da:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801a0de:	4630      	mov	r0, r6
 801a0e0:	f7f8 fdaa 	bl	8012c38 <ucdr_serialize_bool>
 801a0e4:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801a0e8:	4038      	ands	r0, r7
 801a0ea:	b2c7      	uxtb	r7, r0
 801a0ec:	b913      	cbnz	r3, 801a0f4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801a0ee:	403c      	ands	r4, r7
 801a0f0:	4620      	mov	r0, r4
 801a0f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a0f4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 801a0f8:	4630      	mov	r0, r6
 801a0fa:	f7f9 fa37 	bl	801356c <ucdr_serialize_uint64_t>
 801a0fe:	4007      	ands	r7, r0
 801a100:	e7f5      	b.n	801a0ee <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801a102:	bf00      	nop

0801a104 <uxr_serialize_OBJK_Replier_Binary>:
 801a104:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 801a108:	460f      	mov	r7, r1
 801a10a:	4680      	mov	r8, r0
 801a10c:	6809      	ldr	r1, [r1, #0]
 801a10e:	f006 f825 	bl	802015c <ucdr_serialize_string>
 801a112:	4605      	mov	r5, r0
 801a114:	6879      	ldr	r1, [r7, #4]
 801a116:	4640      	mov	r0, r8
 801a118:	f006 f820 	bl	802015c <ucdr_serialize_string>
 801a11c:	4005      	ands	r5, r0
 801a11e:	68b9      	ldr	r1, [r7, #8]
 801a120:	4640      	mov	r0, r8
 801a122:	b2ec      	uxtb	r4, r5
 801a124:	f006 f81a 	bl	802015c <ucdr_serialize_string>
 801a128:	7b39      	ldrb	r1, [r7, #12]
 801a12a:	4004      	ands	r4, r0
 801a12c:	4640      	mov	r0, r8
 801a12e:	f7f8 fd83 	bl	8012c38 <ucdr_serialize_bool>
 801a132:	7b3b      	ldrb	r3, [r7, #12]
 801a134:	4004      	ands	r4, r0
 801a136:	b94b      	cbnz	r3, 801a14c <uxr_serialize_OBJK_Replier_Binary+0x48>
 801a138:	7d39      	ldrb	r1, [r7, #20]
 801a13a:	4640      	mov	r0, r8
 801a13c:	f7f8 fd7c 	bl	8012c38 <ucdr_serialize_bool>
 801a140:	7d3b      	ldrb	r3, [r7, #20]
 801a142:	4004      	ands	r4, r0
 801a144:	b943      	cbnz	r3, 801a158 <uxr_serialize_OBJK_Replier_Binary+0x54>
 801a146:	4620      	mov	r0, r4
 801a148:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801a14c:	6939      	ldr	r1, [r7, #16]
 801a14e:	4640      	mov	r0, r8
 801a150:	f006 f804 	bl	802015c <ucdr_serialize_string>
 801a154:	4004      	ands	r4, r0
 801a156:	e7ef      	b.n	801a138 <uxr_serialize_OBJK_Replier_Binary+0x34>
 801a158:	69b9      	ldr	r1, [r7, #24]
 801a15a:	4640      	mov	r0, r8
 801a15c:	f005 fffe 	bl	802015c <ucdr_serialize_string>
 801a160:	4004      	ands	r4, r0
 801a162:	b2e4      	uxtb	r4, r4
 801a164:	4620      	mov	r0, r4
 801a166:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801a16a:	bf00      	nop

0801a16c <uxr_deserialize_ObjectVariant>:
 801a16c:	b570      	push	{r4, r5, r6, lr}
 801a16e:	4605      	mov	r5, r0
 801a170:	460e      	mov	r6, r1
 801a172:	f7f8 fda5 	bl	8012cc0 <ucdr_deserialize_uint8_t>
 801a176:	b168      	cbz	r0, 801a194 <uxr_deserialize_ObjectVariant+0x28>
 801a178:	7833      	ldrb	r3, [r6, #0]
 801a17a:	4604      	mov	r4, r0
 801a17c:	3b01      	subs	r3, #1
 801a17e:	2b0d      	cmp	r3, #13
 801a180:	d809      	bhi.n	801a196 <uxr_deserialize_ObjectVariant+0x2a>
 801a182:	e8df f003 	tbb	[pc, r3]
 801a186:	0a41      	.short	0x0a41
 801a188:	0a0a2323 	.word	0x0a0a2323
 801a18c:	10080a0a 	.word	0x10080a0a
 801a190:	565c1010 	.word	0x565c1010
 801a194:	2400      	movs	r4, #0
 801a196:	4620      	mov	r0, r4
 801a198:	bd70      	pop	{r4, r5, r6, pc}
 801a19a:	1d31      	adds	r1, r6, #4
 801a19c:	4628      	mov	r0, r5
 801a19e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a1a2:	f7ff bd21 	b.w	8019be8 <uxr_deserialize_DATAWRITER_Representation>
 801a1a6:	1d31      	adds	r1, r6, #4
 801a1a8:	4628      	mov	r0, r5
 801a1aa:	f7f8 fd89 	bl	8012cc0 <ucdr_deserialize_uint8_t>
 801a1ae:	2800      	cmp	r0, #0
 801a1b0:	d0f0      	beq.n	801a194 <uxr_deserialize_ObjectVariant+0x28>
 801a1b2:	7933      	ldrb	r3, [r6, #4]
 801a1b4:	2b01      	cmp	r3, #1
 801a1b6:	d001      	beq.n	801a1bc <uxr_deserialize_ObjectVariant+0x50>
 801a1b8:	2b02      	cmp	r3, #2
 801a1ba:	d1ec      	bne.n	801a196 <uxr_deserialize_ObjectVariant+0x2a>
 801a1bc:	68b1      	ldr	r1, [r6, #8]
 801a1be:	4628      	mov	r0, r5
 801a1c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a1c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a1c8:	f005 bfd8 	b.w	802017c <ucdr_deserialize_string>
 801a1cc:	1d31      	adds	r1, r6, #4
 801a1ce:	4628      	mov	r0, r5
 801a1d0:	f7f8 fd76 	bl	8012cc0 <ucdr_deserialize_uint8_t>
 801a1d4:	4604      	mov	r4, r0
 801a1d6:	b170      	cbz	r0, 801a1f6 <uxr_deserialize_ObjectVariant+0x8a>
 801a1d8:	7933      	ldrb	r3, [r6, #4]
 801a1da:	2b02      	cmp	r3, #2
 801a1dc:	d04c      	beq.n	801a278 <uxr_deserialize_ObjectVariant+0x10c>
 801a1de:	2b03      	cmp	r3, #3
 801a1e0:	d109      	bne.n	801a1f6 <uxr_deserialize_ObjectVariant+0x8a>
 801a1e2:	f106 0308 	add.w	r3, r6, #8
 801a1e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a1ea:	f106 010c 	add.w	r1, r6, #12
 801a1ee:	4628      	mov	r0, r5
 801a1f0:	f7fc fddc 	bl	8016dac <ucdr_deserialize_sequence_uint8_t>
 801a1f4:	4604      	mov	r4, r0
 801a1f6:	2202      	movs	r2, #2
 801a1f8:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801a1fc:	4628      	mov	r0, r5
 801a1fe:	f005 ff45 	bl	802008c <ucdr_deserialize_array_uint8_t>
 801a202:	4020      	ands	r0, r4
 801a204:	b2c4      	uxtb	r4, r0
 801a206:	e7c6      	b.n	801a196 <uxr_deserialize_ObjectVariant+0x2a>
 801a208:	1d31      	adds	r1, r6, #4
 801a20a:	4628      	mov	r0, r5
 801a20c:	f7f8 fd58 	bl	8012cc0 <ucdr_deserialize_uint8_t>
 801a210:	4604      	mov	r4, r0
 801a212:	b130      	cbz	r0, 801a222 <uxr_deserialize_ObjectVariant+0xb6>
 801a214:	7933      	ldrb	r3, [r6, #4]
 801a216:	2b02      	cmp	r3, #2
 801a218:	d036      	beq.n	801a288 <uxr_deserialize_ObjectVariant+0x11c>
 801a21a:	2b03      	cmp	r3, #3
 801a21c:	d03c      	beq.n	801a298 <uxr_deserialize_ObjectVariant+0x12c>
 801a21e:	2b01      	cmp	r3, #1
 801a220:	d032      	beq.n	801a288 <uxr_deserialize_ObjectVariant+0x11c>
 801a222:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801a226:	4628      	mov	r0, r5
 801a228:	f7f9 faf0 	bl	801380c <ucdr_deserialize_int16_t>
 801a22c:	4020      	ands	r0, r4
 801a22e:	b2c4      	uxtb	r4, r0
 801a230:	e7b1      	b.n	801a196 <uxr_deserialize_ObjectVariant+0x2a>
 801a232:	1d31      	adds	r1, r6, #4
 801a234:	4628      	mov	r0, r5
 801a236:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a23a:	f7ff bb8b 	b.w	8019954 <uxr_deserialize_CLIENT_Representation>
 801a23e:	2204      	movs	r2, #4
 801a240:	4628      	mov	r0, r5
 801a242:	18b1      	adds	r1, r6, r2
 801a244:	f005 ff22 	bl	802008c <ucdr_deserialize_array_uint8_t>
 801a248:	4604      	mov	r4, r0
 801a24a:	2202      	movs	r2, #2
 801a24c:	f106 0108 	add.w	r1, r6, #8
 801a250:	4628      	mov	r0, r5
 801a252:	f005 ff1b 	bl	802008c <ucdr_deserialize_array_uint8_t>
 801a256:	4004      	ands	r4, r0
 801a258:	2202      	movs	r2, #2
 801a25a:	f106 010a 	add.w	r1, r6, #10
 801a25e:	4628      	mov	r0, r5
 801a260:	b2e4      	uxtb	r4, r4
 801a262:	f005 ff13 	bl	802008c <ucdr_deserialize_array_uint8_t>
 801a266:	4603      	mov	r3, r0
 801a268:	f106 010c 	add.w	r1, r6, #12
 801a26c:	4628      	mov	r0, r5
 801a26e:	401c      	ands	r4, r3
 801a270:	f7f8 fcf8 	bl	8012c64 <ucdr_deserialize_bool>
 801a274:	4004      	ands	r4, r0
 801a276:	e78e      	b.n	801a196 <uxr_deserialize_ObjectVariant+0x2a>
 801a278:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a27c:	68b1      	ldr	r1, [r6, #8]
 801a27e:	4628      	mov	r0, r5
 801a280:	f005 ff7c 	bl	802017c <ucdr_deserialize_string>
 801a284:	4604      	mov	r4, r0
 801a286:	e7b6      	b.n	801a1f6 <uxr_deserialize_ObjectVariant+0x8a>
 801a288:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a28c:	68b1      	ldr	r1, [r6, #8]
 801a28e:	4628      	mov	r0, r5
 801a290:	f005 ff74 	bl	802017c <ucdr_deserialize_string>
 801a294:	4604      	mov	r4, r0
 801a296:	e7c4      	b.n	801a222 <uxr_deserialize_ObjectVariant+0xb6>
 801a298:	f106 0308 	add.w	r3, r6, #8
 801a29c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a2a0:	f106 010c 	add.w	r1, r6, #12
 801a2a4:	4628      	mov	r0, r5
 801a2a6:	f7fc fd81 	bl	8016dac <ucdr_deserialize_sequence_uint8_t>
 801a2aa:	4604      	mov	r4, r0
 801a2ac:	e7b9      	b.n	801a222 <uxr_deserialize_ObjectVariant+0xb6>
 801a2ae:	bf00      	nop

0801a2b0 <uxr_deserialize_BaseObjectRequest>:
 801a2b0:	b570      	push	{r4, r5, r6, lr}
 801a2b2:	2202      	movs	r2, #2
 801a2b4:	4605      	mov	r5, r0
 801a2b6:	460e      	mov	r6, r1
 801a2b8:	f005 fee8 	bl	802008c <ucdr_deserialize_array_uint8_t>
 801a2bc:	2202      	movs	r2, #2
 801a2be:	4604      	mov	r4, r0
 801a2c0:	4628      	mov	r0, r5
 801a2c2:	18b1      	adds	r1, r6, r2
 801a2c4:	f005 fee2 	bl	802008c <ucdr_deserialize_array_uint8_t>
 801a2c8:	4020      	ands	r0, r4
 801a2ca:	b2c0      	uxtb	r0, r0
 801a2cc:	bd70      	pop	{r4, r5, r6, pc}
 801a2ce:	bf00      	nop

0801a2d0 <uxr_serialize_ActivityInfoVariant>:
 801a2d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a2d4:	460e      	mov	r6, r1
 801a2d6:	7809      	ldrb	r1, [r1, #0]
 801a2d8:	4680      	mov	r8, r0
 801a2da:	f7f8 fcdb 	bl	8012c94 <ucdr_serialize_uint8_t>
 801a2de:	4607      	mov	r7, r0
 801a2e0:	b138      	cbz	r0, 801a2f2 <uxr_serialize_ActivityInfoVariant+0x22>
 801a2e2:	7833      	ldrb	r3, [r6, #0]
 801a2e4:	2b06      	cmp	r3, #6
 801a2e6:	f000 8081 	beq.w	801a3ec <uxr_serialize_ActivityInfoVariant+0x11c>
 801a2ea:	2b0d      	cmp	r3, #13
 801a2ec:	d014      	beq.n	801a318 <uxr_serialize_ActivityInfoVariant+0x48>
 801a2ee:	2b05      	cmp	r3, #5
 801a2f0:	d002      	beq.n	801a2f8 <uxr_serialize_ActivityInfoVariant+0x28>
 801a2f2:	4638      	mov	r0, r7
 801a2f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2f8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801a2fc:	4640      	mov	r0, r8
 801a2fe:	f7f9 fa05 	bl	801370c <ucdr_serialize_int16_t>
 801a302:	4607      	mov	r7, r0
 801a304:	4640      	mov	r0, r8
 801a306:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801a30a:	f7f9 f92f 	bl	801356c <ucdr_serialize_uint64_t>
 801a30e:	4038      	ands	r0, r7
 801a310:	b2c7      	uxtb	r7, r0
 801a312:	4638      	mov	r0, r7
 801a314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a318:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801a31c:	4640      	mov	r0, r8
 801a31e:	f7f9 f9f5 	bl	801370c <ucdr_serialize_int16_t>
 801a322:	68f1      	ldr	r1, [r6, #12]
 801a324:	4607      	mov	r7, r0
 801a326:	4640      	mov	r0, r8
 801a328:	f7f8 feca 	bl	80130c0 <ucdr_serialize_uint32_t>
 801a32c:	68f3      	ldr	r3, [r6, #12]
 801a32e:	2b00      	cmp	r3, #0
 801a330:	d0ed      	beq.n	801a30e <uxr_serialize_ActivityInfoVariant+0x3e>
 801a332:	b318      	cbz	r0, 801a37c <uxr_serialize_ActivityInfoVariant+0xac>
 801a334:	f106 090c 	add.w	r9, r6, #12
 801a338:	2400      	movs	r4, #0
 801a33a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801a33e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801a342:	7c29      	ldrb	r1, [r5, #16]
 801a344:	4640      	mov	r0, r8
 801a346:	f7f8 fca5 	bl	8012c94 <ucdr_serialize_uint8_t>
 801a34a:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801a34e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801a352:	2800      	cmp	r0, #0
 801a354:	d051      	beq.n	801a3fa <uxr_serialize_ActivityInfoVariant+0x12a>
 801a356:	7c2b      	ldrb	r3, [r5, #16]
 801a358:	00c9      	lsls	r1, r1, #3
 801a35a:	2b03      	cmp	r3, #3
 801a35c:	d854      	bhi.n	801a408 <uxr_serialize_ActivityInfoVariant+0x138>
 801a35e:	e8df f003 	tbb	[pc, r3]
 801a362:	2133      	.short	0x2133
 801a364:	020f      	.short	0x020f
 801a366:	4449      	add	r1, r9
 801a368:	4640      	mov	r0, r8
 801a36a:	6889      	ldr	r1, [r1, #8]
 801a36c:	f005 fef6 	bl	802015c <ucdr_serialize_string>
 801a370:	3401      	adds	r4, #1
 801a372:	68f2      	ldr	r2, [r6, #12]
 801a374:	4294      	cmp	r4, r2
 801a376:	d244      	bcs.n	801a402 <uxr_serialize_ActivityInfoVariant+0x132>
 801a378:	2800      	cmp	r0, #0
 801a37a:	d1de      	bne.n	801a33a <uxr_serialize_ActivityInfoVariant+0x6a>
 801a37c:	2700      	movs	r7, #0
 801a37e:	e7b8      	b.n	801a2f2 <uxr_serialize_ActivityInfoVariant+0x22>
 801a380:	3108      	adds	r1, #8
 801a382:	44a2      	add	sl, r4
 801a384:	2210      	movs	r2, #16
 801a386:	4640      	mov	r0, r8
 801a388:	4449      	add	r1, r9
 801a38a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801a38e:	f005 fe19 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 801a392:	4605      	mov	r5, r0
 801a394:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 801a398:	4640      	mov	r0, r8
 801a39a:	f7f8 fe91 	bl	80130c0 <ucdr_serialize_uint32_t>
 801a39e:	4028      	ands	r0, r5
 801a3a0:	b2c0      	uxtb	r0, r0
 801a3a2:	e7e5      	b.n	801a370 <uxr_serialize_ActivityInfoVariant+0xa0>
 801a3a4:	3108      	adds	r1, #8
 801a3a6:	44a2      	add	sl, r4
 801a3a8:	2204      	movs	r2, #4
 801a3aa:	4640      	mov	r0, r8
 801a3ac:	4449      	add	r1, r9
 801a3ae:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801a3b2:	f005 fe07 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 801a3b6:	4605      	mov	r5, r0
 801a3b8:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 801a3bc:	4640      	mov	r0, r8
 801a3be:	f7f8 fc95 	bl	8012cec <ucdr_serialize_uint16_t>
 801a3c2:	4028      	ands	r0, r5
 801a3c4:	b2c0      	uxtb	r0, r0
 801a3c6:	e7d3      	b.n	801a370 <uxr_serialize_ActivityInfoVariant+0xa0>
 801a3c8:	3108      	adds	r1, #8
 801a3ca:	44a2      	add	sl, r4
 801a3cc:	2202      	movs	r2, #2
 801a3ce:	4640      	mov	r0, r8
 801a3d0:	4449      	add	r1, r9
 801a3d2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801a3d6:	f005 fdf5 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 801a3da:	4605      	mov	r5, r0
 801a3dc:	f89a 1016 	ldrb.w	r1, [sl, #22]
 801a3e0:	4640      	mov	r0, r8
 801a3e2:	f7f8 fc57 	bl	8012c94 <ucdr_serialize_uint8_t>
 801a3e6:	4028      	ands	r0, r5
 801a3e8:	b2c0      	uxtb	r0, r0
 801a3ea:	e7c1      	b.n	801a370 <uxr_serialize_ActivityInfoVariant+0xa0>
 801a3ec:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801a3f0:	4640      	mov	r0, r8
 801a3f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a3f6:	f7f9 b989 	b.w	801370c <ucdr_serialize_int16_t>
 801a3fa:	3401      	adds	r4, #1
 801a3fc:	68f2      	ldr	r2, [r6, #12]
 801a3fe:	42a2      	cmp	r2, r4
 801a400:	d8bc      	bhi.n	801a37c <uxr_serialize_ActivityInfoVariant+0xac>
 801a402:	4007      	ands	r7, r0
 801a404:	b2ff      	uxtb	r7, r7
 801a406:	e774      	b.n	801a2f2 <uxr_serialize_ActivityInfoVariant+0x22>
 801a408:	3401      	adds	r4, #1
 801a40a:	68f3      	ldr	r3, [r6, #12]
 801a40c:	3518      	adds	r5, #24
 801a40e:	429c      	cmp	r4, r3
 801a410:	d397      	bcc.n	801a342 <uxr_serialize_ActivityInfoVariant+0x72>
 801a412:	e76e      	b.n	801a2f2 <uxr_serialize_ActivityInfoVariant+0x22>

0801a414 <uxr_deserialize_BaseObjectReply>:
 801a414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a418:	2202      	movs	r2, #2
 801a41a:	4606      	mov	r6, r0
 801a41c:	460f      	mov	r7, r1
 801a41e:	f005 fe35 	bl	802008c <ucdr_deserialize_array_uint8_t>
 801a422:	2202      	movs	r2, #2
 801a424:	4605      	mov	r5, r0
 801a426:	4630      	mov	r0, r6
 801a428:	18b9      	adds	r1, r7, r2
 801a42a:	f005 fe2f 	bl	802008c <ucdr_deserialize_array_uint8_t>
 801a42e:	4680      	mov	r8, r0
 801a430:	1d39      	adds	r1, r7, #4
 801a432:	4630      	mov	r0, r6
 801a434:	f7f8 fc44 	bl	8012cc0 <ucdr_deserialize_uint8_t>
 801a438:	ea05 0508 	and.w	r5, r5, r8
 801a43c:	4604      	mov	r4, r0
 801a43e:	1d79      	adds	r1, r7, #5
 801a440:	4630      	mov	r0, r6
 801a442:	402c      	ands	r4, r5
 801a444:	f7f8 fc3c 	bl	8012cc0 <ucdr_deserialize_uint8_t>
 801a448:	4020      	ands	r0, r4
 801a44a:	b2c0      	uxtb	r0, r0
 801a44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a450 <uxr_serialize_ReadSpecification>:
 801a450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a452:	460e      	mov	r6, r1
 801a454:	4607      	mov	r7, r0
 801a456:	7809      	ldrb	r1, [r1, #0]
 801a458:	f7f8 fc1c 	bl	8012c94 <ucdr_serialize_uint8_t>
 801a45c:	4604      	mov	r4, r0
 801a45e:	7871      	ldrb	r1, [r6, #1]
 801a460:	4638      	mov	r0, r7
 801a462:	f7f8 fc17 	bl	8012c94 <ucdr_serialize_uint8_t>
 801a466:	4004      	ands	r4, r0
 801a468:	78b1      	ldrb	r1, [r6, #2]
 801a46a:	4638      	mov	r0, r7
 801a46c:	f7f8 fbe4 	bl	8012c38 <ucdr_serialize_bool>
 801a470:	78b3      	ldrb	r3, [r6, #2]
 801a472:	b2e4      	uxtb	r4, r4
 801a474:	4004      	ands	r4, r0
 801a476:	b943      	cbnz	r3, 801a48a <uxr_serialize_ReadSpecification+0x3a>
 801a478:	7a31      	ldrb	r1, [r6, #8]
 801a47a:	4638      	mov	r0, r7
 801a47c:	f7f8 fbdc 	bl	8012c38 <ucdr_serialize_bool>
 801a480:	7a33      	ldrb	r3, [r6, #8]
 801a482:	4004      	ands	r4, r0
 801a484:	b93b      	cbnz	r3, 801a496 <uxr_serialize_ReadSpecification+0x46>
 801a486:	4620      	mov	r0, r4
 801a488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a48a:	6871      	ldr	r1, [r6, #4]
 801a48c:	4638      	mov	r0, r7
 801a48e:	f005 fe65 	bl	802015c <ucdr_serialize_string>
 801a492:	4004      	ands	r4, r0
 801a494:	e7f0      	b.n	801a478 <uxr_serialize_ReadSpecification+0x28>
 801a496:	8971      	ldrh	r1, [r6, #10]
 801a498:	4638      	mov	r0, r7
 801a49a:	f7f8 fc27 	bl	8012cec <ucdr_serialize_uint16_t>
 801a49e:	4605      	mov	r5, r0
 801a4a0:	89b1      	ldrh	r1, [r6, #12]
 801a4a2:	4638      	mov	r0, r7
 801a4a4:	f7f8 fc22 	bl	8012cec <ucdr_serialize_uint16_t>
 801a4a8:	4005      	ands	r5, r0
 801a4aa:	89f1      	ldrh	r1, [r6, #14]
 801a4ac:	4638      	mov	r0, r7
 801a4ae:	b2ed      	uxtb	r5, r5
 801a4b0:	f7f8 fc1c 	bl	8012cec <ucdr_serialize_uint16_t>
 801a4b4:	8a31      	ldrh	r1, [r6, #16]
 801a4b6:	4025      	ands	r5, r4
 801a4b8:	4604      	mov	r4, r0
 801a4ba:	4638      	mov	r0, r7
 801a4bc:	4025      	ands	r5, r4
 801a4be:	f7f8 fc15 	bl	8012cec <ucdr_serialize_uint16_t>
 801a4c2:	ea00 0405 	and.w	r4, r0, r5
 801a4c6:	4620      	mov	r0, r4
 801a4c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a4ca:	bf00      	nop

0801a4cc <uxr_serialize_CREATE_CLIENT_Payload>:
 801a4cc:	f7ff b9ea 	b.w	80198a4 <uxr_serialize_CLIENT_Representation>

0801a4d0 <uxr_serialize_CREATE_Payload>:
 801a4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4d2:	2202      	movs	r2, #2
 801a4d4:	4607      	mov	r7, r0
 801a4d6:	460e      	mov	r6, r1
 801a4d8:	f005 fd74 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 801a4dc:	2202      	movs	r2, #2
 801a4de:	4605      	mov	r5, r0
 801a4e0:	4638      	mov	r0, r7
 801a4e2:	18b1      	adds	r1, r6, r2
 801a4e4:	f005 fd6e 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 801a4e8:	7931      	ldrb	r1, [r6, #4]
 801a4ea:	4604      	mov	r4, r0
 801a4ec:	4638      	mov	r0, r7
 801a4ee:	f7f8 fbd1 	bl	8012c94 <ucdr_serialize_uint8_t>
 801a4f2:	b170      	cbz	r0, 801a512 <uxr_serialize_CREATE_Payload+0x42>
 801a4f4:	7933      	ldrb	r3, [r6, #4]
 801a4f6:	402c      	ands	r4, r5
 801a4f8:	3b01      	subs	r3, #1
 801a4fa:	b2e4      	uxtb	r4, r4
 801a4fc:	2b0d      	cmp	r3, #13
 801a4fe:	d809      	bhi.n	801a514 <uxr_serialize_CREATE_Payload+0x44>
 801a500:	e8df f003 	tbb	[pc, r3]
 801a504:	23230a4c 	.word	0x23230a4c
 801a508:	0a0a0a0a 	.word	0x0a0a0a0a
 801a50c:	12121208 	.word	0x12121208
 801a510:	3e45      	.short	0x3e45
 801a512:	2400      	movs	r4, #0
 801a514:	4620      	mov	r0, r4
 801a516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a518:	f106 0108 	add.w	r1, r6, #8
 801a51c:	4638      	mov	r0, r7
 801a51e:	f7ff fac7 	bl	8019ab0 <uxr_serialize_DATAWRITER_Representation>
 801a522:	4004      	ands	r4, r0
 801a524:	4620      	mov	r0, r4
 801a526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a528:	7a31      	ldrb	r1, [r6, #8]
 801a52a:	4638      	mov	r0, r7
 801a52c:	f7f8 fbb2 	bl	8012c94 <ucdr_serialize_uint8_t>
 801a530:	2800      	cmp	r0, #0
 801a532:	d0ee      	beq.n	801a512 <uxr_serialize_CREATE_Payload+0x42>
 801a534:	7a33      	ldrb	r3, [r6, #8]
 801a536:	2b01      	cmp	r3, #1
 801a538:	d001      	beq.n	801a53e <uxr_serialize_CREATE_Payload+0x6e>
 801a53a:	2b02      	cmp	r3, #2
 801a53c:	d1ea      	bne.n	801a514 <uxr_serialize_CREATE_Payload+0x44>
 801a53e:	68f1      	ldr	r1, [r6, #12]
 801a540:	4638      	mov	r0, r7
 801a542:	f005 fe0b 	bl	802015c <ucdr_serialize_string>
 801a546:	4004      	ands	r4, r0
 801a548:	e7e4      	b.n	801a514 <uxr_serialize_CREATE_Payload+0x44>
 801a54a:	7a31      	ldrb	r1, [r6, #8]
 801a54c:	4638      	mov	r0, r7
 801a54e:	f7f8 fba1 	bl	8012c94 <ucdr_serialize_uint8_t>
 801a552:	4605      	mov	r5, r0
 801a554:	b158      	cbz	r0, 801a56e <uxr_serialize_CREATE_Payload+0x9e>
 801a556:	7a33      	ldrb	r3, [r6, #8]
 801a558:	2b02      	cmp	r3, #2
 801a55a:	d034      	beq.n	801a5c6 <uxr_serialize_CREATE_Payload+0xf6>
 801a55c:	2b03      	cmp	r3, #3
 801a55e:	d106      	bne.n	801a56e <uxr_serialize_CREATE_Payload+0x9e>
 801a560:	68f2      	ldr	r2, [r6, #12]
 801a562:	f106 0110 	add.w	r1, r6, #16
 801a566:	4638      	mov	r0, r7
 801a568:	f7fc fc0e 	bl	8016d88 <ucdr_serialize_sequence_uint8_t>
 801a56c:	4605      	mov	r5, r0
 801a56e:	2202      	movs	r2, #2
 801a570:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 801a574:	4638      	mov	r0, r7
 801a576:	f005 fd25 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 801a57a:	4028      	ands	r0, r5
 801a57c:	4004      	ands	r4, r0
 801a57e:	e7c9      	b.n	801a514 <uxr_serialize_CREATE_Payload+0x44>
 801a580:	f106 0108 	add.w	r1, r6, #8
 801a584:	4638      	mov	r0, r7
 801a586:	f7ff f98d 	bl	80198a4 <uxr_serialize_CLIENT_Representation>
 801a58a:	4004      	ands	r4, r0
 801a58c:	e7c2      	b.n	801a514 <uxr_serialize_CREATE_Payload+0x44>
 801a58e:	f106 0108 	add.w	r1, r6, #8
 801a592:	4638      	mov	r0, r7
 801a594:	f7ff fa42 	bl	8019a1c <uxr_serialize_AGENT_Representation>
 801a598:	4004      	ands	r4, r0
 801a59a:	e7bb      	b.n	801a514 <uxr_serialize_CREATE_Payload+0x44>
 801a59c:	7a31      	ldrb	r1, [r6, #8]
 801a59e:	4638      	mov	r0, r7
 801a5a0:	f7f8 fb78 	bl	8012c94 <ucdr_serialize_uint8_t>
 801a5a4:	4605      	mov	r5, r0
 801a5a6:	b130      	cbz	r0, 801a5b6 <uxr_serialize_CREATE_Payload+0xe6>
 801a5a8:	7a33      	ldrb	r3, [r6, #8]
 801a5aa:	2b02      	cmp	r3, #2
 801a5ac:	d011      	beq.n	801a5d2 <uxr_serialize_CREATE_Payload+0x102>
 801a5ae:	2b03      	cmp	r3, #3
 801a5b0:	d015      	beq.n	801a5de <uxr_serialize_CREATE_Payload+0x10e>
 801a5b2:	2b01      	cmp	r3, #1
 801a5b4:	d00d      	beq.n	801a5d2 <uxr_serialize_CREATE_Payload+0x102>
 801a5b6:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801a5ba:	4638      	mov	r0, r7
 801a5bc:	f7f9 f8a6 	bl	801370c <ucdr_serialize_int16_t>
 801a5c0:	4028      	ands	r0, r5
 801a5c2:	4004      	ands	r4, r0
 801a5c4:	e7a6      	b.n	801a514 <uxr_serialize_CREATE_Payload+0x44>
 801a5c6:	68f1      	ldr	r1, [r6, #12]
 801a5c8:	4638      	mov	r0, r7
 801a5ca:	f005 fdc7 	bl	802015c <ucdr_serialize_string>
 801a5ce:	4605      	mov	r5, r0
 801a5d0:	e7cd      	b.n	801a56e <uxr_serialize_CREATE_Payload+0x9e>
 801a5d2:	68f1      	ldr	r1, [r6, #12]
 801a5d4:	4638      	mov	r0, r7
 801a5d6:	f005 fdc1 	bl	802015c <ucdr_serialize_string>
 801a5da:	4605      	mov	r5, r0
 801a5dc:	e7eb      	b.n	801a5b6 <uxr_serialize_CREATE_Payload+0xe6>
 801a5de:	68f2      	ldr	r2, [r6, #12]
 801a5e0:	f106 0110 	add.w	r1, r6, #16
 801a5e4:	4638      	mov	r0, r7
 801a5e6:	f7fc fbcf 	bl	8016d88 <ucdr_serialize_sequence_uint8_t>
 801a5ea:	4605      	mov	r5, r0
 801a5ec:	e7e3      	b.n	801a5b6 <uxr_serialize_CREATE_Payload+0xe6>
 801a5ee:	bf00      	nop

0801a5f0 <uxr_serialize_GET_INFO_Payload>:
 801a5f0:	b570      	push	{r4, r5, r6, lr}
 801a5f2:	2202      	movs	r2, #2
 801a5f4:	4605      	mov	r5, r0
 801a5f6:	460e      	mov	r6, r1
 801a5f8:	f005 fce4 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 801a5fc:	2202      	movs	r2, #2
 801a5fe:	4604      	mov	r4, r0
 801a600:	4628      	mov	r0, r5
 801a602:	18b1      	adds	r1, r6, r2
 801a604:	f005 fcde 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 801a608:	4603      	mov	r3, r0
 801a60a:	6871      	ldr	r1, [r6, #4]
 801a60c:	4628      	mov	r0, r5
 801a60e:	401c      	ands	r4, r3
 801a610:	f7f8 fd56 	bl	80130c0 <ucdr_serialize_uint32_t>
 801a614:	b2e4      	uxtb	r4, r4
 801a616:	4020      	ands	r0, r4
 801a618:	bd70      	pop	{r4, r5, r6, pc}
 801a61a:	bf00      	nop

0801a61c <uxr_deserialize_GET_INFO_Payload>:
 801a61c:	b570      	push	{r4, r5, r6, lr}
 801a61e:	2202      	movs	r2, #2
 801a620:	4605      	mov	r5, r0
 801a622:	460e      	mov	r6, r1
 801a624:	f005 fd32 	bl	802008c <ucdr_deserialize_array_uint8_t>
 801a628:	2202      	movs	r2, #2
 801a62a:	4604      	mov	r4, r0
 801a62c:	4628      	mov	r0, r5
 801a62e:	18b1      	adds	r1, r6, r2
 801a630:	f005 fd2c 	bl	802008c <ucdr_deserialize_array_uint8_t>
 801a634:	4603      	mov	r3, r0
 801a636:	1d31      	adds	r1, r6, #4
 801a638:	4628      	mov	r0, r5
 801a63a:	401c      	ands	r4, r3
 801a63c:	f7f8 fe70 	bl	8013320 <ucdr_deserialize_uint32_t>
 801a640:	b2e4      	uxtb	r4, r4
 801a642:	4020      	ands	r0, r4
 801a644:	bd70      	pop	{r4, r5, r6, pc}
 801a646:	bf00      	nop

0801a648 <uxr_serialize_DELETE_Payload>:
 801a648:	b570      	push	{r4, r5, r6, lr}
 801a64a:	2202      	movs	r2, #2
 801a64c:	4605      	mov	r5, r0
 801a64e:	460e      	mov	r6, r1
 801a650:	f005 fcb8 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 801a654:	2202      	movs	r2, #2
 801a656:	4604      	mov	r4, r0
 801a658:	4628      	mov	r0, r5
 801a65a:	18b1      	adds	r1, r6, r2
 801a65c:	f005 fcb2 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 801a660:	4020      	ands	r0, r4
 801a662:	b2c0      	uxtb	r0, r0
 801a664:	bd70      	pop	{r4, r5, r6, pc}
 801a666:	bf00      	nop

0801a668 <uxr_deserialize_STATUS_AGENT_Payload>:
 801a668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a66c:	460e      	mov	r6, r1
 801a66e:	4605      	mov	r5, r0
 801a670:	f7f8 fb26 	bl	8012cc0 <ucdr_deserialize_uint8_t>
 801a674:	4604      	mov	r4, r0
 801a676:	1c71      	adds	r1, r6, #1
 801a678:	4628      	mov	r0, r5
 801a67a:	f7f8 fb21 	bl	8012cc0 <ucdr_deserialize_uint8_t>
 801a67e:	2204      	movs	r2, #4
 801a680:	4681      	mov	r9, r0
 801a682:	4628      	mov	r0, r5
 801a684:	18b1      	adds	r1, r6, r2
 801a686:	f005 fd01 	bl	802008c <ucdr_deserialize_array_uint8_t>
 801a68a:	f106 0108 	add.w	r1, r6, #8
 801a68e:	4680      	mov	r8, r0
 801a690:	2202      	movs	r2, #2
 801a692:	4628      	mov	r0, r5
 801a694:	f005 fcfa 	bl	802008c <ucdr_deserialize_array_uint8_t>
 801a698:	ea04 0309 	and.w	r3, r4, r9
 801a69c:	4607      	mov	r7, r0
 801a69e:	2202      	movs	r2, #2
 801a6a0:	b2db      	uxtb	r3, r3
 801a6a2:	f106 010a 	add.w	r1, r6, #10
 801a6a6:	4628      	mov	r0, r5
 801a6a8:	ea03 0408 	and.w	r4, r3, r8
 801a6ac:	f005 fcee 	bl	802008c <ucdr_deserialize_array_uint8_t>
 801a6b0:	4603      	mov	r3, r0
 801a6b2:	4628      	mov	r0, r5
 801a6b4:	403c      	ands	r4, r7
 801a6b6:	f106 010c 	add.w	r1, r6, #12
 801a6ba:	461d      	mov	r5, r3
 801a6bc:	f7f8 fad2 	bl	8012c64 <ucdr_deserialize_bool>
 801a6c0:	4025      	ands	r5, r4
 801a6c2:	4028      	ands	r0, r5
 801a6c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801a6c8 <uxr_deserialize_STATUS_Payload>:
 801a6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6cc:	2202      	movs	r2, #2
 801a6ce:	4606      	mov	r6, r0
 801a6d0:	460f      	mov	r7, r1
 801a6d2:	f005 fcdb 	bl	802008c <ucdr_deserialize_array_uint8_t>
 801a6d6:	2202      	movs	r2, #2
 801a6d8:	4605      	mov	r5, r0
 801a6da:	4630      	mov	r0, r6
 801a6dc:	18b9      	adds	r1, r7, r2
 801a6de:	f005 fcd5 	bl	802008c <ucdr_deserialize_array_uint8_t>
 801a6e2:	4680      	mov	r8, r0
 801a6e4:	1d39      	adds	r1, r7, #4
 801a6e6:	4630      	mov	r0, r6
 801a6e8:	f7f8 faea 	bl	8012cc0 <ucdr_deserialize_uint8_t>
 801a6ec:	ea05 0508 	and.w	r5, r5, r8
 801a6f0:	4604      	mov	r4, r0
 801a6f2:	1d79      	adds	r1, r7, #5
 801a6f4:	4630      	mov	r0, r6
 801a6f6:	402c      	ands	r4, r5
 801a6f8:	f7f8 fae2 	bl	8012cc0 <ucdr_deserialize_uint8_t>
 801a6fc:	4020      	ands	r0, r4
 801a6fe:	b2c0      	uxtb	r0, r0
 801a700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a704 <uxr_serialize_INFO_Payload>:
 801a704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a708:	2202      	movs	r2, #2
 801a70a:	460c      	mov	r4, r1
 801a70c:	4605      	mov	r5, r0
 801a70e:	f005 fc59 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 801a712:	2202      	movs	r2, #2
 801a714:	4680      	mov	r8, r0
 801a716:	4628      	mov	r0, r5
 801a718:	18a1      	adds	r1, r4, r2
 801a71a:	f005 fc53 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 801a71e:	4607      	mov	r7, r0
 801a720:	7921      	ldrb	r1, [r4, #4]
 801a722:	4628      	mov	r0, r5
 801a724:	f7f8 fab6 	bl	8012c94 <ucdr_serialize_uint8_t>
 801a728:	ea08 0807 	and.w	r8, r8, r7
 801a72c:	4606      	mov	r6, r0
 801a72e:	7961      	ldrb	r1, [r4, #5]
 801a730:	4628      	mov	r0, r5
 801a732:	ea06 0608 	and.w	r6, r6, r8
 801a736:	f7f8 faad 	bl	8012c94 <ucdr_serialize_uint8_t>
 801a73a:	7a21      	ldrb	r1, [r4, #8]
 801a73c:	4030      	ands	r0, r6
 801a73e:	b2c7      	uxtb	r7, r0
 801a740:	4628      	mov	r0, r5
 801a742:	f7f8 fa79 	bl	8012c38 <ucdr_serialize_bool>
 801a746:	7a23      	ldrb	r3, [r4, #8]
 801a748:	4606      	mov	r6, r0
 801a74a:	b96b      	cbnz	r3, 801a768 <uxr_serialize_INFO_Payload+0x64>
 801a74c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 801a750:	4628      	mov	r0, r5
 801a752:	f7f8 fa71 	bl	8012c38 <ucdr_serialize_bool>
 801a756:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801a75a:	4030      	ands	r0, r6
 801a75c:	b2c6      	uxtb	r6, r0
 801a75e:	b983      	cbnz	r3, 801a782 <uxr_serialize_INFO_Payload+0x7e>
 801a760:	ea06 0007 	and.w	r0, r6, r7
 801a764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a768:	7b21      	ldrb	r1, [r4, #12]
 801a76a:	4628      	mov	r0, r5
 801a76c:	f7f8 fa92 	bl	8012c94 <ucdr_serialize_uint8_t>
 801a770:	b188      	cbz	r0, 801a796 <uxr_serialize_INFO_Payload+0x92>
 801a772:	f104 010c 	add.w	r1, r4, #12
 801a776:	4628      	mov	r0, r5
 801a778:	f7ff f9c2 	bl	8019b00 <uxr_serialize_ObjectVariant.part.0>
 801a77c:	4030      	ands	r0, r6
 801a77e:	b2c6      	uxtb	r6, r0
 801a780:	e7e4      	b.n	801a74c <uxr_serialize_INFO_Payload+0x48>
 801a782:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801a786:	4628      	mov	r0, r5
 801a788:	f7ff fda2 	bl	801a2d0 <uxr_serialize_ActivityInfoVariant>
 801a78c:	4006      	ands	r6, r0
 801a78e:	ea06 0007 	and.w	r0, r6, r7
 801a792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a796:	4606      	mov	r6, r0
 801a798:	e7d8      	b.n	801a74c <uxr_serialize_INFO_Payload+0x48>
 801a79a:	bf00      	nop

0801a79c <uxr_serialize_READ_DATA_Payload>:
 801a79c:	b570      	push	{r4, r5, r6, lr}
 801a79e:	2202      	movs	r2, #2
 801a7a0:	4605      	mov	r5, r0
 801a7a2:	460e      	mov	r6, r1
 801a7a4:	f005 fc0e 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 801a7a8:	2202      	movs	r2, #2
 801a7aa:	4604      	mov	r4, r0
 801a7ac:	4628      	mov	r0, r5
 801a7ae:	18b1      	adds	r1, r6, r2
 801a7b0:	f005 fc08 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 801a7b4:	4603      	mov	r3, r0
 801a7b6:	1d31      	adds	r1, r6, #4
 801a7b8:	4628      	mov	r0, r5
 801a7ba:	401c      	ands	r4, r3
 801a7bc:	f7ff fe48 	bl	801a450 <uxr_serialize_ReadSpecification>
 801a7c0:	b2e4      	uxtb	r4, r4
 801a7c2:	4020      	ands	r0, r4
 801a7c4:	bd70      	pop	{r4, r5, r6, pc}
 801a7c6:	bf00      	nop

0801a7c8 <uxr_serialize_WRITE_DATA_Payload_Data>:
 801a7c8:	b570      	push	{r4, r5, r6, lr}
 801a7ca:	2202      	movs	r2, #2
 801a7cc:	4605      	mov	r5, r0
 801a7ce:	460e      	mov	r6, r1
 801a7d0:	f005 fbf8 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 801a7d4:	2202      	movs	r2, #2
 801a7d6:	4604      	mov	r4, r0
 801a7d8:	4628      	mov	r0, r5
 801a7da:	18b1      	adds	r1, r6, r2
 801a7dc:	f005 fbf2 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 801a7e0:	4020      	ands	r0, r4
 801a7e2:	b2c0      	uxtb	r0, r0
 801a7e4:	bd70      	pop	{r4, r5, r6, pc}
 801a7e6:	bf00      	nop

0801a7e8 <uxr_serialize_ACKNACK_Payload>:
 801a7e8:	b570      	push	{r4, r5, r6, lr}
 801a7ea:	460c      	mov	r4, r1
 801a7ec:	4605      	mov	r5, r0
 801a7ee:	460e      	mov	r6, r1
 801a7f0:	f834 1b02 	ldrh.w	r1, [r4], #2
 801a7f4:	f7f8 fa7a 	bl	8012cec <ucdr_serialize_uint16_t>
 801a7f8:	2202      	movs	r2, #2
 801a7fa:	4621      	mov	r1, r4
 801a7fc:	4604      	mov	r4, r0
 801a7fe:	4628      	mov	r0, r5
 801a800:	f005 fbe0 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 801a804:	4603      	mov	r3, r0
 801a806:	7931      	ldrb	r1, [r6, #4]
 801a808:	4628      	mov	r0, r5
 801a80a:	401c      	ands	r4, r3
 801a80c:	f7f8 fa42 	bl	8012c94 <ucdr_serialize_uint8_t>
 801a810:	b2e4      	uxtb	r4, r4
 801a812:	4020      	ands	r0, r4
 801a814:	bd70      	pop	{r4, r5, r6, pc}
 801a816:	bf00      	nop

0801a818 <uxr_deserialize_ACKNACK_Payload>:
 801a818:	b570      	push	{r4, r5, r6, lr}
 801a81a:	460e      	mov	r6, r1
 801a81c:	4605      	mov	r5, r0
 801a81e:	f7f8 fb65 	bl	8012eec <ucdr_deserialize_uint16_t>
 801a822:	2202      	movs	r2, #2
 801a824:	4604      	mov	r4, r0
 801a826:	4628      	mov	r0, r5
 801a828:	18b1      	adds	r1, r6, r2
 801a82a:	f005 fc2f 	bl	802008c <ucdr_deserialize_array_uint8_t>
 801a82e:	4603      	mov	r3, r0
 801a830:	1d31      	adds	r1, r6, #4
 801a832:	4628      	mov	r0, r5
 801a834:	401c      	ands	r4, r3
 801a836:	f7f8 fa43 	bl	8012cc0 <ucdr_deserialize_uint8_t>
 801a83a:	b2e4      	uxtb	r4, r4
 801a83c:	4020      	ands	r0, r4
 801a83e:	bd70      	pop	{r4, r5, r6, pc}

0801a840 <uxr_serialize_HEARTBEAT_Payload>:
 801a840:	b570      	push	{r4, r5, r6, lr}
 801a842:	460d      	mov	r5, r1
 801a844:	4606      	mov	r6, r0
 801a846:	8809      	ldrh	r1, [r1, #0]
 801a848:	f7f8 fa50 	bl	8012cec <ucdr_serialize_uint16_t>
 801a84c:	8869      	ldrh	r1, [r5, #2]
 801a84e:	4604      	mov	r4, r0
 801a850:	4630      	mov	r0, r6
 801a852:	f7f8 fa4b 	bl	8012cec <ucdr_serialize_uint16_t>
 801a856:	4603      	mov	r3, r0
 801a858:	7929      	ldrb	r1, [r5, #4]
 801a85a:	4630      	mov	r0, r6
 801a85c:	401c      	ands	r4, r3
 801a85e:	f7f8 fa19 	bl	8012c94 <ucdr_serialize_uint8_t>
 801a862:	b2e4      	uxtb	r4, r4
 801a864:	4020      	ands	r0, r4
 801a866:	bd70      	pop	{r4, r5, r6, pc}

0801a868 <uxr_deserialize_HEARTBEAT_Payload>:
 801a868:	b570      	push	{r4, r5, r6, lr}
 801a86a:	460e      	mov	r6, r1
 801a86c:	4605      	mov	r5, r0
 801a86e:	f7f8 fb3d 	bl	8012eec <ucdr_deserialize_uint16_t>
 801a872:	4604      	mov	r4, r0
 801a874:	1cb1      	adds	r1, r6, #2
 801a876:	4628      	mov	r0, r5
 801a878:	f7f8 fb38 	bl	8012eec <ucdr_deserialize_uint16_t>
 801a87c:	4603      	mov	r3, r0
 801a87e:	1d31      	adds	r1, r6, #4
 801a880:	4628      	mov	r0, r5
 801a882:	401c      	ands	r4, r3
 801a884:	f7f8 fa1c 	bl	8012cc0 <ucdr_deserialize_uint8_t>
 801a888:	b2e4      	uxtb	r4, r4
 801a88a:	4020      	ands	r0, r4
 801a88c:	bd70      	pop	{r4, r5, r6, pc}
 801a88e:	bf00      	nop

0801a890 <uxr_serialize_TIMESTAMP_Payload>:
 801a890:	b570      	push	{r4, r5, r6, lr}
 801a892:	460d      	mov	r5, r1
 801a894:	4606      	mov	r6, r0
 801a896:	6809      	ldr	r1, [r1, #0]
 801a898:	f7f9 f82c 	bl	80138f4 <ucdr_serialize_int32_t>
 801a89c:	4604      	mov	r4, r0
 801a89e:	6869      	ldr	r1, [r5, #4]
 801a8a0:	4630      	mov	r0, r6
 801a8a2:	f7f8 fc0d 	bl	80130c0 <ucdr_serialize_uint32_t>
 801a8a6:	4020      	ands	r0, r4
 801a8a8:	b2c0      	uxtb	r0, r0
 801a8aa:	bd70      	pop	{r4, r5, r6, pc}

0801a8ac <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801a8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a8b0:	460e      	mov	r6, r1
 801a8b2:	4605      	mov	r5, r0
 801a8b4:	f7f9 f8b6 	bl	8013a24 <ucdr_deserialize_int32_t>
 801a8b8:	4607      	mov	r7, r0
 801a8ba:	1d31      	adds	r1, r6, #4
 801a8bc:	4628      	mov	r0, r5
 801a8be:	f7f8 fd2f 	bl	8013320 <ucdr_deserialize_uint32_t>
 801a8c2:	4680      	mov	r8, r0
 801a8c4:	f106 0108 	add.w	r1, r6, #8
 801a8c8:	4628      	mov	r0, r5
 801a8ca:	f7f9 f8ab 	bl	8013a24 <ucdr_deserialize_int32_t>
 801a8ce:	ea07 0708 	and.w	r7, r7, r8
 801a8d2:	4604      	mov	r4, r0
 801a8d4:	f106 010c 	add.w	r1, r6, #12
 801a8d8:	4628      	mov	r0, r5
 801a8da:	403c      	ands	r4, r7
 801a8dc:	f7f8 fd20 	bl	8013320 <ucdr_deserialize_uint32_t>
 801a8e0:	f106 0110 	add.w	r1, r6, #16
 801a8e4:	4004      	ands	r4, r0
 801a8e6:	4628      	mov	r0, r5
 801a8e8:	f7f9 f89c 	bl	8013a24 <ucdr_deserialize_int32_t>
 801a8ec:	4603      	mov	r3, r0
 801a8ee:	b2e4      	uxtb	r4, r4
 801a8f0:	4628      	mov	r0, r5
 801a8f2:	461d      	mov	r5, r3
 801a8f4:	f106 0114 	add.w	r1, r6, #20
 801a8f8:	f7f8 fd12 	bl	8013320 <ucdr_deserialize_uint32_t>
 801a8fc:	402c      	ands	r4, r5
 801a8fe:	4020      	ands	r0, r4
 801a900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a904 <uxr_serialize_SampleIdentity>:
 801a904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a908:	4604      	mov	r4, r0
 801a90a:	460d      	mov	r5, r1
 801a90c:	220c      	movs	r2, #12
 801a90e:	f005 fb59 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 801a912:	2203      	movs	r2, #3
 801a914:	f105 010c 	add.w	r1, r5, #12
 801a918:	4607      	mov	r7, r0
 801a91a:	4620      	mov	r0, r4
 801a91c:	f005 fb52 	bl	801ffc4 <ucdr_serialize_array_uint8_t>
 801a920:	7be9      	ldrb	r1, [r5, #15]
 801a922:	4680      	mov	r8, r0
 801a924:	4620      	mov	r0, r4
 801a926:	f7f8 f9b5 	bl	8012c94 <ucdr_serialize_uint8_t>
 801a92a:	6929      	ldr	r1, [r5, #16]
 801a92c:	4606      	mov	r6, r0
 801a92e:	4620      	mov	r0, r4
 801a930:	f7f8 ffe0 	bl	80138f4 <ucdr_serialize_int32_t>
 801a934:	ea07 0708 	and.w	r7, r7, r8
 801a938:	4603      	mov	r3, r0
 801a93a:	4620      	mov	r0, r4
 801a93c:	403e      	ands	r6, r7
 801a93e:	6969      	ldr	r1, [r5, #20]
 801a940:	461c      	mov	r4, r3
 801a942:	f7f8 fbbd 	bl	80130c0 <ucdr_serialize_uint32_t>
 801a946:	4034      	ands	r4, r6
 801a948:	4020      	ands	r0, r4
 801a94a:	b2c0      	uxtb	r0, r0
 801a94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a950 <uxr_deserialize_SampleIdentity>:
 801a950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a954:	4604      	mov	r4, r0
 801a956:	460d      	mov	r5, r1
 801a958:	220c      	movs	r2, #12
 801a95a:	f005 fb97 	bl	802008c <ucdr_deserialize_array_uint8_t>
 801a95e:	2203      	movs	r2, #3
 801a960:	f105 010c 	add.w	r1, r5, #12
 801a964:	4607      	mov	r7, r0
 801a966:	4620      	mov	r0, r4
 801a968:	f005 fb90 	bl	802008c <ucdr_deserialize_array_uint8_t>
 801a96c:	f105 010f 	add.w	r1, r5, #15
 801a970:	4680      	mov	r8, r0
 801a972:	4620      	mov	r0, r4
 801a974:	f7f8 f9a4 	bl	8012cc0 <ucdr_deserialize_uint8_t>
 801a978:	f105 0110 	add.w	r1, r5, #16
 801a97c:	4606      	mov	r6, r0
 801a97e:	4620      	mov	r0, r4
 801a980:	f7f9 f850 	bl	8013a24 <ucdr_deserialize_int32_t>
 801a984:	ea07 0708 	and.w	r7, r7, r8
 801a988:	4603      	mov	r3, r0
 801a98a:	4620      	mov	r0, r4
 801a98c:	403e      	ands	r6, r7
 801a98e:	f105 0114 	add.w	r1, r5, #20
 801a992:	461c      	mov	r4, r3
 801a994:	f7f8 fcc4 	bl	8013320 <ucdr_deserialize_uint32_t>
 801a998:	4034      	ands	r4, r6
 801a99a:	4020      	ands	r0, r4
 801a99c:	b2c0      	uxtb	r0, r0
 801a99e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a9a2:	bf00      	nop

0801a9a4 <rcl_client_get_rmw_handle>:
 801a9a4:	b118      	cbz	r0, 801a9ae <rcl_client_get_rmw_handle+0xa>
 801a9a6:	6800      	ldr	r0, [r0, #0]
 801a9a8:	b108      	cbz	r0, 801a9ae <rcl_client_get_rmw_handle+0xa>
 801a9aa:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801a9ae:	4770      	bx	lr

0801a9b0 <rcl_send_request>:
 801a9b0:	b570      	push	{r4, r5, r6, lr}
 801a9b2:	b082      	sub	sp, #8
 801a9b4:	b1f8      	cbz	r0, 801a9f6 <rcl_send_request+0x46>
 801a9b6:	4604      	mov	r4, r0
 801a9b8:	6800      	ldr	r0, [r0, #0]
 801a9ba:	b1e0      	cbz	r0, 801a9f6 <rcl_send_request+0x46>
 801a9bc:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 801a9c0:	b1cb      	cbz	r3, 801a9f6 <rcl_send_request+0x46>
 801a9c2:	460e      	mov	r6, r1
 801a9c4:	b1e1      	cbz	r1, 801aa00 <rcl_send_request+0x50>
 801a9c6:	4615      	mov	r5, r2
 801a9c8:	b1d2      	cbz	r2, 801aa00 <rcl_send_request+0x50>
 801a9ca:	2105      	movs	r1, #5
 801a9cc:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801a9d0:	f003 f8b6 	bl	801db40 <__atomic_load_8>
 801a9d4:	4602      	mov	r2, r0
 801a9d6:	460b      	mov	r3, r1
 801a9d8:	4631      	mov	r1, r6
 801a9da:	e9c5 2300 	strd	r2, r3, [r5]
 801a9de:	6823      	ldr	r3, [r4, #0]
 801a9e0:	462a      	mov	r2, r5
 801a9e2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801a9e6:	f004 faa1 	bl	801ef2c <rmw_send_request>
 801a9ea:	4606      	mov	r6, r0
 801a9ec:	b160      	cbz	r0, 801aa08 <rcl_send_request+0x58>
 801a9ee:	2601      	movs	r6, #1
 801a9f0:	4630      	mov	r0, r6
 801a9f2:	b002      	add	sp, #8
 801a9f4:	bd70      	pop	{r4, r5, r6, pc}
 801a9f6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801a9fa:	4630      	mov	r0, r6
 801a9fc:	b002      	add	sp, #8
 801a9fe:	bd70      	pop	{r4, r5, r6, pc}
 801aa00:	260b      	movs	r6, #11
 801aa02:	4630      	mov	r0, r6
 801aa04:	b002      	add	sp, #8
 801aa06:	bd70      	pop	{r4, r5, r6, pc}
 801aa08:	6820      	ldr	r0, [r4, #0]
 801aa0a:	2105      	movs	r1, #5
 801aa0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801aa10:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801aa14:	9100      	str	r1, [sp, #0]
 801aa16:	f003 f8ff 	bl	801dc18 <__atomic_exchange_8>
 801aa1a:	4630      	mov	r0, r6
 801aa1c:	b002      	add	sp, #8
 801aa1e:	bd70      	pop	{r4, r5, r6, pc}

0801aa20 <rcl_take_response>:
 801aa20:	b570      	push	{r4, r5, r6, lr}
 801aa22:	468e      	mov	lr, r1
 801aa24:	b08c      	sub	sp, #48	@ 0x30
 801aa26:	460c      	mov	r4, r1
 801aa28:	4616      	mov	r6, r2
 801aa2a:	f10d 0c18 	add.w	ip, sp, #24
 801aa2e:	4605      	mov	r5, r0
 801aa30:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801aa34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aa38:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801aa3c:	e88c 0003 	stmia.w	ip, {r0, r1}
 801aa40:	b35d      	cbz	r5, 801aa9a <rcl_take_response+0x7a>
 801aa42:	682b      	ldr	r3, [r5, #0]
 801aa44:	b34b      	cbz	r3, 801aa9a <rcl_take_response+0x7a>
 801aa46:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801aa4a:	b330      	cbz	r0, 801aa9a <rcl_take_response+0x7a>
 801aa4c:	b346      	cbz	r6, 801aaa0 <rcl_take_response+0x80>
 801aa4e:	2300      	movs	r3, #0
 801aa50:	4632      	mov	r2, r6
 801aa52:	a902      	add	r1, sp, #8
 801aa54:	f88d 3007 	strb.w	r3, [sp, #7]
 801aa58:	f10d 0307 	add.w	r3, sp, #7
 801aa5c:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 801aaa8 <rcl_take_response+0x88>
 801aa60:	ed8d 7b02 	vstr	d7, [sp, #8]
 801aa64:	ed8d 7b04 	vstr	d7, [sp, #16]
 801aa68:	f004 fb68 	bl	801f13c <rmw_take_response>
 801aa6c:	4605      	mov	r5, r0
 801aa6e:	b9c8      	cbnz	r0, 801aaa4 <rcl_take_response+0x84>
 801aa70:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801aa74:	f240 13f5 	movw	r3, #501	@ 0x1f5
 801aa78:	2a00      	cmp	r2, #0
 801aa7a:	bf08      	it	eq
 801aa7c:	461d      	moveq	r5, r3
 801aa7e:	f10d 0e18 	add.w	lr, sp, #24
 801aa82:	46a4      	mov	ip, r4
 801aa84:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801aa88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aa8c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801aa90:	e88c 0003 	stmia.w	ip, {r0, r1}
 801aa94:	4628      	mov	r0, r5
 801aa96:	b00c      	add	sp, #48	@ 0x30
 801aa98:	bd70      	pop	{r4, r5, r6, pc}
 801aa9a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801aa9e:	e7ee      	b.n	801aa7e <rcl_take_response+0x5e>
 801aaa0:	250b      	movs	r5, #11
 801aaa2:	e7ec      	b.n	801aa7e <rcl_take_response+0x5e>
 801aaa4:	2501      	movs	r5, #1
 801aaa6:	e7ea      	b.n	801aa7e <rcl_take_response+0x5e>
	...

0801aab0 <rcl_client_is_valid>:
 801aab0:	b130      	cbz	r0, 801aac0 <rcl_client_is_valid+0x10>
 801aab2:	6800      	ldr	r0, [r0, #0]
 801aab4:	b120      	cbz	r0, 801aac0 <rcl_client_is_valid+0x10>
 801aab6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801aaba:	3800      	subs	r0, #0
 801aabc:	bf18      	it	ne
 801aabe:	2001      	movne	r0, #1
 801aac0:	4770      	bx	lr
 801aac2:	bf00      	nop

0801aac4 <rcl_convert_rmw_ret_to_rcl_ret>:
 801aac4:	280b      	cmp	r0, #11
 801aac6:	dc0d      	bgt.n	801aae4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801aac8:	2800      	cmp	r0, #0
 801aaca:	db09      	blt.n	801aae0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801aacc:	280b      	cmp	r0, #11
 801aace:	d807      	bhi.n	801aae0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801aad0:	e8df f000 	tbb	[pc, r0]
 801aad4:	07060607 	.word	0x07060607
 801aad8:	06060606 	.word	0x06060606
 801aadc:	07070606 	.word	0x07070606
 801aae0:	2001      	movs	r0, #1
 801aae2:	4770      	bx	lr
 801aae4:	28cb      	cmp	r0, #203	@ 0xcb
 801aae6:	bf18      	it	ne
 801aae8:	2001      	movne	r0, #1
 801aaea:	4770      	bx	lr

0801aaec <rcl_get_zero_initialized_context>:
 801aaec:	4a03      	ldr	r2, [pc, #12]	@ (801aafc <rcl_get_zero_initialized_context+0x10>)
 801aaee:	4603      	mov	r3, r0
 801aaf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801aaf4:	e883 0003 	stmia.w	r3, {r0, r1}
 801aaf8:	4618      	mov	r0, r3
 801aafa:	4770      	bx	lr
 801aafc:	08025314 	.word	0x08025314

0801ab00 <rcl_context_is_valid>:
 801ab00:	b118      	cbz	r0, 801ab0a <rcl_context_is_valid+0xa>
 801ab02:	6840      	ldr	r0, [r0, #4]
 801ab04:	3800      	subs	r0, #0
 801ab06:	bf18      	it	ne
 801ab08:	2001      	movne	r0, #1
 801ab0a:	4770      	bx	lr

0801ab0c <__cleanup_context>:
 801ab0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ab10:	4606      	mov	r6, r0
 801ab12:	2300      	movs	r3, #0
 801ab14:	6800      	ldr	r0, [r0, #0]
 801ab16:	6073      	str	r3, [r6, #4]
 801ab18:	2800      	cmp	r0, #0
 801ab1a:	d049      	beq.n	801abb0 <__cleanup_context+0xa4>
 801ab1c:	6947      	ldr	r7, [r0, #20]
 801ab1e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801ab22:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801ab26:	b137      	cbz	r7, 801ab36 <__cleanup_context+0x2a>
 801ab28:	3014      	adds	r0, #20
 801ab2a:	f000 f9bd 	bl	801aea8 <rcl_init_options_fini>
 801ab2e:	4607      	mov	r7, r0
 801ab30:	2800      	cmp	r0, #0
 801ab32:	d144      	bne.n	801abbe <__cleanup_context+0xb2>
 801ab34:	6830      	ldr	r0, [r6, #0]
 801ab36:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801ab38:	b143      	cbz	r3, 801ab4c <__cleanup_context+0x40>
 801ab3a:	3028      	adds	r0, #40	@ 0x28
 801ab3c:	f004 f83c 	bl	801ebb8 <rmw_context_fini>
 801ab40:	b118      	cbz	r0, 801ab4a <__cleanup_context+0x3e>
 801ab42:	2f00      	cmp	r7, #0
 801ab44:	d03e      	beq.n	801abc4 <__cleanup_context+0xb8>
 801ab46:	f7fa fcd3 	bl	80154f0 <rcutils_reset_error>
 801ab4a:	6830      	ldr	r0, [r6, #0]
 801ab4c:	6a03      	ldr	r3, [r0, #32]
 801ab4e:	b1db      	cbz	r3, 801ab88 <__cleanup_context+0x7c>
 801ab50:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801ab54:	2a01      	cmp	r2, #1
 801ab56:	f17c 0100 	sbcs.w	r1, ip, #0
 801ab5a:	db11      	blt.n	801ab80 <__cleanup_context+0x74>
 801ab5c:	2400      	movs	r4, #0
 801ab5e:	4625      	mov	r5, r4
 801ab60:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ab64:	4649      	mov	r1, r9
 801ab66:	b1b8      	cbz	r0, 801ab98 <__cleanup_context+0x8c>
 801ab68:	47c0      	blx	r8
 801ab6a:	6833      	ldr	r3, [r6, #0]
 801ab6c:	3401      	adds	r4, #1
 801ab6e:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801ab72:	f145 0500 	adc.w	r5, r5, #0
 801ab76:	6a1b      	ldr	r3, [r3, #32]
 801ab78:	4294      	cmp	r4, r2
 801ab7a:	eb75 010c 	sbcs.w	r1, r5, ip
 801ab7e:	dbef      	blt.n	801ab60 <__cleanup_context+0x54>
 801ab80:	4618      	mov	r0, r3
 801ab82:	4649      	mov	r1, r9
 801ab84:	47c0      	blx	r8
 801ab86:	6830      	ldr	r0, [r6, #0]
 801ab88:	4649      	mov	r1, r9
 801ab8a:	47c0      	blx	r8
 801ab8c:	2300      	movs	r3, #0
 801ab8e:	4638      	mov	r0, r7
 801ab90:	e9c6 3300 	strd	r3, r3, [r6]
 801ab94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ab98:	3401      	adds	r4, #1
 801ab9a:	f145 0500 	adc.w	r5, r5, #0
 801ab9e:	4294      	cmp	r4, r2
 801aba0:	eb75 010c 	sbcs.w	r1, r5, ip
 801aba4:	dbdc      	blt.n	801ab60 <__cleanup_context+0x54>
 801aba6:	4618      	mov	r0, r3
 801aba8:	4649      	mov	r1, r9
 801abaa:	47c0      	blx	r8
 801abac:	6830      	ldr	r0, [r6, #0]
 801abae:	e7eb      	b.n	801ab88 <__cleanup_context+0x7c>
 801abb0:	4607      	mov	r7, r0
 801abb2:	2300      	movs	r3, #0
 801abb4:	4638      	mov	r0, r7
 801abb6:	e9c6 3300 	strd	r3, r3, [r6]
 801abba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801abbe:	f7fa fc97 	bl	80154f0 <rcutils_reset_error>
 801abc2:	e7b7      	b.n	801ab34 <__cleanup_context+0x28>
 801abc4:	f7ff ff7e 	bl	801aac4 <rcl_convert_rmw_ret_to_rcl_ret>
 801abc8:	4607      	mov	r7, r0
 801abca:	e7bc      	b.n	801ab46 <__cleanup_context+0x3a>

0801abcc <rcl_init>:
 801abcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801abd0:	1e05      	subs	r5, r0, #0
 801abd2:	b09e      	sub	sp, #120	@ 0x78
 801abd4:	460e      	mov	r6, r1
 801abd6:	4690      	mov	r8, r2
 801abd8:	461f      	mov	r7, r3
 801abda:	f340 809f 	ble.w	801ad1c <rcl_init+0x150>
 801abde:	2900      	cmp	r1, #0
 801abe0:	f000 809f 	beq.w	801ad22 <rcl_init+0x156>
 801abe4:	f1a1 0e04 	sub.w	lr, r1, #4
 801abe8:	f04f 0c00 	mov.w	ip, #0
 801abec:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 801abf0:	f10c 0c01 	add.w	ip, ip, #1
 801abf4:	2c00      	cmp	r4, #0
 801abf6:	f000 8094 	beq.w	801ad22 <rcl_init+0x156>
 801abfa:	4565      	cmp	r5, ip
 801abfc:	d1f6      	bne.n	801abec <rcl_init+0x20>
 801abfe:	f1b8 0f00 	cmp.w	r8, #0
 801ac02:	f000 808e 	beq.w	801ad22 <rcl_init+0x156>
 801ac06:	f8d8 4000 	ldr.w	r4, [r8]
 801ac0a:	2c00      	cmp	r4, #0
 801ac0c:	f000 8089 	beq.w	801ad22 <rcl_init+0x156>
 801ac10:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 801ac14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ac16:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ac1a:	6823      	ldr	r3, [r4, #0]
 801ac1c:	a819      	add	r0, sp, #100	@ 0x64
 801ac1e:	f8cc 3000 	str.w	r3, [ip]
 801ac22:	f7fa fc41 	bl	80154a8 <rcutils_allocator_is_valid>
 801ac26:	f080 0001 	eor.w	r0, r0, #1
 801ac2a:	b2c0      	uxtb	r0, r0
 801ac2c:	2800      	cmp	r0, #0
 801ac2e:	d178      	bne.n	801ad22 <rcl_init+0x156>
 801ac30:	2f00      	cmp	r7, #0
 801ac32:	d076      	beq.n	801ad22 <rcl_init+0x156>
 801ac34:	683b      	ldr	r3, [r7, #0]
 801ac36:	2b00      	cmp	r3, #0
 801ac38:	d178      	bne.n	801ad2c <rcl_init+0x160>
 801ac3a:	2178      	movs	r1, #120	@ 0x78
 801ac3c:	2001      	movs	r0, #1
 801ac3e:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801ac42:	4798      	blx	r3
 801ac44:	4604      	mov	r4, r0
 801ac46:	6038      	str	r0, [r7, #0]
 801ac48:	2800      	cmp	r0, #0
 801ac4a:	f000 80b6 	beq.w	801adba <rcl_init+0x1ee>
 801ac4e:	a802      	add	r0, sp, #8
 801ac50:	f003 faea 	bl	801e228 <rmw_get_zero_initialized_context>
 801ac54:	a902      	add	r1, sp, #8
 801ac56:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801ac5a:	2250      	movs	r2, #80	@ 0x50
 801ac5c:	f007 fc47 	bl	80224ee <memcpy>
 801ac60:	ac19      	add	r4, sp, #100	@ 0x64
 801ac62:	f8d7 e000 	ldr.w	lr, [r7]
 801ac66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ac68:	46f4      	mov	ip, lr
 801ac6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ac6e:	6823      	ldr	r3, [r4, #0]
 801ac70:	f10e 0114 	add.w	r1, lr, #20
 801ac74:	4640      	mov	r0, r8
 801ac76:	f8cc 3000 	str.w	r3, [ip]
 801ac7a:	f000 f93f 	bl	801aefc <rcl_init_options_copy>
 801ac7e:	4604      	mov	r4, r0
 801ac80:	2800      	cmp	r0, #0
 801ac82:	d144      	bne.n	801ad0e <rcl_init+0x142>
 801ac84:	f8d7 9000 	ldr.w	r9, [r7]
 801ac88:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801ac8c:	f8c9 0020 	str.w	r0, [r9, #32]
 801ac90:	f8c9 5018 	str.w	r5, [r9, #24]
 801ac94:	f8c9 801c 	str.w	r8, [r9, #28]
 801ac98:	2d00      	cmp	r5, #0
 801ac9a:	d04e      	beq.n	801ad3a <rcl_init+0x16e>
 801ac9c:	2e00      	cmp	r6, #0
 801ac9e:	d04c      	beq.n	801ad3a <rcl_init+0x16e>
 801aca0:	2104      	movs	r1, #4
 801aca2:	4628      	mov	r0, r5
 801aca4:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801aca8:	4798      	blx	r3
 801acaa:	f8c9 0020 	str.w	r0, [r9, #32]
 801acae:	f8d7 9000 	ldr.w	r9, [r7]
 801acb2:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801acb6:	46ca      	mov	sl, r9
 801acb8:	b343      	cbz	r3, 801ad0c <rcl_init+0x140>
 801acba:	2d01      	cmp	r5, #1
 801acbc:	f178 0300 	sbcs.w	r3, r8, #0
 801acc0:	db3b      	blt.n	801ad3a <rcl_init+0x16e>
 801acc2:	2400      	movs	r4, #0
 801acc4:	3e04      	subs	r6, #4
 801acc6:	46a1      	mov	r9, r4
 801acc8:	e00b      	b.n	801ace2 <rcl_init+0x116>
 801acca:	6831      	ldr	r1, [r6, #0]
 801accc:	f007 fc0f 	bl	80224ee <memcpy>
 801acd0:	3401      	adds	r4, #1
 801acd2:	f149 0900 	adc.w	r9, r9, #0
 801acd6:	45c8      	cmp	r8, r9
 801acd8:	bf08      	it	eq
 801acda:	42a5      	cmpeq	r5, r4
 801acdc:	d02b      	beq.n	801ad36 <rcl_init+0x16a>
 801acde:	f8d7 a000 	ldr.w	sl, [r7]
 801ace2:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801ace6:	f7e5 fb05 	bl	80002f4 <strlen>
 801acea:	1c42      	adds	r2, r0, #1
 801acec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801acee:	4610      	mov	r0, r2
 801acf0:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801acf2:	f8da a020 	ldr.w	sl, [sl, #32]
 801acf6:	9201      	str	r2, [sp, #4]
 801acf8:	4798      	blx	r3
 801acfa:	683b      	ldr	r3, [r7, #0]
 801acfc:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801ad00:	6a1b      	ldr	r3, [r3, #32]
 801ad02:	9a01      	ldr	r2, [sp, #4]
 801ad04:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ad08:	2800      	cmp	r0, #0
 801ad0a:	d1de      	bne.n	801acca <rcl_init+0xfe>
 801ad0c:	240a      	movs	r4, #10
 801ad0e:	4638      	mov	r0, r7
 801ad10:	f7ff fefc 	bl	801ab0c <__cleanup_context>
 801ad14:	4620      	mov	r0, r4
 801ad16:	b01e      	add	sp, #120	@ 0x78
 801ad18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad1c:	2900      	cmp	r1, #0
 801ad1e:	f43f af6e 	beq.w	801abfe <rcl_init+0x32>
 801ad22:	240b      	movs	r4, #11
 801ad24:	4620      	mov	r0, r4
 801ad26:	b01e      	add	sp, #120	@ 0x78
 801ad28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad2c:	2464      	movs	r4, #100	@ 0x64
 801ad2e:	4620      	mov	r0, r4
 801ad30:	b01e      	add	sp, #120	@ 0x78
 801ad32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad36:	f8d7 9000 	ldr.w	r9, [r7]
 801ad3a:	4926      	ldr	r1, [pc, #152]	@ (801add4 <rcl_init+0x208>)
 801ad3c:	680b      	ldr	r3, [r1, #0]
 801ad3e:	3301      	adds	r3, #1
 801ad40:	d036      	beq.n	801adb0 <rcl_init+0x1e4>
 801ad42:	461a      	mov	r2, r3
 801ad44:	2400      	movs	r4, #0
 801ad46:	600b      	str	r3, [r1, #0]
 801ad48:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801ad4c:	607b      	str	r3, [r7, #4]
 801ad4e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801ad50:	3301      	adds	r3, #1
 801ad52:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801ad56:	d034      	beq.n	801adc2 <rcl_init+0x1f6>
 801ad58:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 801ad5c:	b93b      	cbnz	r3, 801ad6e <rcl_init+0x1a2>
 801ad5e:	3030      	adds	r0, #48	@ 0x30
 801ad60:	f000 f93a 	bl	801afd8 <rcl_get_localhost_only>
 801ad64:	4604      	mov	r4, r0
 801ad66:	2800      	cmp	r0, #0
 801ad68:	d1d1      	bne.n	801ad0e <rcl_init+0x142>
 801ad6a:	683b      	ldr	r3, [r7, #0]
 801ad6c:	6958      	ldr	r0, [r3, #20]
 801ad6e:	aa18      	add	r2, sp, #96	@ 0x60
 801ad70:	a917      	add	r1, sp, #92	@ 0x5c
 801ad72:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801ad74:	f001 fb6e 	bl	801c454 <rcl_validate_enclave_name>
 801ad78:	4604      	mov	r4, r0
 801ad7a:	2800      	cmp	r0, #0
 801ad7c:	d1c7      	bne.n	801ad0e <rcl_init+0x142>
 801ad7e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ad80:	b9eb      	cbnz	r3, 801adbe <rcl_init+0x1f2>
 801ad82:	6839      	ldr	r1, [r7, #0]
 801ad84:	694b      	ldr	r3, [r1, #20]
 801ad86:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801ad8a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801ad8c:	f000 fc72 	bl	801b674 <rcl_get_security_options_from_environment>
 801ad90:	4604      	mov	r4, r0
 801ad92:	2800      	cmp	r0, #0
 801ad94:	d1bb      	bne.n	801ad0e <rcl_init+0x142>
 801ad96:	6839      	ldr	r1, [r7, #0]
 801ad98:	6948      	ldr	r0, [r1, #20]
 801ad9a:	3128      	adds	r1, #40	@ 0x28
 801ad9c:	3018      	adds	r0, #24
 801ad9e:	f003 fdd5 	bl	801e94c <rmw_init>
 801ada2:	4604      	mov	r4, r0
 801ada4:	2800      	cmp	r0, #0
 801ada6:	d0bd      	beq.n	801ad24 <rcl_init+0x158>
 801ada8:	f7ff fe8c 	bl	801aac4 <rcl_convert_rmw_ret_to_rcl_ret>
 801adac:	4604      	mov	r4, r0
 801adae:	e7ae      	b.n	801ad0e <rcl_init+0x142>
 801adb0:	2201      	movs	r2, #1
 801adb2:	461c      	mov	r4, r3
 801adb4:	600a      	str	r2, [r1, #0]
 801adb6:	4613      	mov	r3, r2
 801adb8:	e7c6      	b.n	801ad48 <rcl_init+0x17c>
 801adba:	240a      	movs	r4, #10
 801adbc:	e7b2      	b.n	801ad24 <rcl_init+0x158>
 801adbe:	2401      	movs	r4, #1
 801adc0:	e7a5      	b.n	801ad0e <rcl_init+0x142>
 801adc2:	3024      	adds	r0, #36	@ 0x24
 801adc4:	f006 f87c 	bl	8020ec0 <rcl_get_default_domain_id>
 801adc8:	4604      	mov	r4, r0
 801adca:	2800      	cmp	r0, #0
 801adcc:	d19f      	bne.n	801ad0e <rcl_init+0x142>
 801adce:	683b      	ldr	r3, [r7, #0]
 801add0:	6958      	ldr	r0, [r3, #20]
 801add2:	e7c1      	b.n	801ad58 <rcl_init+0x18c>
 801add4:	24069278 	.word	0x24069278

0801add8 <rcl_get_zero_initialized_init_options>:
 801add8:	2000      	movs	r0, #0
 801adda:	4770      	bx	lr

0801addc <rcl_init_options_init>:
 801addc:	b084      	sub	sp, #16
 801adde:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ade0:	b097      	sub	sp, #92	@ 0x5c
 801ade2:	ae1d      	add	r6, sp, #116	@ 0x74
 801ade4:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 801ade8:	2800      	cmp	r0, #0
 801adea:	d058      	beq.n	801ae9e <rcl_init_options_init+0xc2>
 801adec:	6803      	ldr	r3, [r0, #0]
 801adee:	4605      	mov	r5, r0
 801adf0:	b133      	cbz	r3, 801ae00 <rcl_init_options_init+0x24>
 801adf2:	2464      	movs	r4, #100	@ 0x64
 801adf4:	4620      	mov	r0, r4
 801adf6:	b017      	add	sp, #92	@ 0x5c
 801adf8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801adfc:	b004      	add	sp, #16
 801adfe:	4770      	bx	lr
 801ae00:	4630      	mov	r0, r6
 801ae02:	f7fa fb51 	bl	80154a8 <rcutils_allocator_is_valid>
 801ae06:	2800      	cmp	r0, #0
 801ae08:	d049      	beq.n	801ae9e <rcl_init_options_init+0xc2>
 801ae0a:	46b4      	mov	ip, r6
 801ae0c:	ac11      	add	r4, sp, #68	@ 0x44
 801ae0e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ae12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ae14:	f8dc 3000 	ldr.w	r3, [ip]
 801ae18:	2050      	movs	r0, #80	@ 0x50
 801ae1a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801ae1c:	6023      	str	r3, [r4, #0]
 801ae1e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ae20:	4798      	blx	r3
 801ae22:	4604      	mov	r4, r0
 801ae24:	6028      	str	r0, [r5, #0]
 801ae26:	2800      	cmp	r0, #0
 801ae28:	d03b      	beq.n	801aea2 <rcl_init_options_init+0xc6>
 801ae2a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801ae2e:	4686      	mov	lr, r0
 801ae30:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ae34:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801ae38:	f8dc 3000 	ldr.w	r3, [ip]
 801ae3c:	a802      	add	r0, sp, #8
 801ae3e:	f8ce 3000 	str.w	r3, [lr]
 801ae42:	f003 fa05 	bl	801e250 <rmw_get_zero_initialized_init_options>
 801ae46:	f10d 0e08 	add.w	lr, sp, #8
 801ae4a:	f104 0c18 	add.w	ip, r4, #24
 801ae4e:	682f      	ldr	r7, [r5, #0]
 801ae50:	ac20      	add	r4, sp, #128	@ 0x80
 801ae52:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ae56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ae5a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ae5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ae62:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ae66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ae6a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801ae6e:	e88c 0003 	stmia.w	ip, {r0, r1}
 801ae72:	e894 0003 	ldmia.w	r4, {r0, r1}
 801ae76:	e88d 0003 	stmia.w	sp, {r0, r1}
 801ae7a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801ae7e:	f107 0018 	add.w	r0, r7, #24
 801ae82:	f003 fc65 	bl	801e750 <rmw_init_options_init>
 801ae86:	4604      	mov	r4, r0
 801ae88:	2800      	cmp	r0, #0
 801ae8a:	d0b3      	beq.n	801adf4 <rcl_init_options_init+0x18>
 801ae8c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801ae8e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ae90:	6828      	ldr	r0, [r5, #0]
 801ae92:	4798      	blx	r3
 801ae94:	4620      	mov	r0, r4
 801ae96:	f7ff fe15 	bl	801aac4 <rcl_convert_rmw_ret_to_rcl_ret>
 801ae9a:	4604      	mov	r4, r0
 801ae9c:	e7aa      	b.n	801adf4 <rcl_init_options_init+0x18>
 801ae9e:	240b      	movs	r4, #11
 801aea0:	e7a8      	b.n	801adf4 <rcl_init_options_init+0x18>
 801aea2:	240a      	movs	r4, #10
 801aea4:	e7a6      	b.n	801adf4 <rcl_init_options_init+0x18>
 801aea6:	bf00      	nop

0801aea8 <rcl_init_options_fini>:
 801aea8:	b530      	push	{r4, r5, lr}
 801aeaa:	b087      	sub	sp, #28
 801aeac:	b1f0      	cbz	r0, 801aeec <rcl_init_options_fini+0x44>
 801aeae:	6803      	ldr	r3, [r0, #0]
 801aeb0:	4604      	mov	r4, r0
 801aeb2:	b1db      	cbz	r3, 801aeec <rcl_init_options_fini+0x44>
 801aeb4:	469c      	mov	ip, r3
 801aeb6:	f10d 0e04 	add.w	lr, sp, #4
 801aeba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801aebe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801aec2:	f8dc 3000 	ldr.w	r3, [ip]
 801aec6:	a801      	add	r0, sp, #4
 801aec8:	f8ce 3000 	str.w	r3, [lr]
 801aecc:	f7fa faec 	bl	80154a8 <rcutils_allocator_is_valid>
 801aed0:	b160      	cbz	r0, 801aeec <rcl_init_options_fini+0x44>
 801aed2:	6820      	ldr	r0, [r4, #0]
 801aed4:	3018      	adds	r0, #24
 801aed6:	f003 fcf5 	bl	801e8c4 <rmw_init_options_fini>
 801aeda:	4605      	mov	r5, r0
 801aedc:	b950      	cbnz	r0, 801aef4 <rcl_init_options_fini+0x4c>
 801aede:	6820      	ldr	r0, [r4, #0]
 801aee0:	9b02      	ldr	r3, [sp, #8]
 801aee2:	9905      	ldr	r1, [sp, #20]
 801aee4:	4798      	blx	r3
 801aee6:	4628      	mov	r0, r5
 801aee8:	b007      	add	sp, #28
 801aeea:	bd30      	pop	{r4, r5, pc}
 801aeec:	250b      	movs	r5, #11
 801aeee:	4628      	mov	r0, r5
 801aef0:	b007      	add	sp, #28
 801aef2:	bd30      	pop	{r4, r5, pc}
 801aef4:	f7ff fde6 	bl	801aac4 <rcl_convert_rmw_ret_to_rcl_ret>
 801aef8:	4605      	mov	r5, r0
 801aefa:	e7f8      	b.n	801aeee <rcl_init_options_fini+0x46>

0801aefc <rcl_init_options_copy>:
 801aefc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af00:	b094      	sub	sp, #80	@ 0x50
 801af02:	2800      	cmp	r0, #0
 801af04:	d05b      	beq.n	801afbe <rcl_init_options_copy+0xc2>
 801af06:	4604      	mov	r4, r0
 801af08:	6800      	ldr	r0, [r0, #0]
 801af0a:	2800      	cmp	r0, #0
 801af0c:	d057      	beq.n	801afbe <rcl_init_options_copy+0xc2>
 801af0e:	460e      	mov	r6, r1
 801af10:	f7fa faca 	bl	80154a8 <rcutils_allocator_is_valid>
 801af14:	2e00      	cmp	r6, #0
 801af16:	d052      	beq.n	801afbe <rcl_init_options_copy+0xc2>
 801af18:	f080 0001 	eor.w	r0, r0, #1
 801af1c:	b2c0      	uxtb	r0, r0
 801af1e:	2800      	cmp	r0, #0
 801af20:	d14d      	bne.n	801afbe <rcl_init_options_copy+0xc2>
 801af22:	6833      	ldr	r3, [r6, #0]
 801af24:	b123      	cbz	r3, 801af30 <rcl_init_options_copy+0x34>
 801af26:	2464      	movs	r4, #100	@ 0x64
 801af28:	4620      	mov	r0, r4
 801af2a:	b014      	add	sp, #80	@ 0x50
 801af2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af30:	6827      	ldr	r7, [r4, #0]
 801af32:	ad0f      	add	r5, sp, #60	@ 0x3c
 801af34:	46bc      	mov	ip, r7
 801af36:	f8d7 8000 	ldr.w	r8, [r7]
 801af3a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801af3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801af40:	f8dc 3000 	ldr.w	r3, [ip]
 801af44:	2050      	movs	r0, #80	@ 0x50
 801af46:	4619      	mov	r1, r3
 801af48:	602b      	str	r3, [r5, #0]
 801af4a:	47c0      	blx	r8
 801af4c:	4605      	mov	r5, r0
 801af4e:	6030      	str	r0, [r6, #0]
 801af50:	b3d0      	cbz	r0, 801afc8 <rcl_init_options_copy+0xcc>
 801af52:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 801af56:	4686      	mov	lr, r0
 801af58:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801af5c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801af60:	f8dc 3000 	ldr.w	r3, [ip]
 801af64:	4668      	mov	r0, sp
 801af66:	f8ce 3000 	str.w	r3, [lr]
 801af6a:	f003 f971 	bl	801e250 <rmw_get_zero_initialized_init_options>
 801af6e:	46ee      	mov	lr, sp
 801af70:	f105 0c18 	add.w	ip, r5, #24
 801af74:	6824      	ldr	r4, [r4, #0]
 801af76:	6835      	ldr	r5, [r6, #0]
 801af78:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801af7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801af80:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801af84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801af88:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801af8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801af90:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801af94:	e88c 0003 	stmia.w	ip, {r0, r1}
 801af98:	f104 0018 	add.w	r0, r4, #24
 801af9c:	f105 0118 	add.w	r1, r5, #24
 801afa0:	f003 fc3e 	bl	801e820 <rmw_init_options_copy>
 801afa4:	4604      	mov	r4, r0
 801afa6:	2800      	cmp	r0, #0
 801afa8:	d0be      	beq.n	801af28 <rcl_init_options_copy+0x2c>
 801afaa:	f7fa fa8b 	bl	80154c4 <rcutils_get_error_string>
 801afae:	f7fa fa9f 	bl	80154f0 <rcutils_reset_error>
 801afb2:	4630      	mov	r0, r6
 801afb4:	f7ff ff78 	bl	801aea8 <rcl_init_options_fini>
 801afb8:	b140      	cbz	r0, 801afcc <rcl_init_options_copy+0xd0>
 801afba:	4604      	mov	r4, r0
 801afbc:	e7b4      	b.n	801af28 <rcl_init_options_copy+0x2c>
 801afbe:	240b      	movs	r4, #11
 801afc0:	4620      	mov	r0, r4
 801afc2:	b014      	add	sp, #80	@ 0x50
 801afc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801afc8:	240a      	movs	r4, #10
 801afca:	e7ad      	b.n	801af28 <rcl_init_options_copy+0x2c>
 801afcc:	4620      	mov	r0, r4
 801afce:	b014      	add	sp, #80	@ 0x50
 801afd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801afd4:	f7ff bd76 	b.w	801aac4 <rcl_convert_rmw_ret_to_rcl_ret>

0801afd8 <rcl_get_localhost_only>:
 801afd8:	b510      	push	{r4, lr}
 801afda:	2300      	movs	r3, #0
 801afdc:	b082      	sub	sp, #8
 801afde:	9301      	str	r3, [sp, #4]
 801afe0:	b1b8      	cbz	r0, 801b012 <rcl_get_localhost_only+0x3a>
 801afe2:	4604      	mov	r4, r0
 801afe4:	a901      	add	r1, sp, #4
 801afe6:	480c      	ldr	r0, [pc, #48]	@ (801b018 <rcl_get_localhost_only+0x40>)
 801afe8:	f002 fe4e 	bl	801dc88 <rcutils_get_env>
 801afec:	b110      	cbz	r0, 801aff4 <rcl_get_localhost_only+0x1c>
 801afee:	2001      	movs	r0, #1
 801aff0:	b002      	add	sp, #8
 801aff2:	bd10      	pop	{r4, pc}
 801aff4:	9b01      	ldr	r3, [sp, #4]
 801aff6:	b113      	cbz	r3, 801affe <rcl_get_localhost_only+0x26>
 801aff8:	781a      	ldrb	r2, [r3, #0]
 801affa:	2a31      	cmp	r2, #49	@ 0x31
 801affc:	d004      	beq.n	801b008 <rcl_get_localhost_only+0x30>
 801affe:	2302      	movs	r3, #2
 801b000:	2000      	movs	r0, #0
 801b002:	7023      	strb	r3, [r4, #0]
 801b004:	b002      	add	sp, #8
 801b006:	bd10      	pop	{r4, pc}
 801b008:	785b      	ldrb	r3, [r3, #1]
 801b00a:	2b00      	cmp	r3, #0
 801b00c:	d1f7      	bne.n	801affe <rcl_get_localhost_only+0x26>
 801b00e:	2301      	movs	r3, #1
 801b010:	e7f6      	b.n	801b000 <rcl_get_localhost_only+0x28>
 801b012:	200b      	movs	r0, #11
 801b014:	b002      	add	sp, #8
 801b016:	bd10      	pop	{r4, pc}
 801b018:	0802531c 	.word	0x0802531c

0801b01c <rcl_get_zero_initialized_node>:
 801b01c:	4a03      	ldr	r2, [pc, #12]	@ (801b02c <rcl_get_zero_initialized_node+0x10>)
 801b01e:	4603      	mov	r3, r0
 801b020:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b024:	e883 0003 	stmia.w	r3, {r0, r1}
 801b028:	4618      	mov	r0, r3
 801b02a:	4770      	bx	lr
 801b02c:	08025344 	.word	0x08025344

0801b030 <rcl_node_init>:
 801b030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b034:	b0a9      	sub	sp, #164	@ 0xa4
 801b036:	4604      	mov	r4, r0
 801b038:	460e      	mov	r6, r1
 801b03a:	4615      	mov	r5, r2
 801b03c:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 801b040:	a823      	add	r0, sp, #140	@ 0x8c
 801b042:	461f      	mov	r7, r3
 801b044:	f006 f9b0 	bl	80213a8 <rcl_guard_condition_get_default_options>
 801b048:	f1b8 0f00 	cmp.w	r8, #0
 801b04c:	f000 80f3 	beq.w	801b236 <rcl_node_init+0x206>
 801b050:	4640      	mov	r0, r8
 801b052:	f7fa fa29 	bl	80154a8 <rcutils_allocator_is_valid>
 801b056:	2d00      	cmp	r5, #0
 801b058:	bf18      	it	ne
 801b05a:	2c00      	cmpne	r4, #0
 801b05c:	f080 0001 	eor.w	r0, r0, #1
 801b060:	bf0c      	ite	eq
 801b062:	f04f 0c01 	moveq.w	ip, #1
 801b066:	f04f 0c00 	movne.w	ip, #0
 801b06a:	2e00      	cmp	r6, #0
 801b06c:	bf08      	it	eq
 801b06e:	f04c 0c01 	orreq.w	ip, ip, #1
 801b072:	ea4c 0c00 	orr.w	ip, ip, r0
 801b076:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 801b07a:	f040 80dc 	bne.w	801b236 <rcl_node_init+0x206>
 801b07e:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801b082:	f1ba 0f00 	cmp.w	sl, #0
 801b086:	f040 80fc 	bne.w	801b282 <rcl_node_init+0x252>
 801b08a:	2f00      	cmp	r7, #0
 801b08c:	f000 80d3 	beq.w	801b236 <rcl_node_init+0x206>
 801b090:	4638      	mov	r0, r7
 801b092:	f7ff fd35 	bl	801ab00 <rcl_context_is_valid>
 801b096:	4683      	mov	fp, r0
 801b098:	2800      	cmp	r0, #0
 801b09a:	f000 80d2 	beq.w	801b242 <rcl_node_init+0x212>
 801b09e:	4652      	mov	r2, sl
 801b0a0:	4630      	mov	r0, r6
 801b0a2:	a922      	add	r1, sp, #136	@ 0x88
 801b0a4:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 801b0a8:	f003 fa84 	bl	801e5b4 <rmw_validate_node_name>
 801b0ac:	4682      	mov	sl, r0
 801b0ae:	2800      	cmp	r0, #0
 801b0b0:	f040 80c3 	bne.w	801b23a <rcl_node_init+0x20a>
 801b0b4:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801b0b6:	2800      	cmp	r0, #0
 801b0b8:	f040 80f1 	bne.w	801b29e <rcl_node_init+0x26e>
 801b0bc:	4628      	mov	r0, r5
 801b0be:	f7e5 f919 	bl	80002f4 <strlen>
 801b0c2:	2800      	cmp	r0, #0
 801b0c4:	f040 80c0 	bne.w	801b248 <rcl_node_init+0x218>
 801b0c8:	4d79      	ldr	r5, [pc, #484]	@ (801b2b0 <rcl_node_init+0x280>)
 801b0ca:	a922      	add	r1, sp, #136	@ 0x88
 801b0cc:	2200      	movs	r2, #0
 801b0ce:	4628      	mov	r0, r5
 801b0d0:	f003 fa52 	bl	801e578 <rmw_validate_namespace>
 801b0d4:	4682      	mov	sl, r0
 801b0d6:	2800      	cmp	r0, #0
 801b0d8:	f040 80af 	bne.w	801b23a <rcl_node_init+0x20a>
 801b0dc:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801b0de:	2800      	cmp	r0, #0
 801b0e0:	f040 80d5 	bne.w	801b28e <rcl_node_init+0x25e>
 801b0e4:	f8d8 3000 	ldr.w	r3, [r8]
 801b0e8:	2078      	movs	r0, #120	@ 0x78
 801b0ea:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b0ee:	4798      	blx	r3
 801b0f0:	4682      	mov	sl, r0
 801b0f2:	6060      	str	r0, [r4, #4]
 801b0f4:	2800      	cmp	r0, #0
 801b0f6:	f000 80cf 	beq.w	801b298 <rcl_node_init+0x268>
 801b0fa:	2200      	movs	r2, #0
 801b0fc:	2300      	movs	r3, #0
 801b0fe:	a808      	add	r0, sp, #32
 801b100:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 801b104:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 801b108:	f000 f902 	bl	801b310 <rcl_node_get_default_options>
 801b10c:	a908      	add	r1, sp, #32
 801b10e:	4650      	mov	r0, sl
 801b110:	2268      	movs	r2, #104	@ 0x68
 801b112:	f007 f9ec 	bl	80224ee <memcpy>
 801b116:	6861      	ldr	r1, [r4, #4]
 801b118:	4640      	mov	r0, r8
 801b11a:	6027      	str	r7, [r4, #0]
 801b11c:	f000 f906 	bl	801b32c <rcl_node_options_copy>
 801b120:	2800      	cmp	r0, #0
 801b122:	d158      	bne.n	801b1d6 <rcl_node_init+0x1a6>
 801b124:	4628      	mov	r0, r5
 801b126:	f7e5 f8e5 	bl	80002f4 <strlen>
 801b12a:	4428      	add	r0, r5
 801b12c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801b130:	e9cd 5603 	strd	r5, r6, [sp, #12]
 801b134:	2b2f      	cmp	r3, #47	@ 0x2f
 801b136:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801b13a:	9300      	str	r3, [sp, #0]
 801b13c:	bf0c      	ite	eq
 801b13e:	4b5d      	ldreq	r3, [pc, #372]	@ (801b2b4 <rcl_node_init+0x284>)
 801b140:	4b5d      	ldrne	r3, [pc, #372]	@ (801b2b8 <rcl_node_init+0x288>)
 801b142:	9302      	str	r3, [sp, #8]
 801b144:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b148:	9301      	str	r3, [sp, #4]
 801b14a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801b14e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801b152:	f002 fdc1 	bl	801dcd8 <rcutils_format_string_limit>
 801b156:	6823      	ldr	r3, [r4, #0]
 801b158:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 801b15c:	4631      	mov	r1, r6
 801b15e:	6818      	ldr	r0, [r3, #0]
 801b160:	462a      	mov	r2, r5
 801b162:	6866      	ldr	r6, [r4, #4]
 801b164:	3028      	adds	r0, #40	@ 0x28
 801b166:	f003 fe4b 	bl	801ee00 <rmw_create_node>
 801b16a:	6863      	ldr	r3, [r4, #4]
 801b16c:	66b0      	str	r0, [r6, #104]	@ 0x68
 801b16e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801b170:	2800      	cmp	r0, #0
 801b172:	d032      	beq.n	801b1da <rcl_node_init+0x1aa>
 801b174:	f003 fed4 	bl	801ef20 <rmw_node_get_graph_guard_condition>
 801b178:	4682      	mov	sl, r0
 801b17a:	b360      	cbz	r0, 801b1d6 <rcl_node_init+0x1a6>
 801b17c:	f8d8 3000 	ldr.w	r3, [r8]
 801b180:	2008      	movs	r0, #8
 801b182:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b186:	6866      	ldr	r6, [r4, #4]
 801b188:	4798      	blx	r3
 801b18a:	6863      	ldr	r3, [r4, #4]
 801b18c:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801b18e:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 801b192:	f1bb 0f00 	cmp.w	fp, #0
 801b196:	d020      	beq.n	801b1da <rcl_node_init+0x1aa>
 801b198:	a806      	add	r0, sp, #24
 801b19a:	ae23      	add	r6, sp, #140	@ 0x8c
 801b19c:	f006 f82a 	bl	80211f4 <rcl_get_zero_initialized_guard_condition>
 801b1a0:	a806      	add	r0, sp, #24
 801b1a2:	6863      	ldr	r3, [r4, #4]
 801b1a4:	46c4      	mov	ip, r8
 801b1a6:	c803      	ldmia	r0, {r0, r1}
 801b1a8:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 801b1ac:	e88b 0003 	stmia.w	fp, {r0, r1}
 801b1b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b1b4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801b1b6:	f8dc 3000 	ldr.w	r3, [ip]
 801b1ba:	6033      	str	r3, [r6, #0]
 801b1bc:	ab28      	add	r3, sp, #160	@ 0xa0
 801b1be:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801b1c2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801b1c6:	4651      	mov	r1, sl
 801b1c8:	463a      	mov	r2, r7
 801b1ca:	4670      	mov	r0, lr
 801b1cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b1ce:	f006 f869 	bl	80212a4 <rcl_guard_condition_init_from_rmw>
 801b1d2:	4682      	mov	sl, r0
 801b1d4:	b328      	cbz	r0, 801b222 <rcl_node_init+0x1f2>
 801b1d6:	6863      	ldr	r3, [r4, #4]
 801b1d8:	b1f3      	cbz	r3, 801b218 <rcl_node_init+0x1e8>
 801b1da:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801b1dc:	b128      	cbz	r0, 801b1ea <rcl_node_init+0x1ba>
 801b1de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b1e2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b1e6:	4798      	blx	r3
 801b1e8:	6863      	ldr	r3, [r4, #4]
 801b1ea:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801b1ec:	b110      	cbz	r0, 801b1f4 <rcl_node_init+0x1c4>
 801b1ee:	f003 fe19 	bl	801ee24 <rmw_destroy_node>
 801b1f2:	6863      	ldr	r3, [r4, #4]
 801b1f4:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801b1f6:	b148      	cbz	r0, 801b20c <rcl_node_init+0x1dc>
 801b1f8:	f006 f8b0 	bl	802135c <rcl_guard_condition_fini>
 801b1fc:	6863      	ldr	r3, [r4, #4]
 801b1fe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b202:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801b204:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b208:	4798      	blx	r3
 801b20a:	6863      	ldr	r3, [r4, #4]
 801b20c:	4618      	mov	r0, r3
 801b20e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b212:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b216:	4798      	blx	r3
 801b218:	2300      	movs	r3, #0
 801b21a:	f04f 0a01 	mov.w	sl, #1
 801b21e:	e9c4 3300 	strd	r3, r3, [r4]
 801b222:	f1b9 0f00 	cmp.w	r9, #0
 801b226:	d008      	beq.n	801b23a <rcl_node_init+0x20a>
 801b228:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b22c:	4628      	mov	r0, r5
 801b22e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b232:	4798      	blx	r3
 801b234:	e001      	b.n	801b23a <rcl_node_init+0x20a>
 801b236:	f04f 0a0b 	mov.w	sl, #11
 801b23a:	4650      	mov	r0, sl
 801b23c:	b029      	add	sp, #164	@ 0xa4
 801b23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b242:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 801b246:	e7f8      	b.n	801b23a <rcl_node_init+0x20a>
 801b248:	782b      	ldrb	r3, [r5, #0]
 801b24a:	2b2f      	cmp	r3, #47	@ 0x2f
 801b24c:	f43f af3d 	beq.w	801b0ca <rcl_node_init+0x9a>
 801b250:	9503      	str	r5, [sp, #12]
 801b252:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801b256:	9300      	str	r3, [sp, #0]
 801b258:	4b18      	ldr	r3, [pc, #96]	@ (801b2bc <rcl_node_init+0x28c>)
 801b25a:	9302      	str	r3, [sp, #8]
 801b25c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b260:	9301      	str	r3, [sp, #4]
 801b262:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801b266:	f002 fd37 	bl	801dcd8 <rcutils_format_string_limit>
 801b26a:	4605      	mov	r5, r0
 801b26c:	b1e0      	cbz	r0, 801b2a8 <rcl_node_init+0x278>
 801b26e:	2200      	movs	r2, #0
 801b270:	a922      	add	r1, sp, #136	@ 0x88
 801b272:	9222      	str	r2, [sp, #136]	@ 0x88
 801b274:	f003 f980 	bl	801e578 <rmw_validate_namespace>
 801b278:	4682      	mov	sl, r0
 801b27a:	2800      	cmp	r0, #0
 801b27c:	d1d4      	bne.n	801b228 <rcl_node_init+0x1f8>
 801b27e:	46d9      	mov	r9, fp
 801b280:	e72c      	b.n	801b0dc <rcl_node_init+0xac>
 801b282:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 801b286:	4650      	mov	r0, sl
 801b288:	b029      	add	sp, #164	@ 0xa4
 801b28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b28e:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 801b292:	f003 f983 	bl	801e59c <rmw_namespace_validation_result_string>
 801b296:	e7c4      	b.n	801b222 <rcl_node_init+0x1f2>
 801b298:	f04f 0a0a 	mov.w	sl, #10
 801b29c:	e7c1      	b.n	801b222 <rcl_node_init+0x1f2>
 801b29e:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 801b2a2:	f003 f9db 	bl	801e65c <rmw_node_name_validation_result_string>
 801b2a6:	e7c8      	b.n	801b23a <rcl_node_init+0x20a>
 801b2a8:	f04f 0a0a 	mov.w	sl, #10
 801b2ac:	e7c5      	b.n	801b23a <rcl_node_init+0x20a>
 801b2ae:	bf00      	nop
 801b2b0:	08025334 	.word	0x08025334
 801b2b4:	080249b8 	.word	0x080249b8
 801b2b8:	0802533c 	.word	0x0802533c
 801b2bc:	08025338 	.word	0x08025338

0801b2c0 <rcl_node_is_valid>:
 801b2c0:	b130      	cbz	r0, 801b2d0 <rcl_node_is_valid+0x10>
 801b2c2:	6843      	ldr	r3, [r0, #4]
 801b2c4:	b123      	cbz	r3, 801b2d0 <rcl_node_is_valid+0x10>
 801b2c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b2c8:	b113      	cbz	r3, 801b2d0 <rcl_node_is_valid+0x10>
 801b2ca:	6800      	ldr	r0, [r0, #0]
 801b2cc:	f7ff bc18 	b.w	801ab00 <rcl_context_is_valid>
 801b2d0:	2000      	movs	r0, #0
 801b2d2:	4770      	bx	lr

0801b2d4 <rcl_node_get_name>:
 801b2d4:	b120      	cbz	r0, 801b2e0 <rcl_node_get_name+0xc>
 801b2d6:	6840      	ldr	r0, [r0, #4]
 801b2d8:	b110      	cbz	r0, 801b2e0 <rcl_node_get_name+0xc>
 801b2da:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801b2dc:	b100      	cbz	r0, 801b2e0 <rcl_node_get_name+0xc>
 801b2de:	6880      	ldr	r0, [r0, #8]
 801b2e0:	4770      	bx	lr
 801b2e2:	bf00      	nop

0801b2e4 <rcl_node_get_namespace>:
 801b2e4:	b120      	cbz	r0, 801b2f0 <rcl_node_get_namespace+0xc>
 801b2e6:	6840      	ldr	r0, [r0, #4]
 801b2e8:	b110      	cbz	r0, 801b2f0 <rcl_node_get_namespace+0xc>
 801b2ea:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801b2ec:	b100      	cbz	r0, 801b2f0 <rcl_node_get_namespace+0xc>
 801b2ee:	68c0      	ldr	r0, [r0, #12]
 801b2f0:	4770      	bx	lr
 801b2f2:	bf00      	nop

0801b2f4 <rcl_node_get_options>:
 801b2f4:	b128      	cbz	r0, 801b302 <rcl_node_get_options+0xe>
 801b2f6:	6840      	ldr	r0, [r0, #4]
 801b2f8:	b118      	cbz	r0, 801b302 <rcl_node_get_options+0xe>
 801b2fa:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	bf08      	it	eq
 801b300:	2000      	moveq	r0, #0
 801b302:	4770      	bx	lr

0801b304 <rcl_node_get_rmw_handle>:
 801b304:	b110      	cbz	r0, 801b30c <rcl_node_get_rmw_handle+0x8>
 801b306:	6840      	ldr	r0, [r0, #4]
 801b308:	b100      	cbz	r0, 801b30c <rcl_node_get_rmw_handle+0x8>
 801b30a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801b30c:	4770      	bx	lr
 801b30e:	bf00      	nop

0801b310 <rcl_node_get_default_options>:
 801b310:	b510      	push	{r4, lr}
 801b312:	4604      	mov	r4, r0
 801b314:	2268      	movs	r2, #104	@ 0x68
 801b316:	2100      	movs	r1, #0
 801b318:	f006 ffca 	bl	80222b0 <memset>
 801b31c:	4620      	mov	r0, r4
 801b31e:	f7fa f8b5 	bl	801548c <rcutils_get_default_allocator>
 801b322:	2301      	movs	r3, #1
 801b324:	4620      	mov	r0, r4
 801b326:	7523      	strb	r3, [r4, #20]
 801b328:	bd10      	pop	{r4, pc}
 801b32a:	bf00      	nop

0801b32c <rcl_node_options_copy>:
 801b32c:	2800      	cmp	r0, #0
 801b32e:	bf18      	it	ne
 801b330:	4288      	cmpne	r0, r1
 801b332:	d01b      	beq.n	801b36c <rcl_node_options_copy+0x40>
 801b334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b336:	fab1 f681 	clz	r6, r1
 801b33a:	460c      	mov	r4, r1
 801b33c:	0976      	lsrs	r6, r6, #5
 801b33e:	b199      	cbz	r1, 801b368 <rcl_node_options_copy+0x3c>
 801b340:	4605      	mov	r5, r0
 801b342:	8a87      	ldrh	r7, [r0, #20]
 801b344:	4684      	mov	ip, r0
 801b346:	468e      	mov	lr, r1
 801b348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b34a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b34e:	682b      	ldr	r3, [r5, #0]
 801b350:	2250      	movs	r2, #80	@ 0x50
 801b352:	f10c 0118 	add.w	r1, ip, #24
 801b356:	f104 0018 	add.w	r0, r4, #24
 801b35a:	f8ce 3000 	str.w	r3, [lr]
 801b35e:	82a7      	strh	r7, [r4, #20]
 801b360:	f007 f8c5 	bl	80224ee <memcpy>
 801b364:	4630      	mov	r0, r6
 801b366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b368:	200b      	movs	r0, #11
 801b36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b36c:	200b      	movs	r0, #11
 801b36e:	4770      	bx	lr

0801b370 <rcl_node_resolve_name>:
 801b370:	b082      	sub	sp, #8
 801b372:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b376:	b091      	sub	sp, #68	@ 0x44
 801b378:	ac1a      	add	r4, sp, #104	@ 0x68
 801b37a:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 801b37e:	e884 000c 	stmia.w	r4, {r2, r3}
 801b382:	2800      	cmp	r0, #0
 801b384:	d03d      	beq.n	801b402 <rcl_node_resolve_name+0x92>
 801b386:	460c      	mov	r4, r1
 801b388:	4605      	mov	r5, r0
 801b38a:	f7ff ffb3 	bl	801b2f4 <rcl_node_get_options>
 801b38e:	2800      	cmp	r0, #0
 801b390:	d03a      	beq.n	801b408 <rcl_node_resolve_name+0x98>
 801b392:	4628      	mov	r0, r5
 801b394:	f7ff ff9e 	bl	801b2d4 <rcl_node_get_name>
 801b398:	4606      	mov	r6, r0
 801b39a:	4628      	mov	r0, r5
 801b39c:	ad0b      	add	r5, sp, #44	@ 0x2c
 801b39e:	f7ff ffa1 	bl	801b2e4 <rcl_node_get_namespace>
 801b3a2:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 801b3a6:	4607      	mov	r7, r0
 801b3a8:	46ac      	mov	ip, r5
 801b3aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b3ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b3b2:	f8de 3000 	ldr.w	r3, [lr]
 801b3b6:	f8cc 3000 	str.w	r3, [ip]
 801b3ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b3bc:	b30b      	cbz	r3, 801b402 <rcl_node_resolve_name+0x92>
 801b3be:	4689      	mov	r9, r1
 801b3c0:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 801b3c4:	f002 fe00 	bl	801dfc8 <rcutils_get_zero_initialized_string_map>
 801b3c8:	ab10      	add	r3, sp, #64	@ 0x40
 801b3ca:	9008      	str	r0, [sp, #32]
 801b3cc:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801b3d0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b3d4:	2100      	movs	r1, #0
 801b3d6:	a808      	add	r0, sp, #32
 801b3d8:	e895 000c 	ldmia.w	r5, {r2, r3}
 801b3dc:	f002 fe6a 	bl	801e0b4 <rcutils_string_map_init>
 801b3e0:	4683      	mov	fp, r0
 801b3e2:	b1a0      	cbz	r0, 801b40e <rcl_node_resolve_name+0x9e>
 801b3e4:	f7fa f86e 	bl	80154c4 <rcutils_get_error_string>
 801b3e8:	f7fa f882 	bl	80154f0 <rcutils_reset_error>
 801b3ec:	f1bb 0f0a 	cmp.w	fp, #10
 801b3f0:	bf18      	it	ne
 801b3f2:	f04f 0b01 	movne.w	fp, #1
 801b3f6:	4658      	mov	r0, fp
 801b3f8:	b011      	add	sp, #68	@ 0x44
 801b3fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3fe:	b002      	add	sp, #8
 801b400:	4770      	bx	lr
 801b402:	f04f 0b0b 	mov.w	fp, #11
 801b406:	e7f6      	b.n	801b3f6 <rcl_node_resolve_name+0x86>
 801b408:	f04f 0b01 	mov.w	fp, #1
 801b40c:	e7f3      	b.n	801b3f6 <rcl_node_resolve_name+0x86>
 801b40e:	9009      	str	r0, [sp, #36]	@ 0x24
 801b410:	9007      	str	r0, [sp, #28]
 801b412:	a808      	add	r0, sp, #32
 801b414:	f005 fee8 	bl	80211e8 <rcl_get_default_topic_name_substitutions>
 801b418:	4683      	mov	fp, r0
 801b41a:	b180      	cbz	r0, 801b43e <rcl_node_resolve_name+0xce>
 801b41c:	280a      	cmp	r0, #10
 801b41e:	a808      	add	r0, sp, #32
 801b420:	bf18      	it	ne
 801b422:	f04f 0b01 	movne.w	fp, #1
 801b426:	f002 fe85 	bl	801e134 <rcutils_string_map_fini>
 801b42a:	4604      	mov	r4, r0
 801b42c:	2800      	cmp	r0, #0
 801b42e:	d15b      	bne.n	801b4e8 <rcl_node_resolve_name+0x178>
 801b430:	4651      	mov	r1, sl
 801b432:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b434:	47c8      	blx	r9
 801b436:	4651      	mov	r1, sl
 801b438:	4620      	mov	r0, r4
 801b43a:	47c8      	blx	r9
 801b43c:	e7db      	b.n	801b3f6 <rcl_node_resolve_name+0x86>
 801b43e:	ab09      	add	r3, sp, #36	@ 0x24
 801b440:	46ec      	mov	ip, sp
 801b442:	9305      	str	r3, [sp, #20]
 801b444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b446:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b44a:	682b      	ldr	r3, [r5, #0]
 801b44c:	463a      	mov	r2, r7
 801b44e:	4631      	mov	r1, r6
 801b450:	4620      	mov	r0, r4
 801b452:	f8cc 3000 	str.w	r3, [ip]
 801b456:	ab08      	add	r3, sp, #32
 801b458:	f005 fd66 	bl	8020f28 <rcl_expand_topic_name>
 801b45c:	4683      	mov	fp, r0
 801b45e:	b9d8      	cbnz	r0, 801b498 <rcl_node_resolve_name+0x128>
 801b460:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801b462:	4602      	mov	r2, r0
 801b464:	9009      	str	r0, [sp, #36]	@ 0x24
 801b466:	a90a      	add	r1, sp, #40	@ 0x28
 801b468:	4620      	mov	r0, r4
 801b46a:	f002 ffb5 	bl	801e3d8 <rmw_validate_full_topic_name>
 801b46e:	bb50      	cbnz	r0, 801b4c6 <rcl_node_resolve_name+0x156>
 801b470:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801b472:	2d00      	cmp	r5, #0
 801b474:	d140      	bne.n	801b4f8 <rcl_node_resolve_name+0x188>
 801b476:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b478:	a808      	add	r0, sp, #32
 801b47a:	601c      	str	r4, [r3, #0]
 801b47c:	f002 fe5a 	bl	801e134 <rcutils_string_map_fini>
 801b480:	4683      	mov	fp, r0
 801b482:	2800      	cmp	r0, #0
 801b484:	d043      	beq.n	801b50e <rcl_node_resolve_name+0x19e>
 801b486:	f7fa f81d 	bl	80154c4 <rcutils_get_error_string>
 801b48a:	46a8      	mov	r8, r5
 801b48c:	f04f 0b01 	mov.w	fp, #1
 801b490:	462c      	mov	r4, r5
 801b492:	f7fa f82d 	bl	80154f0 <rcutils_reset_error>
 801b496:	e00a      	b.n	801b4ae <rcl_node_resolve_name+0x13e>
 801b498:	2867      	cmp	r0, #103	@ 0x67
 801b49a:	bf14      	ite	ne
 801b49c:	f04f 0800 	movne.w	r8, #0
 801b4a0:	f008 0801 	andeq.w	r8, r8, #1
 801b4a4:	9c07      	ldr	r4, [sp, #28]
 801b4a6:	a808      	add	r0, sp, #32
 801b4a8:	f002 fe44 	bl	801e134 <rcutils_string_map_fini>
 801b4ac:	bb50      	cbnz	r0, 801b504 <rcl_node_resolve_name+0x194>
 801b4ae:	4651      	mov	r1, sl
 801b4b0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b4b2:	47c8      	blx	r9
 801b4b4:	4651      	mov	r1, sl
 801b4b6:	4620      	mov	r0, r4
 801b4b8:	47c8      	blx	r9
 801b4ba:	f1b8 0f00 	cmp.w	r8, #0
 801b4be:	bf18      	it	ne
 801b4c0:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 801b4c4:	e797      	b.n	801b3f6 <rcl_node_resolve_name+0x86>
 801b4c6:	f7f9 fffd 	bl	80154c4 <rcutils_get_error_string>
 801b4ca:	f7fa f811 	bl	80154f0 <rcutils_reset_error>
 801b4ce:	a808      	add	r0, sp, #32
 801b4d0:	f002 fe30 	bl	801e134 <rcutils_string_map_fini>
 801b4d4:	b998      	cbnz	r0, 801b4fe <rcl_node_resolve_name+0x18e>
 801b4d6:	4651      	mov	r1, sl
 801b4d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b4da:	47c8      	blx	r9
 801b4dc:	4651      	mov	r1, sl
 801b4de:	4620      	mov	r0, r4
 801b4e0:	f04f 0b01 	mov.w	fp, #1
 801b4e4:	47c8      	blx	r9
 801b4e6:	e786      	b.n	801b3f6 <rcl_node_resolve_name+0x86>
 801b4e8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801b4ec:	f7f9 ffea 	bl	80154c4 <rcutils_get_error_string>
 801b4f0:	f7f9 fffe 	bl	80154f0 <rcutils_reset_error>
 801b4f4:	4644      	mov	r4, r8
 801b4f6:	e7da      	b.n	801b4ae <rcl_node_resolve_name+0x13e>
 801b4f8:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 801b4fc:	e7d3      	b.n	801b4a6 <rcl_node_resolve_name+0x136>
 801b4fe:	46d8      	mov	r8, fp
 801b500:	f04f 0b01 	mov.w	fp, #1
 801b504:	f7f9 ffde 	bl	80154c4 <rcutils_get_error_string>
 801b508:	f7f9 fff2 	bl	80154f0 <rcutils_reset_error>
 801b50c:	e7cf      	b.n	801b4ae <rcl_node_resolve_name+0x13e>
 801b50e:	4651      	mov	r1, sl
 801b510:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b512:	47c8      	blx	r9
 801b514:	4651      	mov	r1, sl
 801b516:	4658      	mov	r0, fp
 801b518:	47c8      	blx	r9
 801b51a:	e76c      	b.n	801b3f6 <rcl_node_resolve_name+0x86>

0801b51c <exact_match_lookup>:
 801b51c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b51e:	f102 0708 	add.w	r7, r2, #8
 801b522:	460b      	mov	r3, r1
 801b524:	b085      	sub	sp, #20
 801b526:	4614      	mov	r4, r2
 801b528:	4606      	mov	r6, r0
 801b52a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801b52e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b532:	4618      	mov	r0, r3
 801b534:	4919      	ldr	r1, [pc, #100]	@ (801b59c <exact_match_lookup+0x80>)
 801b536:	e894 000c 	ldmia.w	r4, {r2, r3}
 801b53a:	f002 fbbf 	bl	801dcbc <rcutils_join_path>
 801b53e:	7833      	ldrb	r3, [r6, #0]
 801b540:	4605      	mov	r5, r0
 801b542:	2b2f      	cmp	r3, #47	@ 0x2f
 801b544:	d023      	beq.n	801b58e <exact_match_lookup+0x72>
 801b546:	f104 030c 	add.w	r3, r4, #12
 801b54a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b54e:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b552:	1c70      	adds	r0, r6, #1
 801b554:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801b558:	f002 fbb6 	bl	801dcc8 <rcutils_to_native_path>
 801b55c:	4606      	mov	r6, r0
 801b55e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801b562:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b566:	4631      	mov	r1, r6
 801b568:	4628      	mov	r0, r5
 801b56a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801b56e:	f002 fba5 	bl	801dcbc <rcutils_join_path>
 801b572:	4603      	mov	r3, r0
 801b574:	4630      	mov	r0, r6
 801b576:	6862      	ldr	r2, [r4, #4]
 801b578:	461e      	mov	r6, r3
 801b57a:	6921      	ldr	r1, [r4, #16]
 801b57c:	4790      	blx	r2
 801b57e:	4628      	mov	r0, r5
 801b580:	4635      	mov	r5, r6
 801b582:	6863      	ldr	r3, [r4, #4]
 801b584:	6921      	ldr	r1, [r4, #16]
 801b586:	4798      	blx	r3
 801b588:	4628      	mov	r0, r5
 801b58a:	b005      	add	sp, #20
 801b58c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b58e:	7873      	ldrb	r3, [r6, #1]
 801b590:	2b00      	cmp	r3, #0
 801b592:	d1d8      	bne.n	801b546 <exact_match_lookup+0x2a>
 801b594:	4628      	mov	r0, r5
 801b596:	b005      	add	sp, #20
 801b598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b59a:	bf00      	nop
 801b59c:	08025388 	.word	0x08025388

0801b5a0 <rcl_get_secure_root>:
 801b5a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b5a4:	b085      	sub	sp, #20
 801b5a6:	b168      	cbz	r0, 801b5c4 <rcl_get_secure_root+0x24>
 801b5a8:	4607      	mov	r7, r0
 801b5aa:	4608      	mov	r0, r1
 801b5ac:	460c      	mov	r4, r1
 801b5ae:	f7f9 ff7b 	bl	80154a8 <rcutils_allocator_is_valid>
 801b5b2:	b138      	cbz	r0, 801b5c4 <rcl_get_secure_root+0x24>
 801b5b4:	2300      	movs	r3, #0
 801b5b6:	482d      	ldr	r0, [pc, #180]	@ (801b66c <rcl_get_secure_root+0xcc>)
 801b5b8:	a903      	add	r1, sp, #12
 801b5ba:	9303      	str	r3, [sp, #12]
 801b5bc:	f002 fb64 	bl	801dc88 <rcutils_get_env>
 801b5c0:	4605      	mov	r5, r0
 801b5c2:	b120      	cbz	r0, 801b5ce <rcl_get_secure_root+0x2e>
 801b5c4:	2500      	movs	r5, #0
 801b5c6:	4628      	mov	r0, r5
 801b5c8:	b005      	add	sp, #20
 801b5ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b5ce:	9b03      	ldr	r3, [sp, #12]
 801b5d0:	781a      	ldrb	r2, [r3, #0]
 801b5d2:	2a00      	cmp	r2, #0
 801b5d4:	d0f6      	beq.n	801b5c4 <rcl_get_secure_root+0x24>
 801b5d6:	f104 090c 	add.w	r9, r4, #12
 801b5da:	e899 0003 	ldmia.w	r9, {r0, r1}
 801b5de:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b5e2:	4618      	mov	r0, r3
 801b5e4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801b5e8:	f002 fcb0 	bl	801df4c <rcutils_strdup>
 801b5ec:	4680      	mov	r8, r0
 801b5ee:	2800      	cmp	r0, #0
 801b5f0:	d0e8      	beq.n	801b5c4 <rcl_get_secure_root+0x24>
 801b5f2:	a903      	add	r1, sp, #12
 801b5f4:	481e      	ldr	r0, [pc, #120]	@ (801b670 <rcl_get_secure_root+0xd0>)
 801b5f6:	9503      	str	r5, [sp, #12]
 801b5f8:	f002 fb46 	bl	801dc88 <rcutils_get_env>
 801b5fc:	b160      	cbz	r0, 801b618 <rcl_get_secure_root+0x78>
 801b5fe:	2600      	movs	r6, #0
 801b600:	4630      	mov	r0, r6
 801b602:	6863      	ldr	r3, [r4, #4]
 801b604:	6921      	ldr	r1, [r4, #16]
 801b606:	4798      	blx	r3
 801b608:	4640      	mov	r0, r8
 801b60a:	6863      	ldr	r3, [r4, #4]
 801b60c:	6921      	ldr	r1, [r4, #16]
 801b60e:	4798      	blx	r3
 801b610:	4628      	mov	r0, r5
 801b612:	b005      	add	sp, #20
 801b614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b618:	9b03      	ldr	r3, [sp, #12]
 801b61a:	781e      	ldrb	r6, [r3, #0]
 801b61c:	b1f6      	cbz	r6, 801b65c <rcl_get_secure_root+0xbc>
 801b61e:	e899 0003 	ldmia.w	r9, {r0, r1}
 801b622:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b626:	4618      	mov	r0, r3
 801b628:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801b62c:	f002 fc8e 	bl	801df4c <rcutils_strdup>
 801b630:	4606      	mov	r6, r0
 801b632:	2800      	cmp	r0, #0
 801b634:	d0e3      	beq.n	801b5fe <rcl_get_secure_root+0x5e>
 801b636:	4622      	mov	r2, r4
 801b638:	4641      	mov	r1, r8
 801b63a:	f7ff ff6f 	bl	801b51c <exact_match_lookup>
 801b63e:	4605      	mov	r5, r0
 801b640:	2d00      	cmp	r5, #0
 801b642:	d0dd      	beq.n	801b600 <rcl_get_secure_root+0x60>
 801b644:	4628      	mov	r0, r5
 801b646:	f002 fb37 	bl	801dcb8 <rcutils_is_directory>
 801b64a:	4603      	mov	r3, r0
 801b64c:	2800      	cmp	r0, #0
 801b64e:	d1d7      	bne.n	801b600 <rcl_get_secure_root+0x60>
 801b650:	4628      	mov	r0, r5
 801b652:	6921      	ldr	r1, [r4, #16]
 801b654:	461d      	mov	r5, r3
 801b656:	6863      	ldr	r3, [r4, #4]
 801b658:	4798      	blx	r3
 801b65a:	e7d1      	b.n	801b600 <rcl_get_secure_root+0x60>
 801b65c:	4622      	mov	r2, r4
 801b65e:	4638      	mov	r0, r7
 801b660:	4641      	mov	r1, r8
 801b662:	f7ff ff5b 	bl	801b51c <exact_match_lookup>
 801b666:	4605      	mov	r5, r0
 801b668:	e7ea      	b.n	801b640 <rcl_get_secure_root+0xa0>
 801b66a:	bf00      	nop
 801b66c:	08025394 	.word	0x08025394
 801b670:	080253ac 	.word	0x080253ac

0801b674 <rcl_get_security_options_from_environment>:
 801b674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b678:	b082      	sub	sp, #8
 801b67a:	2300      	movs	r3, #0
 801b67c:	4606      	mov	r6, r0
 801b67e:	460f      	mov	r7, r1
 801b680:	4821      	ldr	r0, [pc, #132]	@ (801b708 <rcl_get_security_options_from_environment+0x94>)
 801b682:	a901      	add	r1, sp, #4
 801b684:	4690      	mov	r8, r2
 801b686:	9301      	str	r3, [sp, #4]
 801b688:	f002 fafe 	bl	801dc88 <rcutils_get_env>
 801b68c:	b120      	cbz	r0, 801b698 <rcl_get_security_options_from_environment+0x24>
 801b68e:	2501      	movs	r5, #1
 801b690:	4628      	mov	r0, r5
 801b692:	b002      	add	sp, #8
 801b694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b698:	4604      	mov	r4, r0
 801b69a:	491c      	ldr	r1, [pc, #112]	@ (801b70c <rcl_get_security_options_from_environment+0x98>)
 801b69c:	9801      	ldr	r0, [sp, #4]
 801b69e:	f7e4 fe1f 	bl	80002e0 <strcmp>
 801b6a2:	4605      	mov	r5, r0
 801b6a4:	b9f0      	cbnz	r0, 801b6e4 <rcl_get_security_options_from_environment+0x70>
 801b6a6:	9001      	str	r0, [sp, #4]
 801b6a8:	f1b8 0f00 	cmp.w	r8, #0
 801b6ac:	d021      	beq.n	801b6f2 <rcl_get_security_options_from_environment+0x7e>
 801b6ae:	a901      	add	r1, sp, #4
 801b6b0:	4817      	ldr	r0, [pc, #92]	@ (801b710 <rcl_get_security_options_from_environment+0x9c>)
 801b6b2:	f002 fae9 	bl	801dc88 <rcutils_get_env>
 801b6b6:	2800      	cmp	r0, #0
 801b6b8:	d1e9      	bne.n	801b68e <rcl_get_security_options_from_environment+0x1a>
 801b6ba:	4916      	ldr	r1, [pc, #88]	@ (801b714 <rcl_get_security_options_from_environment+0xa0>)
 801b6bc:	9801      	ldr	r0, [sp, #4]
 801b6be:	f7e4 fe0f 	bl	80002e0 <strcmp>
 801b6c2:	4603      	mov	r3, r0
 801b6c4:	4639      	mov	r1, r7
 801b6c6:	4630      	mov	r0, r6
 801b6c8:	fab3 f383 	clz	r3, r3
 801b6cc:	095b      	lsrs	r3, r3, #5
 801b6ce:	f888 3000 	strb.w	r3, [r8]
 801b6d2:	f7ff ff65 	bl	801b5a0 <rcl_get_secure_root>
 801b6d6:	b170      	cbz	r0, 801b6f6 <rcl_get_security_options_from_environment+0x82>
 801b6d8:	f8c8 0004 	str.w	r0, [r8, #4]
 801b6dc:	4628      	mov	r0, r5
 801b6de:	b002      	add	sp, #8
 801b6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6e4:	4625      	mov	r5, r4
 801b6e6:	f888 4000 	strb.w	r4, [r8]
 801b6ea:	4628      	mov	r0, r5
 801b6ec:	b002      	add	sp, #8
 801b6ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6f2:	250b      	movs	r5, #11
 801b6f4:	e7cc      	b.n	801b690 <rcl_get_security_options_from_environment+0x1c>
 801b6f6:	f898 5000 	ldrb.w	r5, [r8]
 801b6fa:	f1a5 0501 	sub.w	r5, r5, #1
 801b6fe:	fab5 f585 	clz	r5, r5
 801b702:	096d      	lsrs	r5, r5, #5
 801b704:	e7c4      	b.n	801b690 <rcl_get_security_options_from_environment+0x1c>
 801b706:	bf00      	nop
 801b708:	0802534c 	.word	0x0802534c
 801b70c:	08025360 	.word	0x08025360
 801b710:	08025368 	.word	0x08025368
 801b714:	08025380 	.word	0x08025380

0801b718 <rcl_get_zero_initialized_service>:
 801b718:	4b01      	ldr	r3, [pc, #4]	@ (801b720 <rcl_get_zero_initialized_service+0x8>)
 801b71a:	6818      	ldr	r0, [r3, #0]
 801b71c:	4770      	bx	lr
 801b71e:	bf00      	nop
 801b720:	080253cc 	.word	0x080253cc

0801b724 <rcl_service_init>:
 801b724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b728:	b088      	sub	sp, #32
 801b72a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801b72c:	b1ff      	cbz	r7, 801b76e <rcl_service_init+0x4a>
 801b72e:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 801b732:	4605      	mov	r5, r0
 801b734:	460e      	mov	r6, r1
 801b736:	4691      	mov	r9, r2
 801b738:	4650      	mov	r0, sl
 801b73a:	4698      	mov	r8, r3
 801b73c:	f7f9 feb4 	bl	80154a8 <rcutils_allocator_is_valid>
 801b740:	f080 0401 	eor.w	r4, r0, #1
 801b744:	b2e4      	uxtb	r4, r4
 801b746:	b994      	cbnz	r4, 801b76e <rcl_service_init+0x4a>
 801b748:	b18d      	cbz	r5, 801b76e <rcl_service_init+0x4a>
 801b74a:	4630      	mov	r0, r6
 801b74c:	f7ff fdb8 	bl	801b2c0 <rcl_node_is_valid>
 801b750:	2800      	cmp	r0, #0
 801b752:	d05d      	beq.n	801b810 <rcl_service_init+0xec>
 801b754:	f1b8 0f00 	cmp.w	r8, #0
 801b758:	d009      	beq.n	801b76e <rcl_service_init+0x4a>
 801b75a:	f1b9 0f00 	cmp.w	r9, #0
 801b75e:	d006      	beq.n	801b76e <rcl_service_init+0x4a>
 801b760:	682b      	ldr	r3, [r5, #0]
 801b762:	b14b      	cbz	r3, 801b778 <rcl_service_init+0x54>
 801b764:	2464      	movs	r4, #100	@ 0x64
 801b766:	4620      	mov	r0, r4
 801b768:	b008      	add	sp, #32
 801b76a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b76e:	240b      	movs	r4, #11
 801b770:	4620      	mov	r0, r4
 801b772:	b008      	add	sp, #32
 801b774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b778:	aa07      	add	r2, sp, #28
 801b77a:	9304      	str	r3, [sp, #16]
 801b77c:	9307      	str	r3, [sp, #28]
 801b77e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801b782:	9205      	str	r2, [sp, #20]
 801b784:	2201      	movs	r2, #1
 801b786:	9203      	str	r2, [sp, #12]
 801b788:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b78c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b790:	4641      	mov	r1, r8
 801b792:	4630      	mov	r0, r6
 801b794:	e89a 000c 	ldmia.w	sl, {r2, r3}
 801b798:	f7ff fdea 	bl	801b370 <rcl_node_resolve_name>
 801b79c:	2800      	cmp	r0, #0
 801b79e:	d146      	bne.n	801b82e <rcl_service_init+0x10a>
 801b7a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b7a2:	f44f 7088 	mov.w	r0, #272	@ 0x110
 801b7a6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b7a8:	4798      	blx	r3
 801b7aa:	6028      	str	r0, [r5, #0]
 801b7ac:	2800      	cmp	r0, #0
 801b7ae:	d046      	beq.n	801b83e <rcl_service_init+0x11a>
 801b7b0:	4630      	mov	r0, r6
 801b7b2:	f7ff fda7 	bl	801b304 <rcl_node_get_rmw_handle>
 801b7b6:	463b      	mov	r3, r7
 801b7b8:	4649      	mov	r1, r9
 801b7ba:	9a07      	ldr	r2, [sp, #28]
 801b7bc:	682c      	ldr	r4, [r5, #0]
 801b7be:	f003 fd05 	bl	801f1cc <rmw_create_service>
 801b7c2:	682b      	ldr	r3, [r5, #0]
 801b7c4:	f8c4 0108 	str.w	r0, [r4, #264]	@ 0x108
 801b7c8:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801b7cc:	b338      	cbz	r0, 801b81e <rcl_service_init+0xfa>
 801b7ce:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 801b7d2:	f003 fe2d 	bl	801f430 <rmw_service_request_subscription_get_actual_qos>
 801b7d6:	bb00      	cbnz	r0, 801b81a <rcl_service_init+0xf6>
 801b7d8:	682b      	ldr	r3, [r5, #0]
 801b7da:	f103 01b8 	add.w	r1, r3, #184	@ 0xb8
 801b7de:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801b7e2:	f003 fe11 	bl	801f408 <rmw_service_response_publisher_get_actual_qos>
 801b7e6:	4604      	mov	r4, r0
 801b7e8:	b9b8      	cbnz	r0, 801b81a <rcl_service_init+0xf6>
 801b7ea:	6828      	ldr	r0, [r5, #0]
 801b7ec:	2268      	movs	r2, #104	@ 0x68
 801b7ee:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801b7f2:	4639      	mov	r1, r7
 801b7f4:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 801b7f8:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 801b7fc:	f006 fe77 	bl	80224ee <memcpy>
 801b800:	9807      	ldr	r0, [sp, #28]
 801b802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b804:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b806:	4798      	blx	r3
 801b808:	4620      	mov	r0, r4
 801b80a:	b008      	add	sp, #32
 801b80c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b810:	24c8      	movs	r4, #200	@ 0xc8
 801b812:	4620      	mov	r0, r4
 801b814:	b008      	add	sp, #32
 801b816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b81a:	682b      	ldr	r3, [r5, #0]
 801b81c:	b16b      	cbz	r3, 801b83a <rcl_service_init+0x116>
 801b81e:	4618      	mov	r0, r3
 801b820:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b822:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b824:	2401      	movs	r4, #1
 801b826:	4790      	blx	r2
 801b828:	2300      	movs	r3, #0
 801b82a:	602b      	str	r3, [r5, #0]
 801b82c:	e7e8      	b.n	801b800 <rcl_service_init+0xdc>
 801b82e:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 801b832:	2b01      	cmp	r3, #1
 801b834:	d905      	bls.n	801b842 <rcl_service_init+0x11e>
 801b836:	280a      	cmp	r0, #10
 801b838:	d001      	beq.n	801b83e <rcl_service_init+0x11a>
 801b83a:	2401      	movs	r4, #1
 801b83c:	e7e0      	b.n	801b800 <rcl_service_init+0xdc>
 801b83e:	240a      	movs	r4, #10
 801b840:	e7de      	b.n	801b800 <rcl_service_init+0xdc>
 801b842:	2468      	movs	r4, #104	@ 0x68
 801b844:	e7dc      	b.n	801b800 <rcl_service_init+0xdc>
 801b846:	bf00      	nop

0801b848 <rcl_service_get_default_options>:
 801b848:	b530      	push	{r4, r5, lr}
 801b84a:	4d0f      	ldr	r5, [pc, #60]	@ (801b888 <rcl_service_get_default_options+0x40>)
 801b84c:	b087      	sub	sp, #28
 801b84e:	4604      	mov	r4, r0
 801b850:	2250      	movs	r2, #80	@ 0x50
 801b852:	490e      	ldr	r1, [pc, #56]	@ (801b88c <rcl_service_get_default_options+0x44>)
 801b854:	4628      	mov	r0, r5
 801b856:	f006 fe4a 	bl	80224ee <memcpy>
 801b85a:	4668      	mov	r0, sp
 801b85c:	f7f9 fe16 	bl	801548c <rcutils_get_default_allocator>
 801b860:	46ec      	mov	ip, sp
 801b862:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 801b866:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b86a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b86e:	f8dc 3000 	ldr.w	r3, [ip]
 801b872:	2268      	movs	r2, #104	@ 0x68
 801b874:	4629      	mov	r1, r5
 801b876:	4620      	mov	r0, r4
 801b878:	f8ce 3000 	str.w	r3, [lr]
 801b87c:	f006 fe37 	bl	80224ee <memcpy>
 801b880:	4620      	mov	r0, r4
 801b882:	b007      	add	sp, #28
 801b884:	bd30      	pop	{r4, r5, pc}
 801b886:	bf00      	nop
 801b888:	24069280 	.word	0x24069280
 801b88c:	080253d0 	.word	0x080253d0

0801b890 <rcl_service_get_rmw_handle>:
 801b890:	b118      	cbz	r0, 801b89a <rcl_service_get_rmw_handle+0xa>
 801b892:	6800      	ldr	r0, [r0, #0]
 801b894:	b108      	cbz	r0, 801b89a <rcl_service_get_rmw_handle+0xa>
 801b896:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801b89a:	4770      	bx	lr

0801b89c <rcl_take_request>:
 801b89c:	b570      	push	{r4, r5, r6, lr}
 801b89e:	468e      	mov	lr, r1
 801b8a0:	b08c      	sub	sp, #48	@ 0x30
 801b8a2:	460c      	mov	r4, r1
 801b8a4:	4616      	mov	r6, r2
 801b8a6:	f10d 0c18 	add.w	ip, sp, #24
 801b8aa:	4605      	mov	r5, r0
 801b8ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b8b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b8b4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b8b8:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b8bc:	b30d      	cbz	r5, 801b902 <rcl_take_request+0x66>
 801b8be:	682b      	ldr	r3, [r5, #0]
 801b8c0:	b1fb      	cbz	r3, 801b902 <rcl_take_request+0x66>
 801b8c2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801b8c6:	b1e0      	cbz	r0, 801b902 <rcl_take_request+0x66>
 801b8c8:	b336      	cbz	r6, 801b918 <rcl_take_request+0x7c>
 801b8ca:	2300      	movs	r3, #0
 801b8cc:	4632      	mov	r2, r6
 801b8ce:	a902      	add	r1, sp, #8
 801b8d0:	f88d 3007 	strb.w	r3, [sp, #7]
 801b8d4:	f10d 0307 	add.w	r3, sp, #7
 801b8d8:	f003 fb76 	bl	801efc8 <rmw_take_request>
 801b8dc:	4605      	mov	r5, r0
 801b8de:	b198      	cbz	r0, 801b908 <rcl_take_request+0x6c>
 801b8e0:	280a      	cmp	r0, #10
 801b8e2:	bf18      	it	ne
 801b8e4:	2501      	movne	r5, #1
 801b8e6:	f10d 0e18 	add.w	lr, sp, #24
 801b8ea:	46a4      	mov	ip, r4
 801b8ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b8f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b8f4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b8f8:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b8fc:	4628      	mov	r0, r5
 801b8fe:	b00c      	add	sp, #48	@ 0x30
 801b900:	bd70      	pop	{r4, r5, r6, pc}
 801b902:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801b906:	e7ee      	b.n	801b8e6 <rcl_take_request+0x4a>
 801b908:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801b90c:	f240 2359 	movw	r3, #601	@ 0x259
 801b910:	2a00      	cmp	r2, #0
 801b912:	bf08      	it	eq
 801b914:	461d      	moveq	r5, r3
 801b916:	e7e6      	b.n	801b8e6 <rcl_take_request+0x4a>
 801b918:	250b      	movs	r5, #11
 801b91a:	e7e4      	b.n	801b8e6 <rcl_take_request+0x4a>

0801b91c <rcl_send_response>:
 801b91c:	b170      	cbz	r0, 801b93c <rcl_send_response+0x20>
 801b91e:	6800      	ldr	r0, [r0, #0]
 801b920:	b160      	cbz	r0, 801b93c <rcl_send_response+0x20>
 801b922:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801b926:	b148      	cbz	r0, 801b93c <rcl_send_response+0x20>
 801b928:	b169      	cbz	r1, 801b946 <rcl_send_response+0x2a>
 801b92a:	b510      	push	{r4, lr}
 801b92c:	b14a      	cbz	r2, 801b942 <rcl_send_response+0x26>
 801b92e:	f003 fba9 	bl	801f084 <rmw_send_response>
 801b932:	b110      	cbz	r0, 801b93a <rcl_send_response+0x1e>
 801b934:	2802      	cmp	r0, #2
 801b936:	bf18      	it	ne
 801b938:	2001      	movne	r0, #1
 801b93a:	bd10      	pop	{r4, pc}
 801b93c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 801b940:	4770      	bx	lr
 801b942:	200b      	movs	r0, #11
 801b944:	bd10      	pop	{r4, pc}
 801b946:	200b      	movs	r0, #11
 801b948:	4770      	bx	lr
 801b94a:	bf00      	nop

0801b94c <rcl_service_is_valid>:
 801b94c:	b130      	cbz	r0, 801b95c <rcl_service_is_valid+0x10>
 801b94e:	6800      	ldr	r0, [r0, #0]
 801b950:	b120      	cbz	r0, 801b95c <rcl_service_is_valid+0x10>
 801b952:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801b956:	3800      	subs	r0, #0
 801b958:	bf18      	it	ne
 801b95a:	2001      	movne	r0, #1
 801b95c:	4770      	bx	lr
 801b95e:	bf00      	nop

0801b960 <rcl_get_zero_initialized_subscription>:
 801b960:	4b01      	ldr	r3, [pc, #4]	@ (801b968 <rcl_get_zero_initialized_subscription+0x8>)
 801b962:	6818      	ldr	r0, [r3, #0]
 801b964:	4770      	bx	lr
 801b966:	bf00      	nop
 801b968:	08025420 	.word	0x08025420

0801b96c <rcl_subscription_init>:
 801b96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b970:	b088      	sub	sp, #32
 801b972:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801b974:	b1ff      	cbz	r7, 801b9b6 <rcl_subscription_init+0x4a>
 801b976:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 801b97a:	4605      	mov	r5, r0
 801b97c:	460e      	mov	r6, r1
 801b97e:	4691      	mov	r9, r2
 801b980:	4650      	mov	r0, sl
 801b982:	4698      	mov	r8, r3
 801b984:	f7f9 fd90 	bl	80154a8 <rcutils_allocator_is_valid>
 801b988:	f080 0401 	eor.w	r4, r0, #1
 801b98c:	b2e4      	uxtb	r4, r4
 801b98e:	b994      	cbnz	r4, 801b9b6 <rcl_subscription_init+0x4a>
 801b990:	b18d      	cbz	r5, 801b9b6 <rcl_subscription_init+0x4a>
 801b992:	4630      	mov	r0, r6
 801b994:	f7ff fc94 	bl	801b2c0 <rcl_node_is_valid>
 801b998:	2800      	cmp	r0, #0
 801b99a:	d055      	beq.n	801ba48 <rcl_subscription_init+0xdc>
 801b99c:	f1b9 0f00 	cmp.w	r9, #0
 801b9a0:	d009      	beq.n	801b9b6 <rcl_subscription_init+0x4a>
 801b9a2:	f1b8 0f00 	cmp.w	r8, #0
 801b9a6:	d006      	beq.n	801b9b6 <rcl_subscription_init+0x4a>
 801b9a8:	682b      	ldr	r3, [r5, #0]
 801b9aa:	b14b      	cbz	r3, 801b9c0 <rcl_subscription_init+0x54>
 801b9ac:	2464      	movs	r4, #100	@ 0x64
 801b9ae:	4620      	mov	r0, r4
 801b9b0:	b008      	add	sp, #32
 801b9b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b9b6:	240b      	movs	r4, #11
 801b9b8:	4620      	mov	r0, r4
 801b9ba:	b008      	add	sp, #32
 801b9bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b9c0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801b9c4:	aa07      	add	r2, sp, #28
 801b9c6:	9307      	str	r3, [sp, #28]
 801b9c8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801b9cc:	9205      	str	r2, [sp, #20]
 801b9ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b9d2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b9d6:	4641      	mov	r1, r8
 801b9d8:	4630      	mov	r0, r6
 801b9da:	e89a 000c 	ldmia.w	sl, {r2, r3}
 801b9de:	f7ff fcc7 	bl	801b370 <rcl_node_resolve_name>
 801b9e2:	2800      	cmp	r0, #0
 801b9e4:	d15f      	bne.n	801baa6 <rcl_subscription_init+0x13a>
 801b9e6:	21c8      	movs	r1, #200	@ 0xc8
 801b9e8:	2001      	movs	r0, #1
 801b9ea:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	@ 0x5c
 801b9ee:	4798      	blx	r3
 801b9f0:	6028      	str	r0, [r5, #0]
 801b9f2:	2800      	cmp	r0, #0
 801b9f4:	d05f      	beq.n	801bab6 <rcl_subscription_init+0x14a>
 801b9f6:	4630      	mov	r0, r6
 801b9f8:	f7ff fc84 	bl	801b304 <rcl_node_get_rmw_handle>
 801b9fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801ba00:	4649      	mov	r1, r9
 801ba02:	9a07      	ldr	r2, [sp, #28]
 801ba04:	9300      	str	r3, [sp, #0]
 801ba06:	463b      	mov	r3, r7
 801ba08:	682c      	ldr	r4, [r5, #0]
 801ba0a:	f003 fd25 	bl	801f458 <rmw_create_subscription>
 801ba0e:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 801ba12:	682c      	ldr	r4, [r5, #0]
 801ba14:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 801ba18:	b348      	cbz	r0, 801ba6e <rcl_subscription_init+0x102>
 801ba1a:	f104 0170 	add.w	r1, r4, #112	@ 0x70
 801ba1e:	f003 fe11 	bl	801f644 <rmw_subscription_get_actual_qos>
 801ba22:	4604      	mov	r4, r0
 801ba24:	b9a8      	cbnz	r0, 801ba52 <rcl_subscription_init+0xe6>
 801ba26:	6828      	ldr	r0, [r5, #0]
 801ba28:	2270      	movs	r2, #112	@ 0x70
 801ba2a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801ba2e:	4639      	mov	r1, r7
 801ba30:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 801ba34:	f006 fd5b 	bl	80224ee <memcpy>
 801ba38:	9807      	ldr	r0, [sp, #28]
 801ba3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ba3c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801ba3e:	4798      	blx	r3
 801ba40:	4620      	mov	r0, r4
 801ba42:	b008      	add	sp, #32
 801ba44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba48:	24c8      	movs	r4, #200	@ 0xc8
 801ba4a:	4620      	mov	r0, r4
 801ba4c:	b008      	add	sp, #32
 801ba4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba52:	682c      	ldr	r4, [r5, #0]
 801ba54:	b36c      	cbz	r4, 801bab2 <rcl_subscription_init+0x146>
 801ba56:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 801ba5a:	b14b      	cbz	r3, 801ba70 <rcl_subscription_init+0x104>
 801ba5c:	4630      	mov	r0, r6
 801ba5e:	f7ff fc51 	bl	801b304 <rcl_node_get_rmw_handle>
 801ba62:	682b      	ldr	r3, [r5, #0]
 801ba64:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 801ba68:	f003 fe00 	bl	801f66c <rmw_destroy_subscription>
 801ba6c:	682c      	ldr	r4, [r5, #0]
 801ba6e:	b194      	cbz	r4, 801ba96 <rcl_subscription_init+0x12a>
 801ba70:	f104 0650 	add.w	r6, r4, #80	@ 0x50
 801ba74:	4630      	mov	r0, r6
 801ba76:	f7f9 fd17 	bl	80154a8 <rcutils_allocator_is_valid>
 801ba7a:	b158      	cbz	r0, 801ba94 <rcl_subscription_init+0x128>
 801ba7c:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 801ba7e:	b148      	cbz	r0, 801ba94 <rcl_subscription_init+0x128>
 801ba80:	4631      	mov	r1, r6
 801ba82:	f002 fbf9 	bl	801e278 <rmw_subscription_content_filter_options_fini>
 801ba86:	4606      	mov	r6, r0
 801ba88:	b9c8      	cbnz	r0, 801babe <rcl_subscription_init+0x152>
 801ba8a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801ba8c:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 801ba8e:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 801ba90:	4798      	blx	r3
 801ba92:	66e6      	str	r6, [r4, #108]	@ 0x6c
 801ba94:	682c      	ldr	r4, [r5, #0]
 801ba96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ba98:	4620      	mov	r0, r4
 801ba9a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801ba9c:	2401      	movs	r4, #1
 801ba9e:	4798      	blx	r3
 801baa0:	2300      	movs	r3, #0
 801baa2:	602b      	str	r3, [r5, #0]
 801baa4:	e7c8      	b.n	801ba38 <rcl_subscription_init+0xcc>
 801baa6:	2867      	cmp	r0, #103	@ 0x67
 801baa8:	d007      	beq.n	801baba <rcl_subscription_init+0x14e>
 801baaa:	2869      	cmp	r0, #105	@ 0x69
 801baac:	d005      	beq.n	801baba <rcl_subscription_init+0x14e>
 801baae:	280a      	cmp	r0, #10
 801bab0:	d001      	beq.n	801bab6 <rcl_subscription_init+0x14a>
 801bab2:	2401      	movs	r4, #1
 801bab4:	e7c0      	b.n	801ba38 <rcl_subscription_init+0xcc>
 801bab6:	240a      	movs	r4, #10
 801bab8:	e7be      	b.n	801ba38 <rcl_subscription_init+0xcc>
 801baba:	2467      	movs	r4, #103	@ 0x67
 801babc:	e7bc      	b.n	801ba38 <rcl_subscription_init+0xcc>
 801babe:	f7ff f801 	bl	801aac4 <rcl_convert_rmw_ret_to_rcl_ret>
 801bac2:	682c      	ldr	r4, [r5, #0]
 801bac4:	e7e7      	b.n	801ba96 <rcl_subscription_init+0x12a>
 801bac6:	bf00      	nop

0801bac8 <rcl_subscription_get_default_options>:
 801bac8:	b570      	push	{r4, r5, r6, lr}
 801baca:	4d14      	ldr	r5, [pc, #80]	@ (801bb1c <rcl_subscription_get_default_options+0x54>)
 801bacc:	b08a      	sub	sp, #40	@ 0x28
 801bace:	4604      	mov	r4, r0
 801bad0:	2250      	movs	r2, #80	@ 0x50
 801bad2:	4913      	ldr	r1, [pc, #76]	@ (801bb20 <rcl_subscription_get_default_options+0x58>)
 801bad4:	4628      	mov	r0, r5
 801bad6:	f006 fd0a 	bl	80224ee <memcpy>
 801bada:	a804      	add	r0, sp, #16
 801badc:	f7f9 fcd6 	bl	801548c <rcutils_get_default_allocator>
 801bae0:	f10d 0c10 	add.w	ip, sp, #16
 801bae4:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 801bae8:	466e      	mov	r6, sp
 801baea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801baee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801baf2:	f8dc 3000 	ldr.w	r3, [ip]
 801baf6:	4630      	mov	r0, r6
 801baf8:	f8ce 3000 	str.w	r3, [lr]
 801bafc:	f002 fbd6 	bl	801e2ac <rmw_get_default_subscription_options>
 801bb00:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 801bb04:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801bb08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801bb0c:	2270      	movs	r2, #112	@ 0x70
 801bb0e:	4629      	mov	r1, r5
 801bb10:	4620      	mov	r0, r4
 801bb12:	f006 fcec 	bl	80224ee <memcpy>
 801bb16:	4620      	mov	r0, r4
 801bb18:	b00a      	add	sp, #40	@ 0x28
 801bb1a:	bd70      	pop	{r4, r5, r6, pc}
 801bb1c:	240692e8 	.word	0x240692e8
 801bb20:	08025428 	.word	0x08025428

0801bb24 <rcl_take>:
 801bb24:	2800      	cmp	r0, #0
 801bb26:	d049      	beq.n	801bbbc <rcl_take+0x98>
 801bb28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb2c:	4615      	mov	r5, r2
 801bb2e:	6802      	ldr	r2, [r0, #0]
 801bb30:	b0a4      	sub	sp, #144	@ 0x90
 801bb32:	4604      	mov	r4, r0
 801bb34:	2a00      	cmp	r2, #0
 801bb36:	d039      	beq.n	801bbac <rcl_take+0x88>
 801bb38:	461f      	mov	r7, r3
 801bb3a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 801bb3e:	b3ab      	cbz	r3, 801bbac <rcl_take+0x88>
 801bb40:	460e      	mov	r6, r1
 801bb42:	2900      	cmp	r1, #0
 801bb44:	d038      	beq.n	801bbb8 <rcl_take+0x94>
 801bb46:	2d00      	cmp	r5, #0
 801bb48:	d03c      	beq.n	801bbc4 <rcl_take+0xa0>
 801bb4a:	a802      	add	r0, sp, #8
 801bb4c:	f04f 0800 	mov.w	r8, #0
 801bb50:	f002 fc3a 	bl	801e3c8 <rmw_get_zero_initialized_message_info>
 801bb54:	f10d 0c08 	add.w	ip, sp, #8
 801bb58:	46ae      	mov	lr, r5
 801bb5a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bb5e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bb62:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bb66:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bb6a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bb6e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bb72:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801bb76:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801bb7a:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 801bb7e:	462b      	mov	r3, r5
 801bb80:	6820      	ldr	r0, [r4, #0]
 801bb82:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 801bb86:	4631      	mov	r1, r6
 801bb88:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801bb8c:	9700      	str	r7, [sp, #0]
 801bb8e:	f003 fdcf 	bl	801f730 <rmw_take_with_info>
 801bb92:	4603      	mov	r3, r0
 801bb94:	b9c0      	cbnz	r0, 801bbc8 <rcl_take+0xa4>
 801bb96:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 801bb9a:	f240 1291 	movw	r2, #401	@ 0x191
 801bb9e:	2900      	cmp	r1, #0
 801bba0:	bf08      	it	eq
 801bba2:	4613      	moveq	r3, r2
 801bba4:	4618      	mov	r0, r3
 801bba6:	b024      	add	sp, #144	@ 0x90
 801bba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbac:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801bbb0:	4618      	mov	r0, r3
 801bbb2:	b024      	add	sp, #144	@ 0x90
 801bbb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbb8:	230b      	movs	r3, #11
 801bbba:	e7f3      	b.n	801bba4 <rcl_take+0x80>
 801bbbc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801bbc0:	4618      	mov	r0, r3
 801bbc2:	4770      	bx	lr
 801bbc4:	ad14      	add	r5, sp, #80	@ 0x50
 801bbc6:	e7c0      	b.n	801bb4a <rcl_take+0x26>
 801bbc8:	f7fe ff7c 	bl	801aac4 <rcl_convert_rmw_ret_to_rcl_ret>
 801bbcc:	4603      	mov	r3, r0
 801bbce:	e7e9      	b.n	801bba4 <rcl_take+0x80>

0801bbd0 <rcl_subscription_get_rmw_handle>:
 801bbd0:	b118      	cbz	r0, 801bbda <rcl_subscription_get_rmw_handle+0xa>
 801bbd2:	6800      	ldr	r0, [r0, #0]
 801bbd4:	b108      	cbz	r0, 801bbda <rcl_subscription_get_rmw_handle+0xa>
 801bbd6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801bbda:	4770      	bx	lr

0801bbdc <rcl_subscription_is_valid>:
 801bbdc:	b130      	cbz	r0, 801bbec <rcl_subscription_is_valid+0x10>
 801bbde:	6800      	ldr	r0, [r0, #0]
 801bbe0:	b120      	cbz	r0, 801bbec <rcl_subscription_is_valid+0x10>
 801bbe2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801bbe6:	3800      	subs	r0, #0
 801bbe8:	bf18      	it	ne
 801bbea:	2001      	movne	r0, #1
 801bbec:	4770      	bx	lr
 801bbee:	bf00      	nop

0801bbf0 <rcl_get_system_time>:
 801bbf0:	4608      	mov	r0, r1
 801bbf2:	f7f9 bc99 	b.w	8015528 <rcutils_system_time_now>
 801bbf6:	bf00      	nop

0801bbf8 <rcl_get_steady_time>:
 801bbf8:	4608      	mov	r0, r1
 801bbfa:	f7f9 bcbb 	b.w	8015574 <rcutils_steady_time_now>
 801bbfe:	bf00      	nop

0801bc00 <rcl_get_ros_time>:
 801bc00:	7a03      	ldrb	r3, [r0, #8]
 801bc02:	b510      	push	{r4, lr}
 801bc04:	460c      	mov	r4, r1
 801bc06:	b143      	cbz	r3, 801bc1a <rcl_get_ros_time+0x1a>
 801bc08:	2105      	movs	r1, #5
 801bc0a:	f001 ff99 	bl	801db40 <__atomic_load_8>
 801bc0e:	4602      	mov	r2, r0
 801bc10:	460b      	mov	r3, r1
 801bc12:	2000      	movs	r0, #0
 801bc14:	e9c4 2300 	strd	r2, r3, [r4]
 801bc18:	bd10      	pop	{r4, pc}
 801bc1a:	4608      	mov	r0, r1
 801bc1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc20:	f7f9 bc82 	b.w	8015528 <rcutils_system_time_now>

0801bc24 <rcl_clock_init>:
 801bc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc26:	4605      	mov	r5, r0
 801bc28:	4610      	mov	r0, r2
 801bc2a:	4614      	mov	r4, r2
 801bc2c:	460e      	mov	r6, r1
 801bc2e:	f7f9 fc3b 	bl	80154a8 <rcutils_allocator_is_valid>
 801bc32:	b128      	cbz	r0, 801bc40 <rcl_clock_init+0x1c>
 801bc34:	2d03      	cmp	r5, #3
 801bc36:	d803      	bhi.n	801bc40 <rcl_clock_init+0x1c>
 801bc38:	e8df f005 	tbb	[pc, r5]
 801bc3c:	0659301f 	.word	0x0659301f
 801bc40:	f04f 0c0b 	mov.w	ip, #11
 801bc44:	4660      	mov	r0, ip
 801bc46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc48:	2c00      	cmp	r4, #0
 801bc4a:	d0f9      	beq.n	801bc40 <rcl_clock_init+0x1c>
 801bc4c:	fab6 f386 	clz	r3, r6
 801bc50:	095b      	lsrs	r3, r3, #5
 801bc52:	2e00      	cmp	r6, #0
 801bc54:	d0f4      	beq.n	801bc40 <rcl_clock_init+0x1c>
 801bc56:	6133      	str	r3, [r6, #16]
 801bc58:	469c      	mov	ip, r3
 801bc5a:	f106 0514 	add.w	r5, r6, #20
 801bc5e:	4f32      	ldr	r7, [pc, #200]	@ (801bd28 <rcl_clock_init+0x104>)
 801bc60:	f04f 0e03 	mov.w	lr, #3
 801bc64:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bc68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bc6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bc6c:	6823      	ldr	r3, [r4, #0]
 801bc6e:	4660      	mov	r0, ip
 801bc70:	602b      	str	r3, [r5, #0]
 801bc72:	60f7      	str	r7, [r6, #12]
 801bc74:	f886 e000 	strb.w	lr, [r6]
 801bc78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc7a:	2e00      	cmp	r6, #0
 801bc7c:	d0e0      	beq.n	801bc40 <rcl_clock_init+0x1c>
 801bc7e:	2300      	movs	r3, #0
 801bc80:	f106 0514 	add.w	r5, r6, #20
 801bc84:	7033      	strb	r3, [r6, #0]
 801bc86:	469c      	mov	ip, r3
 801bc88:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bc8c:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801bc90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bc92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bc94:	6823      	ldr	r3, [r4, #0]
 801bc96:	4660      	mov	r0, ip
 801bc98:	602b      	str	r3, [r5, #0]
 801bc9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc9c:	2c00      	cmp	r4, #0
 801bc9e:	d0cf      	beq.n	801bc40 <rcl_clock_init+0x1c>
 801bca0:	fab6 f586 	clz	r5, r6
 801bca4:	096d      	lsrs	r5, r5, #5
 801bca6:	2e00      	cmp	r6, #0
 801bca8:	d0ca      	beq.n	801bc40 <rcl_clock_init+0x1c>
 801bcaa:	46a6      	mov	lr, r4
 801bcac:	7035      	strb	r5, [r6, #0]
 801bcae:	f106 0c14 	add.w	ip, r6, #20
 801bcb2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bcb6:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801bcba:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801bcbe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bcc2:	f8de 3000 	ldr.w	r3, [lr]
 801bcc6:	2010      	movs	r0, #16
 801bcc8:	f8cc 3000 	str.w	r3, [ip]
 801bccc:	6823      	ldr	r3, [r4, #0]
 801bcce:	6921      	ldr	r1, [r4, #16]
 801bcd0:	4798      	blx	r3
 801bcd2:	6130      	str	r0, [r6, #16]
 801bcd4:	b320      	cbz	r0, 801bd20 <rcl_clock_init+0xfc>
 801bcd6:	2200      	movs	r2, #0
 801bcd8:	2300      	movs	r3, #0
 801bcda:	46ac      	mov	ip, r5
 801bcdc:	7205      	strb	r5, [r0, #8]
 801bcde:	e9c0 2300 	strd	r2, r3, [r0]
 801bce2:	4a12      	ldr	r2, [pc, #72]	@ (801bd2c <rcl_clock_init+0x108>)
 801bce4:	2301      	movs	r3, #1
 801bce6:	4660      	mov	r0, ip
 801bce8:	60f2      	str	r2, [r6, #12]
 801bcea:	7033      	strb	r3, [r6, #0]
 801bcec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bcee:	2c00      	cmp	r4, #0
 801bcf0:	d0a6      	beq.n	801bc40 <rcl_clock_init+0x1c>
 801bcf2:	fab6 f386 	clz	r3, r6
 801bcf6:	095b      	lsrs	r3, r3, #5
 801bcf8:	2e00      	cmp	r6, #0
 801bcfa:	d0a1      	beq.n	801bc40 <rcl_clock_init+0x1c>
 801bcfc:	6133      	str	r3, [r6, #16]
 801bcfe:	469c      	mov	ip, r3
 801bd00:	f106 0514 	add.w	r5, r6, #20
 801bd04:	f8df e028 	ldr.w	lr, [pc, #40]	@ 801bd30 <rcl_clock_init+0x10c>
 801bd08:	2702      	movs	r7, #2
 801bd0a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bd0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bd10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bd12:	6823      	ldr	r3, [r4, #0]
 801bd14:	4660      	mov	r0, ip
 801bd16:	602b      	str	r3, [r5, #0]
 801bd18:	f8c6 e00c 	str.w	lr, [r6, #12]
 801bd1c:	7037      	strb	r7, [r6, #0]
 801bd1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd20:	f04f 0c0a 	mov.w	ip, #10
 801bd24:	e78e      	b.n	801bc44 <rcl_clock_init+0x20>
 801bd26:	bf00      	nop
 801bd28:	0801bbf9 	.word	0x0801bbf9
 801bd2c:	0801bc01 	.word	0x0801bc01
 801bd30:	0801bbf1 	.word	0x0801bbf1

0801bd34 <rcl_clock_get_now>:
 801bd34:	b140      	cbz	r0, 801bd48 <rcl_clock_get_now+0x14>
 801bd36:	b139      	cbz	r1, 801bd48 <rcl_clock_get_now+0x14>
 801bd38:	7803      	ldrb	r3, [r0, #0]
 801bd3a:	b11b      	cbz	r3, 801bd44 <rcl_clock_get_now+0x10>
 801bd3c:	68c3      	ldr	r3, [r0, #12]
 801bd3e:	b10b      	cbz	r3, 801bd44 <rcl_clock_get_now+0x10>
 801bd40:	6900      	ldr	r0, [r0, #16]
 801bd42:	4718      	bx	r3
 801bd44:	2001      	movs	r0, #1
 801bd46:	4770      	bx	lr
 801bd48:	200b      	movs	r0, #11
 801bd4a:	4770      	bx	lr

0801bd4c <rcl_clock_add_jump_callback>:
 801bd4c:	b082      	sub	sp, #8
 801bd4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd52:	a906      	add	r1, sp, #24
 801bd54:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	@ 0x30
 801bd58:	e881 000c 	stmia.w	r1, {r2, r3}
 801bd5c:	b330      	cbz	r0, 801bdac <rcl_clock_add_jump_callback+0x60>
 801bd5e:	4604      	mov	r4, r0
 801bd60:	3014      	adds	r0, #20
 801bd62:	f7f9 fba1 	bl	80154a8 <rcutils_allocator_is_valid>
 801bd66:	b30d      	cbz	r5, 801bdac <rcl_clock_add_jump_callback+0x60>
 801bd68:	f080 0301 	eor.w	r3, r0, #1
 801bd6c:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 801bd70:	d11c      	bne.n	801bdac <rcl_clock_add_jump_callback+0x60>
 801bd72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bd74:	2a00      	cmp	r2, #0
 801bd76:	db19      	blt.n	801bdac <rcl_clock_add_jump_callback+0x60>
 801bd78:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801bd7c:	2901      	cmp	r1, #1
 801bd7e:	f172 0200 	sbcs.w	r2, r2, #0
 801bd82:	da13      	bge.n	801bdac <rcl_clock_add_jump_callback+0x60>
 801bd84:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 801bd88:	2f00      	cmp	r7, #0
 801bd8a:	d040      	beq.n	801be0e <rcl_clock_add_jump_callback+0xc2>
 801bd8c:	4602      	mov	r2, r0
 801bd8e:	e003      	b.n	801bd98 <rcl_clock_add_jump_callback+0x4c>
 801bd90:	42bb      	cmp	r3, r7
 801bd92:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 801bd96:	d010      	beq.n	801bdba <rcl_clock_add_jump_callback+0x6e>
 801bd98:	6811      	ldr	r1, [r2, #0]
 801bd9a:	3301      	adds	r3, #1
 801bd9c:	42a9      	cmp	r1, r5
 801bd9e:	d1f7      	bne.n	801bd90 <rcl_clock_add_jump_callback+0x44>
 801bda0:	6a11      	ldr	r1, [r2, #32]
 801bda2:	42b1      	cmp	r1, r6
 801bda4:	d1f4      	bne.n	801bd90 <rcl_clock_add_jump_callback+0x44>
 801bda6:	f04f 0e01 	mov.w	lr, #1
 801bdaa:	e001      	b.n	801bdb0 <rcl_clock_add_jump_callback+0x64>
 801bdac:	f04f 0e0b 	mov.w	lr, #11
 801bdb0:	4670      	mov	r0, lr
 801bdb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bdb6:	b002      	add	sp, #8
 801bdb8:	4770      	bx	lr
 801bdba:	3301      	adds	r3, #1
 801bdbc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801bdc0:	00d9      	lsls	r1, r3, #3
 801bdc2:	69e3      	ldr	r3, [r4, #28]
 801bdc4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801bdc6:	4798      	blx	r3
 801bdc8:	b1f0      	cbz	r0, 801be08 <rcl_clock_add_jump_callback+0xbc>
 801bdca:	68a3      	ldr	r3, [r4, #8]
 801bdcc:	f10d 0c18 	add.w	ip, sp, #24
 801bdd0:	6060      	str	r0, [r4, #4]
 801bdd2:	f04f 0e00 	mov.w	lr, #0
 801bdd6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801bdda:	f103 0801 	add.w	r8, r3, #1
 801bdde:	f840 5032 	str.w	r5, [r0, r2, lsl #3]
 801bde2:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801bde6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bdea:	f105 0708 	add.w	r7, r5, #8
 801bdee:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801bdf0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801bdf4:	e887 0003 	stmia.w	r7, {r0, r1}
 801bdf8:	4670      	mov	r0, lr
 801bdfa:	622e      	str	r6, [r5, #32]
 801bdfc:	f8c4 8008 	str.w	r8, [r4, #8]
 801be00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801be04:	b002      	add	sp, #8
 801be06:	4770      	bx	lr
 801be08:	f04f 0e0a 	mov.w	lr, #10
 801be0c:	e7d0      	b.n	801bdb0 <rcl_clock_add_jump_callback+0x64>
 801be0e:	2128      	movs	r1, #40	@ 0x28
 801be10:	e7d7      	b.n	801bdc2 <rcl_clock_add_jump_callback+0x76>
 801be12:	bf00      	nop

0801be14 <rcl_clock_remove_jump_callback>:
 801be14:	2800      	cmp	r0, #0
 801be16:	d05f      	beq.n	801bed8 <rcl_clock_remove_jump_callback+0xc4>
 801be18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be1c:	4605      	mov	r5, r0
 801be1e:	3014      	adds	r0, #20
 801be20:	460f      	mov	r7, r1
 801be22:	4692      	mov	sl, r2
 801be24:	f7f9 fb40 	bl	80154a8 <rcutils_allocator_is_valid>
 801be28:	f080 0001 	eor.w	r0, r0, #1
 801be2c:	b2c0      	uxtb	r0, r0
 801be2e:	2800      	cmp	r0, #0
 801be30:	d13f      	bne.n	801beb2 <rcl_clock_remove_jump_callback+0x9e>
 801be32:	2f00      	cmp	r7, #0
 801be34:	d03d      	beq.n	801beb2 <rcl_clock_remove_jump_callback+0x9e>
 801be36:	f8d5 8008 	ldr.w	r8, [r5, #8]
 801be3a:	f1b8 0f00 	cmp.w	r8, #0
 801be3e:	d00c      	beq.n	801be5a <rcl_clock_remove_jump_callback+0x46>
 801be40:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801be44:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 801be48:	464c      	mov	r4, r9
 801be4a:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 801be4e:	6823      	ldr	r3, [r4, #0]
 801be50:	42bb      	cmp	r3, r7
 801be52:	d005      	beq.n	801be60 <rcl_clock_remove_jump_callback+0x4c>
 801be54:	3428      	adds	r4, #40	@ 0x28
 801be56:	42a6      	cmp	r6, r4
 801be58:	d1f9      	bne.n	801be4e <rcl_clock_remove_jump_callback+0x3a>
 801be5a:	2001      	movs	r0, #1
 801be5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801be60:	6a23      	ldr	r3, [r4, #32]
 801be62:	3428      	adds	r4, #40	@ 0x28
 801be64:	42a6      	cmp	r6, r4
 801be66:	d02f      	beq.n	801bec8 <rcl_clock_remove_jump_callback+0xb4>
 801be68:	4553      	cmp	r3, sl
 801be6a:	d1f0      	bne.n	801be4e <rcl_clock_remove_jump_callback+0x3a>
 801be6c:	46a6      	mov	lr, r4
 801be6e:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 801be72:	3428      	adds	r4, #40	@ 0x28
 801be74:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801be78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801be7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801be80:	42a6      	cmp	r6, r4
 801be82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801be86:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801be8a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801be8e:	d1ed      	bne.n	801be6c <rcl_clock_remove_jump_callback+0x58>
 801be90:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 801be94:	60ac      	str	r4, [r5, #8]
 801be96:	b17c      	cbz	r4, 801beb8 <rcl_clock_remove_jump_callback+0xa4>
 801be98:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801be9c:	69eb      	ldr	r3, [r5, #28]
 801be9e:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801bea0:	4648      	mov	r0, r9
 801bea2:	00e1      	lsls	r1, r4, #3
 801bea4:	4798      	blx	r3
 801bea6:	4603      	mov	r3, r0
 801bea8:	b1c0      	cbz	r0, 801bedc <rcl_clock_remove_jump_callback+0xc8>
 801beaa:	2000      	movs	r0, #0
 801beac:	606b      	str	r3, [r5, #4]
 801beae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801beb2:	200b      	movs	r0, #11
 801beb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801beb8:	4648      	mov	r0, r9
 801beba:	69ab      	ldr	r3, [r5, #24]
 801bebc:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 801bebe:	4798      	blx	r3
 801bec0:	4620      	mov	r0, r4
 801bec2:	606c      	str	r4, [r5, #4]
 801bec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bec8:	4553      	cmp	r3, sl
 801beca:	d1c6      	bne.n	801be5a <rcl_clock_remove_jump_callback+0x46>
 801becc:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 801bed0:	60ac      	str	r4, [r5, #8]
 801bed2:	2c00      	cmp	r4, #0
 801bed4:	d1e0      	bne.n	801be98 <rcl_clock_remove_jump_callback+0x84>
 801bed6:	e7ef      	b.n	801beb8 <rcl_clock_remove_jump_callback+0xa4>
 801bed8:	200b      	movs	r0, #11
 801beda:	4770      	bx	lr
 801bedc:	200a      	movs	r0, #10
 801bede:	e7e9      	b.n	801beb4 <rcl_clock_remove_jump_callback+0xa0>

0801bee0 <_rcl_timer_time_jump>:
 801bee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bee4:	4605      	mov	r5, r0
 801bee6:	b084      	sub	sp, #16
 801bee8:	4614      	mov	r4, r2
 801beea:	b131      	cbz	r1, 801befa <_rcl_timer_time_jump+0x1a>
 801beec:	7803      	ldrb	r3, [r0, #0]
 801beee:	3b02      	subs	r3, #2
 801bef0:	2b01      	cmp	r3, #1
 801bef2:	d93f      	bls.n	801bf74 <_rcl_timer_time_jump+0x94>
 801bef4:	b004      	add	sp, #16
 801bef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801befa:	6813      	ldr	r3, [r2, #0]
 801befc:	a902      	add	r1, sp, #8
 801befe:	6818      	ldr	r0, [r3, #0]
 801bf00:	f7ff ff18 	bl	801bd34 <rcl_clock_get_now>
 801bf04:	2800      	cmp	r0, #0
 801bf06:	d1f5      	bne.n	801bef4 <_rcl_timer_time_jump+0x14>
 801bf08:	6820      	ldr	r0, [r4, #0]
 801bf0a:	2105      	movs	r1, #5
 801bf0c:	3020      	adds	r0, #32
 801bf0e:	f001 fe17 	bl	801db40 <__atomic_load_8>
 801bf12:	6823      	ldr	r3, [r4, #0]
 801bf14:	4681      	mov	r9, r0
 801bf16:	4688      	mov	r8, r1
 801bf18:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 801bf1c:	2105      	movs	r1, #5
 801bf1e:	f001 fe0f 	bl	801db40 <__atomic_load_8>
 801bf22:	4607      	mov	r7, r0
 801bf24:	6820      	ldr	r0, [r4, #0]
 801bf26:	460e      	mov	r6, r1
 801bf28:	2105      	movs	r1, #5
 801bf2a:	3018      	adds	r0, #24
 801bf2c:	f001 fe08 	bl	801db40 <__atomic_load_8>
 801bf30:	782b      	ldrb	r3, [r5, #0]
 801bf32:	4682      	mov	sl, r0
 801bf34:	460d      	mov	r5, r1
 801bf36:	3b02      	subs	r3, #2
 801bf38:	9a02      	ldr	r2, [sp, #8]
 801bf3a:	2b01      	cmp	r3, #1
 801bf3c:	9b03      	ldr	r3, [sp, #12]
 801bf3e:	d937      	bls.n	801bfb0 <_rcl_timer_time_jump+0xd0>
 801bf40:	42ba      	cmp	r2, r7
 801bf42:	eb73 0106 	sbcs.w	r1, r3, r6
 801bf46:	da60      	bge.n	801c00a <_rcl_timer_time_jump+0x12a>
 801bf48:	454a      	cmp	r2, r9
 801bf4a:	eb73 0108 	sbcs.w	r1, r3, r8
 801bf4e:	dad1      	bge.n	801bef4 <_rcl_timer_time_jump+0x14>
 801bf50:	eb1a 0202 	adds.w	r2, sl, r2
 801bf54:	6820      	ldr	r0, [r4, #0]
 801bf56:	eb43 0305 	adc.w	r3, r3, r5
 801bf5a:	2505      	movs	r5, #5
 801bf5c:	3028      	adds	r0, #40	@ 0x28
 801bf5e:	9500      	str	r5, [sp, #0]
 801bf60:	f001 fe24 	bl	801dbac <__atomic_store_8>
 801bf64:	6820      	ldr	r0, [r4, #0]
 801bf66:	9500      	str	r5, [sp, #0]
 801bf68:	3020      	adds	r0, #32
 801bf6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bf6e:	f001 fe1d 	bl	801dbac <__atomic_store_8>
 801bf72:	e7bf      	b.n	801bef4 <_rcl_timer_time_jump+0x14>
 801bf74:	6813      	ldr	r3, [r2, #0]
 801bf76:	a902      	add	r1, sp, #8
 801bf78:	6818      	ldr	r0, [r3, #0]
 801bf7a:	f7ff fedb 	bl	801bd34 <rcl_clock_get_now>
 801bf7e:	2800      	cmp	r0, #0
 801bf80:	d1b8      	bne.n	801bef4 <_rcl_timer_time_jump+0x14>
 801bf82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bf86:	4313      	orrs	r3, r2
 801bf88:	d0b4      	beq.n	801bef4 <_rcl_timer_time_jump+0x14>
 801bf8a:	6820      	ldr	r0, [r4, #0]
 801bf8c:	2105      	movs	r1, #5
 801bf8e:	3028      	adds	r0, #40	@ 0x28
 801bf90:	f001 fdd6 	bl	801db40 <__atomic_load_8>
 801bf94:	9d02      	ldr	r5, [sp, #8]
 801bf96:	4602      	mov	r2, r0
 801bf98:	9b03      	ldr	r3, [sp, #12]
 801bf9a:	6820      	ldr	r0, [r4, #0]
 801bf9c:	1b52      	subs	r2, r2, r5
 801bf9e:	f100 0030 	add.w	r0, r0, #48	@ 0x30
 801bfa2:	eb61 0303 	sbc.w	r3, r1, r3
 801bfa6:	2105      	movs	r1, #5
 801bfa8:	9100      	str	r1, [sp, #0]
 801bfaa:	f001 fdff 	bl	801dbac <__atomic_store_8>
 801bfae:	e7a1      	b.n	801bef4 <_rcl_timer_time_jump+0x14>
 801bfb0:	4313      	orrs	r3, r2
 801bfb2:	d09f      	beq.n	801bef4 <_rcl_timer_time_jump+0x14>
 801bfb4:	6820      	ldr	r0, [r4, #0]
 801bfb6:	f04f 0805 	mov.w	r8, #5
 801bfba:	2300      	movs	r3, #0
 801bfbc:	2200      	movs	r2, #0
 801bfbe:	3030      	adds	r0, #48	@ 0x30
 801bfc0:	f8cd 8000 	str.w	r8, [sp]
 801bfc4:	f001 fe28 	bl	801dc18 <__atomic_exchange_8>
 801bfc8:	ea51 0300 	orrs.w	r3, r1, r0
 801bfcc:	4606      	mov	r6, r0
 801bfce:	460f      	mov	r7, r1
 801bfd0:	d090      	beq.n	801bef4 <_rcl_timer_time_jump+0x14>
 801bfd2:	9a02      	ldr	r2, [sp, #8]
 801bfd4:	9b03      	ldr	r3, [sp, #12]
 801bfd6:	1a12      	subs	r2, r2, r0
 801bfd8:	f8cd 8000 	str.w	r8, [sp]
 801bfdc:	6820      	ldr	r0, [r4, #0]
 801bfde:	eb63 0301 	sbc.w	r3, r3, r1
 801bfe2:	eb12 020a 	adds.w	r2, r2, sl
 801bfe6:	f100 0028 	add.w	r0, r0, #40	@ 0x28
 801bfea:	eb43 0305 	adc.w	r3, r3, r5
 801bfee:	f001 fddd 	bl	801dbac <__atomic_store_8>
 801bff2:	f8cd 8000 	str.w	r8, [sp]
 801bff6:	6820      	ldr	r0, [r4, #0]
 801bff8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bffc:	3020      	adds	r0, #32
 801bffe:	1b92      	subs	r2, r2, r6
 801c000:	eb63 0307 	sbc.w	r3, r3, r7
 801c004:	f001 fdd2 	bl	801dbac <__atomic_store_8>
 801c008:	e774      	b.n	801bef4 <_rcl_timer_time_jump+0x14>
 801c00a:	6820      	ldr	r0, [r4, #0]
 801c00c:	3008      	adds	r0, #8
 801c00e:	f005 f9e7 	bl	80213e0 <rcl_trigger_guard_condition>
 801c012:	e76f      	b.n	801bef4 <_rcl_timer_time_jump+0x14>

0801c014 <rcl_get_zero_initialized_timer>:
 801c014:	4b01      	ldr	r3, [pc, #4]	@ (801c01c <rcl_get_zero_initialized_timer+0x8>)
 801c016:	6818      	ldr	r0, [r3, #0]
 801c018:	4770      	bx	lr
 801c01a:	bf00      	nop
 801c01c:	08025478 	.word	0x08025478

0801c020 <rcl_timer_init>:
 801c020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c024:	b0ab      	sub	sp, #172	@ 0xac
 801c026:	460d      	mov	r5, r1
 801c028:	4604      	mov	r4, r0
 801c02a:	4692      	mov	sl, r2
 801c02c:	a837      	add	r0, sp, #220	@ 0xdc
 801c02e:	9f35      	ldr	r7, [sp, #212]	@ 0xd4
 801c030:	f8dd 80d0 	ldr.w	r8, [sp, #208]	@ 0xd0
 801c034:	f7f9 fa38 	bl	80154a8 <rcutils_allocator_is_valid>
 801c038:	fab5 f385 	clz	r3, r5
 801c03c:	095b      	lsrs	r3, r3, #5
 801c03e:	ea43 73d7 	orr.w	r3, r3, r7, lsr #31
 801c042:	2c00      	cmp	r4, #0
 801c044:	bf08      	it	eq
 801c046:	f043 0301 	orreq.w	r3, r3, #1
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	d164      	bne.n	801c118 <rcl_timer_init+0xf8>
 801c04e:	f080 0001 	eor.w	r0, r0, #1
 801c052:	b2c0      	uxtb	r0, r0
 801c054:	2800      	cmp	r0, #0
 801c056:	d15f      	bne.n	801c118 <rcl_timer_init+0xf8>
 801c058:	6823      	ldr	r3, [r4, #0]
 801c05a:	b123      	cbz	r3, 801c066 <rcl_timer_init+0x46>
 801c05c:	2664      	movs	r6, #100	@ 0x64
 801c05e:	4630      	mov	r0, r6
 801c060:	b02b      	add	sp, #172	@ 0xac
 801c062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c066:	a908      	add	r1, sp, #32
 801c068:	4628      	mov	r0, r5
 801c06a:	f7ff fe63 	bl	801bd34 <rcl_clock_get_now>
 801c06e:	4606      	mov	r6, r0
 801c070:	2800      	cmp	r0, #0
 801c072:	d1f4      	bne.n	801c05e <rcl_timer_init+0x3e>
 801c074:	f10d 0b18 	add.w	fp, sp, #24
 801c078:	ae0b      	add	r6, sp, #44	@ 0x2c
 801c07a:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 801c07e:	4658      	mov	r0, fp
 801c080:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 801c084:	f005 f8b6 	bl	80211f4 <rcl_get_zero_initialized_guard_condition>
 801c088:	e89b 0003 	ldmia.w	fp, {r0, r1}
 801c08c:	e889 0003 	stmia.w	r9, {r0, r1}
 801c090:	4630      	mov	r0, r6
 801c092:	f005 f989 	bl	80213a8 <rcl_guard_condition_get_default_options>
 801c096:	ab0d      	add	r3, sp, #52	@ 0x34
 801c098:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c09c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801c0a0:	4651      	mov	r1, sl
 801c0a2:	4648      	mov	r0, r9
 801c0a4:	e896 000c 	ldmia.w	r6, {r2, r3}
 801c0a8:	f005 f8ae 	bl	8021208 <rcl_guard_condition_init>
 801c0ac:	4606      	mov	r6, r0
 801c0ae:	2800      	cmp	r0, #0
 801c0b0:	d1d5      	bne.n	801c05e <rcl_timer_init+0x3e>
 801c0b2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c0b4:	781b      	ldrb	r3, [r3, #0]
 801c0b6:	2b01      	cmp	r3, #1
 801c0b8:	d033      	beq.n	801c122 <rcl_timer_init+0x102>
 801c0ba:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 801c0bc:	4642      	mov	r2, r8
 801c0be:	463b      	mov	r3, r7
 801c0c0:	f10d 0edc 	add.w	lr, sp, #220	@ 0xdc
 801c0c4:	911a      	str	r1, [sp, #104]	@ 0x68
 801c0c6:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 801c0ca:	f04f 0a00 	mov.w	sl, #0
 801c0ce:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 801c0d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c0d6:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 801c180 <rcl_timer_init+0x160>
 801c0da:	eb12 0008 	adds.w	r0, r2, r8
 801c0de:	eb47 0103 	adc.w	r1, r7, r3
 801c0e2:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 801c0e6:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 801c0ea:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 801c0ee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c0f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c0f6:	f8de 3000 	ldr.w	r3, [lr]
 801c0fa:	2050      	movs	r0, #80	@ 0x50
 801c0fc:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 801c100:	4619      	mov	r1, r3
 801c102:	f8cc 3000 	str.w	r3, [ip]
 801c106:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 801c108:	4798      	blx	r3
 801c10a:	6020      	str	r0, [r4, #0]
 801c10c:	b358      	cbz	r0, 801c166 <rcl_timer_init+0x146>
 801c10e:	2250      	movs	r2, #80	@ 0x50
 801c110:	a916      	add	r1, sp, #88	@ 0x58
 801c112:	f006 f9ec 	bl	80224ee <memcpy>
 801c116:	e7a2      	b.n	801c05e <rcl_timer_init+0x3e>
 801c118:	260b      	movs	r6, #11
 801c11a:	4630      	mov	r0, r6
 801c11c:	b02b      	add	sp, #172	@ 0xac
 801c11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c122:	2001      	movs	r0, #1
 801c124:	2100      	movs	r1, #0
 801c126:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 801c12a:	ab12      	add	r3, sp, #72	@ 0x48
 801c12c:	4a16      	ldr	r2, [pc, #88]	@ (801c188 <rcl_timer_init+0x168>)
 801c12e:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 801c132:	9405      	str	r4, [sp, #20]
 801c134:	9204      	str	r2, [sp, #16]
 801c136:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 801c13a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c13e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801c142:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 801c146:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c148:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801c14c:	4628      	mov	r0, r5
 801c14e:	e89c 000c 	ldmia.w	ip, {r2, r3}
 801c152:	f7ff fdfb 	bl	801bd4c <rcl_clock_add_jump_callback>
 801c156:	4603      	mov	r3, r0
 801c158:	2800      	cmp	r0, #0
 801c15a:	d0ae      	beq.n	801c0ba <rcl_timer_init+0x9a>
 801c15c:	4648      	mov	r0, r9
 801c15e:	461e      	mov	r6, r3
 801c160:	f005 f8fc 	bl	802135c <rcl_guard_condition_fini>
 801c164:	e77b      	b.n	801c05e <rcl_timer_init+0x3e>
 801c166:	4648      	mov	r0, r9
 801c168:	260a      	movs	r6, #10
 801c16a:	f005 f8f7 	bl	802135c <rcl_guard_condition_fini>
 801c16e:	4622      	mov	r2, r4
 801c170:	4905      	ldr	r1, [pc, #20]	@ (801c188 <rcl_timer_init+0x168>)
 801c172:	4628      	mov	r0, r5
 801c174:	f7ff fe4e 	bl	801be14 <rcl_clock_remove_jump_callback>
 801c178:	e771      	b.n	801c05e <rcl_timer_init+0x3e>
 801c17a:	bf00      	nop
 801c17c:	f3af 8000 	nop.w
	...
 801c188:	0801bee1 	.word	0x0801bee1

0801c18c <rcl_timer_call>:
 801c18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c190:	b087      	sub	sp, #28
 801c192:	2800      	cmp	r0, #0
 801c194:	d06c      	beq.n	801c270 <rcl_timer_call+0xe4>
 801c196:	6803      	ldr	r3, [r0, #0]
 801c198:	4604      	mov	r4, r0
 801c19a:	2b00      	cmp	r3, #0
 801c19c:	d062      	beq.n	801c264 <rcl_timer_call+0xd8>
 801c19e:	f3bf 8f5b 	dmb	ish
 801c1a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c1a6:	f3bf 8f5b 	dmb	ish
 801c1aa:	2b00      	cmp	r3, #0
 801c1ac:	d14f      	bne.n	801c24e <rcl_timer_call+0xc2>
 801c1ae:	6803      	ldr	r3, [r0, #0]
 801c1b0:	a904      	add	r1, sp, #16
 801c1b2:	6818      	ldr	r0, [r3, #0]
 801c1b4:	f7ff fdbe 	bl	801bd34 <rcl_clock_get_now>
 801c1b8:	4605      	mov	r5, r0
 801c1ba:	2800      	cmp	r0, #0
 801c1bc:	d149      	bne.n	801c252 <rcl_timer_call+0xc6>
 801c1be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c1c2:	2b00      	cmp	r3, #0
 801c1c4:	db49      	blt.n	801c25a <rcl_timer_call+0xce>
 801c1c6:	2605      	movs	r6, #5
 801c1c8:	6820      	ldr	r0, [r4, #0]
 801c1ca:	9600      	str	r6, [sp, #0]
 801c1cc:	3020      	adds	r0, #32
 801c1ce:	f001 fd23 	bl	801dc18 <__atomic_exchange_8>
 801c1d2:	6823      	ldr	r3, [r4, #0]
 801c1d4:	4680      	mov	r8, r0
 801c1d6:	f3bf 8f5b 	dmb	ish
 801c1da:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801c1de:	f3bf 8f5b 	dmb	ish
 801c1e2:	6820      	ldr	r0, [r4, #0]
 801c1e4:	4689      	mov	r9, r1
 801c1e6:	4631      	mov	r1, r6
 801c1e8:	3028      	adds	r0, #40	@ 0x28
 801c1ea:	f001 fca9 	bl	801db40 <__atomic_load_8>
 801c1ee:	460f      	mov	r7, r1
 801c1f0:	4631      	mov	r1, r6
 801c1f2:	4606      	mov	r6, r0
 801c1f4:	6820      	ldr	r0, [r4, #0]
 801c1f6:	3018      	adds	r0, #24
 801c1f8:	f001 fca2 	bl	801db40 <__atomic_load_8>
 801c1fc:	4602      	mov	r2, r0
 801c1fe:	9804      	ldr	r0, [sp, #16]
 801c200:	460b      	mov	r3, r1
 801c202:	18b6      	adds	r6, r6, r2
 801c204:	f8dd c014 	ldr.w	ip, [sp, #20]
 801c208:	4692      	mov	sl, r2
 801c20a:	eb47 0701 	adc.w	r7, r7, r1
 801c20e:	4286      	cmp	r6, r0
 801c210:	eb77 010c 	sbcs.w	r1, r7, ip
 801c214:	da04      	bge.n	801c220 <rcl_timer_call+0x94>
 801c216:	ea53 0102 	orrs.w	r1, r3, r2
 801c21a:	d12e      	bne.n	801c27a <rcl_timer_call+0xee>
 801c21c:	4606      	mov	r6, r0
 801c21e:	4667      	mov	r7, ip
 801c220:	6820      	ldr	r0, [r4, #0]
 801c222:	2105      	movs	r1, #5
 801c224:	4632      	mov	r2, r6
 801c226:	463b      	mov	r3, r7
 801c228:	3028      	adds	r0, #40	@ 0x28
 801c22a:	9100      	str	r1, [sp, #0]
 801c22c:	f001 fcbe 	bl	801dbac <__atomic_store_8>
 801c230:	f1bb 0f00 	cmp.w	fp, #0
 801c234:	d00d      	beq.n	801c252 <rcl_timer_call+0xc6>
 801c236:	9a04      	ldr	r2, [sp, #16]
 801c238:	4620      	mov	r0, r4
 801c23a:	9b05      	ldr	r3, [sp, #20]
 801c23c:	ebb2 0208 	subs.w	r2, r2, r8
 801c240:	eb63 0309 	sbc.w	r3, r3, r9
 801c244:	47d8      	blx	fp
 801c246:	4628      	mov	r0, r5
 801c248:	b007      	add	sp, #28
 801c24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c24e:	f240 3521 	movw	r5, #801	@ 0x321
 801c252:	4628      	mov	r0, r5
 801c254:	b007      	add	sp, #28
 801c256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c25a:	2501      	movs	r5, #1
 801c25c:	4628      	mov	r0, r5
 801c25e:	b007      	add	sp, #28
 801c260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c264:	f44f 7548 	mov.w	r5, #800	@ 0x320
 801c268:	4628      	mov	r0, r5
 801c26a:	b007      	add	sp, #28
 801c26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c270:	250b      	movs	r5, #11
 801c272:	4628      	mov	r0, r5
 801c274:	b007      	add	sp, #28
 801c276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c27a:	1b80      	subs	r0, r0, r6
 801c27c:	eb6c 0107 	sbc.w	r1, ip, r7
 801c280:	3801      	subs	r0, #1
 801c282:	f161 0100 	sbc.w	r1, r1, #0
 801c286:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801c28a:	f7e4 f891 	bl	80003b0 <__aeabi_ldivmod>
 801c28e:	9b02      	ldr	r3, [sp, #8]
 801c290:	3001      	adds	r0, #1
 801c292:	f141 0100 	adc.w	r1, r1, #0
 801c296:	fb00 f303 	mul.w	r3, r0, r3
 801c29a:	fb01 330a 	mla	r3, r1, sl, r3
 801c29e:	fba0 0a0a 	umull	r0, sl, r0, sl
 801c2a2:	1986      	adds	r6, r0, r6
 801c2a4:	4453      	add	r3, sl
 801c2a6:	eb43 0707 	adc.w	r7, r3, r7
 801c2aa:	e7b9      	b.n	801c220 <rcl_timer_call+0x94>

0801c2ac <rcl_timer_is_ready>:
 801c2ac:	b570      	push	{r4, r5, r6, lr}
 801c2ae:	b082      	sub	sp, #8
 801c2b0:	b380      	cbz	r0, 801c314 <rcl_timer_is_ready+0x68>
 801c2b2:	6803      	ldr	r3, [r0, #0]
 801c2b4:	4604      	mov	r4, r0
 801c2b6:	b38b      	cbz	r3, 801c31c <rcl_timer_is_ready+0x70>
 801c2b8:	460d      	mov	r5, r1
 801c2ba:	b359      	cbz	r1, 801c314 <rcl_timer_is_ready+0x68>
 801c2bc:	f3bf 8f5b 	dmb	ish
 801c2c0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c2c4:	f3bf 8f5b 	dmb	ish
 801c2c8:	b953      	cbnz	r3, 801c2e0 <rcl_timer_is_ready+0x34>
 801c2ca:	6803      	ldr	r3, [r0, #0]
 801c2cc:	4669      	mov	r1, sp
 801c2ce:	6818      	ldr	r0, [r3, #0]
 801c2d0:	f7ff fd30 	bl	801bd34 <rcl_clock_get_now>
 801c2d4:	4606      	mov	r6, r0
 801c2d6:	b148      	cbz	r0, 801c2ec <rcl_timer_is_ready+0x40>
 801c2d8:	f240 3321 	movw	r3, #801	@ 0x321
 801c2dc:	4298      	cmp	r0, r3
 801c2de:	d102      	bne.n	801c2e6 <rcl_timer_is_ready+0x3a>
 801c2e0:	2300      	movs	r3, #0
 801c2e2:	461e      	mov	r6, r3
 801c2e4:	702b      	strb	r3, [r5, #0]
 801c2e6:	4630      	mov	r0, r6
 801c2e8:	b002      	add	sp, #8
 801c2ea:	bd70      	pop	{r4, r5, r6, pc}
 801c2ec:	6820      	ldr	r0, [r4, #0]
 801c2ee:	2105      	movs	r1, #5
 801c2f0:	3028      	adds	r0, #40	@ 0x28
 801c2f2:	f001 fc25 	bl	801db40 <__atomic_load_8>
 801c2f6:	9b00      	ldr	r3, [sp, #0]
 801c2f8:	1ac0      	subs	r0, r0, r3
 801c2fa:	9b01      	ldr	r3, [sp, #4]
 801c2fc:	eb61 0103 	sbc.w	r1, r1, r3
 801c300:	2801      	cmp	r0, #1
 801c302:	4630      	mov	r0, r6
 801c304:	f171 0300 	sbcs.w	r3, r1, #0
 801c308:	bfb4      	ite	lt
 801c30a:	2301      	movlt	r3, #1
 801c30c:	2300      	movge	r3, #0
 801c30e:	702b      	strb	r3, [r5, #0]
 801c310:	b002      	add	sp, #8
 801c312:	bd70      	pop	{r4, r5, r6, pc}
 801c314:	260b      	movs	r6, #11
 801c316:	4630      	mov	r0, r6
 801c318:	b002      	add	sp, #8
 801c31a:	bd70      	pop	{r4, r5, r6, pc}
 801c31c:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801c320:	e7e1      	b.n	801c2e6 <rcl_timer_is_ready+0x3a>
 801c322:	bf00      	nop

0801c324 <rcl_timer_get_time_until_next_call>:
 801c324:	b570      	push	{r4, r5, r6, lr}
 801c326:	b082      	sub	sp, #8
 801c328:	b330      	cbz	r0, 801c378 <rcl_timer_get_time_until_next_call+0x54>
 801c32a:	6803      	ldr	r3, [r0, #0]
 801c32c:	4604      	mov	r4, r0
 801c32e:	b33b      	cbz	r3, 801c380 <rcl_timer_get_time_until_next_call+0x5c>
 801c330:	460d      	mov	r5, r1
 801c332:	b309      	cbz	r1, 801c378 <rcl_timer_get_time_until_next_call+0x54>
 801c334:	f3bf 8f5b 	dmb	ish
 801c338:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c33c:	f3bf 8f5b 	dmb	ish
 801c340:	b9ab      	cbnz	r3, 801c36e <rcl_timer_get_time_until_next_call+0x4a>
 801c342:	6803      	ldr	r3, [r0, #0]
 801c344:	4669      	mov	r1, sp
 801c346:	6818      	ldr	r0, [r3, #0]
 801c348:	f7ff fcf4 	bl	801bd34 <rcl_clock_get_now>
 801c34c:	4606      	mov	r6, r0
 801c34e:	b958      	cbnz	r0, 801c368 <rcl_timer_get_time_until_next_call+0x44>
 801c350:	6820      	ldr	r0, [r4, #0]
 801c352:	2105      	movs	r1, #5
 801c354:	3028      	adds	r0, #40	@ 0x28
 801c356:	f001 fbf3 	bl	801db40 <__atomic_load_8>
 801c35a:	9b00      	ldr	r3, [sp, #0]
 801c35c:	1ac0      	subs	r0, r0, r3
 801c35e:	9b01      	ldr	r3, [sp, #4]
 801c360:	eb61 0103 	sbc.w	r1, r1, r3
 801c364:	6028      	str	r0, [r5, #0]
 801c366:	6069      	str	r1, [r5, #4]
 801c368:	4630      	mov	r0, r6
 801c36a:	b002      	add	sp, #8
 801c36c:	bd70      	pop	{r4, r5, r6, pc}
 801c36e:	f240 3621 	movw	r6, #801	@ 0x321
 801c372:	4630      	mov	r0, r6
 801c374:	b002      	add	sp, #8
 801c376:	bd70      	pop	{r4, r5, r6, pc}
 801c378:	260b      	movs	r6, #11
 801c37a:	4630      	mov	r0, r6
 801c37c:	b002      	add	sp, #8
 801c37e:	bd70      	pop	{r4, r5, r6, pc}
 801c380:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801c384:	e7f0      	b.n	801c368 <rcl_timer_get_time_until_next_call+0x44>
 801c386:	bf00      	nop

0801c388 <rcl_timer_get_guard_condition>:
 801c388:	b130      	cbz	r0, 801c398 <rcl_timer_get_guard_condition+0x10>
 801c38a:	6800      	ldr	r0, [r0, #0]
 801c38c:	b120      	cbz	r0, 801c398 <rcl_timer_get_guard_condition+0x10>
 801c38e:	68c3      	ldr	r3, [r0, #12]
 801c390:	b10b      	cbz	r3, 801c396 <rcl_timer_get_guard_condition+0xe>
 801c392:	3008      	adds	r0, #8
 801c394:	4770      	bx	lr
 801c396:	4618      	mov	r0, r3
 801c398:	4770      	bx	lr
 801c39a:	bf00      	nop

0801c39c <rcl_validate_enclave_name_with_size>:
 801c39c:	2800      	cmp	r0, #0
 801c39e:	d049      	beq.n	801c434 <rcl_validate_enclave_name_with_size+0x98>
 801c3a0:	b570      	push	{r4, r5, r6, lr}
 801c3a2:	4615      	mov	r5, r2
 801c3a4:	b0c2      	sub	sp, #264	@ 0x108
 801c3a6:	b19a      	cbz	r2, 801c3d0 <rcl_validate_enclave_name_with_size+0x34>
 801c3a8:	461e      	mov	r6, r3
 801c3aa:	466a      	mov	r2, sp
 801c3ac:	ab01      	add	r3, sp, #4
 801c3ae:	460c      	mov	r4, r1
 801c3b0:	f002 f88e 	bl	801e4d0 <rmw_validate_namespace_with_size>
 801c3b4:	4684      	mov	ip, r0
 801c3b6:	b9b8      	cbnz	r0, 801c3e8 <rcl_validate_enclave_name_with_size+0x4c>
 801c3b8:	9900      	ldr	r1, [sp, #0]
 801c3ba:	b171      	cbz	r1, 801c3da <rcl_validate_enclave_name_with_size+0x3e>
 801c3bc:	2907      	cmp	r1, #7
 801c3be:	d019      	beq.n	801c3f4 <rcl_validate_enclave_name_with_size+0x58>
 801c3c0:	1e4b      	subs	r3, r1, #1
 801c3c2:	2b05      	cmp	r3, #5
 801c3c4:	d83a      	bhi.n	801c43c <rcl_validate_enclave_name_with_size+0xa0>
 801c3c6:	e8df f003 	tbb	[pc, r3]
 801c3ca:	2926      	.short	0x2926
 801c3cc:	1d322f2c 	.word	0x1d322f2c
 801c3d0:	f04f 0c0b 	mov.w	ip, #11
 801c3d4:	4660      	mov	r0, ip
 801c3d6:	b042      	add	sp, #264	@ 0x108
 801c3d8:	bd70      	pop	{r4, r5, r6, pc}
 801c3da:	2907      	cmp	r1, #7
 801c3dc:	d00a      	beq.n	801c3f4 <rcl_validate_enclave_name_with_size+0x58>
 801c3de:	2300      	movs	r3, #0
 801c3e0:	4660      	mov	r0, ip
 801c3e2:	602b      	str	r3, [r5, #0]
 801c3e4:	b042      	add	sp, #264	@ 0x108
 801c3e6:	bd70      	pop	{r4, r5, r6, pc}
 801c3e8:	f7fe fb6c 	bl	801aac4 <rcl_convert_rmw_ret_to_rcl_ret>
 801c3ec:	4684      	mov	ip, r0
 801c3ee:	4660      	mov	r0, ip
 801c3f0:	b042      	add	sp, #264	@ 0x108
 801c3f2:	bd70      	pop	{r4, r5, r6, pc}
 801c3f4:	2cff      	cmp	r4, #255	@ 0xff
 801c3f6:	d9f2      	bls.n	801c3de <rcl_validate_enclave_name_with_size+0x42>
 801c3f8:	6029      	str	r1, [r5, #0]
 801c3fa:	2e00      	cmp	r6, #0
 801c3fc:	d0ea      	beq.n	801c3d4 <rcl_validate_enclave_name_with_size+0x38>
 801c3fe:	23fe      	movs	r3, #254	@ 0xfe
 801c400:	6033      	str	r3, [r6, #0]
 801c402:	e7e7      	b.n	801c3d4 <rcl_validate_enclave_name_with_size+0x38>
 801c404:	2306      	movs	r3, #6
 801c406:	602b      	str	r3, [r5, #0]
 801c408:	2e00      	cmp	r6, #0
 801c40a:	d0e3      	beq.n	801c3d4 <rcl_validate_enclave_name_with_size+0x38>
 801c40c:	9b01      	ldr	r3, [sp, #4]
 801c40e:	4660      	mov	r0, ip
 801c410:	6033      	str	r3, [r6, #0]
 801c412:	b042      	add	sp, #264	@ 0x108
 801c414:	bd70      	pop	{r4, r5, r6, pc}
 801c416:	2301      	movs	r3, #1
 801c418:	602b      	str	r3, [r5, #0]
 801c41a:	e7f5      	b.n	801c408 <rcl_validate_enclave_name_with_size+0x6c>
 801c41c:	2302      	movs	r3, #2
 801c41e:	602b      	str	r3, [r5, #0]
 801c420:	e7f2      	b.n	801c408 <rcl_validate_enclave_name_with_size+0x6c>
 801c422:	2303      	movs	r3, #3
 801c424:	602b      	str	r3, [r5, #0]
 801c426:	e7ef      	b.n	801c408 <rcl_validate_enclave_name_with_size+0x6c>
 801c428:	2304      	movs	r3, #4
 801c42a:	602b      	str	r3, [r5, #0]
 801c42c:	e7ec      	b.n	801c408 <rcl_validate_enclave_name_with_size+0x6c>
 801c42e:	2305      	movs	r3, #5
 801c430:	602b      	str	r3, [r5, #0]
 801c432:	e7e9      	b.n	801c408 <rcl_validate_enclave_name_with_size+0x6c>
 801c434:	f04f 0c0b 	mov.w	ip, #11
 801c438:	4660      	mov	r0, ip
 801c43a:	4770      	bx	lr
 801c43c:	460b      	mov	r3, r1
 801c43e:	4a04      	ldr	r2, [pc, #16]	@ (801c450 <rcl_validate_enclave_name_with_size+0xb4>)
 801c440:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801c444:	a802      	add	r0, sp, #8
 801c446:	f001 fd33 	bl	801deb0 <rcutils_snprintf>
 801c44a:	f04f 0c01 	mov.w	ip, #1
 801c44e:	e7c1      	b.n	801c3d4 <rcl_validate_enclave_name_with_size+0x38>
 801c450:	0802547c 	.word	0x0802547c

0801c454 <rcl_validate_enclave_name>:
 801c454:	b168      	cbz	r0, 801c472 <rcl_validate_enclave_name+0x1e>
 801c456:	b570      	push	{r4, r5, r6, lr}
 801c458:	460d      	mov	r5, r1
 801c45a:	4616      	mov	r6, r2
 801c45c:	4604      	mov	r4, r0
 801c45e:	f7e3 ff49 	bl	80002f4 <strlen>
 801c462:	4633      	mov	r3, r6
 801c464:	4601      	mov	r1, r0
 801c466:	462a      	mov	r2, r5
 801c468:	4620      	mov	r0, r4
 801c46a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c46e:	f7ff bf95 	b.w	801c39c <rcl_validate_enclave_name_with_size>
 801c472:	200b      	movs	r0, #11
 801c474:	4770      	bx	lr
 801c476:	bf00      	nop

0801c478 <rcl_get_zero_initialized_wait_set>:
 801c478:	b510      	push	{r4, lr}
 801c47a:	4c08      	ldr	r4, [pc, #32]	@ (801c49c <rcl_get_zero_initialized_wait_set+0x24>)
 801c47c:	4686      	mov	lr, r0
 801c47e:	4684      	mov	ip, r0
 801c480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c482:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c488:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c48c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c48e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c492:	6823      	ldr	r3, [r4, #0]
 801c494:	4670      	mov	r0, lr
 801c496:	f8cc 3000 	str.w	r3, [ip]
 801c49a:	bd10      	pop	{r4, pc}
 801c49c:	080254dc 	.word	0x080254dc

0801c4a0 <rcl_wait_set_is_valid>:
 801c4a0:	b118      	cbz	r0, 801c4aa <rcl_wait_set_is_valid+0xa>
 801c4a2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801c4a4:	3800      	subs	r0, #0
 801c4a6:	bf18      	it	ne
 801c4a8:	2001      	movne	r0, #1
 801c4aa:	4770      	bx	lr

0801c4ac <rcl_wait_set_fini>:
 801c4ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c4b0:	b082      	sub	sp, #8
 801c4b2:	2800      	cmp	r0, #0
 801c4b4:	f000 8095 	beq.w	801c5e2 <rcl_wait_set_fini+0x136>
 801c4b8:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801c4ba:	4604      	mov	r4, r0
 801c4bc:	2e00      	cmp	r6, #0
 801c4be:	f000 808c 	beq.w	801c5da <rcl_wait_set_fini+0x12e>
 801c4c2:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801c4c4:	f003 faf6 	bl	801fab4 <rmw_destroy_wait_set>
 801c4c8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c4ca:	1e06      	subs	r6, r0, #0
 801c4cc:	bf18      	it	ne
 801c4ce:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801c4d2:	2d00      	cmp	r5, #0
 801c4d4:	f000 8081 	beq.w	801c5da <rcl_wait_set_fini+0x12e>
 801c4d8:	2700      	movs	r7, #0
 801c4da:	6820      	ldr	r0, [r4, #0]
 801c4dc:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801c4e0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c4e2:	6067      	str	r7, [r4, #4]
 801c4e4:	602f      	str	r7, [r5, #0]
 801c4e6:	b120      	cbz	r0, 801c4f2 <rcl_wait_set_fini+0x46>
 801c4e8:	9101      	str	r1, [sp, #4]
 801c4ea:	47c0      	blx	r8
 801c4ec:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c4ee:	9901      	ldr	r1, [sp, #4]
 801c4f0:	6027      	str	r7, [r4, #0]
 801c4f2:	68a8      	ldr	r0, [r5, #8]
 801c4f4:	b120      	cbz	r0, 801c500 <rcl_wait_set_fini+0x54>
 801c4f6:	47c0      	blx	r8
 801c4f8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c4fa:	2300      	movs	r3, #0
 801c4fc:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801c500:	f04f 0800 	mov.w	r8, #0
 801c504:	68a0      	ldr	r0, [r4, #8]
 801c506:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801c508:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c50a:	f8c4 800c 	str.w	r8, [r4, #12]
 801c50e:	f8c5 800c 	str.w	r8, [r5, #12]
 801c512:	b128      	cbz	r0, 801c520 <rcl_wait_set_fini+0x74>
 801c514:	47b8      	blx	r7
 801c516:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c518:	f8c4 8008 	str.w	r8, [r4, #8]
 801c51c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801c51e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c520:	f04f 0800 	mov.w	r8, #0
 801c524:	6968      	ldr	r0, [r5, #20]
 801c526:	f8c5 8010 	str.w	r8, [r5, #16]
 801c52a:	b128      	cbz	r0, 801c538 <rcl_wait_set_fini+0x8c>
 801c52c:	47b8      	blx	r7
 801c52e:	f8c5 8014 	str.w	r8, [r5, #20]
 801c532:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c534:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801c536:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c538:	f04f 0800 	mov.w	r8, #0
 801c53c:	6920      	ldr	r0, [r4, #16]
 801c53e:	f8c4 8014 	str.w	r8, [r4, #20]
 801c542:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801c546:	b128      	cbz	r0, 801c554 <rcl_wait_set_fini+0xa8>
 801c548:	47b8      	blx	r7
 801c54a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c54c:	f8c4 8010 	str.w	r8, [r4, #16]
 801c550:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801c552:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c554:	f04f 0800 	mov.w	r8, #0
 801c558:	69a0      	ldr	r0, [r4, #24]
 801c55a:	f8c4 801c 	str.w	r8, [r4, #28]
 801c55e:	f8c5 8018 	str.w	r8, [r5, #24]
 801c562:	b128      	cbz	r0, 801c570 <rcl_wait_set_fini+0xc4>
 801c564:	9101      	str	r1, [sp, #4]
 801c566:	47b8      	blx	r7
 801c568:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c56a:	9901      	ldr	r1, [sp, #4]
 801c56c:	f8c4 8018 	str.w	r8, [r4, #24]
 801c570:	6a28      	ldr	r0, [r5, #32]
 801c572:	b120      	cbz	r0, 801c57e <rcl_wait_set_fini+0xd2>
 801c574:	47b8      	blx	r7
 801c576:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c578:	2300      	movs	r3, #0
 801c57a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801c57e:	2700      	movs	r7, #0
 801c580:	6a20      	ldr	r0, [r4, #32]
 801c582:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801c586:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c588:	6267      	str	r7, [r4, #36]	@ 0x24
 801c58a:	626f      	str	r7, [r5, #36]	@ 0x24
 801c58c:	b120      	cbz	r0, 801c598 <rcl_wait_set_fini+0xec>
 801c58e:	9101      	str	r1, [sp, #4]
 801c590:	47c0      	blx	r8
 801c592:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c594:	9901      	ldr	r1, [sp, #4]
 801c596:	6227      	str	r7, [r4, #32]
 801c598:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801c59a:	b120      	cbz	r0, 801c5a6 <rcl_wait_set_fini+0xfa>
 801c59c:	47c0      	blx	r8
 801c59e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c5a0:	2300      	movs	r3, #0
 801c5a2:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801c5a6:	2700      	movs	r7, #0
 801c5a8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801c5aa:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801c5ae:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c5b0:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801c5b2:	632f      	str	r7, [r5, #48]	@ 0x30
 801c5b4:	b120      	cbz	r0, 801c5c0 <rcl_wait_set_fini+0x114>
 801c5b6:	9101      	str	r1, [sp, #4]
 801c5b8:	47c0      	blx	r8
 801c5ba:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c5bc:	9901      	ldr	r1, [sp, #4]
 801c5be:	62a7      	str	r7, [r4, #40]	@ 0x28
 801c5c0:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801c5c2:	b120      	cbz	r0, 801c5ce <rcl_wait_set_fini+0x122>
 801c5c4:	47c0      	blx	r8
 801c5c6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c5c8:	2300      	movs	r3, #0
 801c5ca:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801c5ce:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801c5d0:	4628      	mov	r0, r5
 801c5d2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c5d4:	4798      	blx	r3
 801c5d6:	2300      	movs	r3, #0
 801c5d8:	6323      	str	r3, [r4, #48]	@ 0x30
 801c5da:	4630      	mov	r0, r6
 801c5dc:	b002      	add	sp, #8
 801c5de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c5e2:	260b      	movs	r6, #11
 801c5e4:	4630      	mov	r0, r6
 801c5e6:	b002      	add	sp, #8
 801c5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c5ec <rcl_wait_set_add_subscription>:
 801c5ec:	b318      	cbz	r0, 801c636 <rcl_wait_set_add_subscription+0x4a>
 801c5ee:	b538      	push	{r3, r4, r5, lr}
 801c5f0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801c5f2:	4604      	mov	r4, r0
 801c5f4:	b30b      	cbz	r3, 801c63a <rcl_wait_set_add_subscription+0x4e>
 801c5f6:	b319      	cbz	r1, 801c640 <rcl_wait_set_add_subscription+0x54>
 801c5f8:	681d      	ldr	r5, [r3, #0]
 801c5fa:	6840      	ldr	r0, [r0, #4]
 801c5fc:	4285      	cmp	r5, r0
 801c5fe:	d217      	bcs.n	801c630 <rcl_wait_set_add_subscription+0x44>
 801c600:	1c68      	adds	r0, r5, #1
 801c602:	6018      	str	r0, [r3, #0]
 801c604:	6823      	ldr	r3, [r4, #0]
 801c606:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c60a:	b102      	cbz	r2, 801c60e <rcl_wait_set_add_subscription+0x22>
 801c60c:	6015      	str	r5, [r2, #0]
 801c60e:	4608      	mov	r0, r1
 801c610:	f7ff fade 	bl	801bbd0 <rcl_subscription_get_rmw_handle>
 801c614:	b150      	cbz	r0, 801c62c <rcl_wait_set_add_subscription+0x40>
 801c616:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c618:	6842      	ldr	r2, [r0, #4]
 801c61a:	2000      	movs	r0, #0
 801c61c:	689b      	ldr	r3, [r3, #8]
 801c61e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c622:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801c624:	6853      	ldr	r3, [r2, #4]
 801c626:	3301      	adds	r3, #1
 801c628:	6053      	str	r3, [r2, #4]
 801c62a:	bd38      	pop	{r3, r4, r5, pc}
 801c62c:	2001      	movs	r0, #1
 801c62e:	bd38      	pop	{r3, r4, r5, pc}
 801c630:	f240 3086 	movw	r0, #902	@ 0x386
 801c634:	bd38      	pop	{r3, r4, r5, pc}
 801c636:	200b      	movs	r0, #11
 801c638:	4770      	bx	lr
 801c63a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801c63e:	bd38      	pop	{r3, r4, r5, pc}
 801c640:	200b      	movs	r0, #11
 801c642:	bd38      	pop	{r3, r4, r5, pc}

0801c644 <rcl_wait_set_clear>:
 801c644:	2800      	cmp	r0, #0
 801c646:	d074      	beq.n	801c732 <rcl_wait_set_clear+0xee>
 801c648:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801c64a:	b510      	push	{r4, lr}
 801c64c:	4604      	mov	r4, r0
 801c64e:	2b00      	cmp	r3, #0
 801c650:	d071      	beq.n	801c736 <rcl_wait_set_clear+0xf2>
 801c652:	6800      	ldr	r0, [r0, #0]
 801c654:	b138      	cbz	r0, 801c666 <rcl_wait_set_clear+0x22>
 801c656:	6862      	ldr	r2, [r4, #4]
 801c658:	2100      	movs	r1, #0
 801c65a:	0092      	lsls	r2, r2, #2
 801c65c:	f005 fe28 	bl	80222b0 <memset>
 801c660:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c662:	2200      	movs	r2, #0
 801c664:	601a      	str	r2, [r3, #0]
 801c666:	68a0      	ldr	r0, [r4, #8]
 801c668:	b138      	cbz	r0, 801c67a <rcl_wait_set_clear+0x36>
 801c66a:	68e2      	ldr	r2, [r4, #12]
 801c66c:	2100      	movs	r1, #0
 801c66e:	0092      	lsls	r2, r2, #2
 801c670:	f005 fe1e 	bl	80222b0 <memset>
 801c674:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c676:	2200      	movs	r2, #0
 801c678:	60da      	str	r2, [r3, #12]
 801c67a:	69a0      	ldr	r0, [r4, #24]
 801c67c:	b138      	cbz	r0, 801c68e <rcl_wait_set_clear+0x4a>
 801c67e:	69e2      	ldr	r2, [r4, #28]
 801c680:	2100      	movs	r1, #0
 801c682:	0092      	lsls	r2, r2, #2
 801c684:	f005 fe14 	bl	80222b0 <memset>
 801c688:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c68a:	2200      	movs	r2, #0
 801c68c:	619a      	str	r2, [r3, #24]
 801c68e:	6a20      	ldr	r0, [r4, #32]
 801c690:	b138      	cbz	r0, 801c6a2 <rcl_wait_set_clear+0x5e>
 801c692:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801c694:	2100      	movs	r1, #0
 801c696:	0092      	lsls	r2, r2, #2
 801c698:	f005 fe0a 	bl	80222b0 <memset>
 801c69c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c69e:	2200      	movs	r2, #0
 801c6a0:	625a      	str	r2, [r3, #36]	@ 0x24
 801c6a2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801c6a4:	b138      	cbz	r0, 801c6b6 <rcl_wait_set_clear+0x72>
 801c6a6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801c6a8:	2100      	movs	r1, #0
 801c6aa:	0092      	lsls	r2, r2, #2
 801c6ac:	f005 fe00 	bl	80222b0 <memset>
 801c6b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c6b2:	2200      	movs	r2, #0
 801c6b4:	631a      	str	r2, [r3, #48]	@ 0x30
 801c6b6:	6920      	ldr	r0, [r4, #16]
 801c6b8:	b138      	cbz	r0, 801c6ca <rcl_wait_set_clear+0x86>
 801c6ba:	6962      	ldr	r2, [r4, #20]
 801c6bc:	2100      	movs	r1, #0
 801c6be:	0092      	lsls	r2, r2, #2
 801c6c0:	f005 fdf6 	bl	80222b0 <memset>
 801c6c4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c6c6:	2200      	movs	r2, #0
 801c6c8:	641a      	str	r2, [r3, #64]	@ 0x40
 801c6ca:	6898      	ldr	r0, [r3, #8]
 801c6cc:	b138      	cbz	r0, 801c6de <rcl_wait_set_clear+0x9a>
 801c6ce:	685a      	ldr	r2, [r3, #4]
 801c6d0:	2100      	movs	r1, #0
 801c6d2:	0092      	lsls	r2, r2, #2
 801c6d4:	f005 fdec 	bl	80222b0 <memset>
 801c6d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c6da:	2200      	movs	r2, #0
 801c6dc:	605a      	str	r2, [r3, #4]
 801c6de:	6958      	ldr	r0, [r3, #20]
 801c6e0:	b138      	cbz	r0, 801c6f2 <rcl_wait_set_clear+0xae>
 801c6e2:	691a      	ldr	r2, [r3, #16]
 801c6e4:	2100      	movs	r1, #0
 801c6e6:	0092      	lsls	r2, r2, #2
 801c6e8:	f005 fde2 	bl	80222b0 <memset>
 801c6ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c6ee:	2200      	movs	r2, #0
 801c6f0:	611a      	str	r2, [r3, #16]
 801c6f2:	6a18      	ldr	r0, [r3, #32]
 801c6f4:	b138      	cbz	r0, 801c706 <rcl_wait_set_clear+0xc2>
 801c6f6:	69da      	ldr	r2, [r3, #28]
 801c6f8:	2100      	movs	r1, #0
 801c6fa:	0092      	lsls	r2, r2, #2
 801c6fc:	f005 fdd8 	bl	80222b0 <memset>
 801c700:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c702:	2200      	movs	r2, #0
 801c704:	61da      	str	r2, [r3, #28]
 801c706:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801c708:	b138      	cbz	r0, 801c71a <rcl_wait_set_clear+0xd6>
 801c70a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801c70c:	2100      	movs	r1, #0
 801c70e:	0092      	lsls	r2, r2, #2
 801c710:	f005 fdce 	bl	80222b0 <memset>
 801c714:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c716:	2200      	movs	r2, #0
 801c718:	629a      	str	r2, [r3, #40]	@ 0x28
 801c71a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801c71c:	b140      	cbz	r0, 801c730 <rcl_wait_set_clear+0xec>
 801c71e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801c720:	2100      	movs	r1, #0
 801c722:	0092      	lsls	r2, r2, #2
 801c724:	f005 fdc4 	bl	80222b0 <memset>
 801c728:	2300      	movs	r3, #0
 801c72a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801c72c:	4618      	mov	r0, r3
 801c72e:	6353      	str	r3, [r2, #52]	@ 0x34
 801c730:	bd10      	pop	{r4, pc}
 801c732:	200b      	movs	r0, #11
 801c734:	4770      	bx	lr
 801c736:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801c73a:	bd10      	pop	{r4, pc}

0801c73c <rcl_wait_set_resize>:
 801c73c:	2800      	cmp	r0, #0
 801c73e:	f000 8180 	beq.w	801ca42 <rcl_wait_set_resize+0x306>
 801c742:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c746:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 801c748:	b083      	sub	sp, #12
 801c74a:	4605      	mov	r5, r0
 801c74c:	2c00      	cmp	r4, #0
 801c74e:	f000 817a 	beq.w	801ca46 <rcl_wait_set_resize+0x30a>
 801c752:	f04f 0900 	mov.w	r9, #0
 801c756:	461f      	mov	r7, r3
 801c758:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801c75c:	4688      	mov	r8, r1
 801c75e:	4616      	mov	r6, r2
 801c760:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801c764:	f8c0 9004 	str.w	r9, [r0, #4]
 801c768:	f8c4 9000 	str.w	r9, [r4]
 801c76c:	2900      	cmp	r1, #0
 801c76e:	f000 80bf 	beq.w	801c8f0 <rcl_wait_set_resize+0x1b4>
 801c772:	008c      	lsls	r4, r1, #2
 801c774:	4652      	mov	r2, sl
 801c776:	6800      	ldr	r0, [r0, #0]
 801c778:	4621      	mov	r1, r4
 801c77a:	9301      	str	r3, [sp, #4]
 801c77c:	4798      	blx	r3
 801c77e:	9b01      	ldr	r3, [sp, #4]
 801c780:	6028      	str	r0, [r5, #0]
 801c782:	2800      	cmp	r0, #0
 801c784:	f000 80f6 	beq.w	801c974 <rcl_wait_set_resize+0x238>
 801c788:	4622      	mov	r2, r4
 801c78a:	4649      	mov	r1, r9
 801c78c:	9301      	str	r3, [sp, #4]
 801c78e:	f005 fd8f 	bl	80222b0 <memset>
 801c792:	f8c5 8004 	str.w	r8, [r5, #4]
 801c796:	4652      	mov	r2, sl
 801c798:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801c79c:	4621      	mov	r1, r4
 801c79e:	9b01      	ldr	r3, [sp, #4]
 801c7a0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801c7a4:	f8c8 9004 	str.w	r9, [r8, #4]
 801c7a8:	4798      	blx	r3
 801c7aa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c7ac:	f8c8 0008 	str.w	r0, [r8, #8]
 801c7b0:	689b      	ldr	r3, [r3, #8]
 801c7b2:	2b00      	cmp	r3, #0
 801c7b4:	f000 814a 	beq.w	801ca4c <rcl_wait_set_resize+0x310>
 801c7b8:	4622      	mov	r2, r4
 801c7ba:	4649      	mov	r1, r9
 801c7bc:	4618      	mov	r0, r3
 801c7be:	f005 fd77 	bl	80222b0 <memset>
 801c7c2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c7c4:	f04f 0800 	mov.w	r8, #0
 801c7c8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c7cc:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 801c7d0:	f8c5 800c 	str.w	r8, [r5, #12]
 801c7d4:	f8c4 800c 	str.w	r8, [r4, #12]
 801c7d8:	2e00      	cmp	r6, #0
 801c7da:	f040 809b 	bne.w	801c914 <rcl_wait_set_resize+0x1d8>
 801c7de:	68a8      	ldr	r0, [r5, #8]
 801c7e0:	b128      	cbz	r0, 801c7ee <rcl_wait_set_resize+0xb2>
 801c7e2:	4649      	mov	r1, r9
 801c7e4:	4790      	blx	r2
 801c7e6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c7e8:	60ae      	str	r6, [r5, #8]
 801c7ea:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c7ee:	f04f 0800 	mov.w	r8, #0
 801c7f2:	19f6      	adds	r6, r6, r7
 801c7f4:	f8c4 8010 	str.w	r8, [r4, #16]
 801c7f8:	f040 80a2 	bne.w	801c940 <rcl_wait_set_resize+0x204>
 801c7fc:	6960      	ldr	r0, [r4, #20]
 801c7fe:	b130      	cbz	r0, 801c80e <rcl_wait_set_resize+0xd2>
 801c800:	4649      	mov	r1, r9
 801c802:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801c804:	4798      	blx	r3
 801c806:	6166      	str	r6, [r4, #20]
 801c808:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c80a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c80e:	2600      	movs	r6, #0
 801c810:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801c814:	616e      	str	r6, [r5, #20]
 801c816:	6426      	str	r6, [r4, #64]	@ 0x40
 801c818:	2f00      	cmp	r7, #0
 801c81a:	f040 80af 	bne.w	801c97c <rcl_wait_set_resize+0x240>
 801c81e:	6928      	ldr	r0, [r5, #16]
 801c820:	b138      	cbz	r0, 801c832 <rcl_wait_set_resize+0xf6>
 801c822:	4649      	mov	r1, r9
 801c824:	47d0      	blx	sl
 801c826:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c828:	612f      	str	r7, [r5, #16]
 801c82a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c82e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801c832:	2600      	movs	r6, #0
 801c834:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c836:	61ee      	str	r6, [r5, #28]
 801c838:	61a6      	str	r6, [r4, #24]
 801c83a:	2b00      	cmp	r3, #0
 801c83c:	f040 8093 	bne.w	801c966 <rcl_wait_set_resize+0x22a>
 801c840:	69a8      	ldr	r0, [r5, #24]
 801c842:	b120      	cbz	r0, 801c84e <rcl_wait_set_resize+0x112>
 801c844:	4649      	mov	r1, r9
 801c846:	47d0      	blx	sl
 801c848:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c84a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c84c:	61ab      	str	r3, [r5, #24]
 801c84e:	6a20      	ldr	r0, [r4, #32]
 801c850:	b128      	cbz	r0, 801c85e <rcl_wait_set_resize+0x122>
 801c852:	4649      	mov	r1, r9
 801c854:	47d0      	blx	sl
 801c856:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c858:	2300      	movs	r3, #0
 801c85a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801c85e:	2600      	movs	r6, #0
 801c860:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c862:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801c864:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801c868:	626e      	str	r6, [r5, #36]	@ 0x24
 801c86a:	6266      	str	r6, [r4, #36]	@ 0x24
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	f000 8098 	beq.w	801c9a2 <rcl_wait_set_resize+0x266>
 801c872:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801c876:	463a      	mov	r2, r7
 801c878:	6a28      	ldr	r0, [r5, #32]
 801c87a:	4651      	mov	r1, sl
 801c87c:	47c8      	blx	r9
 801c87e:	6228      	str	r0, [r5, #32]
 801c880:	2800      	cmp	r0, #0
 801c882:	d077      	beq.n	801c974 <rcl_wait_set_resize+0x238>
 801c884:	4652      	mov	r2, sl
 801c886:	4631      	mov	r1, r6
 801c888:	f005 fd12 	bl	80222b0 <memset>
 801c88c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c88e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c890:	463a      	mov	r2, r7
 801c892:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801c894:	4651      	mov	r1, sl
 801c896:	626b      	str	r3, [r5, #36]	@ 0x24
 801c898:	62a6      	str	r6, [r4, #40]	@ 0x28
 801c89a:	47c8      	blx	r9
 801c89c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c89e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 801c8a0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801c8a2:	2c00      	cmp	r4, #0
 801c8a4:	f000 80f2 	beq.w	801ca8c <rcl_wait_set_resize+0x350>
 801c8a8:	4620      	mov	r0, r4
 801c8aa:	4652      	mov	r2, sl
 801c8ac:	4631      	mov	r1, r6
 801c8ae:	f005 fcff 	bl	80222b0 <memset>
 801c8b2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c8b4:	2600      	movs	r6, #0
 801c8b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c8b8:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801c8ba:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801c8be:	62ee      	str	r6, [r5, #44]	@ 0x2c
 801c8c0:	6326      	str	r6, [r4, #48]	@ 0x30
 801c8c2:	2b00      	cmp	r3, #0
 801c8c4:	f040 8097 	bne.w	801c9f6 <rcl_wait_set_resize+0x2ba>
 801c8c8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801c8ca:	b120      	cbz	r0, 801c8d6 <rcl_wait_set_resize+0x19a>
 801c8cc:	4639      	mov	r1, r7
 801c8ce:	47c0      	blx	r8
 801c8d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c8d2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c8d4:	62ab      	str	r3, [r5, #40]	@ 0x28
 801c8d6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801c8d8:	2800      	cmp	r0, #0
 801c8da:	d04c      	beq.n	801c976 <rcl_wait_set_resize+0x23a>
 801c8dc:	4639      	mov	r1, r7
 801c8de:	47c0      	blx	r8
 801c8e0:	2300      	movs	r3, #0
 801c8e2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801c8e4:	4618      	mov	r0, r3
 801c8e6:	e9c2 330d 	strd	r3, r3, [r2, #52]	@ 0x34
 801c8ea:	b003      	add	sp, #12
 801c8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8f0:	6800      	ldr	r0, [r0, #0]
 801c8f2:	b120      	cbz	r0, 801c8fe <rcl_wait_set_resize+0x1c2>
 801c8f4:	4651      	mov	r1, sl
 801c8f6:	47d8      	blx	fp
 801c8f8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c8fa:	f8c5 8000 	str.w	r8, [r5]
 801c8fe:	68a0      	ldr	r0, [r4, #8]
 801c900:	2800      	cmp	r0, #0
 801c902:	f43f af5f 	beq.w	801c7c4 <rcl_wait_set_resize+0x88>
 801c906:	4651      	mov	r1, sl
 801c908:	47d8      	blx	fp
 801c90a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c90c:	2300      	movs	r3, #0
 801c90e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801c912:	e757      	b.n	801c7c4 <rcl_wait_set_resize+0x88>
 801c914:	00b4      	lsls	r4, r6, #2
 801c916:	464a      	mov	r2, r9
 801c918:	68a8      	ldr	r0, [r5, #8]
 801c91a:	4621      	mov	r1, r4
 801c91c:	4798      	blx	r3
 801c91e:	60a8      	str	r0, [r5, #8]
 801c920:	b340      	cbz	r0, 801c974 <rcl_wait_set_resize+0x238>
 801c922:	4622      	mov	r2, r4
 801c924:	4641      	mov	r1, r8
 801c926:	f005 fcc3 	bl	80222b0 <memset>
 801c92a:	f04f 0800 	mov.w	r8, #0
 801c92e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c930:	60ee      	str	r6, [r5, #12]
 801c932:	19f6      	adds	r6, r6, r7
 801c934:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c938:	f8c4 8010 	str.w	r8, [r4, #16]
 801c93c:	f43f af5e 	beq.w	801c7fc <rcl_wait_set_resize+0xc0>
 801c940:	00b6      	lsls	r6, r6, #2
 801c942:	464a      	mov	r2, r9
 801c944:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801c946:	6960      	ldr	r0, [r4, #20]
 801c948:	4631      	mov	r1, r6
 801c94a:	4798      	blx	r3
 801c94c:	4681      	mov	r9, r0
 801c94e:	6160      	str	r0, [r4, #20]
 801c950:	2800      	cmp	r0, #0
 801c952:	f000 8084 	beq.w	801ca5e <rcl_wait_set_resize+0x322>
 801c956:	4632      	mov	r2, r6
 801c958:	4641      	mov	r1, r8
 801c95a:	f005 fca9 	bl	80222b0 <memset>
 801c95e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c960:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c964:	e753      	b.n	801c80e <rcl_wait_set_resize+0xd2>
 801c966:	009c      	lsls	r4, r3, #2
 801c968:	464a      	mov	r2, r9
 801c96a:	69a8      	ldr	r0, [r5, #24]
 801c96c:	4621      	mov	r1, r4
 801c96e:	47c0      	blx	r8
 801c970:	61a8      	str	r0, [r5, #24]
 801c972:	bb40      	cbnz	r0, 801c9c6 <rcl_wait_set_resize+0x28a>
 801c974:	200a      	movs	r0, #10
 801c976:	b003      	add	sp, #12
 801c978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c97c:	00bc      	lsls	r4, r7, #2
 801c97e:	464a      	mov	r2, r9
 801c980:	6928      	ldr	r0, [r5, #16]
 801c982:	4621      	mov	r1, r4
 801c984:	47c0      	blx	r8
 801c986:	6128      	str	r0, [r5, #16]
 801c988:	2800      	cmp	r0, #0
 801c98a:	d0f3      	beq.n	801c974 <rcl_wait_set_resize+0x238>
 801c98c:	4622      	mov	r2, r4
 801c98e:	4631      	mov	r1, r6
 801c990:	f005 fc8e 	bl	80222b0 <memset>
 801c994:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c996:	616f      	str	r7, [r5, #20]
 801c998:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c99c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801c9a0:	e747      	b.n	801c832 <rcl_wait_set_resize+0xf6>
 801c9a2:	6a28      	ldr	r0, [r5, #32]
 801c9a4:	b120      	cbz	r0, 801c9b0 <rcl_wait_set_resize+0x274>
 801c9a6:	4639      	mov	r1, r7
 801c9a8:	47c0      	blx	r8
 801c9aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c9ac:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c9ae:	622b      	str	r3, [r5, #32]
 801c9b0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801c9b2:	2800      	cmp	r0, #0
 801c9b4:	f43f af7e 	beq.w	801c8b4 <rcl_wait_set_resize+0x178>
 801c9b8:	4639      	mov	r1, r7
 801c9ba:	47c0      	blx	r8
 801c9bc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c9be:	2300      	movs	r3, #0
 801c9c0:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801c9c4:	e776      	b.n	801c8b4 <rcl_wait_set_resize+0x178>
 801c9c6:	4622      	mov	r2, r4
 801c9c8:	4631      	mov	r1, r6
 801c9ca:	f005 fc71 	bl	80222b0 <memset>
 801c9ce:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 801c9d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c9d2:	464a      	mov	r2, r9
 801c9d4:	6a38      	ldr	r0, [r7, #32]
 801c9d6:	4621      	mov	r1, r4
 801c9d8:	61eb      	str	r3, [r5, #28]
 801c9da:	61fe      	str	r6, [r7, #28]
 801c9dc:	47c0      	blx	r8
 801c9de:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c9e0:	6238      	str	r0, [r7, #32]
 801c9e2:	6a1f      	ldr	r7, [r3, #32]
 801c9e4:	2f00      	cmp	r7, #0
 801c9e6:	d04a      	beq.n	801ca7e <rcl_wait_set_resize+0x342>
 801c9e8:	4622      	mov	r2, r4
 801c9ea:	4631      	mov	r1, r6
 801c9ec:	4638      	mov	r0, r7
 801c9ee:	f005 fc5f 	bl	80222b0 <memset>
 801c9f2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c9f4:	e733      	b.n	801c85e <rcl_wait_set_resize+0x122>
 801c9f6:	009c      	lsls	r4, r3, #2
 801c9f8:	463a      	mov	r2, r7
 801c9fa:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801c9fc:	4621      	mov	r1, r4
 801c9fe:	47c8      	blx	r9
 801ca00:	62a8      	str	r0, [r5, #40]	@ 0x28
 801ca02:	2800      	cmp	r0, #0
 801ca04:	d0b6      	beq.n	801c974 <rcl_wait_set_resize+0x238>
 801ca06:	4622      	mov	r2, r4
 801ca08:	4631      	mov	r1, r6
 801ca0a:	f005 fc51 	bl	80222b0 <memset>
 801ca0e:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801ca12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ca14:	463a      	mov	r2, r7
 801ca16:	4621      	mov	r1, r4
 801ca18:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801ca1c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801ca1e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801ca22:	47c8      	blx	r9
 801ca24:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ca26:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801ca2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ca2c:	2b00      	cmp	r3, #0
 801ca2e:	d034      	beq.n	801ca9a <rcl_wait_set_resize+0x35e>
 801ca30:	4622      	mov	r2, r4
 801ca32:	4631      	mov	r1, r6
 801ca34:	4618      	mov	r0, r3
 801ca36:	f005 fc3b 	bl	80222b0 <memset>
 801ca3a:	4630      	mov	r0, r6
 801ca3c:	b003      	add	sp, #12
 801ca3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca42:	200b      	movs	r0, #11
 801ca44:	4770      	bx	lr
 801ca46:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801ca4a:	e794      	b.n	801c976 <rcl_wait_set_resize+0x23a>
 801ca4c:	6828      	ldr	r0, [r5, #0]
 801ca4e:	4651      	mov	r1, sl
 801ca50:	9301      	str	r3, [sp, #4]
 801ca52:	47d8      	blx	fp
 801ca54:	9b01      	ldr	r3, [sp, #4]
 801ca56:	200a      	movs	r0, #10
 801ca58:	e9c5 3300 	strd	r3, r3, [r5]
 801ca5c:	e78b      	b.n	801c976 <rcl_wait_set_resize+0x23a>
 801ca5e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ca60:	68a8      	ldr	r0, [r5, #8]
 801ca62:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801ca64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ca66:	4798      	blx	r3
 801ca68:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ca6a:	6928      	ldr	r0, [r5, #16]
 801ca6c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801ca6e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801ca70:	e9c5 9902 	strd	r9, r9, [r5, #8]
 801ca74:	4790      	blx	r2
 801ca76:	200a      	movs	r0, #10
 801ca78:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801ca7c:	e77b      	b.n	801c976 <rcl_wait_set_resize+0x23a>
 801ca7e:	69a8      	ldr	r0, [r5, #24]
 801ca80:	4649      	mov	r1, r9
 801ca82:	47d0      	blx	sl
 801ca84:	200a      	movs	r0, #10
 801ca86:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801ca8a:	e774      	b.n	801c976 <rcl_wait_set_resize+0x23a>
 801ca8c:	6a28      	ldr	r0, [r5, #32]
 801ca8e:	4639      	mov	r1, r7
 801ca90:	47c0      	blx	r8
 801ca92:	200a      	movs	r0, #10
 801ca94:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801ca98:	e76d      	b.n	801c976 <rcl_wait_set_resize+0x23a>
 801ca9a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801ca9c:	4639      	mov	r1, r7
 801ca9e:	9301      	str	r3, [sp, #4]
 801caa0:	47c0      	blx	r8
 801caa2:	9b01      	ldr	r3, [sp, #4]
 801caa4:	200a      	movs	r0, #10
 801caa6:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801caaa:	e764      	b.n	801c976 <rcl_wait_set_resize+0x23a>

0801caac <rcl_wait_set_init>:
 801caac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cab0:	b085      	sub	sp, #20
 801cab2:	4605      	mov	r5, r0
 801cab4:	460e      	mov	r6, r1
 801cab6:	4617      	mov	r7, r2
 801cab8:	a812      	add	r0, sp, #72	@ 0x48
 801caba:	4698      	mov	r8, r3
 801cabc:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 801cac0:	f7f8 fcf2 	bl	80154a8 <rcutils_allocator_is_valid>
 801cac4:	2d00      	cmp	r5, #0
 801cac6:	d072      	beq.n	801cbae <rcl_wait_set_init+0x102>
 801cac8:	f080 0001 	eor.w	r0, r0, #1
 801cacc:	b2c0      	uxtb	r0, r0
 801cace:	2800      	cmp	r0, #0
 801cad0:	d16d      	bne.n	801cbae <rcl_wait_set_init+0x102>
 801cad2:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801cad6:	f1ba 0f00 	cmp.w	sl, #0
 801cada:	d004      	beq.n	801cae6 <rcl_wait_set_init+0x3a>
 801cadc:	2464      	movs	r4, #100	@ 0x64
 801cade:	4620      	mov	r0, r4
 801cae0:	b005      	add	sp, #20
 801cae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cae6:	f1b9 0f00 	cmp.w	r9, #0
 801caea:	d060      	beq.n	801cbae <rcl_wait_set_init+0x102>
 801caec:	4648      	mov	r0, r9
 801caee:	f7fe f807 	bl	801ab00 <rcl_context_is_valid>
 801caf2:	2800      	cmp	r0, #0
 801caf4:	d068      	beq.n	801cbc8 <rcl_wait_set_init+0x11c>
 801caf6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801caf8:	205c      	movs	r0, #92	@ 0x5c
 801cafa:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801cafc:	4798      	blx	r3
 801cafe:	6328      	str	r0, [r5, #48]	@ 0x30
 801cb00:	2800      	cmp	r0, #0
 801cb02:	d063      	beq.n	801cbcc <rcl_wait_set_init+0x120>
 801cb04:	225c      	movs	r2, #92	@ 0x5c
 801cb06:	4651      	mov	r1, sl
 801cb08:	f005 fbd2 	bl	80222b0 <memset>
 801cb0c:	ac12      	add	r4, sp, #72	@ 0x48
 801cb0e:	f8d5 b030 	ldr.w	fp, [r5, #48]	@ 0x30
 801cb12:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801cb16:	f10b 0c48 	add.w	ip, fp, #72	@ 0x48
 801cb1a:	f8cb 9044 	str.w	r9, [fp, #68]	@ 0x44
 801cb1e:	eb03 0e02 	add.w	lr, r3, r2
 801cb22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cb24:	f8d9 9000 	ldr.w	r9, [r9]
 801cb28:	449e      	add	lr, r3
 801cb2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801cb2c:	e9cb aa01 	strd	sl, sl, [fp, #4]
 801cb30:	e9cb aa04 	strd	sl, sl, [fp, #16]
 801cb34:	e9cb aa07 	strd	sl, sl, [fp, #28]
 801cb38:	e9cb aa0a 	strd	sl, sl, [fp, #40]	@ 0x28
 801cb3c:	e9cb aa0d 	strd	sl, sl, [fp, #52]	@ 0x34
 801cb40:	44be      	add	lr, r7
 801cb42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cb46:	6823      	ldr	r3, [r4, #0]
 801cb48:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 801cb4c:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 801cb50:	f8cc 3000 	str.w	r3, [ip]
 801cb54:	f002 ffa4 	bl	801faa0 <rmw_create_wait_set>
 801cb58:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cb5a:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 801cb5e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801cb60:	b350      	cbz	r0, 801cbb8 <rcl_wait_set_init+0x10c>
 801cb62:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801cb64:	4643      	mov	r3, r8
 801cb66:	463a      	mov	r2, r7
 801cb68:	4631      	mov	r1, r6
 801cb6a:	9402      	str	r4, [sp, #8]
 801cb6c:	4628      	mov	r0, r5
 801cb6e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801cb70:	9401      	str	r4, [sp, #4]
 801cb72:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801cb74:	9400      	str	r4, [sp, #0]
 801cb76:	f7ff fde1 	bl	801c73c <rcl_wait_set_resize>
 801cb7a:	4604      	mov	r4, r0
 801cb7c:	2800      	cmp	r0, #0
 801cb7e:	d0ae      	beq.n	801cade <rcl_wait_set_init+0x32>
 801cb80:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cb82:	bb2b      	cbnz	r3, 801cbd0 <rcl_wait_set_init+0x124>
 801cb84:	2600      	movs	r6, #0
 801cb86:	4628      	mov	r0, r5
 801cb88:	4633      	mov	r3, r6
 801cb8a:	4632      	mov	r2, r6
 801cb8c:	4631      	mov	r1, r6
 801cb8e:	9600      	str	r6, [sp, #0]
 801cb90:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801cb94:	f7ff fdd2 	bl	801c73c <rcl_wait_set_resize>
 801cb98:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801cb9a:	2800      	cmp	r0, #0
 801cb9c:	d09f      	beq.n	801cade <rcl_wait_set_init+0x32>
 801cb9e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801cba0:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 801cba2:	4798      	blx	r3
 801cba4:	4620      	mov	r0, r4
 801cba6:	632e      	str	r6, [r5, #48]	@ 0x30
 801cba8:	b005      	add	sp, #20
 801cbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbae:	240b      	movs	r4, #11
 801cbb0:	4620      	mov	r0, r4
 801cbb2:	b005      	add	sp, #20
 801cbb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbb8:	2401      	movs	r4, #1
 801cbba:	f002 ff7b 	bl	801fab4 <rmw_destroy_wait_set>
 801cbbe:	2800      	cmp	r0, #0
 801cbc0:	bf18      	it	ne
 801cbc2:	f44f 7461 	movne.w	r4, #900	@ 0x384
 801cbc6:	e7dd      	b.n	801cb84 <rcl_wait_set_init+0xd8>
 801cbc8:	2465      	movs	r4, #101	@ 0x65
 801cbca:	e788      	b.n	801cade <rcl_wait_set_init+0x32>
 801cbcc:	240a      	movs	r4, #10
 801cbce:	e786      	b.n	801cade <rcl_wait_set_init+0x32>
 801cbd0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801cbd2:	e7f2      	b.n	801cbba <rcl_wait_set_init+0x10e>

0801cbd4 <rcl_wait_set_add_guard_condition>:
 801cbd4:	b318      	cbz	r0, 801cc1e <rcl_wait_set_add_guard_condition+0x4a>
 801cbd6:	b538      	push	{r3, r4, r5, lr}
 801cbd8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801cbda:	4604      	mov	r4, r0
 801cbdc:	b30b      	cbz	r3, 801cc22 <rcl_wait_set_add_guard_condition+0x4e>
 801cbde:	b319      	cbz	r1, 801cc28 <rcl_wait_set_add_guard_condition+0x54>
 801cbe0:	68dd      	ldr	r5, [r3, #12]
 801cbe2:	68c0      	ldr	r0, [r0, #12]
 801cbe4:	4285      	cmp	r5, r0
 801cbe6:	d217      	bcs.n	801cc18 <rcl_wait_set_add_guard_condition+0x44>
 801cbe8:	1c68      	adds	r0, r5, #1
 801cbea:	60d8      	str	r0, [r3, #12]
 801cbec:	68a3      	ldr	r3, [r4, #8]
 801cbee:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801cbf2:	b102      	cbz	r2, 801cbf6 <rcl_wait_set_add_guard_condition+0x22>
 801cbf4:	6015      	str	r5, [r2, #0]
 801cbf6:	4608      	mov	r0, r1
 801cbf8:	f004 fc02 	bl	8021400 <rcl_guard_condition_get_rmw_handle>
 801cbfc:	b150      	cbz	r0, 801cc14 <rcl_wait_set_add_guard_condition+0x40>
 801cbfe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cc00:	6842      	ldr	r2, [r0, #4]
 801cc02:	2000      	movs	r0, #0
 801cc04:	695b      	ldr	r3, [r3, #20]
 801cc06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cc0a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801cc0c:	6913      	ldr	r3, [r2, #16]
 801cc0e:	3301      	adds	r3, #1
 801cc10:	6113      	str	r3, [r2, #16]
 801cc12:	bd38      	pop	{r3, r4, r5, pc}
 801cc14:	2001      	movs	r0, #1
 801cc16:	bd38      	pop	{r3, r4, r5, pc}
 801cc18:	f240 3086 	movw	r0, #902	@ 0x386
 801cc1c:	bd38      	pop	{r3, r4, r5, pc}
 801cc1e:	200b      	movs	r0, #11
 801cc20:	4770      	bx	lr
 801cc22:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801cc26:	bd38      	pop	{r3, r4, r5, pc}
 801cc28:	200b      	movs	r0, #11
 801cc2a:	bd38      	pop	{r3, r4, r5, pc}

0801cc2c <rcl_wait_set_add_timer>:
 801cc2c:	b328      	cbz	r0, 801cc7a <rcl_wait_set_add_timer+0x4e>
 801cc2e:	b538      	push	{r3, r4, r5, lr}
 801cc30:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801cc32:	4604      	mov	r4, r0
 801cc34:	b31b      	cbz	r3, 801cc7e <rcl_wait_set_add_timer+0x52>
 801cc36:	b329      	cbz	r1, 801cc84 <rcl_wait_set_add_timer+0x58>
 801cc38:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801cc3a:	6965      	ldr	r5, [r4, #20]
 801cc3c:	42a8      	cmp	r0, r5
 801cc3e:	d219      	bcs.n	801cc74 <rcl_wait_set_add_timer+0x48>
 801cc40:	1c45      	adds	r5, r0, #1
 801cc42:	641d      	str	r5, [r3, #64]	@ 0x40
 801cc44:	6923      	ldr	r3, [r4, #16]
 801cc46:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 801cc4a:	b102      	cbz	r2, 801cc4e <rcl_wait_set_add_timer+0x22>
 801cc4c:	6010      	str	r0, [r2, #0]
 801cc4e:	4608      	mov	r0, r1
 801cc50:	f7ff fb9a 	bl	801c388 <rcl_timer_get_guard_condition>
 801cc54:	b168      	cbz	r0, 801cc72 <rcl_wait_set_add_timer+0x46>
 801cc56:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801cc58:	68e3      	ldr	r3, [r4, #12]
 801cc5a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 801cc5c:	3b01      	subs	r3, #1
 801cc5e:	441d      	add	r5, r3
 801cc60:	f004 fbce 	bl	8021400 <rcl_guard_condition_get_rmw_handle>
 801cc64:	b180      	cbz	r0, 801cc88 <rcl_wait_set_add_timer+0x5c>
 801cc66:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cc68:	6842      	ldr	r2, [r0, #4]
 801cc6a:	2000      	movs	r0, #0
 801cc6c:	695b      	ldr	r3, [r3, #20]
 801cc6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cc72:	bd38      	pop	{r3, r4, r5, pc}
 801cc74:	f240 3086 	movw	r0, #902	@ 0x386
 801cc78:	bd38      	pop	{r3, r4, r5, pc}
 801cc7a:	200b      	movs	r0, #11
 801cc7c:	4770      	bx	lr
 801cc7e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801cc82:	bd38      	pop	{r3, r4, r5, pc}
 801cc84:	200b      	movs	r0, #11
 801cc86:	bd38      	pop	{r3, r4, r5, pc}
 801cc88:	2001      	movs	r0, #1
 801cc8a:	bd38      	pop	{r3, r4, r5, pc}

0801cc8c <rcl_wait_set_add_client>:
 801cc8c:	b318      	cbz	r0, 801ccd6 <rcl_wait_set_add_client+0x4a>
 801cc8e:	b538      	push	{r3, r4, r5, lr}
 801cc90:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801cc92:	4604      	mov	r4, r0
 801cc94:	b30b      	cbz	r3, 801ccda <rcl_wait_set_add_client+0x4e>
 801cc96:	b319      	cbz	r1, 801cce0 <rcl_wait_set_add_client+0x54>
 801cc98:	699d      	ldr	r5, [r3, #24]
 801cc9a:	69c0      	ldr	r0, [r0, #28]
 801cc9c:	4285      	cmp	r5, r0
 801cc9e:	d217      	bcs.n	801ccd0 <rcl_wait_set_add_client+0x44>
 801cca0:	1c68      	adds	r0, r5, #1
 801cca2:	6198      	str	r0, [r3, #24]
 801cca4:	69a3      	ldr	r3, [r4, #24]
 801cca6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801ccaa:	b102      	cbz	r2, 801ccae <rcl_wait_set_add_client+0x22>
 801ccac:	6015      	str	r5, [r2, #0]
 801ccae:	4608      	mov	r0, r1
 801ccb0:	f7fd fe78 	bl	801a9a4 <rcl_client_get_rmw_handle>
 801ccb4:	b150      	cbz	r0, 801cccc <rcl_wait_set_add_client+0x40>
 801ccb6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ccb8:	6842      	ldr	r2, [r0, #4]
 801ccba:	2000      	movs	r0, #0
 801ccbc:	6a1b      	ldr	r3, [r3, #32]
 801ccbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ccc2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801ccc4:	69d3      	ldr	r3, [r2, #28]
 801ccc6:	3301      	adds	r3, #1
 801ccc8:	61d3      	str	r3, [r2, #28]
 801ccca:	bd38      	pop	{r3, r4, r5, pc}
 801cccc:	2001      	movs	r0, #1
 801ccce:	bd38      	pop	{r3, r4, r5, pc}
 801ccd0:	f240 3086 	movw	r0, #902	@ 0x386
 801ccd4:	bd38      	pop	{r3, r4, r5, pc}
 801ccd6:	200b      	movs	r0, #11
 801ccd8:	4770      	bx	lr
 801ccda:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801ccde:	bd38      	pop	{r3, r4, r5, pc}
 801cce0:	200b      	movs	r0, #11
 801cce2:	bd38      	pop	{r3, r4, r5, pc}

0801cce4 <rcl_wait_set_add_service>:
 801cce4:	b318      	cbz	r0, 801cd2e <rcl_wait_set_add_service+0x4a>
 801cce6:	b538      	push	{r3, r4, r5, lr}
 801cce8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801ccea:	4604      	mov	r4, r0
 801ccec:	b30b      	cbz	r3, 801cd32 <rcl_wait_set_add_service+0x4e>
 801ccee:	b319      	cbz	r1, 801cd38 <rcl_wait_set_add_service+0x54>
 801ccf0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801ccf2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801ccf4:	4285      	cmp	r5, r0
 801ccf6:	d217      	bcs.n	801cd28 <rcl_wait_set_add_service+0x44>
 801ccf8:	1c68      	adds	r0, r5, #1
 801ccfa:	6258      	str	r0, [r3, #36]	@ 0x24
 801ccfc:	6a23      	ldr	r3, [r4, #32]
 801ccfe:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801cd02:	b102      	cbz	r2, 801cd06 <rcl_wait_set_add_service+0x22>
 801cd04:	6015      	str	r5, [r2, #0]
 801cd06:	4608      	mov	r0, r1
 801cd08:	f7fe fdc2 	bl	801b890 <rcl_service_get_rmw_handle>
 801cd0c:	b150      	cbz	r0, 801cd24 <rcl_wait_set_add_service+0x40>
 801cd0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cd10:	6842      	ldr	r2, [r0, #4]
 801cd12:	2000      	movs	r0, #0
 801cd14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cd16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cd1a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801cd1c:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 801cd1e:	3301      	adds	r3, #1
 801cd20:	6293      	str	r3, [r2, #40]	@ 0x28
 801cd22:	bd38      	pop	{r3, r4, r5, pc}
 801cd24:	2001      	movs	r0, #1
 801cd26:	bd38      	pop	{r3, r4, r5, pc}
 801cd28:	f240 3086 	movw	r0, #902	@ 0x386
 801cd2c:	bd38      	pop	{r3, r4, r5, pc}
 801cd2e:	200b      	movs	r0, #11
 801cd30:	4770      	bx	lr
 801cd32:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801cd36:	bd38      	pop	{r3, r4, r5, pc}
 801cd38:	200b      	movs	r0, #11
 801cd3a:	bd38      	pop	{r3, r4, r5, pc}
 801cd3c:	0000      	movs	r0, r0
	...

0801cd40 <rcl_wait>:
 801cd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd44:	ed2d 8b02 	vpush	{d8}
 801cd48:	b08d      	sub	sp, #52	@ 0x34
 801cd4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801cd4e:	2800      	cmp	r0, #0
 801cd50:	f000 814f 	beq.w	801cff2 <rcl_wait+0x2b2>
 801cd54:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801cd56:	4605      	mov	r5, r0
 801cd58:	2e00      	cmp	r6, #0
 801cd5a:	f000 811a 	beq.w	801cf92 <rcl_wait+0x252>
 801cd5e:	6843      	ldr	r3, [r0, #4]
 801cd60:	b983      	cbnz	r3, 801cd84 <rcl_wait+0x44>
 801cd62:	68eb      	ldr	r3, [r5, #12]
 801cd64:	b973      	cbnz	r3, 801cd84 <rcl_wait+0x44>
 801cd66:	696b      	ldr	r3, [r5, #20]
 801cd68:	b963      	cbnz	r3, 801cd84 <rcl_wait+0x44>
 801cd6a:	69eb      	ldr	r3, [r5, #28]
 801cd6c:	b953      	cbnz	r3, 801cd84 <rcl_wait+0x44>
 801cd6e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801cd70:	b943      	cbnz	r3, 801cd84 <rcl_wait+0x44>
 801cd72:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801cd74:	b933      	cbnz	r3, 801cd84 <rcl_wait+0x44>
 801cd76:	f240 3085 	movw	r0, #901	@ 0x385
 801cd7a:	b00d      	add	sp, #52	@ 0x34
 801cd7c:	ecbd 8b02 	vpop	{d8}
 801cd80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd84:	9b04      	ldr	r3, [sp, #16]
 801cd86:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 801cd88:	2b01      	cmp	r3, #1
 801cd8a:	9b05      	ldr	r3, [sp, #20]
 801cd8c:	f173 0300 	sbcs.w	r3, r3, #0
 801cd90:	f2c0 80f8 	blt.w	801cf84 <rcl_wait+0x244>
 801cd94:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 801cd98:	2a00      	cmp	r2, #0
 801cd9a:	f000 810f 	beq.w	801cfbc <rcl_wait+0x27c>
 801cd9e:	2400      	movs	r4, #0
 801cda0:	4613      	mov	r3, r2
 801cda2:	f240 3921 	movw	r9, #801	@ 0x321
 801cda6:	4632      	mov	r2, r6
 801cda8:	46a2      	mov	sl, r4
 801cdaa:	46a3      	mov	fp, r4
 801cdac:	ed9f 8b98 	vldr	d8, [pc, #608]	@ 801d010 <rcl_wait+0x2d0>
 801cdb0:	e014      	b.n	801cddc <rcl_wait+0x9c>
 801cdb2:	2800      	cmp	r0, #0
 801cdb4:	d1e1      	bne.n	801cd7a <rcl_wait+0x3a>
 801cdb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801cdba:	4542      	cmp	r2, r8
 801cdbc:	eb73 0107 	sbcs.w	r1, r3, r7
 801cdc0:	da03      	bge.n	801cdca <rcl_wait+0x8a>
 801cdc2:	4690      	mov	r8, r2
 801cdc4:	461f      	mov	r7, r3
 801cdc6:	f04f 0b01 	mov.w	fp, #1
 801cdca:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801cdcc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801cdce:	3401      	adds	r4, #1
 801cdd0:	f14a 0a00 	adc.w	sl, sl, #0
 801cdd4:	429c      	cmp	r4, r3
 801cdd6:	f17a 0100 	sbcs.w	r1, sl, #0
 801cdda:	d228      	bcs.n	801ce2e <rcl_wait+0xee>
 801cddc:	6928      	ldr	r0, [r5, #16]
 801cdde:	a908      	add	r1, sp, #32
 801cde0:	00a6      	lsls	r6, r4, #2
 801cde2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801cde6:	2800      	cmp	r0, #0
 801cde8:	d0f1      	beq.n	801cdce <rcl_wait+0x8e>
 801cdea:	68eb      	ldr	r3, [r5, #12]
 801cdec:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801cdf0:	4423      	add	r3, r4
 801cdf2:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 801cdf6:	f1be 0f00 	cmp.w	lr, #0
 801cdfa:	d006      	beq.n	801ce0a <rcl_wait+0xca>
 801cdfc:	6913      	ldr	r3, [r2, #16]
 801cdfe:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801ce02:	3301      	adds	r3, #1
 801ce04:	6113      	str	r3, [r2, #16]
 801ce06:	692b      	ldr	r3, [r5, #16]
 801ce08:	5998      	ldr	r0, [r3, r6]
 801ce0a:	ed8d 8b08 	vstr	d8, [sp, #32]
 801ce0e:	f7ff fa89 	bl	801c324 <rcl_timer_get_time_until_next_call>
 801ce12:	4548      	cmp	r0, r9
 801ce14:	d1cd      	bne.n	801cdb2 <rcl_wait+0x72>
 801ce16:	692b      	ldr	r3, [r5, #16]
 801ce18:	2200      	movs	r2, #0
 801ce1a:	3401      	adds	r4, #1
 801ce1c:	519a      	str	r2, [r3, r6]
 801ce1e:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801ce20:	f14a 0a00 	adc.w	sl, sl, #0
 801ce24:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801ce26:	429c      	cmp	r4, r3
 801ce28:	f17a 0100 	sbcs.w	r1, sl, #0
 801ce2c:	d3d6      	bcc.n	801cddc <rcl_wait+0x9c>
 801ce2e:	4659      	mov	r1, fp
 801ce30:	4616      	mov	r6, r2
 801ce32:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801ce36:	4313      	orrs	r3, r2
 801ce38:	f040 80b4 	bne.w	801cfa4 <rcl_wait+0x264>
 801ce3c:	2300      	movs	r3, #0
 801ce3e:	2200      	movs	r2, #0
 801ce40:	460c      	mov	r4, r1
 801ce42:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ce46:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801ce4a:	ab08      	add	r3, sp, #32
 801ce4c:	9302      	str	r3, [sp, #8]
 801ce4e:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 801ce52:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 801ce54:	f106 0110 	add.w	r1, r6, #16
 801ce58:	9300      	str	r3, [sp, #0]
 801ce5a:	1d30      	adds	r0, r6, #4
 801ce5c:	f106 031c 	add.w	r3, r6, #28
 801ce60:	9201      	str	r2, [sp, #4]
 801ce62:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 801ce66:	f002 fcb7 	bl	801f7d8 <rmw_wait>
 801ce6a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ce6c:	4680      	mov	r8, r0
 801ce6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801ce70:	b1e2      	cbz	r2, 801ceac <rcl_wait+0x16c>
 801ce72:	f04f 0900 	mov.w	r9, #0
 801ce76:	464f      	mov	r7, r9
 801ce78:	692a      	ldr	r2, [r5, #16]
 801ce7a:	f10d 011f 	add.w	r1, sp, #31
 801ce7e:	ea4f 0689 	mov.w	r6, r9, lsl #2
 801ce82:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801ce86:	b160      	cbz	r0, 801cea2 <rcl_wait+0x162>
 801ce88:	f88d 701f 	strb.w	r7, [sp, #31]
 801ce8c:	f7ff fa0e 	bl	801c2ac <rcl_timer_is_ready>
 801ce90:	2800      	cmp	r0, #0
 801ce92:	f47f af72 	bne.w	801cd7a <rcl_wait+0x3a>
 801ce96:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801ce9a:	b90b      	cbnz	r3, 801cea0 <rcl_wait+0x160>
 801ce9c:	692a      	ldr	r2, [r5, #16]
 801ce9e:	5193      	str	r3, [r2, r6]
 801cea0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cea2:	f109 0901 	add.w	r9, r9, #1
 801cea6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801cea8:	454a      	cmp	r2, r9
 801ceaa:	d8e5      	bhi.n	801ce78 <rcl_wait+0x138>
 801ceac:	f038 0002 	bics.w	r0, r8, #2
 801ceb0:	d176      	bne.n	801cfa0 <rcl_wait+0x260>
 801ceb2:	686f      	ldr	r7, [r5, #4]
 801ceb4:	b17f      	cbz	r7, 801ced6 <rcl_wait+0x196>
 801ceb6:	4602      	mov	r2, r0
 801ceb8:	e002      	b.n	801cec0 <rcl_wait+0x180>
 801ceba:	3201      	adds	r2, #1
 801cebc:	42ba      	cmp	r2, r7
 801cebe:	d00a      	beq.n	801ced6 <rcl_wait+0x196>
 801cec0:	6899      	ldr	r1, [r3, #8]
 801cec2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cec6:	2900      	cmp	r1, #0
 801cec8:	d1f7      	bne.n	801ceba <rcl_wait+0x17a>
 801ceca:	682e      	ldr	r6, [r5, #0]
 801cecc:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801ced0:	3201      	adds	r2, #1
 801ced2:	42ba      	cmp	r2, r7
 801ced4:	d1f4      	bne.n	801cec0 <rcl_wait+0x180>
 801ced6:	68ef      	ldr	r7, [r5, #12]
 801ced8:	b17f      	cbz	r7, 801cefa <rcl_wait+0x1ba>
 801ceda:	2200      	movs	r2, #0
 801cedc:	e002      	b.n	801cee4 <rcl_wait+0x1a4>
 801cede:	3201      	adds	r2, #1
 801cee0:	42ba      	cmp	r2, r7
 801cee2:	d00a      	beq.n	801cefa <rcl_wait+0x1ba>
 801cee4:	6959      	ldr	r1, [r3, #20]
 801cee6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ceea:	2900      	cmp	r1, #0
 801ceec:	d1f7      	bne.n	801cede <rcl_wait+0x19e>
 801ceee:	68ae      	ldr	r6, [r5, #8]
 801cef0:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cef4:	3201      	adds	r2, #1
 801cef6:	42ba      	cmp	r2, r7
 801cef8:	d1f4      	bne.n	801cee4 <rcl_wait+0x1a4>
 801cefa:	69ef      	ldr	r7, [r5, #28]
 801cefc:	b17f      	cbz	r7, 801cf1e <rcl_wait+0x1de>
 801cefe:	2200      	movs	r2, #0
 801cf00:	e002      	b.n	801cf08 <rcl_wait+0x1c8>
 801cf02:	3201      	adds	r2, #1
 801cf04:	42ba      	cmp	r2, r7
 801cf06:	d00a      	beq.n	801cf1e <rcl_wait+0x1de>
 801cf08:	6a19      	ldr	r1, [r3, #32]
 801cf0a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cf0e:	2900      	cmp	r1, #0
 801cf10:	d1f7      	bne.n	801cf02 <rcl_wait+0x1c2>
 801cf12:	69ae      	ldr	r6, [r5, #24]
 801cf14:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cf18:	3201      	adds	r2, #1
 801cf1a:	42ba      	cmp	r2, r7
 801cf1c:	d1f4      	bne.n	801cf08 <rcl_wait+0x1c8>
 801cf1e:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 801cf20:	b17f      	cbz	r7, 801cf42 <rcl_wait+0x202>
 801cf22:	2200      	movs	r2, #0
 801cf24:	e002      	b.n	801cf2c <rcl_wait+0x1ec>
 801cf26:	3201      	adds	r2, #1
 801cf28:	42ba      	cmp	r2, r7
 801cf2a:	d00a      	beq.n	801cf42 <rcl_wait+0x202>
 801cf2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801cf2e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cf32:	2900      	cmp	r1, #0
 801cf34:	d1f7      	bne.n	801cf26 <rcl_wait+0x1e6>
 801cf36:	6a2e      	ldr	r6, [r5, #32]
 801cf38:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cf3c:	3201      	adds	r2, #1
 801cf3e:	42ba      	cmp	r2, r7
 801cf40:	d1f4      	bne.n	801cf2c <rcl_wait+0x1ec>
 801cf42:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 801cf44:	b17f      	cbz	r7, 801cf66 <rcl_wait+0x226>
 801cf46:	2200      	movs	r2, #0
 801cf48:	e002      	b.n	801cf50 <rcl_wait+0x210>
 801cf4a:	3201      	adds	r2, #1
 801cf4c:	42ba      	cmp	r2, r7
 801cf4e:	d00a      	beq.n	801cf66 <rcl_wait+0x226>
 801cf50:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801cf52:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cf56:	2900      	cmp	r1, #0
 801cf58:	d1f7      	bne.n	801cf4a <rcl_wait+0x20a>
 801cf5a:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 801cf5c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cf60:	3201      	adds	r2, #1
 801cf62:	42ba      	cmp	r2, r7
 801cf64:	d1f4      	bne.n	801cf50 <rcl_wait+0x210>
 801cf66:	f1b8 0f02 	cmp.w	r8, #2
 801cf6a:	f47f af06 	bne.w	801cd7a <rcl_wait+0x3a>
 801cf6e:	f084 0301 	eor.w	r3, r4, #1
 801cf72:	b2db      	uxtb	r3, r3
 801cf74:	2b00      	cmp	r3, #0
 801cf76:	bf18      	it	ne
 801cf78:	2002      	movne	r0, #2
 801cf7a:	b00d      	add	sp, #52	@ 0x34
 801cf7c:	ecbd 8b02 	vpop	{d8}
 801cf80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf84:	2a00      	cmp	r2, #0
 801cf86:	d03a      	beq.n	801cffe <rcl_wait+0x2be>
 801cf88:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801cf8c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801cf90:	e705      	b.n	801cd9e <rcl_wait+0x5e>
 801cf92:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801cf96:	b00d      	add	sp, #52	@ 0x34
 801cf98:	ecbd 8b02 	vpop	{d8}
 801cf9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfa0:	2001      	movs	r0, #1
 801cfa2:	e6ea      	b.n	801cd7a <rcl_wait+0x3a>
 801cfa4:	9b04      	ldr	r3, [sp, #16]
 801cfa6:	460c      	mov	r4, r1
 801cfa8:	2b01      	cmp	r3, #1
 801cfaa:	9b05      	ldr	r3, [sp, #20]
 801cfac:	f173 0300 	sbcs.w	r3, r3, #0
 801cfb0:	bfa8      	it	ge
 801cfb2:	f044 0401 	orrge.w	r4, r4, #1
 801cfb6:	b914      	cbnz	r4, 801cfbe <rcl_wait+0x27e>
 801cfb8:	4623      	mov	r3, r4
 801cfba:	e747      	b.n	801ce4c <rcl_wait+0x10c>
 801cfbc:	4611      	mov	r1, r2
 801cfbe:	2f00      	cmp	r7, #0
 801cfc0:	da02      	bge.n	801cfc8 <rcl_wait+0x288>
 801cfc2:	f04f 0800 	mov.w	r8, #0
 801cfc6:	4647      	mov	r7, r8
 801cfc8:	460c      	mov	r4, r1
 801cfca:	4640      	mov	r0, r8
 801cfcc:	4639      	mov	r1, r7
 801cfce:	a312      	add	r3, pc, #72	@ (adr r3, 801d018 <rcl_wait+0x2d8>)
 801cfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfd4:	f7e3 f9ec 	bl	80003b0 <__aeabi_ldivmod>
 801cfd8:	a30f      	add	r3, pc, #60	@ (adr r3, 801d018 <rcl_wait+0x2d8>)
 801cfda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfde:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801cfe2:	4640      	mov	r0, r8
 801cfe4:	4639      	mov	r1, r7
 801cfe6:	f7e3 f9e3 	bl	80003b0 <__aeabi_ldivmod>
 801cfea:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801cfee:	ab08      	add	r3, sp, #32
 801cff0:	e72c      	b.n	801ce4c <rcl_wait+0x10c>
 801cff2:	200b      	movs	r0, #11
 801cff4:	b00d      	add	sp, #52	@ 0x34
 801cff6:	ecbd 8b02 	vpop	{d8}
 801cffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cffe:	4611      	mov	r1, r2
 801d000:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801d004:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801d008:	e713      	b.n	801ce32 <rcl_wait+0xf2>
 801d00a:	bf00      	nop
 801d00c:	f3af 8000 	nop.w
 801d010:	ffffffff 	.word	0xffffffff
 801d014:	7fffffff 	.word	0x7fffffff
 801d018:	3b9aca00 	.word	0x3b9aca00
 801d01c:	00000000 	.word	0x00000000

0801d020 <rcl_action_take_goal_response>:
 801d020:	2800      	cmp	r0, #0
 801d022:	d039      	beq.n	801d098 <rcl_action_take_goal_response+0x78>
 801d024:	b570      	push	{r4, r5, r6, lr}
 801d026:	4604      	mov	r4, r0
 801d028:	6800      	ldr	r0, [r0, #0]
 801d02a:	b380      	cbz	r0, 801d08e <rcl_action_take_goal_response+0x6e>
 801d02c:	460e      	mov	r6, r1
 801d02e:	4615      	mov	r5, r2
 801d030:	f7fd fd3e 	bl	801aab0 <rcl_client_is_valid>
 801d034:	b330      	cbz	r0, 801d084 <rcl_action_take_goal_response+0x64>
 801d036:	6820      	ldr	r0, [r4, #0]
 801d038:	3004      	adds	r0, #4
 801d03a:	f7fd fd39 	bl	801aab0 <rcl_client_is_valid>
 801d03e:	b308      	cbz	r0, 801d084 <rcl_action_take_goal_response+0x64>
 801d040:	6820      	ldr	r0, [r4, #0]
 801d042:	3008      	adds	r0, #8
 801d044:	f7fd fd34 	bl	801aab0 <rcl_client_is_valid>
 801d048:	b1e0      	cbz	r0, 801d084 <rcl_action_take_goal_response+0x64>
 801d04a:	6820      	ldr	r0, [r4, #0]
 801d04c:	300c      	adds	r0, #12
 801d04e:	f7fe fdc5 	bl	801bbdc <rcl_subscription_is_valid>
 801d052:	b1b8      	cbz	r0, 801d084 <rcl_action_take_goal_response+0x64>
 801d054:	6820      	ldr	r0, [r4, #0]
 801d056:	3010      	adds	r0, #16
 801d058:	f7fe fdc0 	bl	801bbdc <rcl_subscription_is_valid>
 801d05c:	b190      	cbz	r0, 801d084 <rcl_action_take_goal_response+0x64>
 801d05e:	b1cd      	cbz	r5, 801d094 <rcl_action_take_goal_response+0x74>
 801d060:	b1c6      	cbz	r6, 801d094 <rcl_action_take_goal_response+0x74>
 801d062:	462a      	mov	r2, r5
 801d064:	4631      	mov	r1, r6
 801d066:	6820      	ldr	r0, [r4, #0]
 801d068:	f7fd fcda 	bl	801aa20 <rcl_take_response>
 801d06c:	b148      	cbz	r0, 801d082 <rcl_action_take_goal_response+0x62>
 801d06e:	280a      	cmp	r0, #10
 801d070:	d007      	beq.n	801d082 <rcl_action_take_goal_response+0x62>
 801d072:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801d076:	f640 0337 	movw	r3, #2103	@ 0x837
 801d07a:	4290      	cmp	r0, r2
 801d07c:	bf0c      	ite	eq
 801d07e:	4618      	moveq	r0, r3
 801d080:	2001      	movne	r0, #1
 801d082:	bd70      	pop	{r4, r5, r6, pc}
 801d084:	f7f8 fa34 	bl	80154f0 <rcutils_reset_error>
 801d088:	f640 0036 	movw	r0, #2102	@ 0x836
 801d08c:	bd70      	pop	{r4, r5, r6, pc}
 801d08e:	f640 0036 	movw	r0, #2102	@ 0x836
 801d092:	bd70      	pop	{r4, r5, r6, pc}
 801d094:	200b      	movs	r0, #11
 801d096:	bd70      	pop	{r4, r5, r6, pc}
 801d098:	f640 0036 	movw	r0, #2102	@ 0x836
 801d09c:	4770      	bx	lr
 801d09e:	bf00      	nop

0801d0a0 <rcl_action_send_result_request>:
 801d0a0:	b390      	cbz	r0, 801d108 <rcl_action_send_result_request+0x68>
 801d0a2:	b570      	push	{r4, r5, r6, lr}
 801d0a4:	4604      	mov	r4, r0
 801d0a6:	6800      	ldr	r0, [r0, #0]
 801d0a8:	b348      	cbz	r0, 801d0fe <rcl_action_send_result_request+0x5e>
 801d0aa:	460e      	mov	r6, r1
 801d0ac:	4615      	mov	r5, r2
 801d0ae:	f7fd fcff 	bl	801aab0 <rcl_client_is_valid>
 801d0b2:	b1f8      	cbz	r0, 801d0f4 <rcl_action_send_result_request+0x54>
 801d0b4:	6820      	ldr	r0, [r4, #0]
 801d0b6:	3004      	adds	r0, #4
 801d0b8:	f7fd fcfa 	bl	801aab0 <rcl_client_is_valid>
 801d0bc:	b1d0      	cbz	r0, 801d0f4 <rcl_action_send_result_request+0x54>
 801d0be:	6820      	ldr	r0, [r4, #0]
 801d0c0:	3008      	adds	r0, #8
 801d0c2:	f7fd fcf5 	bl	801aab0 <rcl_client_is_valid>
 801d0c6:	b1a8      	cbz	r0, 801d0f4 <rcl_action_send_result_request+0x54>
 801d0c8:	6820      	ldr	r0, [r4, #0]
 801d0ca:	300c      	adds	r0, #12
 801d0cc:	f7fe fd86 	bl	801bbdc <rcl_subscription_is_valid>
 801d0d0:	b180      	cbz	r0, 801d0f4 <rcl_action_send_result_request+0x54>
 801d0d2:	6820      	ldr	r0, [r4, #0]
 801d0d4:	3010      	adds	r0, #16
 801d0d6:	f7fe fd81 	bl	801bbdc <rcl_subscription_is_valid>
 801d0da:	b158      	cbz	r0, 801d0f4 <rcl_action_send_result_request+0x54>
 801d0dc:	b195      	cbz	r5, 801d104 <rcl_action_send_result_request+0x64>
 801d0de:	b18e      	cbz	r6, 801d104 <rcl_action_send_result_request+0x64>
 801d0e0:	6820      	ldr	r0, [r4, #0]
 801d0e2:	462a      	mov	r2, r5
 801d0e4:	4631      	mov	r1, r6
 801d0e6:	3008      	adds	r0, #8
 801d0e8:	f7fd fc62 	bl	801a9b0 <rcl_send_request>
 801d0ec:	3800      	subs	r0, #0
 801d0ee:	bf18      	it	ne
 801d0f0:	2001      	movne	r0, #1
 801d0f2:	bd70      	pop	{r4, r5, r6, pc}
 801d0f4:	f7f8 f9fc 	bl	80154f0 <rcutils_reset_error>
 801d0f8:	f640 0036 	movw	r0, #2102	@ 0x836
 801d0fc:	bd70      	pop	{r4, r5, r6, pc}
 801d0fe:	f640 0036 	movw	r0, #2102	@ 0x836
 801d102:	bd70      	pop	{r4, r5, r6, pc}
 801d104:	200b      	movs	r0, #11
 801d106:	bd70      	pop	{r4, r5, r6, pc}
 801d108:	f640 0036 	movw	r0, #2102	@ 0x836
 801d10c:	4770      	bx	lr
 801d10e:	bf00      	nop

0801d110 <rcl_action_take_result_response>:
 801d110:	2800      	cmp	r0, #0
 801d112:	d03a      	beq.n	801d18a <rcl_action_take_result_response+0x7a>
 801d114:	b570      	push	{r4, r5, r6, lr}
 801d116:	4604      	mov	r4, r0
 801d118:	6800      	ldr	r0, [r0, #0]
 801d11a:	b388      	cbz	r0, 801d180 <rcl_action_take_result_response+0x70>
 801d11c:	460e      	mov	r6, r1
 801d11e:	4615      	mov	r5, r2
 801d120:	f7fd fcc6 	bl	801aab0 <rcl_client_is_valid>
 801d124:	b338      	cbz	r0, 801d176 <rcl_action_take_result_response+0x66>
 801d126:	6820      	ldr	r0, [r4, #0]
 801d128:	3004      	adds	r0, #4
 801d12a:	f7fd fcc1 	bl	801aab0 <rcl_client_is_valid>
 801d12e:	b310      	cbz	r0, 801d176 <rcl_action_take_result_response+0x66>
 801d130:	6820      	ldr	r0, [r4, #0]
 801d132:	3008      	adds	r0, #8
 801d134:	f7fd fcbc 	bl	801aab0 <rcl_client_is_valid>
 801d138:	b1e8      	cbz	r0, 801d176 <rcl_action_take_result_response+0x66>
 801d13a:	6820      	ldr	r0, [r4, #0]
 801d13c:	300c      	adds	r0, #12
 801d13e:	f7fe fd4d 	bl	801bbdc <rcl_subscription_is_valid>
 801d142:	b1c0      	cbz	r0, 801d176 <rcl_action_take_result_response+0x66>
 801d144:	6820      	ldr	r0, [r4, #0]
 801d146:	3010      	adds	r0, #16
 801d148:	f7fe fd48 	bl	801bbdc <rcl_subscription_is_valid>
 801d14c:	b198      	cbz	r0, 801d176 <rcl_action_take_result_response+0x66>
 801d14e:	b1d5      	cbz	r5, 801d186 <rcl_action_take_result_response+0x76>
 801d150:	b1ce      	cbz	r6, 801d186 <rcl_action_take_result_response+0x76>
 801d152:	6820      	ldr	r0, [r4, #0]
 801d154:	462a      	mov	r2, r5
 801d156:	4631      	mov	r1, r6
 801d158:	3008      	adds	r0, #8
 801d15a:	f7fd fc61 	bl	801aa20 <rcl_take_response>
 801d15e:	b148      	cbz	r0, 801d174 <rcl_action_take_result_response+0x64>
 801d160:	280a      	cmp	r0, #10
 801d162:	d007      	beq.n	801d174 <rcl_action_take_result_response+0x64>
 801d164:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801d168:	f640 0337 	movw	r3, #2103	@ 0x837
 801d16c:	4290      	cmp	r0, r2
 801d16e:	bf0c      	ite	eq
 801d170:	4618      	moveq	r0, r3
 801d172:	2001      	movne	r0, #1
 801d174:	bd70      	pop	{r4, r5, r6, pc}
 801d176:	f7f8 f9bb 	bl	80154f0 <rcutils_reset_error>
 801d17a:	f640 0036 	movw	r0, #2102	@ 0x836
 801d17e:	bd70      	pop	{r4, r5, r6, pc}
 801d180:	f640 0036 	movw	r0, #2102	@ 0x836
 801d184:	bd70      	pop	{r4, r5, r6, pc}
 801d186:	200b      	movs	r0, #11
 801d188:	bd70      	pop	{r4, r5, r6, pc}
 801d18a:	f640 0036 	movw	r0, #2102	@ 0x836
 801d18e:	4770      	bx	lr

0801d190 <rcl_action_take_cancel_response>:
 801d190:	2800      	cmp	r0, #0
 801d192:	d03a      	beq.n	801d20a <rcl_action_take_cancel_response+0x7a>
 801d194:	b570      	push	{r4, r5, r6, lr}
 801d196:	4604      	mov	r4, r0
 801d198:	6800      	ldr	r0, [r0, #0]
 801d19a:	b388      	cbz	r0, 801d200 <rcl_action_take_cancel_response+0x70>
 801d19c:	460e      	mov	r6, r1
 801d19e:	4615      	mov	r5, r2
 801d1a0:	f7fd fc86 	bl	801aab0 <rcl_client_is_valid>
 801d1a4:	b338      	cbz	r0, 801d1f6 <rcl_action_take_cancel_response+0x66>
 801d1a6:	6820      	ldr	r0, [r4, #0]
 801d1a8:	3004      	adds	r0, #4
 801d1aa:	f7fd fc81 	bl	801aab0 <rcl_client_is_valid>
 801d1ae:	b310      	cbz	r0, 801d1f6 <rcl_action_take_cancel_response+0x66>
 801d1b0:	6820      	ldr	r0, [r4, #0]
 801d1b2:	3008      	adds	r0, #8
 801d1b4:	f7fd fc7c 	bl	801aab0 <rcl_client_is_valid>
 801d1b8:	b1e8      	cbz	r0, 801d1f6 <rcl_action_take_cancel_response+0x66>
 801d1ba:	6820      	ldr	r0, [r4, #0]
 801d1bc:	300c      	adds	r0, #12
 801d1be:	f7fe fd0d 	bl	801bbdc <rcl_subscription_is_valid>
 801d1c2:	b1c0      	cbz	r0, 801d1f6 <rcl_action_take_cancel_response+0x66>
 801d1c4:	6820      	ldr	r0, [r4, #0]
 801d1c6:	3010      	adds	r0, #16
 801d1c8:	f7fe fd08 	bl	801bbdc <rcl_subscription_is_valid>
 801d1cc:	b198      	cbz	r0, 801d1f6 <rcl_action_take_cancel_response+0x66>
 801d1ce:	b1d5      	cbz	r5, 801d206 <rcl_action_take_cancel_response+0x76>
 801d1d0:	b1ce      	cbz	r6, 801d206 <rcl_action_take_cancel_response+0x76>
 801d1d2:	6820      	ldr	r0, [r4, #0]
 801d1d4:	462a      	mov	r2, r5
 801d1d6:	4631      	mov	r1, r6
 801d1d8:	3004      	adds	r0, #4
 801d1da:	f7fd fc21 	bl	801aa20 <rcl_take_response>
 801d1de:	b148      	cbz	r0, 801d1f4 <rcl_action_take_cancel_response+0x64>
 801d1e0:	280a      	cmp	r0, #10
 801d1e2:	d007      	beq.n	801d1f4 <rcl_action_take_cancel_response+0x64>
 801d1e4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801d1e8:	f640 0337 	movw	r3, #2103	@ 0x837
 801d1ec:	4290      	cmp	r0, r2
 801d1ee:	bf0c      	ite	eq
 801d1f0:	4618      	moveq	r0, r3
 801d1f2:	2001      	movne	r0, #1
 801d1f4:	bd70      	pop	{r4, r5, r6, pc}
 801d1f6:	f7f8 f97b 	bl	80154f0 <rcutils_reset_error>
 801d1fa:	f640 0036 	movw	r0, #2102	@ 0x836
 801d1fe:	bd70      	pop	{r4, r5, r6, pc}
 801d200:	f640 0036 	movw	r0, #2102	@ 0x836
 801d204:	bd70      	pop	{r4, r5, r6, pc}
 801d206:	200b      	movs	r0, #11
 801d208:	bd70      	pop	{r4, r5, r6, pc}
 801d20a:	f640 0036 	movw	r0, #2102	@ 0x836
 801d20e:	4770      	bx	lr

0801d210 <rcl_action_take_feedback>:
 801d210:	2800      	cmp	r0, #0
 801d212:	d038      	beq.n	801d286 <rcl_action_take_feedback+0x76>
 801d214:	b530      	push	{r4, r5, lr}
 801d216:	4604      	mov	r4, r0
 801d218:	6800      	ldr	r0, [r0, #0]
 801d21a:	b091      	sub	sp, #68	@ 0x44
 801d21c:	b378      	cbz	r0, 801d27e <rcl_action_take_feedback+0x6e>
 801d21e:	460d      	mov	r5, r1
 801d220:	f7fd fc46 	bl	801aab0 <rcl_client_is_valid>
 801d224:	b328      	cbz	r0, 801d272 <rcl_action_take_feedback+0x62>
 801d226:	6820      	ldr	r0, [r4, #0]
 801d228:	3004      	adds	r0, #4
 801d22a:	f7fd fc41 	bl	801aab0 <rcl_client_is_valid>
 801d22e:	b300      	cbz	r0, 801d272 <rcl_action_take_feedback+0x62>
 801d230:	6820      	ldr	r0, [r4, #0]
 801d232:	3008      	adds	r0, #8
 801d234:	f7fd fc3c 	bl	801aab0 <rcl_client_is_valid>
 801d238:	b1d8      	cbz	r0, 801d272 <rcl_action_take_feedback+0x62>
 801d23a:	6820      	ldr	r0, [r4, #0]
 801d23c:	300c      	adds	r0, #12
 801d23e:	f7fe fccd 	bl	801bbdc <rcl_subscription_is_valid>
 801d242:	b1b0      	cbz	r0, 801d272 <rcl_action_take_feedback+0x62>
 801d244:	6820      	ldr	r0, [r4, #0]
 801d246:	3010      	adds	r0, #16
 801d248:	f7fe fcc8 	bl	801bbdc <rcl_subscription_is_valid>
 801d24c:	b188      	cbz	r0, 801d272 <rcl_action_take_feedback+0x62>
 801d24e:	b1ed      	cbz	r5, 801d28c <rcl_action_take_feedback+0x7c>
 801d250:	6820      	ldr	r0, [r4, #0]
 801d252:	2300      	movs	r3, #0
 801d254:	466a      	mov	r2, sp
 801d256:	4629      	mov	r1, r5
 801d258:	300c      	adds	r0, #12
 801d25a:	f7fe fc63 	bl	801bb24 <rcl_take>
 801d25e:	b160      	cbz	r0, 801d27a <rcl_action_take_feedback+0x6a>
 801d260:	f240 1391 	movw	r3, #401	@ 0x191
 801d264:	4298      	cmp	r0, r3
 801d266:	d014      	beq.n	801d292 <rcl_action_take_feedback+0x82>
 801d268:	280a      	cmp	r0, #10
 801d26a:	bf18      	it	ne
 801d26c:	2001      	movne	r0, #1
 801d26e:	b011      	add	sp, #68	@ 0x44
 801d270:	bd30      	pop	{r4, r5, pc}
 801d272:	f7f8 f93d 	bl	80154f0 <rcutils_reset_error>
 801d276:	f640 0036 	movw	r0, #2102	@ 0x836
 801d27a:	b011      	add	sp, #68	@ 0x44
 801d27c:	bd30      	pop	{r4, r5, pc}
 801d27e:	f640 0036 	movw	r0, #2102	@ 0x836
 801d282:	b011      	add	sp, #68	@ 0x44
 801d284:	bd30      	pop	{r4, r5, pc}
 801d286:	f640 0036 	movw	r0, #2102	@ 0x836
 801d28a:	4770      	bx	lr
 801d28c:	200b      	movs	r0, #11
 801d28e:	b011      	add	sp, #68	@ 0x44
 801d290:	bd30      	pop	{r4, r5, pc}
 801d292:	f640 0037 	movw	r0, #2103	@ 0x837
 801d296:	e7f0      	b.n	801d27a <rcl_action_take_feedback+0x6a>

0801d298 <rcl_action_wait_set_add_action_client>:
 801d298:	2800      	cmp	r0, #0
 801d29a:	d048      	beq.n	801d32e <rcl_action_wait_set_add_action_client+0x96>
 801d29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d29e:	460c      	mov	r4, r1
 801d2a0:	2900      	cmp	r1, #0
 801d2a2:	d03c      	beq.n	801d31e <rcl_action_wait_set_add_action_client+0x86>
 801d2a4:	4605      	mov	r5, r0
 801d2a6:	6808      	ldr	r0, [r1, #0]
 801d2a8:	2800      	cmp	r0, #0
 801d2aa:	d038      	beq.n	801d31e <rcl_action_wait_set_add_action_client+0x86>
 801d2ac:	4617      	mov	r7, r2
 801d2ae:	461e      	mov	r6, r3
 801d2b0:	f7fd fbfe 	bl	801aab0 <rcl_client_is_valid>
 801d2b4:	b3b0      	cbz	r0, 801d324 <rcl_action_wait_set_add_action_client+0x8c>
 801d2b6:	6820      	ldr	r0, [r4, #0]
 801d2b8:	3004      	adds	r0, #4
 801d2ba:	f7fd fbf9 	bl	801aab0 <rcl_client_is_valid>
 801d2be:	b388      	cbz	r0, 801d324 <rcl_action_wait_set_add_action_client+0x8c>
 801d2c0:	6820      	ldr	r0, [r4, #0]
 801d2c2:	3008      	adds	r0, #8
 801d2c4:	f7fd fbf4 	bl	801aab0 <rcl_client_is_valid>
 801d2c8:	b360      	cbz	r0, 801d324 <rcl_action_wait_set_add_action_client+0x8c>
 801d2ca:	6820      	ldr	r0, [r4, #0]
 801d2cc:	300c      	adds	r0, #12
 801d2ce:	f7fe fc85 	bl	801bbdc <rcl_subscription_is_valid>
 801d2d2:	b338      	cbz	r0, 801d324 <rcl_action_wait_set_add_action_client+0x8c>
 801d2d4:	6820      	ldr	r0, [r4, #0]
 801d2d6:	3010      	adds	r0, #16
 801d2d8:	f7fe fc80 	bl	801bbdc <rcl_subscription_is_valid>
 801d2dc:	b310      	cbz	r0, 801d324 <rcl_action_wait_set_add_action_client+0x8c>
 801d2de:	6821      	ldr	r1, [r4, #0]
 801d2e0:	4628      	mov	r0, r5
 801d2e2:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801d2e6:	f7ff fcd1 	bl	801cc8c <rcl_wait_set_add_client>
 801d2ea:	b9b8      	cbnz	r0, 801d31c <rcl_action_wait_set_add_action_client+0x84>
 801d2ec:	6821      	ldr	r1, [r4, #0]
 801d2ee:	4628      	mov	r0, r5
 801d2f0:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801d2f4:	3104      	adds	r1, #4
 801d2f6:	f7ff fcc9 	bl	801cc8c <rcl_wait_set_add_client>
 801d2fa:	b978      	cbnz	r0, 801d31c <rcl_action_wait_set_add_action_client+0x84>
 801d2fc:	6821      	ldr	r1, [r4, #0]
 801d2fe:	4628      	mov	r0, r5
 801d300:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801d304:	3108      	adds	r1, #8
 801d306:	f7ff fcc1 	bl	801cc8c <rcl_wait_set_add_client>
 801d30a:	b938      	cbnz	r0, 801d31c <rcl_action_wait_set_add_action_client+0x84>
 801d30c:	6821      	ldr	r1, [r4, #0]
 801d30e:	4628      	mov	r0, r5
 801d310:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801d314:	310c      	adds	r1, #12
 801d316:	f7ff f969 	bl	801c5ec <rcl_wait_set_add_subscription>
 801d31a:	b158      	cbz	r0, 801d334 <rcl_action_wait_set_add_action_client+0x9c>
 801d31c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d31e:	f640 0036 	movw	r0, #2102	@ 0x836
 801d322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d324:	f7f8 f8e4 	bl	80154f0 <rcutils_reset_error>
 801d328:	f640 0036 	movw	r0, #2102	@ 0x836
 801d32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d32e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801d332:	4770      	bx	lr
 801d334:	6821      	ldr	r1, [r4, #0]
 801d336:	4628      	mov	r0, r5
 801d338:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801d33c:	3110      	adds	r1, #16
 801d33e:	f7ff f955 	bl	801c5ec <rcl_wait_set_add_subscription>
 801d342:	2800      	cmp	r0, #0
 801d344:	d1ea      	bne.n	801d31c <rcl_action_wait_set_add_action_client+0x84>
 801d346:	b11f      	cbz	r7, 801d350 <rcl_action_wait_set_add_action_client+0xb8>
 801d348:	6823      	ldr	r3, [r4, #0]
 801d34a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801d34e:	603b      	str	r3, [r7, #0]
 801d350:	2e00      	cmp	r6, #0
 801d352:	d0e3      	beq.n	801d31c <rcl_action_wait_set_add_action_client+0x84>
 801d354:	6823      	ldr	r3, [r4, #0]
 801d356:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801d35a:	6033      	str	r3, [r6, #0]
 801d35c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d35e:	bf00      	nop

0801d360 <rcl_action_client_wait_set_get_entities_ready>:
 801d360:	2800      	cmp	r0, #0
 801d362:	d050      	beq.n	801d406 <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801d364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d368:	460c      	mov	r4, r1
 801d36a:	2900      	cmp	r1, #0
 801d36c:	d03e      	beq.n	801d3ec <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801d36e:	4605      	mov	r5, r0
 801d370:	6808      	ldr	r0, [r1, #0]
 801d372:	2800      	cmp	r0, #0
 801d374:	d03a      	beq.n	801d3ec <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801d376:	4616      	mov	r6, r2
 801d378:	461f      	mov	r7, r3
 801d37a:	f7fd fb99 	bl	801aab0 <rcl_client_is_valid>
 801d37e:	2800      	cmp	r0, #0
 801d380:	d038      	beq.n	801d3f4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d382:	6820      	ldr	r0, [r4, #0]
 801d384:	3004      	adds	r0, #4
 801d386:	f7fd fb93 	bl	801aab0 <rcl_client_is_valid>
 801d38a:	2800      	cmp	r0, #0
 801d38c:	d032      	beq.n	801d3f4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d38e:	6820      	ldr	r0, [r4, #0]
 801d390:	3008      	adds	r0, #8
 801d392:	f7fd fb8d 	bl	801aab0 <rcl_client_is_valid>
 801d396:	b368      	cbz	r0, 801d3f4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d398:	6820      	ldr	r0, [r4, #0]
 801d39a:	300c      	adds	r0, #12
 801d39c:	f7fe fc1e 	bl	801bbdc <rcl_subscription_is_valid>
 801d3a0:	b340      	cbz	r0, 801d3f4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d3a2:	6820      	ldr	r0, [r4, #0]
 801d3a4:	3010      	adds	r0, #16
 801d3a6:	f7fe fc19 	bl	801bbdc <rcl_subscription_is_valid>
 801d3aa:	b318      	cbz	r0, 801d3f4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d3ac:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
 801d3b0:	2a00      	cmp	r2, #0
 801d3b2:	bf18      	it	ne
 801d3b4:	2b00      	cmpne	r3, #0
 801d3b6:	9b08      	ldr	r3, [sp, #32]
 801d3b8:	bf0c      	ite	eq
 801d3ba:	2101      	moveq	r1, #1
 801d3bc:	2100      	movne	r1, #0
 801d3be:	2b00      	cmp	r3, #0
 801d3c0:	bf08      	it	eq
 801d3c2:	f041 0101 	orreq.w	r1, r1, #1
 801d3c6:	2f00      	cmp	r7, #0
 801d3c8:	bf08      	it	eq
 801d3ca:	f041 0101 	orreq.w	r1, r1, #1
 801d3ce:	b9b9      	cbnz	r1, 801d400 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801d3d0:	b1b6      	cbz	r6, 801d400 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801d3d2:	6823      	ldr	r3, [r4, #0]
 801d3d4:	686c      	ldr	r4, [r5, #4]
 801d3d6:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	@ 0x1d0
 801d3da:	428a      	cmp	r2, r1
 801d3dc:	4610      	mov	r0, r2
 801d3de:	bf38      	it	cc
 801d3e0:	4608      	movcc	r0, r1
 801d3e2:	4284      	cmp	r4, r0
 801d3e4:	d812      	bhi.n	801d40c <rcl_action_client_wait_set_get_entities_ready+0xac>
 801d3e6:	2001      	movs	r0, #1
 801d3e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d3ec:	f640 0036 	movw	r0, #2102	@ 0x836
 801d3f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d3f4:	f7f8 f87c 	bl	80154f0 <rcutils_reset_error>
 801d3f8:	f640 0036 	movw	r0, #2102	@ 0x836
 801d3fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d400:	200b      	movs	r0, #11
 801d402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d406:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801d40a:	4770      	bx	lr
 801d40c:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	@ 0x1c4
 801d410:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	@ 0x1cc
 801d414:	45f0      	cmp	r8, lr
 801d416:	4640      	mov	r0, r8
 801d418:	69ec      	ldr	r4, [r5, #28]
 801d41a:	bf38      	it	cc
 801d41c:	4670      	movcc	r0, lr
 801d41e:	4560      	cmp	r0, ip
 801d420:	bf38      	it	cc
 801d422:	4660      	movcc	r0, ip
 801d424:	4284      	cmp	r4, r0
 801d426:	d9de      	bls.n	801d3e6 <rcl_action_client_wait_set_get_entities_ready+0x86>
 801d428:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801d42c:	682d      	ldr	r5, [r5, #0]
 801d42e:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 801d432:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 801d436:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801d43a:	1a18      	subs	r0, r3, r0
 801d43c:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 801d440:	f103 0c0c 	add.w	ip, r3, #12
 801d444:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 801d448:	fab0 f080 	clz	r0, r0
 801d44c:	eba5 050c 	sub.w	r5, r5, ip
 801d450:	0940      	lsrs	r0, r0, #5
 801d452:	fab5 f585 	clz	r5, r5
 801d456:	096d      	lsrs	r5, r5, #5
 801d458:	7035      	strb	r5, [r6, #0]
 801d45a:	f103 0510 	add.w	r5, r3, #16
 801d45e:	1b64      	subs	r4, r4, r5
 801d460:	9d08      	ldr	r5, [sp, #32]
 801d462:	fab4 f484 	clz	r4, r4
 801d466:	0964      	lsrs	r4, r4, #5
 801d468:	703c      	strb	r4, [r7, #0]
 801d46a:	1d1c      	adds	r4, r3, #4
 801d46c:	3308      	adds	r3, #8
 801d46e:	7028      	strb	r0, [r5, #0]
 801d470:	1b09      	subs	r1, r1, r4
 801d472:	2000      	movs	r0, #0
 801d474:	1ad3      	subs	r3, r2, r3
 801d476:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d478:	fab1 f181 	clz	r1, r1
 801d47c:	fab3 f383 	clz	r3, r3
 801d480:	0949      	lsrs	r1, r1, #5
 801d482:	095b      	lsrs	r3, r3, #5
 801d484:	7011      	strb	r1, [r2, #0]
 801d486:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d488:	7013      	strb	r3, [r2, #0]
 801d48a:	e7b1      	b.n	801d3f0 <rcl_action_client_wait_set_get_entities_ready+0x90>

0801d48c <rcl_action_take_goal_request>:
 801d48c:	2800      	cmp	r0, #0
 801d48e:	d039      	beq.n	801d504 <rcl_action_take_goal_request+0x78>
 801d490:	b570      	push	{r4, r5, r6, lr}
 801d492:	4604      	mov	r4, r0
 801d494:	6800      	ldr	r0, [r0, #0]
 801d496:	b380      	cbz	r0, 801d4fa <rcl_action_take_goal_request+0x6e>
 801d498:	460e      	mov	r6, r1
 801d49a:	4615      	mov	r5, r2
 801d49c:	f7fe fa56 	bl	801b94c <rcl_service_is_valid>
 801d4a0:	b330      	cbz	r0, 801d4f0 <rcl_action_take_goal_request+0x64>
 801d4a2:	6820      	ldr	r0, [r4, #0]
 801d4a4:	3004      	adds	r0, #4
 801d4a6:	f7fe fa51 	bl	801b94c <rcl_service_is_valid>
 801d4aa:	b308      	cbz	r0, 801d4f0 <rcl_action_take_goal_request+0x64>
 801d4ac:	6820      	ldr	r0, [r4, #0]
 801d4ae:	3008      	adds	r0, #8
 801d4b0:	f7fe fa4c 	bl	801b94c <rcl_service_is_valid>
 801d4b4:	b1e0      	cbz	r0, 801d4f0 <rcl_action_take_goal_request+0x64>
 801d4b6:	6820      	ldr	r0, [r4, #0]
 801d4b8:	300c      	adds	r0, #12
 801d4ba:	f7f6 ffbb 	bl	8014434 <rcl_publisher_is_valid>
 801d4be:	b1b8      	cbz	r0, 801d4f0 <rcl_action_take_goal_request+0x64>
 801d4c0:	6820      	ldr	r0, [r4, #0]
 801d4c2:	3010      	adds	r0, #16
 801d4c4:	f7f6 ffb6 	bl	8014434 <rcl_publisher_is_valid>
 801d4c8:	b190      	cbz	r0, 801d4f0 <rcl_action_take_goal_request+0x64>
 801d4ca:	b1cd      	cbz	r5, 801d500 <rcl_action_take_goal_request+0x74>
 801d4cc:	b1c6      	cbz	r6, 801d500 <rcl_action_take_goal_request+0x74>
 801d4ce:	462a      	mov	r2, r5
 801d4d0:	4631      	mov	r1, r6
 801d4d2:	6820      	ldr	r0, [r4, #0]
 801d4d4:	f7fe f9e2 	bl	801b89c <rcl_take_request>
 801d4d8:	b148      	cbz	r0, 801d4ee <rcl_action_take_goal_request+0x62>
 801d4da:	280a      	cmp	r0, #10
 801d4dc:	d007      	beq.n	801d4ee <rcl_action_take_goal_request+0x62>
 801d4de:	f240 2259 	movw	r2, #601	@ 0x259
 801d4e2:	f640 0399 	movw	r3, #2201	@ 0x899
 801d4e6:	4290      	cmp	r0, r2
 801d4e8:	bf0c      	ite	eq
 801d4ea:	4618      	moveq	r0, r3
 801d4ec:	2001      	movne	r0, #1
 801d4ee:	bd70      	pop	{r4, r5, r6, pc}
 801d4f0:	f7f7 fffe 	bl	80154f0 <rcutils_reset_error>
 801d4f4:	f640 0098 	movw	r0, #2200	@ 0x898
 801d4f8:	bd70      	pop	{r4, r5, r6, pc}
 801d4fa:	f640 0098 	movw	r0, #2200	@ 0x898
 801d4fe:	bd70      	pop	{r4, r5, r6, pc}
 801d500:	200b      	movs	r0, #11
 801d502:	bd70      	pop	{r4, r5, r6, pc}
 801d504:	f640 0098 	movw	r0, #2200	@ 0x898
 801d508:	4770      	bx	lr
 801d50a:	bf00      	nop

0801d50c <rcl_action_send_goal_response>:
 801d50c:	b390      	cbz	r0, 801d574 <rcl_action_send_goal_response+0x68>
 801d50e:	b570      	push	{r4, r5, r6, lr}
 801d510:	4604      	mov	r4, r0
 801d512:	6800      	ldr	r0, [r0, #0]
 801d514:	b348      	cbz	r0, 801d56a <rcl_action_send_goal_response+0x5e>
 801d516:	460e      	mov	r6, r1
 801d518:	4615      	mov	r5, r2
 801d51a:	f7fe fa17 	bl	801b94c <rcl_service_is_valid>
 801d51e:	b1f8      	cbz	r0, 801d560 <rcl_action_send_goal_response+0x54>
 801d520:	6820      	ldr	r0, [r4, #0]
 801d522:	3004      	adds	r0, #4
 801d524:	f7fe fa12 	bl	801b94c <rcl_service_is_valid>
 801d528:	b1d0      	cbz	r0, 801d560 <rcl_action_send_goal_response+0x54>
 801d52a:	6820      	ldr	r0, [r4, #0]
 801d52c:	3008      	adds	r0, #8
 801d52e:	f7fe fa0d 	bl	801b94c <rcl_service_is_valid>
 801d532:	b1a8      	cbz	r0, 801d560 <rcl_action_send_goal_response+0x54>
 801d534:	6820      	ldr	r0, [r4, #0]
 801d536:	300c      	adds	r0, #12
 801d538:	f7f6 ff7c 	bl	8014434 <rcl_publisher_is_valid>
 801d53c:	b180      	cbz	r0, 801d560 <rcl_action_send_goal_response+0x54>
 801d53e:	6820      	ldr	r0, [r4, #0]
 801d540:	3010      	adds	r0, #16
 801d542:	f7f6 ff77 	bl	8014434 <rcl_publisher_is_valid>
 801d546:	b158      	cbz	r0, 801d560 <rcl_action_send_goal_response+0x54>
 801d548:	b195      	cbz	r5, 801d570 <rcl_action_send_goal_response+0x64>
 801d54a:	b18e      	cbz	r6, 801d570 <rcl_action_send_goal_response+0x64>
 801d54c:	462a      	mov	r2, r5
 801d54e:	4631      	mov	r1, r6
 801d550:	6820      	ldr	r0, [r4, #0]
 801d552:	f7fe f9e3 	bl	801b91c <rcl_send_response>
 801d556:	b110      	cbz	r0, 801d55e <rcl_action_send_goal_response+0x52>
 801d558:	2802      	cmp	r0, #2
 801d55a:	bf18      	it	ne
 801d55c:	2001      	movne	r0, #1
 801d55e:	bd70      	pop	{r4, r5, r6, pc}
 801d560:	f7f7 ffc6 	bl	80154f0 <rcutils_reset_error>
 801d564:	f640 0098 	movw	r0, #2200	@ 0x898
 801d568:	bd70      	pop	{r4, r5, r6, pc}
 801d56a:	f640 0098 	movw	r0, #2200	@ 0x898
 801d56e:	bd70      	pop	{r4, r5, r6, pc}
 801d570:	200b      	movs	r0, #11
 801d572:	bd70      	pop	{r4, r5, r6, pc}
 801d574:	f640 0098 	movw	r0, #2200	@ 0x898
 801d578:	4770      	bx	lr
 801d57a:	bf00      	nop

0801d57c <rcl_action_take_result_request>:
 801d57c:	2800      	cmp	r0, #0
 801d57e:	d03a      	beq.n	801d5f6 <rcl_action_take_result_request+0x7a>
 801d580:	b570      	push	{r4, r5, r6, lr}
 801d582:	4604      	mov	r4, r0
 801d584:	6800      	ldr	r0, [r0, #0]
 801d586:	b388      	cbz	r0, 801d5ec <rcl_action_take_result_request+0x70>
 801d588:	460e      	mov	r6, r1
 801d58a:	4615      	mov	r5, r2
 801d58c:	f7fe f9de 	bl	801b94c <rcl_service_is_valid>
 801d590:	b338      	cbz	r0, 801d5e2 <rcl_action_take_result_request+0x66>
 801d592:	6820      	ldr	r0, [r4, #0]
 801d594:	3004      	adds	r0, #4
 801d596:	f7fe f9d9 	bl	801b94c <rcl_service_is_valid>
 801d59a:	b310      	cbz	r0, 801d5e2 <rcl_action_take_result_request+0x66>
 801d59c:	6820      	ldr	r0, [r4, #0]
 801d59e:	3008      	adds	r0, #8
 801d5a0:	f7fe f9d4 	bl	801b94c <rcl_service_is_valid>
 801d5a4:	b1e8      	cbz	r0, 801d5e2 <rcl_action_take_result_request+0x66>
 801d5a6:	6820      	ldr	r0, [r4, #0]
 801d5a8:	300c      	adds	r0, #12
 801d5aa:	f7f6 ff43 	bl	8014434 <rcl_publisher_is_valid>
 801d5ae:	b1c0      	cbz	r0, 801d5e2 <rcl_action_take_result_request+0x66>
 801d5b0:	6820      	ldr	r0, [r4, #0]
 801d5b2:	3010      	adds	r0, #16
 801d5b4:	f7f6 ff3e 	bl	8014434 <rcl_publisher_is_valid>
 801d5b8:	b198      	cbz	r0, 801d5e2 <rcl_action_take_result_request+0x66>
 801d5ba:	b1d5      	cbz	r5, 801d5f2 <rcl_action_take_result_request+0x76>
 801d5bc:	b1ce      	cbz	r6, 801d5f2 <rcl_action_take_result_request+0x76>
 801d5be:	6820      	ldr	r0, [r4, #0]
 801d5c0:	462a      	mov	r2, r5
 801d5c2:	4631      	mov	r1, r6
 801d5c4:	3008      	adds	r0, #8
 801d5c6:	f7fe f969 	bl	801b89c <rcl_take_request>
 801d5ca:	b148      	cbz	r0, 801d5e0 <rcl_action_take_result_request+0x64>
 801d5cc:	280a      	cmp	r0, #10
 801d5ce:	d007      	beq.n	801d5e0 <rcl_action_take_result_request+0x64>
 801d5d0:	f240 2259 	movw	r2, #601	@ 0x259
 801d5d4:	f640 0399 	movw	r3, #2201	@ 0x899
 801d5d8:	4290      	cmp	r0, r2
 801d5da:	bf0c      	ite	eq
 801d5dc:	4618      	moveq	r0, r3
 801d5de:	2001      	movne	r0, #1
 801d5e0:	bd70      	pop	{r4, r5, r6, pc}
 801d5e2:	f7f7 ff85 	bl	80154f0 <rcutils_reset_error>
 801d5e6:	f640 0098 	movw	r0, #2200	@ 0x898
 801d5ea:	bd70      	pop	{r4, r5, r6, pc}
 801d5ec:	f640 0098 	movw	r0, #2200	@ 0x898
 801d5f0:	bd70      	pop	{r4, r5, r6, pc}
 801d5f2:	200b      	movs	r0, #11
 801d5f4:	bd70      	pop	{r4, r5, r6, pc}
 801d5f6:	f640 0098 	movw	r0, #2200	@ 0x898
 801d5fa:	4770      	bx	lr

0801d5fc <rcl_action_take_cancel_request>:
 801d5fc:	2800      	cmp	r0, #0
 801d5fe:	d03a      	beq.n	801d676 <rcl_action_take_cancel_request+0x7a>
 801d600:	b570      	push	{r4, r5, r6, lr}
 801d602:	4604      	mov	r4, r0
 801d604:	6800      	ldr	r0, [r0, #0]
 801d606:	b388      	cbz	r0, 801d66c <rcl_action_take_cancel_request+0x70>
 801d608:	460e      	mov	r6, r1
 801d60a:	4615      	mov	r5, r2
 801d60c:	f7fe f99e 	bl	801b94c <rcl_service_is_valid>
 801d610:	b338      	cbz	r0, 801d662 <rcl_action_take_cancel_request+0x66>
 801d612:	6820      	ldr	r0, [r4, #0]
 801d614:	3004      	adds	r0, #4
 801d616:	f7fe f999 	bl	801b94c <rcl_service_is_valid>
 801d61a:	b310      	cbz	r0, 801d662 <rcl_action_take_cancel_request+0x66>
 801d61c:	6820      	ldr	r0, [r4, #0]
 801d61e:	3008      	adds	r0, #8
 801d620:	f7fe f994 	bl	801b94c <rcl_service_is_valid>
 801d624:	b1e8      	cbz	r0, 801d662 <rcl_action_take_cancel_request+0x66>
 801d626:	6820      	ldr	r0, [r4, #0]
 801d628:	300c      	adds	r0, #12
 801d62a:	f7f6 ff03 	bl	8014434 <rcl_publisher_is_valid>
 801d62e:	b1c0      	cbz	r0, 801d662 <rcl_action_take_cancel_request+0x66>
 801d630:	6820      	ldr	r0, [r4, #0]
 801d632:	3010      	adds	r0, #16
 801d634:	f7f6 fefe 	bl	8014434 <rcl_publisher_is_valid>
 801d638:	b198      	cbz	r0, 801d662 <rcl_action_take_cancel_request+0x66>
 801d63a:	b1d5      	cbz	r5, 801d672 <rcl_action_take_cancel_request+0x76>
 801d63c:	b1ce      	cbz	r6, 801d672 <rcl_action_take_cancel_request+0x76>
 801d63e:	6820      	ldr	r0, [r4, #0]
 801d640:	462a      	mov	r2, r5
 801d642:	4631      	mov	r1, r6
 801d644:	3004      	adds	r0, #4
 801d646:	f7fe f929 	bl	801b89c <rcl_take_request>
 801d64a:	b148      	cbz	r0, 801d660 <rcl_action_take_cancel_request+0x64>
 801d64c:	280a      	cmp	r0, #10
 801d64e:	d007      	beq.n	801d660 <rcl_action_take_cancel_request+0x64>
 801d650:	f240 2259 	movw	r2, #601	@ 0x259
 801d654:	f640 0399 	movw	r3, #2201	@ 0x899
 801d658:	4290      	cmp	r0, r2
 801d65a:	bf0c      	ite	eq
 801d65c:	4618      	moveq	r0, r3
 801d65e:	2001      	movne	r0, #1
 801d660:	bd70      	pop	{r4, r5, r6, pc}
 801d662:	f7f7 ff45 	bl	80154f0 <rcutils_reset_error>
 801d666:	f640 0098 	movw	r0, #2200	@ 0x898
 801d66a:	bd70      	pop	{r4, r5, r6, pc}
 801d66c:	f640 0098 	movw	r0, #2200	@ 0x898
 801d670:	bd70      	pop	{r4, r5, r6, pc}
 801d672:	200b      	movs	r0, #11
 801d674:	bd70      	pop	{r4, r5, r6, pc}
 801d676:	f640 0098 	movw	r0, #2200	@ 0x898
 801d67a:	4770      	bx	lr

0801d67c <rcl_action_send_cancel_response>:
 801d67c:	b398      	cbz	r0, 801d6e6 <rcl_action_send_cancel_response+0x6a>
 801d67e:	b570      	push	{r4, r5, r6, lr}
 801d680:	4604      	mov	r4, r0
 801d682:	6800      	ldr	r0, [r0, #0]
 801d684:	b350      	cbz	r0, 801d6dc <rcl_action_send_cancel_response+0x60>
 801d686:	460e      	mov	r6, r1
 801d688:	4615      	mov	r5, r2
 801d68a:	f7fe f95f 	bl	801b94c <rcl_service_is_valid>
 801d68e:	b300      	cbz	r0, 801d6d2 <rcl_action_send_cancel_response+0x56>
 801d690:	6820      	ldr	r0, [r4, #0]
 801d692:	3004      	adds	r0, #4
 801d694:	f7fe f95a 	bl	801b94c <rcl_service_is_valid>
 801d698:	b1d8      	cbz	r0, 801d6d2 <rcl_action_send_cancel_response+0x56>
 801d69a:	6820      	ldr	r0, [r4, #0]
 801d69c:	3008      	adds	r0, #8
 801d69e:	f7fe f955 	bl	801b94c <rcl_service_is_valid>
 801d6a2:	b1b0      	cbz	r0, 801d6d2 <rcl_action_send_cancel_response+0x56>
 801d6a4:	6820      	ldr	r0, [r4, #0]
 801d6a6:	300c      	adds	r0, #12
 801d6a8:	f7f6 fec4 	bl	8014434 <rcl_publisher_is_valid>
 801d6ac:	b188      	cbz	r0, 801d6d2 <rcl_action_send_cancel_response+0x56>
 801d6ae:	6820      	ldr	r0, [r4, #0]
 801d6b0:	3010      	adds	r0, #16
 801d6b2:	f7f6 febf 	bl	8014434 <rcl_publisher_is_valid>
 801d6b6:	b160      	cbz	r0, 801d6d2 <rcl_action_send_cancel_response+0x56>
 801d6b8:	b19d      	cbz	r5, 801d6e2 <rcl_action_send_cancel_response+0x66>
 801d6ba:	b196      	cbz	r6, 801d6e2 <rcl_action_send_cancel_response+0x66>
 801d6bc:	6820      	ldr	r0, [r4, #0]
 801d6be:	462a      	mov	r2, r5
 801d6c0:	4631      	mov	r1, r6
 801d6c2:	3004      	adds	r0, #4
 801d6c4:	f7fe f92a 	bl	801b91c <rcl_send_response>
 801d6c8:	b110      	cbz	r0, 801d6d0 <rcl_action_send_cancel_response+0x54>
 801d6ca:	2802      	cmp	r0, #2
 801d6cc:	bf18      	it	ne
 801d6ce:	2001      	movne	r0, #1
 801d6d0:	bd70      	pop	{r4, r5, r6, pc}
 801d6d2:	f7f7 ff0d 	bl	80154f0 <rcutils_reset_error>
 801d6d6:	f640 0098 	movw	r0, #2200	@ 0x898
 801d6da:	bd70      	pop	{r4, r5, r6, pc}
 801d6dc:	f640 0098 	movw	r0, #2200	@ 0x898
 801d6e0:	bd70      	pop	{r4, r5, r6, pc}
 801d6e2:	200b      	movs	r0, #11
 801d6e4:	bd70      	pop	{r4, r5, r6, pc}
 801d6e6:	f640 0098 	movw	r0, #2200	@ 0x898
 801d6ea:	4770      	bx	lr

0801d6ec <rcl_action_wait_set_add_action_server>:
 801d6ec:	2800      	cmp	r0, #0
 801d6ee:	d04d      	beq.n	801d78c <rcl_action_wait_set_add_action_server+0xa0>
 801d6f0:	b570      	push	{r4, r5, r6, lr}
 801d6f2:	460c      	mov	r4, r1
 801d6f4:	b159      	cbz	r1, 801d70e <rcl_action_wait_set_add_action_server+0x22>
 801d6f6:	4605      	mov	r5, r0
 801d6f8:	6808      	ldr	r0, [r1, #0]
 801d6fa:	b140      	cbz	r0, 801d70e <rcl_action_wait_set_add_action_server+0x22>
 801d6fc:	4616      	mov	r6, r2
 801d6fe:	f7fe f925 	bl	801b94c <rcl_service_is_valid>
 801d702:	b120      	cbz	r0, 801d70e <rcl_action_wait_set_add_action_server+0x22>
 801d704:	6820      	ldr	r0, [r4, #0]
 801d706:	3004      	adds	r0, #4
 801d708:	f7fe f920 	bl	801b94c <rcl_service_is_valid>
 801d70c:	b910      	cbnz	r0, 801d714 <rcl_action_wait_set_add_action_server+0x28>
 801d70e:	f640 0098 	movw	r0, #2200	@ 0x898
 801d712:	bd70      	pop	{r4, r5, r6, pc}
 801d714:	6820      	ldr	r0, [r4, #0]
 801d716:	3008      	adds	r0, #8
 801d718:	f7fe f918 	bl	801b94c <rcl_service_is_valid>
 801d71c:	2800      	cmp	r0, #0
 801d71e:	d0f6      	beq.n	801d70e <rcl_action_wait_set_add_action_server+0x22>
 801d720:	6820      	ldr	r0, [r4, #0]
 801d722:	300c      	adds	r0, #12
 801d724:	f7f6 fe9e 	bl	8014464 <rcl_publisher_is_valid_except_context>
 801d728:	2800      	cmp	r0, #0
 801d72a:	d0f0      	beq.n	801d70e <rcl_action_wait_set_add_action_server+0x22>
 801d72c:	6820      	ldr	r0, [r4, #0]
 801d72e:	3010      	adds	r0, #16
 801d730:	f7f6 fe98 	bl	8014464 <rcl_publisher_is_valid_except_context>
 801d734:	2800      	cmp	r0, #0
 801d736:	d0ea      	beq.n	801d70e <rcl_action_wait_set_add_action_server+0x22>
 801d738:	6821      	ldr	r1, [r4, #0]
 801d73a:	4628      	mov	r0, r5
 801d73c:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801d740:	f7ff fad0 	bl	801cce4 <rcl_wait_set_add_service>
 801d744:	2800      	cmp	r0, #0
 801d746:	d1e4      	bne.n	801d712 <rcl_action_wait_set_add_action_server+0x26>
 801d748:	6821      	ldr	r1, [r4, #0]
 801d74a:	4628      	mov	r0, r5
 801d74c:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801d750:	3104      	adds	r1, #4
 801d752:	f7ff fac7 	bl	801cce4 <rcl_wait_set_add_service>
 801d756:	2800      	cmp	r0, #0
 801d758:	d1db      	bne.n	801d712 <rcl_action_wait_set_add_action_server+0x26>
 801d75a:	6821      	ldr	r1, [r4, #0]
 801d75c:	4628      	mov	r0, r5
 801d75e:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801d762:	3108      	adds	r1, #8
 801d764:	f7ff fabe 	bl	801cce4 <rcl_wait_set_add_service>
 801d768:	2800      	cmp	r0, #0
 801d76a:	d1d2      	bne.n	801d712 <rcl_action_wait_set_add_action_server+0x26>
 801d76c:	6821      	ldr	r1, [r4, #0]
 801d76e:	4628      	mov	r0, r5
 801d770:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 801d774:	3114      	adds	r1, #20
 801d776:	f7ff fa59 	bl	801cc2c <rcl_wait_set_add_timer>
 801d77a:	2800      	cmp	r0, #0
 801d77c:	d1c9      	bne.n	801d712 <rcl_action_wait_set_add_action_server+0x26>
 801d77e:	2e00      	cmp	r6, #0
 801d780:	d0c7      	beq.n	801d712 <rcl_action_wait_set_add_action_server+0x26>
 801d782:	6823      	ldr	r3, [r4, #0]
 801d784:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801d788:	6033      	str	r3, [r6, #0]
 801d78a:	bd70      	pop	{r4, r5, r6, pc}
 801d78c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801d790:	4770      	bx	lr
 801d792:	bf00      	nop

0801d794 <rcl_action_server_wait_set_get_entities_ready>:
 801d794:	2800      	cmp	r0, #0
 801d796:	d067      	beq.n	801d868 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 801d798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d79c:	460c      	mov	r4, r1
 801d79e:	b161      	cbz	r1, 801d7ba <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d7a0:	4605      	mov	r5, r0
 801d7a2:	6808      	ldr	r0, [r1, #0]
 801d7a4:	b148      	cbz	r0, 801d7ba <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d7a6:	4616      	mov	r6, r2
 801d7a8:	4698      	mov	r8, r3
 801d7aa:	f7fe f8cf 	bl	801b94c <rcl_service_is_valid>
 801d7ae:	b120      	cbz	r0, 801d7ba <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d7b0:	6820      	ldr	r0, [r4, #0]
 801d7b2:	3004      	adds	r0, #4
 801d7b4:	f7fe f8ca 	bl	801b94c <rcl_service_is_valid>
 801d7b8:	b918      	cbnz	r0, 801d7c2 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801d7ba:	f640 0098 	movw	r0, #2200	@ 0x898
 801d7be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d7c2:	6820      	ldr	r0, [r4, #0]
 801d7c4:	3008      	adds	r0, #8
 801d7c6:	f7fe f8c1 	bl	801b94c <rcl_service_is_valid>
 801d7ca:	2800      	cmp	r0, #0
 801d7cc:	d0f5      	beq.n	801d7ba <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d7ce:	6820      	ldr	r0, [r4, #0]
 801d7d0:	300c      	adds	r0, #12
 801d7d2:	f7f6 fe47 	bl	8014464 <rcl_publisher_is_valid_except_context>
 801d7d6:	2800      	cmp	r0, #0
 801d7d8:	d0ef      	beq.n	801d7ba <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d7da:	6820      	ldr	r0, [r4, #0]
 801d7dc:	3010      	adds	r0, #16
 801d7de:	f7f6 fe41 	bl	8014464 <rcl_publisher_is_valid_except_context>
 801d7e2:	2800      	cmp	r0, #0
 801d7e4:	d0e9      	beq.n	801d7ba <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d7e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d7ea:	2a00      	cmp	r2, #0
 801d7ec:	bf18      	it	ne
 801d7ee:	2b00      	cmpne	r3, #0
 801d7f0:	bf0c      	ite	eq
 801d7f2:	2101      	moveq	r1, #1
 801d7f4:	2100      	movne	r1, #0
 801d7f6:	f1b8 0f00 	cmp.w	r8, #0
 801d7fa:	bf08      	it	eq
 801d7fc:	f041 0101 	orreq.w	r1, r1, #1
 801d800:	bba9      	cbnz	r1, 801d86e <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d802:	b3a6      	cbz	r6, 801d86e <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d804:	6821      	ldr	r1, [r4, #0]
 801d806:	2000      	movs	r0, #0
 801d808:	692c      	ldr	r4, [r5, #16]
 801d80a:	f8d1 21e8 	ldr.w	r2, [r1, #488]	@ 0x1e8
 801d80e:	6a2f      	ldr	r7, [r5, #32]
 801d810:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d814:	f8d1 41dc 	ldr.w	r4, [r1, #476]	@ 0x1dc
 801d818:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 801d81c:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 801d820:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 801d824:	1a64      	subs	r4, r4, r1
 801d826:	f8d1 31e4 	ldr.w	r3, [r1, #484]	@ 0x1e4
 801d82a:	fab4 f484 	clz	r4, r4
 801d82e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801d832:	0964      	lsrs	r4, r4, #5
 801d834:	7034      	strb	r4, [r6, #0]
 801d836:	1d0c      	adds	r4, r1, #4
 801d838:	1b2c      	subs	r4, r5, r4
 801d83a:	fab4 f484 	clz	r4, r4
 801d83e:	0964      	lsrs	r4, r4, #5
 801d840:	f888 4000 	strb.w	r4, [r8]
 801d844:	f101 0408 	add.w	r4, r1, #8
 801d848:	1b1b      	subs	r3, r3, r4
 801d84a:	9c06      	ldr	r4, [sp, #24]
 801d84c:	fab3 f383 	clz	r3, r3
 801d850:	095b      	lsrs	r3, r3, #5
 801d852:	7023      	strb	r3, [r4, #0]
 801d854:	f101 0314 	add.w	r3, r1, #20
 801d858:	1ad3      	subs	r3, r2, r3
 801d85a:	9a07      	ldr	r2, [sp, #28]
 801d85c:	fab3 f383 	clz	r3, r3
 801d860:	095b      	lsrs	r3, r3, #5
 801d862:	7013      	strb	r3, [r2, #0]
 801d864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d868:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801d86c:	4770      	bx	lr
 801d86e:	200b      	movs	r0, #11
 801d870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d874 <_execute_event_handler>:
 801d874:	2002      	movs	r0, #2
 801d876:	4770      	bx	lr

0801d878 <_cancel_goal_event_handler>:
 801d878:	2003      	movs	r0, #3
 801d87a:	4770      	bx	lr

0801d87c <_succeed_event_handler>:
 801d87c:	2004      	movs	r0, #4
 801d87e:	4770      	bx	lr

0801d880 <_abort_event_handler>:
 801d880:	2006      	movs	r0, #6
 801d882:	4770      	bx	lr

0801d884 <_canceled_event_handler>:
 801d884:	2005      	movs	r0, #5
 801d886:	4770      	bx	lr

0801d888 <rcl_action_transition_goal_state>:
 801d888:	b2c2      	uxtb	r2, r0
 801d88a:	2a06      	cmp	r2, #6
 801d88c:	d810      	bhi.n	801d8b0 <rcl_action_transition_goal_state+0x28>
 801d88e:	2904      	cmp	r1, #4
 801d890:	d80e      	bhi.n	801d8b0 <rcl_action_transition_goal_state+0x28>
 801d892:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801d896:	b410      	push	{r4}
 801d898:	1853      	adds	r3, r2, r1
 801d89a:	4c06      	ldr	r4, [pc, #24]	@ (801d8b4 <rcl_action_transition_goal_state+0x2c>)
 801d89c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801d8a0:	b113      	cbz	r3, 801d8a8 <rcl_action_transition_goal_state+0x20>
 801d8a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d8a6:	4718      	bx	r3
 801d8a8:	2000      	movs	r0, #0
 801d8aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d8ae:	4770      	bx	lr
 801d8b0:	2000      	movs	r0, #0
 801d8b2:	4770      	bx	lr
 801d8b4:	08025510 	.word	0x08025510

0801d8b8 <rcl_action_get_zero_initialized_cancel_response>:
 801d8b8:	b510      	push	{r4, lr}
 801d8ba:	4c07      	ldr	r4, [pc, #28]	@ (801d8d8 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801d8bc:	4686      	mov	lr, r0
 801d8be:	4684      	mov	ip, r0
 801d8c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d8c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d8c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d8c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d8cc:	6823      	ldr	r3, [r4, #0]
 801d8ce:	4670      	mov	r0, lr
 801d8d0:	f8cc 3000 	str.w	r3, [ip]
 801d8d4:	bd10      	pop	{r4, pc}
 801d8d6:	bf00      	nop
 801d8d8:	0802559c 	.word	0x0802559c

0801d8dc <rclc_action_send_result_request>:
 801d8dc:	b1d0      	cbz	r0, 801d914 <rclc_action_send_result_request+0x38>
 801d8de:	4684      	mov	ip, r0
 801d8e0:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801d8e4:	b500      	push	{lr}
 801d8e6:	b087      	sub	sp, #28
 801d8e8:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801d8ec:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801d8f0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801d8f4:	f10d 0e08 	add.w	lr, sp, #8
 801d8f8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801d8fc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801d900:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801d904:	a902      	add	r1, sp, #8
 801d906:	3010      	adds	r0, #16
 801d908:	f7ff fbca 	bl	801d0a0 <rcl_action_send_result_request>
 801d90c:	b920      	cbnz	r0, 801d918 <rclc_action_send_result_request+0x3c>
 801d90e:	b007      	add	sp, #28
 801d910:	f85d fb04 	ldr.w	pc, [sp], #4
 801d914:	200b      	movs	r0, #11
 801d916:	4770      	bx	lr
 801d918:	9001      	str	r0, [sp, #4]
 801d91a:	f7f7 fde9 	bl	80154f0 <rcutils_reset_error>
 801d91e:	9801      	ldr	r0, [sp, #4]
 801d920:	b007      	add	sp, #28
 801d922:	f85d fb04 	ldr.w	pc, [sp], #4
 801d926:	bf00      	nop

0801d928 <rclc_action_take_goal_handle>:
 801d928:	b160      	cbz	r0, 801d944 <rclc_action_take_goal_handle+0x1c>
 801d92a:	6883      	ldr	r3, [r0, #8]
 801d92c:	b143      	cbz	r3, 801d940 <rclc_action_take_goal_handle+0x18>
 801d92e:	6819      	ldr	r1, [r3, #0]
 801d930:	2200      	movs	r2, #0
 801d932:	6081      	str	r1, [r0, #8]
 801d934:	721a      	strb	r2, [r3, #8]
 801d936:	68c1      	ldr	r1, [r0, #12]
 801d938:	621a      	str	r2, [r3, #32]
 801d93a:	849a      	strh	r2, [r3, #36]	@ 0x24
 801d93c:	6019      	str	r1, [r3, #0]
 801d93e:	60c3      	str	r3, [r0, #12]
 801d940:	4618      	mov	r0, r3
 801d942:	4770      	bx	lr
 801d944:	4603      	mov	r3, r0
 801d946:	e7fb      	b.n	801d940 <rclc_action_take_goal_handle+0x18>

0801d948 <rclc_action_remove_used_goal_handle>:
 801d948:	b180      	cbz	r0, 801d96c <rclc_action_remove_used_goal_handle+0x24>
 801d94a:	b179      	cbz	r1, 801d96c <rclc_action_remove_used_goal_handle+0x24>
 801d94c:	68c3      	ldr	r3, [r0, #12]
 801d94e:	4299      	cmp	r1, r3
 801d950:	d00d      	beq.n	801d96e <rclc_action_remove_used_goal_handle+0x26>
 801d952:	b12b      	cbz	r3, 801d960 <rclc_action_remove_used_goal_handle+0x18>
 801d954:	681a      	ldr	r2, [r3, #0]
 801d956:	4291      	cmp	r1, r2
 801d958:	d003      	beq.n	801d962 <rclc_action_remove_used_goal_handle+0x1a>
 801d95a:	4613      	mov	r3, r2
 801d95c:	2b00      	cmp	r3, #0
 801d95e:	d1f9      	bne.n	801d954 <rclc_action_remove_used_goal_handle+0xc>
 801d960:	4770      	bx	lr
 801d962:	680a      	ldr	r2, [r1, #0]
 801d964:	601a      	str	r2, [r3, #0]
 801d966:	6883      	ldr	r3, [r0, #8]
 801d968:	600b      	str	r3, [r1, #0]
 801d96a:	6081      	str	r1, [r0, #8]
 801d96c:	4770      	bx	lr
 801d96e:	680b      	ldr	r3, [r1, #0]
 801d970:	60c3      	str	r3, [r0, #12]
 801d972:	e7f8      	b.n	801d966 <rclc_action_remove_used_goal_handle+0x1e>

0801d974 <rclc_action_find_goal_handle_by_uuid>:
 801d974:	b538      	push	{r3, r4, r5, lr}
 801d976:	b181      	cbz	r1, 801d99a <rclc_action_find_goal_handle_by_uuid+0x26>
 801d978:	b178      	cbz	r0, 801d99a <rclc_action_find_goal_handle_by_uuid+0x26>
 801d97a:	68c4      	ldr	r4, [r0, #12]
 801d97c:	460d      	mov	r5, r1
 801d97e:	b914      	cbnz	r4, 801d986 <rclc_action_find_goal_handle_by_uuid+0x12>
 801d980:	e009      	b.n	801d996 <rclc_action_find_goal_handle_by_uuid+0x22>
 801d982:	6824      	ldr	r4, [r4, #0]
 801d984:	b13c      	cbz	r4, 801d996 <rclc_action_find_goal_handle_by_uuid+0x22>
 801d986:	f104 0009 	add.w	r0, r4, #9
 801d98a:	2210      	movs	r2, #16
 801d98c:	4629      	mov	r1, r5
 801d98e:	f004 fc65 	bl	802225c <memcmp>
 801d992:	2800      	cmp	r0, #0
 801d994:	d1f5      	bne.n	801d982 <rclc_action_find_goal_handle_by_uuid+0xe>
 801d996:	4620      	mov	r0, r4
 801d998:	bd38      	pop	{r3, r4, r5, pc}
 801d99a:	2400      	movs	r4, #0
 801d99c:	4620      	mov	r0, r4
 801d99e:	bd38      	pop	{r3, r4, r5, pc}

0801d9a0 <rclc_action_find_first_handle_by_status>:
 801d9a0:	b140      	cbz	r0, 801d9b4 <rclc_action_find_first_handle_by_status+0x14>
 801d9a2:	68c0      	ldr	r0, [r0, #12]
 801d9a4:	b910      	cbnz	r0, 801d9ac <rclc_action_find_first_handle_by_status+0xc>
 801d9a6:	e005      	b.n	801d9b4 <rclc_action_find_first_handle_by_status+0x14>
 801d9a8:	6800      	ldr	r0, [r0, #0]
 801d9aa:	b118      	cbz	r0, 801d9b4 <rclc_action_find_first_handle_by_status+0x14>
 801d9ac:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801d9b0:	428b      	cmp	r3, r1
 801d9b2:	d1f9      	bne.n	801d9a8 <rclc_action_find_first_handle_by_status+0x8>
 801d9b4:	4770      	bx	lr
 801d9b6:	bf00      	nop

0801d9b8 <rclc_action_find_first_terminated_handle>:
 801d9b8:	b140      	cbz	r0, 801d9cc <rclc_action_find_first_terminated_handle+0x14>
 801d9ba:	68c0      	ldr	r0, [r0, #12]
 801d9bc:	b910      	cbnz	r0, 801d9c4 <rclc_action_find_first_terminated_handle+0xc>
 801d9be:	e005      	b.n	801d9cc <rclc_action_find_first_terminated_handle+0x14>
 801d9c0:	6800      	ldr	r0, [r0, #0]
 801d9c2:	b118      	cbz	r0, 801d9cc <rclc_action_find_first_terminated_handle+0x14>
 801d9c4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801d9c8:	2b03      	cmp	r3, #3
 801d9ca:	ddf9      	ble.n	801d9c0 <rclc_action_find_first_terminated_handle+0x8>
 801d9cc:	4770      	bx	lr
 801d9ce:	bf00      	nop

0801d9d0 <rclc_action_find_handle_by_goal_request_sequence_number>:
 801d9d0:	b170      	cbz	r0, 801d9f0 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801d9d2:	68c0      	ldr	r0, [r0, #12]
 801d9d4:	b160      	cbz	r0, 801d9f0 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801d9d6:	b410      	push	{r4}
 801d9d8:	e001      	b.n	801d9de <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801d9da:	6800      	ldr	r0, [r0, #0]
 801d9dc:	b128      	cbz	r0, 801d9ea <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801d9de:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801d9e2:	4299      	cmp	r1, r3
 801d9e4:	bf08      	it	eq
 801d9e6:	4294      	cmpeq	r4, r2
 801d9e8:	d1f7      	bne.n	801d9da <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801d9ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d9ee:	4770      	bx	lr
 801d9f0:	4770      	bx	lr
 801d9f2:	bf00      	nop

0801d9f4 <rclc_action_find_handle_by_result_request_sequence_number>:
 801d9f4:	b170      	cbz	r0, 801da14 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801d9f6:	68c0      	ldr	r0, [r0, #12]
 801d9f8:	b160      	cbz	r0, 801da14 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801d9fa:	b410      	push	{r4}
 801d9fc:	e001      	b.n	801da02 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801d9fe:	6800      	ldr	r0, [r0, #0]
 801da00:	b128      	cbz	r0, 801da0e <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801da02:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801da06:	4299      	cmp	r1, r3
 801da08:	bf08      	it	eq
 801da0a:	4294      	cmpeq	r4, r2
 801da0c:	d1f7      	bne.n	801d9fe <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801da0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da12:	4770      	bx	lr
 801da14:	4770      	bx	lr
 801da16:	bf00      	nop

0801da18 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801da18:	b170      	cbz	r0, 801da38 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801da1a:	68c0      	ldr	r0, [r0, #12]
 801da1c:	b160      	cbz	r0, 801da38 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801da1e:	b410      	push	{r4}
 801da20:	e001      	b.n	801da26 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801da22:	6800      	ldr	r0, [r0, #0]
 801da24:	b128      	cbz	r0, 801da32 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801da26:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801da2a:	4299      	cmp	r1, r3
 801da2c:	bf08      	it	eq
 801da2e:	4294      	cmpeq	r4, r2
 801da30:	d1f7      	bne.n	801da22 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801da32:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da36:	4770      	bx	lr
 801da38:	4770      	bx	lr
 801da3a:	bf00      	nop

0801da3c <rclc_action_find_first_handle_with_goal_response>:
 801da3c:	b140      	cbz	r0, 801da50 <rclc_action_find_first_handle_with_goal_response+0x14>
 801da3e:	68c0      	ldr	r0, [r0, #12]
 801da40:	b910      	cbnz	r0, 801da48 <rclc_action_find_first_handle_with_goal_response+0xc>
 801da42:	e005      	b.n	801da50 <rclc_action_find_first_handle_with_goal_response+0x14>
 801da44:	6800      	ldr	r0, [r0, #0]
 801da46:	b118      	cbz	r0, 801da50 <rclc_action_find_first_handle_with_goal_response+0x14>
 801da48:	f890 3020 	ldrb.w	r3, [r0, #32]
 801da4c:	2b00      	cmp	r3, #0
 801da4e:	d0f9      	beq.n	801da44 <rclc_action_find_first_handle_with_goal_response+0x8>
 801da50:	4770      	bx	lr
 801da52:	bf00      	nop

0801da54 <rclc_action_find_first_handle_with_result_response>:
 801da54:	b140      	cbz	r0, 801da68 <rclc_action_find_first_handle_with_result_response+0x14>
 801da56:	68c0      	ldr	r0, [r0, #12]
 801da58:	b910      	cbnz	r0, 801da60 <rclc_action_find_first_handle_with_result_response+0xc>
 801da5a:	e005      	b.n	801da68 <rclc_action_find_first_handle_with_result_response+0x14>
 801da5c:	6800      	ldr	r0, [r0, #0]
 801da5e:	b118      	cbz	r0, 801da68 <rclc_action_find_first_handle_with_result_response+0x14>
 801da60:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 801da64:	2b00      	cmp	r3, #0
 801da66:	d0f9      	beq.n	801da5c <rclc_action_find_first_handle_with_result_response+0x8>
 801da68:	4770      	bx	lr
 801da6a:	bf00      	nop

0801da6c <rclc_action_server_response_goal_request>:
 801da6c:	b198      	cbz	r0, 801da96 <rclc_action_server_response_goal_request+0x2a>
 801da6e:	2200      	movs	r2, #0
 801da70:	460b      	mov	r3, r1
 801da72:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801da76:	b510      	push	{r4, lr}
 801da78:	6844      	ldr	r4, [r0, #4]
 801da7a:	b086      	sub	sp, #24
 801da7c:	f104 0010 	add.w	r0, r4, #16
 801da80:	9205      	str	r2, [sp, #20]
 801da82:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801da86:	aa03      	add	r2, sp, #12
 801da88:	f88d 300c 	strb.w	r3, [sp, #12]
 801da8c:	f7ff fd3e 	bl	801d50c <rcl_action_send_goal_response>
 801da90:	b918      	cbnz	r0, 801da9a <rclc_action_server_response_goal_request+0x2e>
 801da92:	b006      	add	sp, #24
 801da94:	bd10      	pop	{r4, pc}
 801da96:	200b      	movs	r0, #11
 801da98:	4770      	bx	lr
 801da9a:	9001      	str	r0, [sp, #4]
 801da9c:	f7f7 fd28 	bl	80154f0 <rcutils_reset_error>
 801daa0:	9801      	ldr	r0, [sp, #4]
 801daa2:	b006      	add	sp, #24
 801daa4:	bd10      	pop	{r4, pc}
 801daa6:	bf00      	nop

0801daa8 <rclc_action_server_goal_cancel_accept>:
 801daa8:	b310      	cbz	r0, 801daf0 <rclc_action_server_goal_cancel_accept+0x48>
 801daaa:	b510      	push	{r4, lr}
 801daac:	b090      	sub	sp, #64	@ 0x40
 801daae:	4604      	mov	r4, r0
 801dab0:	a806      	add	r0, sp, #24
 801dab2:	f7ff ff01 	bl	801d8b8 <rcl_action_get_zero_initialized_cancel_response>
 801dab6:	2300      	movs	r3, #0
 801dab8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801dabc:	46ec      	mov	ip, sp
 801dabe:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801dac2:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801dac6:	f88d 3018 	strb.w	r3, [sp, #24]
 801daca:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801dace:	f8cd d01c 	str.w	sp, [sp, #28]
 801dad2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801dad6:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801daf8 <rclc_action_server_goal_cancel_accept+0x50>
 801dada:	6860      	ldr	r0, [r4, #4]
 801dadc:	aa06      	add	r2, sp, #24
 801dade:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801dae2:	3010      	adds	r0, #16
 801dae4:	ed8d 7b08 	vstr	d7, [sp, #32]
 801dae8:	f7ff fdc8 	bl	801d67c <rcl_action_send_cancel_response>
 801daec:	b010      	add	sp, #64	@ 0x40
 801daee:	bd10      	pop	{r4, pc}
 801daf0:	200b      	movs	r0, #11
 801daf2:	4770      	bx	lr
 801daf4:	f3af 8000 	nop.w
 801daf8:	00000001 	.word	0x00000001
 801dafc:	00000001 	.word	0x00000001

0801db00 <rclc_action_server_goal_cancel_reject>:
 801db00:	b082      	sub	sp, #8
 801db02:	b530      	push	{r4, r5, lr}
 801db04:	b08b      	sub	sp, #44	@ 0x2c
 801db06:	ac0e      	add	r4, sp, #56	@ 0x38
 801db08:	e884 000c 	stmia.w	r4, {r2, r3}
 801db0c:	b188      	cbz	r0, 801db32 <rclc_action_server_goal_cancel_reject+0x32>
 801db0e:	4604      	mov	r4, r0
 801db10:	a801      	add	r0, sp, #4
 801db12:	460d      	mov	r5, r1
 801db14:	f7ff fed0 	bl	801d8b8 <rcl_action_get_zero_initialized_cancel_response>
 801db18:	aa01      	add	r2, sp, #4
 801db1a:	a90e      	add	r1, sp, #56	@ 0x38
 801db1c:	f104 0010 	add.w	r0, r4, #16
 801db20:	f88d 5004 	strb.w	r5, [sp, #4]
 801db24:	f7ff fdaa 	bl	801d67c <rcl_action_send_cancel_response>
 801db28:	b00b      	add	sp, #44	@ 0x2c
 801db2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801db2e:	b002      	add	sp, #8
 801db30:	4770      	bx	lr
 801db32:	200b      	movs	r0, #11
 801db34:	b00b      	add	sp, #44	@ 0x2c
 801db36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801db3a:	b002      	add	sp, #8
 801db3c:	4770      	bx	lr
 801db3e:	bf00      	nop

0801db40 <__atomic_load_8>:
 801db40:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801db44:	4a16      	ldr	r2, [pc, #88]	@ (801dba0 <__atomic_load_8+0x60>)
 801db46:	4b17      	ldr	r3, [pc, #92]	@ (801dba4 <__atomic_load_8+0x64>)
 801db48:	f04f 0c01 	mov.w	ip, #1
 801db4c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 801db50:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801db54:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801db58:	fb02 f101 	mul.w	r1, r2, r1
 801db5c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801db60:	fba3 2301 	umull	r2, r3, r3, r1
 801db64:	091b      	lsrs	r3, r3, #4
 801db66:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801db6a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801db6e:	b4d0      	push	{r4, r6, r7}
 801db70:	1ac9      	subs	r1, r1, r3
 801db72:	4c0d      	ldr	r4, [pc, #52]	@ (801dba8 <__atomic_load_8+0x68>)
 801db74:	1862      	adds	r2, r4, r1
 801db76:	e8d2 3f4f 	ldrexb	r3, [r2]
 801db7a:	e8c2 cf46 	strexb	r6, ip, [r2]
 801db7e:	2e00      	cmp	r6, #0
 801db80:	d1f9      	bne.n	801db76 <__atomic_load_8+0x36>
 801db82:	b2db      	uxtb	r3, r3
 801db84:	f3bf 8f5b 	dmb	ish
 801db88:	2b00      	cmp	r3, #0
 801db8a:	d1f4      	bne.n	801db76 <__atomic_load_8+0x36>
 801db8c:	e9d0 6700 	ldrd	r6, r7, [r0]
 801db90:	f3bf 8f5b 	dmb	ish
 801db94:	5463      	strb	r3, [r4, r1]
 801db96:	4630      	mov	r0, r6
 801db98:	4639      	mov	r1, r7
 801db9a:	bcd0      	pop	{r4, r6, r7}
 801db9c:	4770      	bx	lr
 801db9e:	bf00      	nop
 801dba0:	27d4eb2d 	.word	0x27d4eb2d
 801dba4:	b21642c9 	.word	0xb21642c9
 801dba8:	24069358 	.word	0x24069358

0801dbac <__atomic_store_8>:
 801dbac:	b570      	push	{r4, r5, r6, lr}
 801dbae:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 801dbb2:	4916      	ldr	r1, [pc, #88]	@ (801dc0c <__atomic_store_8+0x60>)
 801dbb4:	4c16      	ldr	r4, [pc, #88]	@ (801dc10 <__atomic_store_8+0x64>)
 801dbb6:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 801dbba:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801dbbe:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801dbc2:	fb01 fe0e 	mul.w	lr, r1, lr
 801dbc6:	4913      	ldr	r1, [pc, #76]	@ (801dc14 <__atomic_store_8+0x68>)
 801dbc8:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 801dbcc:	fba1 510e 	umull	r5, r1, r1, lr
 801dbd0:	f04f 0501 	mov.w	r5, #1
 801dbd4:	0909      	lsrs	r1, r1, #4
 801dbd6:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801dbda:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 801dbde:	ebae 0e01 	sub.w	lr, lr, r1
 801dbe2:	eb04 0c0e 	add.w	ip, r4, lr
 801dbe6:	e8dc 1f4f 	ldrexb	r1, [ip]
 801dbea:	e8cc 5f46 	strexb	r6, r5, [ip]
 801dbee:	2e00      	cmp	r6, #0
 801dbf0:	d1f9      	bne.n	801dbe6 <__atomic_store_8+0x3a>
 801dbf2:	b2c9      	uxtb	r1, r1
 801dbf4:	f3bf 8f5b 	dmb	ish
 801dbf8:	2900      	cmp	r1, #0
 801dbfa:	d1f4      	bne.n	801dbe6 <__atomic_store_8+0x3a>
 801dbfc:	e9c0 2300 	strd	r2, r3, [r0]
 801dc00:	f3bf 8f5b 	dmb	ish
 801dc04:	f804 100e 	strb.w	r1, [r4, lr]
 801dc08:	bd70      	pop	{r4, r5, r6, pc}
 801dc0a:	bf00      	nop
 801dc0c:	27d4eb2d 	.word	0x27d4eb2d
 801dc10:	24069358 	.word	0x24069358
 801dc14:	b21642c9 	.word	0xb21642c9

0801dc18 <__atomic_exchange_8>:
 801dc18:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801dc1c:	4917      	ldr	r1, [pc, #92]	@ (801dc7c <__atomic_exchange_8+0x64>)
 801dc1e:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 801dc22:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801dc26:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801dc2a:	fb01 fc0c 	mul.w	ip, r1, ip
 801dc2e:	4914      	ldr	r1, [pc, #80]	@ (801dc80 <__atomic_exchange_8+0x68>)
 801dc30:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801dc34:	b570      	push	{r4, r5, r6, lr}
 801dc36:	4686      	mov	lr, r0
 801dc38:	fba1 010c 	umull	r0, r1, r1, ip
 801dc3c:	4d11      	ldr	r5, [pc, #68]	@ (801dc84 <__atomic_exchange_8+0x6c>)
 801dc3e:	f04f 0001 	mov.w	r0, #1
 801dc42:	0909      	lsrs	r1, r1, #4
 801dc44:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801dc48:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 801dc4c:	ebac 0c01 	sub.w	ip, ip, r1
 801dc50:	eb05 010c 	add.w	r1, r5, ip
 801dc54:	e8d1 4f4f 	ldrexb	r4, [r1]
 801dc58:	e8c1 0f46 	strexb	r6, r0, [r1]
 801dc5c:	2e00      	cmp	r6, #0
 801dc5e:	d1f9      	bne.n	801dc54 <__atomic_exchange_8+0x3c>
 801dc60:	b2e4      	uxtb	r4, r4
 801dc62:	f3bf 8f5b 	dmb	ish
 801dc66:	2c00      	cmp	r4, #0
 801dc68:	d1f4      	bne.n	801dc54 <__atomic_exchange_8+0x3c>
 801dc6a:	e9de 0100 	ldrd	r0, r1, [lr]
 801dc6e:	e9ce 2300 	strd	r2, r3, [lr]
 801dc72:	f3bf 8f5b 	dmb	ish
 801dc76:	f805 400c 	strb.w	r4, [r5, ip]
 801dc7a:	bd70      	pop	{r4, r5, r6, pc}
 801dc7c:	27d4eb2d 	.word	0x27d4eb2d
 801dc80:	b21642c9 	.word	0xb21642c9
 801dc84:	24069358 	.word	0x24069358

0801dc88 <rcutils_get_env>:
 801dc88:	b168      	cbz	r0, 801dca6 <rcutils_get_env+0x1e>
 801dc8a:	b510      	push	{r4, lr}
 801dc8c:	460c      	mov	r4, r1
 801dc8e:	b129      	cbz	r1, 801dc9c <rcutils_get_env+0x14>
 801dc90:	f003 fe64 	bl	802195c <getenv>
 801dc94:	b120      	cbz	r0, 801dca0 <rcutils_get_env+0x18>
 801dc96:	6020      	str	r0, [r4, #0]
 801dc98:	2000      	movs	r0, #0
 801dc9a:	bd10      	pop	{r4, pc}
 801dc9c:	4803      	ldr	r0, [pc, #12]	@ (801dcac <rcutils_get_env+0x24>)
 801dc9e:	bd10      	pop	{r4, pc}
 801dca0:	4b03      	ldr	r3, [pc, #12]	@ (801dcb0 <rcutils_get_env+0x28>)
 801dca2:	6023      	str	r3, [r4, #0]
 801dca4:	bd10      	pop	{r4, pc}
 801dca6:	4803      	ldr	r0, [pc, #12]	@ (801dcb4 <rcutils_get_env+0x2c>)
 801dca8:	4770      	bx	lr
 801dcaa:	bf00      	nop
 801dcac:	080255dc 	.word	0x080255dc
 801dcb0:	08025a64 	.word	0x08025a64
 801dcb4:	080255c0 	.word	0x080255c0

0801dcb8 <rcutils_is_directory>:
 801dcb8:	2000      	movs	r0, #0
 801dcba:	4770      	bx	lr

0801dcbc <rcutils_join_path>:
 801dcbc:	b082      	sub	sp, #8
 801dcbe:	2000      	movs	r0, #0
 801dcc0:	e88d 000c 	stmia.w	sp, {r2, r3}
 801dcc4:	b002      	add	sp, #8
 801dcc6:	4770      	bx	lr

0801dcc8 <rcutils_to_native_path>:
 801dcc8:	b084      	sub	sp, #16
 801dcca:	2000      	movs	r0, #0
 801dccc:	f10d 0c04 	add.w	ip, sp, #4
 801dcd0:	b004      	add	sp, #16
 801dcd2:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801dcd6:	4770      	bx	lr

0801dcd8 <rcutils_format_string_limit>:
 801dcd8:	b40f      	push	{r0, r1, r2, r3}
 801dcda:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dcdc:	b083      	sub	sp, #12
 801dcde:	ac08      	add	r4, sp, #32
 801dce0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801dce2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801dce6:	b326      	cbz	r6, 801dd32 <rcutils_format_string_limit+0x5a>
 801dce8:	a808      	add	r0, sp, #32
 801dcea:	f7f7 fbdd 	bl	80154a8 <rcutils_allocator_is_valid>
 801dcee:	b300      	cbz	r0, 801dd32 <rcutils_format_string_limit+0x5a>
 801dcf0:	2100      	movs	r1, #0
 801dcf2:	ab0f      	add	r3, sp, #60	@ 0x3c
 801dcf4:	4632      	mov	r2, r6
 801dcf6:	4608      	mov	r0, r1
 801dcf8:	e9cd 3300 	strd	r3, r3, [sp]
 801dcfc:	f000 f906 	bl	801df0c <rcutils_vsnprintf>
 801dd00:	1c43      	adds	r3, r0, #1
 801dd02:	4605      	mov	r5, r0
 801dd04:	d015      	beq.n	801dd32 <rcutils_format_string_limit+0x5a>
 801dd06:	1c47      	adds	r7, r0, #1
 801dd08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dd0a:	429f      	cmp	r7, r3
 801dd0c:	d901      	bls.n	801dd12 <rcutils_format_string_limit+0x3a>
 801dd0e:	1e5d      	subs	r5, r3, #1
 801dd10:	461f      	mov	r7, r3
 801dd12:	9b08      	ldr	r3, [sp, #32]
 801dd14:	4638      	mov	r0, r7
 801dd16:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801dd18:	4798      	blx	r3
 801dd1a:	4604      	mov	r4, r0
 801dd1c:	b148      	cbz	r0, 801dd32 <rcutils_format_string_limit+0x5a>
 801dd1e:	4632      	mov	r2, r6
 801dd20:	4639      	mov	r1, r7
 801dd22:	9b01      	ldr	r3, [sp, #4]
 801dd24:	f000 f8f2 	bl	801df0c <rcutils_vsnprintf>
 801dd28:	2800      	cmp	r0, #0
 801dd2a:	db09      	blt.n	801dd40 <rcutils_format_string_limit+0x68>
 801dd2c:	2300      	movs	r3, #0
 801dd2e:	5563      	strb	r3, [r4, r5]
 801dd30:	e000      	b.n	801dd34 <rcutils_format_string_limit+0x5c>
 801dd32:	2400      	movs	r4, #0
 801dd34:	4620      	mov	r0, r4
 801dd36:	b003      	add	sp, #12
 801dd38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801dd3c:	b004      	add	sp, #16
 801dd3e:	4770      	bx	lr
 801dd40:	4620      	mov	r0, r4
 801dd42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd44:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801dd46:	2400      	movs	r4, #0
 801dd48:	4798      	blx	r3
 801dd4a:	e7f3      	b.n	801dd34 <rcutils_format_string_limit+0x5c>

0801dd4c <rcutils_repl_str>:
 801dd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd50:	ed2d 8b02 	vpush	{d8}
 801dd54:	b087      	sub	sp, #28
 801dd56:	2600      	movs	r6, #0
 801dd58:	4680      	mov	r8, r0
 801dd5a:	468a      	mov	sl, r1
 801dd5c:	9000      	str	r0, [sp, #0]
 801dd5e:	4608      	mov	r0, r1
 801dd60:	ee08 2a10 	vmov	s16, r2
 801dd64:	4699      	mov	r9, r3
 801dd66:	2510      	movs	r5, #16
 801dd68:	f7e2 fac4 	bl	80002f4 <strlen>
 801dd6c:	4637      	mov	r7, r6
 801dd6e:	46b3      	mov	fp, r6
 801dd70:	9001      	str	r0, [sp, #4]
 801dd72:	e01e      	b.n	801ddb2 <rcutils_repl_str+0x66>
 801dd74:	f10b 0b01 	add.w	fp, fp, #1
 801dd78:	9b01      	ldr	r3, [sp, #4]
 801dd7a:	455e      	cmp	r6, fp
 801dd7c:	eb04 0803 	add.w	r8, r4, r3
 801dd80:	d211      	bcs.n	801dda6 <rcutils_repl_str+0x5a>
 801dd82:	442e      	add	r6, r5
 801dd84:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801dd88:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801dd8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dd90:	00b1      	lsls	r1, r6, #2
 801dd92:	4798      	blx	r3
 801dd94:	2800      	cmp	r0, #0
 801dd96:	f000 8088 	beq.w	801deaa <rcutils_repl_str+0x15e>
 801dd9a:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 801dd9e:	4607      	mov	r7, r0
 801dda0:	bf28      	it	cs
 801dda2:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 801dda6:	9a00      	ldr	r2, [sp, #0]
 801dda8:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 801ddac:	1aa4      	subs	r4, r4, r2
 801ddae:	f843 4c04 	str.w	r4, [r3, #-4]
 801ddb2:	4651      	mov	r1, sl
 801ddb4:	4640      	mov	r0, r8
 801ddb6:	f004 faa2 	bl	80222fe <strstr>
 801ddba:	4604      	mov	r4, r0
 801ddbc:	4638      	mov	r0, r7
 801ddbe:	2c00      	cmp	r4, #0
 801ddc0:	d1d8      	bne.n	801dd74 <rcutils_repl_str+0x28>
 801ddc2:	4640      	mov	r0, r8
 801ddc4:	f7e2 fa96 	bl	80002f4 <strlen>
 801ddc8:	9b00      	ldr	r3, [sp, #0]
 801ddca:	eba8 0803 	sub.w	r8, r8, r3
 801ddce:	eb08 0400 	add.w	r4, r8, r0
 801ddd2:	9402      	str	r4, [sp, #8]
 801ddd4:	f1bb 0f00 	cmp.w	fp, #0
 801ddd8:	d045      	beq.n	801de66 <rcutils_repl_str+0x11a>
 801ddda:	ee18 0a10 	vmov	r0, s16
 801ddde:	f7e2 fa89 	bl	80002f4 <strlen>
 801dde2:	9a01      	ldr	r2, [sp, #4]
 801dde4:	4606      	mov	r6, r0
 801dde6:	f8d9 3000 	ldr.w	r3, [r9]
 801ddea:	1a82      	subs	r2, r0, r2
 801ddec:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801ddf0:	fb0b 4202 	mla	r2, fp, r2, r4
 801ddf4:	1c50      	adds	r0, r2, #1
 801ddf6:	9205      	str	r2, [sp, #20]
 801ddf8:	4798      	blx	r3
 801ddfa:	4682      	mov	sl, r0
 801ddfc:	2800      	cmp	r0, #0
 801ddfe:	d054      	beq.n	801deaa <rcutils_repl_str+0x15e>
 801de00:	683a      	ldr	r2, [r7, #0]
 801de02:	463d      	mov	r5, r7
 801de04:	9900      	ldr	r1, [sp, #0]
 801de06:	2401      	movs	r4, #1
 801de08:	f004 fb71 	bl	80224ee <memcpy>
 801de0c:	683b      	ldr	r3, [r7, #0]
 801de0e:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 801de12:	eb0a 0803 	add.w	r8, sl, r3
 801de16:	ee18 7a10 	vmov	r7, s16
 801de1a:	f8dd a000 	ldr.w	sl, [sp]
 801de1e:	f8cd 9000 	str.w	r9, [sp]
 801de22:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801de26:	4632      	mov	r2, r6
 801de28:	4639      	mov	r1, r7
 801de2a:	4640      	mov	r0, r8
 801de2c:	44b0      	add	r8, r6
 801de2e:	f004 fb5e 	bl	80224ee <memcpy>
 801de32:	f855 2b04 	ldr.w	r2, [r5], #4
 801de36:	45a3      	cmp	fp, r4
 801de38:	444a      	add	r2, r9
 801de3a:	eb0a 0102 	add.w	r1, sl, r2
 801de3e:	d02a      	beq.n	801de96 <rcutils_repl_str+0x14a>
 801de40:	6828      	ldr	r0, [r5, #0]
 801de42:	1a82      	subs	r2, r0, r2
 801de44:	4640      	mov	r0, r8
 801de46:	4490      	add	r8, r2
 801de48:	f004 fb51 	bl	80224ee <memcpy>
 801de4c:	1c62      	adds	r2, r4, #1
 801de4e:	45a3      	cmp	fp, r4
 801de50:	4614      	mov	r4, r2
 801de52:	d8e8      	bhi.n	801de26 <rcutils_repl_str+0xda>
 801de54:	f8dd 9000 	ldr.w	r9, [sp]
 801de58:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801de5c:	2300      	movs	r3, #0
 801de5e:	9a05      	ldr	r2, [sp, #20]
 801de60:	f80a 3002 	strb.w	r3, [sl, r2]
 801de64:	e00b      	b.n	801de7e <rcutils_repl_str+0x132>
 801de66:	4620      	mov	r0, r4
 801de68:	f8d9 3000 	ldr.w	r3, [r9]
 801de6c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801de70:	3001      	adds	r0, #1
 801de72:	4798      	blx	r3
 801de74:	4682      	mov	sl, r0
 801de76:	b110      	cbz	r0, 801de7e <rcutils_repl_str+0x132>
 801de78:	9900      	ldr	r1, [sp, #0]
 801de7a:	f004 fb30 	bl	80224de <strcpy>
 801de7e:	4638      	mov	r0, r7
 801de80:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801de84:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801de88:	4798      	blx	r3
 801de8a:	4650      	mov	r0, sl
 801de8c:	b007      	add	sp, #28
 801de8e:	ecbd 8b02 	vpop	{d8}
 801de92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de96:	9b02      	ldr	r3, [sp, #8]
 801de98:	4640      	mov	r0, r8
 801de9a:	f8dd 9000 	ldr.w	r9, [sp]
 801de9e:	1a9a      	subs	r2, r3, r2
 801dea0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801dea4:	f004 fb23 	bl	80224ee <memcpy>
 801dea8:	e7d8      	b.n	801de5c <rcutils_repl_str+0x110>
 801deaa:	f04f 0a00 	mov.w	sl, #0
 801deae:	e7e6      	b.n	801de7e <rcutils_repl_str+0x132>

0801deb0 <rcutils_snprintf>:
 801deb0:	b40c      	push	{r2, r3}
 801deb2:	b530      	push	{r4, r5, lr}
 801deb4:	b083      	sub	sp, #12
 801deb6:	ab06      	add	r3, sp, #24
 801deb8:	f853 2b04 	ldr.w	r2, [r3], #4
 801debc:	9301      	str	r3, [sp, #4]
 801debe:	b1e2      	cbz	r2, 801defa <rcutils_snprintf+0x4a>
 801dec0:	fab0 f480 	clz	r4, r0
 801dec4:	fab1 f581 	clz	r5, r1
 801dec8:	ea50 0c01 	orrs.w	ip, r0, r1
 801decc:	ea4f 1454 	mov.w	r4, r4, lsr #5
 801ded0:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801ded4:	d008      	beq.n	801dee8 <rcutils_snprintf+0x38>
 801ded6:	b984      	cbnz	r4, 801defa <rcutils_snprintf+0x4a>
 801ded8:	b97d      	cbnz	r5, 801defa <rcutils_snprintf+0x4a>
 801deda:	f004 f91d 	bl	8022118 <vsniprintf>
 801dede:	b003      	add	sp, #12
 801dee0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801dee4:	b002      	add	sp, #8
 801dee6:	4770      	bx	lr
 801dee8:	4661      	mov	r1, ip
 801deea:	4660      	mov	r0, ip
 801deec:	f004 f914 	bl	8022118 <vsniprintf>
 801def0:	b003      	add	sp, #12
 801def2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801def6:	b002      	add	sp, #8
 801def8:	4770      	bx	lr
 801defa:	f004 fac3 	bl	8022484 <__errno>
 801defe:	2216      	movs	r2, #22
 801df00:	4603      	mov	r3, r0
 801df02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801df06:	601a      	str	r2, [r3, #0]
 801df08:	e7e9      	b.n	801dede <rcutils_snprintf+0x2e>
 801df0a:	bf00      	nop

0801df0c <rcutils_vsnprintf>:
 801df0c:	b570      	push	{r4, r5, r6, lr}
 801df0e:	b1b2      	cbz	r2, 801df3e <rcutils_vsnprintf+0x32>
 801df10:	fab0 f480 	clz	r4, r0
 801df14:	fab1 f581 	clz	r5, r1
 801df18:	ea50 0c01 	orrs.w	ip, r0, r1
 801df1c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 801df20:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801df24:	d005      	beq.n	801df32 <rcutils_vsnprintf+0x26>
 801df26:	b954      	cbnz	r4, 801df3e <rcutils_vsnprintf+0x32>
 801df28:	b94d      	cbnz	r5, 801df3e <rcutils_vsnprintf+0x32>
 801df2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801df2e:	f004 b8f3 	b.w	8022118 <vsniprintf>
 801df32:	4661      	mov	r1, ip
 801df34:	4660      	mov	r0, ip
 801df36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801df3a:	f004 b8ed 	b.w	8022118 <vsniprintf>
 801df3e:	f004 faa1 	bl	8022484 <__errno>
 801df42:	2316      	movs	r3, #22
 801df44:	6003      	str	r3, [r0, #0]
 801df46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801df4a:	bd70      	pop	{r4, r5, r6, pc}

0801df4c <rcutils_strdup>:
 801df4c:	b084      	sub	sp, #16
 801df4e:	b570      	push	{r4, r5, r6, lr}
 801df50:	b082      	sub	sp, #8
 801df52:	4605      	mov	r5, r0
 801df54:	ac07      	add	r4, sp, #28
 801df56:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 801df5a:	b1b0      	cbz	r0, 801df8a <rcutils_strdup+0x3e>
 801df5c:	f7e2 f9ca 	bl	80002f4 <strlen>
 801df60:	1c42      	adds	r2, r0, #1
 801df62:	9b07      	ldr	r3, [sp, #28]
 801df64:	4606      	mov	r6, r0
 801df66:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801df68:	4610      	mov	r0, r2
 801df6a:	9201      	str	r2, [sp, #4]
 801df6c:	4798      	blx	r3
 801df6e:	4604      	mov	r4, r0
 801df70:	b128      	cbz	r0, 801df7e <rcutils_strdup+0x32>
 801df72:	9a01      	ldr	r2, [sp, #4]
 801df74:	4629      	mov	r1, r5
 801df76:	f004 faba 	bl	80224ee <memcpy>
 801df7a:	2300      	movs	r3, #0
 801df7c:	55a3      	strb	r3, [r4, r6]
 801df7e:	4620      	mov	r0, r4
 801df80:	b002      	add	sp, #8
 801df82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801df86:	b004      	add	sp, #16
 801df88:	4770      	bx	lr
 801df8a:	4604      	mov	r4, r0
 801df8c:	e7f7      	b.n	801df7e <rcutils_strdup+0x32>
 801df8e:	bf00      	nop

0801df90 <rcutils_strndup>:
 801df90:	b082      	sub	sp, #8
 801df92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df94:	ac06      	add	r4, sp, #24
 801df96:	4605      	mov	r5, r0
 801df98:	e884 000c 	stmia.w	r4, {r2, r3}
 801df9c:	b188      	cbz	r0, 801dfc2 <rcutils_strndup+0x32>
 801df9e:	1c4f      	adds	r7, r1, #1
 801dfa0:	460e      	mov	r6, r1
 801dfa2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dfa4:	4638      	mov	r0, r7
 801dfa6:	4790      	blx	r2
 801dfa8:	4604      	mov	r4, r0
 801dfaa:	b128      	cbz	r0, 801dfb8 <rcutils_strndup+0x28>
 801dfac:	463a      	mov	r2, r7
 801dfae:	4629      	mov	r1, r5
 801dfb0:	f004 fa9d 	bl	80224ee <memcpy>
 801dfb4:	2300      	movs	r3, #0
 801dfb6:	55a3      	strb	r3, [r4, r6]
 801dfb8:	4620      	mov	r0, r4
 801dfba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801dfbe:	b002      	add	sp, #8
 801dfc0:	4770      	bx	lr
 801dfc2:	4604      	mov	r4, r0
 801dfc4:	e7f8      	b.n	801dfb8 <rcutils_strndup+0x28>
 801dfc6:	bf00      	nop

0801dfc8 <rcutils_get_zero_initialized_string_map>:
 801dfc8:	2000      	movs	r0, #0
 801dfca:	4b01      	ldr	r3, [pc, #4]	@ (801dfd0 <rcutils_get_zero_initialized_string_map+0x8>)
 801dfcc:	6018      	str	r0, [r3, #0]
 801dfce:	4770      	bx	lr
 801dfd0:	24069370 	.word	0x24069370

0801dfd4 <rcutils_string_map_reserve>:
 801dfd4:	2800      	cmp	r0, #0
 801dfd6:	d05e      	beq.n	801e096 <rcutils_string_map_reserve+0xc2>
 801dfd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dfdc:	460c      	mov	r4, r1
 801dfde:	6801      	ldr	r1, [r0, #0]
 801dfe0:	b082      	sub	sp, #8
 801dfe2:	4605      	mov	r5, r0
 801dfe4:	b129      	cbz	r1, 801dff2 <rcutils_string_map_reserve+0x1e>
 801dfe6:	68cb      	ldr	r3, [r1, #12]
 801dfe8:	42a3      	cmp	r3, r4
 801dfea:	d906      	bls.n	801dffa <rcutils_string_map_reserve+0x26>
 801dfec:	461c      	mov	r4, r3
 801dfee:	2900      	cmp	r1, #0
 801dff0:	d1f9      	bne.n	801dfe6 <rcutils_string_map_reserve+0x12>
 801dff2:	201f      	movs	r0, #31
 801dff4:	b002      	add	sp, #8
 801dff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dffa:	688b      	ldr	r3, [r1, #8]
 801dffc:	42a3      	cmp	r3, r4
 801dffe:	d046      	beq.n	801e08e <rcutils_string_map_reserve+0xba>
 801e000:	6a0e      	ldr	r6, [r1, #32]
 801e002:	2c00      	cmp	r4, #0
 801e004:	d033      	beq.n	801e06e <rcutils_string_map_reserve+0x9a>
 801e006:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801e00a:	d242      	bcs.n	801e092 <rcutils_string_map_reserve+0xbe>
 801e00c:	00a7      	lsls	r7, r4, #2
 801e00e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801e012:	6808      	ldr	r0, [r1, #0]
 801e014:	4632      	mov	r2, r6
 801e016:	4639      	mov	r1, r7
 801e018:	47c0      	blx	r8
 801e01a:	2800      	cmp	r0, #0
 801e01c:	d039      	beq.n	801e092 <rcutils_string_map_reserve+0xbe>
 801e01e:	682b      	ldr	r3, [r5, #0]
 801e020:	4632      	mov	r2, r6
 801e022:	4639      	mov	r1, r7
 801e024:	6018      	str	r0, [r3, #0]
 801e026:	6858      	ldr	r0, [r3, #4]
 801e028:	47c0      	blx	r8
 801e02a:	2800      	cmp	r0, #0
 801e02c:	d031      	beq.n	801e092 <rcutils_string_map_reserve+0xbe>
 801e02e:	682d      	ldr	r5, [r5, #0]
 801e030:	68ab      	ldr	r3, [r5, #8]
 801e032:	6068      	str	r0, [r5, #4]
 801e034:	42a3      	cmp	r3, r4
 801e036:	d225      	bcs.n	801e084 <rcutils_string_map_reserve+0xb0>
 801e038:	682a      	ldr	r2, [r5, #0]
 801e03a:	eb00 0c07 	add.w	ip, r0, r7
 801e03e:	0099      	lsls	r1, r3, #2
 801e040:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801e044:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801e048:	45e6      	cmp	lr, ip
 801e04a:	d203      	bcs.n	801e054 <rcutils_string_map_reserve+0x80>
 801e04c:	eb02 0c07 	add.w	ip, r2, r7
 801e050:	4566      	cmp	r6, ip
 801e052:	d322      	bcc.n	801e09a <rcutils_string_map_reserve+0xc6>
 801e054:	1ae3      	subs	r3, r4, r3
 801e056:	4670      	mov	r0, lr
 801e058:	2100      	movs	r1, #0
 801e05a:	009a      	lsls	r2, r3, #2
 801e05c:	9201      	str	r2, [sp, #4]
 801e05e:	f004 f927 	bl	80222b0 <memset>
 801e062:	9a01      	ldr	r2, [sp, #4]
 801e064:	2100      	movs	r1, #0
 801e066:	4630      	mov	r0, r6
 801e068:	f004 f922 	bl	80222b0 <memset>
 801e06c:	e00a      	b.n	801e084 <rcutils_string_map_reserve+0xb0>
 801e06e:	694f      	ldr	r7, [r1, #20]
 801e070:	6808      	ldr	r0, [r1, #0]
 801e072:	4631      	mov	r1, r6
 801e074:	47b8      	blx	r7
 801e076:	682b      	ldr	r3, [r5, #0]
 801e078:	4631      	mov	r1, r6
 801e07a:	6858      	ldr	r0, [r3, #4]
 801e07c:	601c      	str	r4, [r3, #0]
 801e07e:	47b8      	blx	r7
 801e080:	682d      	ldr	r5, [r5, #0]
 801e082:	606c      	str	r4, [r5, #4]
 801e084:	2000      	movs	r0, #0
 801e086:	60ac      	str	r4, [r5, #8]
 801e088:	b002      	add	sp, #8
 801e08a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e08e:	2000      	movs	r0, #0
 801e090:	e7b0      	b.n	801dff4 <rcutils_string_map_reserve+0x20>
 801e092:	200a      	movs	r0, #10
 801e094:	e7ae      	b.n	801dff4 <rcutils_string_map_reserve+0x20>
 801e096:	200b      	movs	r0, #11
 801e098:	4770      	bx	lr
 801e09a:	1f0b      	subs	r3, r1, #4
 801e09c:	4418      	add	r0, r3
 801e09e:	4413      	add	r3, r2
 801e0a0:	3a04      	subs	r2, #4
 801e0a2:	4417      	add	r7, r2
 801e0a4:	2200      	movs	r2, #0
 801e0a6:	f843 2f04 	str.w	r2, [r3, #4]!
 801e0aa:	42bb      	cmp	r3, r7
 801e0ac:	f840 2f04 	str.w	r2, [r0, #4]!
 801e0b0:	d1f9      	bne.n	801e0a6 <rcutils_string_map_reserve+0xd2>
 801e0b2:	e7e7      	b.n	801e084 <rcutils_string_map_reserve+0xb0>

0801e0b4 <rcutils_string_map_init>:
 801e0b4:	b082      	sub	sp, #8
 801e0b6:	b570      	push	{r4, r5, r6, lr}
 801e0b8:	ac04      	add	r4, sp, #16
 801e0ba:	e884 000c 	stmia.w	r4, {r2, r3}
 801e0be:	b380      	cbz	r0, 801e122 <rcutils_string_map_init+0x6e>
 801e0c0:	6806      	ldr	r6, [r0, #0]
 801e0c2:	4604      	mov	r4, r0
 801e0c4:	b12e      	cbz	r6, 801e0d2 <rcutils_string_map_init+0x1e>
 801e0c6:	251e      	movs	r5, #30
 801e0c8:	4628      	mov	r0, r5
 801e0ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e0ce:	b002      	add	sp, #8
 801e0d0:	4770      	bx	lr
 801e0d2:	a804      	add	r0, sp, #16
 801e0d4:	460d      	mov	r5, r1
 801e0d6:	f7f7 f9e7 	bl	80154a8 <rcutils_allocator_is_valid>
 801e0da:	b310      	cbz	r0, 801e122 <rcutils_string_map_init+0x6e>
 801e0dc:	9b04      	ldr	r3, [sp, #16]
 801e0de:	2024      	movs	r0, #36	@ 0x24
 801e0e0:	9908      	ldr	r1, [sp, #32]
 801e0e2:	4798      	blx	r3
 801e0e4:	6020      	str	r0, [r4, #0]
 801e0e6:	b310      	cbz	r0, 801e12e <rcutils_string_map_init+0x7a>
 801e0e8:	f10d 0e10 	add.w	lr, sp, #16
 801e0ec:	f100 0c10 	add.w	ip, r0, #16
 801e0f0:	e9c0 6600 	strd	r6, r6, [r0]
 801e0f4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 801e0f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e0fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e100:	f8de 3000 	ldr.w	r3, [lr]
 801e104:	4629      	mov	r1, r5
 801e106:	4620      	mov	r0, r4
 801e108:	f8cc 3000 	str.w	r3, [ip]
 801e10c:	f7ff ff62 	bl	801dfd4 <rcutils_string_map_reserve>
 801e110:	4605      	mov	r5, r0
 801e112:	2800      	cmp	r0, #0
 801e114:	d0d8      	beq.n	801e0c8 <rcutils_string_map_init+0x14>
 801e116:	9b05      	ldr	r3, [sp, #20]
 801e118:	9908      	ldr	r1, [sp, #32]
 801e11a:	6820      	ldr	r0, [r4, #0]
 801e11c:	4798      	blx	r3
 801e11e:	6026      	str	r6, [r4, #0]
 801e120:	e7d2      	b.n	801e0c8 <rcutils_string_map_init+0x14>
 801e122:	250b      	movs	r5, #11
 801e124:	4628      	mov	r0, r5
 801e126:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e12a:	b002      	add	sp, #8
 801e12c:	4770      	bx	lr
 801e12e:	250a      	movs	r5, #10
 801e130:	e7ca      	b.n	801e0c8 <rcutils_string_map_init+0x14>
 801e132:	bf00      	nop

0801e134 <rcutils_string_map_fini>:
 801e134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e138:	b082      	sub	sp, #8
 801e13a:	2800      	cmp	r0, #0
 801e13c:	d03a      	beq.n	801e1b4 <rcutils_string_map_fini+0x80>
 801e13e:	6804      	ldr	r4, [r0, #0]
 801e140:	4606      	mov	r6, r0
 801e142:	2c00      	cmp	r4, #0
 801e144:	d032      	beq.n	801e1ac <rcutils_string_map_fini+0x78>
 801e146:	68a3      	ldr	r3, [r4, #8]
 801e148:	b32b      	cbz	r3, 801e196 <rcutils_string_map_fini+0x62>
 801e14a:	2500      	movs	r5, #0
 801e14c:	6822      	ldr	r2, [r4, #0]
 801e14e:	462f      	mov	r7, r5
 801e150:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801e154:	b1e0      	cbz	r0, 801e190 <rcutils_string_map_fini+0x5c>
 801e156:	6a21      	ldr	r1, [r4, #32]
 801e158:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801e15c:	9101      	str	r1, [sp, #4]
 801e15e:	47c0      	blx	r8
 801e160:	9901      	ldr	r1, [sp, #4]
 801e162:	e9d4 3200 	ldrd	r3, r2, [r4]
 801e166:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 801e16a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801e16e:	47c0      	blx	r8
 801e170:	68e3      	ldr	r3, [r4, #12]
 801e172:	6862      	ldr	r2, [r4, #4]
 801e174:	3b01      	subs	r3, #1
 801e176:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801e17a:	3501      	adds	r5, #1
 801e17c:	60e3      	str	r3, [r4, #12]
 801e17e:	6834      	ldr	r4, [r6, #0]
 801e180:	68a3      	ldr	r3, [r4, #8]
 801e182:	429d      	cmp	r5, r3
 801e184:	d207      	bcs.n	801e196 <rcutils_string_map_fini+0x62>
 801e186:	6822      	ldr	r2, [r4, #0]
 801e188:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801e18c:	2800      	cmp	r0, #0
 801e18e:	d1e2      	bne.n	801e156 <rcutils_string_map_fini+0x22>
 801e190:	3501      	adds	r5, #1
 801e192:	429d      	cmp	r5, r3
 801e194:	d3dc      	bcc.n	801e150 <rcutils_string_map_fini+0x1c>
 801e196:	2100      	movs	r1, #0
 801e198:	4630      	mov	r0, r6
 801e19a:	f7ff ff1b 	bl	801dfd4 <rcutils_string_map_reserve>
 801e19e:	4604      	mov	r4, r0
 801e1a0:	b920      	cbnz	r0, 801e1ac <rcutils_string_map_fini+0x78>
 801e1a2:	6830      	ldr	r0, [r6, #0]
 801e1a4:	6943      	ldr	r3, [r0, #20]
 801e1a6:	6a01      	ldr	r1, [r0, #32]
 801e1a8:	4798      	blx	r3
 801e1aa:	6034      	str	r4, [r6, #0]
 801e1ac:	4620      	mov	r0, r4
 801e1ae:	b002      	add	sp, #8
 801e1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1b4:	240b      	movs	r4, #11
 801e1b6:	4620      	mov	r0, r4
 801e1b8:	b002      	add	sp, #8
 801e1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1be:	bf00      	nop

0801e1c0 <rcutils_string_map_getn>:
 801e1c0:	b378      	cbz	r0, 801e222 <rcutils_string_map_getn+0x62>
 801e1c2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1c6:	f8d0 b000 	ldr.w	fp, [r0]
 801e1ca:	f1bb 0f00 	cmp.w	fp, #0
 801e1ce:	d01f      	beq.n	801e210 <rcutils_string_map_getn+0x50>
 801e1d0:	fab1 f481 	clz	r4, r1
 801e1d4:	4688      	mov	r8, r1
 801e1d6:	0964      	lsrs	r4, r4, #5
 801e1d8:	b1d1      	cbz	r1, 801e210 <rcutils_string_map_getn+0x50>
 801e1da:	f8db 7008 	ldr.w	r7, [fp, #8]
 801e1de:	f8db 6000 	ldr.w	r6, [fp]
 801e1e2:	b1af      	cbz	r7, 801e210 <rcutils_string_map_getn+0x50>
 801e1e4:	4691      	mov	r9, r2
 801e1e6:	3e04      	subs	r6, #4
 801e1e8:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801e1ec:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801e1f0:	3401      	adds	r4, #1
 801e1f2:	4628      	mov	r0, r5
 801e1f4:	b155      	cbz	r5, 801e20c <rcutils_string_map_getn+0x4c>
 801e1f6:	f7e2 f87d 	bl	80002f4 <strlen>
 801e1fa:	4602      	mov	r2, r0
 801e1fc:	4629      	mov	r1, r5
 801e1fe:	4640      	mov	r0, r8
 801e200:	454a      	cmp	r2, r9
 801e202:	bf38      	it	cc
 801e204:	464a      	movcc	r2, r9
 801e206:	f004 f868 	bl	80222da <strncmp>
 801e20a:	b120      	cbz	r0, 801e216 <rcutils_string_map_getn+0x56>
 801e20c:	42a7      	cmp	r7, r4
 801e20e:	d1eb      	bne.n	801e1e8 <rcutils_string_map_getn+0x28>
 801e210:	2000      	movs	r0, #0
 801e212:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e216:	f8db 3004 	ldr.w	r3, [fp, #4]
 801e21a:	f853 000a 	ldr.w	r0, [r3, sl]
 801e21e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e222:	4770      	bx	lr
 801e224:	0000      	movs	r0, r0
	...

0801e228 <rmw_get_zero_initialized_context>:
 801e228:	b510      	push	{r4, lr}
 801e22a:	4604      	mov	r4, r0
 801e22c:	3010      	adds	r0, #16
 801e22e:	f000 f80f 	bl	801e250 <rmw_get_zero_initialized_init_options>
 801e232:	2300      	movs	r3, #0
 801e234:	4620      	mov	r0, r4
 801e236:	60a3      	str	r3, [r4, #8]
 801e238:	64a3      	str	r3, [r4, #72]	@ 0x48
 801e23a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 801e23c:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 801e248 <rmw_get_zero_initialized_context+0x20>
 801e240:	ed84 7b00 	vstr	d7, [r4]
 801e244:	bd10      	pop	{r4, pc}
 801e246:	bf00      	nop
	...

0801e250 <rmw_get_zero_initialized_init_options>:
 801e250:	b510      	push	{r4, lr}
 801e252:	4604      	mov	r4, r0
 801e254:	2238      	movs	r2, #56	@ 0x38
 801e256:	2100      	movs	r1, #0
 801e258:	f004 f82a 	bl	80222b0 <memset>
 801e25c:	f104 0010 	add.w	r0, r4, #16
 801e260:	f000 f806 	bl	801e270 <rmw_get_default_security_options>
 801e264:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e268:	4620      	mov	r0, r4
 801e26a:	60e3      	str	r3, [r4, #12]
 801e26c:	bd10      	pop	{r4, pc}
 801e26e:	bf00      	nop

0801e270 <rmw_get_default_security_options>:
 801e270:	2200      	movs	r2, #0
 801e272:	7002      	strb	r2, [r0, #0]
 801e274:	6042      	str	r2, [r0, #4]
 801e276:	4770      	bx	lr

0801e278 <rmw_subscription_content_filter_options_fini>:
 801e278:	b1b0      	cbz	r0, 801e2a8 <rmw_subscription_content_filter_options_fini+0x30>
 801e27a:	b538      	push	{r3, r4, r5, lr}
 801e27c:	4604      	mov	r4, r0
 801e27e:	4608      	mov	r0, r1
 801e280:	460d      	mov	r5, r1
 801e282:	f7f7 f911 	bl	80154a8 <rcutils_allocator_is_valid>
 801e286:	b168      	cbz	r0, 801e2a4 <rmw_subscription_content_filter_options_fini+0x2c>
 801e288:	6820      	ldr	r0, [r4, #0]
 801e28a:	b120      	cbz	r0, 801e296 <rmw_subscription_content_filter_options_fini+0x1e>
 801e28c:	686b      	ldr	r3, [r5, #4]
 801e28e:	6929      	ldr	r1, [r5, #16]
 801e290:	4798      	blx	r3
 801e292:	2300      	movs	r3, #0
 801e294:	6023      	str	r3, [r4, #0]
 801e296:	1d20      	adds	r0, r4, #4
 801e298:	f003 f97c 	bl	8021594 <rcutils_string_array_fini>
 801e29c:	3800      	subs	r0, #0
 801e29e:	bf18      	it	ne
 801e2a0:	2001      	movne	r0, #1
 801e2a2:	bd38      	pop	{r3, r4, r5, pc}
 801e2a4:	200b      	movs	r0, #11
 801e2a6:	bd38      	pop	{r3, r4, r5, pc}
 801e2a8:	200b      	movs	r0, #11
 801e2aa:	4770      	bx	lr

0801e2ac <rmw_get_default_subscription_options>:
 801e2ac:	2200      	movs	r2, #0
 801e2ae:	e9c0 2200 	strd	r2, r2, [r0]
 801e2b2:	6082      	str	r2, [r0, #8]
 801e2b4:	4770      	bx	lr
 801e2b6:	bf00      	nop

0801e2b8 <rmw_time_equal>:
 801e2b8:	b4f0      	push	{r4, r5, r6, r7}
 801e2ba:	b084      	sub	sp, #16
 801e2bc:	ac04      	add	r4, sp, #16
 801e2be:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801e2c2:	4603      	mov	r3, r0
 801e2c4:	4925      	ldr	r1, [pc, #148]	@ (801e35c <rmw_time_equal+0xa4>)
 801e2c6:	9d01      	ldr	r5, [sp, #4]
 801e2c8:	4610      	mov	r0, r2
 801e2ca:	4299      	cmp	r1, r3
 801e2cc:	f04f 0202 	mov.w	r2, #2
 801e2d0:	9e03      	ldr	r6, [sp, #12]
 801e2d2:	41aa      	sbcs	r2, r5
 801e2d4:	d330      	bcc.n	801e338 <rmw_time_equal+0x80>
 801e2d6:	4c22      	ldr	r4, [pc, #136]	@ (801e360 <rmw_time_equal+0xa8>)
 801e2d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e2dc:	fba3 3204 	umull	r3, r2, r3, r4
 801e2e0:	fb04 2205 	mla	r2, r4, r5, r2
 801e2e4:	43dd      	mvns	r5, r3
 801e2e6:	1a8c      	subs	r4, r1, r2
 801e2e8:	4285      	cmp	r5, r0
 801e2ea:	41b4      	sbcs	r4, r6
 801e2ec:	d332      	bcc.n	801e354 <rmw_time_equal+0x9c>
 801e2ee:	eb10 0c03 	adds.w	ip, r0, r3
 801e2f2:	eb42 0106 	adc.w	r1, r2, r6
 801e2f6:	4819      	ldr	r0, [pc, #100]	@ (801e35c <rmw_time_equal+0xa4>)
 801e2f8:	2202      	movs	r2, #2
 801e2fa:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801e2fc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801e2fe:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801e302:	4298      	cmp	r0, r3
 801e304:	41b2      	sbcs	r2, r6
 801e306:	d31c      	bcc.n	801e342 <rmw_time_equal+0x8a>
 801e308:	4c15      	ldr	r4, [pc, #84]	@ (801e360 <rmw_time_equal+0xa8>)
 801e30a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801e30e:	fba3 3204 	umull	r3, r2, r3, r4
 801e312:	fb04 2206 	mla	r2, r4, r6, r2
 801e316:	43de      	mvns	r6, r3
 801e318:	1a84      	subs	r4, r0, r2
 801e31a:	42ae      	cmp	r6, r5
 801e31c:	41bc      	sbcs	r4, r7
 801e31e:	d315      	bcc.n	801e34c <rmw_time_equal+0x94>
 801e320:	195b      	adds	r3, r3, r5
 801e322:	eb42 0207 	adc.w	r2, r2, r7
 801e326:	428a      	cmp	r2, r1
 801e328:	bf08      	it	eq
 801e32a:	4563      	cmpeq	r3, ip
 801e32c:	bf0c      	ite	eq
 801e32e:	2001      	moveq	r0, #1
 801e330:	2000      	movne	r0, #0
 801e332:	b004      	add	sp, #16
 801e334:	bcf0      	pop	{r4, r5, r6, r7}
 801e336:	4770      	bx	lr
 801e338:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801e33c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e340:	e7d9      	b.n	801e2f6 <rmw_time_equal+0x3e>
 801e342:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e346:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 801e34a:	e7ec      	b.n	801e326 <rmw_time_equal+0x6e>
 801e34c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e350:	4602      	mov	r2, r0
 801e352:	e7e8      	b.n	801e326 <rmw_time_equal+0x6e>
 801e354:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801e358:	e7cd      	b.n	801e2f6 <rmw_time_equal+0x3e>
 801e35a:	bf00      	nop
 801e35c:	25c17d04 	.word	0x25c17d04
 801e360:	3b9aca00 	.word	0x3b9aca00

0801e364 <rmw_time_total_nsec>:
 801e364:	b470      	push	{r4, r5, r6}
 801e366:	b085      	sub	sp, #20
 801e368:	ac04      	add	r4, sp, #16
 801e36a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801e36e:	4603      	mov	r3, r0
 801e370:	4913      	ldr	r1, [pc, #76]	@ (801e3c0 <rmw_time_total_nsec+0x5c>)
 801e372:	9d01      	ldr	r5, [sp, #4]
 801e374:	4610      	mov	r0, r2
 801e376:	4299      	cmp	r1, r3
 801e378:	f04f 0202 	mov.w	r2, #2
 801e37c:	9e03      	ldr	r6, [sp, #12]
 801e37e:	41aa      	sbcs	r2, r5
 801e380:	d311      	bcc.n	801e3a6 <rmw_time_total_nsec+0x42>
 801e382:	4c10      	ldr	r4, [pc, #64]	@ (801e3c4 <rmw_time_total_nsec+0x60>)
 801e384:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e388:	fba3 3204 	umull	r3, r2, r3, r4
 801e38c:	fb04 2205 	mla	r2, r4, r5, r2
 801e390:	43dd      	mvns	r5, r3
 801e392:	1a8c      	subs	r4, r1, r2
 801e394:	4285      	cmp	r5, r0
 801e396:	41b4      	sbcs	r4, r6
 801e398:	d30c      	bcc.n	801e3b4 <rmw_time_total_nsec+0x50>
 801e39a:	1818      	adds	r0, r3, r0
 801e39c:	eb42 0106 	adc.w	r1, r2, r6
 801e3a0:	b005      	add	sp, #20
 801e3a2:	bc70      	pop	{r4, r5, r6}
 801e3a4:	4770      	bx	lr
 801e3a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e3aa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e3ae:	b005      	add	sp, #20
 801e3b0:	bc70      	pop	{r4, r5, r6}
 801e3b2:	4770      	bx	lr
 801e3b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e3b8:	b005      	add	sp, #20
 801e3ba:	bc70      	pop	{r4, r5, r6}
 801e3bc:	4770      	bx	lr
 801e3be:	bf00      	nop
 801e3c0:	25c17d04 	.word	0x25c17d04
 801e3c4:	3b9aca00 	.word	0x3b9aca00

0801e3c8 <rmw_get_zero_initialized_message_info>:
 801e3c8:	b510      	push	{r4, lr}
 801e3ca:	4604      	mov	r4, r0
 801e3cc:	2240      	movs	r2, #64	@ 0x40
 801e3ce:	2100      	movs	r1, #0
 801e3d0:	f003 ff6e 	bl	80222b0 <memset>
 801e3d4:	4620      	mov	r0, r4
 801e3d6:	bd10      	pop	{r4, pc}

0801e3d8 <rmw_validate_full_topic_name>:
 801e3d8:	2800      	cmp	r0, #0
 801e3da:	d05d      	beq.n	801e498 <rmw_validate_full_topic_name+0xc0>
 801e3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e3e0:	460d      	mov	r5, r1
 801e3e2:	2900      	cmp	r1, #0
 801e3e4:	d05a      	beq.n	801e49c <rmw_validate_full_topic_name+0xc4>
 801e3e6:	4604      	mov	r4, r0
 801e3e8:	4616      	mov	r6, r2
 801e3ea:	f7e1 ff83 	bl	80002f4 <strlen>
 801e3ee:	b150      	cbz	r0, 801e406 <rmw_validate_full_topic_name+0x2e>
 801e3f0:	7823      	ldrb	r3, [r4, #0]
 801e3f2:	2b2f      	cmp	r3, #47	@ 0x2f
 801e3f4:	d00e      	beq.n	801e414 <rmw_validate_full_topic_name+0x3c>
 801e3f6:	2302      	movs	r3, #2
 801e3f8:	602b      	str	r3, [r5, #0]
 801e3fa:	b146      	cbz	r6, 801e40e <rmw_validate_full_topic_name+0x36>
 801e3fc:	2300      	movs	r3, #0
 801e3fe:	4618      	mov	r0, r3
 801e400:	6033      	str	r3, [r6, #0]
 801e402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e406:	2301      	movs	r3, #1
 801e408:	602b      	str	r3, [r5, #0]
 801e40a:	2e00      	cmp	r6, #0
 801e40c:	d1f6      	bne.n	801e3fc <rmw_validate_full_topic_name+0x24>
 801e40e:	2000      	movs	r0, #0
 801e410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e414:	1e43      	subs	r3, r0, #1
 801e416:	5ce2      	ldrb	r2, [r4, r3]
 801e418:	2a2f      	cmp	r2, #47	@ 0x2f
 801e41a:	d041      	beq.n	801e4a0 <rmw_validate_full_topic_name+0xc8>
 801e41c:	1e62      	subs	r2, r4, #1
 801e41e:	f1c4 0e01 	rsb	lr, r4, #1
 801e422:	eb02 0800 	add.w	r8, r2, r0
 801e426:	eb0e 0702 	add.w	r7, lr, r2
 801e42a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801e42e:	f023 0120 	bic.w	r1, r3, #32
 801e432:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 801e436:	3941      	subs	r1, #65	@ 0x41
 801e438:	2919      	cmp	r1, #25
 801e43a:	d90f      	bls.n	801e45c <rmw_validate_full_topic_name+0x84>
 801e43c:	f1bc 0f0a 	cmp.w	ip, #10
 801e440:	d90c      	bls.n	801e45c <rmw_validate_full_topic_name+0x84>
 801e442:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 801e446:	fab3 f383 	clz	r3, r3
 801e44a:	095b      	lsrs	r3, r3, #5
 801e44c:	b933      	cbnz	r3, 801e45c <rmw_validate_full_topic_name+0x84>
 801e44e:	2204      	movs	r2, #4
 801e450:	602a      	str	r2, [r5, #0]
 801e452:	2e00      	cmp	r6, #0
 801e454:	d0db      	beq.n	801e40e <rmw_validate_full_topic_name+0x36>
 801e456:	4618      	mov	r0, r3
 801e458:	6037      	str	r7, [r6, #0]
 801e45a:	e7d2      	b.n	801e402 <rmw_validate_full_topic_name+0x2a>
 801e45c:	4542      	cmp	r2, r8
 801e45e:	d1e2      	bne.n	801e426 <rmw_validate_full_topic_name+0x4e>
 801e460:	2301      	movs	r3, #1
 801e462:	4f1a      	ldr	r7, [pc, #104]	@ (801e4cc <rmw_validate_full_topic_name+0xf4>)
 801e464:	e004      	b.n	801e470 <rmw_validate_full_topic_name+0x98>
 801e466:	4298      	cmp	r0, r3
 801e468:	f104 0401 	add.w	r4, r4, #1
 801e46c:	4613      	mov	r3, r2
 801e46e:	d91c      	bls.n	801e4aa <rmw_validate_full_topic_name+0xd2>
 801e470:	4298      	cmp	r0, r3
 801e472:	f103 0201 	add.w	r2, r3, #1
 801e476:	d0f6      	beq.n	801e466 <rmw_validate_full_topic_name+0x8e>
 801e478:	7821      	ldrb	r1, [r4, #0]
 801e47a:	292f      	cmp	r1, #47	@ 0x2f
 801e47c:	d1f3      	bne.n	801e466 <rmw_validate_full_topic_name+0x8e>
 801e47e:	7861      	ldrb	r1, [r4, #1]
 801e480:	292f      	cmp	r1, #47	@ 0x2f
 801e482:	d01e      	beq.n	801e4c2 <rmw_validate_full_topic_name+0xea>
 801e484:	5dc9      	ldrb	r1, [r1, r7]
 801e486:	0749      	lsls	r1, r1, #29
 801e488:	d5ed      	bpl.n	801e466 <rmw_validate_full_topic_name+0x8e>
 801e48a:	2206      	movs	r2, #6
 801e48c:	602a      	str	r2, [r5, #0]
 801e48e:	2e00      	cmp	r6, #0
 801e490:	d0bd      	beq.n	801e40e <rmw_validate_full_topic_name+0x36>
 801e492:	2000      	movs	r0, #0
 801e494:	6033      	str	r3, [r6, #0]
 801e496:	e7b4      	b.n	801e402 <rmw_validate_full_topic_name+0x2a>
 801e498:	200b      	movs	r0, #11
 801e49a:	4770      	bx	lr
 801e49c:	200b      	movs	r0, #11
 801e49e:	e7b0      	b.n	801e402 <rmw_validate_full_topic_name+0x2a>
 801e4a0:	2203      	movs	r2, #3
 801e4a2:	602a      	str	r2, [r5, #0]
 801e4a4:	2e00      	cmp	r6, #0
 801e4a6:	d1f4      	bne.n	801e492 <rmw_validate_full_topic_name+0xba>
 801e4a8:	e7b1      	b.n	801e40e <rmw_validate_full_topic_name+0x36>
 801e4aa:	28f7      	cmp	r0, #247	@ 0xf7
 801e4ac:	d803      	bhi.n	801e4b6 <rmw_validate_full_topic_name+0xde>
 801e4ae:	2300      	movs	r3, #0
 801e4b0:	4618      	mov	r0, r3
 801e4b2:	602b      	str	r3, [r5, #0]
 801e4b4:	e7a5      	b.n	801e402 <rmw_validate_full_topic_name+0x2a>
 801e4b6:	2307      	movs	r3, #7
 801e4b8:	602b      	str	r3, [r5, #0]
 801e4ba:	2e00      	cmp	r6, #0
 801e4bc:	d0a7      	beq.n	801e40e <rmw_validate_full_topic_name+0x36>
 801e4be:	23f6      	movs	r3, #246	@ 0xf6
 801e4c0:	e7e7      	b.n	801e492 <rmw_validate_full_topic_name+0xba>
 801e4c2:	2205      	movs	r2, #5
 801e4c4:	602a      	str	r2, [r5, #0]
 801e4c6:	2e00      	cmp	r6, #0
 801e4c8:	d1e3      	bne.n	801e492 <rmw_validate_full_topic_name+0xba>
 801e4ca:	e7a0      	b.n	801e40e <rmw_validate_full_topic_name+0x36>
 801e4cc:	08025b7a 	.word	0x08025b7a

0801e4d0 <rmw_validate_namespace_with_size>:
 801e4d0:	2800      	cmp	r0, #0
 801e4d2:	d043      	beq.n	801e55c <rmw_validate_namespace_with_size+0x8c>
 801e4d4:	b570      	push	{r4, r5, r6, lr}
 801e4d6:	4614      	mov	r4, r2
 801e4d8:	b0c2      	sub	sp, #264	@ 0x108
 801e4da:	b32a      	cbz	r2, 801e528 <rmw_validate_namespace_with_size+0x58>
 801e4dc:	2901      	cmp	r1, #1
 801e4de:	460d      	mov	r5, r1
 801e4e0:	461e      	mov	r6, r3
 801e4e2:	d102      	bne.n	801e4ea <rmw_validate_namespace_with_size+0x1a>
 801e4e4:	7803      	ldrb	r3, [r0, #0]
 801e4e6:	2b2f      	cmp	r3, #47	@ 0x2f
 801e4e8:	d012      	beq.n	801e510 <rmw_validate_namespace_with_size+0x40>
 801e4ea:	aa01      	add	r2, sp, #4
 801e4ec:	4669      	mov	r1, sp
 801e4ee:	f7ff ff73 	bl	801e3d8 <rmw_validate_full_topic_name>
 801e4f2:	b980      	cbnz	r0, 801e516 <rmw_validate_namespace_with_size+0x46>
 801e4f4:	9a00      	ldr	r2, [sp, #0]
 801e4f6:	b14a      	cbz	r2, 801e50c <rmw_validate_namespace_with_size+0x3c>
 801e4f8:	2a07      	cmp	r2, #7
 801e4fa:	d007      	beq.n	801e50c <rmw_validate_namespace_with_size+0x3c>
 801e4fc:	1e53      	subs	r3, r2, #1
 801e4fe:	2b05      	cmp	r3, #5
 801e500:	d82e      	bhi.n	801e560 <rmw_validate_namespace_with_size+0x90>
 801e502:	e8df f003 	tbb	[pc, r3]
 801e506:	1f1c      	.short	0x1f1c
 801e508:	14282522 	.word	0x14282522
 801e50c:	2df5      	cmp	r5, #245	@ 0xf5
 801e50e:	d804      	bhi.n	801e51a <rmw_validate_namespace_with_size+0x4a>
 801e510:	2300      	movs	r3, #0
 801e512:	4618      	mov	r0, r3
 801e514:	6023      	str	r3, [r4, #0]
 801e516:	b042      	add	sp, #264	@ 0x108
 801e518:	bd70      	pop	{r4, r5, r6, pc}
 801e51a:	2307      	movs	r3, #7
 801e51c:	6023      	str	r3, [r4, #0]
 801e51e:	2e00      	cmp	r6, #0
 801e520:	d0f9      	beq.n	801e516 <rmw_validate_namespace_with_size+0x46>
 801e522:	23f4      	movs	r3, #244	@ 0xf4
 801e524:	6033      	str	r3, [r6, #0]
 801e526:	e7f6      	b.n	801e516 <rmw_validate_namespace_with_size+0x46>
 801e528:	200b      	movs	r0, #11
 801e52a:	b042      	add	sp, #264	@ 0x108
 801e52c:	bd70      	pop	{r4, r5, r6, pc}
 801e52e:	2306      	movs	r3, #6
 801e530:	6023      	str	r3, [r4, #0]
 801e532:	2e00      	cmp	r6, #0
 801e534:	d0ef      	beq.n	801e516 <rmw_validate_namespace_with_size+0x46>
 801e536:	9b01      	ldr	r3, [sp, #4]
 801e538:	6033      	str	r3, [r6, #0]
 801e53a:	b042      	add	sp, #264	@ 0x108
 801e53c:	bd70      	pop	{r4, r5, r6, pc}
 801e53e:	2301      	movs	r3, #1
 801e540:	6023      	str	r3, [r4, #0]
 801e542:	e7f6      	b.n	801e532 <rmw_validate_namespace_with_size+0x62>
 801e544:	2302      	movs	r3, #2
 801e546:	6023      	str	r3, [r4, #0]
 801e548:	e7f3      	b.n	801e532 <rmw_validate_namespace_with_size+0x62>
 801e54a:	2303      	movs	r3, #3
 801e54c:	6023      	str	r3, [r4, #0]
 801e54e:	e7f0      	b.n	801e532 <rmw_validate_namespace_with_size+0x62>
 801e550:	2304      	movs	r3, #4
 801e552:	6023      	str	r3, [r4, #0]
 801e554:	e7ed      	b.n	801e532 <rmw_validate_namespace_with_size+0x62>
 801e556:	2305      	movs	r3, #5
 801e558:	6023      	str	r3, [r4, #0]
 801e55a:	e7ea      	b.n	801e532 <rmw_validate_namespace_with_size+0x62>
 801e55c:	200b      	movs	r0, #11
 801e55e:	4770      	bx	lr
 801e560:	4613      	mov	r3, r2
 801e562:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801e566:	4a03      	ldr	r2, [pc, #12]	@ (801e574 <rmw_validate_namespace_with_size+0xa4>)
 801e568:	a802      	add	r0, sp, #8
 801e56a:	f7ff fca1 	bl	801deb0 <rcutils_snprintf>
 801e56e:	2001      	movs	r0, #1
 801e570:	e7d1      	b.n	801e516 <rmw_validate_namespace_with_size+0x46>
 801e572:	bf00      	nop
 801e574:	080255f8 	.word	0x080255f8

0801e578 <rmw_validate_namespace>:
 801e578:	b168      	cbz	r0, 801e596 <rmw_validate_namespace+0x1e>
 801e57a:	b570      	push	{r4, r5, r6, lr}
 801e57c:	460d      	mov	r5, r1
 801e57e:	4616      	mov	r6, r2
 801e580:	4604      	mov	r4, r0
 801e582:	f7e1 feb7 	bl	80002f4 <strlen>
 801e586:	4633      	mov	r3, r6
 801e588:	4601      	mov	r1, r0
 801e58a:	462a      	mov	r2, r5
 801e58c:	4620      	mov	r0, r4
 801e58e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e592:	f7ff bf9d 	b.w	801e4d0 <rmw_validate_namespace_with_size>
 801e596:	200b      	movs	r0, #11
 801e598:	4770      	bx	lr
 801e59a:	bf00      	nop

0801e59c <rmw_namespace_validation_result_string>:
 801e59c:	2807      	cmp	r0, #7
 801e59e:	d803      	bhi.n	801e5a8 <rmw_namespace_validation_result_string+0xc>
 801e5a0:	4b02      	ldr	r3, [pc, #8]	@ (801e5ac <rmw_namespace_validation_result_string+0x10>)
 801e5a2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801e5a6:	4770      	bx	lr
 801e5a8:	4801      	ldr	r0, [pc, #4]	@ (801e5b0 <rmw_namespace_validation_result_string+0x14>)
 801e5aa:	4770      	bx	lr
 801e5ac:	080257f0 	.word	0x080257f0
 801e5b0:	08025648 	.word	0x08025648

0801e5b4 <rmw_validate_node_name>:
 801e5b4:	2800      	cmp	r0, #0
 801e5b6:	d042      	beq.n	801e63e <rmw_validate_node_name+0x8a>
 801e5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e5bc:	460d      	mov	r5, r1
 801e5be:	2900      	cmp	r1, #0
 801e5c0:	d03f      	beq.n	801e642 <rmw_validate_node_name+0x8e>
 801e5c2:	4604      	mov	r4, r0
 801e5c4:	4616      	mov	r6, r2
 801e5c6:	f7e1 fe95 	bl	80002f4 <strlen>
 801e5ca:	b310      	cbz	r0, 801e612 <rmw_validate_node_name+0x5e>
 801e5cc:	1e63      	subs	r3, r4, #1
 801e5ce:	f1c4 0101 	rsb	r1, r4, #1
 801e5d2:	eb03 0800 	add.w	r8, r3, r0
 801e5d6:	18cf      	adds	r7, r1, r3
 801e5d8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801e5dc:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 801e5e0:	f02e 0c20 	bic.w	ip, lr, #32
 801e5e4:	2a09      	cmp	r2, #9
 801e5e6:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801e5ea:	d905      	bls.n	801e5f8 <rmw_validate_node_name+0x44>
 801e5ec:	f1bc 0f19 	cmp.w	ip, #25
 801e5f0:	d902      	bls.n	801e5f8 <rmw_validate_node_name+0x44>
 801e5f2:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801e5f6:	d114      	bne.n	801e622 <rmw_validate_node_name+0x6e>
 801e5f8:	4598      	cmp	r8, r3
 801e5fa:	d1ec      	bne.n	801e5d6 <rmw_validate_node_name+0x22>
 801e5fc:	7822      	ldrb	r2, [r4, #0]
 801e5fe:	4b16      	ldr	r3, [pc, #88]	@ (801e658 <rmw_validate_node_name+0xa4>)
 801e600:	5cd3      	ldrb	r3, [r2, r3]
 801e602:	f013 0304 	ands.w	r3, r3, #4
 801e606:	d113      	bne.n	801e630 <rmw_validate_node_name+0x7c>
 801e608:	28ff      	cmp	r0, #255	@ 0xff
 801e60a:	d81c      	bhi.n	801e646 <rmw_validate_node_name+0x92>
 801e60c:	4618      	mov	r0, r3
 801e60e:	602b      	str	r3, [r5, #0]
 801e610:	e00c      	b.n	801e62c <rmw_validate_node_name+0x78>
 801e612:	2301      	movs	r3, #1
 801e614:	602b      	str	r3, [r5, #0]
 801e616:	b17e      	cbz	r6, 801e638 <rmw_validate_node_name+0x84>
 801e618:	2300      	movs	r3, #0
 801e61a:	4618      	mov	r0, r3
 801e61c:	6033      	str	r3, [r6, #0]
 801e61e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e622:	2302      	movs	r3, #2
 801e624:	602b      	str	r3, [r5, #0]
 801e626:	b13e      	cbz	r6, 801e638 <rmw_validate_node_name+0x84>
 801e628:	2000      	movs	r0, #0
 801e62a:	6037      	str	r7, [r6, #0]
 801e62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e630:	2303      	movs	r3, #3
 801e632:	602b      	str	r3, [r5, #0]
 801e634:	2e00      	cmp	r6, #0
 801e636:	d1ef      	bne.n	801e618 <rmw_validate_node_name+0x64>
 801e638:	2000      	movs	r0, #0
 801e63a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e63e:	200b      	movs	r0, #11
 801e640:	4770      	bx	lr
 801e642:	200b      	movs	r0, #11
 801e644:	e7f2      	b.n	801e62c <rmw_validate_node_name+0x78>
 801e646:	2204      	movs	r2, #4
 801e648:	602a      	str	r2, [r5, #0]
 801e64a:	2e00      	cmp	r6, #0
 801e64c:	d0f4      	beq.n	801e638 <rmw_validate_node_name+0x84>
 801e64e:	22fe      	movs	r2, #254	@ 0xfe
 801e650:	4618      	mov	r0, r3
 801e652:	6032      	str	r2, [r6, #0]
 801e654:	e7ea      	b.n	801e62c <rmw_validate_node_name+0x78>
 801e656:	bf00      	nop
 801e658:	08025b7a 	.word	0x08025b7a

0801e65c <rmw_node_name_validation_result_string>:
 801e65c:	2804      	cmp	r0, #4
 801e65e:	d803      	bhi.n	801e668 <rmw_node_name_validation_result_string+0xc>
 801e660:	4b02      	ldr	r3, [pc, #8]	@ (801e66c <rmw_node_name_validation_result_string+0x10>)
 801e662:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801e666:	4770      	bx	lr
 801e668:	4801      	ldr	r0, [pc, #4]	@ (801e670 <rmw_node_name_validation_result_string+0x14>)
 801e66a:	4770      	bx	lr
 801e66c:	080258fc 	.word	0x080258fc
 801e670:	08025810 	.word	0x08025810

0801e674 <get_memory>:
 801e674:	4603      	mov	r3, r0
 801e676:	6840      	ldr	r0, [r0, #4]
 801e678:	b158      	cbz	r0, 801e692 <get_memory+0x1e>
 801e67a:	6842      	ldr	r2, [r0, #4]
 801e67c:	605a      	str	r2, [r3, #4]
 801e67e:	b10a      	cbz	r2, 801e684 <get_memory+0x10>
 801e680:	2100      	movs	r1, #0
 801e682:	6011      	str	r1, [r2, #0]
 801e684:	681a      	ldr	r2, [r3, #0]
 801e686:	6042      	str	r2, [r0, #4]
 801e688:	b102      	cbz	r2, 801e68c <get_memory+0x18>
 801e68a:	6010      	str	r0, [r2, #0]
 801e68c:	2200      	movs	r2, #0
 801e68e:	6002      	str	r2, [r0, #0]
 801e690:	6018      	str	r0, [r3, #0]
 801e692:	4770      	bx	lr

0801e694 <put_memory>:
 801e694:	680b      	ldr	r3, [r1, #0]
 801e696:	b10b      	cbz	r3, 801e69c <put_memory+0x8>
 801e698:	684a      	ldr	r2, [r1, #4]
 801e69a:	605a      	str	r2, [r3, #4]
 801e69c:	684a      	ldr	r2, [r1, #4]
 801e69e:	b102      	cbz	r2, 801e6a2 <put_memory+0xe>
 801e6a0:	6013      	str	r3, [r2, #0]
 801e6a2:	6803      	ldr	r3, [r0, #0]
 801e6a4:	428b      	cmp	r3, r1
 801e6a6:	6843      	ldr	r3, [r0, #4]
 801e6a8:	bf08      	it	eq
 801e6aa:	6002      	streq	r2, [r0, #0]
 801e6ac:	604b      	str	r3, [r1, #4]
 801e6ae:	b103      	cbz	r3, 801e6b2 <put_memory+0x1e>
 801e6b0:	6019      	str	r1, [r3, #0]
 801e6b2:	2300      	movs	r3, #0
 801e6b4:	600b      	str	r3, [r1, #0]
 801e6b6:	6041      	str	r1, [r0, #4]
 801e6b8:	4770      	bx	lr
 801e6ba:	bf00      	nop

0801e6bc <rmw_destroy_client>:
 801e6bc:	b570      	push	{r4, r5, r6, lr}
 801e6be:	b128      	cbz	r0, 801e6cc <rmw_destroy_client+0x10>
 801e6c0:	4604      	mov	r4, r0
 801e6c2:	6800      	ldr	r0, [r0, #0]
 801e6c4:	460d      	mov	r5, r1
 801e6c6:	f7f7 fdb7 	bl	8016238 <is_uxrce_rmw_identifier_valid>
 801e6ca:	b910      	cbnz	r0, 801e6d2 <rmw_destroy_client+0x16>
 801e6cc:	2401      	movs	r4, #1
 801e6ce:	4620      	mov	r0, r4
 801e6d0:	bd70      	pop	{r4, r5, r6, pc}
 801e6d2:	6863      	ldr	r3, [r4, #4]
 801e6d4:	2b00      	cmp	r3, #0
 801e6d6:	d0f9      	beq.n	801e6cc <rmw_destroy_client+0x10>
 801e6d8:	2d00      	cmp	r5, #0
 801e6da:	d0f7      	beq.n	801e6cc <rmw_destroy_client+0x10>
 801e6dc:	6828      	ldr	r0, [r5, #0]
 801e6de:	f7f7 fdab 	bl	8016238 <is_uxrce_rmw_identifier_valid>
 801e6e2:	2800      	cmp	r0, #0
 801e6e4:	d0f2      	beq.n	801e6cc <rmw_destroy_client+0x10>
 801e6e6:	686e      	ldr	r6, [r5, #4]
 801e6e8:	2e00      	cmp	r6, #0
 801e6ea:	d0ef      	beq.n	801e6cc <rmw_destroy_client+0x10>
 801e6ec:	6864      	ldr	r4, [r4, #4]
 801e6ee:	6932      	ldr	r2, [r6, #16]
 801e6f0:	6920      	ldr	r0, [r4, #16]
 801e6f2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801e6f6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801e6fa:	6819      	ldr	r1, [r3, #0]
 801e6fc:	f002 faca 	bl	8020c94 <uxr_buffer_cancel_data>
 801e700:	4602      	mov	r2, r0
 801e702:	6920      	ldr	r0, [r4, #16]
 801e704:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801e708:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801e70c:	f7f7 fc82 	bl	8016014 <run_xrce_session>
 801e710:	6920      	ldr	r0, [r4, #16]
 801e712:	6932      	ldr	r2, [r6, #16]
 801e714:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801e718:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801e71c:	6819      	ldr	r1, [r3, #0]
 801e71e:	f7f8 fb5f 	bl	8016de0 <uxr_buffer_delete_entity>
 801e722:	4602      	mov	r2, r0
 801e724:	6920      	ldr	r0, [r4, #16]
 801e726:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801e72a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801e72e:	f7f7 fc71 	bl	8016014 <run_xrce_session>
 801e732:	4603      	mov	r3, r0
 801e734:	4628      	mov	r0, r5
 801e736:	2b00      	cmp	r3, #0
 801e738:	bf14      	ite	ne
 801e73a:	2400      	movne	r4, #0
 801e73c:	2402      	moveq	r4, #2
 801e73e:	f7f7 fb45 	bl	8015dcc <rmw_uxrce_fini_client_memory>
 801e742:	e7c4      	b.n	801e6ce <rmw_destroy_client+0x12>

0801e744 <rmw_get_implementation_identifier>:
 801e744:	4b01      	ldr	r3, [pc, #4]	@ (801e74c <rmw_get_implementation_identifier+0x8>)
 801e746:	6818      	ldr	r0, [r3, #0]
 801e748:	4770      	bx	lr
 801e74a:	bf00      	nop
 801e74c:	08025928 	.word	0x08025928

0801e750 <rmw_init_options_init>:
 801e750:	b084      	sub	sp, #16
 801e752:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e754:	b083      	sub	sp, #12
 801e756:	ad09      	add	r5, sp, #36	@ 0x24
 801e758:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801e75c:	b130      	cbz	r0, 801e76c <rmw_init_options_init+0x1c>
 801e75e:	4604      	mov	r4, r0
 801e760:	4628      	mov	r0, r5
 801e762:	f7f6 fea1 	bl	80154a8 <rcutils_allocator_is_valid>
 801e766:	b108      	cbz	r0, 801e76c <rmw_init_options_init+0x1c>
 801e768:	68a6      	ldr	r6, [r4, #8]
 801e76a:	b12e      	cbz	r6, 801e778 <rmw_init_options_init+0x28>
 801e76c:	200b      	movs	r0, #11
 801e76e:	b003      	add	sp, #12
 801e770:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e774:	b004      	add	sp, #16
 801e776:	4770      	bx	lr
 801e778:	2200      	movs	r2, #0
 801e77a:	2300      	movs	r3, #0
 801e77c:	f104 0c20 	add.w	ip, r4, #32
 801e780:	f8df e098 	ldr.w	lr, [pc, #152]	@ 801e81c <rmw_init_options_init+0xcc>
 801e784:	466f      	mov	r7, sp
 801e786:	e9c4 2300 	strd	r2, r3, [r4]
 801e78a:	4b20      	ldr	r3, [pc, #128]	@ (801e80c <rmw_init_options_init+0xbc>)
 801e78c:	681b      	ldr	r3, [r3, #0]
 801e78e:	60a3      	str	r3, [r4, #8]
 801e790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e792:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e796:	682b      	ldr	r3, [r5, #0]
 801e798:	4638      	mov	r0, r7
 801e79a:	f8cc 3000 	str.w	r3, [ip]
 801e79e:	f8c4 e01c 	str.w	lr, [r4, #28]
 801e7a2:	60e6      	str	r6, [r4, #12]
 801e7a4:	f7ff fd64 	bl	801e270 <rmw_get_default_security_options>
 801e7a8:	f104 0310 	add.w	r3, r4, #16
 801e7ac:	2203      	movs	r2, #3
 801e7ae:	e897 0003 	ldmia.w	r7, {r0, r1}
 801e7b2:	e883 0003 	stmia.w	r3, {r0, r1}
 801e7b6:	4816      	ldr	r0, [pc, #88]	@ (801e810 <rmw_init_options_init+0xc0>)
 801e7b8:	4916      	ldr	r1, [pc, #88]	@ (801e814 <rmw_init_options_init+0xc4>)
 801e7ba:	7626      	strb	r6, [r4, #24]
 801e7bc:	f7f7 fa46 	bl	8015c4c <rmw_uxrce_init_init_options_impl_memory>
 801e7c0:	4813      	ldr	r0, [pc, #76]	@ (801e810 <rmw_init_options_init+0xc0>)
 801e7c2:	f7ff ff57 	bl	801e674 <get_memory>
 801e7c6:	b1f0      	cbz	r0, 801e806 <rmw_init_options_init+0xb6>
 801e7c8:	4a13      	ldr	r2, [pc, #76]	@ (801e818 <rmw_init_options_init+0xc8>)
 801e7ca:	6883      	ldr	r3, [r0, #8]
 801e7cc:	6851      	ldr	r1, [r2, #4]
 801e7ce:	6363      	str	r3, [r4, #52]	@ 0x34
 801e7d0:	7810      	ldrb	r0, [r2, #0]
 801e7d2:	6159      	str	r1, [r3, #20]
 801e7d4:	68d1      	ldr	r1, [r2, #12]
 801e7d6:	7418      	strb	r0, [r3, #16]
 801e7d8:	61d9      	str	r1, [r3, #28]
 801e7da:	6911      	ldr	r1, [r2, #16]
 801e7dc:	6219      	str	r1, [r3, #32]
 801e7de:	6951      	ldr	r1, [r2, #20]
 801e7e0:	6892      	ldr	r2, [r2, #8]
 801e7e2:	6259      	str	r1, [r3, #36]	@ 0x24
 801e7e4:	619a      	str	r2, [r3, #24]
 801e7e6:	f7fa fe5d 	bl	80194a4 <uxr_nanos>
 801e7ea:	f003 f9bd 	bl	8021b68 <srand>
 801e7ee:	f003 f9e9 	bl	8021bc4 <rand>
 801e7f2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e7f4:	6298      	str	r0, [r3, #40]	@ 0x28
 801e7f6:	2800      	cmp	r0, #0
 801e7f8:	d0f9      	beq.n	801e7ee <rmw_init_options_init+0x9e>
 801e7fa:	2000      	movs	r0, #0
 801e7fc:	b003      	add	sp, #12
 801e7fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e802:	b004      	add	sp, #16
 801e804:	4770      	bx	lr
 801e806:	2001      	movs	r0, #1
 801e808:	e7b1      	b.n	801e76e <rmw_init_options_init+0x1e>
 801e80a:	bf00      	nop
 801e80c:	08025928 	.word	0x08025928
 801e810:	240691e4 	.word	0x240691e4
 801e814:	24064a80 	.word	0x24064a80
 801e818:	2406490c 	.word	0x2406490c
 801e81c:	08025334 	.word	0x08025334

0801e820 <rmw_init_options_copy>:
 801e820:	2800      	cmp	r0, #0
 801e822:	d047      	beq.n	801e8b4 <rmw_init_options_copy+0x94>
 801e824:	b570      	push	{r4, r5, r6, lr}
 801e826:	460d      	mov	r5, r1
 801e828:	b149      	cbz	r1, 801e83e <rmw_init_options_copy+0x1e>
 801e82a:	4604      	mov	r4, r0
 801e82c:	6880      	ldr	r0, [r0, #8]
 801e82e:	b120      	cbz	r0, 801e83a <rmw_init_options_copy+0x1a>
 801e830:	4b22      	ldr	r3, [pc, #136]	@ (801e8bc <rmw_init_options_copy+0x9c>)
 801e832:	6819      	ldr	r1, [r3, #0]
 801e834:	f7e1 fd54 	bl	80002e0 <strcmp>
 801e838:	bba8      	cbnz	r0, 801e8a6 <rmw_init_options_copy+0x86>
 801e83a:	68ab      	ldr	r3, [r5, #8]
 801e83c:	b11b      	cbz	r3, 801e846 <rmw_init_options_copy+0x26>
 801e83e:	f04f 0c0b 	mov.w	ip, #11
 801e842:	4660      	mov	r0, ip
 801e844:	bd70      	pop	{r4, r5, r6, pc}
 801e846:	4623      	mov	r3, r4
 801e848:	462a      	mov	r2, r5
 801e84a:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 801e84e:	f8d3 e000 	ldr.w	lr, [r3]
 801e852:	3310      	adds	r3, #16
 801e854:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 801e858:	3210      	adds	r2, #16
 801e85a:	f853 0c08 	ldr.w	r0, [r3, #-8]
 801e85e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801e862:	42b3      	cmp	r3, r6
 801e864:	f842 ec10 	str.w	lr, [r2, #-16]
 801e868:	f842 cc0c 	str.w	ip, [r2, #-12]
 801e86c:	f842 0c08 	str.w	r0, [r2, #-8]
 801e870:	f842 1c04 	str.w	r1, [r2, #-4]
 801e874:	d1eb      	bne.n	801e84e <rmw_init_options_copy+0x2e>
 801e876:	6819      	ldr	r1, [r3, #0]
 801e878:	685b      	ldr	r3, [r3, #4]
 801e87a:	4811      	ldr	r0, [pc, #68]	@ (801e8c0 <rmw_init_options_copy+0xa0>)
 801e87c:	6011      	str	r1, [r2, #0]
 801e87e:	6053      	str	r3, [r2, #4]
 801e880:	f7ff fef8 	bl	801e674 <get_memory>
 801e884:	b198      	cbz	r0, 801e8ae <rmw_init_options_copy+0x8e>
 801e886:	6883      	ldr	r3, [r0, #8]
 801e888:	f04f 0c00 	mov.w	ip, #0
 801e88c:	636b      	str	r3, [r5, #52]	@ 0x34
 801e88e:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 801e890:	f103 0410 	add.w	r4, r3, #16
 801e894:	3510      	adds	r5, #16
 801e896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e89a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e89e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801e8a2:	4660      	mov	r0, ip
 801e8a4:	bd70      	pop	{r4, r5, r6, pc}
 801e8a6:	f04f 0c0c 	mov.w	ip, #12
 801e8aa:	4660      	mov	r0, ip
 801e8ac:	bd70      	pop	{r4, r5, r6, pc}
 801e8ae:	f04f 0c01 	mov.w	ip, #1
 801e8b2:	e7c6      	b.n	801e842 <rmw_init_options_copy+0x22>
 801e8b4:	f04f 0c0b 	mov.w	ip, #11
 801e8b8:	4660      	mov	r0, ip
 801e8ba:	4770      	bx	lr
 801e8bc:	08025928 	.word	0x08025928
 801e8c0:	240691e4 	.word	0x240691e4

0801e8c4 <rmw_init_options_fini>:
 801e8c4:	b510      	push	{r4, lr}
 801e8c6:	b08e      	sub	sp, #56	@ 0x38
 801e8c8:	b388      	cbz	r0, 801e92e <rmw_init_options_fini+0x6a>
 801e8ca:	4604      	mov	r4, r0
 801e8cc:	3020      	adds	r0, #32
 801e8ce:	f7f6 fdeb 	bl	80154a8 <rcutils_allocator_is_valid>
 801e8d2:	b360      	cbz	r0, 801e92e <rmw_init_options_fini+0x6a>
 801e8d4:	68a0      	ldr	r0, [r4, #8]
 801e8d6:	b120      	cbz	r0, 801e8e2 <rmw_init_options_fini+0x1e>
 801e8d8:	4b1a      	ldr	r3, [pc, #104]	@ (801e944 <rmw_init_options_fini+0x80>)
 801e8da:	6819      	ldr	r1, [r3, #0]
 801e8dc:	f7e1 fd00 	bl	80002e0 <strcmp>
 801e8e0:	bb68      	cbnz	r0, 801e93e <rmw_init_options_fini+0x7a>
 801e8e2:	4b19      	ldr	r3, [pc, #100]	@ (801e948 <rmw_init_options_fini+0x84>)
 801e8e4:	6819      	ldr	r1, [r3, #0]
 801e8e6:	b331      	cbz	r1, 801e936 <rmw_init_options_fini+0x72>
 801e8e8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801e8ea:	e001      	b.n	801e8f0 <rmw_init_options_fini+0x2c>
 801e8ec:	6849      	ldr	r1, [r1, #4]
 801e8ee:	b311      	cbz	r1, 801e936 <rmw_init_options_fini+0x72>
 801e8f0:	688b      	ldr	r3, [r1, #8]
 801e8f2:	429a      	cmp	r2, r3
 801e8f4:	d1fa      	bne.n	801e8ec <rmw_init_options_fini+0x28>
 801e8f6:	4814      	ldr	r0, [pc, #80]	@ (801e948 <rmw_init_options_fini+0x84>)
 801e8f8:	f7ff fecc 	bl	801e694 <put_memory>
 801e8fc:	4668      	mov	r0, sp
 801e8fe:	f7ff fca7 	bl	801e250 <rmw_get_zero_initialized_init_options>
 801e902:	46ee      	mov	lr, sp
 801e904:	46a4      	mov	ip, r4
 801e906:	2400      	movs	r4, #0
 801e908:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e90c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e910:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e914:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e918:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e91c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e920:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801e924:	e88c 0003 	stmia.w	ip, {r0, r1}
 801e928:	4620      	mov	r0, r4
 801e92a:	b00e      	add	sp, #56	@ 0x38
 801e92c:	bd10      	pop	{r4, pc}
 801e92e:	240b      	movs	r4, #11
 801e930:	4620      	mov	r0, r4
 801e932:	b00e      	add	sp, #56	@ 0x38
 801e934:	bd10      	pop	{r4, pc}
 801e936:	2401      	movs	r4, #1
 801e938:	4620      	mov	r0, r4
 801e93a:	b00e      	add	sp, #56	@ 0x38
 801e93c:	bd10      	pop	{r4, pc}
 801e93e:	240c      	movs	r4, #12
 801e940:	e7f2      	b.n	801e928 <rmw_init_options_fini+0x64>
 801e942:	bf00      	nop
 801e944:	08025928 	.word	0x08025928
 801e948:	240691e4 	.word	0x240691e4

0801e94c <rmw_init>:
 801e94c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e950:	b083      	sub	sp, #12
 801e952:	2800      	cmp	r0, #0
 801e954:	f000 80d3 	beq.w	801eafe <rmw_init+0x1b2>
 801e958:	460e      	mov	r6, r1
 801e95a:	2900      	cmp	r1, #0
 801e95c:	f000 80cf 	beq.w	801eafe <rmw_init+0x1b2>
 801e960:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801e962:	4605      	mov	r5, r0
 801e964:	2b00      	cmp	r3, #0
 801e966:	f000 80ca 	beq.w	801eafe <rmw_init+0x1b2>
 801e96a:	4b78      	ldr	r3, [pc, #480]	@ (801eb4c <rmw_init+0x200>)
 801e96c:	6880      	ldr	r0, [r0, #8]
 801e96e:	681f      	ldr	r7, [r3, #0]
 801e970:	b128      	cbz	r0, 801e97e <rmw_init+0x32>
 801e972:	4639      	mov	r1, r7
 801e974:	f7e1 fcb4 	bl	80002e0 <strcmp>
 801e978:	2800      	cmp	r0, #0
 801e97a:	f040 80ca 	bne.w	801eb12 <rmw_init+0x1c6>
 801e97e:	4c74      	ldr	r4, [pc, #464]	@ (801eb50 <rmw_init+0x204>)
 801e980:	f04f 0800 	mov.w	r8, #0
 801e984:	4973      	ldr	r1, [pc, #460]	@ (801eb54 <rmw_init+0x208>)
 801e986:	4874      	ldr	r0, [pc, #464]	@ (801eb58 <rmw_init+0x20c>)
 801e988:	e9d5 2300 	ldrd	r2, r3, [r5]
 801e98c:	60b7      	str	r7, [r6, #8]
 801e98e:	e9c6 2300 	strd	r2, r3, [r6]
 801e992:	68eb      	ldr	r3, [r5, #12]
 801e994:	2201      	movs	r2, #1
 801e996:	64b3      	str	r3, [r6, #72]	@ 0x48
 801e998:	f7f7 f8f8 	bl	8015b8c <rmw_uxrce_init_session_memory>
 801e99c:	4620      	mov	r0, r4
 801e99e:	2204      	movs	r2, #4
 801e9a0:	496e      	ldr	r1, [pc, #440]	@ (801eb5c <rmw_init+0x210>)
 801e9a2:	f7f7 f933 	bl	8015c0c <rmw_uxrce_init_static_input_buffer_memory>
 801e9a6:	486c      	ldr	r0, [pc, #432]	@ (801eb58 <rmw_init+0x20c>)
 801e9a8:	f884 800d 	strb.w	r8, [r4, #13]
 801e9ac:	f7ff fe62 	bl	801e674 <get_memory>
 801e9b0:	2800      	cmp	r0, #0
 801e9b2:	f000 80a9 	beq.w	801eb08 <rmw_init+0x1bc>
 801e9b6:	6884      	ldr	r4, [r0, #8]
 801e9b8:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 801e9ba:	f104 0910 	add.w	r9, r4, #16
 801e9be:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 801e9c0:	f890 c010 	ldrb.w	ip, [r0, #16]
 801e9c4:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 801e9c8:	9101      	str	r1, [sp, #4]
 801e9ca:	4661      	mov	r1, ip
 801e9cc:	6a00      	ldr	r0, [r0, #32]
 801e9ce:	9000      	str	r0, [sp, #0]
 801e9d0:	4648      	mov	r0, r9
 801e9d2:	f7f8 fcbd 	bl	8017350 <uxr_set_custom_transport_callbacks>
 801e9d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801e9da:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 801e9de:	4960      	ldr	r1, [pc, #384]	@ (801eb60 <rmw_init+0x214>)
 801e9e0:	4860      	ldr	r0, [pc, #384]	@ (801eb64 <rmw_init+0x218>)
 801e9e2:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 801e9e6:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 801e9ea:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 801e9ee:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 801e9f2:	2201      	movs	r2, #1
 801e9f4:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 801e9f8:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 801e9fc:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 801ea00:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 801ea04:	64f4      	str	r4, [r6, #76]	@ 0x4c
 801ea06:	f7f7 f8a1 	bl	8015b4c <rmw_uxrce_init_node_memory>
 801ea0a:	2205      	movs	r2, #5
 801ea0c:	4956      	ldr	r1, [pc, #344]	@ (801eb68 <rmw_init+0x21c>)
 801ea0e:	4857      	ldr	r0, [pc, #348]	@ (801eb6c <rmw_init+0x220>)
 801ea10:	f7f7 f87c 	bl	8015b0c <rmw_uxrce_init_subscription_memory>
 801ea14:	220a      	movs	r2, #10
 801ea16:	4956      	ldr	r1, [pc, #344]	@ (801eb70 <rmw_init+0x224>)
 801ea18:	4856      	ldr	r0, [pc, #344]	@ (801eb74 <rmw_init+0x228>)
 801ea1a:	f7f7 f857 	bl	8015acc <rmw_uxrce_init_publisher_memory>
 801ea1e:	2201      	movs	r2, #1
 801ea20:	4955      	ldr	r1, [pc, #340]	@ (801eb78 <rmw_init+0x22c>)
 801ea22:	4856      	ldr	r0, [pc, #344]	@ (801eb7c <rmw_init+0x230>)
 801ea24:	f7f7 f812 	bl	8015a4c <rmw_uxrce_init_service_memory>
 801ea28:	2201      	movs	r2, #1
 801ea2a:	4955      	ldr	r1, [pc, #340]	@ (801eb80 <rmw_init+0x234>)
 801ea2c:	4855      	ldr	r0, [pc, #340]	@ (801eb84 <rmw_init+0x238>)
 801ea2e:	f7f7 f82d 	bl	8015a8c <rmw_uxrce_init_client_memory>
 801ea32:	220f      	movs	r2, #15
 801ea34:	4954      	ldr	r1, [pc, #336]	@ (801eb88 <rmw_init+0x23c>)
 801ea36:	4855      	ldr	r0, [pc, #340]	@ (801eb8c <rmw_init+0x240>)
 801ea38:	f7f7 f8c8 	bl	8015bcc <rmw_uxrce_init_topic_memory>
 801ea3c:	2203      	movs	r2, #3
 801ea3e:	4954      	ldr	r1, [pc, #336]	@ (801eb90 <rmw_init+0x244>)
 801ea40:	4854      	ldr	r0, [pc, #336]	@ (801eb94 <rmw_init+0x248>)
 801ea42:	f7f7 f903 	bl	8015c4c <rmw_uxrce_init_init_options_impl_memory>
 801ea46:	2204      	movs	r2, #4
 801ea48:	4953      	ldr	r1, [pc, #332]	@ (801eb98 <rmw_init+0x24c>)
 801ea4a:	4854      	ldr	r0, [pc, #336]	@ (801eb9c <rmw_init+0x250>)
 801ea4c:	f7f7 f91e 	bl	8015c8c <rmw_uxrce_init_wait_set_memory>
 801ea50:	4953      	ldr	r1, [pc, #332]	@ (801eba0 <rmw_init+0x254>)
 801ea52:	4854      	ldr	r0, [pc, #336]	@ (801eba4 <rmw_init+0x258>)
 801ea54:	2204      	movs	r2, #4
 801ea56:	f7f7 f939 	bl	8015ccc <rmw_uxrce_init_guard_condition_memory>
 801ea5a:	4642      	mov	r2, r8
 801ea5c:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 801ea5e:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801ea60:	f7f6 ffbc 	bl	80159dc <rmw_uxrce_transport_init>
 801ea64:	4607      	mov	r7, r0
 801ea66:	2800      	cmp	r0, #0
 801ea68:	d158      	bne.n	801eb1c <rmw_init+0x1d0>
 801ea6a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801ea6c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 801ea70:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 801ea74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801ea76:	4628      	mov	r0, r5
 801ea78:	f7f8 fe6e 	bl	8017758 <uxr_init_session>
 801ea7c:	4622      	mov	r2, r4
 801ea7e:	494a      	ldr	r1, [pc, #296]	@ (801eba8 <rmw_init+0x25c>)
 801ea80:	4628      	mov	r0, r5
 801ea82:	f7f8 fe8d 	bl	80177a0 <uxr_set_topic_callback>
 801ea86:	463a      	mov	r2, r7
 801ea88:	4948      	ldr	r1, [pc, #288]	@ (801ebac <rmw_init+0x260>)
 801ea8a:	4628      	mov	r0, r5
 801ea8c:	f7f8 fe84 	bl	8017798 <uxr_set_status_callback>
 801ea90:	463a      	mov	r2, r7
 801ea92:	4947      	ldr	r1, [pc, #284]	@ (801ebb0 <rmw_init+0x264>)
 801ea94:	4628      	mov	r0, r5
 801ea96:	f7f8 fe87 	bl	80177a8 <uxr_set_request_callback>
 801ea9a:	463a      	mov	r2, r7
 801ea9c:	4945      	ldr	r1, [pc, #276]	@ (801ebb4 <rmw_init+0x268>)
 801ea9e:	4628      	mov	r0, r5
 801eaa0:	f7f8 fe86 	bl	80177b0 <uxr_set_reply_callback>
 801eaa4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801eaa8:	2304      	movs	r3, #4
 801eaaa:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 801eaae:	0092      	lsls	r2, r2, #2
 801eab0:	4628      	mov	r0, r5
 801eab2:	f7f8 febd 	bl	8017830 <uxr_create_input_reliable_stream>
 801eab6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801eaba:	2304      	movs	r3, #4
 801eabc:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 801eac0:	0092      	lsls	r2, r2, #2
 801eac2:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801eac6:	4628      	mov	r0, r5
 801eac8:	f7f8 fe88 	bl	80177dc <uxr_create_output_reliable_stream>
 801eacc:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 801ead0:	4628      	mov	r0, r5
 801ead2:	f7f8 fea7 	bl	8017824 <uxr_create_input_best_effort_stream>
 801ead6:	f241 3194 	movw	r1, #5012	@ 0x1394
 801eada:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801eade:	4628      	mov	r0, r5
 801eae0:	4421      	add	r1, r4
 801eae2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801eae6:	f7f8 fe67 	bl	80177b8 <uxr_create_output_best_effort_stream>
 801eaea:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801eaee:	4628      	mov	r0, r5
 801eaf0:	f7f9 fc70 	bl	80183d4 <uxr_create_session>
 801eaf4:	b1f8      	cbz	r0, 801eb36 <rmw_init+0x1ea>
 801eaf6:	4638      	mov	r0, r7
 801eaf8:	b003      	add	sp, #12
 801eafa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eafe:	270b      	movs	r7, #11
 801eb00:	4638      	mov	r0, r7
 801eb02:	b003      	add	sp, #12
 801eb04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb08:	2701      	movs	r7, #1
 801eb0a:	4638      	mov	r0, r7
 801eb0c:	b003      	add	sp, #12
 801eb0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb12:	270c      	movs	r7, #12
 801eb14:	4638      	mov	r0, r7
 801eb16:	b003      	add	sp, #12
 801eb18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb1c:	4648      	mov	r0, r9
 801eb1e:	f7f8 fc55 	bl	80173cc <uxr_close_custom_transport>
 801eb22:	4621      	mov	r1, r4
 801eb24:	480c      	ldr	r0, [pc, #48]	@ (801eb58 <rmw_init+0x20c>)
 801eb26:	f7ff fdb5 	bl	801e694 <put_memory>
 801eb2a:	4638      	mov	r0, r7
 801eb2c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 801eb30:	b003      	add	sp, #12
 801eb32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb36:	4648      	mov	r0, r9
 801eb38:	f7f8 fc48 	bl	80173cc <uxr_close_custom_transport>
 801eb3c:	4621      	mov	r1, r4
 801eb3e:	4806      	ldr	r0, [pc, #24]	@ (801eb58 <rmw_init+0x20c>)
 801eb40:	f7ff fda8 	bl	801e694 <put_memory>
 801eb44:	64f7      	str	r7, [r6, #76]	@ 0x4c
 801eb46:	2701      	movs	r7, #1
 801eb48:	e7d5      	b.n	801eaf6 <rmw_init+0x1aa>
 801eb4a:	bf00      	nop
 801eb4c:	08025928 	.word	0x08025928
 801eb50:	24069234 	.word	0x24069234
 801eb54:	240654e0 	.word	0x240654e0
 801eb58:	24069224 	.word	0x24069224
 801eb5c:	24066a88 	.word	0x24066a88
 801eb60:	24064b04 	.word	0x24064b04
 801eb64:	240691f4 	.word	0x240691f4
 801eb68:	24068b88 	.word	0x24068b88
 801eb6c:	24069244 	.word	0x24069244
 801eb70:	24064ba8 	.word	0x24064ba8
 801eb74:	24069204 	.word	0x24069204
 801eb78:	24065418 	.word	0x24065418
 801eb7c:	24069214 	.word	0x24069214
 801eb80:	24064938 	.word	0x24064938
 801eb84:	24064928 	.word	0x24064928
 801eb88:	24068fc0 	.word	0x24068fc0
 801eb8c:	24069254 	.word	0x24069254
 801eb90:	24064a80 	.word	0x24064a80
 801eb94:	240691e4 	.word	0x240691e4
 801eb98:	24069164 	.word	0x24069164
 801eb9c:	24069264 	.word	0x24069264
 801eba0:	24064a00 	.word	0x24064a00
 801eba4:	240691d4 	.word	0x240691d4
 801eba8:	080215f1 	.word	0x080215f1
 801ebac:	080215e9 	.word	0x080215e9
 801ebb0:	08021689 	.word	0x08021689
 801ebb4:	08021725 	.word	0x08021725

0801ebb8 <rmw_context_fini>:
 801ebb8:	4b17      	ldr	r3, [pc, #92]	@ (801ec18 <rmw_context_fini+0x60>)
 801ebba:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 801ebbc:	b570      	push	{r4, r5, r6, lr}
 801ebbe:	681c      	ldr	r4, [r3, #0]
 801ebc0:	4605      	mov	r5, r0
 801ebc2:	b334      	cbz	r4, 801ec12 <rmw_context_fini+0x5a>
 801ebc4:	2600      	movs	r6, #0
 801ebc6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801ebca:	6902      	ldr	r2, [r0, #16]
 801ebcc:	428a      	cmp	r2, r1
 801ebce:	d018      	beq.n	801ec02 <rmw_context_fini+0x4a>
 801ebd0:	2c00      	cmp	r4, #0
 801ebd2:	d1f8      	bne.n	801ebc6 <rmw_context_fini+0xe>
 801ebd4:	b189      	cbz	r1, 801ebfa <rmw_context_fini+0x42>
 801ebd6:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 801ebda:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 801ebde:	789b      	ldrb	r3, [r3, #2]
 801ebe0:	2b01      	cmp	r3, #1
 801ebe2:	bf14      	ite	ne
 801ebe4:	210a      	movne	r1, #10
 801ebe6:	2100      	moveq	r1, #0
 801ebe8:	f7f9 fbcc 	bl	8018384 <uxr_delete_session_retries>
 801ebec:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801ebee:	f7f7 f88d 	bl	8015d0c <rmw_uxrce_fini_session_memory>
 801ebf2:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801ebf4:	3010      	adds	r0, #16
 801ebf6:	f7f8 fbe9 	bl	80173cc <uxr_close_custom_transport>
 801ebfa:	2300      	movs	r3, #0
 801ebfc:	4630      	mov	r0, r6
 801ebfe:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801ec00:	bd70      	pop	{r4, r5, r6, pc}
 801ec02:	3018      	adds	r0, #24
 801ec04:	f000 f90e 	bl	801ee24 <rmw_destroy_node>
 801ec08:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801ec0a:	4606      	mov	r6, r0
 801ec0c:	2c00      	cmp	r4, #0
 801ec0e:	d1da      	bne.n	801ebc6 <rmw_context_fini+0xe>
 801ec10:	e7e0      	b.n	801ebd4 <rmw_context_fini+0x1c>
 801ec12:	4626      	mov	r6, r4
 801ec14:	e7de      	b.n	801ebd4 <rmw_context_fini+0x1c>
 801ec16:	bf00      	nop
 801ec18:	240691f4 	.word	0x240691f4

0801ec1c <create_topic>:
 801ec1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec20:	4605      	mov	r5, r0
 801ec22:	b084      	sub	sp, #16
 801ec24:	4822      	ldr	r0, [pc, #136]	@ (801ecb0 <create_topic+0x94>)
 801ec26:	460f      	mov	r7, r1
 801ec28:	4616      	mov	r6, r2
 801ec2a:	f7ff fd23 	bl	801e674 <get_memory>
 801ec2e:	4604      	mov	r4, r0
 801ec30:	2800      	cmp	r0, #0
 801ec32:	d039      	beq.n	801eca8 <create_topic+0x8c>
 801ec34:	692b      	ldr	r3, [r5, #16]
 801ec36:	2102      	movs	r1, #2
 801ec38:	6884      	ldr	r4, [r0, #8]
 801ec3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801ec3e:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 801ecb8 <create_topic+0x9c>
 801ec42:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801ec46:	1c42      	adds	r2, r0, #1
 801ec48:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801ec4c:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801ec50:	f7f8 fbc0 	bl	80173d4 <uxr_object_id>
 801ec54:	223c      	movs	r2, #60	@ 0x3c
 801ec56:	6120      	str	r0, [r4, #16]
 801ec58:	4641      	mov	r1, r8
 801ec5a:	4638      	mov	r0, r7
 801ec5c:	f7f7 fad4 	bl	8016208 <generate_topic_name>
 801ec60:	b1f0      	cbz	r0, 801eca0 <create_topic+0x84>
 801ec62:	4f14      	ldr	r7, [pc, #80]	@ (801ecb4 <create_topic+0x98>)
 801ec64:	4630      	mov	r0, r6
 801ec66:	2264      	movs	r2, #100	@ 0x64
 801ec68:	4639      	mov	r1, r7
 801ec6a:	f7f7 fa9f 	bl	80161ac <generate_type_name>
 801ec6e:	b1b8      	cbz	r0, 801eca0 <create_topic+0x84>
 801ec70:	6928      	ldr	r0, [r5, #16]
 801ec72:	2106      	movs	r1, #6
 801ec74:	696b      	ldr	r3, [r5, #20]
 801ec76:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801ec7a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ec7e:	f8cd 8000 	str.w	r8, [sp]
 801ec82:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801ec86:	6811      	ldr	r1, [r2, #0]
 801ec88:	6922      	ldr	r2, [r4, #16]
 801ec8a:	f7f8 f927 	bl	8016edc <uxr_buffer_create_topic_bin>
 801ec8e:	4602      	mov	r2, r0
 801ec90:	6928      	ldr	r0, [r5, #16]
 801ec92:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801ec96:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801ec9a:	f7f7 f9bb 	bl	8016014 <run_xrce_session>
 801ec9e:	b918      	cbnz	r0, 801eca8 <create_topic+0x8c>
 801eca0:	4620      	mov	r0, r4
 801eca2:	2400      	movs	r4, #0
 801eca4:	f7f7 f8a8 	bl	8015df8 <rmw_uxrce_fini_topic_memory>
 801eca8:	4620      	mov	r0, r4
 801ecaa:	b004      	add	sp, #16
 801ecac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ecb0:	24069254 	.word	0x24069254
 801ecb4:	240693b0 	.word	0x240693b0
 801ecb8:	24069374 	.word	0x24069374

0801ecbc <destroy_topic>:
 801ecbc:	b538      	push	{r3, r4, r5, lr}
 801ecbe:	6985      	ldr	r5, [r0, #24]
 801ecc0:	b1dd      	cbz	r5, 801ecfa <destroy_topic+0x3e>
 801ecc2:	4604      	mov	r4, r0
 801ecc4:	6928      	ldr	r0, [r5, #16]
 801ecc6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801ecca:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ecce:	6922      	ldr	r2, [r4, #16]
 801ecd0:	6819      	ldr	r1, [r3, #0]
 801ecd2:	f7f8 f885 	bl	8016de0 <uxr_buffer_delete_entity>
 801ecd6:	4602      	mov	r2, r0
 801ecd8:	6928      	ldr	r0, [r5, #16]
 801ecda:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801ecde:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801ece2:	f7f7 f997 	bl	8016014 <run_xrce_session>
 801ece6:	4603      	mov	r3, r0
 801ece8:	4620      	mov	r0, r4
 801ecea:	2b00      	cmp	r3, #0
 801ecec:	bf14      	ite	ne
 801ecee:	2400      	movne	r4, #0
 801ecf0:	2402      	moveq	r4, #2
 801ecf2:	f7f7 f881 	bl	8015df8 <rmw_uxrce_fini_topic_memory>
 801ecf6:	4620      	mov	r0, r4
 801ecf8:	bd38      	pop	{r3, r4, r5, pc}
 801ecfa:	2401      	movs	r4, #1
 801ecfc:	4620      	mov	r0, r4
 801ecfe:	bd38      	pop	{r3, r4, r5, pc}

0801ed00 <create_node>:
 801ed00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ed04:	b083      	sub	sp, #12
 801ed06:	2b00      	cmp	r3, #0
 801ed08:	d064      	beq.n	801edd4 <create_node+0xd4>
 801ed0a:	4606      	mov	r6, r0
 801ed0c:	4838      	ldr	r0, [pc, #224]	@ (801edf0 <create_node+0xf0>)
 801ed0e:	460f      	mov	r7, r1
 801ed10:	4690      	mov	r8, r2
 801ed12:	461d      	mov	r5, r3
 801ed14:	f7ff fcae 	bl	801e674 <get_memory>
 801ed18:	2800      	cmp	r0, #0
 801ed1a:	d05b      	beq.n	801edd4 <create_node+0xd4>
 801ed1c:	6884      	ldr	r4, [r0, #8]
 801ed1e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801ed20:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 801ed24:	f104 0518 	add.w	r5, r4, #24
 801ed28:	6123      	str	r3, [r4, #16]
 801ed2a:	f7ff fd0b 	bl	801e744 <rmw_get_implementation_identifier>
 801ed2e:	f8c4 9020 	str.w	r9, [r4, #32]
 801ed32:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801ed36:	4630      	mov	r0, r6
 801ed38:	f7e1 fadc 	bl	80002f4 <strlen>
 801ed3c:	1c42      	adds	r2, r0, #1
 801ed3e:	2a3c      	cmp	r2, #60	@ 0x3c
 801ed40:	d840      	bhi.n	801edc4 <create_node+0xc4>
 801ed42:	4648      	mov	r0, r9
 801ed44:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 801ed48:	4631      	mov	r1, r6
 801ed4a:	f003 fbd0 	bl	80224ee <memcpy>
 801ed4e:	4638      	mov	r0, r7
 801ed50:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 801ed54:	f7e1 face 	bl	80002f4 <strlen>
 801ed58:	1c42      	adds	r2, r0, #1
 801ed5a:	2a3c      	cmp	r2, #60	@ 0x3c
 801ed5c:	d832      	bhi.n	801edc4 <create_node+0xc4>
 801ed5e:	4639      	mov	r1, r7
 801ed60:	4648      	mov	r0, r9
 801ed62:	f003 fbc4 	bl	80224ee <memcpy>
 801ed66:	6923      	ldr	r3, [r4, #16]
 801ed68:	2101      	movs	r1, #1
 801ed6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801ed6e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 801ed72:	1842      	adds	r2, r0, r1
 801ed74:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 801ed78:	f7f8 fb2c 	bl	80173d4 <uxr_object_id>
 801ed7c:	6160      	str	r0, [r4, #20]
 801ed7e:	783b      	ldrb	r3, [r7, #0]
 801ed80:	2b2f      	cmp	r3, #47	@ 0x2f
 801ed82:	d12c      	bne.n	801edde <create_node+0xde>
 801ed84:	787b      	ldrb	r3, [r7, #1]
 801ed86:	bb53      	cbnz	r3, 801edde <create_node+0xde>
 801ed88:	4633      	mov	r3, r6
 801ed8a:	4a1a      	ldr	r2, [pc, #104]	@ (801edf4 <create_node+0xf4>)
 801ed8c:	213c      	movs	r1, #60	@ 0x3c
 801ed8e:	481a      	ldr	r0, [pc, #104]	@ (801edf8 <create_node+0xf8>)
 801ed90:	f003 f920 	bl	8021fd4 <sniprintf>
 801ed94:	6920      	ldr	r0, [r4, #16]
 801ed96:	2106      	movs	r1, #6
 801ed98:	fa1f f388 	uxth.w	r3, r8
 801ed9c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801eda0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801eda4:	9101      	str	r1, [sp, #4]
 801eda6:	4914      	ldr	r1, [pc, #80]	@ (801edf8 <create_node+0xf8>)
 801eda8:	9100      	str	r1, [sp, #0]
 801edaa:	6811      	ldr	r1, [r2, #0]
 801edac:	6962      	ldr	r2, [r4, #20]
 801edae:	f7f8 f863 	bl	8016e78 <uxr_buffer_create_participant_bin>
 801edb2:	4602      	mov	r2, r0
 801edb4:	6920      	ldr	r0, [r4, #16]
 801edb6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801edba:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801edbe:	f7f7 f929 	bl	8016014 <run_xrce_session>
 801edc2:	b918      	cbnz	r0, 801edcc <create_node+0xcc>
 801edc4:	4628      	mov	r0, r5
 801edc6:	2500      	movs	r5, #0
 801edc8:	f7f6 ffa6 	bl	8015d18 <rmw_uxrce_fini_node_memory>
 801edcc:	4628      	mov	r0, r5
 801edce:	b003      	add	sp, #12
 801edd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801edd4:	2500      	movs	r5, #0
 801edd6:	4628      	mov	r0, r5
 801edd8:	b003      	add	sp, #12
 801edda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801edde:	463b      	mov	r3, r7
 801ede0:	4a06      	ldr	r2, [pc, #24]	@ (801edfc <create_node+0xfc>)
 801ede2:	213c      	movs	r1, #60	@ 0x3c
 801ede4:	9600      	str	r6, [sp, #0]
 801ede6:	4804      	ldr	r0, [pc, #16]	@ (801edf8 <create_node+0xf8>)
 801ede8:	f003 f8f4 	bl	8021fd4 <sniprintf>
 801edec:	e7d2      	b.n	801ed94 <create_node+0x94>
 801edee:	bf00      	nop
 801edf0:	240691f4 	.word	0x240691f4
 801edf4:	080249ac 	.word	0x080249ac
 801edf8:	24069414 	.word	0x24069414
 801edfc:	0802533c 	.word	0x0802533c

0801ee00 <rmw_create_node>:
 801ee00:	468c      	mov	ip, r1
 801ee02:	4611      	mov	r1, r2
 801ee04:	f1bc 0f00 	cmp.w	ip, #0
 801ee08:	d00a      	beq.n	801ee20 <rmw_create_node+0x20>
 801ee0a:	f89c 3000 	ldrb.w	r3, [ip]
 801ee0e:	b13b      	cbz	r3, 801ee20 <rmw_create_node+0x20>
 801ee10:	b132      	cbz	r2, 801ee20 <rmw_create_node+0x20>
 801ee12:	7813      	ldrb	r3, [r2, #0]
 801ee14:	b123      	cbz	r3, 801ee20 <rmw_create_node+0x20>
 801ee16:	4603      	mov	r3, r0
 801ee18:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 801ee1a:	4660      	mov	r0, ip
 801ee1c:	f7ff bf70 	b.w	801ed00 <create_node>
 801ee20:	2000      	movs	r0, #0
 801ee22:	4770      	bx	lr

0801ee24 <rmw_destroy_node>:
 801ee24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee26:	b328      	cbz	r0, 801ee74 <rmw_destroy_node+0x50>
 801ee28:	4607      	mov	r7, r0
 801ee2a:	6800      	ldr	r0, [r0, #0]
 801ee2c:	b120      	cbz	r0, 801ee38 <rmw_destroy_node+0x14>
 801ee2e:	4b37      	ldr	r3, [pc, #220]	@ (801ef0c <rmw_destroy_node+0xe8>)
 801ee30:	6819      	ldr	r1, [r3, #0]
 801ee32:	f7e1 fa55 	bl	80002e0 <strcmp>
 801ee36:	b9e8      	cbnz	r0, 801ee74 <rmw_destroy_node+0x50>
 801ee38:	687d      	ldr	r5, [r7, #4]
 801ee3a:	b1dd      	cbz	r5, 801ee74 <rmw_destroy_node+0x50>
 801ee3c:	4b34      	ldr	r3, [pc, #208]	@ (801ef10 <rmw_destroy_node+0xec>)
 801ee3e:	681c      	ldr	r4, [r3, #0]
 801ee40:	2c00      	cmp	r4, #0
 801ee42:	d060      	beq.n	801ef06 <rmw_destroy_node+0xe2>
 801ee44:	2600      	movs	r6, #0
 801ee46:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801ee4a:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801ee4e:	429d      	cmp	r5, r3
 801ee50:	d013      	beq.n	801ee7a <rmw_destroy_node+0x56>
 801ee52:	2c00      	cmp	r4, #0
 801ee54:	d1f7      	bne.n	801ee46 <rmw_destroy_node+0x22>
 801ee56:	4b2f      	ldr	r3, [pc, #188]	@ (801ef14 <rmw_destroy_node+0xf0>)
 801ee58:	681c      	ldr	r4, [r3, #0]
 801ee5a:	b1c4      	cbz	r4, 801ee8e <rmw_destroy_node+0x6a>
 801ee5c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801ee60:	6a0b      	ldr	r3, [r1, #32]
 801ee62:	429d      	cmp	r5, r3
 801ee64:	d1f9      	bne.n	801ee5a <rmw_destroy_node+0x36>
 801ee66:	317c      	adds	r1, #124	@ 0x7c
 801ee68:	4638      	mov	r0, r7
 801ee6a:	f000 fbff 	bl	801f66c <rmw_destroy_subscription>
 801ee6e:	2801      	cmp	r0, #1
 801ee70:	4606      	mov	r6, r0
 801ee72:	d1f2      	bne.n	801ee5a <rmw_destroy_node+0x36>
 801ee74:	2601      	movs	r6, #1
 801ee76:	4630      	mov	r0, r6
 801ee78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ee7a:	3184      	adds	r1, #132	@ 0x84
 801ee7c:	4638      	mov	r0, r7
 801ee7e:	f7f6 fd59 	bl	8015934 <rmw_destroy_publisher>
 801ee82:	2801      	cmp	r0, #1
 801ee84:	4606      	mov	r6, r0
 801ee86:	d0f5      	beq.n	801ee74 <rmw_destroy_node+0x50>
 801ee88:	2c00      	cmp	r4, #0
 801ee8a:	d1dc      	bne.n	801ee46 <rmw_destroy_node+0x22>
 801ee8c:	e7e3      	b.n	801ee56 <rmw_destroy_node+0x32>
 801ee8e:	4b22      	ldr	r3, [pc, #136]	@ (801ef18 <rmw_destroy_node+0xf4>)
 801ee90:	681c      	ldr	r4, [r3, #0]
 801ee92:	b16c      	cbz	r4, 801eeb0 <rmw_destroy_node+0x8c>
 801ee94:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801ee98:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801ee9a:	429d      	cmp	r5, r3
 801ee9c:	d1f9      	bne.n	801ee92 <rmw_destroy_node+0x6e>
 801ee9e:	317c      	adds	r1, #124	@ 0x7c
 801eea0:	4638      	mov	r0, r7
 801eea2:	f000 fa6d 	bl	801f380 <rmw_destroy_service>
 801eea6:	2801      	cmp	r0, #1
 801eea8:	4606      	mov	r6, r0
 801eeaa:	d0e3      	beq.n	801ee74 <rmw_destroy_node+0x50>
 801eeac:	2c00      	cmp	r4, #0
 801eeae:	d1f1      	bne.n	801ee94 <rmw_destroy_node+0x70>
 801eeb0:	4b1a      	ldr	r3, [pc, #104]	@ (801ef1c <rmw_destroy_node+0xf8>)
 801eeb2:	681c      	ldr	r4, [r3, #0]
 801eeb4:	b16c      	cbz	r4, 801eed2 <rmw_destroy_node+0xae>
 801eeb6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801eeba:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801eebc:	429d      	cmp	r5, r3
 801eebe:	d1f9      	bne.n	801eeb4 <rmw_destroy_node+0x90>
 801eec0:	317c      	adds	r1, #124	@ 0x7c
 801eec2:	4638      	mov	r0, r7
 801eec4:	f7ff fbfa 	bl	801e6bc <rmw_destroy_client>
 801eec8:	2801      	cmp	r0, #1
 801eeca:	4606      	mov	r6, r0
 801eecc:	d0d2      	beq.n	801ee74 <rmw_destroy_node+0x50>
 801eece:	2c00      	cmp	r4, #0
 801eed0:	d1f1      	bne.n	801eeb6 <rmw_destroy_node+0x92>
 801eed2:	6928      	ldr	r0, [r5, #16]
 801eed4:	696a      	ldr	r2, [r5, #20]
 801eed6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801eeda:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801eede:	6819      	ldr	r1, [r3, #0]
 801eee0:	f7f7 ff7e 	bl	8016de0 <uxr_buffer_delete_entity>
 801eee4:	4602      	mov	r2, r0
 801eee6:	6928      	ldr	r0, [r5, #16]
 801eee8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801eeec:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801eef0:	f7f7 f890 	bl	8016014 <run_xrce_session>
 801eef4:	4603      	mov	r3, r0
 801eef6:	4638      	mov	r0, r7
 801eef8:	2b00      	cmp	r3, #0
 801eefa:	bf08      	it	eq
 801eefc:	2602      	moveq	r6, #2
 801eefe:	f7f6 ff0b 	bl	8015d18 <rmw_uxrce_fini_node_memory>
 801ef02:	4630      	mov	r0, r6
 801ef04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ef06:	4626      	mov	r6, r4
 801ef08:	e7a5      	b.n	801ee56 <rmw_destroy_node+0x32>
 801ef0a:	bf00      	nop
 801ef0c:	08025928 	.word	0x08025928
 801ef10:	24069204 	.word	0x24069204
 801ef14:	24069244 	.word	0x24069244
 801ef18:	24069214 	.word	0x24069214
 801ef1c:	24064928 	.word	0x24064928

0801ef20 <rmw_node_get_graph_guard_condition>:
 801ef20:	6843      	ldr	r3, [r0, #4]
 801ef22:	6918      	ldr	r0, [r3, #16]
 801ef24:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 801ef28:	4770      	bx	lr
 801ef2a:	bf00      	nop

0801ef2c <rmw_send_request>:
 801ef2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ef30:	4604      	mov	r4, r0
 801ef32:	6800      	ldr	r0, [r0, #0]
 801ef34:	b08b      	sub	sp, #44	@ 0x2c
 801ef36:	460e      	mov	r6, r1
 801ef38:	4615      	mov	r5, r2
 801ef3a:	b128      	cbz	r0, 801ef48 <rmw_send_request+0x1c>
 801ef3c:	4b21      	ldr	r3, [pc, #132]	@ (801efc4 <rmw_send_request+0x98>)
 801ef3e:	6819      	ldr	r1, [r3, #0]
 801ef40:	f7e1 f9ce 	bl	80002e0 <strcmp>
 801ef44:	2800      	cmp	r0, #0
 801ef46:	d139      	bne.n	801efbc <rmw_send_request+0x90>
 801ef48:	6864      	ldr	r4, [r4, #4]
 801ef4a:	2700      	movs	r7, #0
 801ef4c:	6963      	ldr	r3, [r4, #20]
 801ef4e:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801ef52:	689b      	ldr	r3, [r3, #8]
 801ef54:	4798      	blx	r3
 801ef56:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801ef5a:	4630      	mov	r0, r6
 801ef5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ef60:	4798      	blx	r3
 801ef62:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801ef66:	9000      	str	r0, [sp, #0]
 801ef68:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801ef6c:	6922      	ldr	r2, [r4, #16]
 801ef6e:	ab02      	add	r3, sp, #8
 801ef70:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801ef72:	f7fa fb37 	bl	80195e4 <uxr_prepare_output_stream>
 801ef76:	e9c5 0700 	strd	r0, r7, [r5]
 801ef7a:	b198      	cbz	r0, 801efa4 <rmw_send_request+0x78>
 801ef7c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801ef80:	a902      	add	r1, sp, #8
 801ef82:	4630      	mov	r0, r6
 801ef84:	4798      	blx	r3
 801ef86:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801ef8a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801ef8e:	2b01      	cmp	r3, #1
 801ef90:	d00c      	beq.n	801efac <rmw_send_request+0x80>
 801ef92:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801ef94:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ef98:	f7f9 f82a 	bl	8017ff0 <uxr_run_session_until_confirm_delivery>
 801ef9c:	4638      	mov	r0, r7
 801ef9e:	b00b      	add	sp, #44	@ 0x2c
 801efa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801efa4:	2001      	movs	r0, #1
 801efa6:	b00b      	add	sp, #44	@ 0x2c
 801efa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801efac:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801efb0:	f7f8 fc64 	bl	801787c <uxr_flash_output_streams>
 801efb4:	4638      	mov	r0, r7
 801efb6:	b00b      	add	sp, #44	@ 0x2c
 801efb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801efbc:	200c      	movs	r0, #12
 801efbe:	b00b      	add	sp, #44	@ 0x2c
 801efc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801efc4:	08025928 	.word	0x08025928

0801efc8 <rmw_take_request>:
 801efc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801efcc:	4605      	mov	r5, r0
 801efce:	6800      	ldr	r0, [r0, #0]
 801efd0:	b089      	sub	sp, #36	@ 0x24
 801efd2:	460c      	mov	r4, r1
 801efd4:	4690      	mov	r8, r2
 801efd6:	461e      	mov	r6, r3
 801efd8:	b128      	cbz	r0, 801efe6 <rmw_take_request+0x1e>
 801efda:	4b28      	ldr	r3, [pc, #160]	@ (801f07c <rmw_take_request+0xb4>)
 801efdc:	6819      	ldr	r1, [r3, #0]
 801efde:	f7e1 f97f 	bl	80002e0 <strcmp>
 801efe2:	2800      	cmp	r0, #0
 801efe4:	d146      	bne.n	801f074 <rmw_take_request+0xac>
 801efe6:	b10e      	cbz	r6, 801efec <rmw_take_request+0x24>
 801efe8:	2300      	movs	r3, #0
 801efea:	7033      	strb	r3, [r6, #0]
 801efec:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801eff0:	f7f6 ff92 	bl	8015f18 <rmw_uxrce_clean_expired_static_input_buffer>
 801eff4:	4648      	mov	r0, r9
 801eff6:	f7f6 ff65 	bl	8015ec4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801effa:	4607      	mov	r7, r0
 801effc:	b3b0      	cbz	r0, 801f06c <rmw_take_request+0xa4>
 801effe:	6885      	ldr	r5, [r0, #8]
 801f000:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 801f004:	f8d5 383c 	ldr.w	r3, [r5, #2108]	@ 0x83c
 801f008:	e9c4 3208 	strd	r3, r2, [r4, #32]
 801f00c:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801f010:	7423      	strb	r3, [r4, #16]
 801f012:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	@ 0x834
 801f016:	f895 3836 	ldrb.w	r3, [r5, #2102]	@ 0x836
 801f01a:	f8a4 2011 	strh.w	r2, [r4, #17]
 801f01e:	74e3      	strb	r3, [r4, #19]
 801f020:	f8d5 1828 	ldr.w	r1, [r5, #2088]	@ 0x828
 801f024:	f8d5 282c 	ldr.w	r2, [r5, #2092]	@ 0x82c
 801f028:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 801f02c:	6161      	str	r1, [r4, #20]
 801f02e:	61a2      	str	r2, [r4, #24]
 801f030:	61e3      	str	r3, [r4, #28]
 801f032:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801f036:	689b      	ldr	r3, [r3, #8]
 801f038:	4798      	blx	r3
 801f03a:	6844      	ldr	r4, [r0, #4]
 801f03c:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801f040:	f105 0110 	add.w	r1, r5, #16
 801f044:	4668      	mov	r0, sp
 801f046:	f7f5 f88f 	bl	8014168 <ucdr_init_buffer>
 801f04a:	4641      	mov	r1, r8
 801f04c:	68e3      	ldr	r3, [r4, #12]
 801f04e:	4668      	mov	r0, sp
 801f050:	4798      	blx	r3
 801f052:	4639      	mov	r1, r7
 801f054:	4604      	mov	r4, r0
 801f056:	480a      	ldr	r0, [pc, #40]	@ (801f080 <rmw_take_request+0xb8>)
 801f058:	f7ff fb1c 	bl	801e694 <put_memory>
 801f05c:	b106      	cbz	r6, 801f060 <rmw_take_request+0x98>
 801f05e:	7034      	strb	r4, [r6, #0]
 801f060:	f084 0001 	eor.w	r0, r4, #1
 801f064:	b2c0      	uxtb	r0, r0
 801f066:	b009      	add	sp, #36	@ 0x24
 801f068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f06c:	2001      	movs	r0, #1
 801f06e:	b009      	add	sp, #36	@ 0x24
 801f070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f074:	200c      	movs	r0, #12
 801f076:	b009      	add	sp, #36	@ 0x24
 801f078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f07c:	08025928 	.word	0x08025928
 801f080:	24069234 	.word	0x24069234

0801f084 <rmw_send_response>:
 801f084:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f086:	4605      	mov	r5, r0
 801f088:	6800      	ldr	r0, [r0, #0]
 801f08a:	b091      	sub	sp, #68	@ 0x44
 801f08c:	460c      	mov	r4, r1
 801f08e:	4616      	mov	r6, r2
 801f090:	b128      	cbz	r0, 801f09e <rmw_send_response+0x1a>
 801f092:	4b29      	ldr	r3, [pc, #164]	@ (801f138 <rmw_send_response+0xb4>)
 801f094:	6819      	ldr	r1, [r3, #0]
 801f096:	f7e1 f923 	bl	80002e0 <strcmp>
 801f09a:	2800      	cmp	r0, #0
 801f09c:	d141      	bne.n	801f122 <rmw_send_response+0x9e>
 801f09e:	686d      	ldr	r5, [r5, #4]
 801f0a0:	68a1      	ldr	r1, [r4, #8]
 801f0a2:	6860      	ldr	r0, [r4, #4]
 801f0a4:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801f0a6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801f0aa:	9307      	str	r3, [sp, #28]
 801f0ac:	4623      	mov	r3, r4
 801f0ae:	9206      	str	r2, [sp, #24]
 801f0b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f0b4:	789b      	ldrb	r3, [r3, #2]
 801f0b6:	f88d 2017 	strb.w	r2, [sp, #23]
 801f0ba:	f88d 3016 	strb.w	r3, [sp, #22]
 801f0be:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801f0c2:	68e2      	ldr	r2, [r4, #12]
 801f0c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801f0c8:	ab02      	add	r3, sp, #8
 801f0ca:	696c      	ldr	r4, [r5, #20]
 801f0cc:	c307      	stmia	r3!, {r0, r1, r2}
 801f0ce:	68e3      	ldr	r3, [r4, #12]
 801f0d0:	4798      	blx	r3
 801f0d2:	6844      	ldr	r4, [r0, #4]
 801f0d4:	4630      	mov	r0, r6
 801f0d6:	6923      	ldr	r3, [r4, #16]
 801f0d8:	4798      	blx	r3
 801f0da:	f100 0318 	add.w	r3, r0, #24
 801f0de:	6938      	ldr	r0, [r7, #16]
 801f0e0:	9300      	str	r3, [sp, #0]
 801f0e2:	ab08      	add	r3, sp, #32
 801f0e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f0e8:	692a      	ldr	r2, [r5, #16]
 801f0ea:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801f0ec:	f7fa fa7a 	bl	80195e4 <uxr_prepare_output_stream>
 801f0f0:	b910      	cbnz	r0, 801f0f8 <rmw_send_response+0x74>
 801f0f2:	2001      	movs	r0, #1
 801f0f4:	b011      	add	sp, #68	@ 0x44
 801f0f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f0f8:	a902      	add	r1, sp, #8
 801f0fa:	a808      	add	r0, sp, #32
 801f0fc:	f7fb fc02 	bl	801a904 <uxr_serialize_SampleIdentity>
 801f100:	68a3      	ldr	r3, [r4, #8]
 801f102:	a908      	add	r1, sp, #32
 801f104:	4630      	mov	r0, r6
 801f106:	4798      	blx	r3
 801f108:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 801f10c:	6938      	ldr	r0, [r7, #16]
 801f10e:	2b01      	cmp	r3, #1
 801f110:	d00a      	beq.n	801f128 <rmw_send_response+0xa4>
 801f112:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 801f114:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f118:	f7f8 ff6a 	bl	8017ff0 <uxr_run_session_until_confirm_delivery>
 801f11c:	2000      	movs	r0, #0
 801f11e:	b011      	add	sp, #68	@ 0x44
 801f120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f122:	200c      	movs	r0, #12
 801f124:	b011      	add	sp, #68	@ 0x44
 801f126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f128:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f12c:	f7f8 fba6 	bl	801787c <uxr_flash_output_streams>
 801f130:	2000      	movs	r0, #0
 801f132:	b011      	add	sp, #68	@ 0x44
 801f134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f136:	bf00      	nop
 801f138:	08025928 	.word	0x08025928

0801f13c <rmw_take_response>:
 801f13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f140:	4604      	mov	r4, r0
 801f142:	6800      	ldr	r0, [r0, #0]
 801f144:	b088      	sub	sp, #32
 801f146:	460f      	mov	r7, r1
 801f148:	4690      	mov	r8, r2
 801f14a:	461d      	mov	r5, r3
 801f14c:	b120      	cbz	r0, 801f158 <rmw_take_response+0x1c>
 801f14e:	4b1d      	ldr	r3, [pc, #116]	@ (801f1c4 <rmw_take_response+0x88>)
 801f150:	6819      	ldr	r1, [r3, #0]
 801f152:	f7e1 f8c5 	bl	80002e0 <strcmp>
 801f156:	bb68      	cbnz	r0, 801f1b4 <rmw_take_response+0x78>
 801f158:	b10d      	cbz	r5, 801f15e <rmw_take_response+0x22>
 801f15a:	2300      	movs	r3, #0
 801f15c:	702b      	strb	r3, [r5, #0]
 801f15e:	6864      	ldr	r4, [r4, #4]
 801f160:	f7f6 feda 	bl	8015f18 <rmw_uxrce_clean_expired_static_input_buffer>
 801f164:	4620      	mov	r0, r4
 801f166:	f7f6 fead 	bl	8015ec4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801f16a:	4606      	mov	r6, r0
 801f16c:	b330      	cbz	r0, 801f1bc <rmw_take_response+0x80>
 801f16e:	6963      	ldr	r3, [r4, #20]
 801f170:	6884      	ldr	r4, [r0, #8]
 801f172:	68db      	ldr	r3, [r3, #12]
 801f174:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 801f178:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801f17c:	e9c7 0108 	strd	r0, r1, [r7, #32]
 801f180:	4798      	blx	r3
 801f182:	6847      	ldr	r7, [r0, #4]
 801f184:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 801f188:	f104 0110 	add.w	r1, r4, #16
 801f18c:	4668      	mov	r0, sp
 801f18e:	f7f4 ffeb 	bl	8014168 <ucdr_init_buffer>
 801f192:	4641      	mov	r1, r8
 801f194:	68fb      	ldr	r3, [r7, #12]
 801f196:	4668      	mov	r0, sp
 801f198:	4798      	blx	r3
 801f19a:	4631      	mov	r1, r6
 801f19c:	4604      	mov	r4, r0
 801f19e:	480a      	ldr	r0, [pc, #40]	@ (801f1c8 <rmw_take_response+0x8c>)
 801f1a0:	f7ff fa78 	bl	801e694 <put_memory>
 801f1a4:	b105      	cbz	r5, 801f1a8 <rmw_take_response+0x6c>
 801f1a6:	702c      	strb	r4, [r5, #0]
 801f1a8:	f084 0001 	eor.w	r0, r4, #1
 801f1ac:	b2c0      	uxtb	r0, r0
 801f1ae:	b008      	add	sp, #32
 801f1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f1b4:	200c      	movs	r0, #12
 801f1b6:	b008      	add	sp, #32
 801f1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f1bc:	2001      	movs	r0, #1
 801f1be:	b008      	add	sp, #32
 801f1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f1c4:	08025928 	.word	0x08025928
 801f1c8:	24069234 	.word	0x24069234

0801f1cc <rmw_create_service>:
 801f1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1d0:	b091      	sub	sp, #68	@ 0x44
 801f1d2:	2900      	cmp	r1, #0
 801f1d4:	f000 80bb 	beq.w	801f34e <rmw_create_service+0x182>
 801f1d8:	4606      	mov	r6, r0
 801f1da:	2800      	cmp	r0, #0
 801f1dc:	f000 80b7 	beq.w	801f34e <rmw_create_service+0x182>
 801f1e0:	4614      	mov	r4, r2
 801f1e2:	6800      	ldr	r0, [r0, #0]
 801f1e4:	4689      	mov	r9, r1
 801f1e6:	461d      	mov	r5, r3
 801f1e8:	f7f7 f826 	bl	8016238 <is_uxrce_rmw_identifier_valid>
 801f1ec:	2c00      	cmp	r4, #0
 801f1ee:	f000 80ae 	beq.w	801f34e <rmw_create_service+0x182>
 801f1f2:	f080 0001 	eor.w	r0, r0, #1
 801f1f6:	b2c0      	uxtb	r0, r0
 801f1f8:	2800      	cmp	r0, #0
 801f1fa:	f040 80a8 	bne.w	801f34e <rmw_create_service+0x182>
 801f1fe:	7823      	ldrb	r3, [r4, #0]
 801f200:	2b00      	cmp	r3, #0
 801f202:	f000 80a4 	beq.w	801f34e <rmw_create_service+0x182>
 801f206:	2d00      	cmp	r5, #0
 801f208:	f000 80a1 	beq.w	801f34e <rmw_create_service+0x182>
 801f20c:	4856      	ldr	r0, [pc, #344]	@ (801f368 <rmw_create_service+0x19c>)
 801f20e:	f8d6 8004 	ldr.w	r8, [r6, #4]
 801f212:	f7ff fa2f 	bl	801e674 <get_memory>
 801f216:	4606      	mov	r6, r0
 801f218:	2800      	cmp	r0, #0
 801f21a:	f000 8099 	beq.w	801f350 <rmw_create_service+0x184>
 801f21e:	6887      	ldr	r7, [r0, #8]
 801f220:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 801f224:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 801f228:	f7ff fa8c 	bl	801e744 <rmw_get_implementation_identifier>
 801f22c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801f22e:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 801f232:	4620      	mov	r0, r4
 801f234:	f7e1 f85e 	bl	80002f4 <strlen>
 801f238:	1c42      	adds	r2, r0, #1
 801f23a:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 801f23e:	2a3c      	cmp	r2, #60	@ 0x3c
 801f240:	f200 808a 	bhi.w	801f358 <rmw_create_service+0x18c>
 801f244:	4621      	mov	r1, r4
 801f246:	4650      	mov	r0, sl
 801f248:	f003 f951 	bl	80224ee <memcpy>
 801f24c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801f250:	4629      	mov	r1, r5
 801f252:	2250      	movs	r2, #80	@ 0x50
 801f254:	f107 0020 	add.w	r0, r7, #32
 801f258:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 801f25c:	677b      	str	r3, [r7, #116]	@ 0x74
 801f25e:	f003 f946 	bl	80224ee <memcpy>
 801f262:	4648      	mov	r0, r9
 801f264:	4941      	ldr	r1, [pc, #260]	@ (801f36c <rmw_create_service+0x1a0>)
 801f266:	f7f7 f86f 	bl	8016348 <get_service_typesupport_handle>
 801f26a:	2800      	cmp	r0, #0
 801f26c:	d074      	beq.n	801f358 <rmw_create_service+0x18c>
 801f26e:	6843      	ldr	r3, [r0, #4]
 801f270:	617b      	str	r3, [r7, #20]
 801f272:	2b00      	cmp	r3, #0
 801f274:	d070      	beq.n	801f358 <rmw_create_service+0x18c>
 801f276:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801f27a:	2108      	movs	r1, #8
 801f27c:	f8df a0f4 	ldr.w	sl, [pc, #244]	@ 801f374 <rmw_create_service+0x1a8>
 801f280:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801f284:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 801f378 <rmw_create_service+0x1ac>
 801f288:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 801f28c:	1c42      	adds	r2, r0, #1
 801f28e:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 801f292:	f7f8 f89f 	bl	80173d4 <uxr_object_id>
 801f296:	2364      	movs	r3, #100	@ 0x64
 801f298:	6138      	str	r0, [r7, #16]
 801f29a:	4652      	mov	r2, sl
 801f29c:	4649      	mov	r1, r9
 801f29e:	6978      	ldr	r0, [r7, #20]
 801f2a0:	f7f6 ff1e 	bl	80160e0 <generate_service_types>
 801f2a4:	2800      	cmp	r0, #0
 801f2a6:	d057      	beq.n	801f358 <rmw_create_service+0x18c>
 801f2a8:	f8df b0d0 	ldr.w	fp, [pc, #208]	@ 801f37c <rmw_create_service+0x1b0>
 801f2ac:	233c      	movs	r3, #60	@ 0x3c
 801f2ae:	4a30      	ldr	r2, [pc, #192]	@ (801f370 <rmw_create_service+0x1a4>)
 801f2b0:	4620      	mov	r0, r4
 801f2b2:	4659      	mov	r1, fp
 801f2b4:	f7f6 fee2 	bl	801607c <generate_service_topics>
 801f2b8:	2800      	cmp	r0, #0
 801f2ba:	d04d      	beq.n	801f358 <rmw_create_service+0x18c>
 801f2bc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801f2c0:	a80c      	add	r0, sp, #48	@ 0x30
 801f2c2:	4629      	mov	r1, r5
 801f2c4:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 801f2c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801f2cc:	f7f6 febe 	bl	801604c <convert_qos_profile>
 801f2d0:	4a27      	ldr	r2, [pc, #156]	@ (801f370 <rmw_create_service+0x1a4>)
 801f2d2:	a80c      	add	r0, sp, #48	@ 0x30
 801f2d4:	9400      	str	r4, [sp, #0]
 801f2d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f2d8:	e9cd b203 	strd	fp, r2, [sp, #12]
 801f2dc:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 801f2e0:	c803      	ldmia	r0, {r0, r1}
 801f2e2:	9a08      	ldr	r2, [sp, #32]
 801f2e4:	9005      	str	r0, [sp, #20]
 801f2e6:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801f2ea:	2306      	movs	r3, #6
 801f2ec:	f8ad 1018 	strh.w	r1, [sp, #24]
 801f2f0:	9307      	str	r3, [sp, #28]
 801f2f2:	6811      	ldr	r1, [r2, #0]
 801f2f4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801f2f8:	693a      	ldr	r2, [r7, #16]
 801f2fa:	f7f7 ff73 	bl	80171e4 <uxr_buffer_create_replier_bin>
 801f2fe:	4602      	mov	r2, r0
 801f300:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801f304:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801f308:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801f30c:	f7f6 fe82 	bl	8016014 <run_xrce_session>
 801f310:	b310      	cbz	r0, 801f358 <rmw_create_service+0x18c>
 801f312:	7a2b      	ldrb	r3, [r5, #8]
 801f314:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801f318:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801f31c:	2b02      	cmp	r3, #2
 801f31e:	920e      	str	r2, [sp, #56]	@ 0x38
 801f320:	f04f 0200 	mov.w	r2, #0
 801f324:	920f      	str	r2, [sp, #60]	@ 0x3c
 801f326:	bf0c      	ite	eq
 801f328:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 801f32c:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 801f330:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f334:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f336:	ab0e      	add	r3, sp, #56	@ 0x38
 801f338:	673a      	str	r2, [r7, #112]	@ 0x70
 801f33a:	f8d0 20e4 	ldr.w	r2, [r0, #228]	@ 0xe4
 801f33e:	9300      	str	r3, [sp, #0]
 801f340:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f342:	6811      	ldr	r1, [r2, #0]
 801f344:	693a      	ldr	r2, [r7, #16]
 801f346:	f001 fc6b 	bl	8020c20 <uxr_buffer_request_data>
 801f34a:	8338      	strh	r0, [r7, #24]
 801f34c:	e000      	b.n	801f350 <rmw_create_service+0x184>
 801f34e:	2600      	movs	r6, #0
 801f350:	4630      	mov	r0, r6
 801f352:	b011      	add	sp, #68	@ 0x44
 801f354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f358:	4630      	mov	r0, r6
 801f35a:	2600      	movs	r6, #0
 801f35c:	f7f6 fd20 	bl	8015da0 <rmw_uxrce_fini_service_memory>
 801f360:	4630      	mov	r0, r6
 801f362:	b011      	add	sp, #68	@ 0x44
 801f364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f368:	24069214 	.word	0x24069214
 801f36c:	08023678 	.word	0x08023678
 801f370:	240694f0 	.word	0x240694f0
 801f374:	2406952c 	.word	0x2406952c
 801f378:	2406948c 	.word	0x2406948c
 801f37c:	24069450 	.word	0x24069450

0801f380 <rmw_destroy_service>:
 801f380:	b570      	push	{r4, r5, r6, lr}
 801f382:	b128      	cbz	r0, 801f390 <rmw_destroy_service+0x10>
 801f384:	4604      	mov	r4, r0
 801f386:	6800      	ldr	r0, [r0, #0]
 801f388:	460d      	mov	r5, r1
 801f38a:	f7f6 ff55 	bl	8016238 <is_uxrce_rmw_identifier_valid>
 801f38e:	b910      	cbnz	r0, 801f396 <rmw_destroy_service+0x16>
 801f390:	2401      	movs	r4, #1
 801f392:	4620      	mov	r0, r4
 801f394:	bd70      	pop	{r4, r5, r6, pc}
 801f396:	6863      	ldr	r3, [r4, #4]
 801f398:	2b00      	cmp	r3, #0
 801f39a:	d0f9      	beq.n	801f390 <rmw_destroy_service+0x10>
 801f39c:	2d00      	cmp	r5, #0
 801f39e:	d0f7      	beq.n	801f390 <rmw_destroy_service+0x10>
 801f3a0:	6828      	ldr	r0, [r5, #0]
 801f3a2:	f7f6 ff49 	bl	8016238 <is_uxrce_rmw_identifier_valid>
 801f3a6:	2800      	cmp	r0, #0
 801f3a8:	d0f2      	beq.n	801f390 <rmw_destroy_service+0x10>
 801f3aa:	686e      	ldr	r6, [r5, #4]
 801f3ac:	2e00      	cmp	r6, #0
 801f3ae:	d0ef      	beq.n	801f390 <rmw_destroy_service+0x10>
 801f3b0:	6864      	ldr	r4, [r4, #4]
 801f3b2:	6932      	ldr	r2, [r6, #16]
 801f3b4:	6920      	ldr	r0, [r4, #16]
 801f3b6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f3ba:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f3be:	6819      	ldr	r1, [r3, #0]
 801f3c0:	f001 fc68 	bl	8020c94 <uxr_buffer_cancel_data>
 801f3c4:	4602      	mov	r2, r0
 801f3c6:	6920      	ldr	r0, [r4, #16]
 801f3c8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801f3cc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801f3d0:	f7f6 fe20 	bl	8016014 <run_xrce_session>
 801f3d4:	6920      	ldr	r0, [r4, #16]
 801f3d6:	6932      	ldr	r2, [r6, #16]
 801f3d8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f3dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f3e0:	6819      	ldr	r1, [r3, #0]
 801f3e2:	f7f7 fcfd 	bl	8016de0 <uxr_buffer_delete_entity>
 801f3e6:	4602      	mov	r2, r0
 801f3e8:	6920      	ldr	r0, [r4, #16]
 801f3ea:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801f3ee:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801f3f2:	f7f6 fe0f 	bl	8016014 <run_xrce_session>
 801f3f6:	4603      	mov	r3, r0
 801f3f8:	4628      	mov	r0, r5
 801f3fa:	2b00      	cmp	r3, #0
 801f3fc:	bf14      	ite	ne
 801f3fe:	2400      	movne	r4, #0
 801f400:	2402      	moveq	r4, #2
 801f402:	f7f6 fccd 	bl	8015da0 <rmw_uxrce_fini_service_memory>
 801f406:	e7c4      	b.n	801f392 <rmw_destroy_service+0x12>

0801f408 <rmw_service_response_publisher_get_actual_qos>:
 801f408:	b181      	cbz	r1, 801f42c <rmw_service_response_publisher_get_actual_qos+0x24>
 801f40a:	4603      	mov	r3, r0
 801f40c:	b510      	push	{r4, lr}
 801f40e:	fab0 f480 	clz	r4, r0
 801f412:	0964      	lsrs	r4, r4, #5
 801f414:	b140      	cbz	r0, 801f428 <rmw_service_response_publisher_get_actual_qos+0x20>
 801f416:	685b      	ldr	r3, [r3, #4]
 801f418:	4608      	mov	r0, r1
 801f41a:	2250      	movs	r2, #80	@ 0x50
 801f41c:	f103 0120 	add.w	r1, r3, #32
 801f420:	f003 f865 	bl	80224ee <memcpy>
 801f424:	4620      	mov	r0, r4
 801f426:	bd10      	pop	{r4, pc}
 801f428:	200b      	movs	r0, #11
 801f42a:	bd10      	pop	{r4, pc}
 801f42c:	200b      	movs	r0, #11
 801f42e:	4770      	bx	lr

0801f430 <rmw_service_request_subscription_get_actual_qos>:
 801f430:	b178      	cbz	r0, 801f452 <rmw_service_request_subscription_get_actual_qos+0x22>
 801f432:	b510      	push	{r4, lr}
 801f434:	fab1 f481 	clz	r4, r1
 801f438:	0964      	lsrs	r4, r4, #5
 801f43a:	b141      	cbz	r1, 801f44e <rmw_service_request_subscription_get_actual_qos+0x1e>
 801f43c:	6843      	ldr	r3, [r0, #4]
 801f43e:	2250      	movs	r2, #80	@ 0x50
 801f440:	4608      	mov	r0, r1
 801f442:	f103 0120 	add.w	r1, r3, #32
 801f446:	f003 f852 	bl	80224ee <memcpy>
 801f44a:	4620      	mov	r0, r4
 801f44c:	bd10      	pop	{r4, pc}
 801f44e:	200b      	movs	r0, #11
 801f450:	bd10      	pop	{r4, pc}
 801f452:	200b      	movs	r0, #11
 801f454:	4770      	bx	lr
 801f456:	bf00      	nop

0801f458 <rmw_create_subscription>:
 801f458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f45c:	b08d      	sub	sp, #52	@ 0x34
 801f45e:	2900      	cmp	r1, #0
 801f460:	f000 80d8 	beq.w	801f614 <rmw_create_subscription+0x1bc>
 801f464:	4604      	mov	r4, r0
 801f466:	2800      	cmp	r0, #0
 801f468:	f000 80d4 	beq.w	801f614 <rmw_create_subscription+0x1bc>
 801f46c:	6800      	ldr	r0, [r0, #0]
 801f46e:	460e      	mov	r6, r1
 801f470:	4615      	mov	r5, r2
 801f472:	461f      	mov	r7, r3
 801f474:	f7f6 fee0 	bl	8016238 <is_uxrce_rmw_identifier_valid>
 801f478:	f080 0001 	eor.w	r0, r0, #1
 801f47c:	b2c0      	uxtb	r0, r0
 801f47e:	2800      	cmp	r0, #0
 801f480:	f040 80c8 	bne.w	801f614 <rmw_create_subscription+0x1bc>
 801f484:	2d00      	cmp	r5, #0
 801f486:	f000 80c5 	beq.w	801f614 <rmw_create_subscription+0x1bc>
 801f48a:	782b      	ldrb	r3, [r5, #0]
 801f48c:	2b00      	cmp	r3, #0
 801f48e:	f000 80c1 	beq.w	801f614 <rmw_create_subscription+0x1bc>
 801f492:	2f00      	cmp	r7, #0
 801f494:	f000 80be 	beq.w	801f614 <rmw_create_subscription+0x1bc>
 801f498:	4867      	ldr	r0, [pc, #412]	@ (801f638 <rmw_create_subscription+0x1e0>)
 801f49a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801f49e:	f7ff f8e9 	bl	801e674 <get_memory>
 801f4a2:	4604      	mov	r4, r0
 801f4a4:	2800      	cmp	r0, #0
 801f4a6:	f000 80b6 	beq.w	801f616 <rmw_create_subscription+0x1be>
 801f4aa:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801f4ae:	f108 0a98 	add.w	sl, r8, #152	@ 0x98
 801f4b2:	f8c8 8080 	str.w	r8, [r8, #128]	@ 0x80
 801f4b6:	f7ff f945 	bl	801e744 <rmw_get_implementation_identifier>
 801f4ba:	f8c8 007c 	str.w	r0, [r8, #124]	@ 0x7c
 801f4be:	f8c8 a084 	str.w	sl, [r8, #132]	@ 0x84
 801f4c2:	4628      	mov	r0, r5
 801f4c4:	f7e0 ff16 	bl	80002f4 <strlen>
 801f4c8:	3001      	adds	r0, #1
 801f4ca:	f108 047c 	add.w	r4, r8, #124	@ 0x7c
 801f4ce:	283c      	cmp	r0, #60	@ 0x3c
 801f4d0:	f200 80a5 	bhi.w	801f61e <rmw_create_subscription+0x1c6>
 801f4d4:	462b      	mov	r3, r5
 801f4d6:	4a59      	ldr	r2, [pc, #356]	@ (801f63c <rmw_create_subscription+0x1e4>)
 801f4d8:	213c      	movs	r1, #60	@ 0x3c
 801f4da:	4650      	mov	r0, sl
 801f4dc:	f002 fd7a 	bl	8021fd4 <sniprintf>
 801f4e0:	4639      	mov	r1, r7
 801f4e2:	2250      	movs	r2, #80	@ 0x50
 801f4e4:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 801f4e8:	f8c8 9020 	str.w	r9, [r8, #32]
 801f4ec:	f002 ffff 	bl	80224ee <memcpy>
 801f4f0:	4630      	mov	r0, r6
 801f4f2:	4953      	ldr	r1, [pc, #332]	@ (801f640 <rmw_create_subscription+0x1e8>)
 801f4f4:	f7f6 ff1c 	bl	8016330 <get_message_typesupport_handle>
 801f4f8:	2800      	cmp	r0, #0
 801f4fa:	f000 8090 	beq.w	801f61e <rmw_create_subscription+0x1c6>
 801f4fe:	6842      	ldr	r2, [r0, #4]
 801f500:	f8c8 2018 	str.w	r2, [r8, #24]
 801f504:	2a00      	cmp	r2, #0
 801f506:	f000 808a 	beq.w	801f61e <rmw_create_subscription+0x1c6>
 801f50a:	4629      	mov	r1, r5
 801f50c:	463b      	mov	r3, r7
 801f50e:	4648      	mov	r0, r9
 801f510:	f7ff fb84 	bl	801ec1c <create_topic>
 801f514:	f8c8 001c 	str.w	r0, [r8, #28]
 801f518:	2800      	cmp	r0, #0
 801f51a:	f000 8085 	beq.w	801f628 <rmw_create_subscription+0x1d0>
 801f51e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f522:	2104      	movs	r1, #4
 801f524:	2506      	movs	r5, #6
 801f526:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801f52a:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 801f52e:	1c42      	adds	r2, r0, #1
 801f530:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 801f534:	f7f7 ff4e 	bl	80173d4 <uxr_object_id>
 801f538:	f8c8 0010 	str.w	r0, [r8, #16]
 801f53c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801f540:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 801f544:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f548:	9500      	str	r5, [sp, #0]
 801f54a:	6819      	ldr	r1, [r3, #0]
 801f54c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801f550:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801f554:	f7f7 fd28 	bl	8016fa8 <uxr_buffer_create_subscriber_bin>
 801f558:	4602      	mov	r2, r0
 801f55a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801f55e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801f562:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801f566:	f7f6 fd55 	bl	8016014 <run_xrce_session>
 801f56a:	2800      	cmp	r0, #0
 801f56c:	d057      	beq.n	801f61e <rmw_create_subscription+0x1c6>
 801f56e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f572:	4629      	mov	r1, r5
 801f574:	ae08      	add	r6, sp, #32
 801f576:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801f57a:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 801f57e:	1c42      	adds	r2, r0, #1
 801f580:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 801f584:	f7f7 ff26 	bl	80173d4 <uxr_object_id>
 801f588:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801f58c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 801f590:	4639      	mov	r1, r7
 801f592:	f8c8 0014 	str.w	r0, [r8, #20]
 801f596:	4630      	mov	r0, r6
 801f598:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 801f59c:	9305      	str	r3, [sp, #20]
 801f59e:	f7f6 fd55 	bl	801604c <convert_qos_profile>
 801f5a2:	9503      	str	r5, [sp, #12]
 801f5a4:	9b05      	ldr	r3, [sp, #20]
 801f5a6:	e896 0003 	ldmia.w	r6, {r0, r1}
 801f5aa:	9001      	str	r0, [sp, #4]
 801f5ac:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 801f5b0:	f8ad 1008 	strh.w	r1, [sp, #8]
 801f5b4:	691b      	ldr	r3, [r3, #16]
 801f5b6:	9300      	str	r3, [sp, #0]
 801f5b8:	f8db 1000 	ldr.w	r1, [fp]
 801f5bc:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 801f5c0:	f7f7 fd98 	bl	80170f4 <uxr_buffer_create_datareader_bin>
 801f5c4:	4602      	mov	r2, r0
 801f5c6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801f5ca:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801f5ce:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801f5d2:	f7f6 fd1f 	bl	8016014 <run_xrce_session>
 801f5d6:	b310      	cbz	r0, 801f61e <rmw_create_subscription+0x1c6>
 801f5d8:	7a3b      	ldrb	r3, [r7, #8]
 801f5da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801f5de:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801f5e2:	2b02      	cmp	r3, #2
 801f5e4:	920a      	str	r2, [sp, #40]	@ 0x28
 801f5e6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801f5ea:	f04f 0200 	mov.w	r2, #0
 801f5ee:	bf08      	it	eq
 801f5f0:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 801f5f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f5f8:	bf18      	it	ne
 801f5fa:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	@ 0xd4
 801f5fe:	920b      	str	r2, [sp, #44]	@ 0x2c
 801f600:	9307      	str	r3, [sp, #28]
 801f602:	ab0a      	add	r3, sp, #40	@ 0x28
 801f604:	9300      	str	r3, [sp, #0]
 801f606:	9b07      	ldr	r3, [sp, #28]
 801f608:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801f60c:	6809      	ldr	r1, [r1, #0]
 801f60e:	f001 fb07 	bl	8020c20 <uxr_buffer_request_data>
 801f612:	e000      	b.n	801f616 <rmw_create_subscription+0x1be>
 801f614:	2400      	movs	r4, #0
 801f616:	4620      	mov	r0, r4
 801f618:	b00d      	add	sp, #52	@ 0x34
 801f61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f61e:	f8d8 001c 	ldr.w	r0, [r8, #28]
 801f622:	b108      	cbz	r0, 801f628 <rmw_create_subscription+0x1d0>
 801f624:	f7f6 fbe8 	bl	8015df8 <rmw_uxrce_fini_topic_memory>
 801f628:	4620      	mov	r0, r4
 801f62a:	2400      	movs	r4, #0
 801f62c:	f7f6 fba2 	bl	8015d74 <rmw_uxrce_fini_subscription_memory>
 801f630:	4620      	mov	r0, r4
 801f632:	b00d      	add	sp, #52	@ 0x34
 801f634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f638:	24069244 	.word	0x24069244
 801f63c:	080249ac 	.word	0x080249ac
 801f640:	08023678 	.word	0x08023678

0801f644 <rmw_subscription_get_actual_qos>:
 801f644:	b178      	cbz	r0, 801f666 <rmw_subscription_get_actual_qos+0x22>
 801f646:	b510      	push	{r4, lr}
 801f648:	fab1 f481 	clz	r4, r1
 801f64c:	0964      	lsrs	r4, r4, #5
 801f64e:	b141      	cbz	r1, 801f662 <rmw_subscription_get_actual_qos+0x1e>
 801f650:	6843      	ldr	r3, [r0, #4]
 801f652:	2250      	movs	r2, #80	@ 0x50
 801f654:	4608      	mov	r0, r1
 801f656:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 801f65a:	f002 ff48 	bl	80224ee <memcpy>
 801f65e:	4620      	mov	r0, r4
 801f660:	bd10      	pop	{r4, pc}
 801f662:	200b      	movs	r0, #11
 801f664:	bd10      	pop	{r4, pc}
 801f666:	200b      	movs	r0, #11
 801f668:	4770      	bx	lr
 801f66a:	bf00      	nop

0801f66c <rmw_destroy_subscription>:
 801f66c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f670:	b128      	cbz	r0, 801f67e <rmw_destroy_subscription+0x12>
 801f672:	4604      	mov	r4, r0
 801f674:	6800      	ldr	r0, [r0, #0]
 801f676:	460d      	mov	r5, r1
 801f678:	f7f6 fdde 	bl	8016238 <is_uxrce_rmw_identifier_valid>
 801f67c:	b918      	cbnz	r0, 801f686 <rmw_destroy_subscription+0x1a>
 801f67e:	2401      	movs	r4, #1
 801f680:	4620      	mov	r0, r4
 801f682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f686:	6863      	ldr	r3, [r4, #4]
 801f688:	2b00      	cmp	r3, #0
 801f68a:	d0f8      	beq.n	801f67e <rmw_destroy_subscription+0x12>
 801f68c:	fab5 f485 	clz	r4, r5
 801f690:	0964      	lsrs	r4, r4, #5
 801f692:	2d00      	cmp	r5, #0
 801f694:	d0f3      	beq.n	801f67e <rmw_destroy_subscription+0x12>
 801f696:	6828      	ldr	r0, [r5, #0]
 801f698:	f7f6 fdce 	bl	8016238 <is_uxrce_rmw_identifier_valid>
 801f69c:	2800      	cmp	r0, #0
 801f69e:	d0ee      	beq.n	801f67e <rmw_destroy_subscription+0x12>
 801f6a0:	686e      	ldr	r6, [r5, #4]
 801f6a2:	2e00      	cmp	r6, #0
 801f6a4:	d0eb      	beq.n	801f67e <rmw_destroy_subscription+0x12>
 801f6a6:	6a37      	ldr	r7, [r6, #32]
 801f6a8:	6972      	ldr	r2, [r6, #20]
 801f6aa:	6938      	ldr	r0, [r7, #16]
 801f6ac:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f6b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f6b4:	6819      	ldr	r1, [r3, #0]
 801f6b6:	f001 faed 	bl	8020c94 <uxr_buffer_cancel_data>
 801f6ba:	4602      	mov	r2, r0
 801f6bc:	6938      	ldr	r0, [r7, #16]
 801f6be:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801f6c2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801f6c6:	f7f6 fca5 	bl	8016014 <run_xrce_session>
 801f6ca:	69f0      	ldr	r0, [r6, #28]
 801f6cc:	f7ff faf6 	bl	801ecbc <destroy_topic>
 801f6d0:	6a33      	ldr	r3, [r6, #32]
 801f6d2:	6972      	ldr	r2, [r6, #20]
 801f6d4:	6918      	ldr	r0, [r3, #16]
 801f6d6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f6da:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f6de:	6819      	ldr	r1, [r3, #0]
 801f6e0:	f7f7 fb7e 	bl	8016de0 <uxr_buffer_delete_entity>
 801f6e4:	6a33      	ldr	r3, [r6, #32]
 801f6e6:	4680      	mov	r8, r0
 801f6e8:	6932      	ldr	r2, [r6, #16]
 801f6ea:	6918      	ldr	r0, [r3, #16]
 801f6ec:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f6f0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f6f4:	6819      	ldr	r1, [r3, #0]
 801f6f6:	f7f7 fb73 	bl	8016de0 <uxr_buffer_delete_entity>
 801f6fa:	4606      	mov	r6, r0
 801f6fc:	6938      	ldr	r0, [r7, #16]
 801f6fe:	4642      	mov	r2, r8
 801f700:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801f704:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801f708:	f7f6 fc84 	bl	8016014 <run_xrce_session>
 801f70c:	693f      	ldr	r7, [r7, #16]
 801f70e:	4632      	mov	r2, r6
 801f710:	4606      	mov	r6, r0
 801f712:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801f716:	4638      	mov	r0, r7
 801f718:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 801f71c:	f7f6 fc7a 	bl	8016014 <run_xrce_session>
 801f720:	b126      	cbz	r6, 801f72c <rmw_destroy_subscription+0xc0>
 801f722:	b118      	cbz	r0, 801f72c <rmw_destroy_subscription+0xc0>
 801f724:	4628      	mov	r0, r5
 801f726:	f7f6 fb25 	bl	8015d74 <rmw_uxrce_fini_subscription_memory>
 801f72a:	e7a9      	b.n	801f680 <rmw_destroy_subscription+0x14>
 801f72c:	2402      	movs	r4, #2
 801f72e:	e7f9      	b.n	801f724 <rmw_destroy_subscription+0xb8>

0801f730 <rmw_take_with_info>:
 801f730:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f732:	4604      	mov	r4, r0
 801f734:	6800      	ldr	r0, [r0, #0]
 801f736:	b089      	sub	sp, #36	@ 0x24
 801f738:	460f      	mov	r7, r1
 801f73a:	4615      	mov	r5, r2
 801f73c:	b128      	cbz	r0, 801f74a <rmw_take_with_info+0x1a>
 801f73e:	4b24      	ldr	r3, [pc, #144]	@ (801f7d0 <rmw_take_with_info+0xa0>)
 801f740:	6819      	ldr	r1, [r3, #0]
 801f742:	f7e0 fdcd 	bl	80002e0 <strcmp>
 801f746:	2800      	cmp	r0, #0
 801f748:	d13e      	bne.n	801f7c8 <rmw_take_with_info+0x98>
 801f74a:	b305      	cbz	r5, 801f78e <rmw_take_with_info+0x5e>
 801f74c:	2300      	movs	r3, #0
 801f74e:	6864      	ldr	r4, [r4, #4]
 801f750:	702b      	strb	r3, [r5, #0]
 801f752:	f7f6 fbe1 	bl	8015f18 <rmw_uxrce_clean_expired_static_input_buffer>
 801f756:	4620      	mov	r0, r4
 801f758:	f7f6 fbb4 	bl	8015ec4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801f75c:	4606      	mov	r6, r0
 801f75e:	b1f0      	cbz	r0, 801f79e <rmw_take_with_info+0x6e>
 801f760:	6881      	ldr	r1, [r0, #8]
 801f762:	4668      	mov	r0, sp
 801f764:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801f768:	3110      	adds	r1, #16
 801f76a:	f7f4 fcfd 	bl	8014168 <ucdr_init_buffer>
 801f76e:	69a3      	ldr	r3, [r4, #24]
 801f770:	4639      	mov	r1, r7
 801f772:	4668      	mov	r0, sp
 801f774:	68db      	ldr	r3, [r3, #12]
 801f776:	4798      	blx	r3
 801f778:	4604      	mov	r4, r0
 801f77a:	4631      	mov	r1, r6
 801f77c:	4815      	ldr	r0, [pc, #84]	@ (801f7d4 <rmw_take_with_info+0xa4>)
 801f77e:	f7fe ff89 	bl	801e694 <put_memory>
 801f782:	702c      	strb	r4, [r5, #0]
 801f784:	f084 0001 	eor.w	r0, r4, #1
 801f788:	b2c0      	uxtb	r0, r0
 801f78a:	b009      	add	sp, #36	@ 0x24
 801f78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f78e:	6864      	ldr	r4, [r4, #4]
 801f790:	f7f6 fbc2 	bl	8015f18 <rmw_uxrce_clean_expired_static_input_buffer>
 801f794:	4620      	mov	r0, r4
 801f796:	f7f6 fb95 	bl	8015ec4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801f79a:	4605      	mov	r5, r0
 801f79c:	b910      	cbnz	r0, 801f7a4 <rmw_take_with_info+0x74>
 801f79e:	2001      	movs	r0, #1
 801f7a0:	b009      	add	sp, #36	@ 0x24
 801f7a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f7a4:	68a9      	ldr	r1, [r5, #8]
 801f7a6:	4668      	mov	r0, sp
 801f7a8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801f7ac:	3110      	adds	r1, #16
 801f7ae:	f7f4 fcdb 	bl	8014168 <ucdr_init_buffer>
 801f7b2:	69a3      	ldr	r3, [r4, #24]
 801f7b4:	4639      	mov	r1, r7
 801f7b6:	4668      	mov	r0, sp
 801f7b8:	68db      	ldr	r3, [r3, #12]
 801f7ba:	4798      	blx	r3
 801f7bc:	4629      	mov	r1, r5
 801f7be:	4604      	mov	r4, r0
 801f7c0:	4804      	ldr	r0, [pc, #16]	@ (801f7d4 <rmw_take_with_info+0xa4>)
 801f7c2:	f7fe ff67 	bl	801e694 <put_memory>
 801f7c6:	e7dd      	b.n	801f784 <rmw_take_with_info+0x54>
 801f7c8:	200c      	movs	r0, #12
 801f7ca:	b009      	add	sp, #36	@ 0x24
 801f7cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f7ce:	bf00      	nop
 801f7d0:	08025928 	.word	0x08025928
 801f7d4:	24069234 	.word	0x24069234

0801f7d8 <rmw_wait>:
 801f7d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f7dc:	4698      	mov	r8, r3
 801f7de:	ea40 0301 	orr.w	r3, r0, r1
 801f7e2:	b089      	sub	sp, #36	@ 0x24
 801f7e4:	ea48 0303 	orr.w	r3, r8, r3
 801f7e8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f7ea:	4313      	orrs	r3, r2
 801f7ec:	f000 8106 	beq.w	801f9fc <rmw_wait+0x224>
 801f7f0:	4605      	mov	r5, r0
 801f7f2:	460e      	mov	r6, r1
 801f7f4:	4691      	mov	r9, r2
 801f7f6:	b16c      	cbz	r4, 801f814 <rmw_wait+0x3c>
 801f7f8:	4ba6      	ldr	r3, [pc, #664]	@ (801fa94 <rmw_wait+0x2bc>)
 801f7fa:	af04      	add	r7, sp, #16
 801f7fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f7fe:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801f802:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801f806:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801f80a:	f7fe fd55 	bl	801e2b8 <rmw_time_equal>
 801f80e:	2800      	cmp	r0, #0
 801f810:	f000 810b 	beq.w	801fa2a <rmw_wait+0x252>
 801f814:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801f818:	f7f6 fb7e 	bl	8015f18 <rmw_uxrce_clean_expired_static_input_buffer>
 801f81c:	4b9e      	ldr	r3, [pc, #632]	@ (801fa98 <rmw_wait+0x2c0>)
 801f81e:	681c      	ldr	r4, [r3, #0]
 801f820:	b14c      	cbz	r4, 801f836 <rmw_wait+0x5e>
 801f822:	4623      	mov	r3, r4
 801f824:	2100      	movs	r1, #0
 801f826:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801f82a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801f82e:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801f832:	2b00      	cmp	r3, #0
 801f834:	d1f7      	bne.n	801f826 <rmw_wait+0x4e>
 801f836:	f1b9 0f00 	cmp.w	r9, #0
 801f83a:	d011      	beq.n	801f860 <rmw_wait+0x88>
 801f83c:	f8d9 1000 	ldr.w	r1, [r9]
 801f840:	b171      	cbz	r1, 801f860 <rmw_wait+0x88>
 801f842:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801f846:	2300      	movs	r3, #0
 801f848:	2001      	movs	r0, #1
 801f84a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f84e:	3301      	adds	r3, #1
 801f850:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801f852:	4299      	cmp	r1, r3
 801f854:	6912      	ldr	r2, [r2, #16]
 801f856:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801f85a:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801f85e:	d1f4      	bne.n	801f84a <rmw_wait+0x72>
 801f860:	f1b8 0f00 	cmp.w	r8, #0
 801f864:	d011      	beq.n	801f88a <rmw_wait+0xb2>
 801f866:	f8d8 1000 	ldr.w	r1, [r8]
 801f86a:	b171      	cbz	r1, 801f88a <rmw_wait+0xb2>
 801f86c:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801f870:	2300      	movs	r3, #0
 801f872:	2001      	movs	r0, #1
 801f874:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f878:	3301      	adds	r3, #1
 801f87a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801f87c:	4299      	cmp	r1, r3
 801f87e:	6912      	ldr	r2, [r2, #16]
 801f880:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801f884:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801f888:	d1f4      	bne.n	801f874 <rmw_wait+0x9c>
 801f88a:	b185      	cbz	r5, 801f8ae <rmw_wait+0xd6>
 801f88c:	6829      	ldr	r1, [r5, #0]
 801f88e:	b171      	cbz	r1, 801f8ae <rmw_wait+0xd6>
 801f890:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801f894:	2300      	movs	r3, #0
 801f896:	2001      	movs	r0, #1
 801f898:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f89c:	3301      	adds	r3, #1
 801f89e:	6a12      	ldr	r2, [r2, #32]
 801f8a0:	4299      	cmp	r1, r3
 801f8a2:	6912      	ldr	r2, [r2, #16]
 801f8a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801f8a8:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801f8ac:	d1f4      	bne.n	801f898 <rmw_wait+0xc0>
 801f8ae:	b344      	cbz	r4, 801f902 <rmw_wait+0x12a>
 801f8b0:	4622      	mov	r2, r4
 801f8b2:	2300      	movs	r3, #0
 801f8b4:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801f8b8:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801f8bc:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801f8c0:	440b      	add	r3, r1
 801f8c2:	b2db      	uxtb	r3, r3
 801f8c4:	2a00      	cmp	r2, #0
 801f8c6:	d1f5      	bne.n	801f8b4 <rmw_wait+0xdc>
 801f8c8:	2b00      	cmp	r3, #0
 801f8ca:	d05f      	beq.n	801f98c <rmw_wait+0x1b4>
 801f8cc:	1c7a      	adds	r2, r7, #1
 801f8ce:	d00d      	beq.n	801f8ec <rmw_wait+0x114>
 801f8d0:	ee07 7a90 	vmov	s15, r7
 801f8d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801f8d8:	ee07 3a90 	vmov	s15, r3
 801f8dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f8e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f8e4:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801f8e8:	ee17 7a90 	vmov	r7, s15
 801f8ec:	68a0      	ldr	r0, [r4, #8]
 801f8ee:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801f8f2:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801f8f6:	2b00      	cmp	r3, #0
 801f8f8:	f040 808d 	bne.w	801fa16 <rmw_wait+0x23e>
 801f8fc:	6864      	ldr	r4, [r4, #4]
 801f8fe:	2c00      	cmp	r4, #0
 801f900:	d1f4      	bne.n	801f8ec <rmw_wait+0x114>
 801f902:	f1b9 0f00 	cmp.w	r9, #0
 801f906:	f000 80a1 	beq.w	801fa4c <rmw_wait+0x274>
 801f90a:	f8d9 7000 	ldr.w	r7, [r9]
 801f90e:	2f00      	cmp	r7, #0
 801f910:	f000 80a4 	beq.w	801fa5c <rmw_wait+0x284>
 801f914:	2400      	movs	r4, #0
 801f916:	4627      	mov	r7, r4
 801f918:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801f91c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801f920:	f7f6 fad0 	bl	8015ec4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801f924:	2800      	cmp	r0, #0
 801f926:	d03b      	beq.n	801f9a0 <rmw_wait+0x1c8>
 801f928:	3401      	adds	r4, #1
 801f92a:	f8d9 3000 	ldr.w	r3, [r9]
 801f92e:	2701      	movs	r7, #1
 801f930:	42a3      	cmp	r3, r4
 801f932:	d8f1      	bhi.n	801f918 <rmw_wait+0x140>
 801f934:	2701      	movs	r7, #1
 801f936:	f1b8 0f00 	cmp.w	r8, #0
 801f93a:	d010      	beq.n	801f95e <rmw_wait+0x186>
 801f93c:	f8d8 3000 	ldr.w	r3, [r8]
 801f940:	b16b      	cbz	r3, 801f95e <rmw_wait+0x186>
 801f942:	2400      	movs	r4, #0
 801f944:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801f948:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801f94c:	f7f6 faba 	bl	8015ec4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801f950:	b370      	cbz	r0, 801f9b0 <rmw_wait+0x1d8>
 801f952:	3401      	adds	r4, #1
 801f954:	f8d8 3000 	ldr.w	r3, [r8]
 801f958:	2701      	movs	r7, #1
 801f95a:	42a3      	cmp	r3, r4
 801f95c:	d8f2      	bhi.n	801f944 <rmw_wait+0x16c>
 801f95e:	2d00      	cmp	r5, #0
 801f960:	d035      	beq.n	801f9ce <rmw_wait+0x1f6>
 801f962:	682b      	ldr	r3, [r5, #0]
 801f964:	b39b      	cbz	r3, 801f9ce <rmw_wait+0x1f6>
 801f966:	2400      	movs	r4, #0
 801f968:	686b      	ldr	r3, [r5, #4]
 801f96a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801f96e:	f7f6 faa9 	bl	8015ec4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801f972:	b328      	cbz	r0, 801f9c0 <rmw_wait+0x1e8>
 801f974:	3401      	adds	r4, #1
 801f976:	682b      	ldr	r3, [r5, #0]
 801f978:	2701      	movs	r7, #1
 801f97a:	42a3      	cmp	r3, r4
 801f97c:	d8f4      	bhi.n	801f968 <rmw_wait+0x190>
 801f97e:	2e00      	cmp	r6, #0
 801f980:	d03c      	beq.n	801f9fc <rmw_wait+0x224>
 801f982:	6834      	ldr	r4, [r6, #0]
 801f984:	2c00      	cmp	r4, #0
 801f986:	d039      	beq.n	801f9fc <rmw_wait+0x224>
 801f988:	2701      	movs	r7, #1
 801f98a:	e023      	b.n	801f9d4 <rmw_wait+0x1fc>
 801f98c:	68a0      	ldr	r0, [r4, #8]
 801f98e:	2100      	movs	r1, #0
 801f990:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f994:	f7f8 faf2 	bl	8017f7c <uxr_run_session_timeout>
 801f998:	6864      	ldr	r4, [r4, #4]
 801f99a:	2c00      	cmp	r4, #0
 801f99c:	d1f6      	bne.n	801f98c <rmw_wait+0x1b4>
 801f99e:	e7b0      	b.n	801f902 <rmw_wait+0x12a>
 801f9a0:	e9d9 3200 	ldrd	r3, r2, [r9]
 801f9a4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801f9a8:	3401      	adds	r4, #1
 801f9aa:	42a3      	cmp	r3, r4
 801f9ac:	d8b4      	bhi.n	801f918 <rmw_wait+0x140>
 801f9ae:	e7c2      	b.n	801f936 <rmw_wait+0x15e>
 801f9b0:	e9d8 3200 	ldrd	r3, r2, [r8]
 801f9b4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801f9b8:	3401      	adds	r4, #1
 801f9ba:	429c      	cmp	r4, r3
 801f9bc:	d3c2      	bcc.n	801f944 <rmw_wait+0x16c>
 801f9be:	e7ce      	b.n	801f95e <rmw_wait+0x186>
 801f9c0:	e9d5 3200 	ldrd	r3, r2, [r5]
 801f9c4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801f9c8:	3401      	adds	r4, #1
 801f9ca:	42a3      	cmp	r3, r4
 801f9cc:	d8cc      	bhi.n	801f968 <rmw_wait+0x190>
 801f9ce:	b1a6      	cbz	r6, 801f9fa <rmw_wait+0x222>
 801f9d0:	6834      	ldr	r4, [r6, #0]
 801f9d2:	b194      	cbz	r4, 801f9fa <rmw_wait+0x222>
 801f9d4:	2300      	movs	r3, #0
 801f9d6:	461d      	mov	r5, r3
 801f9d8:	e004      	b.n	801f9e4 <rmw_wait+0x20c>
 801f9da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801f9de:	3301      	adds	r3, #1
 801f9e0:	42a3      	cmp	r3, r4
 801f9e2:	d00a      	beq.n	801f9fa <rmw_wait+0x222>
 801f9e4:	6870      	ldr	r0, [r6, #4]
 801f9e6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801f9ea:	7c0a      	ldrb	r2, [r1, #16]
 801f9ec:	2a00      	cmp	r2, #0
 801f9ee:	d0f4      	beq.n	801f9da <rmw_wait+0x202>
 801f9f0:	3301      	adds	r3, #1
 801f9f2:	4617      	mov	r7, r2
 801f9f4:	740d      	strb	r5, [r1, #16]
 801f9f6:	42a3      	cmp	r3, r4
 801f9f8:	d1f4      	bne.n	801f9e4 <rmw_wait+0x20c>
 801f9fa:	b147      	cbz	r7, 801fa0e <rmw_wait+0x236>
 801f9fc:	2000      	movs	r0, #0
 801f9fe:	b009      	add	sp, #36	@ 0x24
 801fa00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fa04:	b11e      	cbz	r6, 801fa0e <rmw_wait+0x236>
 801fa06:	6834      	ldr	r4, [r6, #0]
 801fa08:	462f      	mov	r7, r5
 801fa0a:	2c00      	cmp	r4, #0
 801fa0c:	d1e2      	bne.n	801f9d4 <rmw_wait+0x1fc>
 801fa0e:	2002      	movs	r0, #2
 801fa10:	b009      	add	sp, #36	@ 0x24
 801fa12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fa16:	4639      	mov	r1, r7
 801fa18:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801fa1c:	f7f8 fac8 	bl	8017fb0 <uxr_run_session_until_data>
 801fa20:	6864      	ldr	r4, [r4, #4]
 801fa22:	2c00      	cmp	r4, #0
 801fa24:	f47f af62 	bne.w	801f8ec <rmw_wait+0x114>
 801fa28:	e76b      	b.n	801f902 <rmw_wait+0x12a>
 801fa2a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801fa2e:	f7fe fc99 	bl	801e364 <rmw_time_total_nsec>
 801fa32:	2300      	movs	r3, #0
 801fa34:	4a19      	ldr	r2, [pc, #100]	@ (801fa9c <rmw_wait+0x2c4>)
 801fa36:	f7e0 fd0b 	bl	8000450 <__aeabi_uldivmod>
 801fa3a:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801fa3e:	4607      	mov	r7, r0
 801fa40:	f171 0300 	sbcs.w	r3, r1, #0
 801fa44:	bfa8      	it	ge
 801fa46:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801fa4a:	e6e5      	b.n	801f818 <rmw_wait+0x40>
 801fa4c:	f1b8 0f00 	cmp.w	r8, #0
 801fa50:	d00f      	beq.n	801fa72 <rmw_wait+0x29a>
 801fa52:	f8d8 3000 	ldr.w	r3, [r8]
 801fa56:	b193      	cbz	r3, 801fa7e <rmw_wait+0x2a6>
 801fa58:	464f      	mov	r7, r9
 801fa5a:	e772      	b.n	801f942 <rmw_wait+0x16a>
 801fa5c:	f1b8 0f00 	cmp.w	r8, #0
 801fa60:	d007      	beq.n	801fa72 <rmw_wait+0x29a>
 801fa62:	f8d8 3000 	ldr.w	r3, [r8]
 801fa66:	2b00      	cmp	r3, #0
 801fa68:	f47f af6b 	bne.w	801f942 <rmw_wait+0x16a>
 801fa6c:	b155      	cbz	r5, 801fa84 <rmw_wait+0x2ac>
 801fa6e:	461f      	mov	r7, r3
 801fa70:	e777      	b.n	801f962 <rmw_wait+0x18a>
 801fa72:	2d00      	cmp	r5, #0
 801fa74:	d0c6      	beq.n	801fa04 <rmw_wait+0x22c>
 801fa76:	682b      	ldr	r3, [r5, #0]
 801fa78:	b143      	cbz	r3, 801fa8c <rmw_wait+0x2b4>
 801fa7a:	4647      	mov	r7, r8
 801fa7c:	e773      	b.n	801f966 <rmw_wait+0x18e>
 801fa7e:	b10d      	cbz	r5, 801fa84 <rmw_wait+0x2ac>
 801fa80:	464f      	mov	r7, r9
 801fa82:	e76e      	b.n	801f962 <rmw_wait+0x18a>
 801fa84:	462f      	mov	r7, r5
 801fa86:	2e00      	cmp	r6, #0
 801fa88:	d1a2      	bne.n	801f9d0 <rmw_wait+0x1f8>
 801fa8a:	e7c0      	b.n	801fa0e <rmw_wait+0x236>
 801fa8c:	4647      	mov	r7, r8
 801fa8e:	2e00      	cmp	r6, #0
 801fa90:	d19e      	bne.n	801f9d0 <rmw_wait+0x1f8>
 801fa92:	e7bc      	b.n	801fa0e <rmw_wait+0x236>
 801fa94:	08023430 	.word	0x08023430
 801fa98:	24069224 	.word	0x24069224
 801fa9c:	000f4240 	.word	0x000f4240

0801faa0 <rmw_create_wait_set>:
 801faa0:	b508      	push	{r3, lr}
 801faa2:	4803      	ldr	r0, [pc, #12]	@ (801fab0 <rmw_create_wait_set+0x10>)
 801faa4:	f7fe fde6 	bl	801e674 <get_memory>
 801faa8:	b108      	cbz	r0, 801faae <rmw_create_wait_set+0xe>
 801faaa:	6880      	ldr	r0, [r0, #8]
 801faac:	3010      	adds	r0, #16
 801faae:	bd08      	pop	{r3, pc}
 801fab0:	24069264 	.word	0x24069264

0801fab4 <rmw_destroy_wait_set>:
 801fab4:	b508      	push	{r3, lr}
 801fab6:	4b08      	ldr	r3, [pc, #32]	@ (801fad8 <rmw_destroy_wait_set+0x24>)
 801fab8:	6819      	ldr	r1, [r3, #0]
 801faba:	b911      	cbnz	r1, 801fac2 <rmw_destroy_wait_set+0xe>
 801fabc:	e00a      	b.n	801fad4 <rmw_destroy_wait_set+0x20>
 801fabe:	6849      	ldr	r1, [r1, #4]
 801fac0:	b141      	cbz	r1, 801fad4 <rmw_destroy_wait_set+0x20>
 801fac2:	688b      	ldr	r3, [r1, #8]
 801fac4:	3310      	adds	r3, #16
 801fac6:	4298      	cmp	r0, r3
 801fac8:	d1f9      	bne.n	801fabe <rmw_destroy_wait_set+0xa>
 801faca:	4803      	ldr	r0, [pc, #12]	@ (801fad8 <rmw_destroy_wait_set+0x24>)
 801facc:	f7fe fde2 	bl	801e694 <put_memory>
 801fad0:	2000      	movs	r0, #0
 801fad2:	bd08      	pop	{r3, pc}
 801fad4:	2001      	movs	r0, #1
 801fad6:	bd08      	pop	{r3, pc}
 801fad8:	24069264 	.word	0x24069264

0801fadc <rosgraph_msgs__msg__Clock__init>:
 801fadc:	b538      	push	{r3, r4, r5, lr}
 801fade:	4604      	mov	r4, r0
 801fae0:	b128      	cbz	r0, 801faee <rosgraph_msgs__msg__Clock__init+0x12>
 801fae2:	f7f7 f91f 	bl	8016d24 <builtin_interfaces__msg__Time__init>
 801fae6:	4605      	mov	r5, r0
 801fae8:	b120      	cbz	r0, 801faf4 <rosgraph_msgs__msg__Clock__init+0x18>
 801faea:	4628      	mov	r0, r5
 801faec:	bd38      	pop	{r3, r4, r5, pc}
 801faee:	4605      	mov	r5, r0
 801faf0:	4628      	mov	r0, r5
 801faf2:	bd38      	pop	{r3, r4, r5, pc}
 801faf4:	4620      	mov	r0, r4
 801faf6:	f7f7 f919 	bl	8016d2c <builtin_interfaces__msg__Time__fini>
 801fafa:	4628      	mov	r0, r5
 801fafc:	bd38      	pop	{r3, r4, r5, pc}
 801fafe:	bf00      	nop

0801fb00 <rosgraph_msgs__msg__Clock__fini>:
 801fb00:	b108      	cbz	r0, 801fb06 <rosgraph_msgs__msg__Clock__fini+0x6>
 801fb02:	f7f7 b913 	b.w	8016d2c <builtin_interfaces__msg__Time__fini>
 801fb06:	4770      	bx	lr

0801fb08 <std_msgs__msg__Header__init>:
 801fb08:	b570      	push	{r4, r5, r6, lr}
 801fb0a:	4605      	mov	r5, r0
 801fb0c:	b1a8      	cbz	r0, 801fb3a <std_msgs__msg__Header__init+0x32>
 801fb0e:	f7f7 f909 	bl	8016d24 <builtin_interfaces__msg__Time__init>
 801fb12:	4604      	mov	r4, r0
 801fb14:	b140      	cbz	r0, 801fb28 <std_msgs__msg__Header__init+0x20>
 801fb16:	f105 0608 	add.w	r6, r5, #8
 801fb1a:	4630      	mov	r0, r6
 801fb1c:	f001 fe86 	bl	802182c <rosidl_runtime_c__String__init>
 801fb20:	4604      	mov	r4, r0
 801fb22:	b168      	cbz	r0, 801fb40 <std_msgs__msg__Header__init+0x38>
 801fb24:	4620      	mov	r0, r4
 801fb26:	bd70      	pop	{r4, r5, r6, pc}
 801fb28:	4628      	mov	r0, r5
 801fb2a:	f7f7 f8ff 	bl	8016d2c <builtin_interfaces__msg__Time__fini>
 801fb2e:	f105 0008 	add.w	r0, r5, #8
 801fb32:	f001 fe91 	bl	8021858 <rosidl_runtime_c__String__fini>
 801fb36:	4620      	mov	r0, r4
 801fb38:	bd70      	pop	{r4, r5, r6, pc}
 801fb3a:	4604      	mov	r4, r0
 801fb3c:	4620      	mov	r0, r4
 801fb3e:	bd70      	pop	{r4, r5, r6, pc}
 801fb40:	4628      	mov	r0, r5
 801fb42:	f7f7 f8f3 	bl	8016d2c <builtin_interfaces__msg__Time__fini>
 801fb46:	4630      	mov	r0, r6
 801fb48:	f001 fe86 	bl	8021858 <rosidl_runtime_c__String__fini>
 801fb4c:	e7ea      	b.n	801fb24 <std_msgs__msg__Header__init+0x1c>
 801fb4e:	bf00      	nop

0801fb50 <std_msgs__msg__Header__fini>:
 801fb50:	b148      	cbz	r0, 801fb66 <std_msgs__msg__Header__fini+0x16>
 801fb52:	b510      	push	{r4, lr}
 801fb54:	4604      	mov	r4, r0
 801fb56:	f7f7 f8e9 	bl	8016d2c <builtin_interfaces__msg__Time__fini>
 801fb5a:	f104 0008 	add.w	r0, r4, #8
 801fb5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fb62:	f001 be79 	b.w	8021858 <rosidl_runtime_c__String__fini>
 801fb66:	4770      	bx	lr

0801fb68 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>:
 801fb68:	b570      	push	{r4, r5, r6, lr}
 801fb6a:	4605      	mov	r5, r0
 801fb6c:	b1a8      	cbz	r0, 801fb9a <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x32>
 801fb6e:	f7ff ffcb 	bl	801fb08 <std_msgs__msg__Header__init>
 801fb72:	4604      	mov	r4, r0
 801fb74:	b140      	cbz	r0, 801fb88 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x20>
 801fb76:	f105 0618 	add.w	r6, r5, #24
 801fb7a:	4630      	mov	r0, r6
 801fb7c:	f001 feb4 	bl	80218e8 <tier4_vehicle_msgs__msg__ActuationCommand__init>
 801fb80:	4604      	mov	r4, r0
 801fb82:	b168      	cbz	r0, 801fba0 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x38>
 801fb84:	4620      	mov	r0, r4
 801fb86:	bd70      	pop	{r4, r5, r6, pc}
 801fb88:	4628      	mov	r0, r5
 801fb8a:	f7ff ffe1 	bl	801fb50 <std_msgs__msg__Header__fini>
 801fb8e:	f105 0018 	add.w	r0, r5, #24
 801fb92:	f001 fead 	bl	80218f0 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801fb96:	4620      	mov	r0, r4
 801fb98:	bd70      	pop	{r4, r5, r6, pc}
 801fb9a:	4604      	mov	r4, r0
 801fb9c:	4620      	mov	r0, r4
 801fb9e:	bd70      	pop	{r4, r5, r6, pc}
 801fba0:	4628      	mov	r0, r5
 801fba2:	f7ff ffd5 	bl	801fb50 <std_msgs__msg__Header__fini>
 801fba6:	4630      	mov	r0, r6
 801fba8:	f001 fea2 	bl	80218f0 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801fbac:	e7ea      	b.n	801fb84 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x1c>
 801fbae:	bf00      	nop

0801fbb0 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>:
 801fbb0:	b148      	cbz	r0, 801fbc6 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini+0x16>
 801fbb2:	b510      	push	{r4, lr}
 801fbb4:	4604      	mov	r4, r0
 801fbb6:	f7ff ffcb 	bl	801fb50 <std_msgs__msg__Header__fini>
 801fbba:	f104 0018 	add.w	r0, r4, #24
 801fbbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fbc2:	f001 be95 	b.w	80218f0 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801fbc6:	4770      	bx	lr

0801fbc8 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>:
 801fbc8:	b570      	push	{r4, r5, r6, lr}
 801fbca:	4605      	mov	r5, r0
 801fbcc:	b1a8      	cbz	r0, 801fbfa <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x32>
 801fbce:	f7ff ff9b 	bl	801fb08 <std_msgs__msg__Header__init>
 801fbd2:	4604      	mov	r4, r0
 801fbd4:	b140      	cbz	r0, 801fbe8 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x20>
 801fbd6:	f105 0618 	add.w	r6, r5, #24
 801fbda:	4630      	mov	r0, r6
 801fbdc:	f001 fe8a 	bl	80218f4 <tier4_vehicle_msgs__msg__ActuationStatus__init>
 801fbe0:	4604      	mov	r4, r0
 801fbe2:	b168      	cbz	r0, 801fc00 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x38>
 801fbe4:	4620      	mov	r0, r4
 801fbe6:	bd70      	pop	{r4, r5, r6, pc}
 801fbe8:	4628      	mov	r0, r5
 801fbea:	f7ff ffb1 	bl	801fb50 <std_msgs__msg__Header__fini>
 801fbee:	f105 0018 	add.w	r0, r5, #24
 801fbf2:	f001 fe83 	bl	80218fc <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801fbf6:	4620      	mov	r0, r4
 801fbf8:	bd70      	pop	{r4, r5, r6, pc}
 801fbfa:	4604      	mov	r4, r0
 801fbfc:	4620      	mov	r0, r4
 801fbfe:	bd70      	pop	{r4, r5, r6, pc}
 801fc00:	4628      	mov	r0, r5
 801fc02:	f7ff ffa5 	bl	801fb50 <std_msgs__msg__Header__fini>
 801fc06:	4630      	mov	r0, r6
 801fc08:	f001 fe78 	bl	80218fc <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801fc0c:	e7ea      	b.n	801fbe4 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x1c>
 801fc0e:	bf00      	nop

0801fc10 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>:
 801fc10:	b148      	cbz	r0, 801fc26 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini+0x16>
 801fc12:	b510      	push	{r4, lr}
 801fc14:	4604      	mov	r4, r0
 801fc16:	f7ff ff9b 	bl	801fb50 <std_msgs__msg__Header__fini>
 801fc1a:	f104 0018 	add.w	r0, r4, #24
 801fc1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fc22:	f001 be6b 	b.w	80218fc <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801fc26:	4770      	bx	lr

0801fc28 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>:
 801fc28:	b538      	push	{r3, r4, r5, lr}
 801fc2a:	4604      	mov	r4, r0
 801fc2c:	b128      	cbz	r0, 801fc3a <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x12>
 801fc2e:	f7f7 f879 	bl	8016d24 <builtin_interfaces__msg__Time__init>
 801fc32:	4605      	mov	r5, r0
 801fc34:	b120      	cbz	r0, 801fc40 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x18>
 801fc36:	4628      	mov	r0, r5
 801fc38:	bd38      	pop	{r3, r4, r5, pc}
 801fc3a:	4605      	mov	r5, r0
 801fc3c:	4628      	mov	r0, r5
 801fc3e:	bd38      	pop	{r3, r4, r5, pc}
 801fc40:	4620      	mov	r0, r4
 801fc42:	f7f7 f873 	bl	8016d2c <builtin_interfaces__msg__Time__fini>
 801fc46:	4628      	mov	r0, r5
 801fc48:	bd38      	pop	{r3, r4, r5, pc}
 801fc4a:	bf00      	nop

0801fc4c <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>:
 801fc4c:	b108      	cbz	r0, 801fc52 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini+0x6>
 801fc4e:	f7f7 b86d 	b.w	8016d2c <builtin_interfaces__msg__Time__fini>
 801fc52:	4770      	bx	lr

0801fc54 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>:
 801fc54:	b538      	push	{r3, r4, r5, lr}
 801fc56:	4604      	mov	r4, r0
 801fc58:	b128      	cbz	r0, 801fc66 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x12>
 801fc5a:	f7f7 f863 	bl	8016d24 <builtin_interfaces__msg__Time__init>
 801fc5e:	4605      	mov	r5, r0
 801fc60:	b120      	cbz	r0, 801fc6c <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x18>
 801fc62:	4628      	mov	r0, r5
 801fc64:	bd38      	pop	{r3, r4, r5, pc}
 801fc66:	4605      	mov	r5, r0
 801fc68:	4628      	mov	r0, r5
 801fc6a:	bd38      	pop	{r3, r4, r5, pc}
 801fc6c:	4620      	mov	r0, r4
 801fc6e:	f7f7 f85d 	bl	8016d2c <builtin_interfaces__msg__Time__fini>
 801fc72:	4628      	mov	r0, r5
 801fc74:	bd38      	pop	{r3, r4, r5, pc}
 801fc76:	bf00      	nop

0801fc78 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>:
 801fc78:	b108      	cbz	r0, 801fc7e <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini+0x6>
 801fc7a:	f7f7 b857 	b.w	8016d2c <builtin_interfaces__msg__Time__fini>
 801fc7e:	4770      	bx	lr

0801fc80 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_init_function>:
 801fc80:	f001 be32 	b.w	80218e8 <tier4_vehicle_msgs__msg__ActuationCommand__init>

0801fc84 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_fini_function>:
 801fc84:	f001 be34 	b.w	80218f0 <tier4_vehicle_msgs__msg__ActuationCommand__fini>

0801fc88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 801fc88:	4b04      	ldr	r3, [pc, #16]	@ (801fc9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801fc8a:	681a      	ldr	r2, [r3, #0]
 801fc8c:	b10a      	cbz	r2, 801fc92 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0xa>
 801fc8e:	4803      	ldr	r0, [pc, #12]	@ (801fc9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801fc90:	4770      	bx	lr
 801fc92:	4a03      	ldr	r2, [pc, #12]	@ (801fca0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x18>)
 801fc94:	4801      	ldr	r0, [pc, #4]	@ (801fc9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801fc96:	6812      	ldr	r2, [r2, #0]
 801fc98:	601a      	str	r2, [r3, #0]
 801fc9a:	4770      	bx	lr
 801fc9c:	24001194 	.word	0x24001194
 801fca0:	24000d30 	.word	0x24000d30

0801fca4 <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_init_function>:
 801fca4:	f001 be26 	b.w	80218f4 <tier4_vehicle_msgs__msg__ActuationStatus__init>

0801fca8 <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_fini_function>:
 801fca8:	f001 be28 	b.w	80218fc <tier4_vehicle_msgs__msg__ActuationStatus__fini>

0801fcac <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 801fcac:	4b04      	ldr	r3, [pc, #16]	@ (801fcc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801fcae:	681a      	ldr	r2, [r3, #0]
 801fcb0:	b10a      	cbz	r2, 801fcb6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0xa>
 801fcb2:	4803      	ldr	r0, [pc, #12]	@ (801fcc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801fcb4:	4770      	bx	lr
 801fcb6:	4a03      	ldr	r2, [pc, #12]	@ (801fcc4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x18>)
 801fcb8:	4801      	ldr	r0, [pc, #4]	@ (801fcc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801fcba:	6812      	ldr	r2, [r2, #0]
 801fcbc:	601a      	str	r2, [r3, #0]
 801fcbe:	4770      	bx	lr
 801fcc0:	24001254 	.word	0x24001254
 801fcc4:	24000d30 	.word	0x24000d30

0801fcc8 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 801fcc8:	b1b8      	cbz	r0, 801fcfa <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand+0x32>
 801fcca:	b538      	push	{r3, r4, r5, lr}
 801fccc:	460d      	mov	r5, r1
 801fcce:	2108      	movs	r1, #8
 801fcd0:	4628      	mov	r0, r5
 801fcd2:	f7f4 fa4d 	bl	8014170 <ucdr_alignment>
 801fcd6:	f105 0308 	add.w	r3, r5, #8
 801fcda:	2108      	movs	r1, #8
 801fcdc:	f1c5 0508 	rsb	r5, r5, #8
 801fce0:	181c      	adds	r4, r3, r0
 801fce2:	4620      	mov	r0, r4
 801fce4:	f7f4 fa44 	bl	8014170 <ucdr_alignment>
 801fce8:	2108      	movs	r1, #8
 801fcea:	4408      	add	r0, r1
 801fcec:	4404      	add	r4, r0
 801fcee:	4620      	mov	r0, r4
 801fcf0:	f7f4 fa3e 	bl	8014170 <ucdr_alignment>
 801fcf4:	4428      	add	r0, r5
 801fcf6:	4420      	add	r0, r4
 801fcf8:	bd38      	pop	{r3, r4, r5, pc}
 801fcfa:	4770      	bx	lr

0801fcfc <_ActuationCommand__cdr_deserialize>:
 801fcfc:	b538      	push	{r3, r4, r5, lr}
 801fcfe:	460c      	mov	r4, r1
 801fd00:	b171      	cbz	r1, 801fd20 <_ActuationCommand__cdr_deserialize+0x24>
 801fd02:	4605      	mov	r5, r0
 801fd04:	f7f4 f916 	bl	8013f34 <ucdr_deserialize_double>
 801fd08:	f104 0108 	add.w	r1, r4, #8
 801fd0c:	4628      	mov	r0, r5
 801fd0e:	f7f4 f911 	bl	8013f34 <ucdr_deserialize_double>
 801fd12:	f104 0110 	add.w	r1, r4, #16
 801fd16:	4628      	mov	r0, r5
 801fd18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fd1c:	f7f4 b90a 	b.w	8013f34 <ucdr_deserialize_double>
 801fd20:	4608      	mov	r0, r1
 801fd22:	bd38      	pop	{r3, r4, r5, pc}

0801fd24 <_ActuationCommand__cdr_serialize>:
 801fd24:	b198      	cbz	r0, 801fd4e <_ActuationCommand__cdr_serialize+0x2a>
 801fd26:	b538      	push	{r3, r4, r5, lr}
 801fd28:	460d      	mov	r5, r1
 801fd2a:	4604      	mov	r4, r0
 801fd2c:	ed90 0b00 	vldr	d0, [r0]
 801fd30:	4608      	mov	r0, r1
 801fd32:	f7f4 f82f 	bl	8013d94 <ucdr_serialize_double>
 801fd36:	4628      	mov	r0, r5
 801fd38:	ed94 0b02 	vldr	d0, [r4, #8]
 801fd3c:	f7f4 f82a 	bl	8013d94 <ucdr_serialize_double>
 801fd40:	4628      	mov	r0, r5
 801fd42:	ed94 0b04 	vldr	d0, [r4, #16]
 801fd46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fd4a:	f7f4 b823 	b.w	8013d94 <ucdr_serialize_double>
 801fd4e:	4770      	bx	lr

0801fd50 <_ActuationCommand__get_serialized_size>:
 801fd50:	b190      	cbz	r0, 801fd78 <_ActuationCommand__get_serialized_size+0x28>
 801fd52:	2108      	movs	r1, #8
 801fd54:	2000      	movs	r0, #0
 801fd56:	b510      	push	{r4, lr}
 801fd58:	f7f4 fa0a 	bl	8014170 <ucdr_alignment>
 801fd5c:	2108      	movs	r1, #8
 801fd5e:	1844      	adds	r4, r0, r1
 801fd60:	4620      	mov	r0, r4
 801fd62:	f7f4 fa05 	bl	8014170 <ucdr_alignment>
 801fd66:	2108      	movs	r1, #8
 801fd68:	4408      	add	r0, r1
 801fd6a:	4404      	add	r4, r0
 801fd6c:	4620      	mov	r0, r4
 801fd6e:	f7f4 f9ff 	bl	8014170 <ucdr_alignment>
 801fd72:	3008      	adds	r0, #8
 801fd74:	4420      	add	r0, r4
 801fd76:	bd10      	pop	{r4, pc}
 801fd78:	4770      	bx	lr
 801fd7a:	bf00      	nop

0801fd7c <_ActuationCommand__max_serialized_size>:
 801fd7c:	b538      	push	{r3, r4, r5, lr}
 801fd7e:	2108      	movs	r1, #8
 801fd80:	2000      	movs	r0, #0
 801fd82:	f7f4 f9f5 	bl	8014170 <ucdr_alignment>
 801fd86:	2108      	movs	r1, #8
 801fd88:	1845      	adds	r5, r0, r1
 801fd8a:	4628      	mov	r0, r5
 801fd8c:	f7f4 f9f0 	bl	8014170 <ucdr_alignment>
 801fd90:	2108      	movs	r1, #8
 801fd92:	1844      	adds	r4, r0, r1
 801fd94:	442c      	add	r4, r5
 801fd96:	4620      	mov	r0, r4
 801fd98:	f7f4 f9ea 	bl	8014170 <ucdr_alignment>
 801fd9c:	3008      	adds	r0, #8
 801fd9e:	4420      	add	r0, r4
 801fda0:	bd38      	pop	{r3, r4, r5, pc}
 801fda2:	bf00      	nop

0801fda4 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 801fda4:	b570      	push	{r4, r5, r6, lr}
 801fda6:	460c      	mov	r4, r1
 801fda8:	2301      	movs	r3, #1
 801fdaa:	2108      	movs	r1, #8
 801fdac:	f104 0508 	add.w	r5, r4, #8
 801fdb0:	7003      	strb	r3, [r0, #0]
 801fdb2:	4620      	mov	r0, r4
 801fdb4:	f1c4 0408 	rsb	r4, r4, #8
 801fdb8:	f7f4 f9da 	bl	8014170 <ucdr_alignment>
 801fdbc:	1946      	adds	r6, r0, r5
 801fdbe:	2108      	movs	r1, #8
 801fdc0:	4630      	mov	r0, r6
 801fdc2:	f7f4 f9d5 	bl	8014170 <ucdr_alignment>
 801fdc6:	2108      	movs	r1, #8
 801fdc8:	1845      	adds	r5, r0, r1
 801fdca:	4435      	add	r5, r6
 801fdcc:	4628      	mov	r0, r5
 801fdce:	f7f4 f9cf 	bl	8014170 <ucdr_alignment>
 801fdd2:	4420      	add	r0, r4
 801fdd4:	4428      	add	r0, r5
 801fdd6:	bd70      	pop	{r4, r5, r6, pc}

0801fdd8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 801fdd8:	4800      	ldr	r0, [pc, #0]	@ (801fddc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x4>)
 801fdda:	4770      	bx	lr
 801fddc:	24001260 	.word	0x24001260

0801fde0 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 801fde0:	b1b8      	cbz	r0, 801fe12 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus+0x32>
 801fde2:	b538      	push	{r3, r4, r5, lr}
 801fde4:	460d      	mov	r5, r1
 801fde6:	2108      	movs	r1, #8
 801fde8:	4628      	mov	r0, r5
 801fdea:	f7f4 f9c1 	bl	8014170 <ucdr_alignment>
 801fdee:	f105 0308 	add.w	r3, r5, #8
 801fdf2:	2108      	movs	r1, #8
 801fdf4:	f1c5 0508 	rsb	r5, r5, #8
 801fdf8:	181c      	adds	r4, r3, r0
 801fdfa:	4620      	mov	r0, r4
 801fdfc:	f7f4 f9b8 	bl	8014170 <ucdr_alignment>
 801fe00:	2108      	movs	r1, #8
 801fe02:	4408      	add	r0, r1
 801fe04:	4404      	add	r4, r0
 801fe06:	4620      	mov	r0, r4
 801fe08:	f7f4 f9b2 	bl	8014170 <ucdr_alignment>
 801fe0c:	4428      	add	r0, r5
 801fe0e:	4420      	add	r0, r4
 801fe10:	bd38      	pop	{r3, r4, r5, pc}
 801fe12:	4770      	bx	lr

0801fe14 <_ActuationStatus__cdr_deserialize>:
 801fe14:	b538      	push	{r3, r4, r5, lr}
 801fe16:	460c      	mov	r4, r1
 801fe18:	b171      	cbz	r1, 801fe38 <_ActuationStatus__cdr_deserialize+0x24>
 801fe1a:	4605      	mov	r5, r0
 801fe1c:	f7f4 f88a 	bl	8013f34 <ucdr_deserialize_double>
 801fe20:	f104 0108 	add.w	r1, r4, #8
 801fe24:	4628      	mov	r0, r5
 801fe26:	f7f4 f885 	bl	8013f34 <ucdr_deserialize_double>
 801fe2a:	f104 0110 	add.w	r1, r4, #16
 801fe2e:	4628      	mov	r0, r5
 801fe30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fe34:	f7f4 b87e 	b.w	8013f34 <ucdr_deserialize_double>
 801fe38:	4608      	mov	r0, r1
 801fe3a:	bd38      	pop	{r3, r4, r5, pc}

0801fe3c <_ActuationStatus__cdr_serialize>:
 801fe3c:	b198      	cbz	r0, 801fe66 <_ActuationStatus__cdr_serialize+0x2a>
 801fe3e:	b538      	push	{r3, r4, r5, lr}
 801fe40:	460d      	mov	r5, r1
 801fe42:	4604      	mov	r4, r0
 801fe44:	ed90 0b00 	vldr	d0, [r0]
 801fe48:	4608      	mov	r0, r1
 801fe4a:	f7f3 ffa3 	bl	8013d94 <ucdr_serialize_double>
 801fe4e:	4628      	mov	r0, r5
 801fe50:	ed94 0b02 	vldr	d0, [r4, #8]
 801fe54:	f7f3 ff9e 	bl	8013d94 <ucdr_serialize_double>
 801fe58:	4628      	mov	r0, r5
 801fe5a:	ed94 0b04 	vldr	d0, [r4, #16]
 801fe5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fe62:	f7f3 bf97 	b.w	8013d94 <ucdr_serialize_double>
 801fe66:	4770      	bx	lr

0801fe68 <_ActuationStatus__get_serialized_size>:
 801fe68:	b190      	cbz	r0, 801fe90 <_ActuationStatus__get_serialized_size+0x28>
 801fe6a:	2108      	movs	r1, #8
 801fe6c:	2000      	movs	r0, #0
 801fe6e:	b510      	push	{r4, lr}
 801fe70:	f7f4 f97e 	bl	8014170 <ucdr_alignment>
 801fe74:	2108      	movs	r1, #8
 801fe76:	1844      	adds	r4, r0, r1
 801fe78:	4620      	mov	r0, r4
 801fe7a:	f7f4 f979 	bl	8014170 <ucdr_alignment>
 801fe7e:	2108      	movs	r1, #8
 801fe80:	4408      	add	r0, r1
 801fe82:	4404      	add	r4, r0
 801fe84:	4620      	mov	r0, r4
 801fe86:	f7f4 f973 	bl	8014170 <ucdr_alignment>
 801fe8a:	3008      	adds	r0, #8
 801fe8c:	4420      	add	r0, r4
 801fe8e:	bd10      	pop	{r4, pc}
 801fe90:	4770      	bx	lr
 801fe92:	bf00      	nop

0801fe94 <_ActuationStatus__max_serialized_size>:
 801fe94:	b538      	push	{r3, r4, r5, lr}
 801fe96:	2108      	movs	r1, #8
 801fe98:	2000      	movs	r0, #0
 801fe9a:	f7f4 f969 	bl	8014170 <ucdr_alignment>
 801fe9e:	2108      	movs	r1, #8
 801fea0:	1845      	adds	r5, r0, r1
 801fea2:	4628      	mov	r0, r5
 801fea4:	f7f4 f964 	bl	8014170 <ucdr_alignment>
 801fea8:	2108      	movs	r1, #8
 801feaa:	1844      	adds	r4, r0, r1
 801feac:	442c      	add	r4, r5
 801feae:	4620      	mov	r0, r4
 801feb0:	f7f4 f95e 	bl	8014170 <ucdr_alignment>
 801feb4:	3008      	adds	r0, #8
 801feb6:	4420      	add	r0, r4
 801feb8:	bd38      	pop	{r3, r4, r5, pc}
 801feba:	bf00      	nop

0801febc <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 801febc:	b570      	push	{r4, r5, r6, lr}
 801febe:	460c      	mov	r4, r1
 801fec0:	2301      	movs	r3, #1
 801fec2:	2108      	movs	r1, #8
 801fec4:	f104 0508 	add.w	r5, r4, #8
 801fec8:	7003      	strb	r3, [r0, #0]
 801feca:	4620      	mov	r0, r4
 801fecc:	f1c4 0408 	rsb	r4, r4, #8
 801fed0:	f7f4 f94e 	bl	8014170 <ucdr_alignment>
 801fed4:	1946      	adds	r6, r0, r5
 801fed6:	2108      	movs	r1, #8
 801fed8:	4630      	mov	r0, r6
 801feda:	f7f4 f949 	bl	8014170 <ucdr_alignment>
 801fede:	2108      	movs	r1, #8
 801fee0:	1845      	adds	r5, r0, r1
 801fee2:	4435      	add	r5, r6
 801fee4:	4628      	mov	r0, r5
 801fee6:	f7f4 f943 	bl	8014170 <ucdr_alignment>
 801feea:	4420      	add	r0, r4
 801feec:	4428      	add	r0, r5
 801feee:	bd70      	pop	{r4, r5, r6, pc}

0801fef0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 801fef0:	4800      	ldr	r0, [pc, #0]	@ (801fef4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x4>)
 801fef2:	4770      	bx	lr
 801fef4:	24001288 	.word	0x24001288

0801fef8 <ucdr_serialize_endian_array_char>:
 801fef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fefc:	4619      	mov	r1, r3
 801fefe:	461f      	mov	r7, r3
 801ff00:	4605      	mov	r5, r0
 801ff02:	4690      	mov	r8, r2
 801ff04:	f7f4 f8dc 	bl	80140c0 <ucdr_check_buffer_available_for>
 801ff08:	b9e0      	cbnz	r0, 801ff44 <ucdr_serialize_endian_array_char+0x4c>
 801ff0a:	463e      	mov	r6, r7
 801ff0c:	e00b      	b.n	801ff26 <ucdr_serialize_endian_array_char+0x2e>
 801ff0e:	4441      	add	r1, r8
 801ff10:	68a8      	ldr	r0, [r5, #8]
 801ff12:	4622      	mov	r2, r4
 801ff14:	1b36      	subs	r6, r6, r4
 801ff16:	f002 faea 	bl	80224ee <memcpy>
 801ff1a:	68ab      	ldr	r3, [r5, #8]
 801ff1c:	6928      	ldr	r0, [r5, #16]
 801ff1e:	4423      	add	r3, r4
 801ff20:	4420      	add	r0, r4
 801ff22:	60ab      	str	r3, [r5, #8]
 801ff24:	6128      	str	r0, [r5, #16]
 801ff26:	4631      	mov	r1, r6
 801ff28:	2201      	movs	r2, #1
 801ff2a:	4628      	mov	r0, r5
 801ff2c:	f7f4 f952 	bl	80141d4 <ucdr_check_final_buffer_behavior_array>
 801ff30:	1bb9      	subs	r1, r7, r6
 801ff32:	4604      	mov	r4, r0
 801ff34:	2800      	cmp	r0, #0
 801ff36:	d1ea      	bne.n	801ff0e <ucdr_serialize_endian_array_char+0x16>
 801ff38:	2301      	movs	r3, #1
 801ff3a:	7da8      	ldrb	r0, [r5, #22]
 801ff3c:	756b      	strb	r3, [r5, #21]
 801ff3e:	4058      	eors	r0, r3
 801ff40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff44:	463a      	mov	r2, r7
 801ff46:	4641      	mov	r1, r8
 801ff48:	68a8      	ldr	r0, [r5, #8]
 801ff4a:	f002 fad0 	bl	80224ee <memcpy>
 801ff4e:	68aa      	ldr	r2, [r5, #8]
 801ff50:	692b      	ldr	r3, [r5, #16]
 801ff52:	443a      	add	r2, r7
 801ff54:	443b      	add	r3, r7
 801ff56:	60aa      	str	r2, [r5, #8]
 801ff58:	612b      	str	r3, [r5, #16]
 801ff5a:	e7ed      	b.n	801ff38 <ucdr_serialize_endian_array_char+0x40>

0801ff5c <ucdr_deserialize_endian_array_char>:
 801ff5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff60:	4619      	mov	r1, r3
 801ff62:	461f      	mov	r7, r3
 801ff64:	4605      	mov	r5, r0
 801ff66:	4690      	mov	r8, r2
 801ff68:	f7f4 f8aa 	bl	80140c0 <ucdr_check_buffer_available_for>
 801ff6c:	b9e8      	cbnz	r0, 801ffaa <ucdr_deserialize_endian_array_char+0x4e>
 801ff6e:	463e      	mov	r6, r7
 801ff70:	e00c      	b.n	801ff8c <ucdr_deserialize_endian_array_char+0x30>
 801ff72:	eb08 0003 	add.w	r0, r8, r3
 801ff76:	68a9      	ldr	r1, [r5, #8]
 801ff78:	4622      	mov	r2, r4
 801ff7a:	1b36      	subs	r6, r6, r4
 801ff7c:	f002 fab7 	bl	80224ee <memcpy>
 801ff80:	68ab      	ldr	r3, [r5, #8]
 801ff82:	6928      	ldr	r0, [r5, #16]
 801ff84:	4423      	add	r3, r4
 801ff86:	4420      	add	r0, r4
 801ff88:	60ab      	str	r3, [r5, #8]
 801ff8a:	6128      	str	r0, [r5, #16]
 801ff8c:	4631      	mov	r1, r6
 801ff8e:	2201      	movs	r2, #1
 801ff90:	4628      	mov	r0, r5
 801ff92:	f7f4 f91f 	bl	80141d4 <ucdr_check_final_buffer_behavior_array>
 801ff96:	1bbb      	subs	r3, r7, r6
 801ff98:	4604      	mov	r4, r0
 801ff9a:	2800      	cmp	r0, #0
 801ff9c:	d1e9      	bne.n	801ff72 <ucdr_deserialize_endian_array_char+0x16>
 801ff9e:	2301      	movs	r3, #1
 801ffa0:	7da8      	ldrb	r0, [r5, #22]
 801ffa2:	756b      	strb	r3, [r5, #21]
 801ffa4:	4058      	eors	r0, r3
 801ffa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ffaa:	463a      	mov	r2, r7
 801ffac:	68a9      	ldr	r1, [r5, #8]
 801ffae:	4640      	mov	r0, r8
 801ffb0:	f002 fa9d 	bl	80224ee <memcpy>
 801ffb4:	68aa      	ldr	r2, [r5, #8]
 801ffb6:	692b      	ldr	r3, [r5, #16]
 801ffb8:	443a      	add	r2, r7
 801ffba:	443b      	add	r3, r7
 801ffbc:	60aa      	str	r2, [r5, #8]
 801ffbe:	612b      	str	r3, [r5, #16]
 801ffc0:	e7ed      	b.n	801ff9e <ucdr_deserialize_endian_array_char+0x42>
 801ffc2:	bf00      	nop

0801ffc4 <ucdr_serialize_array_uint8_t>:
 801ffc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ffc8:	4688      	mov	r8, r1
 801ffca:	4611      	mov	r1, r2
 801ffcc:	4617      	mov	r7, r2
 801ffce:	4605      	mov	r5, r0
 801ffd0:	f7f4 f876 	bl	80140c0 <ucdr_check_buffer_available_for>
 801ffd4:	b9e0      	cbnz	r0, 8020010 <ucdr_serialize_array_uint8_t+0x4c>
 801ffd6:	463e      	mov	r6, r7
 801ffd8:	e00b      	b.n	801fff2 <ucdr_serialize_array_uint8_t+0x2e>
 801ffda:	4441      	add	r1, r8
 801ffdc:	68a8      	ldr	r0, [r5, #8]
 801ffde:	4622      	mov	r2, r4
 801ffe0:	1b36      	subs	r6, r6, r4
 801ffe2:	f002 fa84 	bl	80224ee <memcpy>
 801ffe6:	68ab      	ldr	r3, [r5, #8]
 801ffe8:	6928      	ldr	r0, [r5, #16]
 801ffea:	4423      	add	r3, r4
 801ffec:	4420      	add	r0, r4
 801ffee:	60ab      	str	r3, [r5, #8]
 801fff0:	6128      	str	r0, [r5, #16]
 801fff2:	4631      	mov	r1, r6
 801fff4:	2201      	movs	r2, #1
 801fff6:	4628      	mov	r0, r5
 801fff8:	f7f4 f8ec 	bl	80141d4 <ucdr_check_final_buffer_behavior_array>
 801fffc:	1bb9      	subs	r1, r7, r6
 801fffe:	4604      	mov	r4, r0
 8020000:	2800      	cmp	r0, #0
 8020002:	d1ea      	bne.n	801ffda <ucdr_serialize_array_uint8_t+0x16>
 8020004:	2301      	movs	r3, #1
 8020006:	7da8      	ldrb	r0, [r5, #22]
 8020008:	756b      	strb	r3, [r5, #21]
 802000a:	4058      	eors	r0, r3
 802000c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020010:	463a      	mov	r2, r7
 8020012:	4641      	mov	r1, r8
 8020014:	68a8      	ldr	r0, [r5, #8]
 8020016:	f002 fa6a 	bl	80224ee <memcpy>
 802001a:	68aa      	ldr	r2, [r5, #8]
 802001c:	692b      	ldr	r3, [r5, #16]
 802001e:	443a      	add	r2, r7
 8020020:	443b      	add	r3, r7
 8020022:	60aa      	str	r2, [r5, #8]
 8020024:	612b      	str	r3, [r5, #16]
 8020026:	e7ed      	b.n	8020004 <ucdr_serialize_array_uint8_t+0x40>

08020028 <ucdr_serialize_endian_array_uint8_t>:
 8020028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802002c:	4619      	mov	r1, r3
 802002e:	461f      	mov	r7, r3
 8020030:	4605      	mov	r5, r0
 8020032:	4690      	mov	r8, r2
 8020034:	f7f4 f844 	bl	80140c0 <ucdr_check_buffer_available_for>
 8020038:	b9e0      	cbnz	r0, 8020074 <ucdr_serialize_endian_array_uint8_t+0x4c>
 802003a:	463e      	mov	r6, r7
 802003c:	e00b      	b.n	8020056 <ucdr_serialize_endian_array_uint8_t+0x2e>
 802003e:	4441      	add	r1, r8
 8020040:	68a8      	ldr	r0, [r5, #8]
 8020042:	4622      	mov	r2, r4
 8020044:	1b36      	subs	r6, r6, r4
 8020046:	f002 fa52 	bl	80224ee <memcpy>
 802004a:	68ab      	ldr	r3, [r5, #8]
 802004c:	6928      	ldr	r0, [r5, #16]
 802004e:	4423      	add	r3, r4
 8020050:	4420      	add	r0, r4
 8020052:	60ab      	str	r3, [r5, #8]
 8020054:	6128      	str	r0, [r5, #16]
 8020056:	4631      	mov	r1, r6
 8020058:	2201      	movs	r2, #1
 802005a:	4628      	mov	r0, r5
 802005c:	f7f4 f8ba 	bl	80141d4 <ucdr_check_final_buffer_behavior_array>
 8020060:	1bb9      	subs	r1, r7, r6
 8020062:	4604      	mov	r4, r0
 8020064:	2800      	cmp	r0, #0
 8020066:	d1ea      	bne.n	802003e <ucdr_serialize_endian_array_uint8_t+0x16>
 8020068:	2301      	movs	r3, #1
 802006a:	7da8      	ldrb	r0, [r5, #22]
 802006c:	756b      	strb	r3, [r5, #21]
 802006e:	4058      	eors	r0, r3
 8020070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020074:	463a      	mov	r2, r7
 8020076:	4641      	mov	r1, r8
 8020078:	68a8      	ldr	r0, [r5, #8]
 802007a:	f002 fa38 	bl	80224ee <memcpy>
 802007e:	68aa      	ldr	r2, [r5, #8]
 8020080:	692b      	ldr	r3, [r5, #16]
 8020082:	443a      	add	r2, r7
 8020084:	443b      	add	r3, r7
 8020086:	60aa      	str	r2, [r5, #8]
 8020088:	612b      	str	r3, [r5, #16]
 802008a:	e7ed      	b.n	8020068 <ucdr_serialize_endian_array_uint8_t+0x40>

0802008c <ucdr_deserialize_array_uint8_t>:
 802008c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020090:	4688      	mov	r8, r1
 8020092:	4611      	mov	r1, r2
 8020094:	4617      	mov	r7, r2
 8020096:	4605      	mov	r5, r0
 8020098:	f7f4 f812 	bl	80140c0 <ucdr_check_buffer_available_for>
 802009c:	b9e8      	cbnz	r0, 80200da <ucdr_deserialize_array_uint8_t+0x4e>
 802009e:	463e      	mov	r6, r7
 80200a0:	e00c      	b.n	80200bc <ucdr_deserialize_array_uint8_t+0x30>
 80200a2:	eb08 0003 	add.w	r0, r8, r3
 80200a6:	68a9      	ldr	r1, [r5, #8]
 80200a8:	4622      	mov	r2, r4
 80200aa:	1b36      	subs	r6, r6, r4
 80200ac:	f002 fa1f 	bl	80224ee <memcpy>
 80200b0:	68ab      	ldr	r3, [r5, #8]
 80200b2:	6928      	ldr	r0, [r5, #16]
 80200b4:	4423      	add	r3, r4
 80200b6:	4420      	add	r0, r4
 80200b8:	60ab      	str	r3, [r5, #8]
 80200ba:	6128      	str	r0, [r5, #16]
 80200bc:	4631      	mov	r1, r6
 80200be:	2201      	movs	r2, #1
 80200c0:	4628      	mov	r0, r5
 80200c2:	f7f4 f887 	bl	80141d4 <ucdr_check_final_buffer_behavior_array>
 80200c6:	1bbb      	subs	r3, r7, r6
 80200c8:	4604      	mov	r4, r0
 80200ca:	2800      	cmp	r0, #0
 80200cc:	d1e9      	bne.n	80200a2 <ucdr_deserialize_array_uint8_t+0x16>
 80200ce:	2301      	movs	r3, #1
 80200d0:	7da8      	ldrb	r0, [r5, #22]
 80200d2:	756b      	strb	r3, [r5, #21]
 80200d4:	4058      	eors	r0, r3
 80200d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80200da:	463a      	mov	r2, r7
 80200dc:	68a9      	ldr	r1, [r5, #8]
 80200de:	4640      	mov	r0, r8
 80200e0:	f002 fa05 	bl	80224ee <memcpy>
 80200e4:	68aa      	ldr	r2, [r5, #8]
 80200e6:	692b      	ldr	r3, [r5, #16]
 80200e8:	443a      	add	r2, r7
 80200ea:	443b      	add	r3, r7
 80200ec:	60aa      	str	r2, [r5, #8]
 80200ee:	612b      	str	r3, [r5, #16]
 80200f0:	e7ed      	b.n	80200ce <ucdr_deserialize_array_uint8_t+0x42>
 80200f2:	bf00      	nop

080200f4 <ucdr_deserialize_endian_array_uint8_t>:
 80200f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80200f8:	4619      	mov	r1, r3
 80200fa:	461f      	mov	r7, r3
 80200fc:	4605      	mov	r5, r0
 80200fe:	4690      	mov	r8, r2
 8020100:	f7f3 ffde 	bl	80140c0 <ucdr_check_buffer_available_for>
 8020104:	b9e8      	cbnz	r0, 8020142 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8020106:	463e      	mov	r6, r7
 8020108:	e00c      	b.n	8020124 <ucdr_deserialize_endian_array_uint8_t+0x30>
 802010a:	eb08 0003 	add.w	r0, r8, r3
 802010e:	68a9      	ldr	r1, [r5, #8]
 8020110:	4622      	mov	r2, r4
 8020112:	1b36      	subs	r6, r6, r4
 8020114:	f002 f9eb 	bl	80224ee <memcpy>
 8020118:	68ab      	ldr	r3, [r5, #8]
 802011a:	6928      	ldr	r0, [r5, #16]
 802011c:	4423      	add	r3, r4
 802011e:	4420      	add	r0, r4
 8020120:	60ab      	str	r3, [r5, #8]
 8020122:	6128      	str	r0, [r5, #16]
 8020124:	4631      	mov	r1, r6
 8020126:	2201      	movs	r2, #1
 8020128:	4628      	mov	r0, r5
 802012a:	f7f4 f853 	bl	80141d4 <ucdr_check_final_buffer_behavior_array>
 802012e:	1bbb      	subs	r3, r7, r6
 8020130:	4604      	mov	r4, r0
 8020132:	2800      	cmp	r0, #0
 8020134:	d1e9      	bne.n	802010a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8020136:	2301      	movs	r3, #1
 8020138:	7da8      	ldrb	r0, [r5, #22]
 802013a:	756b      	strb	r3, [r5, #21]
 802013c:	4058      	eors	r0, r3
 802013e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020142:	463a      	mov	r2, r7
 8020144:	68a9      	ldr	r1, [r5, #8]
 8020146:	4640      	mov	r0, r8
 8020148:	f002 f9d1 	bl	80224ee <memcpy>
 802014c:	68aa      	ldr	r2, [r5, #8]
 802014e:	692b      	ldr	r3, [r5, #16]
 8020150:	443a      	add	r2, r7
 8020152:	443b      	add	r3, r7
 8020154:	60aa      	str	r2, [r5, #8]
 8020156:	612b      	str	r3, [r5, #16]
 8020158:	e7ed      	b.n	8020136 <ucdr_deserialize_endian_array_uint8_t+0x42>
 802015a:	bf00      	nop

0802015c <ucdr_serialize_string>:
 802015c:	b510      	push	{r4, lr}
 802015e:	b082      	sub	sp, #8
 8020160:	4604      	mov	r4, r0
 8020162:	4608      	mov	r0, r1
 8020164:	9101      	str	r1, [sp, #4]
 8020166:	f7e0 f8c5 	bl	80002f4 <strlen>
 802016a:	4602      	mov	r2, r0
 802016c:	9901      	ldr	r1, [sp, #4]
 802016e:	4620      	mov	r0, r4
 8020170:	3201      	adds	r2, #1
 8020172:	b002      	add	sp, #8
 8020174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020178:	f7f6 bdda 	b.w	8016d30 <ucdr_serialize_sequence_char>

0802017c <ucdr_deserialize_string>:
 802017c:	b500      	push	{lr}
 802017e:	b083      	sub	sp, #12
 8020180:	ab01      	add	r3, sp, #4
 8020182:	f7f6 fde7 	bl	8016d54 <ucdr_deserialize_sequence_char>
 8020186:	b003      	add	sp, #12
 8020188:	f85d fb04 	ldr.w	pc, [sp], #4

0802018c <uxr_init_input_best_effort_stream>:
 802018c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8020190:	8003      	strh	r3, [r0, #0]
 8020192:	4770      	bx	lr

08020194 <uxr_reset_input_best_effort_stream>:
 8020194:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8020198:	8003      	strh	r3, [r0, #0]
 802019a:	4770      	bx	lr

0802019c <uxr_receive_best_effort_message>:
 802019c:	b538      	push	{r3, r4, r5, lr}
 802019e:	4604      	mov	r4, r0
 80201a0:	8800      	ldrh	r0, [r0, #0]
 80201a2:	460d      	mov	r5, r1
 80201a4:	f000 fe74 	bl	8020e90 <uxr_seq_num_cmp>
 80201a8:	4603      	mov	r3, r0
 80201aa:	0fc0      	lsrs	r0, r0, #31
 80201ac:	2b00      	cmp	r3, #0
 80201ae:	bfb8      	it	lt
 80201b0:	8025      	strhlt	r5, [r4, #0]
 80201b2:	bd38      	pop	{r3, r4, r5, pc}

080201b4 <on_full_input_buffer>:
 80201b4:	b570      	push	{r4, r5, r6, lr}
 80201b6:	460c      	mov	r4, r1
 80201b8:	4605      	mov	r5, r0
 80201ba:	8908      	ldrh	r0, [r1, #8]
 80201bc:	682b      	ldr	r3, [r5, #0]
 80201be:	7d26      	ldrb	r6, [r4, #20]
 80201c0:	e9d1 1200 	ldrd	r1, r2, [r1]
 80201c4:	fbb2 f2f0 	udiv	r2, r2, r0
 80201c8:	eba3 0c01 	sub.w	ip, r3, r1
 80201cc:	fbbc fcf2 	udiv	ip, ip, r2
 80201d0:	f10c 0c01 	add.w	ip, ip, #1
 80201d4:	fa1f f38c 	uxth.w	r3, ip
 80201d8:	fbb3 fcf0 	udiv	ip, r3, r0
 80201dc:	fb00 331c 	mls	r3, r0, ip, r3
 80201e0:	b29b      	uxth	r3, r3
 80201e2:	fb02 f303 	mul.w	r3, r2, r3
 80201e6:	1d18      	adds	r0, r3, #4
 80201e8:	4408      	add	r0, r1
 80201ea:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80201ee:	b116      	cbz	r6, 80201f6 <on_full_input_buffer+0x42>
 80201f0:	2600      	movs	r6, #0
 80201f2:	f840 6c04 	str.w	r6, [r0, #-4]
 80201f6:	2a03      	cmp	r2, #3
 80201f8:	d801      	bhi.n	80201fe <on_full_input_buffer+0x4a>
 80201fa:	2001      	movs	r0, #1
 80201fc:	bd70      	pop	{r4, r5, r6, pc}
 80201fe:	3308      	adds	r3, #8
 8020200:	4628      	mov	r0, r5
 8020202:	3a04      	subs	r2, #4
 8020204:	4419      	add	r1, r3
 8020206:	692b      	ldr	r3, [r5, #16]
 8020208:	f7f3 ffa6 	bl	8014158 <ucdr_init_buffer_origin>
 802020c:	4628      	mov	r0, r5
 802020e:	4622      	mov	r2, r4
 8020210:	4902      	ldr	r1, [pc, #8]	@ (802021c <on_full_input_buffer+0x68>)
 8020212:	f7f3 ff7d 	bl	8014110 <ucdr_set_on_full_buffer_callback>
 8020216:	2000      	movs	r0, #0
 8020218:	bd70      	pop	{r4, r5, r6, pc}
 802021a:	bf00      	nop
 802021c:	080201b5 	.word	0x080201b5

08020220 <uxr_init_input_reliable_stream>:
 8020220:	b510      	push	{r4, lr}
 8020222:	e9c0 1200 	strd	r1, r2, [r0]
 8020226:	2400      	movs	r4, #0
 8020228:	9a02      	ldr	r2, [sp, #8]
 802022a:	8103      	strh	r3, [r0, #8]
 802022c:	6102      	str	r2, [r0, #16]
 802022e:	7504      	strb	r4, [r0, #20]
 8020230:	b1c3      	cbz	r3, 8020264 <uxr_init_input_reliable_stream+0x44>
 8020232:	600c      	str	r4, [r1, #0]
 8020234:	8901      	ldrh	r1, [r0, #8]
 8020236:	2901      	cmp	r1, #1
 8020238:	d914      	bls.n	8020264 <uxr_init_input_reliable_stream+0x44>
 802023a:	f04f 0c01 	mov.w	ip, #1
 802023e:	6843      	ldr	r3, [r0, #4]
 8020240:	f10c 0e01 	add.w	lr, ip, #1
 8020244:	fbbc f2f1 	udiv	r2, ip, r1
 8020248:	fbb3 f3f1 	udiv	r3, r3, r1
 802024c:	fb01 c212 	mls	r2, r1, r2, ip
 8020250:	fa1f fc8e 	uxth.w	ip, lr
 8020254:	b292      	uxth	r2, r2
 8020256:	fb02 f303 	mul.w	r3, r2, r3
 802025a:	6802      	ldr	r2, [r0, #0]
 802025c:	50d4      	str	r4, [r2, r3]
 802025e:	8901      	ldrh	r1, [r0, #8]
 8020260:	4561      	cmp	r1, ip
 8020262:	d8ec      	bhi.n	802023e <uxr_init_input_reliable_stream+0x1e>
 8020264:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020268:	60c3      	str	r3, [r0, #12]
 802026a:	bd10      	pop	{r4, pc}

0802026c <uxr_reset_input_reliable_stream>:
 802026c:	8901      	ldrh	r1, [r0, #8]
 802026e:	b1d9      	cbz	r1, 80202a8 <uxr_reset_input_reliable_stream+0x3c>
 8020270:	b510      	push	{r4, lr}
 8020272:	f04f 0e00 	mov.w	lr, #0
 8020276:	46f4      	mov	ip, lr
 8020278:	4674      	mov	r4, lr
 802027a:	6843      	ldr	r3, [r0, #4]
 802027c:	f10e 0e01 	add.w	lr, lr, #1
 8020280:	fbbc f2f1 	udiv	r2, ip, r1
 8020284:	fbb3 f3f1 	udiv	r3, r3, r1
 8020288:	fb01 c212 	mls	r2, r1, r2, ip
 802028c:	fa1f fc8e 	uxth.w	ip, lr
 8020290:	b292      	uxth	r2, r2
 8020292:	fb02 f303 	mul.w	r3, r2, r3
 8020296:	6802      	ldr	r2, [r0, #0]
 8020298:	50d4      	str	r4, [r2, r3]
 802029a:	8901      	ldrh	r1, [r0, #8]
 802029c:	4561      	cmp	r1, ip
 802029e:	d8ec      	bhi.n	802027a <uxr_reset_input_reliable_stream+0xe>
 80202a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80202a4:	60c3      	str	r3, [r0, #12]
 80202a6:	bd10      	pop	{r4, pc}
 80202a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80202ac:	60c3      	str	r3, [r0, #12]
 80202ae:	4770      	bx	lr

080202b0 <uxr_receive_reliable_message>:
 80202b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80202b4:	4604      	mov	r4, r0
 80202b6:	460d      	mov	r5, r1
 80202b8:	8901      	ldrh	r1, [r0, #8]
 80202ba:	4617      	mov	r7, r2
 80202bc:	8980      	ldrh	r0, [r0, #12]
 80202be:	4698      	mov	r8, r3
 80202c0:	f000 fdde 	bl	8020e80 <uxr_seq_num_add>
 80202c4:	4629      	mov	r1, r5
 80202c6:	4606      	mov	r6, r0
 80202c8:	89a0      	ldrh	r0, [r4, #12]
 80202ca:	f000 fde1 	bl	8020e90 <uxr_seq_num_cmp>
 80202ce:	2800      	cmp	r0, #0
 80202d0:	db0a      	blt.n	80202e8 <uxr_receive_reliable_message+0x38>
 80202d2:	2600      	movs	r6, #0
 80202d4:	4629      	mov	r1, r5
 80202d6:	89e0      	ldrh	r0, [r4, #14]
 80202d8:	f000 fdda 	bl	8020e90 <uxr_seq_num_cmp>
 80202dc:	2800      	cmp	r0, #0
 80202de:	da00      	bge.n	80202e2 <uxr_receive_reliable_message+0x32>
 80202e0:	81e5      	strh	r5, [r4, #14]
 80202e2:	4630      	mov	r0, r6
 80202e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80202e8:	4630      	mov	r0, r6
 80202ea:	4629      	mov	r1, r5
 80202ec:	f000 fdd0 	bl	8020e90 <uxr_seq_num_cmp>
 80202f0:	2800      	cmp	r0, #0
 80202f2:	dbee      	blt.n	80202d2 <uxr_receive_reliable_message+0x22>
 80202f4:	6923      	ldr	r3, [r4, #16]
 80202f6:	4638      	mov	r0, r7
 80202f8:	4798      	blx	r3
 80202fa:	4681      	mov	r9, r0
 80202fc:	2101      	movs	r1, #1
 80202fe:	89a0      	ldrh	r0, [r4, #12]
 8020300:	f000 fdbe 	bl	8020e80 <uxr_seq_num_add>
 8020304:	f1b9 0f00 	cmp.w	r9, #0
 8020308:	bf08      	it	eq
 802030a:	4285      	cmpeq	r5, r0
 802030c:	bf0c      	ite	eq
 802030e:	2601      	moveq	r6, #1
 8020310:	2600      	movne	r6, #0
 8020312:	d104      	bne.n	802031e <uxr_receive_reliable_message+0x6e>
 8020314:	2300      	movs	r3, #0
 8020316:	9a08      	ldr	r2, [sp, #32]
 8020318:	81a0      	strh	r0, [r4, #12]
 802031a:	7013      	strb	r3, [r2, #0]
 802031c:	e7da      	b.n	80202d4 <uxr_receive_reliable_message+0x24>
 802031e:	8922      	ldrh	r2, [r4, #8]
 8020320:	6863      	ldr	r3, [r4, #4]
 8020322:	fbb5 f0f2 	udiv	r0, r5, r2
 8020326:	fbb3 f3f2 	udiv	r3, r3, r2
 802032a:	fb02 5010 	mls	r0, r2, r0, r5
 802032e:	b280      	uxth	r0, r0
 8020330:	fb03 f000 	mul.w	r0, r3, r0
 8020334:	6823      	ldr	r3, [r4, #0]
 8020336:	3004      	adds	r0, #4
 8020338:	4418      	add	r0, r3
 802033a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 802033e:	2b00      	cmp	r3, #0
 8020340:	d1c7      	bne.n	80202d2 <uxr_receive_reliable_message+0x22>
 8020342:	4639      	mov	r1, r7
 8020344:	4642      	mov	r2, r8
 8020346:	f002 f8d2 	bl	80224ee <memcpy>
 802034a:	8921      	ldrh	r1, [r4, #8]
 802034c:	6863      	ldr	r3, [r4, #4]
 802034e:	fbb5 f2f1 	udiv	r2, r5, r1
 8020352:	fbb3 f3f1 	udiv	r3, r3, r1
 8020356:	fb01 5212 	mls	r2, r1, r2, r5
 802035a:	b292      	uxth	r2, r2
 802035c:	fb02 f303 	mul.w	r3, r2, r3
 8020360:	6822      	ldr	r2, [r4, #0]
 8020362:	f842 8003 	str.w	r8, [r2, r3]
 8020366:	2301      	movs	r3, #1
 8020368:	9a08      	ldr	r2, [sp, #32]
 802036a:	7013      	strb	r3, [r2, #0]
 802036c:	f1b9 0f00 	cmp.w	r9, #0
 8020370:	d0af      	beq.n	80202d2 <uxr_receive_reliable_message+0x22>
 8020372:	89a6      	ldrh	r6, [r4, #12]
 8020374:	2101      	movs	r1, #1
 8020376:	4630      	mov	r0, r6
 8020378:	f000 fd82 	bl	8020e80 <uxr_seq_num_add>
 802037c:	8921      	ldrh	r1, [r4, #8]
 802037e:	6863      	ldr	r3, [r4, #4]
 8020380:	4606      	mov	r6, r0
 8020382:	fbb0 f2f1 	udiv	r2, r0, r1
 8020386:	fbb3 f3f1 	udiv	r3, r3, r1
 802038a:	fb01 0212 	mls	r2, r1, r2, r0
 802038e:	6820      	ldr	r0, [r4, #0]
 8020390:	b292      	uxth	r2, r2
 8020392:	fb02 f303 	mul.w	r3, r2, r3
 8020396:	3304      	adds	r3, #4
 8020398:	4418      	add	r0, r3
 802039a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 802039e:	2b00      	cmp	r3, #0
 80203a0:	d097      	beq.n	80202d2 <uxr_receive_reliable_message+0x22>
 80203a2:	6923      	ldr	r3, [r4, #16]
 80203a4:	4798      	blx	r3
 80203a6:	2802      	cmp	r0, #2
 80203a8:	d002      	beq.n	80203b0 <uxr_receive_reliable_message+0x100>
 80203aa:	2801      	cmp	r0, #1
 80203ac:	d0e2      	beq.n	8020374 <uxr_receive_reliable_message+0xc4>
 80203ae:	e790      	b.n	80202d2 <uxr_receive_reliable_message+0x22>
 80203b0:	2601      	movs	r6, #1
 80203b2:	e78f      	b.n	80202d4 <uxr_receive_reliable_message+0x24>

080203b4 <uxr_next_input_reliable_buffer_available>:
 80203b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80203b8:	4604      	mov	r4, r0
 80203ba:	460f      	mov	r7, r1
 80203bc:	8980      	ldrh	r0, [r0, #12]
 80203be:	2101      	movs	r1, #1
 80203c0:	4690      	mov	r8, r2
 80203c2:	f000 fd5d 	bl	8020e80 <uxr_seq_num_add>
 80203c6:	8922      	ldrh	r2, [r4, #8]
 80203c8:	6866      	ldr	r6, [r4, #4]
 80203ca:	fbb0 f3f2 	udiv	r3, r0, r2
 80203ce:	fbb6 f6f2 	udiv	r6, r6, r2
 80203d2:	fb02 0313 	mls	r3, r2, r3, r0
 80203d6:	b29b      	uxth	r3, r3
 80203d8:	fb03 f606 	mul.w	r6, r3, r6
 80203dc:	6823      	ldr	r3, [r4, #0]
 80203de:	3604      	adds	r6, #4
 80203e0:	441e      	add	r6, r3
 80203e2:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80203e6:	f1b9 0f00 	cmp.w	r9, #0
 80203ea:	d023      	beq.n	8020434 <uxr_next_input_reliable_buffer_available+0x80>
 80203ec:	4605      	mov	r5, r0
 80203ee:	6923      	ldr	r3, [r4, #16]
 80203f0:	4630      	mov	r0, r6
 80203f2:	4798      	blx	r3
 80203f4:	4682      	mov	sl, r0
 80203f6:	b300      	cbz	r0, 802043a <uxr_next_input_reliable_buffer_available+0x86>
 80203f8:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80203fc:	2101      	movs	r1, #1
 80203fe:	4650      	mov	r0, sl
 8020400:	f000 fd3e 	bl	8020e80 <uxr_seq_num_add>
 8020404:	8921      	ldrh	r1, [r4, #8]
 8020406:	4682      	mov	sl, r0
 8020408:	6863      	ldr	r3, [r4, #4]
 802040a:	6820      	ldr	r0, [r4, #0]
 802040c:	fbba f2f1 	udiv	r2, sl, r1
 8020410:	fbb3 f3f1 	udiv	r3, r3, r1
 8020414:	fb01 a212 	mls	r2, r1, r2, sl
 8020418:	b292      	uxth	r2, r2
 802041a:	fb02 f303 	mul.w	r3, r2, r3
 802041e:	3304      	adds	r3, #4
 8020420:	4418      	add	r0, r3
 8020422:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8020426:	b12b      	cbz	r3, 8020434 <uxr_next_input_reliable_buffer_available+0x80>
 8020428:	6923      	ldr	r3, [r4, #16]
 802042a:	4798      	blx	r3
 802042c:	2802      	cmp	r0, #2
 802042e:	d01b      	beq.n	8020468 <uxr_next_input_reliable_buffer_available+0xb4>
 8020430:	2801      	cmp	r0, #1
 8020432:	d0e3      	beq.n	80203fc <uxr_next_input_reliable_buffer_available+0x48>
 8020434:	2000      	movs	r0, #0
 8020436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802043a:	464a      	mov	r2, r9
 802043c:	4631      	mov	r1, r6
 802043e:	4638      	mov	r0, r7
 8020440:	f7f3 fe92 	bl	8014168 <ucdr_init_buffer>
 8020444:	8921      	ldrh	r1, [r4, #8]
 8020446:	6863      	ldr	r3, [r4, #4]
 8020448:	2001      	movs	r0, #1
 802044a:	fbb5 f2f1 	udiv	r2, r5, r1
 802044e:	fbb3 f3f1 	udiv	r3, r3, r1
 8020452:	fb01 5212 	mls	r2, r1, r2, r5
 8020456:	b292      	uxth	r2, r2
 8020458:	fb02 f303 	mul.w	r3, r2, r3
 802045c:	6822      	ldr	r2, [r4, #0]
 802045e:	f842 a003 	str.w	sl, [r2, r3]
 8020462:	81a5      	strh	r5, [r4, #12]
 8020464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020468:	8920      	ldrh	r0, [r4, #8]
 802046a:	eb06 0108 	add.w	r1, r6, r8
 802046e:	6863      	ldr	r3, [r4, #4]
 8020470:	eba9 0208 	sub.w	r2, r9, r8
 8020474:	fbb5 f6f0 	udiv	r6, r5, r0
 8020478:	fbb3 f3f0 	udiv	r3, r3, r0
 802047c:	fb00 5516 	mls	r5, r0, r6, r5
 8020480:	2000      	movs	r0, #0
 8020482:	b2ad      	uxth	r5, r5
 8020484:	fb03 f505 	mul.w	r5, r3, r5
 8020488:	6823      	ldr	r3, [r4, #0]
 802048a:	5158      	str	r0, [r3, r5]
 802048c:	4638      	mov	r0, r7
 802048e:	f7f3 fe6b 	bl	8014168 <ucdr_init_buffer>
 8020492:	4638      	mov	r0, r7
 8020494:	4622      	mov	r2, r4
 8020496:	4903      	ldr	r1, [pc, #12]	@ (80204a4 <uxr_next_input_reliable_buffer_available+0xf0>)
 8020498:	f7f3 fe3a 	bl	8014110 <ucdr_set_on_full_buffer_callback>
 802049c:	2001      	movs	r0, #1
 802049e:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80204a2:	e7c8      	b.n	8020436 <uxr_next_input_reliable_buffer_available+0x82>
 80204a4:	080201b5 	.word	0x080201b5

080204a8 <uxr_process_heartbeat>:
 80204a8:	b538      	push	{r3, r4, r5, lr}
 80204aa:	4611      	mov	r1, r2
 80204ac:	4604      	mov	r4, r0
 80204ae:	89c0      	ldrh	r0, [r0, #14]
 80204b0:	4615      	mov	r5, r2
 80204b2:	f000 fced 	bl	8020e90 <uxr_seq_num_cmp>
 80204b6:	2800      	cmp	r0, #0
 80204b8:	bfb8      	it	lt
 80204ba:	81e5      	strhlt	r5, [r4, #14]
 80204bc:	bd38      	pop	{r3, r4, r5, pc}
 80204be:	bf00      	nop

080204c0 <uxr_compute_acknack>:
 80204c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80204c4:	8903      	ldrh	r3, [r0, #8]
 80204c6:	4604      	mov	r4, r0
 80204c8:	460f      	mov	r7, r1
 80204ca:	8985      	ldrh	r5, [r0, #12]
 80204cc:	b1db      	cbz	r3, 8020506 <uxr_compute_acknack+0x46>
 80204ce:	4628      	mov	r0, r5
 80204d0:	2601      	movs	r6, #1
 80204d2:	e004      	b.n	80204de <uxr_compute_acknack+0x1e>
 80204d4:	4566      	cmp	r6, ip
 80204d6:	f106 0601 	add.w	r6, r6, #1
 80204da:	d214      	bcs.n	8020506 <uxr_compute_acknack+0x46>
 80204dc:	89a0      	ldrh	r0, [r4, #12]
 80204de:	b2b1      	uxth	r1, r6
 80204e0:	f000 fcce 	bl	8020e80 <uxr_seq_num_add>
 80204e4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80204e8:	fbb0 f2fc 	udiv	r2, r0, ip
 80204ec:	e9d4 1300 	ldrd	r1, r3, [r4]
 80204f0:	fb0c 0212 	mls	r2, ip, r2, r0
 80204f4:	fbb3 f3fc 	udiv	r3, r3, ip
 80204f8:	b292      	uxth	r2, r2
 80204fa:	fb02 f303 	mul.w	r3, r2, r3
 80204fe:	58cb      	ldr	r3, [r1, r3]
 8020500:	2b00      	cmp	r3, #0
 8020502:	d1e7      	bne.n	80204d4 <uxr_compute_acknack+0x14>
 8020504:	4605      	mov	r5, r0
 8020506:	803d      	strh	r5, [r7, #0]
 8020508:	2101      	movs	r1, #1
 802050a:	89e6      	ldrh	r6, [r4, #14]
 802050c:	4628      	mov	r0, r5
 802050e:	f000 fcbb 	bl	8020e88 <uxr_seq_num_sub>
 8020512:	4601      	mov	r1, r0
 8020514:	4630      	mov	r0, r6
 8020516:	f000 fcb7 	bl	8020e88 <uxr_seq_num_sub>
 802051a:	4606      	mov	r6, r0
 802051c:	b328      	cbz	r0, 802056a <uxr_compute_acknack+0xaa>
 802051e:	f04f 0900 	mov.w	r9, #0
 8020522:	f04f 0801 	mov.w	r8, #1
 8020526:	464d      	mov	r5, r9
 8020528:	fa1f f189 	uxth.w	r1, r9
 802052c:	8838      	ldrh	r0, [r7, #0]
 802052e:	f000 fca7 	bl	8020e80 <uxr_seq_num_add>
 8020532:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8020536:	6861      	ldr	r1, [r4, #4]
 8020538:	fa08 fe09 	lsl.w	lr, r8, r9
 802053c:	6822      	ldr	r2, [r4, #0]
 802053e:	f109 0901 	add.w	r9, r9, #1
 8020542:	ea4e 0e05 	orr.w	lr, lr, r5
 8020546:	fbb0 f3fc 	udiv	r3, r0, ip
 802054a:	fbb1 f1fc 	udiv	r1, r1, ip
 802054e:	fb03 001c 	mls	r0, r3, ip, r0
 8020552:	b283      	uxth	r3, r0
 8020554:	fb01 f303 	mul.w	r3, r1, r3
 8020558:	58d3      	ldr	r3, [r2, r3]
 802055a:	b90b      	cbnz	r3, 8020560 <uxr_compute_acknack+0xa0>
 802055c:	fa1f f58e 	uxth.w	r5, lr
 8020560:	454e      	cmp	r6, r9
 8020562:	d1e1      	bne.n	8020528 <uxr_compute_acknack+0x68>
 8020564:	4628      	mov	r0, r5
 8020566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802056a:	4605      	mov	r5, r0
 802056c:	4628      	mov	r0, r5
 802056e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020572:	bf00      	nop

08020574 <uxr_init_output_best_effort_stream>:
 8020574:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8020578:	6001      	str	r1, [r0, #0]
 802057a:	7303      	strb	r3, [r0, #12]
 802057c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8020580:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8020584:	4770      	bx	lr
 8020586:	bf00      	nop

08020588 <uxr_reset_output_best_effort_stream>:
 8020588:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802058c:	7b03      	ldrb	r3, [r0, #12]
 802058e:	81c2      	strh	r2, [r0, #14]
 8020590:	6043      	str	r3, [r0, #4]
 8020592:	4770      	bx	lr

08020594 <uxr_prepare_best_effort_buffer_to_write>:
 8020594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020596:	4604      	mov	r4, r0
 8020598:	b083      	sub	sp, #12
 802059a:	6840      	ldr	r0, [r0, #4]
 802059c:	460d      	mov	r5, r1
 802059e:	4616      	mov	r6, r2
 80205a0:	f7f8 ff5e 	bl	8019460 <uxr_submessage_padding>
 80205a4:	6863      	ldr	r3, [r4, #4]
 80205a6:	4418      	add	r0, r3
 80205a8:	68a3      	ldr	r3, [r4, #8]
 80205aa:	1942      	adds	r2, r0, r5
 80205ac:	4293      	cmp	r3, r2
 80205ae:	bf2c      	ite	cs
 80205b0:	2701      	movcs	r7, #1
 80205b2:	2700      	movcc	r7, #0
 80205b4:	d202      	bcs.n	80205bc <uxr_prepare_best_effort_buffer_to_write+0x28>
 80205b6:	4638      	mov	r0, r7
 80205b8:	b003      	add	sp, #12
 80205ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80205bc:	9000      	str	r0, [sp, #0]
 80205be:	2300      	movs	r3, #0
 80205c0:	4630      	mov	r0, r6
 80205c2:	6821      	ldr	r1, [r4, #0]
 80205c4:	f7f3 fdbe 	bl	8014144 <ucdr_init_buffer_origin_offset>
 80205c8:	6861      	ldr	r1, [r4, #4]
 80205ca:	4638      	mov	r0, r7
 80205cc:	4429      	add	r1, r5
 80205ce:	6061      	str	r1, [r4, #4]
 80205d0:	b003      	add	sp, #12
 80205d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080205d4 <uxr_prepare_best_effort_buffer_to_send>:
 80205d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80205d8:	4604      	mov	r4, r0
 80205da:	461d      	mov	r5, r3
 80205dc:	6840      	ldr	r0, [r0, #4]
 80205de:	7b23      	ldrb	r3, [r4, #12]
 80205e0:	4298      	cmp	r0, r3
 80205e2:	bf8c      	ite	hi
 80205e4:	2601      	movhi	r6, #1
 80205e6:	2600      	movls	r6, #0
 80205e8:	d802      	bhi.n	80205f0 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80205ea:	4630      	mov	r0, r6
 80205ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80205f0:	4688      	mov	r8, r1
 80205f2:	89e0      	ldrh	r0, [r4, #14]
 80205f4:	2101      	movs	r1, #1
 80205f6:	4617      	mov	r7, r2
 80205f8:	f000 fc42 	bl	8020e80 <uxr_seq_num_add>
 80205fc:	6823      	ldr	r3, [r4, #0]
 80205fe:	81e0      	strh	r0, [r4, #14]
 8020600:	8028      	strh	r0, [r5, #0]
 8020602:	4630      	mov	r0, r6
 8020604:	f8c8 3000 	str.w	r3, [r8]
 8020608:	6863      	ldr	r3, [r4, #4]
 802060a:	603b      	str	r3, [r7, #0]
 802060c:	7b23      	ldrb	r3, [r4, #12]
 802060e:	6063      	str	r3, [r4, #4]
 8020610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020614 <on_full_output_buffer>:
 8020614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020616:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 802061a:	460c      	mov	r4, r1
 802061c:	6803      	ldr	r3, [r0, #0]
 802061e:	4605      	mov	r5, r0
 8020620:	7b26      	ldrb	r6, [r4, #12]
 8020622:	e9d1 1200 	ldrd	r1, r2, [r1]
 8020626:	fbb2 f2fc 	udiv	r2, r2, ip
 802062a:	eba3 0e01 	sub.w	lr, r3, r1
 802062e:	6903      	ldr	r3, [r0, #16]
 8020630:	fbbe fef2 	udiv	lr, lr, r2
 8020634:	f10e 0e01 	add.w	lr, lr, #1
 8020638:	fa1f fe8e 	uxth.w	lr, lr
 802063c:	fbbe f7fc 	udiv	r7, lr, ip
 8020640:	fb0c ec17 	mls	ip, ip, r7, lr
 8020644:	fa1f fc8c 	uxth.w	ip, ip
 8020648:	fb02 fc0c 	mul.w	ip, r2, ip
 802064c:	f851 200c 	ldr.w	r2, [r1, ip]
 8020650:	44b4      	add	ip, r6
 8020652:	1b92      	subs	r2, r2, r6
 8020654:	f10c 0c08 	add.w	ip, ip, #8
 8020658:	3a04      	subs	r2, #4
 802065a:	4461      	add	r1, ip
 802065c:	f7f3 fd7c 	bl	8014158 <ucdr_init_buffer_origin>
 8020660:	4628      	mov	r0, r5
 8020662:	4622      	mov	r2, r4
 8020664:	4902      	ldr	r1, [pc, #8]	@ (8020670 <on_full_output_buffer+0x5c>)
 8020666:	f7f3 fd53 	bl	8014110 <ucdr_set_on_full_buffer_callback>
 802066a:	2000      	movs	r0, #0
 802066c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802066e:	bf00      	nop
 8020670:	08020615 	.word	0x08020615

08020674 <uxr_init_output_reliable_stream>:
 8020674:	b530      	push	{r4, r5, lr}
 8020676:	f89d 400c 	ldrb.w	r4, [sp, #12]
 802067a:	8103      	strh	r3, [r0, #8]
 802067c:	7304      	strb	r4, [r0, #12]
 802067e:	e9c0 1200 	strd	r1, r2, [r0]
 8020682:	b1e3      	cbz	r3, 80206be <uxr_init_output_reliable_stream+0x4a>
 8020684:	600c      	str	r4, [r1, #0]
 8020686:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 802068a:	f1bc 0f01 	cmp.w	ip, #1
 802068e:	d916      	bls.n	80206be <uxr_init_output_reliable_stream+0x4a>
 8020690:	f04f 0e01 	mov.w	lr, #1
 8020694:	6843      	ldr	r3, [r0, #4]
 8020696:	f10e 0501 	add.w	r5, lr, #1
 802069a:	7b04      	ldrb	r4, [r0, #12]
 802069c:	6801      	ldr	r1, [r0, #0]
 802069e:	fbbe f2fc 	udiv	r2, lr, ip
 80206a2:	fbb3 f3fc 	udiv	r3, r3, ip
 80206a6:	fb0c e212 	mls	r2, ip, r2, lr
 80206aa:	fa1f fe85 	uxth.w	lr, r5
 80206ae:	b292      	uxth	r2, r2
 80206b0:	fb02 f303 	mul.w	r3, r2, r3
 80206b4:	50cc      	str	r4, [r1, r3]
 80206b6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80206ba:	45f4      	cmp	ip, lr
 80206bc:	d8ea      	bhi.n	8020694 <uxr_init_output_reliable_stream+0x20>
 80206be:	4b07      	ldr	r3, [pc, #28]	@ (80206dc <uxr_init_output_reliable_stream+0x68>)
 80206c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80206c4:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80206c8:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 80206cc:	f8c0 300e 	str.w	r3, [r0, #14]
 80206d0:	2300      	movs	r3, #0
 80206d2:	8242      	strh	r2, [r0, #18]
 80206d4:	8403      	strh	r3, [r0, #32]
 80206d6:	e9c0 4506 	strd	r4, r5, [r0, #24]
 80206da:	bd30      	pop	{r4, r5, pc}
 80206dc:	ffff0000 	.word	0xffff0000

080206e0 <uxr_reset_output_reliable_stream>:
 80206e0:	8901      	ldrh	r1, [r0, #8]
 80206e2:	b510      	push	{r4, lr}
 80206e4:	b1b1      	cbz	r1, 8020714 <uxr_reset_output_reliable_stream+0x34>
 80206e6:	f04f 0e00 	mov.w	lr, #0
 80206ea:	46f4      	mov	ip, lr
 80206ec:	6843      	ldr	r3, [r0, #4]
 80206ee:	f10e 0e01 	add.w	lr, lr, #1
 80206f2:	7b04      	ldrb	r4, [r0, #12]
 80206f4:	fbbc f2f1 	udiv	r2, ip, r1
 80206f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80206fc:	fb01 c212 	mls	r2, r1, r2, ip
 8020700:	fa1f fc8e 	uxth.w	ip, lr
 8020704:	b292      	uxth	r2, r2
 8020706:	fb02 f303 	mul.w	r3, r2, r3
 802070a:	6802      	ldr	r2, [r0, #0]
 802070c:	50d4      	str	r4, [r2, r3]
 802070e:	8901      	ldrh	r1, [r0, #8]
 8020710:	4561      	cmp	r1, ip
 8020712:	d8eb      	bhi.n	80206ec <uxr_reset_output_reliable_stream+0xc>
 8020714:	4b08      	ldr	r3, [pc, #32]	@ (8020738 <uxr_reset_output_reliable_stream+0x58>)
 8020716:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802071a:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8020730 <uxr_reset_output_reliable_stream+0x50>
 802071e:	f8c0 300e 	str.w	r3, [r0, #14]
 8020722:	2300      	movs	r3, #0
 8020724:	8242      	strh	r2, [r0, #18]
 8020726:	8403      	strh	r3, [r0, #32]
 8020728:	ed80 7b06 	vstr	d7, [r0, #24]
 802072c:	bd10      	pop	{r4, pc}
 802072e:	bf00      	nop
 8020730:	ffffffff 	.word	0xffffffff
 8020734:	7fffffff 	.word	0x7fffffff
 8020738:	ffff0000 	.word	0xffff0000

0802073c <uxr_prepare_reliable_buffer_to_write>:
 802073c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020740:	4604      	mov	r4, r0
 8020742:	b091      	sub	sp, #68	@ 0x44
 8020744:	8900      	ldrh	r0, [r0, #8]
 8020746:	468b      	mov	fp, r1
 8020748:	89e6      	ldrh	r6, [r4, #14]
 802074a:	9204      	str	r2, [sp, #16]
 802074c:	6865      	ldr	r5, [r4, #4]
 802074e:	6823      	ldr	r3, [r4, #0]
 8020750:	f894 900c 	ldrb.w	r9, [r4, #12]
 8020754:	fbb6 f2f0 	udiv	r2, r6, r0
 8020758:	fbb5 f5f0 	udiv	r5, r5, r0
 802075c:	fb00 6212 	mls	r2, r0, r2, r6
 8020760:	1f2f      	subs	r7, r5, #4
 8020762:	b292      	uxth	r2, r2
 8020764:	fb05 3202 	mla	r2, r5, r2, r3
 8020768:	1d11      	adds	r1, r2, #4
 802076a:	f8d2 8000 	ldr.w	r8, [r2]
 802076e:	9103      	str	r1, [sp, #12]
 8020770:	2800      	cmp	r0, #0
 8020772:	f000 814a 	beq.w	8020a0a <uxr_prepare_reliable_buffer_to_write+0x2ce>
 8020776:	f04f 0c00 	mov.w	ip, #0
 802077a:	46e2      	mov	sl, ip
 802077c:	4661      	mov	r1, ip
 802077e:	f10c 0c01 	add.w	ip, ip, #1
 8020782:	fbb1 f2f0 	udiv	r2, r1, r0
 8020786:	fb00 1212 	mls	r2, r0, r2, r1
 802078a:	fa1f f18c 	uxth.w	r1, ip
 802078e:	b292      	uxth	r2, r2
 8020790:	fb05 f202 	mul.w	r2, r5, r2
 8020794:	589a      	ldr	r2, [r3, r2]
 8020796:	454a      	cmp	r2, r9
 8020798:	d103      	bne.n	80207a2 <uxr_prepare_reliable_buffer_to_write+0x66>
 802079a:	f10a 0a01 	add.w	sl, sl, #1
 802079e:	fa1f fa8a 	uxth.w	sl, sl
 80207a2:	4281      	cmp	r1, r0
 80207a4:	d3eb      	bcc.n	802077e <uxr_prepare_reliable_buffer_to_write+0x42>
 80207a6:	4640      	mov	r0, r8
 80207a8:	2104      	movs	r1, #4
 80207aa:	f8cd a014 	str.w	sl, [sp, #20]
 80207ae:	f7f3 fcdf 	bl	8014170 <ucdr_alignment>
 80207b2:	4480      	add	r8, r0
 80207b4:	eb08 020b 	add.w	r2, r8, fp
 80207b8:	42ba      	cmp	r2, r7
 80207ba:	f240 80ca 	bls.w	8020952 <uxr_prepare_reliable_buffer_to_write+0x216>
 80207be:	7b22      	ldrb	r2, [r4, #12]
 80207c0:	445a      	add	r2, fp
 80207c2:	42ba      	cmp	r2, r7
 80207c4:	f240 80b2 	bls.w	802092c <uxr_prepare_reliable_buffer_to_write+0x1f0>
 80207c8:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80207cc:	b2bb      	uxth	r3, r7
 80207ce:	eba2 0209 	sub.w	r2, r2, r9
 80207d2:	441a      	add	r2, r3
 80207d4:	b292      	uxth	r2, r2
 80207d6:	fb0a f902 	mul.w	r9, sl, r2
 80207da:	9205      	str	r2, [sp, #20]
 80207dc:	45d9      	cmp	r9, fp
 80207de:	9206      	str	r2, [sp, #24]
 80207e0:	f0c0 80b3 	bcc.w	802094a <uxr_prepare_reliable_buffer_to_write+0x20e>
 80207e4:	f108 0204 	add.w	r2, r8, #4
 80207e8:	42ba      	cmp	r2, r7
 80207ea:	f080 80da 	bcs.w	80209a2 <uxr_prepare_reliable_buffer_to_write+0x266>
 80207ee:	f1a3 0904 	sub.w	r9, r3, #4
 80207f2:	9b05      	ldr	r3, [sp, #20]
 80207f4:	eba9 0908 	sub.w	r9, r9, r8
 80207f8:	fa1f f989 	uxth.w	r9, r9
 80207fc:	ebab 0b09 	sub.w	fp, fp, r9
 8020800:	fbbb f2f3 	udiv	r2, fp, r3
 8020804:	fb03 b312 	mls	r3, r3, r2, fp
 8020808:	2b00      	cmp	r3, #0
 802080a:	f040 80c4 	bne.w	8020996 <uxr_prepare_reliable_buffer_to_write+0x25a>
 802080e:	b293      	uxth	r3, r2
 8020810:	4553      	cmp	r3, sl
 8020812:	f200 809a 	bhi.w	802094a <uxr_prepare_reliable_buffer_to_write+0x20e>
 8020816:	2b00      	cmp	r3, #0
 8020818:	f000 80f9 	beq.w	8020a0e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 802081c:	f8cd 801c 	str.w	r8, [sp, #28]
 8020820:	f04f 0a00 	mov.w	sl, #0
 8020824:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8020828:	f10d 0b20 	add.w	fp, sp, #32
 802082c:	9505      	str	r5, [sp, #20]
 802082e:	461d      	mov	r5, r3
 8020830:	e000      	b.n	8020834 <uxr_prepare_reliable_buffer_to_write+0xf8>
 8020832:	46c1      	mov	r9, r8
 8020834:	8922      	ldrh	r2, [r4, #8]
 8020836:	4658      	mov	r0, fp
 8020838:	6863      	ldr	r3, [r4, #4]
 802083a:	f10a 0a01 	add.w	sl, sl, #1
 802083e:	fbb6 f1f2 	udiv	r1, r6, r2
 8020842:	fbb3 f3f2 	udiv	r3, r3, r2
 8020846:	fb02 6111 	mls	r1, r2, r1, r6
 802084a:	463a      	mov	r2, r7
 802084c:	b289      	uxth	r1, r1
 802084e:	fb03 f101 	mul.w	r1, r3, r1
 8020852:	6823      	ldr	r3, [r4, #0]
 8020854:	3104      	adds	r1, #4
 8020856:	4419      	add	r1, r3
 8020858:	2300      	movs	r3, #0
 802085a:	f851 cc04 	ldr.w	ip, [r1, #-4]
 802085e:	f8cd c000 	str.w	ip, [sp]
 8020862:	f7f3 fc6f 	bl	8014144 <ucdr_init_buffer_origin_offset>
 8020866:	464a      	mov	r2, r9
 8020868:	2300      	movs	r3, #0
 802086a:	210d      	movs	r1, #13
 802086c:	4658      	mov	r0, fp
 802086e:	f7f8 fdb7 	bl	80193e0 <uxr_buffer_submessage_header>
 8020872:	8921      	ldrh	r1, [r4, #8]
 8020874:	6863      	ldr	r3, [r4, #4]
 8020876:	4630      	mov	r0, r6
 8020878:	fbb6 f2f1 	udiv	r2, r6, r1
 802087c:	fbb3 f3f1 	udiv	r3, r3, r1
 8020880:	fb01 6212 	mls	r2, r1, r2, r6
 8020884:	2101      	movs	r1, #1
 8020886:	b292      	uxth	r2, r2
 8020888:	fb02 f303 	mul.w	r3, r2, r3
 802088c:	6822      	ldr	r2, [r4, #0]
 802088e:	50d7      	str	r7, [r2, r3]
 8020890:	f000 faf6 	bl	8020e80 <uxr_seq_num_add>
 8020894:	4606      	mov	r6, r0
 8020896:	fa1f f38a 	uxth.w	r3, sl
 802089a:	429d      	cmp	r5, r3
 802089c:	d8c9      	bhi.n	8020832 <uxr_prepare_reliable_buffer_to_write+0xf6>
 802089e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80208a2:	9d05      	ldr	r5, [sp, #20]
 80208a4:	8920      	ldrh	r0, [r4, #8]
 80208a6:	463a      	mov	r2, r7
 80208a8:	6863      	ldr	r3, [r4, #4]
 80208aa:	fbb6 f1f0 	udiv	r1, r6, r0
 80208ae:	fbb3 f3f0 	udiv	r3, r3, r0
 80208b2:	fb00 6111 	mls	r1, r0, r1, r6
 80208b6:	4658      	mov	r0, fp
 80208b8:	b289      	uxth	r1, r1
 80208ba:	fb01 f303 	mul.w	r3, r1, r3
 80208be:	6821      	ldr	r1, [r4, #0]
 80208c0:	3304      	adds	r3, #4
 80208c2:	4419      	add	r1, r3
 80208c4:	2300      	movs	r3, #0
 80208c6:	f851 7c04 	ldr.w	r7, [r1, #-4]
 80208ca:	9700      	str	r7, [sp, #0]
 80208cc:	f7f3 fc3a 	bl	8014144 <ucdr_init_buffer_origin_offset>
 80208d0:	9f06      	ldr	r7, [sp, #24]
 80208d2:	4658      	mov	r0, fp
 80208d4:	2302      	movs	r3, #2
 80208d6:	b2ba      	uxth	r2, r7
 80208d8:	210d      	movs	r1, #13
 80208da:	f7f8 fd81 	bl	80193e0 <uxr_buffer_submessage_header>
 80208de:	f108 0104 	add.w	r1, r8, #4
 80208e2:	9b03      	ldr	r3, [sp, #12]
 80208e4:	f1a5 0208 	sub.w	r2, r5, #8
 80208e8:	8925      	ldrh	r5, [r4, #8]
 80208ea:	440b      	add	r3, r1
 80208ec:	eba2 0208 	sub.w	r2, r2, r8
 80208f0:	fbb6 f0f5 	udiv	r0, r6, r5
 80208f4:	4619      	mov	r1, r3
 80208f6:	6863      	ldr	r3, [r4, #4]
 80208f8:	fb05 6010 	mls	r0, r5, r0, r6
 80208fc:	fbb3 f3f5 	udiv	r3, r3, r5
 8020900:	b280      	uxth	r0, r0
 8020902:	6825      	ldr	r5, [r4, #0]
 8020904:	fb00 f303 	mul.w	r3, r0, r3
 8020908:	7b20      	ldrb	r0, [r4, #12]
 802090a:	3004      	adds	r0, #4
 802090c:	4438      	add	r0, r7
 802090e:	50e8      	str	r0, [r5, r3]
 8020910:	9d04      	ldr	r5, [sp, #16]
 8020912:	4628      	mov	r0, r5
 8020914:	f7f3 fc28 	bl	8014168 <ucdr_init_buffer>
 8020918:	4628      	mov	r0, r5
 802091a:	4622      	mov	r2, r4
 802091c:	493d      	ldr	r1, [pc, #244]	@ (8020a14 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 802091e:	f7f3 fbf7 	bl	8014110 <ucdr_set_on_full_buffer_callback>
 8020922:	2001      	movs	r0, #1
 8020924:	81e6      	strh	r6, [r4, #14]
 8020926:	b011      	add	sp, #68	@ 0x44
 8020928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802092c:	2101      	movs	r1, #1
 802092e:	89e0      	ldrh	r0, [r4, #14]
 8020930:	f000 faa6 	bl	8020e80 <uxr_seq_num_add>
 8020934:	4605      	mov	r5, r0
 8020936:	8921      	ldrh	r1, [r4, #8]
 8020938:	8a60      	ldrh	r0, [r4, #18]
 802093a:	f000 faa1 	bl	8020e80 <uxr_seq_num_add>
 802093e:	4601      	mov	r1, r0
 8020940:	4628      	mov	r0, r5
 8020942:	f000 faa5 	bl	8020e90 <uxr_seq_num_cmp>
 8020946:	2800      	cmp	r0, #0
 8020948:	dd44      	ble.n	80209d4 <uxr_prepare_reliable_buffer_to_write+0x298>
 802094a:	2000      	movs	r0, #0
 802094c:	b011      	add	sp, #68	@ 0x44
 802094e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020952:	8921      	ldrh	r1, [r4, #8]
 8020954:	8a60      	ldrh	r0, [r4, #18]
 8020956:	9205      	str	r2, [sp, #20]
 8020958:	f000 fa92 	bl	8020e80 <uxr_seq_num_add>
 802095c:	4601      	mov	r1, r0
 802095e:	4630      	mov	r0, r6
 8020960:	f000 fa96 	bl	8020e90 <uxr_seq_num_cmp>
 8020964:	2800      	cmp	r0, #0
 8020966:	9a05      	ldr	r2, [sp, #20]
 8020968:	dcef      	bgt.n	802094a <uxr_prepare_reliable_buffer_to_write+0x20e>
 802096a:	8925      	ldrh	r5, [r4, #8]
 802096c:	e9d4 7300 	ldrd	r7, r3, [r4]
 8020970:	fbb6 f4f5 	udiv	r4, r6, r5
 8020974:	fbb3 f3f5 	udiv	r3, r3, r5
 8020978:	fb05 6414 	mls	r4, r5, r4, r6
 802097c:	b2a4      	uxth	r4, r4
 802097e:	fb04 f303 	mul.w	r3, r4, r3
 8020982:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8020986:	50fa      	str	r2, [r7, r3]
 8020988:	2300      	movs	r3, #0
 802098a:	f8cd 8000 	str.w	r8, [sp]
 802098e:	f7f3 fbd9 	bl	8014144 <ucdr_init_buffer_origin_offset>
 8020992:	2001      	movs	r0, #1
 8020994:	e7da      	b.n	802094c <uxr_prepare_reliable_buffer_to_write+0x210>
 8020996:	3201      	adds	r2, #1
 8020998:	9306      	str	r3, [sp, #24]
 802099a:	b293      	uxth	r3, r2
 802099c:	4553      	cmp	r3, sl
 802099e:	d8d4      	bhi.n	802094a <uxr_prepare_reliable_buffer_to_write+0x20e>
 80209a0:	e739      	b.n	8020816 <uxr_prepare_reliable_buffer_to_write+0xda>
 80209a2:	4630      	mov	r0, r6
 80209a4:	2101      	movs	r1, #1
 80209a6:	9307      	str	r3, [sp, #28]
 80209a8:	f000 fa6a 	bl	8020e80 <uxr_seq_num_add>
 80209ac:	4606      	mov	r6, r0
 80209ae:	8920      	ldrh	r0, [r4, #8]
 80209b0:	6862      	ldr	r2, [r4, #4]
 80209b2:	fbb6 f1f0 	udiv	r1, r6, r0
 80209b6:	fbb2 f2f0 	udiv	r2, r2, r0
 80209ba:	fb00 6111 	mls	r1, r0, r1, r6
 80209be:	b289      	uxth	r1, r1
 80209c0:	fb01 f202 	mul.w	r2, r1, r2
 80209c4:	6821      	ldr	r1, [r4, #0]
 80209c6:	3204      	adds	r2, #4
 80209c8:	188b      	adds	r3, r1, r2
 80209ca:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80209ce:	9303      	str	r3, [sp, #12]
 80209d0:	9b07      	ldr	r3, [sp, #28]
 80209d2:	e70c      	b.n	80207ee <uxr_prepare_reliable_buffer_to_write+0xb2>
 80209d4:	8921      	ldrh	r1, [r4, #8]
 80209d6:	6863      	ldr	r3, [r4, #4]
 80209d8:	9804      	ldr	r0, [sp, #16]
 80209da:	fbb5 f2f1 	udiv	r2, r5, r1
 80209de:	fbb3 f3f1 	udiv	r3, r3, r1
 80209e2:	fb01 5212 	mls	r2, r1, r2, r5
 80209e6:	6821      	ldr	r1, [r4, #0]
 80209e8:	b292      	uxth	r2, r2
 80209ea:	fb02 f303 	mul.w	r3, r2, r3
 80209ee:	7b22      	ldrb	r2, [r4, #12]
 80209f0:	3304      	adds	r3, #4
 80209f2:	445a      	add	r2, fp
 80209f4:	4419      	add	r1, r3
 80209f6:	f841 2c04 	str.w	r2, [r1, #-4]
 80209fa:	7b23      	ldrb	r3, [r4, #12]
 80209fc:	9300      	str	r3, [sp, #0]
 80209fe:	2300      	movs	r3, #0
 8020a00:	f7f3 fba0 	bl	8014144 <ucdr_init_buffer_origin_offset>
 8020a04:	2001      	movs	r0, #1
 8020a06:	81e5      	strh	r5, [r4, #14]
 8020a08:	e7a0      	b.n	802094c <uxr_prepare_reliable_buffer_to_write+0x210>
 8020a0a:	4682      	mov	sl, r0
 8020a0c:	e6cb      	b.n	80207a6 <uxr_prepare_reliable_buffer_to_write+0x6a>
 8020a0e:	f10d 0b20 	add.w	fp, sp, #32
 8020a12:	e747      	b.n	80208a4 <uxr_prepare_reliable_buffer_to_write+0x168>
 8020a14:	08020615 	.word	0x08020615

08020a18 <uxr_prepare_next_reliable_buffer_to_send>:
 8020a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020a1a:	4604      	mov	r4, r0
 8020a1c:	461d      	mov	r5, r3
 8020a1e:	460f      	mov	r7, r1
 8020a20:	8a00      	ldrh	r0, [r0, #16]
 8020a22:	2101      	movs	r1, #1
 8020a24:	4616      	mov	r6, r2
 8020a26:	f000 fa2b 	bl	8020e80 <uxr_seq_num_add>
 8020a2a:	8028      	strh	r0, [r5, #0]
 8020a2c:	8922      	ldrh	r2, [r4, #8]
 8020a2e:	6863      	ldr	r3, [r4, #4]
 8020a30:	fbb0 f1f2 	udiv	r1, r0, r2
 8020a34:	fbb3 f3f2 	udiv	r3, r3, r2
 8020a38:	fb02 0c11 	mls	ip, r2, r1, r0
 8020a3c:	89e1      	ldrh	r1, [r4, #14]
 8020a3e:	fa1f fc8c 	uxth.w	ip, ip
 8020a42:	fb0c fc03 	mul.w	ip, ip, r3
 8020a46:	6823      	ldr	r3, [r4, #0]
 8020a48:	f10c 0c04 	add.w	ip, ip, #4
 8020a4c:	4463      	add	r3, ip
 8020a4e:	603b      	str	r3, [r7, #0]
 8020a50:	6823      	ldr	r3, [r4, #0]
 8020a52:	449c      	add	ip, r3
 8020a54:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8020a58:	6033      	str	r3, [r6, #0]
 8020a5a:	f000 fa19 	bl	8020e90 <uxr_seq_num_cmp>
 8020a5e:	2800      	cmp	r0, #0
 8020a60:	dd01      	ble.n	8020a66 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8020a62:	2000      	movs	r0, #0
 8020a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020a66:	7b23      	ldrb	r3, [r4, #12]
 8020a68:	6832      	ldr	r2, [r6, #0]
 8020a6a:	429a      	cmp	r2, r3
 8020a6c:	d9f9      	bls.n	8020a62 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8020a6e:	8a61      	ldrh	r1, [r4, #18]
 8020a70:	8a20      	ldrh	r0, [r4, #16]
 8020a72:	f000 fa09 	bl	8020e88 <uxr_seq_num_sub>
 8020a76:	8923      	ldrh	r3, [r4, #8]
 8020a78:	4283      	cmp	r3, r0
 8020a7a:	d0f2      	beq.n	8020a62 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8020a7c:	8828      	ldrh	r0, [r5, #0]
 8020a7e:	89e3      	ldrh	r3, [r4, #14]
 8020a80:	8220      	strh	r0, [r4, #16]
 8020a82:	4298      	cmp	r0, r3
 8020a84:	d001      	beq.n	8020a8a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8020a86:	2001      	movs	r0, #1
 8020a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020a8a:	2101      	movs	r1, #1
 8020a8c:	f000 f9f8 	bl	8020e80 <uxr_seq_num_add>
 8020a90:	4603      	mov	r3, r0
 8020a92:	2001      	movs	r0, #1
 8020a94:	81e3      	strh	r3, [r4, #14]
 8020a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08020a98 <uxr_update_output_stream_heartbeat_timestamp>:
 8020a98:	b570      	push	{r4, r5, r6, lr}
 8020a9a:	8a01      	ldrh	r1, [r0, #16]
 8020a9c:	4604      	mov	r4, r0
 8020a9e:	8a40      	ldrh	r0, [r0, #18]
 8020aa0:	4615      	mov	r5, r2
 8020aa2:	461e      	mov	r6, r3
 8020aa4:	f000 f9f4 	bl	8020e90 <uxr_seq_num_cmp>
 8020aa8:	2800      	cmp	r0, #0
 8020aaa:	db07      	blt.n	8020abc <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8020aac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8020ab0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8020ab4:	2000      	movs	r0, #0
 8020ab6:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8020aba:	bd70      	pop	{r4, r5, r6, pc}
 8020abc:	f894 0020 	ldrb.w	r0, [r4, #32]
 8020ac0:	b940      	cbnz	r0, 8020ad4 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8020ac2:	2301      	movs	r3, #1
 8020ac4:	f884 3020 	strb.w	r3, [r4, #32]
 8020ac8:	3564      	adds	r5, #100	@ 0x64
 8020aca:	f146 0600 	adc.w	r6, r6, #0
 8020ace:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8020ad2:	bd70      	pop	{r4, r5, r6, pc}
 8020ad4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8020ad8:	4295      	cmp	r5, r2
 8020ada:	eb76 0303 	sbcs.w	r3, r6, r3
 8020ade:	db04      	blt.n	8020aea <uxr_update_output_stream_heartbeat_timestamp+0x52>
 8020ae0:	1c43      	adds	r3, r0, #1
 8020ae2:	2001      	movs	r0, #1
 8020ae4:	f884 3020 	strb.w	r3, [r4, #32]
 8020ae8:	e7ee      	b.n	8020ac8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8020aea:	2000      	movs	r0, #0
 8020aec:	e7ec      	b.n	8020ac8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8020aee:	bf00      	nop

08020af0 <uxr_begin_output_nack_buffer_it>:
 8020af0:	8a40      	ldrh	r0, [r0, #18]
 8020af2:	4770      	bx	lr

08020af4 <uxr_next_reliable_nack_buffer_to_send>:
 8020af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020af8:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 8020afc:	b197      	cbz	r7, 8020b24 <uxr_next_reliable_nack_buffer_to_send+0x30>
 8020afe:	4680      	mov	r8, r0
 8020b00:	460d      	mov	r5, r1
 8020b02:	4616      	mov	r6, r2
 8020b04:	461c      	mov	r4, r3
 8020b06:	8818      	ldrh	r0, [r3, #0]
 8020b08:	2101      	movs	r1, #1
 8020b0a:	f000 f9b9 	bl	8020e80 <uxr_seq_num_add>
 8020b0e:	8020      	strh	r0, [r4, #0]
 8020b10:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8020b14:	f000 f9bc 	bl	8020e90 <uxr_seq_num_cmp>
 8020b18:	2800      	cmp	r0, #0
 8020b1a:	dd06      	ble.n	8020b2a <uxr_next_reliable_nack_buffer_to_send+0x36>
 8020b1c:	2300      	movs	r3, #0
 8020b1e:	461f      	mov	r7, r3
 8020b20:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 8020b24:	4638      	mov	r0, r7
 8020b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020b2a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8020b2e:	8820      	ldrh	r0, [r4, #0]
 8020b30:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8020b34:	fbb0 f3f2 	udiv	r3, r0, r2
 8020b38:	fbb1 fcf2 	udiv	ip, r1, r2
 8020b3c:	fb02 0313 	mls	r3, r2, r3, r0
 8020b40:	b29b      	uxth	r3, r3
 8020b42:	fb03 fc0c 	mul.w	ip, r3, ip
 8020b46:	f8d8 3000 	ldr.w	r3, [r8]
 8020b4a:	f10c 0c04 	add.w	ip, ip, #4
 8020b4e:	4463      	add	r3, ip
 8020b50:	602b      	str	r3, [r5, #0]
 8020b52:	f8d8 3000 	ldr.w	r3, [r8]
 8020b56:	4463      	add	r3, ip
 8020b58:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8020b5c:	6033      	str	r3, [r6, #0]
 8020b5e:	f898 200c 	ldrb.w	r2, [r8, #12]
 8020b62:	429a      	cmp	r2, r3
 8020b64:	d0d0      	beq.n	8020b08 <uxr_next_reliable_nack_buffer_to_send+0x14>
 8020b66:	e7dd      	b.n	8020b24 <uxr_next_reliable_nack_buffer_to_send+0x30>

08020b68 <uxr_process_acknack>:
 8020b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b6a:	4604      	mov	r4, r0
 8020b6c:	460e      	mov	r6, r1
 8020b6e:	4610      	mov	r0, r2
 8020b70:	2101      	movs	r1, #1
 8020b72:	f000 f989 	bl	8020e88 <uxr_seq_num_sub>
 8020b76:	8a61      	ldrh	r1, [r4, #18]
 8020b78:	f000 f986 	bl	8020e88 <uxr_seq_num_sub>
 8020b7c:	b1c8      	cbz	r0, 8020bb2 <uxr_process_acknack+0x4a>
 8020b7e:	4605      	mov	r5, r0
 8020b80:	2700      	movs	r7, #0
 8020b82:	2101      	movs	r1, #1
 8020b84:	8a60      	ldrh	r0, [r4, #18]
 8020b86:	f000 f97b 	bl	8020e80 <uxr_seq_num_add>
 8020b8a:	8923      	ldrh	r3, [r4, #8]
 8020b8c:	6862      	ldr	r2, [r4, #4]
 8020b8e:	3701      	adds	r7, #1
 8020b90:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8020b94:	6821      	ldr	r1, [r4, #0]
 8020b96:	42bd      	cmp	r5, r7
 8020b98:	8260      	strh	r0, [r4, #18]
 8020b9a:	fbb0 fef3 	udiv	lr, r0, r3
 8020b9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8020ba2:	fb03 031e 	mls	r3, r3, lr, r0
 8020ba6:	b29b      	uxth	r3, r3
 8020ba8:	fb02 f303 	mul.w	r3, r2, r3
 8020bac:	f841 c003 	str.w	ip, [r1, r3]
 8020bb0:	d1e7      	bne.n	8020b82 <uxr_process_acknack+0x1a>
 8020bb2:	3e00      	subs	r6, #0
 8020bb4:	f04f 0300 	mov.w	r3, #0
 8020bb8:	bf18      	it	ne
 8020bba:	2601      	movne	r6, #1
 8020bbc:	f884 3020 	strb.w	r3, [r4, #32]
 8020bc0:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8020bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020bc6:	bf00      	nop

08020bc8 <uxr_is_output_up_to_date>:
 8020bc8:	8a01      	ldrh	r1, [r0, #16]
 8020bca:	8a40      	ldrh	r0, [r0, #18]
 8020bcc:	b508      	push	{r3, lr}
 8020bce:	f000 f95f 	bl	8020e90 <uxr_seq_num_cmp>
 8020bd2:	fab0 f080 	clz	r0, r0
 8020bd6:	0940      	lsrs	r0, r0, #5
 8020bd8:	bd08      	pop	{r3, pc}
 8020bda:	bf00      	nop

08020bdc <get_available_free_slots>:
 8020bdc:	8901      	ldrh	r1, [r0, #8]
 8020bde:	b1e1      	cbz	r1, 8020c1a <get_available_free_slots+0x3e>
 8020be0:	6843      	ldr	r3, [r0, #4]
 8020be2:	f04f 0c00 	mov.w	ip, #0
 8020be6:	b530      	push	{r4, r5, lr}
 8020be8:	fbb3 fef1 	udiv	lr, r3, r1
 8020bec:	6805      	ldr	r5, [r0, #0]
 8020bee:	4662      	mov	r2, ip
 8020bf0:	7b04      	ldrb	r4, [r0, #12]
 8020bf2:	4660      	mov	r0, ip
 8020bf4:	f10c 0c01 	add.w	ip, ip, #1
 8020bf8:	fbb2 f3f1 	udiv	r3, r2, r1
 8020bfc:	fb01 2313 	mls	r3, r1, r3, r2
 8020c00:	fa1f f28c 	uxth.w	r2, ip
 8020c04:	b29b      	uxth	r3, r3
 8020c06:	fb0e f303 	mul.w	r3, lr, r3
 8020c0a:	58eb      	ldr	r3, [r5, r3]
 8020c0c:	429c      	cmp	r4, r3
 8020c0e:	d101      	bne.n	8020c14 <get_available_free_slots+0x38>
 8020c10:	3001      	adds	r0, #1
 8020c12:	b280      	uxth	r0, r0
 8020c14:	428a      	cmp	r2, r1
 8020c16:	d3ed      	bcc.n	8020bf4 <get_available_free_slots+0x18>
 8020c18:	bd30      	pop	{r4, r5, pc}
 8020c1a:	4608      	mov	r0, r1
 8020c1c:	4770      	bx	lr
 8020c1e:	bf00      	nop

08020c20 <uxr_buffer_request_data>:
 8020c20:	b530      	push	{r4, r5, lr}
 8020c22:	b095      	sub	sp, #84	@ 0x54
 8020c24:	4604      	mov	r4, r0
 8020c26:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8020c28:	9303      	str	r3, [sp, #12]
 8020c2a:	2d00      	cmp	r5, #0
 8020c2c:	f88d 301c 	strb.w	r3, [sp, #28]
 8020c30:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8020c34:	f04f 0200 	mov.w	r2, #0
 8020c38:	bf14      	ite	ne
 8020c3a:	2101      	movne	r1, #1
 8020c3c:	4611      	moveq	r1, r2
 8020c3e:	f88d 201d 	strb.w	r2, [sp, #29]
 8020c42:	f88d 201e 	strb.w	r2, [sp, #30]
 8020c46:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8020c4a:	d021      	beq.n	8020c90 <uxr_buffer_request_data+0x70>
 8020c4c:	686b      	ldr	r3, [r5, #4]
 8020c4e:	2210      	movs	r2, #16
 8020c50:	6829      	ldr	r1, [r5, #0]
 8020c52:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8020c56:	f8cd 1026 	str.w	r1, [sp, #38]	@ 0x26
 8020c5a:	2308      	movs	r3, #8
 8020c5c:	2100      	movs	r1, #0
 8020c5e:	4620      	mov	r0, r4
 8020c60:	e9cd 3100 	strd	r3, r1, [sp]
 8020c64:	ab0c      	add	r3, sp, #48	@ 0x30
 8020c66:	9905      	ldr	r1, [sp, #20]
 8020c68:	f7f7 fc92 	bl	8018590 <uxr_prepare_stream_to_write_submessage>
 8020c6c:	b918      	cbnz	r0, 8020c76 <uxr_buffer_request_data+0x56>
 8020c6e:	4604      	mov	r4, r0
 8020c70:	4620      	mov	r0, r4
 8020c72:	b015      	add	sp, #84	@ 0x54
 8020c74:	bd30      	pop	{r4, r5, pc}
 8020c76:	9904      	ldr	r1, [sp, #16]
 8020c78:	aa06      	add	r2, sp, #24
 8020c7a:	4620      	mov	r0, r4
 8020c7c:	f7f7 fdc4 	bl	8018808 <uxr_init_base_object_request>
 8020c80:	4604      	mov	r4, r0
 8020c82:	a906      	add	r1, sp, #24
 8020c84:	a80c      	add	r0, sp, #48	@ 0x30
 8020c86:	f7f9 fd89 	bl	801a79c <uxr_serialize_READ_DATA_Payload>
 8020c8a:	4620      	mov	r0, r4
 8020c8c:	b015      	add	sp, #84	@ 0x54
 8020c8e:	bd30      	pop	{r4, r5, pc}
 8020c90:	2208      	movs	r2, #8
 8020c92:	e7e2      	b.n	8020c5a <uxr_buffer_request_data+0x3a>

08020c94 <uxr_buffer_cancel_data>:
 8020c94:	b510      	push	{r4, lr}
 8020c96:	2300      	movs	r3, #0
 8020c98:	b094      	sub	sp, #80	@ 0x50
 8020c9a:	4604      	mov	r4, r0
 8020c9c:	9205      	str	r2, [sp, #20]
 8020c9e:	9301      	str	r3, [sp, #4]
 8020ca0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8020ca4:	f88d 301e 	strb.w	r3, [sp, #30]
 8020ca8:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8020cac:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8020cb0:	2308      	movs	r3, #8
 8020cb2:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8020cb6:	2201      	movs	r2, #1
 8020cb8:	9300      	str	r3, [sp, #0]
 8020cba:	ab0c      	add	r3, sp, #48	@ 0x30
 8020cbc:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8020cc0:	2210      	movs	r2, #16
 8020cc2:	f7f7 fc65 	bl	8018590 <uxr_prepare_stream_to_write_submessage>
 8020cc6:	b918      	cbnz	r0, 8020cd0 <uxr_buffer_cancel_data+0x3c>
 8020cc8:	4604      	mov	r4, r0
 8020cca:	4620      	mov	r0, r4
 8020ccc:	b014      	add	sp, #80	@ 0x50
 8020cce:	bd10      	pop	{r4, pc}
 8020cd0:	9905      	ldr	r1, [sp, #20]
 8020cd2:	aa06      	add	r2, sp, #24
 8020cd4:	4620      	mov	r0, r4
 8020cd6:	f7f7 fd97 	bl	8018808 <uxr_init_base_object_request>
 8020cda:	4604      	mov	r4, r0
 8020cdc:	a906      	add	r1, sp, #24
 8020cde:	a80c      	add	r0, sp, #48	@ 0x30
 8020ce0:	f7f9 fd5c 	bl	801a79c <uxr_serialize_READ_DATA_Payload>
 8020ce4:	4620      	mov	r0, r4
 8020ce6:	b014      	add	sp, #80	@ 0x50
 8020ce8:	bd10      	pop	{r4, pc}
 8020cea:	bf00      	nop

08020cec <read_submessage_format>:
 8020cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020cf0:	b095      	sub	sp, #84	@ 0x54
 8020cf2:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 8020cf6:	b113      	cbz	r3, 8020cfe <read_submessage_format+0x12>
 8020cf8:	b015      	add	sp, #84	@ 0x54
 8020cfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020cfe:	4606      	mov	r6, r0
 8020d00:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8020d02:	460c      	mov	r4, r1
 8020d04:	4615      	mov	r5, r2
 8020d06:	9004      	str	r0, [sp, #16]
 8020d08:	4699      	mov	r9, r3
 8020d0a:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8020d0c:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8020d10:	9005      	str	r0, [sp, #20]
 8020d12:	a80c      	add	r0, sp, #48	@ 0x30
 8020d14:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8020d18:	1a52      	subs	r2, r2, r1
 8020d1a:	f7f3 fa25 	bl	8014168 <ucdr_init_buffer>
 8020d1e:	a80c      	add	r0, sp, #48	@ 0x30
 8020d20:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8020d24:	f7f3 f9f4 	bl	8014110 <ucdr_set_on_full_buffer_callback>
 8020d28:	69e2      	ldr	r2, [r4, #28]
 8020d2a:	b19a      	cbz	r2, 8020d54 <read_submessage_format+0x68>
 8020d2c:	f1b8 0f07 	cmp.w	r8, #7
 8020d30:	f882 9014 	strb.w	r9, [r2, #20]
 8020d34:	d040      	beq.n	8020db8 <read_submessage_format+0xcc>
 8020d36:	f1b8 0f08 	cmp.w	r8, #8
 8020d3a:	d02e      	beq.n	8020d9a <read_submessage_format+0xae>
 8020d3c:	f1b8 0f06 	cmp.w	r8, #6
 8020d40:	d011      	beq.n	8020d66 <read_submessage_format+0x7a>
 8020d42:	2301      	movs	r3, #1
 8020d44:	7513      	strb	r3, [r2, #20]
 8020d46:	4629      	mov	r1, r5
 8020d48:	4620      	mov	r0, r4
 8020d4a:	f7f3 fa61 	bl	8014210 <ucdr_advance_buffer>
 8020d4e:	b015      	add	sp, #84	@ 0x54
 8020d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020d54:	f1b8 0f07 	cmp.w	r8, #7
 8020d58:	d02e      	beq.n	8020db8 <read_submessage_format+0xcc>
 8020d5a:	f1b8 0f08 	cmp.w	r8, #8
 8020d5e:	d01c      	beq.n	8020d9a <read_submessage_format+0xae>
 8020d60:	f1b8 0f06 	cmp.w	r8, #6
 8020d64:	d1ef      	bne.n	8020d46 <read_submessage_format+0x5a>
 8020d66:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 8020d6a:	f1b8 0f00 	cmp.w	r8, #0
 8020d6e:	d011      	beq.n	8020d94 <read_submessage_format+0xa8>
 8020d70:	ab0c      	add	r3, sp, #48	@ 0x30
 8020d72:	9501      	str	r5, [sp, #4]
 8020d74:	463a      	mov	r2, r7
 8020d76:	4630      	mov	r0, r6
 8020d78:	9300      	str	r3, [sp, #0]
 8020d7a:	2306      	movs	r3, #6
 8020d7c:	f88d 3016 	strb.w	r3, [sp, #22]
 8020d80:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8020d84:	9302      	str	r3, [sp, #8]
 8020d86:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8020d8a:	47c0      	blx	r8
 8020d8c:	2301      	movs	r3, #1
 8020d8e:	69e2      	ldr	r2, [r4, #28]
 8020d90:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8020d94:	2a00      	cmp	r2, #0
 8020d96:	d1d4      	bne.n	8020d42 <read_submessage_format+0x56>
 8020d98:	e7d5      	b.n	8020d46 <read_submessage_format+0x5a>
 8020d9a:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 8020d9e:	2b00      	cmp	r3, #0
 8020da0:	d0f8      	beq.n	8020d94 <read_submessage_format+0xa8>
 8020da2:	a80c      	add	r0, sp, #48	@ 0x30
 8020da4:	a906      	add	r1, sp, #24
 8020da6:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8020daa:	f7f9 fdd1 	bl	801a950 <uxr_deserialize_SampleIdentity>
 8020dae:	b9a0      	cbnz	r0, 8020dda <read_submessage_format+0xee>
 8020db0:	69e2      	ldr	r2, [r4, #28]
 8020db2:	2a00      	cmp	r2, #0
 8020db4:	d1c5      	bne.n	8020d42 <read_submessage_format+0x56>
 8020db6:	e7c6      	b.n	8020d46 <read_submessage_format+0x5a>
 8020db8:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 8020dbc:	b13b      	cbz	r3, 8020dce <read_submessage_format+0xe2>
 8020dbe:	a906      	add	r1, sp, #24
 8020dc0:	a80c      	add	r0, sp, #48	@ 0x30
 8020dc2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8020dc6:	f7f9 fa73 	bl	801a2b0 <uxr_deserialize_BaseObjectRequest>
 8020dca:	bb60      	cbnz	r0, 8020e26 <read_submessage_format+0x13a>
 8020dcc:	69e2      	ldr	r2, [r4, #28]
 8020dce:	68a3      	ldr	r3, [r4, #8]
 8020dd0:	442b      	add	r3, r5
 8020dd2:	60a3      	str	r3, [r4, #8]
 8020dd4:	2a00      	cmp	r2, #0
 8020dd6:	d1b4      	bne.n	8020d42 <read_submessage_format+0x56>
 8020dd8:	e7b5      	b.n	8020d46 <read_submessage_format+0x5a>
 8020dda:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020ddc:	a80c      	add	r0, sp, #48	@ 0x30
 8020dde:	eba8 0803 	sub.w	r8, r8, r3
 8020de2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8020de6:	44a8      	add	r8, r5
 8020de8:	1a52      	subs	r2, r2, r1
 8020dea:	f7f3 f9bd 	bl	8014168 <ucdr_init_buffer>
 8020dee:	a80c      	add	r0, sp, #48	@ 0x30
 8020df0:	fa1f f888 	uxth.w	r8, r8
 8020df4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8020df8:	f7f3 f98a 	bl	8014110 <ucdr_set_on_full_buffer_callback>
 8020dfc:	ab0c      	add	r3, sp, #48	@ 0x30
 8020dfe:	2108      	movs	r1, #8
 8020e00:	f8cd 8004 	str.w	r8, [sp, #4]
 8020e04:	9300      	str	r3, [sp, #0]
 8020e06:	463a      	mov	r2, r7
 8020e08:	f88d 1016 	strb.w	r1, [sp, #22]
 8020e0c:	ab06      	add	r3, sp, #24
 8020e0e:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 8020e12:	4630      	mov	r0, r6
 8020e14:	9102      	str	r1, [sp, #8]
 8020e16:	9905      	ldr	r1, [sp, #20]
 8020e18:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 8020e1c:	47b8      	blx	r7
 8020e1e:	2301      	movs	r3, #1
 8020e20:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8020e24:	e7c4      	b.n	8020db0 <read_submessage_format+0xc4>
 8020e26:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8020e2a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020e2c:	a80c      	add	r0, sp, #48	@ 0x30
 8020e2e:	1a52      	subs	r2, r2, r1
 8020e30:	eba8 0803 	sub.w	r8, r8, r3
 8020e34:	f7f3 f998 	bl	8014168 <ucdr_init_buffer>
 8020e38:	a80c      	add	r0, sp, #48	@ 0x30
 8020e3a:	44a8      	add	r8, r5
 8020e3c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8020e40:	f7f3 f966 	bl	8014110 <ucdr_set_on_full_buffer_callback>
 8020e44:	ab0c      	add	r3, sp, #48	@ 0x30
 8020e46:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8020e4a:	fa1f f888 	uxth.w	r8, r8
 8020e4e:	9300      	str	r3, [sp, #0]
 8020e50:	463a      	mov	r2, r7
 8020e52:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8020e56:	4630      	mov	r0, r6
 8020e58:	f8cd 8004 	str.w	r8, [sp, #4]
 8020e5c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8020e60:	2107      	movs	r1, #7
 8020e62:	f88d 1016 	strb.w	r1, [sp, #22]
 8020e66:	b29b      	uxth	r3, r3
 8020e68:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 8020e6c:	9102      	str	r1, [sp, #8]
 8020e6e:	9905      	ldr	r1, [sp, #20]
 8020e70:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 8020e74:	47b8      	blx	r7
 8020e76:	2301      	movs	r3, #1
 8020e78:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8020e7c:	e7a6      	b.n	8020dcc <read_submessage_format+0xe0>
 8020e7e:	bf00      	nop

08020e80 <uxr_seq_num_add>:
 8020e80:	4408      	add	r0, r1
 8020e82:	b280      	uxth	r0, r0
 8020e84:	4770      	bx	lr
 8020e86:	bf00      	nop

08020e88 <uxr_seq_num_sub>:
 8020e88:	1a40      	subs	r0, r0, r1
 8020e8a:	b280      	uxth	r0, r0
 8020e8c:	4770      	bx	lr
 8020e8e:	bf00      	nop

08020e90 <uxr_seq_num_cmp>:
 8020e90:	4288      	cmp	r0, r1
 8020e92:	d011      	beq.n	8020eb8 <uxr_seq_num_cmp+0x28>
 8020e94:	d309      	bcc.n	8020eaa <uxr_seq_num_cmp+0x1a>
 8020e96:	4288      	cmp	r0, r1
 8020e98:	d910      	bls.n	8020ebc <uxr_seq_num_cmp+0x2c>
 8020e9a:	1a40      	subs	r0, r0, r1
 8020e9c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8020ea0:	bfd4      	ite	le
 8020ea2:	2001      	movle	r0, #1
 8020ea4:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8020ea8:	4770      	bx	lr
 8020eaa:	1a0b      	subs	r3, r1, r0
 8020eac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8020eb0:	daf1      	bge.n	8020e96 <uxr_seq_num_cmp+0x6>
 8020eb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020eb6:	4770      	bx	lr
 8020eb8:	2000      	movs	r0, #0
 8020eba:	4770      	bx	lr
 8020ebc:	2001      	movs	r0, #1
 8020ebe:	4770      	bx	lr

08020ec0 <rcl_get_default_domain_id>:
 8020ec0:	b530      	push	{r4, r5, lr}
 8020ec2:	2300      	movs	r3, #0
 8020ec4:	b083      	sub	sp, #12
 8020ec6:	9300      	str	r3, [sp, #0]
 8020ec8:	b1d0      	cbz	r0, 8020f00 <rcl_get_default_domain_id+0x40>
 8020eca:	4604      	mov	r4, r0
 8020ecc:	4669      	mov	r1, sp
 8020ece:	4815      	ldr	r0, [pc, #84]	@ (8020f24 <rcl_get_default_domain_id+0x64>)
 8020ed0:	f7fc feda 	bl	801dc88 <rcutils_get_env>
 8020ed4:	4602      	mov	r2, r0
 8020ed6:	b110      	cbz	r0, 8020ede <rcl_get_default_domain_id+0x1e>
 8020ed8:	2001      	movs	r0, #1
 8020eda:	b003      	add	sp, #12
 8020edc:	bd30      	pop	{r4, r5, pc}
 8020ede:	9b00      	ldr	r3, [sp, #0]
 8020ee0:	b18b      	cbz	r3, 8020f06 <rcl_get_default_domain_id+0x46>
 8020ee2:	7818      	ldrb	r0, [r3, #0]
 8020ee4:	2800      	cmp	r0, #0
 8020ee6:	d0f8      	beq.n	8020eda <rcl_get_default_domain_id+0x1a>
 8020ee8:	a901      	add	r1, sp, #4
 8020eea:	4618      	mov	r0, r3
 8020eec:	9201      	str	r2, [sp, #4]
 8020eee:	f000 ff4b 	bl	8021d88 <strtoul>
 8020ef2:	4605      	mov	r5, r0
 8020ef4:	b150      	cbz	r0, 8020f0c <rcl_get_default_domain_id+0x4c>
 8020ef6:	1c43      	adds	r3, r0, #1
 8020ef8:	d00d      	beq.n	8020f16 <rcl_get_default_domain_id+0x56>
 8020efa:	2000      	movs	r0, #0
 8020efc:	6025      	str	r5, [r4, #0]
 8020efe:	e7ec      	b.n	8020eda <rcl_get_default_domain_id+0x1a>
 8020f00:	200b      	movs	r0, #11
 8020f02:	b003      	add	sp, #12
 8020f04:	bd30      	pop	{r4, r5, pc}
 8020f06:	4618      	mov	r0, r3
 8020f08:	b003      	add	sp, #12
 8020f0a:	bd30      	pop	{r4, r5, pc}
 8020f0c:	9b01      	ldr	r3, [sp, #4]
 8020f0e:	781b      	ldrb	r3, [r3, #0]
 8020f10:	2b00      	cmp	r3, #0
 8020f12:	d0f2      	beq.n	8020efa <rcl_get_default_domain_id+0x3a>
 8020f14:	e7e0      	b.n	8020ed8 <rcl_get_default_domain_id+0x18>
 8020f16:	f001 fab5 	bl	8022484 <__errno>
 8020f1a:	6803      	ldr	r3, [r0, #0]
 8020f1c:	2b22      	cmp	r3, #34	@ 0x22
 8020f1e:	d1ec      	bne.n	8020efa <rcl_get_default_domain_id+0x3a>
 8020f20:	e7da      	b.n	8020ed8 <rcl_get_default_domain_id+0x18>
 8020f22:	bf00      	nop
 8020f24:	080259dc 	.word	0x080259dc

08020f28 <rcl_expand_topic_name>:
 8020f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f2c:	b08d      	sub	sp, #52	@ 0x34
 8020f2e:	4698      	mov	r8, r3
 8020f30:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020f32:	9207      	str	r2, [sp, #28]
 8020f34:	2b00      	cmp	r3, #0
 8020f36:	bf18      	it	ne
 8020f38:	f1b8 0f00 	cmpne.w	r8, #0
 8020f3c:	bf0c      	ite	eq
 8020f3e:	2301      	moveq	r3, #1
 8020f40:	2300      	movne	r3, #0
 8020f42:	2a00      	cmp	r2, #0
 8020f44:	bf08      	it	eq
 8020f46:	f043 0301 	orreq.w	r3, r3, #1
 8020f4a:	2900      	cmp	r1, #0
 8020f4c:	bf08      	it	eq
 8020f4e:	f043 0301 	orreq.w	r3, r3, #1
 8020f52:	2b00      	cmp	r3, #0
 8020f54:	d13d      	bne.n	8020fd2 <rcl_expand_topic_name+0xaa>
 8020f56:	fab0 f280 	clz	r2, r0
 8020f5a:	4604      	mov	r4, r0
 8020f5c:	0952      	lsrs	r2, r2, #5
 8020f5e:	2800      	cmp	r0, #0
 8020f60:	d037      	beq.n	8020fd2 <rcl_expand_topic_name+0xaa>
 8020f62:	460f      	mov	r7, r1
 8020f64:	a90b      	add	r1, sp, #44	@ 0x2c
 8020f66:	f000 fa51 	bl	802140c <rcl_validate_topic_name>
 8020f6a:	4605      	mov	r5, r0
 8020f6c:	bb68      	cbnz	r0, 8020fca <rcl_expand_topic_name+0xa2>
 8020f6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020f70:	2b00      	cmp	r3, #0
 8020f72:	d137      	bne.n	8020fe4 <rcl_expand_topic_name+0xbc>
 8020f74:	4602      	mov	r2, r0
 8020f76:	a90b      	add	r1, sp, #44	@ 0x2c
 8020f78:	4638      	mov	r0, r7
 8020f7a:	f7fd fb1b 	bl	801e5b4 <rmw_validate_node_name>
 8020f7e:	bb68      	cbnz	r0, 8020fdc <rcl_expand_topic_name+0xb4>
 8020f80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020f82:	2b00      	cmp	r3, #0
 8020f84:	d133      	bne.n	8020fee <rcl_expand_topic_name+0xc6>
 8020f86:	462a      	mov	r2, r5
 8020f88:	a90b      	add	r1, sp, #44	@ 0x2c
 8020f8a:	9807      	ldr	r0, [sp, #28]
 8020f8c:	f7fd faf4 	bl	801e578 <rmw_validate_namespace>
 8020f90:	bb20      	cbnz	r0, 8020fdc <rcl_expand_topic_name+0xb4>
 8020f92:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8020f94:	2d00      	cmp	r5, #0
 8020f96:	f040 80a2 	bne.w	80210de <rcl_expand_topic_name+0x1b6>
 8020f9a:	217b      	movs	r1, #123	@ 0x7b
 8020f9c:	4620      	mov	r0, r4
 8020f9e:	f001 f98f 	bl	80222c0 <strchr>
 8020fa2:	7823      	ldrb	r3, [r4, #0]
 8020fa4:	4681      	mov	r9, r0
 8020fa6:	bb20      	cbnz	r0, 8020ff2 <rcl_expand_topic_name+0xca>
 8020fa8:	2b2f      	cmp	r3, #47	@ 0x2f
 8020faa:	d122      	bne.n	8020ff2 <rcl_expand_topic_name+0xca>
 8020fac:	ab19      	add	r3, sp, #100	@ 0x64
 8020fae:	e893 0003 	ldmia.w	r3, {r0, r1}
 8020fb2:	ab16      	add	r3, sp, #88	@ 0x58
 8020fb4:	e88d 0003 	stmia.w	sp, {r0, r1}
 8020fb8:	4620      	mov	r0, r4
 8020fba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8020fbc:	f7fc ffc6 	bl	801df4c <rcutils_strdup>
 8020fc0:	2800      	cmp	r0, #0
 8020fc2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020fc4:	bf08      	it	eq
 8020fc6:	250a      	moveq	r5, #10
 8020fc8:	6018      	str	r0, [r3, #0]
 8020fca:	4628      	mov	r0, r5
 8020fcc:	b00d      	add	sp, #52	@ 0x34
 8020fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fd2:	250b      	movs	r5, #11
 8020fd4:	4628      	mov	r0, r5
 8020fd6:	b00d      	add	sp, #52	@ 0x34
 8020fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fdc:	f7f9 fd72 	bl	801aac4 <rcl_convert_rmw_ret_to_rcl_ret>
 8020fe0:	4605      	mov	r5, r0
 8020fe2:	e7f2      	b.n	8020fca <rcl_expand_topic_name+0xa2>
 8020fe4:	2567      	movs	r5, #103	@ 0x67
 8020fe6:	4628      	mov	r0, r5
 8020fe8:	b00d      	add	sp, #52	@ 0x34
 8020fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fee:	25c9      	movs	r5, #201	@ 0xc9
 8020ff0:	e7eb      	b.n	8020fca <rcl_expand_topic_name+0xa2>
 8020ff2:	2b7e      	cmp	r3, #126	@ 0x7e
 8020ff4:	d075      	beq.n	80210e2 <rcl_expand_topic_name+0x1ba>
 8020ff6:	f1b9 0f00 	cmp.w	r9, #0
 8020ffa:	f000 80c2 	beq.w	8021182 <rcl_expand_topic_name+0x25a>
 8020ffe:	2300      	movs	r3, #0
 8021000:	46a2      	mov	sl, r4
 8021002:	461e      	mov	r6, r3
 8021004:	9508      	str	r5, [sp, #32]
 8021006:	4655      	mov	r5, sl
 8021008:	9409      	str	r4, [sp, #36]	@ 0x24
 802100a:	46b2      	mov	sl, r6
 802100c:	464c      	mov	r4, r9
 802100e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021012:	2c00      	cmp	r4, #0
 8021014:	f000 80ae 	beq.w	8021174 <rcl_expand_topic_name+0x24c>
 8021018:	217d      	movs	r1, #125	@ 0x7d
 802101a:	4628      	mov	r0, r5
 802101c:	f001 f950 	bl	80222c0 <strchr>
 8021020:	eba0 0904 	sub.w	r9, r0, r4
 8021024:	4621      	mov	r1, r4
 8021026:	4869      	ldr	r0, [pc, #420]	@ (80211cc <rcl_expand_topic_name+0x2a4>)
 8021028:	f109 0601 	add.w	r6, r9, #1
 802102c:	4632      	mov	r2, r6
 802102e:	f001 f954 	bl	80222da <strncmp>
 8021032:	2800      	cmp	r0, #0
 8021034:	d051      	beq.n	80210da <rcl_expand_topic_name+0x1b2>
 8021036:	4632      	mov	r2, r6
 8021038:	4621      	mov	r1, r4
 802103a:	4865      	ldr	r0, [pc, #404]	@ (80211d0 <rcl_expand_topic_name+0x2a8>)
 802103c:	f001 f94d 	bl	80222da <strncmp>
 8021040:	b128      	cbz	r0, 802104e <rcl_expand_topic_name+0x126>
 8021042:	4632      	mov	r2, r6
 8021044:	4621      	mov	r1, r4
 8021046:	4863      	ldr	r0, [pc, #396]	@ (80211d4 <rcl_expand_topic_name+0x2ac>)
 8021048:	f001 f947 	bl	80222da <strncmp>
 802104c:	bb38      	cbnz	r0, 802109e <rcl_expand_topic_name+0x176>
 802104e:	46d9      	mov	r9, fp
 8021050:	ab18      	add	r3, sp, #96	@ 0x60
 8021052:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8021056:	ab16      	add	r3, sp, #88	@ 0x58
 8021058:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 802105c:	4620      	mov	r0, r4
 802105e:	4631      	mov	r1, r6
 8021060:	cb0c      	ldmia	r3, {r2, r3}
 8021062:	f7fc ff95 	bl	801df90 <rcutils_strndup>
 8021066:	4604      	mov	r4, r0
 8021068:	2800      	cmp	r0, #0
 802106a:	f000 80a3 	beq.w	80211b4 <rcl_expand_topic_name+0x28c>
 802106e:	464a      	mov	r2, r9
 8021070:	4628      	mov	r0, r5
 8021072:	ab16      	add	r3, sp, #88	@ 0x58
 8021074:	4621      	mov	r1, r4
 8021076:	f7fc fe69 	bl	801dd4c <rcutils_repl_str>
 802107a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802107c:	4605      	mov	r5, r0
 802107e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8021080:	4620      	mov	r0, r4
 8021082:	4798      	blx	r3
 8021084:	4650      	mov	r0, sl
 8021086:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8021088:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802108a:	4798      	blx	r3
 802108c:	2d00      	cmp	r5, #0
 802108e:	d06c      	beq.n	802116a <rcl_expand_topic_name+0x242>
 8021090:	217b      	movs	r1, #123	@ 0x7b
 8021092:	4628      	mov	r0, r5
 8021094:	f001 f914 	bl	80222c0 <strchr>
 8021098:	46aa      	mov	sl, r5
 802109a:	4604      	mov	r4, r0
 802109c:	e7b9      	b.n	8021012 <rcl_expand_topic_name+0xea>
 802109e:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80210a2:	1c61      	adds	r1, r4, #1
 80210a4:	4640      	mov	r0, r8
 80210a6:	f7fd f88b 	bl	801e1c0 <rcutils_string_map_getn>
 80210aa:	4681      	mov	r9, r0
 80210ac:	2800      	cmp	r0, #0
 80210ae:	d1cf      	bne.n	8021050 <rcl_expand_topic_name+0x128>
 80210b0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80210b2:	aa18      	add	r2, sp, #96	@ 0x60
 80210b4:	2569      	movs	r5, #105	@ 0x69
 80210b6:	6018      	str	r0, [r3, #0]
 80210b8:	ab16      	add	r3, sp, #88	@ 0x58
 80210ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80210bc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80210c0:	4631      	mov	r1, r6
 80210c2:	4620      	mov	r0, r4
 80210c4:	cb0c      	ldmia	r3, {r2, r3}
 80210c6:	f7fc ff63 	bl	801df90 <rcutils_strndup>
 80210ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80210cc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80210ce:	4798      	blx	r3
 80210d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80210d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80210d4:	4650      	mov	r0, sl
 80210d6:	4798      	blx	r3
 80210d8:	e777      	b.n	8020fca <rcl_expand_topic_name+0xa2>
 80210da:	46b9      	mov	r9, r7
 80210dc:	e7b8      	b.n	8021050 <rcl_expand_topic_name+0x128>
 80210de:	25ca      	movs	r5, #202	@ 0xca
 80210e0:	e773      	b.n	8020fca <rcl_expand_topic_name+0xa2>
 80210e2:	9e07      	ldr	r6, [sp, #28]
 80210e4:	4630      	mov	r0, r6
 80210e6:	f7df f905 	bl	80002f4 <strlen>
 80210ea:	4a3b      	ldr	r2, [pc, #236]	@ (80211d8 <rcl_expand_topic_name+0x2b0>)
 80210ec:	4b3b      	ldr	r3, [pc, #236]	@ (80211dc <rcl_expand_topic_name+0x2b4>)
 80210ee:	9603      	str	r6, [sp, #12]
 80210f0:	2801      	cmp	r0, #1
 80210f2:	bf18      	it	ne
 80210f4:	4613      	movne	r3, r2
 80210f6:	9704      	str	r7, [sp, #16]
 80210f8:	9302      	str	r3, [sp, #8]
 80210fa:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80210fc:	9300      	str	r3, [sp, #0]
 80210fe:	1c63      	adds	r3, r4, #1
 8021100:	9305      	str	r3, [sp, #20]
 8021102:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8021106:	9301      	str	r3, [sp, #4]
 8021108:	ab16      	add	r3, sp, #88	@ 0x58
 802110a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802110c:	f7fc fde4 	bl	801dcd8 <rcutils_format_string_limit>
 8021110:	4606      	mov	r6, r0
 8021112:	b350      	cbz	r0, 802116a <rcl_expand_topic_name+0x242>
 8021114:	f1b9 0f00 	cmp.w	r9, #0
 8021118:	d005      	beq.n	8021126 <rcl_expand_topic_name+0x1fe>
 802111a:	217b      	movs	r1, #123	@ 0x7b
 802111c:	46b2      	mov	sl, r6
 802111e:	f001 f8cf 	bl	80222c0 <strchr>
 8021122:	4681      	mov	r9, r0
 8021124:	e76e      	b.n	8021004 <rcl_expand_topic_name+0xdc>
 8021126:	7833      	ldrb	r3, [r6, #0]
 8021128:	2b2f      	cmp	r3, #47	@ 0x2f
 802112a:	d01b      	beq.n	8021164 <rcl_expand_topic_name+0x23c>
 802112c:	9c07      	ldr	r4, [sp, #28]
 802112e:	4620      	mov	r0, r4
 8021130:	f7df f8e0 	bl	80002f4 <strlen>
 8021134:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8021138:	4a29      	ldr	r2, [pc, #164]	@ (80211e0 <rcl_expand_topic_name+0x2b8>)
 802113a:	9301      	str	r3, [sp, #4]
 802113c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802113e:	9604      	str	r6, [sp, #16]
 8021140:	9300      	str	r3, [sp, #0]
 8021142:	4b28      	ldr	r3, [pc, #160]	@ (80211e4 <rcl_expand_topic_name+0x2bc>)
 8021144:	9403      	str	r4, [sp, #12]
 8021146:	2801      	cmp	r0, #1
 8021148:	bf18      	it	ne
 802114a:	4613      	movne	r3, r2
 802114c:	9302      	str	r3, [sp, #8]
 802114e:	ab16      	add	r3, sp, #88	@ 0x58
 8021150:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8021152:	f7fc fdc1 	bl	801dcd8 <rcutils_format_string_limit>
 8021156:	4603      	mov	r3, r0
 8021158:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 802115a:	4630      	mov	r0, r6
 802115c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802115e:	461e      	mov	r6, r3
 8021160:	4790      	blx	r2
 8021162:	b116      	cbz	r6, 802116a <rcl_expand_topic_name+0x242>
 8021164:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8021166:	601e      	str	r6, [r3, #0]
 8021168:	e72f      	b.n	8020fca <rcl_expand_topic_name+0xa2>
 802116a:	2300      	movs	r3, #0
 802116c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802116e:	250a      	movs	r5, #10
 8021170:	6013      	str	r3, [r2, #0]
 8021172:	e72a      	b.n	8020fca <rcl_expand_topic_name+0xa2>
 8021174:	4653      	mov	r3, sl
 8021176:	4656      	mov	r6, sl
 8021178:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 802117c:	2b00      	cmp	r3, #0
 802117e:	d1d2      	bne.n	8021126 <rcl_expand_topic_name+0x1fe>
 8021180:	7823      	ldrb	r3, [r4, #0]
 8021182:	2b2f      	cmp	r3, #47	@ 0x2f
 8021184:	d01e      	beq.n	80211c4 <rcl_expand_topic_name+0x29c>
 8021186:	9e07      	ldr	r6, [sp, #28]
 8021188:	4630      	mov	r0, r6
 802118a:	f7df f8b3 	bl	80002f4 <strlen>
 802118e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8021190:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8021194:	9603      	str	r6, [sp, #12]
 8021196:	9404      	str	r4, [sp, #16]
 8021198:	e9cd 2300 	strd	r2, r3, [sp]
 802119c:	4a10      	ldr	r2, [pc, #64]	@ (80211e0 <rcl_expand_topic_name+0x2b8>)
 802119e:	4b11      	ldr	r3, [pc, #68]	@ (80211e4 <rcl_expand_topic_name+0x2bc>)
 80211a0:	2801      	cmp	r0, #1
 80211a2:	bf18      	it	ne
 80211a4:	4613      	movne	r3, r2
 80211a6:	9302      	str	r3, [sp, #8]
 80211a8:	ab16      	add	r3, sp, #88	@ 0x58
 80211aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80211ac:	f7fc fd94 	bl	801dcd8 <rcutils_format_string_limit>
 80211b0:	4606      	mov	r6, r0
 80211b2:	e7d6      	b.n	8021162 <rcl_expand_topic_name+0x23a>
 80211b4:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 80211b8:	4650      	mov	r0, sl
 80211ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80211bc:	6014      	str	r4, [r2, #0]
 80211be:	250a      	movs	r5, #10
 80211c0:	4798      	blx	r3
 80211c2:	e702      	b.n	8020fca <rcl_expand_topic_name+0xa2>
 80211c4:	2300      	movs	r3, #0
 80211c6:	461e      	mov	r6, r3
 80211c8:	e7cc      	b.n	8021164 <rcl_expand_topic_name+0x23c>
 80211ca:	bf00      	nop
 80211cc:	080259f4 	.word	0x080259f4
 80211d0:	080259fc 	.word	0x080259fc
 80211d4:	08025a04 	.word	0x08025a04
 80211d8:	080259ec 	.word	0x080259ec
 80211dc:	080249a8 	.word	0x080249a8
 80211e0:	0802533c 	.word	0x0802533c
 80211e4:	080249b8 	.word	0x080249b8

080211e8 <rcl_get_default_topic_name_substitutions>:
 80211e8:	2800      	cmp	r0, #0
 80211ea:	bf0c      	ite	eq
 80211ec:	200b      	moveq	r0, #11
 80211ee:	2000      	movne	r0, #0
 80211f0:	4770      	bx	lr
 80211f2:	bf00      	nop

080211f4 <rcl_get_zero_initialized_guard_condition>:
 80211f4:	4a03      	ldr	r2, [pc, #12]	@ (8021204 <rcl_get_zero_initialized_guard_condition+0x10>)
 80211f6:	4603      	mov	r3, r0
 80211f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80211fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8021200:	4618      	mov	r0, r3
 8021202:	4770      	bx	lr
 8021204:	08025a10 	.word	0x08025a10

08021208 <rcl_guard_condition_init>:
 8021208:	b082      	sub	sp, #8
 802120a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802120c:	b087      	sub	sp, #28
 802120e:	4604      	mov	r4, r0
 8021210:	460d      	mov	r5, r1
 8021212:	f10d 0e30 	add.w	lr, sp, #48	@ 0x30
 8021216:	f10d 0c04 	add.w	ip, sp, #4
 802121a:	e9ce 2300 	strd	r2, r3, [lr]
 802121e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8021222:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021226:	f8de 3000 	ldr.w	r3, [lr]
 802122a:	a801      	add	r0, sp, #4
 802122c:	f8cc 3000 	str.w	r3, [ip]
 8021230:	f7f4 f93a 	bl	80154a8 <rcutils_allocator_is_valid>
 8021234:	b354      	cbz	r4, 802128c <rcl_guard_condition_init+0x84>
 8021236:	f080 0301 	eor.w	r3, r0, #1
 802123a:	b2db      	uxtb	r3, r3
 802123c:	bb33      	cbnz	r3, 802128c <rcl_guard_condition_init+0x84>
 802123e:	6866      	ldr	r6, [r4, #4]
 8021240:	b9ee      	cbnz	r6, 802127e <rcl_guard_condition_init+0x76>
 8021242:	b31d      	cbz	r5, 802128c <rcl_guard_condition_init+0x84>
 8021244:	4628      	mov	r0, r5
 8021246:	f7f9 fc5b 	bl	801ab00 <rcl_context_is_valid>
 802124a:	b308      	cbz	r0, 8021290 <rcl_guard_condition_init+0x88>
 802124c:	9b01      	ldr	r3, [sp, #4]
 802124e:	201c      	movs	r0, #28
 8021250:	9905      	ldr	r1, [sp, #20]
 8021252:	4798      	blx	r3
 8021254:	4607      	mov	r7, r0
 8021256:	6060      	str	r0, [r4, #4]
 8021258:	b310      	cbz	r0, 80212a0 <rcl_guard_condition_init+0x98>
 802125a:	6828      	ldr	r0, [r5, #0]
 802125c:	3028      	adds	r0, #40	@ 0x28
 802125e:	f000 faab 	bl	80217b8 <rmw_create_guard_condition>
 8021262:	6038      	str	r0, [r7, #0]
 8021264:	6860      	ldr	r0, [r4, #4]
 8021266:	6807      	ldr	r7, [r0, #0]
 8021268:	b1a7      	cbz	r7, 8021294 <rcl_guard_condition_init+0x8c>
 802126a:	2301      	movs	r3, #1
 802126c:	ac01      	add	r4, sp, #4
 802126e:	f100 0708 	add.w	r7, r0, #8
 8021272:	7103      	strb	r3, [r0, #4]
 8021274:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8021276:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8021278:	6823      	ldr	r3, [r4, #0]
 802127a:	603b      	str	r3, [r7, #0]
 802127c:	e000      	b.n	8021280 <rcl_guard_condition_init+0x78>
 802127e:	2664      	movs	r6, #100	@ 0x64
 8021280:	4630      	mov	r0, r6
 8021282:	b007      	add	sp, #28
 8021284:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8021288:	b002      	add	sp, #8
 802128a:	4770      	bx	lr
 802128c:	260b      	movs	r6, #11
 802128e:	e7f7      	b.n	8021280 <rcl_guard_condition_init+0x78>
 8021290:	2665      	movs	r6, #101	@ 0x65
 8021292:	e7f5      	b.n	8021280 <rcl_guard_condition_init+0x78>
 8021294:	9b02      	ldr	r3, [sp, #8]
 8021296:	2601      	movs	r6, #1
 8021298:	9905      	ldr	r1, [sp, #20]
 802129a:	4798      	blx	r3
 802129c:	6067      	str	r7, [r4, #4]
 802129e:	e7ef      	b.n	8021280 <rcl_guard_condition_init+0x78>
 80212a0:	260a      	movs	r6, #10
 80212a2:	e7ed      	b.n	8021280 <rcl_guard_condition_init+0x78>

080212a4 <rcl_guard_condition_init_from_rmw>:
 80212a4:	b082      	sub	sp, #8
 80212a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80212aa:	b086      	sub	sp, #24
 80212ac:	4604      	mov	r4, r0
 80212ae:	460e      	mov	r6, r1
 80212b0:	4615      	mov	r5, r2
 80212b2:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80212b6:	f10d 0e04 	add.w	lr, sp, #4
 80212ba:	f84c 3f04 	str.w	r3, [ip, #4]!
 80212be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80212c2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80212c6:	f8dc 3000 	ldr.w	r3, [ip]
 80212ca:	a801      	add	r0, sp, #4
 80212cc:	f8ce 3000 	str.w	r3, [lr]
 80212d0:	f7f4 f8ea 	bl	80154a8 <rcutils_allocator_is_valid>
 80212d4:	f080 0301 	eor.w	r3, r0, #1
 80212d8:	b2db      	uxtb	r3, r3
 80212da:	bb3b      	cbnz	r3, 802132c <rcl_guard_condition_init_from_rmw+0x88>
 80212dc:	b334      	cbz	r4, 802132c <rcl_guard_condition_init_from_rmw+0x88>
 80212de:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80212e2:	f1b8 0f00 	cmp.w	r8, #0
 80212e6:	d11a      	bne.n	802131e <rcl_guard_condition_init_from_rmw+0x7a>
 80212e8:	b305      	cbz	r5, 802132c <rcl_guard_condition_init_from_rmw+0x88>
 80212ea:	4628      	mov	r0, r5
 80212ec:	f7f9 fc08 	bl	801ab00 <rcl_context_is_valid>
 80212f0:	b1f0      	cbz	r0, 8021330 <rcl_guard_condition_init_from_rmw+0x8c>
 80212f2:	9b01      	ldr	r3, [sp, #4]
 80212f4:	201c      	movs	r0, #28
 80212f6:	9905      	ldr	r1, [sp, #20]
 80212f8:	4798      	blx	r3
 80212fa:	4607      	mov	r7, r0
 80212fc:	6060      	str	r0, [r4, #4]
 80212fe:	b320      	cbz	r0, 802134a <rcl_guard_condition_init_from_rmw+0xa6>
 8021300:	b1c6      	cbz	r6, 8021334 <rcl_guard_condition_init_from_rmw+0x90>
 8021302:	6006      	str	r6, [r0, #0]
 8021304:	f880 8004 	strb.w	r8, [r0, #4]
 8021308:	ac01      	add	r4, sp, #4
 802130a:	f107 0c08 	add.w	ip, r7, #8
 802130e:	2500      	movs	r5, #0
 8021310:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8021312:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021316:	6823      	ldr	r3, [r4, #0]
 8021318:	f8cc 3000 	str.w	r3, [ip]
 802131c:	e000      	b.n	8021320 <rcl_guard_condition_init_from_rmw+0x7c>
 802131e:	2564      	movs	r5, #100	@ 0x64
 8021320:	4628      	mov	r0, r5
 8021322:	b006      	add	sp, #24
 8021324:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021328:	b002      	add	sp, #8
 802132a:	4770      	bx	lr
 802132c:	250b      	movs	r5, #11
 802132e:	e7f7      	b.n	8021320 <rcl_guard_condition_init_from_rmw+0x7c>
 8021330:	2565      	movs	r5, #101	@ 0x65
 8021332:	e7f5      	b.n	8021320 <rcl_guard_condition_init_from_rmw+0x7c>
 8021334:	6828      	ldr	r0, [r5, #0]
 8021336:	3028      	adds	r0, #40	@ 0x28
 8021338:	f000 fa3e 	bl	80217b8 <rmw_create_guard_condition>
 802133c:	6038      	str	r0, [r7, #0]
 802133e:	6867      	ldr	r7, [r4, #4]
 8021340:	683e      	ldr	r6, [r7, #0]
 8021342:	b126      	cbz	r6, 802134e <rcl_guard_condition_init_from_rmw+0xaa>
 8021344:	2301      	movs	r3, #1
 8021346:	713b      	strb	r3, [r7, #4]
 8021348:	e7de      	b.n	8021308 <rcl_guard_condition_init_from_rmw+0x64>
 802134a:	250a      	movs	r5, #10
 802134c:	e7e8      	b.n	8021320 <rcl_guard_condition_init_from_rmw+0x7c>
 802134e:	9b02      	ldr	r3, [sp, #8]
 8021350:	4638      	mov	r0, r7
 8021352:	9905      	ldr	r1, [sp, #20]
 8021354:	2501      	movs	r5, #1
 8021356:	4798      	blx	r3
 8021358:	6066      	str	r6, [r4, #4]
 802135a:	e7e1      	b.n	8021320 <rcl_guard_condition_init_from_rmw+0x7c>

0802135c <rcl_guard_condition_fini>:
 802135c:	b570      	push	{r4, r5, r6, lr}
 802135e:	b082      	sub	sp, #8
 8021360:	b1f0      	cbz	r0, 80213a0 <rcl_guard_condition_fini+0x44>
 8021362:	6843      	ldr	r3, [r0, #4]
 8021364:	4604      	mov	r4, r0
 8021366:	b163      	cbz	r3, 8021382 <rcl_guard_condition_fini+0x26>
 8021368:	6818      	ldr	r0, [r3, #0]
 802136a:	68de      	ldr	r6, [r3, #12]
 802136c:	6999      	ldr	r1, [r3, #24]
 802136e:	b160      	cbz	r0, 802138a <rcl_guard_condition_fini+0x2e>
 8021370:	791d      	ldrb	r5, [r3, #4]
 8021372:	b965      	cbnz	r5, 802138e <rcl_guard_condition_fini+0x32>
 8021374:	4618      	mov	r0, r3
 8021376:	47b0      	blx	r6
 8021378:	2300      	movs	r3, #0
 802137a:	4628      	mov	r0, r5
 802137c:	6063      	str	r3, [r4, #4]
 802137e:	b002      	add	sp, #8
 8021380:	bd70      	pop	{r4, r5, r6, pc}
 8021382:	461d      	mov	r5, r3
 8021384:	4628      	mov	r0, r5
 8021386:	b002      	add	sp, #8
 8021388:	bd70      	pop	{r4, r5, r6, pc}
 802138a:	4605      	mov	r5, r0
 802138c:	e7f2      	b.n	8021374 <rcl_guard_condition_fini+0x18>
 802138e:	9101      	str	r1, [sp, #4]
 8021390:	f000 fa28 	bl	80217e4 <rmw_destroy_guard_condition>
 8021394:	1e05      	subs	r5, r0, #0
 8021396:	6863      	ldr	r3, [r4, #4]
 8021398:	9901      	ldr	r1, [sp, #4]
 802139a:	bf18      	it	ne
 802139c:	2501      	movne	r5, #1
 802139e:	e7e9      	b.n	8021374 <rcl_guard_condition_fini+0x18>
 80213a0:	250b      	movs	r5, #11
 80213a2:	4628      	mov	r0, r5
 80213a4:	b002      	add	sp, #8
 80213a6:	bd70      	pop	{r4, r5, r6, pc}

080213a8 <rcl_guard_condition_get_default_options>:
 80213a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80213aa:	b087      	sub	sp, #28
 80213ac:	4606      	mov	r6, r0
 80213ae:	4c0b      	ldr	r4, [pc, #44]	@ (80213dc <rcl_guard_condition_get_default_options+0x34>)
 80213b0:	4668      	mov	r0, sp
 80213b2:	f7f4 f86b 	bl	801548c <rcutils_get_default_allocator>
 80213b6:	46ee      	mov	lr, sp
 80213b8:	46a4      	mov	ip, r4
 80213ba:	4625      	mov	r5, r4
 80213bc:	4634      	mov	r4, r6
 80213be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80213c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80213c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80213c8:	f8de 7000 	ldr.w	r7, [lr]
 80213cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80213ce:	4630      	mov	r0, r6
 80213d0:	f8cc 7000 	str.w	r7, [ip]
 80213d4:	6027      	str	r7, [r4, #0]
 80213d6:	b007      	add	sp, #28
 80213d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80213da:	bf00      	nop
 80213dc:	24069590 	.word	0x24069590

080213e0 <rcl_trigger_guard_condition>:
 80213e0:	b148      	cbz	r0, 80213f6 <rcl_trigger_guard_condition+0x16>
 80213e2:	b508      	push	{r3, lr}
 80213e4:	6843      	ldr	r3, [r0, #4]
 80213e6:	b143      	cbz	r3, 80213fa <rcl_trigger_guard_condition+0x1a>
 80213e8:	6818      	ldr	r0, [r3, #0]
 80213ea:	f000 fa0f 	bl	802180c <rmw_trigger_guard_condition>
 80213ee:	3800      	subs	r0, #0
 80213f0:	bf18      	it	ne
 80213f2:	2001      	movne	r0, #1
 80213f4:	bd08      	pop	{r3, pc}
 80213f6:	200b      	movs	r0, #11
 80213f8:	4770      	bx	lr
 80213fa:	200b      	movs	r0, #11
 80213fc:	bd08      	pop	{r3, pc}
 80213fe:	bf00      	nop

08021400 <rcl_guard_condition_get_rmw_handle>:
 8021400:	b110      	cbz	r0, 8021408 <rcl_guard_condition_get_rmw_handle+0x8>
 8021402:	6840      	ldr	r0, [r0, #4]
 8021404:	b100      	cbz	r0, 8021408 <rcl_guard_condition_get_rmw_handle+0x8>
 8021406:	6800      	ldr	r0, [r0, #0]
 8021408:	4770      	bx	lr
 802140a:	bf00      	nop

0802140c <rcl_validate_topic_name>:
 802140c:	2800      	cmp	r0, #0
 802140e:	f000 8089 	beq.w	8021524 <rcl_validate_topic_name+0x118>
 8021412:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021416:	460e      	mov	r6, r1
 8021418:	2900      	cmp	r1, #0
 802141a:	f000 8085 	beq.w	8021528 <rcl_validate_topic_name+0x11c>
 802141e:	4604      	mov	r4, r0
 8021420:	4617      	mov	r7, r2
 8021422:	f7de ff67 	bl	80002f4 <strlen>
 8021426:	b1b0      	cbz	r0, 8021456 <rcl_validate_topic_name+0x4a>
 8021428:	f894 e000 	ldrb.w	lr, [r4]
 802142c:	f8df c160 	ldr.w	ip, [pc, #352]	@ 8021590 <rcl_validate_topic_name+0x184>
 8021430:	f81c 300e 	ldrb.w	r3, [ip, lr]
 8021434:	f013 0304 	ands.w	r3, r3, #4
 8021438:	d139      	bne.n	80214ae <rcl_validate_topic_name+0xa2>
 802143a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 802143e:	f814 2008 	ldrb.w	r2, [r4, r8]
 8021442:	2a2f      	cmp	r2, #47	@ 0x2f
 8021444:	d10f      	bne.n	8021466 <rcl_validate_topic_name+0x5a>
 8021446:	2202      	movs	r2, #2
 8021448:	6032      	str	r2, [r6, #0]
 802144a:	b3a7      	cbz	r7, 80214b6 <rcl_validate_topic_name+0xaa>
 802144c:	4618      	mov	r0, r3
 802144e:	f8c7 8000 	str.w	r8, [r7]
 8021452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021456:	2301      	movs	r3, #1
 8021458:	6033      	str	r3, [r6, #0]
 802145a:	b367      	cbz	r7, 80214b6 <rcl_validate_topic_name+0xaa>
 802145c:	2300      	movs	r3, #0
 802145e:	4618      	mov	r0, r3
 8021460:	603b      	str	r3, [r7, #0]
 8021462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021466:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 802146a:	461d      	mov	r5, r3
 802146c:	4619      	mov	r1, r3
 802146e:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8021472:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 8021476:	f1b9 0f09 	cmp.w	r9, #9
 802147a:	d91f      	bls.n	80214bc <rcl_validate_topic_name+0xb0>
 802147c:	f022 0920 	bic.w	r9, r2, #32
 8021480:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 8021484:	f1b9 0f19 	cmp.w	r9, #25
 8021488:	d918      	bls.n	80214bc <rcl_validate_topic_name+0xb0>
 802148a:	2a5f      	cmp	r2, #95	@ 0x5f
 802148c:	d024      	beq.n	80214d8 <rcl_validate_topic_name+0xcc>
 802148e:	2a2f      	cmp	r2, #47	@ 0x2f
 8021490:	d058      	beq.n	8021544 <rcl_validate_topic_name+0x138>
 8021492:	2a7e      	cmp	r2, #126	@ 0x7e
 8021494:	d04a      	beq.n	802152c <rcl_validate_topic_name+0x120>
 8021496:	2a7b      	cmp	r2, #123	@ 0x7b
 8021498:	d05b      	beq.n	8021552 <rcl_validate_topic_name+0x146>
 802149a:	2a7d      	cmp	r2, #125	@ 0x7d
 802149c:	d169      	bne.n	8021572 <rcl_validate_topic_name+0x166>
 802149e:	2d00      	cmp	r5, #0
 80214a0:	d15c      	bne.n	802155c <rcl_validate_topic_name+0x150>
 80214a2:	2305      	movs	r3, #5
 80214a4:	6033      	str	r3, [r6, #0]
 80214a6:	b137      	cbz	r7, 80214b6 <rcl_validate_topic_name+0xaa>
 80214a8:	2000      	movs	r0, #0
 80214aa:	6039      	str	r1, [r7, #0]
 80214ac:	e7d9      	b.n	8021462 <rcl_validate_topic_name+0x56>
 80214ae:	2304      	movs	r3, #4
 80214b0:	6033      	str	r3, [r6, #0]
 80214b2:	2f00      	cmp	r7, #0
 80214b4:	d1d2      	bne.n	802145c <rcl_validate_topic_name+0x50>
 80214b6:	2000      	movs	r0, #0
 80214b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80214bc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80214c0:	0752      	lsls	r2, r2, #29
 80214c2:	d509      	bpl.n	80214d8 <rcl_validate_topic_name+0xcc>
 80214c4:	2900      	cmp	r1, #0
 80214c6:	bf0c      	ite	eq
 80214c8:	2200      	moveq	r2, #0
 80214ca:	f005 0201 	andne.w	r2, r5, #1
 80214ce:	b11a      	cbz	r2, 80214d8 <rcl_validate_topic_name+0xcc>
 80214d0:	1e4d      	subs	r5, r1, #1
 80214d2:	429d      	cmp	r5, r3
 80214d4:	d031      	beq.n	802153a <rcl_validate_topic_name+0x12e>
 80214d6:	4615      	mov	r5, r2
 80214d8:	3101      	adds	r1, #1
 80214da:	4288      	cmp	r0, r1
 80214dc:	d1c7      	bne.n	802146e <rcl_validate_topic_name+0x62>
 80214de:	2d00      	cmp	r5, #0
 80214e0:	d142      	bne.n	8021568 <rcl_validate_topic_name+0x15c>
 80214e2:	4628      	mov	r0, r5
 80214e4:	2301      	movs	r3, #1
 80214e6:	e00c      	b.n	8021502 <rcl_validate_topic_name+0xf6>
 80214e8:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 80214ec:	d101      	bne.n	80214f2 <rcl_validate_topic_name+0xe6>
 80214ee:	2801      	cmp	r0, #1
 80214f0:	d047      	beq.n	8021582 <rcl_validate_topic_name+0x176>
 80214f2:	1c5a      	adds	r2, r3, #1
 80214f4:	428b      	cmp	r3, r1
 80214f6:	f100 0001 	add.w	r0, r0, #1
 80214fa:	f104 0401 	add.w	r4, r4, #1
 80214fe:	4613      	mov	r3, r2
 8021500:	d22e      	bcs.n	8021560 <rcl_validate_topic_name+0x154>
 8021502:	4580      	cmp	r8, r0
 8021504:	d0f5      	beq.n	80214f2 <rcl_validate_topic_name+0xe6>
 8021506:	7822      	ldrb	r2, [r4, #0]
 8021508:	2a2f      	cmp	r2, #47	@ 0x2f
 802150a:	d1ed      	bne.n	80214e8 <rcl_validate_topic_name+0xdc>
 802150c:	7862      	ldrb	r2, [r4, #1]
 802150e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8021512:	0752      	lsls	r2, r2, #29
 8021514:	d5ed      	bpl.n	80214f2 <rcl_validate_topic_name+0xe6>
 8021516:	2204      	movs	r2, #4
 8021518:	6032      	str	r2, [r6, #0]
 802151a:	2f00      	cmp	r7, #0
 802151c:	d0cb      	beq.n	80214b6 <rcl_validate_topic_name+0xaa>
 802151e:	2000      	movs	r0, #0
 8021520:	603b      	str	r3, [r7, #0]
 8021522:	e79e      	b.n	8021462 <rcl_validate_topic_name+0x56>
 8021524:	200b      	movs	r0, #11
 8021526:	4770      	bx	lr
 8021528:	200b      	movs	r0, #11
 802152a:	e79a      	b.n	8021462 <rcl_validate_topic_name+0x56>
 802152c:	2900      	cmp	r1, #0
 802152e:	d0d3      	beq.n	80214d8 <rcl_validate_topic_name+0xcc>
 8021530:	2306      	movs	r3, #6
 8021532:	6033      	str	r3, [r6, #0]
 8021534:	2f00      	cmp	r7, #0
 8021536:	d1b7      	bne.n	80214a8 <rcl_validate_topic_name+0x9c>
 8021538:	e7bd      	b.n	80214b6 <rcl_validate_topic_name+0xaa>
 802153a:	2309      	movs	r3, #9
 802153c:	6033      	str	r3, [r6, #0]
 802153e:	2f00      	cmp	r7, #0
 8021540:	d1b2      	bne.n	80214a8 <rcl_validate_topic_name+0x9c>
 8021542:	e7b8      	b.n	80214b6 <rcl_validate_topic_name+0xaa>
 8021544:	2d00      	cmp	r5, #0
 8021546:	d0c7      	beq.n	80214d8 <rcl_validate_topic_name+0xcc>
 8021548:	2308      	movs	r3, #8
 802154a:	6033      	str	r3, [r6, #0]
 802154c:	2f00      	cmp	r7, #0
 802154e:	d1ab      	bne.n	80214a8 <rcl_validate_topic_name+0x9c>
 8021550:	e7b1      	b.n	80214b6 <rcl_validate_topic_name+0xaa>
 8021552:	2d00      	cmp	r5, #0
 8021554:	d1f8      	bne.n	8021548 <rcl_validate_topic_name+0x13c>
 8021556:	460b      	mov	r3, r1
 8021558:	2501      	movs	r5, #1
 802155a:	e7bd      	b.n	80214d8 <rcl_validate_topic_name+0xcc>
 802155c:	2500      	movs	r5, #0
 802155e:	e7bb      	b.n	80214d8 <rcl_validate_topic_name+0xcc>
 8021560:	2300      	movs	r3, #0
 8021562:	4618      	mov	r0, r3
 8021564:	6033      	str	r3, [r6, #0]
 8021566:	e77c      	b.n	8021462 <rcl_validate_topic_name+0x56>
 8021568:	2205      	movs	r2, #5
 802156a:	6032      	str	r2, [r6, #0]
 802156c:	2f00      	cmp	r7, #0
 802156e:	d1d6      	bne.n	802151e <rcl_validate_topic_name+0x112>
 8021570:	e7a1      	b.n	80214b6 <rcl_validate_topic_name+0xaa>
 8021572:	2d00      	cmp	r5, #0
 8021574:	bf14      	ite	ne
 8021576:	2308      	movne	r3, #8
 8021578:	2303      	moveq	r3, #3
 802157a:	6033      	str	r3, [r6, #0]
 802157c:	2f00      	cmp	r7, #0
 802157e:	d193      	bne.n	80214a8 <rcl_validate_topic_name+0x9c>
 8021580:	e799      	b.n	80214b6 <rcl_validate_topic_name+0xaa>
 8021582:	2307      	movs	r3, #7
 8021584:	6033      	str	r3, [r6, #0]
 8021586:	2f00      	cmp	r7, #0
 8021588:	d095      	beq.n	80214b6 <rcl_validate_topic_name+0xaa>
 802158a:	2301      	movs	r3, #1
 802158c:	e7c7      	b.n	802151e <rcl_validate_topic_name+0x112>
 802158e:	bf00      	nop
 8021590:	08025b7a 	.word	0x08025b7a

08021594 <rcutils_string_array_fini>:
 8021594:	b328      	cbz	r0, 80215e2 <rcutils_string_array_fini+0x4e>
 8021596:	b570      	push	{r4, r5, r6, lr}
 8021598:	4604      	mov	r4, r0
 802159a:	6840      	ldr	r0, [r0, #4]
 802159c:	b1e0      	cbz	r0, 80215d8 <rcutils_string_array_fini+0x44>
 802159e:	f104 0008 	add.w	r0, r4, #8
 80215a2:	f7f3 ff81 	bl	80154a8 <rcutils_allocator_is_valid>
 80215a6:	b1c0      	cbz	r0, 80215da <rcutils_string_array_fini+0x46>
 80215a8:	6823      	ldr	r3, [r4, #0]
 80215aa:	b1c3      	cbz	r3, 80215de <rcutils_string_array_fini+0x4a>
 80215ac:	2500      	movs	r5, #0
 80215ae:	6860      	ldr	r0, [r4, #4]
 80215b0:	462e      	mov	r6, r5
 80215b2:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80215b6:	68e3      	ldr	r3, [r4, #12]
 80215b8:	69a1      	ldr	r1, [r4, #24]
 80215ba:	4798      	blx	r3
 80215bc:	e9d4 3000 	ldrd	r3, r0, [r4]
 80215c0:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80215c4:	3501      	adds	r5, #1
 80215c6:	429d      	cmp	r5, r3
 80215c8:	d3f3      	bcc.n	80215b2 <rcutils_string_array_fini+0x1e>
 80215ca:	68e3      	ldr	r3, [r4, #12]
 80215cc:	69a1      	ldr	r1, [r4, #24]
 80215ce:	4798      	blx	r3
 80215d0:	2300      	movs	r3, #0
 80215d2:	4618      	mov	r0, r3
 80215d4:	e9c4 3300 	strd	r3, r3, [r4]
 80215d8:	bd70      	pop	{r4, r5, r6, pc}
 80215da:	200b      	movs	r0, #11
 80215dc:	bd70      	pop	{r4, r5, r6, pc}
 80215de:	6860      	ldr	r0, [r4, #4]
 80215e0:	e7f3      	b.n	80215ca <rcutils_string_array_fini+0x36>
 80215e2:	200b      	movs	r0, #11
 80215e4:	4770      	bx	lr
 80215e6:	bf00      	nop

080215e8 <on_status>:
 80215e8:	b082      	sub	sp, #8
 80215ea:	b002      	add	sp, #8
 80215ec:	4770      	bx	lr
 80215ee:	bf00      	nop

080215f0 <on_topic>:
 80215f0:	4a23      	ldr	r2, [pc, #140]	@ (8021680 <on_topic+0x90>)
 80215f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80215f6:	6812      	ldr	r2, [r2, #0]
 80215f8:	b094      	sub	sp, #80	@ 0x50
 80215fa:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80215fc:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8021600:	9113      	str	r1, [sp, #76]	@ 0x4c
 8021602:	9312      	str	r3, [sp, #72]	@ 0x48
 8021604:	b3c2      	cbz	r2, 8021678 <on_topic+0x88>
 8021606:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 802160a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 802160e:	e001      	b.n	8021614 <on_topic+0x24>
 8021610:	6852      	ldr	r2, [r2, #4]
 8021612:	b38a      	cbz	r2, 8021678 <on_topic+0x88>
 8021614:	6894      	ldr	r4, [r2, #8]
 8021616:	8aa3      	ldrh	r3, [r4, #20]
 8021618:	428b      	cmp	r3, r1
 802161a:	d1f9      	bne.n	8021610 <on_topic+0x20>
 802161c:	7da3      	ldrb	r3, [r4, #22]
 802161e:	4283      	cmp	r3, r0
 8021620:	d1f6      	bne.n	8021610 <on_topic+0x20>
 8021622:	2248      	movs	r2, #72	@ 0x48
 8021624:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8021628:	4668      	mov	r0, sp
 802162a:	f000 ff60 	bl	80224ee <memcpy>
 802162e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8021632:	4620      	mov	r0, r4
 8021634:	cb0c      	ldmia	r3, {r2, r3}
 8021636:	f7f4 fbeb 	bl	8015e10 <rmw_uxrce_get_static_input_buffer_for_entity>
 802163a:	4607      	mov	r7, r0
 802163c:	b1e0      	cbz	r0, 8021678 <on_topic+0x88>
 802163e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8021642:	462a      	mov	r2, r5
 8021644:	4630      	mov	r0, r6
 8021646:	f108 0110 	add.w	r1, r8, #16
 802164a:	f7fe fd1f 	bl	802008c <ucdr_deserialize_array_uint8_t>
 802164e:	b930      	cbnz	r0, 802165e <on_topic+0x6e>
 8021650:	4639      	mov	r1, r7
 8021652:	480c      	ldr	r0, [pc, #48]	@ (8021684 <on_topic+0x94>)
 8021654:	b014      	add	sp, #80	@ 0x50
 8021656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802165a:	f7fd b81b 	b.w	801e694 <put_memory>
 802165e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8021662:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 8021666:	f7f4 f9d1 	bl	8015a0c <rmw_uros_epoch_nanos>
 802166a:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 802166e:	2305      	movs	r3, #5
 8021670:	e942 0102 	strd	r0, r1, [r2, #-8]
 8021674:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8021678:	b014      	add	sp, #80	@ 0x50
 802167a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802167e:	bf00      	nop
 8021680:	24069244 	.word	0x24069244
 8021684:	24069234 	.word	0x24069234

08021688 <on_request>:
 8021688:	4824      	ldr	r0, [pc, #144]	@ (802171c <on_request+0x94>)
 802168a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802168e:	6800      	ldr	r0, [r0, #0]
 8021690:	b094      	sub	sp, #80	@ 0x50
 8021692:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8021694:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8021698:	9113      	str	r1, [sp, #76]	@ 0x4c
 802169a:	2800      	cmp	r0, #0
 802169c:	d03b      	beq.n	8021716 <on_request+0x8e>
 802169e:	461d      	mov	r5, r3
 80216a0:	e001      	b.n	80216a6 <on_request+0x1e>
 80216a2:	6840      	ldr	r0, [r0, #4]
 80216a4:	b3b8      	cbz	r0, 8021716 <on_request+0x8e>
 80216a6:	6884      	ldr	r4, [r0, #8]
 80216a8:	8b21      	ldrh	r1, [r4, #24]
 80216aa:	4291      	cmp	r1, r2
 80216ac:	d1f9      	bne.n	80216a2 <on_request+0x1a>
 80216ae:	2248      	movs	r2, #72	@ 0x48
 80216b0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80216b4:	4668      	mov	r0, sp
 80216b6:	f000 ff1a 	bl	80224ee <memcpy>
 80216ba:	f104 0320 	add.w	r3, r4, #32
 80216be:	4620      	mov	r0, r4
 80216c0:	cb0c      	ldmia	r3, {r2, r3}
 80216c2:	f7f4 fba5 	bl	8015e10 <rmw_uxrce_get_static_input_buffer_for_entity>
 80216c6:	4680      	mov	r8, r0
 80216c8:	b328      	cbz	r0, 8021716 <on_request+0x8e>
 80216ca:	4630      	mov	r0, r6
 80216cc:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80216d0:	463a      	mov	r2, r7
 80216d2:	f106 0110 	add.w	r1, r6, #16
 80216d6:	f7fe fcd9 	bl	802008c <ucdr_deserialize_array_uint8_t>
 80216da:	b930      	cbnz	r0, 80216ea <on_request+0x62>
 80216dc:	4641      	mov	r1, r8
 80216de:	4810      	ldr	r0, [pc, #64]	@ (8021720 <on_request+0x98>)
 80216e0:	b014      	add	sp, #80	@ 0x50
 80216e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80216e6:	f7fc bfd5 	b.w	801e694 <put_memory>
 80216ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80216ec:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 80216f0:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 80216f4:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 80216f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80216fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8021700:	e88c 0003 	stmia.w	ip, {r0, r1}
 8021704:	f7f4 f982 	bl	8015a0c <rmw_uros_epoch_nanos>
 8021708:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 802170c:	2303      	movs	r3, #3
 802170e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8021712:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 8021716:	b014      	add	sp, #80	@ 0x50
 8021718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802171c:	24069214 	.word	0x24069214
 8021720:	24069234 	.word	0x24069234

08021724 <on_reply>:
 8021724:	4822      	ldr	r0, [pc, #136]	@ (80217b0 <on_reply+0x8c>)
 8021726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802172a:	6800      	ldr	r0, [r0, #0]
 802172c:	b094      	sub	sp, #80	@ 0x50
 802172e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8021730:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8021734:	9113      	str	r1, [sp, #76]	@ 0x4c
 8021736:	b3b8      	cbz	r0, 80217a8 <on_reply+0x84>
 8021738:	461d      	mov	r5, r3
 802173a:	e001      	b.n	8021740 <on_reply+0x1c>
 802173c:	6840      	ldr	r0, [r0, #4]
 802173e:	b398      	cbz	r0, 80217a8 <on_reply+0x84>
 8021740:	6884      	ldr	r4, [r0, #8]
 8021742:	8b21      	ldrh	r1, [r4, #24]
 8021744:	4291      	cmp	r1, r2
 8021746:	d1f9      	bne.n	802173c <on_reply+0x18>
 8021748:	2248      	movs	r2, #72	@ 0x48
 802174a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 802174e:	4668      	mov	r0, sp
 8021750:	f000 fecd 	bl	80224ee <memcpy>
 8021754:	f104 0320 	add.w	r3, r4, #32
 8021758:	4620      	mov	r0, r4
 802175a:	cb0c      	ldmia	r3, {r2, r3}
 802175c:	f7f4 fb58 	bl	8015e10 <rmw_uxrce_get_static_input_buffer_for_entity>
 8021760:	4680      	mov	r8, r0
 8021762:	b308      	cbz	r0, 80217a8 <on_reply+0x84>
 8021764:	4630      	mov	r0, r6
 8021766:	f8d8 6008 	ldr.w	r6, [r8, #8]
 802176a:	463a      	mov	r2, r7
 802176c:	f106 0110 	add.w	r1, r6, #16
 8021770:	f7fe fc8c 	bl	802008c <ucdr_deserialize_array_uint8_t>
 8021774:	b930      	cbnz	r0, 8021784 <on_reply+0x60>
 8021776:	4641      	mov	r1, r8
 8021778:	480e      	ldr	r0, [pc, #56]	@ (80217b4 <on_reply+0x90>)
 802177a:	b014      	add	sp, #80	@ 0x50
 802177c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021780:	f7fc bf88 	b.w	801e694 <put_memory>
 8021784:	2200      	movs	r2, #0
 8021786:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 802178a:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 802178e:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 8021792:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 8021796:	f7f4 f939 	bl	8015a0c <rmw_uros_epoch_nanos>
 802179a:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 802179e:	2304      	movs	r3, #4
 80217a0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80217a4:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 80217a8:	b014      	add	sp, #80	@ 0x50
 80217aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80217ae:	bf00      	nop
 80217b0:	24064928 	.word	0x24064928
 80217b4:	24069234 	.word	0x24069234

080217b8 <rmw_create_guard_condition>:
 80217b8:	b538      	push	{r3, r4, r5, lr}
 80217ba:	4605      	mov	r5, r0
 80217bc:	4808      	ldr	r0, [pc, #32]	@ (80217e0 <rmw_create_guard_condition+0x28>)
 80217be:	f7fc ff59 	bl	801e674 <get_memory>
 80217c2:	4603      	mov	r3, r0
 80217c4:	b148      	cbz	r0, 80217da <rmw_create_guard_condition+0x22>
 80217c6:	6884      	ldr	r4, [r0, #8]
 80217c8:	2300      	movs	r3, #0
 80217ca:	61e5      	str	r5, [r4, #28]
 80217cc:	7423      	strb	r3, [r4, #16]
 80217ce:	f7fc ffb9 	bl	801e744 <rmw_get_implementation_identifier>
 80217d2:	f104 0314 	add.w	r3, r4, #20
 80217d6:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80217da:	4618      	mov	r0, r3
 80217dc:	bd38      	pop	{r3, r4, r5, pc}
 80217de:	bf00      	nop
 80217e0:	240691d4 	.word	0x240691d4

080217e4 <rmw_destroy_guard_condition>:
 80217e4:	b508      	push	{r3, lr}
 80217e6:	4b08      	ldr	r3, [pc, #32]	@ (8021808 <rmw_destroy_guard_condition+0x24>)
 80217e8:	6819      	ldr	r1, [r3, #0]
 80217ea:	b911      	cbnz	r1, 80217f2 <rmw_destroy_guard_condition+0xe>
 80217ec:	e00a      	b.n	8021804 <rmw_destroy_guard_condition+0x20>
 80217ee:	6849      	ldr	r1, [r1, #4]
 80217f0:	b141      	cbz	r1, 8021804 <rmw_destroy_guard_condition+0x20>
 80217f2:	688b      	ldr	r3, [r1, #8]
 80217f4:	3314      	adds	r3, #20
 80217f6:	4298      	cmp	r0, r3
 80217f8:	d1f9      	bne.n	80217ee <rmw_destroy_guard_condition+0xa>
 80217fa:	4803      	ldr	r0, [pc, #12]	@ (8021808 <rmw_destroy_guard_condition+0x24>)
 80217fc:	f7fc ff4a 	bl	801e694 <put_memory>
 8021800:	2000      	movs	r0, #0
 8021802:	bd08      	pop	{r3, pc}
 8021804:	2001      	movs	r0, #1
 8021806:	bd08      	pop	{r3, pc}
 8021808:	240691d4 	.word	0x240691d4

0802180c <rmw_trigger_guard_condition>:
 802180c:	b160      	cbz	r0, 8021828 <rmw_trigger_guard_condition+0x1c>
 802180e:	b510      	push	{r4, lr}
 8021810:	4604      	mov	r4, r0
 8021812:	6800      	ldr	r0, [r0, #0]
 8021814:	f7f4 fd10 	bl	8016238 <is_uxrce_rmw_identifier_valid>
 8021818:	b908      	cbnz	r0, 802181e <rmw_trigger_guard_condition+0x12>
 802181a:	2001      	movs	r0, #1
 802181c:	bd10      	pop	{r4, pc}
 802181e:	6863      	ldr	r3, [r4, #4]
 8021820:	2201      	movs	r2, #1
 8021822:	2000      	movs	r0, #0
 8021824:	741a      	strb	r2, [r3, #16]
 8021826:	bd10      	pop	{r4, pc}
 8021828:	2001      	movs	r0, #1
 802182a:	4770      	bx	lr

0802182c <rosidl_runtime_c__String__init>:
 802182c:	b510      	push	{r4, lr}
 802182e:	4604      	mov	r4, r0
 8021830:	b086      	sub	sp, #24
 8021832:	b170      	cbz	r0, 8021852 <rosidl_runtime_c__String__init+0x26>
 8021834:	a801      	add	r0, sp, #4
 8021836:	f7f3 fe29 	bl	801548c <rcutils_get_default_allocator>
 802183a:	9b01      	ldr	r3, [sp, #4]
 802183c:	9905      	ldr	r1, [sp, #20]
 802183e:	2001      	movs	r0, #1
 8021840:	4798      	blx	r3
 8021842:	6020      	str	r0, [r4, #0]
 8021844:	b128      	cbz	r0, 8021852 <rosidl_runtime_c__String__init+0x26>
 8021846:	2100      	movs	r1, #0
 8021848:	2201      	movs	r2, #1
 802184a:	7001      	strb	r1, [r0, #0]
 802184c:	4610      	mov	r0, r2
 802184e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8021852:	b006      	add	sp, #24
 8021854:	bd10      	pop	{r4, pc}
 8021856:	bf00      	nop

08021858 <rosidl_runtime_c__String__fini>:
 8021858:	b320      	cbz	r0, 80218a4 <rosidl_runtime_c__String__fini+0x4c>
 802185a:	6803      	ldr	r3, [r0, #0]
 802185c:	b510      	push	{r4, lr}
 802185e:	4604      	mov	r4, r0
 8021860:	b086      	sub	sp, #24
 8021862:	b173      	cbz	r3, 8021882 <rosidl_runtime_c__String__fini+0x2a>
 8021864:	6883      	ldr	r3, [r0, #8]
 8021866:	b1f3      	cbz	r3, 80218a6 <rosidl_runtime_c__String__fini+0x4e>
 8021868:	a801      	add	r0, sp, #4
 802186a:	f7f3 fe0f 	bl	801548c <rcutils_get_default_allocator>
 802186e:	9b02      	ldr	r3, [sp, #8]
 8021870:	9905      	ldr	r1, [sp, #20]
 8021872:	6820      	ldr	r0, [r4, #0]
 8021874:	4798      	blx	r3
 8021876:	2300      	movs	r3, #0
 8021878:	e9c4 3300 	strd	r3, r3, [r4]
 802187c:	60a3      	str	r3, [r4, #8]
 802187e:	b006      	add	sp, #24
 8021880:	bd10      	pop	{r4, pc}
 8021882:	6843      	ldr	r3, [r0, #4]
 8021884:	b9db      	cbnz	r3, 80218be <rosidl_runtime_c__String__fini+0x66>
 8021886:	6883      	ldr	r3, [r0, #8]
 8021888:	2b00      	cmp	r3, #0
 802188a:	d0f8      	beq.n	802187e <rosidl_runtime_c__String__fini+0x26>
 802188c:	4b12      	ldr	r3, [pc, #72]	@ (80218d8 <rosidl_runtime_c__String__fini+0x80>)
 802188e:	2251      	movs	r2, #81	@ 0x51
 8021890:	2101      	movs	r1, #1
 8021892:	4812      	ldr	r0, [pc, #72]	@ (80218dc <rosidl_runtime_c__String__fini+0x84>)
 8021894:	681b      	ldr	r3, [r3, #0]
 8021896:	68db      	ldr	r3, [r3, #12]
 8021898:	f000 fb8e 	bl	8021fb8 <fwrite>
 802189c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80218a0:	f000 f84a 	bl	8021938 <exit>
 80218a4:	4770      	bx	lr
 80218a6:	4b0c      	ldr	r3, [pc, #48]	@ (80218d8 <rosidl_runtime_c__String__fini+0x80>)
 80218a8:	224c      	movs	r2, #76	@ 0x4c
 80218aa:	2101      	movs	r1, #1
 80218ac:	480c      	ldr	r0, [pc, #48]	@ (80218e0 <rosidl_runtime_c__String__fini+0x88>)
 80218ae:	681b      	ldr	r3, [r3, #0]
 80218b0:	68db      	ldr	r3, [r3, #12]
 80218b2:	f000 fb81 	bl	8021fb8 <fwrite>
 80218b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80218ba:	f000 f83d 	bl	8021938 <exit>
 80218be:	4b06      	ldr	r3, [pc, #24]	@ (80218d8 <rosidl_runtime_c__String__fini+0x80>)
 80218c0:	224e      	movs	r2, #78	@ 0x4e
 80218c2:	2101      	movs	r1, #1
 80218c4:	4807      	ldr	r0, [pc, #28]	@ (80218e4 <rosidl_runtime_c__String__fini+0x8c>)
 80218c6:	681b      	ldr	r3, [r3, #0]
 80218c8:	68db      	ldr	r3, [r3, #12]
 80218ca:	f000 fb75 	bl	8021fb8 <fwrite>
 80218ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80218d2:	f000 f831 	bl	8021938 <exit>
 80218d6:	bf00      	nop
 80218d8:	240012bc 	.word	0x240012bc
 80218dc:	08025ab8 	.word	0x08025ab8
 80218e0:	08025a18 	.word	0x08025a18
 80218e4:	08025a68 	.word	0x08025a68

080218e8 <tier4_vehicle_msgs__msg__ActuationCommand__init>:
 80218e8:	3800      	subs	r0, #0
 80218ea:	bf18      	it	ne
 80218ec:	2001      	movne	r0, #1
 80218ee:	4770      	bx	lr

080218f0 <tier4_vehicle_msgs__msg__ActuationCommand__fini>:
 80218f0:	4770      	bx	lr
 80218f2:	bf00      	nop

080218f4 <tier4_vehicle_msgs__msg__ActuationStatus__init>:
 80218f4:	3800      	subs	r0, #0
 80218f6:	bf18      	it	ne
 80218f8:	2001      	movne	r0, #1
 80218fa:	4770      	bx	lr

080218fc <tier4_vehicle_msgs__msg__ActuationStatus__fini>:
 80218fc:	4770      	bx	lr
 80218fe:	bf00      	nop

08021900 <calloc>:
 8021900:	4b02      	ldr	r3, [pc, #8]	@ (802190c <calloc+0xc>)
 8021902:	460a      	mov	r2, r1
 8021904:	4601      	mov	r1, r0
 8021906:	6818      	ldr	r0, [r3, #0]
 8021908:	f000 b802 	b.w	8021910 <_calloc_r>
 802190c:	240012bc 	.word	0x240012bc

08021910 <_calloc_r>:
 8021910:	b570      	push	{r4, r5, r6, lr}
 8021912:	fba1 5402 	umull	r5, r4, r1, r2
 8021916:	b93c      	cbnz	r4, 8021928 <_calloc_r+0x18>
 8021918:	4629      	mov	r1, r5
 802191a:	f000 f899 	bl	8021a50 <_malloc_r>
 802191e:	4606      	mov	r6, r0
 8021920:	b928      	cbnz	r0, 802192e <_calloc_r+0x1e>
 8021922:	2600      	movs	r6, #0
 8021924:	4630      	mov	r0, r6
 8021926:	bd70      	pop	{r4, r5, r6, pc}
 8021928:	220c      	movs	r2, #12
 802192a:	6002      	str	r2, [r0, #0]
 802192c:	e7f9      	b.n	8021922 <_calloc_r+0x12>
 802192e:	462a      	mov	r2, r5
 8021930:	4621      	mov	r1, r4
 8021932:	f000 fcbd 	bl	80222b0 <memset>
 8021936:	e7f5      	b.n	8021924 <_calloc_r+0x14>

08021938 <exit>:
 8021938:	b508      	push	{r3, lr}
 802193a:	4b06      	ldr	r3, [pc, #24]	@ (8021954 <exit+0x1c>)
 802193c:	4604      	mov	r4, r0
 802193e:	b113      	cbz	r3, 8021946 <exit+0xe>
 8021940:	2100      	movs	r1, #0
 8021942:	f3af 8000 	nop.w
 8021946:	4b04      	ldr	r3, [pc, #16]	@ (8021958 <exit+0x20>)
 8021948:	681b      	ldr	r3, [r3, #0]
 802194a:	b103      	cbz	r3, 802194e <exit+0x16>
 802194c:	4798      	blx	r3
 802194e:	4620      	mov	r0, r4
 8021950:	f7e0 febe 	bl	80026d0 <_exit>
 8021954:	00000000 	.word	0x00000000
 8021958:	240696e4 	.word	0x240696e4

0802195c <getenv>:
 802195c:	b507      	push	{r0, r1, r2, lr}
 802195e:	4b04      	ldr	r3, [pc, #16]	@ (8021970 <getenv+0x14>)
 8021960:	4601      	mov	r1, r0
 8021962:	aa01      	add	r2, sp, #4
 8021964:	6818      	ldr	r0, [r3, #0]
 8021966:	f000 f805 	bl	8021974 <_findenv_r>
 802196a:	b003      	add	sp, #12
 802196c:	f85d fb04 	ldr.w	pc, [sp], #4
 8021970:	240012bc 	.word	0x240012bc

08021974 <_findenv_r>:
 8021974:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021978:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80219e8 <_findenv_r+0x74>
 802197c:	4606      	mov	r6, r0
 802197e:	4689      	mov	r9, r1
 8021980:	4617      	mov	r7, r2
 8021982:	f000 fde1 	bl	8022548 <__env_lock>
 8021986:	f8da 4000 	ldr.w	r4, [sl]
 802198a:	b134      	cbz	r4, 802199a <_findenv_r+0x26>
 802198c:	464b      	mov	r3, r9
 802198e:	4698      	mov	r8, r3
 8021990:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021994:	b13a      	cbz	r2, 80219a6 <_findenv_r+0x32>
 8021996:	2a3d      	cmp	r2, #61	@ 0x3d
 8021998:	d1f9      	bne.n	802198e <_findenv_r+0x1a>
 802199a:	4630      	mov	r0, r6
 802199c:	f000 fdda 	bl	8022554 <__env_unlock>
 80219a0:	2000      	movs	r0, #0
 80219a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80219a6:	eba8 0809 	sub.w	r8, r8, r9
 80219aa:	46a3      	mov	fp, r4
 80219ac:	f854 0b04 	ldr.w	r0, [r4], #4
 80219b0:	2800      	cmp	r0, #0
 80219b2:	d0f2      	beq.n	802199a <_findenv_r+0x26>
 80219b4:	4642      	mov	r2, r8
 80219b6:	4649      	mov	r1, r9
 80219b8:	f000 fc8f 	bl	80222da <strncmp>
 80219bc:	2800      	cmp	r0, #0
 80219be:	d1f4      	bne.n	80219aa <_findenv_r+0x36>
 80219c0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80219c4:	eb03 0508 	add.w	r5, r3, r8
 80219c8:	f813 3008 	ldrb.w	r3, [r3, r8]
 80219cc:	2b3d      	cmp	r3, #61	@ 0x3d
 80219ce:	d1ec      	bne.n	80219aa <_findenv_r+0x36>
 80219d0:	f8da 3000 	ldr.w	r3, [sl]
 80219d4:	ebab 0303 	sub.w	r3, fp, r3
 80219d8:	109b      	asrs	r3, r3, #2
 80219da:	4630      	mov	r0, r6
 80219dc:	603b      	str	r3, [r7, #0]
 80219de:	f000 fdb9 	bl	8022554 <__env_unlock>
 80219e2:	1c68      	adds	r0, r5, #1
 80219e4:	e7dd      	b.n	80219a2 <_findenv_r+0x2e>
 80219e6:	bf00      	nop
 80219e8:	24000000 	.word	0x24000000

080219ec <malloc>:
 80219ec:	4b02      	ldr	r3, [pc, #8]	@ (80219f8 <malloc+0xc>)
 80219ee:	4601      	mov	r1, r0
 80219f0:	6818      	ldr	r0, [r3, #0]
 80219f2:	f000 b82d 	b.w	8021a50 <_malloc_r>
 80219f6:	bf00      	nop
 80219f8:	240012bc 	.word	0x240012bc

080219fc <free>:
 80219fc:	4b02      	ldr	r3, [pc, #8]	@ (8021a08 <free+0xc>)
 80219fe:	4601      	mov	r1, r0
 8021a00:	6818      	ldr	r0, [r3, #0]
 8021a02:	f000 bdad 	b.w	8022560 <_free_r>
 8021a06:	bf00      	nop
 8021a08:	240012bc 	.word	0x240012bc

08021a0c <sbrk_aligned>:
 8021a0c:	b570      	push	{r4, r5, r6, lr}
 8021a0e:	4e0f      	ldr	r6, [pc, #60]	@ (8021a4c <sbrk_aligned+0x40>)
 8021a10:	460c      	mov	r4, r1
 8021a12:	6831      	ldr	r1, [r6, #0]
 8021a14:	4605      	mov	r5, r0
 8021a16:	b911      	cbnz	r1, 8021a1e <sbrk_aligned+0x12>
 8021a18:	f000 fd12 	bl	8022440 <_sbrk_r>
 8021a1c:	6030      	str	r0, [r6, #0]
 8021a1e:	4621      	mov	r1, r4
 8021a20:	4628      	mov	r0, r5
 8021a22:	f000 fd0d 	bl	8022440 <_sbrk_r>
 8021a26:	1c43      	adds	r3, r0, #1
 8021a28:	d103      	bne.n	8021a32 <sbrk_aligned+0x26>
 8021a2a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8021a2e:	4620      	mov	r0, r4
 8021a30:	bd70      	pop	{r4, r5, r6, pc}
 8021a32:	1cc4      	adds	r4, r0, #3
 8021a34:	f024 0403 	bic.w	r4, r4, #3
 8021a38:	42a0      	cmp	r0, r4
 8021a3a:	d0f8      	beq.n	8021a2e <sbrk_aligned+0x22>
 8021a3c:	1a21      	subs	r1, r4, r0
 8021a3e:	4628      	mov	r0, r5
 8021a40:	f000 fcfe 	bl	8022440 <_sbrk_r>
 8021a44:	3001      	adds	r0, #1
 8021a46:	d1f2      	bne.n	8021a2e <sbrk_aligned+0x22>
 8021a48:	e7ef      	b.n	8021a2a <sbrk_aligned+0x1e>
 8021a4a:	bf00      	nop
 8021a4c:	240695a4 	.word	0x240695a4

08021a50 <_malloc_r>:
 8021a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021a54:	1ccd      	adds	r5, r1, #3
 8021a56:	f025 0503 	bic.w	r5, r5, #3
 8021a5a:	3508      	adds	r5, #8
 8021a5c:	2d0c      	cmp	r5, #12
 8021a5e:	bf38      	it	cc
 8021a60:	250c      	movcc	r5, #12
 8021a62:	2d00      	cmp	r5, #0
 8021a64:	4606      	mov	r6, r0
 8021a66:	db01      	blt.n	8021a6c <_malloc_r+0x1c>
 8021a68:	42a9      	cmp	r1, r5
 8021a6a:	d904      	bls.n	8021a76 <_malloc_r+0x26>
 8021a6c:	230c      	movs	r3, #12
 8021a6e:	6033      	str	r3, [r6, #0]
 8021a70:	2000      	movs	r0, #0
 8021a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021a76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8021b4c <_malloc_r+0xfc>
 8021a7a:	f000 f869 	bl	8021b50 <__malloc_lock>
 8021a7e:	f8d8 3000 	ldr.w	r3, [r8]
 8021a82:	461c      	mov	r4, r3
 8021a84:	bb44      	cbnz	r4, 8021ad8 <_malloc_r+0x88>
 8021a86:	4629      	mov	r1, r5
 8021a88:	4630      	mov	r0, r6
 8021a8a:	f7ff ffbf 	bl	8021a0c <sbrk_aligned>
 8021a8e:	1c43      	adds	r3, r0, #1
 8021a90:	4604      	mov	r4, r0
 8021a92:	d158      	bne.n	8021b46 <_malloc_r+0xf6>
 8021a94:	f8d8 4000 	ldr.w	r4, [r8]
 8021a98:	4627      	mov	r7, r4
 8021a9a:	2f00      	cmp	r7, #0
 8021a9c:	d143      	bne.n	8021b26 <_malloc_r+0xd6>
 8021a9e:	2c00      	cmp	r4, #0
 8021aa0:	d04b      	beq.n	8021b3a <_malloc_r+0xea>
 8021aa2:	6823      	ldr	r3, [r4, #0]
 8021aa4:	4639      	mov	r1, r7
 8021aa6:	4630      	mov	r0, r6
 8021aa8:	eb04 0903 	add.w	r9, r4, r3
 8021aac:	f000 fcc8 	bl	8022440 <_sbrk_r>
 8021ab0:	4581      	cmp	r9, r0
 8021ab2:	d142      	bne.n	8021b3a <_malloc_r+0xea>
 8021ab4:	6821      	ldr	r1, [r4, #0]
 8021ab6:	1a6d      	subs	r5, r5, r1
 8021ab8:	4629      	mov	r1, r5
 8021aba:	4630      	mov	r0, r6
 8021abc:	f7ff ffa6 	bl	8021a0c <sbrk_aligned>
 8021ac0:	3001      	adds	r0, #1
 8021ac2:	d03a      	beq.n	8021b3a <_malloc_r+0xea>
 8021ac4:	6823      	ldr	r3, [r4, #0]
 8021ac6:	442b      	add	r3, r5
 8021ac8:	6023      	str	r3, [r4, #0]
 8021aca:	f8d8 3000 	ldr.w	r3, [r8]
 8021ace:	685a      	ldr	r2, [r3, #4]
 8021ad0:	bb62      	cbnz	r2, 8021b2c <_malloc_r+0xdc>
 8021ad2:	f8c8 7000 	str.w	r7, [r8]
 8021ad6:	e00f      	b.n	8021af8 <_malloc_r+0xa8>
 8021ad8:	6822      	ldr	r2, [r4, #0]
 8021ada:	1b52      	subs	r2, r2, r5
 8021adc:	d420      	bmi.n	8021b20 <_malloc_r+0xd0>
 8021ade:	2a0b      	cmp	r2, #11
 8021ae0:	d917      	bls.n	8021b12 <_malloc_r+0xc2>
 8021ae2:	1961      	adds	r1, r4, r5
 8021ae4:	42a3      	cmp	r3, r4
 8021ae6:	6025      	str	r5, [r4, #0]
 8021ae8:	bf18      	it	ne
 8021aea:	6059      	strne	r1, [r3, #4]
 8021aec:	6863      	ldr	r3, [r4, #4]
 8021aee:	bf08      	it	eq
 8021af0:	f8c8 1000 	streq.w	r1, [r8]
 8021af4:	5162      	str	r2, [r4, r5]
 8021af6:	604b      	str	r3, [r1, #4]
 8021af8:	4630      	mov	r0, r6
 8021afa:	f000 f82f 	bl	8021b5c <__malloc_unlock>
 8021afe:	f104 000b 	add.w	r0, r4, #11
 8021b02:	1d23      	adds	r3, r4, #4
 8021b04:	f020 0007 	bic.w	r0, r0, #7
 8021b08:	1ac2      	subs	r2, r0, r3
 8021b0a:	bf1c      	itt	ne
 8021b0c:	1a1b      	subne	r3, r3, r0
 8021b0e:	50a3      	strne	r3, [r4, r2]
 8021b10:	e7af      	b.n	8021a72 <_malloc_r+0x22>
 8021b12:	6862      	ldr	r2, [r4, #4]
 8021b14:	42a3      	cmp	r3, r4
 8021b16:	bf0c      	ite	eq
 8021b18:	f8c8 2000 	streq.w	r2, [r8]
 8021b1c:	605a      	strne	r2, [r3, #4]
 8021b1e:	e7eb      	b.n	8021af8 <_malloc_r+0xa8>
 8021b20:	4623      	mov	r3, r4
 8021b22:	6864      	ldr	r4, [r4, #4]
 8021b24:	e7ae      	b.n	8021a84 <_malloc_r+0x34>
 8021b26:	463c      	mov	r4, r7
 8021b28:	687f      	ldr	r7, [r7, #4]
 8021b2a:	e7b6      	b.n	8021a9a <_malloc_r+0x4a>
 8021b2c:	461a      	mov	r2, r3
 8021b2e:	685b      	ldr	r3, [r3, #4]
 8021b30:	42a3      	cmp	r3, r4
 8021b32:	d1fb      	bne.n	8021b2c <_malloc_r+0xdc>
 8021b34:	2300      	movs	r3, #0
 8021b36:	6053      	str	r3, [r2, #4]
 8021b38:	e7de      	b.n	8021af8 <_malloc_r+0xa8>
 8021b3a:	230c      	movs	r3, #12
 8021b3c:	6033      	str	r3, [r6, #0]
 8021b3e:	4630      	mov	r0, r6
 8021b40:	f000 f80c 	bl	8021b5c <__malloc_unlock>
 8021b44:	e794      	b.n	8021a70 <_malloc_r+0x20>
 8021b46:	6005      	str	r5, [r0, #0]
 8021b48:	e7d6      	b.n	8021af8 <_malloc_r+0xa8>
 8021b4a:	bf00      	nop
 8021b4c:	240695a8 	.word	0x240695a8

08021b50 <__malloc_lock>:
 8021b50:	4801      	ldr	r0, [pc, #4]	@ (8021b58 <__malloc_lock+0x8>)
 8021b52:	f000 bcc2 	b.w	80224da <__retarget_lock_acquire_recursive>
 8021b56:	bf00      	nop
 8021b58:	240696ed 	.word	0x240696ed

08021b5c <__malloc_unlock>:
 8021b5c:	4801      	ldr	r0, [pc, #4]	@ (8021b64 <__malloc_unlock+0x8>)
 8021b5e:	f000 bcbd 	b.w	80224dc <__retarget_lock_release_recursive>
 8021b62:	bf00      	nop
 8021b64:	240696ed 	.word	0x240696ed

08021b68 <srand>:
 8021b68:	b538      	push	{r3, r4, r5, lr}
 8021b6a:	4b10      	ldr	r3, [pc, #64]	@ (8021bac <srand+0x44>)
 8021b6c:	681d      	ldr	r5, [r3, #0]
 8021b6e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8021b70:	4604      	mov	r4, r0
 8021b72:	b9b3      	cbnz	r3, 8021ba2 <srand+0x3a>
 8021b74:	2018      	movs	r0, #24
 8021b76:	f7ff ff39 	bl	80219ec <malloc>
 8021b7a:	4602      	mov	r2, r0
 8021b7c:	6328      	str	r0, [r5, #48]	@ 0x30
 8021b7e:	b920      	cbnz	r0, 8021b8a <srand+0x22>
 8021b80:	4b0b      	ldr	r3, [pc, #44]	@ (8021bb0 <srand+0x48>)
 8021b82:	480c      	ldr	r0, [pc, #48]	@ (8021bb4 <srand+0x4c>)
 8021b84:	2146      	movs	r1, #70	@ 0x46
 8021b86:	f000 fcc1 	bl	802250c <__assert_func>
 8021b8a:	490b      	ldr	r1, [pc, #44]	@ (8021bb8 <srand+0x50>)
 8021b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8021bbc <srand+0x54>)
 8021b8e:	e9c0 1300 	strd	r1, r3, [r0]
 8021b92:	4b0b      	ldr	r3, [pc, #44]	@ (8021bc0 <srand+0x58>)
 8021b94:	6083      	str	r3, [r0, #8]
 8021b96:	230b      	movs	r3, #11
 8021b98:	8183      	strh	r3, [r0, #12]
 8021b9a:	2100      	movs	r1, #0
 8021b9c:	2001      	movs	r0, #1
 8021b9e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8021ba2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8021ba4:	2200      	movs	r2, #0
 8021ba6:	611c      	str	r4, [r3, #16]
 8021ba8:	615a      	str	r2, [r3, #20]
 8021baa:	bd38      	pop	{r3, r4, r5, pc}
 8021bac:	240012bc 	.word	0x240012bc
 8021bb0:	08025b0a 	.word	0x08025b0a
 8021bb4:	08025b21 	.word	0x08025b21
 8021bb8:	abcd330e 	.word	0xabcd330e
 8021bbc:	e66d1234 	.word	0xe66d1234
 8021bc0:	0005deec 	.word	0x0005deec

08021bc4 <rand>:
 8021bc4:	4b16      	ldr	r3, [pc, #88]	@ (8021c20 <rand+0x5c>)
 8021bc6:	b510      	push	{r4, lr}
 8021bc8:	681c      	ldr	r4, [r3, #0]
 8021bca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8021bcc:	b9b3      	cbnz	r3, 8021bfc <rand+0x38>
 8021bce:	2018      	movs	r0, #24
 8021bd0:	f7ff ff0c 	bl	80219ec <malloc>
 8021bd4:	4602      	mov	r2, r0
 8021bd6:	6320      	str	r0, [r4, #48]	@ 0x30
 8021bd8:	b920      	cbnz	r0, 8021be4 <rand+0x20>
 8021bda:	4b12      	ldr	r3, [pc, #72]	@ (8021c24 <rand+0x60>)
 8021bdc:	4812      	ldr	r0, [pc, #72]	@ (8021c28 <rand+0x64>)
 8021bde:	2152      	movs	r1, #82	@ 0x52
 8021be0:	f000 fc94 	bl	802250c <__assert_func>
 8021be4:	4911      	ldr	r1, [pc, #68]	@ (8021c2c <rand+0x68>)
 8021be6:	4b12      	ldr	r3, [pc, #72]	@ (8021c30 <rand+0x6c>)
 8021be8:	e9c0 1300 	strd	r1, r3, [r0]
 8021bec:	4b11      	ldr	r3, [pc, #68]	@ (8021c34 <rand+0x70>)
 8021bee:	6083      	str	r3, [r0, #8]
 8021bf0:	230b      	movs	r3, #11
 8021bf2:	8183      	strh	r3, [r0, #12]
 8021bf4:	2100      	movs	r1, #0
 8021bf6:	2001      	movs	r0, #1
 8021bf8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8021bfc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8021bfe:	480e      	ldr	r0, [pc, #56]	@ (8021c38 <rand+0x74>)
 8021c00:	690b      	ldr	r3, [r1, #16]
 8021c02:	694c      	ldr	r4, [r1, #20]
 8021c04:	4a0d      	ldr	r2, [pc, #52]	@ (8021c3c <rand+0x78>)
 8021c06:	4358      	muls	r0, r3
 8021c08:	fb02 0004 	mla	r0, r2, r4, r0
 8021c0c:	fba3 3202 	umull	r3, r2, r3, r2
 8021c10:	3301      	adds	r3, #1
 8021c12:	eb40 0002 	adc.w	r0, r0, r2
 8021c16:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8021c1a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8021c1e:	bd10      	pop	{r4, pc}
 8021c20:	240012bc 	.word	0x240012bc
 8021c24:	08025b0a 	.word	0x08025b0a
 8021c28:	08025b21 	.word	0x08025b21
 8021c2c:	abcd330e 	.word	0xabcd330e
 8021c30:	e66d1234 	.word	0xe66d1234
 8021c34:	0005deec 	.word	0x0005deec
 8021c38:	5851f42d 	.word	0x5851f42d
 8021c3c:	4c957f2d 	.word	0x4c957f2d

08021c40 <realloc>:
 8021c40:	4b02      	ldr	r3, [pc, #8]	@ (8021c4c <realloc+0xc>)
 8021c42:	460a      	mov	r2, r1
 8021c44:	4601      	mov	r1, r0
 8021c46:	6818      	ldr	r0, [r3, #0]
 8021c48:	f000 b802 	b.w	8021c50 <_realloc_r>
 8021c4c:	240012bc 	.word	0x240012bc

08021c50 <_realloc_r>:
 8021c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021c54:	4680      	mov	r8, r0
 8021c56:	4615      	mov	r5, r2
 8021c58:	460c      	mov	r4, r1
 8021c5a:	b921      	cbnz	r1, 8021c66 <_realloc_r+0x16>
 8021c5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021c60:	4611      	mov	r1, r2
 8021c62:	f7ff bef5 	b.w	8021a50 <_malloc_r>
 8021c66:	b92a      	cbnz	r2, 8021c74 <_realloc_r+0x24>
 8021c68:	f000 fc7a 	bl	8022560 <_free_r>
 8021c6c:	2400      	movs	r4, #0
 8021c6e:	4620      	mov	r0, r4
 8021c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021c74:	f000 fcbe 	bl	80225f4 <_malloc_usable_size_r>
 8021c78:	4285      	cmp	r5, r0
 8021c7a:	4606      	mov	r6, r0
 8021c7c:	d802      	bhi.n	8021c84 <_realloc_r+0x34>
 8021c7e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8021c82:	d8f4      	bhi.n	8021c6e <_realloc_r+0x1e>
 8021c84:	4629      	mov	r1, r5
 8021c86:	4640      	mov	r0, r8
 8021c88:	f7ff fee2 	bl	8021a50 <_malloc_r>
 8021c8c:	4607      	mov	r7, r0
 8021c8e:	2800      	cmp	r0, #0
 8021c90:	d0ec      	beq.n	8021c6c <_realloc_r+0x1c>
 8021c92:	42b5      	cmp	r5, r6
 8021c94:	462a      	mov	r2, r5
 8021c96:	4621      	mov	r1, r4
 8021c98:	bf28      	it	cs
 8021c9a:	4632      	movcs	r2, r6
 8021c9c:	f000 fc27 	bl	80224ee <memcpy>
 8021ca0:	4621      	mov	r1, r4
 8021ca2:	4640      	mov	r0, r8
 8021ca4:	f000 fc5c 	bl	8022560 <_free_r>
 8021ca8:	463c      	mov	r4, r7
 8021caa:	e7e0      	b.n	8021c6e <_realloc_r+0x1e>

08021cac <_strtoul_l.constprop.0>:
 8021cac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021cb0:	4e34      	ldr	r6, [pc, #208]	@ (8021d84 <_strtoul_l.constprop.0+0xd8>)
 8021cb2:	4686      	mov	lr, r0
 8021cb4:	460d      	mov	r5, r1
 8021cb6:	4628      	mov	r0, r5
 8021cb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021cbc:	5d37      	ldrb	r7, [r6, r4]
 8021cbe:	f017 0708 	ands.w	r7, r7, #8
 8021cc2:	d1f8      	bne.n	8021cb6 <_strtoul_l.constprop.0+0xa>
 8021cc4:	2c2d      	cmp	r4, #45	@ 0x2d
 8021cc6:	d12f      	bne.n	8021d28 <_strtoul_l.constprop.0+0x7c>
 8021cc8:	782c      	ldrb	r4, [r5, #0]
 8021cca:	2701      	movs	r7, #1
 8021ccc:	1c85      	adds	r5, r0, #2
 8021cce:	f033 0010 	bics.w	r0, r3, #16
 8021cd2:	d109      	bne.n	8021ce8 <_strtoul_l.constprop.0+0x3c>
 8021cd4:	2c30      	cmp	r4, #48	@ 0x30
 8021cd6:	d12c      	bne.n	8021d32 <_strtoul_l.constprop.0+0x86>
 8021cd8:	7828      	ldrb	r0, [r5, #0]
 8021cda:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8021cde:	2858      	cmp	r0, #88	@ 0x58
 8021ce0:	d127      	bne.n	8021d32 <_strtoul_l.constprop.0+0x86>
 8021ce2:	786c      	ldrb	r4, [r5, #1]
 8021ce4:	2310      	movs	r3, #16
 8021ce6:	3502      	adds	r5, #2
 8021ce8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8021cec:	2600      	movs	r6, #0
 8021cee:	fbb8 f8f3 	udiv	r8, r8, r3
 8021cf2:	fb03 f908 	mul.w	r9, r3, r8
 8021cf6:	ea6f 0909 	mvn.w	r9, r9
 8021cfa:	4630      	mov	r0, r6
 8021cfc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8021d00:	f1bc 0f09 	cmp.w	ip, #9
 8021d04:	d81c      	bhi.n	8021d40 <_strtoul_l.constprop.0+0x94>
 8021d06:	4664      	mov	r4, ip
 8021d08:	42a3      	cmp	r3, r4
 8021d0a:	dd2a      	ble.n	8021d62 <_strtoul_l.constprop.0+0xb6>
 8021d0c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8021d10:	d007      	beq.n	8021d22 <_strtoul_l.constprop.0+0x76>
 8021d12:	4580      	cmp	r8, r0
 8021d14:	d322      	bcc.n	8021d5c <_strtoul_l.constprop.0+0xb0>
 8021d16:	d101      	bne.n	8021d1c <_strtoul_l.constprop.0+0x70>
 8021d18:	45a1      	cmp	r9, r4
 8021d1a:	db1f      	blt.n	8021d5c <_strtoul_l.constprop.0+0xb0>
 8021d1c:	fb00 4003 	mla	r0, r0, r3, r4
 8021d20:	2601      	movs	r6, #1
 8021d22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021d26:	e7e9      	b.n	8021cfc <_strtoul_l.constprop.0+0x50>
 8021d28:	2c2b      	cmp	r4, #43	@ 0x2b
 8021d2a:	bf04      	itt	eq
 8021d2c:	782c      	ldrbeq	r4, [r5, #0]
 8021d2e:	1c85      	addeq	r5, r0, #2
 8021d30:	e7cd      	b.n	8021cce <_strtoul_l.constprop.0+0x22>
 8021d32:	2b00      	cmp	r3, #0
 8021d34:	d1d8      	bne.n	8021ce8 <_strtoul_l.constprop.0+0x3c>
 8021d36:	2c30      	cmp	r4, #48	@ 0x30
 8021d38:	bf0c      	ite	eq
 8021d3a:	2308      	moveq	r3, #8
 8021d3c:	230a      	movne	r3, #10
 8021d3e:	e7d3      	b.n	8021ce8 <_strtoul_l.constprop.0+0x3c>
 8021d40:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8021d44:	f1bc 0f19 	cmp.w	ip, #25
 8021d48:	d801      	bhi.n	8021d4e <_strtoul_l.constprop.0+0xa2>
 8021d4a:	3c37      	subs	r4, #55	@ 0x37
 8021d4c:	e7dc      	b.n	8021d08 <_strtoul_l.constprop.0+0x5c>
 8021d4e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8021d52:	f1bc 0f19 	cmp.w	ip, #25
 8021d56:	d804      	bhi.n	8021d62 <_strtoul_l.constprop.0+0xb6>
 8021d58:	3c57      	subs	r4, #87	@ 0x57
 8021d5a:	e7d5      	b.n	8021d08 <_strtoul_l.constprop.0+0x5c>
 8021d5c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8021d60:	e7df      	b.n	8021d22 <_strtoul_l.constprop.0+0x76>
 8021d62:	1c73      	adds	r3, r6, #1
 8021d64:	d106      	bne.n	8021d74 <_strtoul_l.constprop.0+0xc8>
 8021d66:	2322      	movs	r3, #34	@ 0x22
 8021d68:	f8ce 3000 	str.w	r3, [lr]
 8021d6c:	4630      	mov	r0, r6
 8021d6e:	b932      	cbnz	r2, 8021d7e <_strtoul_l.constprop.0+0xd2>
 8021d70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021d74:	b107      	cbz	r7, 8021d78 <_strtoul_l.constprop.0+0xcc>
 8021d76:	4240      	negs	r0, r0
 8021d78:	2a00      	cmp	r2, #0
 8021d7a:	d0f9      	beq.n	8021d70 <_strtoul_l.constprop.0+0xc4>
 8021d7c:	b106      	cbz	r6, 8021d80 <_strtoul_l.constprop.0+0xd4>
 8021d7e:	1e69      	subs	r1, r5, #1
 8021d80:	6011      	str	r1, [r2, #0]
 8021d82:	e7f5      	b.n	8021d70 <_strtoul_l.constprop.0+0xc4>
 8021d84:	08025b7a 	.word	0x08025b7a

08021d88 <strtoul>:
 8021d88:	4613      	mov	r3, r2
 8021d8a:	460a      	mov	r2, r1
 8021d8c:	4601      	mov	r1, r0
 8021d8e:	4802      	ldr	r0, [pc, #8]	@ (8021d98 <strtoul+0x10>)
 8021d90:	6800      	ldr	r0, [r0, #0]
 8021d92:	f7ff bf8b 	b.w	8021cac <_strtoul_l.constprop.0>
 8021d96:	bf00      	nop
 8021d98:	240012bc 	.word	0x240012bc

08021d9c <std>:
 8021d9c:	2300      	movs	r3, #0
 8021d9e:	b510      	push	{r4, lr}
 8021da0:	4604      	mov	r4, r0
 8021da2:	e9c0 3300 	strd	r3, r3, [r0]
 8021da6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021daa:	6083      	str	r3, [r0, #8]
 8021dac:	8181      	strh	r1, [r0, #12]
 8021dae:	6643      	str	r3, [r0, #100]	@ 0x64
 8021db0:	81c2      	strh	r2, [r0, #14]
 8021db2:	6183      	str	r3, [r0, #24]
 8021db4:	4619      	mov	r1, r3
 8021db6:	2208      	movs	r2, #8
 8021db8:	305c      	adds	r0, #92	@ 0x5c
 8021dba:	f000 fa79 	bl	80222b0 <memset>
 8021dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8021df4 <std+0x58>)
 8021dc0:	6263      	str	r3, [r4, #36]	@ 0x24
 8021dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8021df8 <std+0x5c>)
 8021dc4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8021dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8021dfc <std+0x60>)
 8021dc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8021dca:	4b0d      	ldr	r3, [pc, #52]	@ (8021e00 <std+0x64>)
 8021dcc:	6323      	str	r3, [r4, #48]	@ 0x30
 8021dce:	4b0d      	ldr	r3, [pc, #52]	@ (8021e04 <std+0x68>)
 8021dd0:	6224      	str	r4, [r4, #32]
 8021dd2:	429c      	cmp	r4, r3
 8021dd4:	d006      	beq.n	8021de4 <std+0x48>
 8021dd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8021dda:	4294      	cmp	r4, r2
 8021ddc:	d002      	beq.n	8021de4 <std+0x48>
 8021dde:	33d0      	adds	r3, #208	@ 0xd0
 8021de0:	429c      	cmp	r4, r3
 8021de2:	d105      	bne.n	8021df0 <std+0x54>
 8021de4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8021de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021dec:	f000 bb74 	b.w	80224d8 <__retarget_lock_init_recursive>
 8021df0:	bd10      	pop	{r4, pc}
 8021df2:	bf00      	nop
 8021df4:	0802203d 	.word	0x0802203d
 8021df8:	0802205f 	.word	0x0802205f
 8021dfc:	08022097 	.word	0x08022097
 8021e00:	080220bb 	.word	0x080220bb
 8021e04:	240695ac 	.word	0x240695ac

08021e08 <stdio_exit_handler>:
 8021e08:	4a02      	ldr	r2, [pc, #8]	@ (8021e14 <stdio_exit_handler+0xc>)
 8021e0a:	4903      	ldr	r1, [pc, #12]	@ (8021e18 <stdio_exit_handler+0x10>)
 8021e0c:	4803      	ldr	r0, [pc, #12]	@ (8021e1c <stdio_exit_handler+0x14>)
 8021e0e:	f000 b869 	b.w	8021ee4 <_fwalk_sglue>
 8021e12:	bf00      	nop
 8021e14:	240012b0 	.word	0x240012b0
 8021e18:	08022cd9 	.word	0x08022cd9
 8021e1c:	240012c0 	.word	0x240012c0

08021e20 <cleanup_stdio>:
 8021e20:	6841      	ldr	r1, [r0, #4]
 8021e22:	4b0c      	ldr	r3, [pc, #48]	@ (8021e54 <cleanup_stdio+0x34>)
 8021e24:	4299      	cmp	r1, r3
 8021e26:	b510      	push	{r4, lr}
 8021e28:	4604      	mov	r4, r0
 8021e2a:	d001      	beq.n	8021e30 <cleanup_stdio+0x10>
 8021e2c:	f000 ff54 	bl	8022cd8 <_fflush_r>
 8021e30:	68a1      	ldr	r1, [r4, #8]
 8021e32:	4b09      	ldr	r3, [pc, #36]	@ (8021e58 <cleanup_stdio+0x38>)
 8021e34:	4299      	cmp	r1, r3
 8021e36:	d002      	beq.n	8021e3e <cleanup_stdio+0x1e>
 8021e38:	4620      	mov	r0, r4
 8021e3a:	f000 ff4d 	bl	8022cd8 <_fflush_r>
 8021e3e:	68e1      	ldr	r1, [r4, #12]
 8021e40:	4b06      	ldr	r3, [pc, #24]	@ (8021e5c <cleanup_stdio+0x3c>)
 8021e42:	4299      	cmp	r1, r3
 8021e44:	d004      	beq.n	8021e50 <cleanup_stdio+0x30>
 8021e46:	4620      	mov	r0, r4
 8021e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021e4c:	f000 bf44 	b.w	8022cd8 <_fflush_r>
 8021e50:	bd10      	pop	{r4, pc}
 8021e52:	bf00      	nop
 8021e54:	240695ac 	.word	0x240695ac
 8021e58:	24069614 	.word	0x24069614
 8021e5c:	2406967c 	.word	0x2406967c

08021e60 <global_stdio_init.part.0>:
 8021e60:	b510      	push	{r4, lr}
 8021e62:	4b0b      	ldr	r3, [pc, #44]	@ (8021e90 <global_stdio_init.part.0+0x30>)
 8021e64:	4c0b      	ldr	r4, [pc, #44]	@ (8021e94 <global_stdio_init.part.0+0x34>)
 8021e66:	4a0c      	ldr	r2, [pc, #48]	@ (8021e98 <global_stdio_init.part.0+0x38>)
 8021e68:	601a      	str	r2, [r3, #0]
 8021e6a:	4620      	mov	r0, r4
 8021e6c:	2200      	movs	r2, #0
 8021e6e:	2104      	movs	r1, #4
 8021e70:	f7ff ff94 	bl	8021d9c <std>
 8021e74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8021e78:	2201      	movs	r2, #1
 8021e7a:	2109      	movs	r1, #9
 8021e7c:	f7ff ff8e 	bl	8021d9c <std>
 8021e80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8021e84:	2202      	movs	r2, #2
 8021e86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021e8a:	2112      	movs	r1, #18
 8021e8c:	f7ff bf86 	b.w	8021d9c <std>
 8021e90:	240696e4 	.word	0x240696e4
 8021e94:	240695ac 	.word	0x240695ac
 8021e98:	08021e09 	.word	0x08021e09

08021e9c <__sfp_lock_acquire>:
 8021e9c:	4801      	ldr	r0, [pc, #4]	@ (8021ea4 <__sfp_lock_acquire+0x8>)
 8021e9e:	f000 bb1c 	b.w	80224da <__retarget_lock_acquire_recursive>
 8021ea2:	bf00      	nop
 8021ea4:	240696ee 	.word	0x240696ee

08021ea8 <__sfp_lock_release>:
 8021ea8:	4801      	ldr	r0, [pc, #4]	@ (8021eb0 <__sfp_lock_release+0x8>)
 8021eaa:	f000 bb17 	b.w	80224dc <__retarget_lock_release_recursive>
 8021eae:	bf00      	nop
 8021eb0:	240696ee 	.word	0x240696ee

08021eb4 <__sinit>:
 8021eb4:	b510      	push	{r4, lr}
 8021eb6:	4604      	mov	r4, r0
 8021eb8:	f7ff fff0 	bl	8021e9c <__sfp_lock_acquire>
 8021ebc:	6a23      	ldr	r3, [r4, #32]
 8021ebe:	b11b      	cbz	r3, 8021ec8 <__sinit+0x14>
 8021ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021ec4:	f7ff bff0 	b.w	8021ea8 <__sfp_lock_release>
 8021ec8:	4b04      	ldr	r3, [pc, #16]	@ (8021edc <__sinit+0x28>)
 8021eca:	6223      	str	r3, [r4, #32]
 8021ecc:	4b04      	ldr	r3, [pc, #16]	@ (8021ee0 <__sinit+0x2c>)
 8021ece:	681b      	ldr	r3, [r3, #0]
 8021ed0:	2b00      	cmp	r3, #0
 8021ed2:	d1f5      	bne.n	8021ec0 <__sinit+0xc>
 8021ed4:	f7ff ffc4 	bl	8021e60 <global_stdio_init.part.0>
 8021ed8:	e7f2      	b.n	8021ec0 <__sinit+0xc>
 8021eda:	bf00      	nop
 8021edc:	08021e21 	.word	0x08021e21
 8021ee0:	240696e4 	.word	0x240696e4

08021ee4 <_fwalk_sglue>:
 8021ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021ee8:	4607      	mov	r7, r0
 8021eea:	4688      	mov	r8, r1
 8021eec:	4614      	mov	r4, r2
 8021eee:	2600      	movs	r6, #0
 8021ef0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021ef4:	f1b9 0901 	subs.w	r9, r9, #1
 8021ef8:	d505      	bpl.n	8021f06 <_fwalk_sglue+0x22>
 8021efa:	6824      	ldr	r4, [r4, #0]
 8021efc:	2c00      	cmp	r4, #0
 8021efe:	d1f7      	bne.n	8021ef0 <_fwalk_sglue+0xc>
 8021f00:	4630      	mov	r0, r6
 8021f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021f06:	89ab      	ldrh	r3, [r5, #12]
 8021f08:	2b01      	cmp	r3, #1
 8021f0a:	d907      	bls.n	8021f1c <_fwalk_sglue+0x38>
 8021f0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021f10:	3301      	adds	r3, #1
 8021f12:	d003      	beq.n	8021f1c <_fwalk_sglue+0x38>
 8021f14:	4629      	mov	r1, r5
 8021f16:	4638      	mov	r0, r7
 8021f18:	47c0      	blx	r8
 8021f1a:	4306      	orrs	r6, r0
 8021f1c:	3568      	adds	r5, #104	@ 0x68
 8021f1e:	e7e9      	b.n	8021ef4 <_fwalk_sglue+0x10>

08021f20 <_fwrite_r>:
 8021f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021f24:	9c08      	ldr	r4, [sp, #32]
 8021f26:	468a      	mov	sl, r1
 8021f28:	4690      	mov	r8, r2
 8021f2a:	fb02 f903 	mul.w	r9, r2, r3
 8021f2e:	4606      	mov	r6, r0
 8021f30:	b118      	cbz	r0, 8021f3a <_fwrite_r+0x1a>
 8021f32:	6a03      	ldr	r3, [r0, #32]
 8021f34:	b90b      	cbnz	r3, 8021f3a <_fwrite_r+0x1a>
 8021f36:	f7ff ffbd 	bl	8021eb4 <__sinit>
 8021f3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021f3c:	07dd      	lsls	r5, r3, #31
 8021f3e:	d405      	bmi.n	8021f4c <_fwrite_r+0x2c>
 8021f40:	89a3      	ldrh	r3, [r4, #12]
 8021f42:	0598      	lsls	r0, r3, #22
 8021f44:	d402      	bmi.n	8021f4c <_fwrite_r+0x2c>
 8021f46:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021f48:	f000 fac7 	bl	80224da <__retarget_lock_acquire_recursive>
 8021f4c:	89a3      	ldrh	r3, [r4, #12]
 8021f4e:	0719      	lsls	r1, r3, #28
 8021f50:	d516      	bpl.n	8021f80 <_fwrite_r+0x60>
 8021f52:	6923      	ldr	r3, [r4, #16]
 8021f54:	b1a3      	cbz	r3, 8021f80 <_fwrite_r+0x60>
 8021f56:	2500      	movs	r5, #0
 8021f58:	454d      	cmp	r5, r9
 8021f5a:	d01f      	beq.n	8021f9c <_fwrite_r+0x7c>
 8021f5c:	68a7      	ldr	r7, [r4, #8]
 8021f5e:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8021f62:	3f01      	subs	r7, #1
 8021f64:	2f00      	cmp	r7, #0
 8021f66:	60a7      	str	r7, [r4, #8]
 8021f68:	da04      	bge.n	8021f74 <_fwrite_r+0x54>
 8021f6a:	69a3      	ldr	r3, [r4, #24]
 8021f6c:	429f      	cmp	r7, r3
 8021f6e:	db0f      	blt.n	8021f90 <_fwrite_r+0x70>
 8021f70:	290a      	cmp	r1, #10
 8021f72:	d00d      	beq.n	8021f90 <_fwrite_r+0x70>
 8021f74:	6823      	ldr	r3, [r4, #0]
 8021f76:	1c5a      	adds	r2, r3, #1
 8021f78:	6022      	str	r2, [r4, #0]
 8021f7a:	7019      	strb	r1, [r3, #0]
 8021f7c:	3501      	adds	r5, #1
 8021f7e:	e7eb      	b.n	8021f58 <_fwrite_r+0x38>
 8021f80:	4621      	mov	r1, r4
 8021f82:	4630      	mov	r0, r6
 8021f84:	f000 f914 	bl	80221b0 <__swsetup_r>
 8021f88:	2800      	cmp	r0, #0
 8021f8a:	d0e4      	beq.n	8021f56 <_fwrite_r+0x36>
 8021f8c:	2500      	movs	r5, #0
 8021f8e:	e005      	b.n	8021f9c <_fwrite_r+0x7c>
 8021f90:	4622      	mov	r2, r4
 8021f92:	4630      	mov	r0, r6
 8021f94:	f000 f8ce 	bl	8022134 <__swbuf_r>
 8021f98:	3001      	adds	r0, #1
 8021f9a:	d1ef      	bne.n	8021f7c <_fwrite_r+0x5c>
 8021f9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021f9e:	07da      	lsls	r2, r3, #31
 8021fa0:	d405      	bmi.n	8021fae <_fwrite_r+0x8e>
 8021fa2:	89a3      	ldrh	r3, [r4, #12]
 8021fa4:	059b      	lsls	r3, r3, #22
 8021fa6:	d402      	bmi.n	8021fae <_fwrite_r+0x8e>
 8021fa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021faa:	f000 fa97 	bl	80224dc <__retarget_lock_release_recursive>
 8021fae:	fbb5 f0f8 	udiv	r0, r5, r8
 8021fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08021fb8 <fwrite>:
 8021fb8:	b507      	push	{r0, r1, r2, lr}
 8021fba:	9300      	str	r3, [sp, #0]
 8021fbc:	4613      	mov	r3, r2
 8021fbe:	460a      	mov	r2, r1
 8021fc0:	4601      	mov	r1, r0
 8021fc2:	4803      	ldr	r0, [pc, #12]	@ (8021fd0 <fwrite+0x18>)
 8021fc4:	6800      	ldr	r0, [r0, #0]
 8021fc6:	f7ff ffab 	bl	8021f20 <_fwrite_r>
 8021fca:	b003      	add	sp, #12
 8021fcc:	f85d fb04 	ldr.w	pc, [sp], #4
 8021fd0:	240012bc 	.word	0x240012bc

08021fd4 <sniprintf>:
 8021fd4:	b40c      	push	{r2, r3}
 8021fd6:	b530      	push	{r4, r5, lr}
 8021fd8:	4b17      	ldr	r3, [pc, #92]	@ (8022038 <sniprintf+0x64>)
 8021fda:	1e0c      	subs	r4, r1, #0
 8021fdc:	681d      	ldr	r5, [r3, #0]
 8021fde:	b09d      	sub	sp, #116	@ 0x74
 8021fe0:	da08      	bge.n	8021ff4 <sniprintf+0x20>
 8021fe2:	238b      	movs	r3, #139	@ 0x8b
 8021fe4:	602b      	str	r3, [r5, #0]
 8021fe6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021fea:	b01d      	add	sp, #116	@ 0x74
 8021fec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021ff0:	b002      	add	sp, #8
 8021ff2:	4770      	bx	lr
 8021ff4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8021ff8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8021ffc:	bf14      	ite	ne
 8021ffe:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8022002:	4623      	moveq	r3, r4
 8022004:	9304      	str	r3, [sp, #16]
 8022006:	9307      	str	r3, [sp, #28]
 8022008:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802200c:	9002      	str	r0, [sp, #8]
 802200e:	9006      	str	r0, [sp, #24]
 8022010:	f8ad 3016 	strh.w	r3, [sp, #22]
 8022014:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8022016:	ab21      	add	r3, sp, #132	@ 0x84
 8022018:	a902      	add	r1, sp, #8
 802201a:	4628      	mov	r0, r5
 802201c:	9301      	str	r3, [sp, #4]
 802201e:	f000 fb4d 	bl	80226bc <_svfiprintf_r>
 8022022:	1c43      	adds	r3, r0, #1
 8022024:	bfbc      	itt	lt
 8022026:	238b      	movlt	r3, #139	@ 0x8b
 8022028:	602b      	strlt	r3, [r5, #0]
 802202a:	2c00      	cmp	r4, #0
 802202c:	d0dd      	beq.n	8021fea <sniprintf+0x16>
 802202e:	9b02      	ldr	r3, [sp, #8]
 8022030:	2200      	movs	r2, #0
 8022032:	701a      	strb	r2, [r3, #0]
 8022034:	e7d9      	b.n	8021fea <sniprintf+0x16>
 8022036:	bf00      	nop
 8022038:	240012bc 	.word	0x240012bc

0802203c <__sread>:
 802203c:	b510      	push	{r4, lr}
 802203e:	460c      	mov	r4, r1
 8022040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022044:	f000 f9ea 	bl	802241c <_read_r>
 8022048:	2800      	cmp	r0, #0
 802204a:	bfab      	itete	ge
 802204c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802204e:	89a3      	ldrhlt	r3, [r4, #12]
 8022050:	181b      	addge	r3, r3, r0
 8022052:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8022056:	bfac      	ite	ge
 8022058:	6563      	strge	r3, [r4, #84]	@ 0x54
 802205a:	81a3      	strhlt	r3, [r4, #12]
 802205c:	bd10      	pop	{r4, pc}

0802205e <__swrite>:
 802205e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022062:	461f      	mov	r7, r3
 8022064:	898b      	ldrh	r3, [r1, #12]
 8022066:	05db      	lsls	r3, r3, #23
 8022068:	4605      	mov	r5, r0
 802206a:	460c      	mov	r4, r1
 802206c:	4616      	mov	r6, r2
 802206e:	d505      	bpl.n	802207c <__swrite+0x1e>
 8022070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022074:	2302      	movs	r3, #2
 8022076:	2200      	movs	r2, #0
 8022078:	f000 f9be 	bl	80223f8 <_lseek_r>
 802207c:	89a3      	ldrh	r3, [r4, #12]
 802207e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022082:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8022086:	81a3      	strh	r3, [r4, #12]
 8022088:	4632      	mov	r2, r6
 802208a:	463b      	mov	r3, r7
 802208c:	4628      	mov	r0, r5
 802208e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022092:	f000 b9e5 	b.w	8022460 <_write_r>

08022096 <__sseek>:
 8022096:	b510      	push	{r4, lr}
 8022098:	460c      	mov	r4, r1
 802209a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802209e:	f000 f9ab 	bl	80223f8 <_lseek_r>
 80220a2:	1c43      	adds	r3, r0, #1
 80220a4:	89a3      	ldrh	r3, [r4, #12]
 80220a6:	bf15      	itete	ne
 80220a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80220aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80220ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80220b2:	81a3      	strheq	r3, [r4, #12]
 80220b4:	bf18      	it	ne
 80220b6:	81a3      	strhne	r3, [r4, #12]
 80220b8:	bd10      	pop	{r4, pc}

080220ba <__sclose>:
 80220ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80220be:	f000 b935 	b.w	802232c <_close_r>

080220c2 <_vsniprintf_r>:
 80220c2:	b530      	push	{r4, r5, lr}
 80220c4:	4614      	mov	r4, r2
 80220c6:	2c00      	cmp	r4, #0
 80220c8:	b09b      	sub	sp, #108	@ 0x6c
 80220ca:	4605      	mov	r5, r0
 80220cc:	461a      	mov	r2, r3
 80220ce:	da05      	bge.n	80220dc <_vsniprintf_r+0x1a>
 80220d0:	238b      	movs	r3, #139	@ 0x8b
 80220d2:	6003      	str	r3, [r0, #0]
 80220d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80220d8:	b01b      	add	sp, #108	@ 0x6c
 80220da:	bd30      	pop	{r4, r5, pc}
 80220dc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80220e0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80220e4:	bf14      	ite	ne
 80220e6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80220ea:	4623      	moveq	r3, r4
 80220ec:	9302      	str	r3, [sp, #8]
 80220ee:	9305      	str	r3, [sp, #20]
 80220f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80220f4:	9100      	str	r1, [sp, #0]
 80220f6:	9104      	str	r1, [sp, #16]
 80220f8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80220fc:	4669      	mov	r1, sp
 80220fe:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022100:	f000 fadc 	bl	80226bc <_svfiprintf_r>
 8022104:	1c43      	adds	r3, r0, #1
 8022106:	bfbc      	itt	lt
 8022108:	238b      	movlt	r3, #139	@ 0x8b
 802210a:	602b      	strlt	r3, [r5, #0]
 802210c:	2c00      	cmp	r4, #0
 802210e:	d0e3      	beq.n	80220d8 <_vsniprintf_r+0x16>
 8022110:	9b00      	ldr	r3, [sp, #0]
 8022112:	2200      	movs	r2, #0
 8022114:	701a      	strb	r2, [r3, #0]
 8022116:	e7df      	b.n	80220d8 <_vsniprintf_r+0x16>

08022118 <vsniprintf>:
 8022118:	b507      	push	{r0, r1, r2, lr}
 802211a:	9300      	str	r3, [sp, #0]
 802211c:	4613      	mov	r3, r2
 802211e:	460a      	mov	r2, r1
 8022120:	4601      	mov	r1, r0
 8022122:	4803      	ldr	r0, [pc, #12]	@ (8022130 <vsniprintf+0x18>)
 8022124:	6800      	ldr	r0, [r0, #0]
 8022126:	f7ff ffcc 	bl	80220c2 <_vsniprintf_r>
 802212a:	b003      	add	sp, #12
 802212c:	f85d fb04 	ldr.w	pc, [sp], #4
 8022130:	240012bc 	.word	0x240012bc

08022134 <__swbuf_r>:
 8022134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022136:	460e      	mov	r6, r1
 8022138:	4614      	mov	r4, r2
 802213a:	4605      	mov	r5, r0
 802213c:	b118      	cbz	r0, 8022146 <__swbuf_r+0x12>
 802213e:	6a03      	ldr	r3, [r0, #32]
 8022140:	b90b      	cbnz	r3, 8022146 <__swbuf_r+0x12>
 8022142:	f7ff feb7 	bl	8021eb4 <__sinit>
 8022146:	69a3      	ldr	r3, [r4, #24]
 8022148:	60a3      	str	r3, [r4, #8]
 802214a:	89a3      	ldrh	r3, [r4, #12]
 802214c:	071a      	lsls	r2, r3, #28
 802214e:	d501      	bpl.n	8022154 <__swbuf_r+0x20>
 8022150:	6923      	ldr	r3, [r4, #16]
 8022152:	b943      	cbnz	r3, 8022166 <__swbuf_r+0x32>
 8022154:	4621      	mov	r1, r4
 8022156:	4628      	mov	r0, r5
 8022158:	f000 f82a 	bl	80221b0 <__swsetup_r>
 802215c:	b118      	cbz	r0, 8022166 <__swbuf_r+0x32>
 802215e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8022162:	4638      	mov	r0, r7
 8022164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022166:	6823      	ldr	r3, [r4, #0]
 8022168:	6922      	ldr	r2, [r4, #16]
 802216a:	1a98      	subs	r0, r3, r2
 802216c:	6963      	ldr	r3, [r4, #20]
 802216e:	b2f6      	uxtb	r6, r6
 8022170:	4283      	cmp	r3, r0
 8022172:	4637      	mov	r7, r6
 8022174:	dc05      	bgt.n	8022182 <__swbuf_r+0x4e>
 8022176:	4621      	mov	r1, r4
 8022178:	4628      	mov	r0, r5
 802217a:	f000 fdad 	bl	8022cd8 <_fflush_r>
 802217e:	2800      	cmp	r0, #0
 8022180:	d1ed      	bne.n	802215e <__swbuf_r+0x2a>
 8022182:	68a3      	ldr	r3, [r4, #8]
 8022184:	3b01      	subs	r3, #1
 8022186:	60a3      	str	r3, [r4, #8]
 8022188:	6823      	ldr	r3, [r4, #0]
 802218a:	1c5a      	adds	r2, r3, #1
 802218c:	6022      	str	r2, [r4, #0]
 802218e:	701e      	strb	r6, [r3, #0]
 8022190:	6962      	ldr	r2, [r4, #20]
 8022192:	1c43      	adds	r3, r0, #1
 8022194:	429a      	cmp	r2, r3
 8022196:	d004      	beq.n	80221a2 <__swbuf_r+0x6e>
 8022198:	89a3      	ldrh	r3, [r4, #12]
 802219a:	07db      	lsls	r3, r3, #31
 802219c:	d5e1      	bpl.n	8022162 <__swbuf_r+0x2e>
 802219e:	2e0a      	cmp	r6, #10
 80221a0:	d1df      	bne.n	8022162 <__swbuf_r+0x2e>
 80221a2:	4621      	mov	r1, r4
 80221a4:	4628      	mov	r0, r5
 80221a6:	f000 fd97 	bl	8022cd8 <_fflush_r>
 80221aa:	2800      	cmp	r0, #0
 80221ac:	d0d9      	beq.n	8022162 <__swbuf_r+0x2e>
 80221ae:	e7d6      	b.n	802215e <__swbuf_r+0x2a>

080221b0 <__swsetup_r>:
 80221b0:	b538      	push	{r3, r4, r5, lr}
 80221b2:	4b29      	ldr	r3, [pc, #164]	@ (8022258 <__swsetup_r+0xa8>)
 80221b4:	4605      	mov	r5, r0
 80221b6:	6818      	ldr	r0, [r3, #0]
 80221b8:	460c      	mov	r4, r1
 80221ba:	b118      	cbz	r0, 80221c4 <__swsetup_r+0x14>
 80221bc:	6a03      	ldr	r3, [r0, #32]
 80221be:	b90b      	cbnz	r3, 80221c4 <__swsetup_r+0x14>
 80221c0:	f7ff fe78 	bl	8021eb4 <__sinit>
 80221c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80221c8:	0719      	lsls	r1, r3, #28
 80221ca:	d422      	bmi.n	8022212 <__swsetup_r+0x62>
 80221cc:	06da      	lsls	r2, r3, #27
 80221ce:	d407      	bmi.n	80221e0 <__swsetup_r+0x30>
 80221d0:	2209      	movs	r2, #9
 80221d2:	602a      	str	r2, [r5, #0]
 80221d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80221d8:	81a3      	strh	r3, [r4, #12]
 80221da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80221de:	e033      	b.n	8022248 <__swsetup_r+0x98>
 80221e0:	0758      	lsls	r0, r3, #29
 80221e2:	d512      	bpl.n	802220a <__swsetup_r+0x5a>
 80221e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80221e6:	b141      	cbz	r1, 80221fa <__swsetup_r+0x4a>
 80221e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80221ec:	4299      	cmp	r1, r3
 80221ee:	d002      	beq.n	80221f6 <__swsetup_r+0x46>
 80221f0:	4628      	mov	r0, r5
 80221f2:	f000 f9b5 	bl	8022560 <_free_r>
 80221f6:	2300      	movs	r3, #0
 80221f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80221fa:	89a3      	ldrh	r3, [r4, #12]
 80221fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8022200:	81a3      	strh	r3, [r4, #12]
 8022202:	2300      	movs	r3, #0
 8022204:	6063      	str	r3, [r4, #4]
 8022206:	6923      	ldr	r3, [r4, #16]
 8022208:	6023      	str	r3, [r4, #0]
 802220a:	89a3      	ldrh	r3, [r4, #12]
 802220c:	f043 0308 	orr.w	r3, r3, #8
 8022210:	81a3      	strh	r3, [r4, #12]
 8022212:	6923      	ldr	r3, [r4, #16]
 8022214:	b94b      	cbnz	r3, 802222a <__swsetup_r+0x7a>
 8022216:	89a3      	ldrh	r3, [r4, #12]
 8022218:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802221c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8022220:	d003      	beq.n	802222a <__swsetup_r+0x7a>
 8022222:	4621      	mov	r1, r4
 8022224:	4628      	mov	r0, r5
 8022226:	f000 fdb7 	bl	8022d98 <__smakebuf_r>
 802222a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802222e:	f013 0201 	ands.w	r2, r3, #1
 8022232:	d00a      	beq.n	802224a <__swsetup_r+0x9a>
 8022234:	2200      	movs	r2, #0
 8022236:	60a2      	str	r2, [r4, #8]
 8022238:	6962      	ldr	r2, [r4, #20]
 802223a:	4252      	negs	r2, r2
 802223c:	61a2      	str	r2, [r4, #24]
 802223e:	6922      	ldr	r2, [r4, #16]
 8022240:	b942      	cbnz	r2, 8022254 <__swsetup_r+0xa4>
 8022242:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8022246:	d1c5      	bne.n	80221d4 <__swsetup_r+0x24>
 8022248:	bd38      	pop	{r3, r4, r5, pc}
 802224a:	0799      	lsls	r1, r3, #30
 802224c:	bf58      	it	pl
 802224e:	6962      	ldrpl	r2, [r4, #20]
 8022250:	60a2      	str	r2, [r4, #8]
 8022252:	e7f4      	b.n	802223e <__swsetup_r+0x8e>
 8022254:	2000      	movs	r0, #0
 8022256:	e7f7      	b.n	8022248 <__swsetup_r+0x98>
 8022258:	240012bc 	.word	0x240012bc

0802225c <memcmp>:
 802225c:	b510      	push	{r4, lr}
 802225e:	3901      	subs	r1, #1
 8022260:	4402      	add	r2, r0
 8022262:	4290      	cmp	r0, r2
 8022264:	d101      	bne.n	802226a <memcmp+0xe>
 8022266:	2000      	movs	r0, #0
 8022268:	e005      	b.n	8022276 <memcmp+0x1a>
 802226a:	7803      	ldrb	r3, [r0, #0]
 802226c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022270:	42a3      	cmp	r3, r4
 8022272:	d001      	beq.n	8022278 <memcmp+0x1c>
 8022274:	1b18      	subs	r0, r3, r4
 8022276:	bd10      	pop	{r4, pc}
 8022278:	3001      	adds	r0, #1
 802227a:	e7f2      	b.n	8022262 <memcmp+0x6>

0802227c <memmove>:
 802227c:	4288      	cmp	r0, r1
 802227e:	b510      	push	{r4, lr}
 8022280:	eb01 0402 	add.w	r4, r1, r2
 8022284:	d902      	bls.n	802228c <memmove+0x10>
 8022286:	4284      	cmp	r4, r0
 8022288:	4623      	mov	r3, r4
 802228a:	d807      	bhi.n	802229c <memmove+0x20>
 802228c:	1e43      	subs	r3, r0, #1
 802228e:	42a1      	cmp	r1, r4
 8022290:	d008      	beq.n	80222a4 <memmove+0x28>
 8022292:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022296:	f803 2f01 	strb.w	r2, [r3, #1]!
 802229a:	e7f8      	b.n	802228e <memmove+0x12>
 802229c:	4402      	add	r2, r0
 802229e:	4601      	mov	r1, r0
 80222a0:	428a      	cmp	r2, r1
 80222a2:	d100      	bne.n	80222a6 <memmove+0x2a>
 80222a4:	bd10      	pop	{r4, pc}
 80222a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80222aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80222ae:	e7f7      	b.n	80222a0 <memmove+0x24>

080222b0 <memset>:
 80222b0:	4402      	add	r2, r0
 80222b2:	4603      	mov	r3, r0
 80222b4:	4293      	cmp	r3, r2
 80222b6:	d100      	bne.n	80222ba <memset+0xa>
 80222b8:	4770      	bx	lr
 80222ba:	f803 1b01 	strb.w	r1, [r3], #1
 80222be:	e7f9      	b.n	80222b4 <memset+0x4>

080222c0 <strchr>:
 80222c0:	b2c9      	uxtb	r1, r1
 80222c2:	4603      	mov	r3, r0
 80222c4:	4618      	mov	r0, r3
 80222c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80222ca:	b112      	cbz	r2, 80222d2 <strchr+0x12>
 80222cc:	428a      	cmp	r2, r1
 80222ce:	d1f9      	bne.n	80222c4 <strchr+0x4>
 80222d0:	4770      	bx	lr
 80222d2:	2900      	cmp	r1, #0
 80222d4:	bf18      	it	ne
 80222d6:	2000      	movne	r0, #0
 80222d8:	4770      	bx	lr

080222da <strncmp>:
 80222da:	b510      	push	{r4, lr}
 80222dc:	b16a      	cbz	r2, 80222fa <strncmp+0x20>
 80222de:	3901      	subs	r1, #1
 80222e0:	1884      	adds	r4, r0, r2
 80222e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80222e6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80222ea:	429a      	cmp	r2, r3
 80222ec:	d103      	bne.n	80222f6 <strncmp+0x1c>
 80222ee:	42a0      	cmp	r0, r4
 80222f0:	d001      	beq.n	80222f6 <strncmp+0x1c>
 80222f2:	2a00      	cmp	r2, #0
 80222f4:	d1f5      	bne.n	80222e2 <strncmp+0x8>
 80222f6:	1ad0      	subs	r0, r2, r3
 80222f8:	bd10      	pop	{r4, pc}
 80222fa:	4610      	mov	r0, r2
 80222fc:	e7fc      	b.n	80222f8 <strncmp+0x1e>

080222fe <strstr>:
 80222fe:	780a      	ldrb	r2, [r1, #0]
 8022300:	b570      	push	{r4, r5, r6, lr}
 8022302:	b96a      	cbnz	r2, 8022320 <strstr+0x22>
 8022304:	bd70      	pop	{r4, r5, r6, pc}
 8022306:	429a      	cmp	r2, r3
 8022308:	d109      	bne.n	802231e <strstr+0x20>
 802230a:	460c      	mov	r4, r1
 802230c:	4605      	mov	r5, r0
 802230e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8022312:	2b00      	cmp	r3, #0
 8022314:	d0f6      	beq.n	8022304 <strstr+0x6>
 8022316:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802231a:	429e      	cmp	r6, r3
 802231c:	d0f7      	beq.n	802230e <strstr+0x10>
 802231e:	3001      	adds	r0, #1
 8022320:	7803      	ldrb	r3, [r0, #0]
 8022322:	2b00      	cmp	r3, #0
 8022324:	d1ef      	bne.n	8022306 <strstr+0x8>
 8022326:	4618      	mov	r0, r3
 8022328:	e7ec      	b.n	8022304 <strstr+0x6>
	...

0802232c <_close_r>:
 802232c:	b538      	push	{r3, r4, r5, lr}
 802232e:	4d06      	ldr	r5, [pc, #24]	@ (8022348 <_close_r+0x1c>)
 8022330:	2300      	movs	r3, #0
 8022332:	4604      	mov	r4, r0
 8022334:	4608      	mov	r0, r1
 8022336:	602b      	str	r3, [r5, #0]
 8022338:	f7e0 fa0e 	bl	8002758 <_close>
 802233c:	1c43      	adds	r3, r0, #1
 802233e:	d102      	bne.n	8022346 <_close_r+0x1a>
 8022340:	682b      	ldr	r3, [r5, #0]
 8022342:	b103      	cbz	r3, 8022346 <_close_r+0x1a>
 8022344:	6023      	str	r3, [r4, #0]
 8022346:	bd38      	pop	{r3, r4, r5, pc}
 8022348:	240696e8 	.word	0x240696e8

0802234c <_reclaim_reent>:
 802234c:	4b29      	ldr	r3, [pc, #164]	@ (80223f4 <_reclaim_reent+0xa8>)
 802234e:	681b      	ldr	r3, [r3, #0]
 8022350:	4283      	cmp	r3, r0
 8022352:	b570      	push	{r4, r5, r6, lr}
 8022354:	4604      	mov	r4, r0
 8022356:	d04b      	beq.n	80223f0 <_reclaim_reent+0xa4>
 8022358:	69c3      	ldr	r3, [r0, #28]
 802235a:	b1ab      	cbz	r3, 8022388 <_reclaim_reent+0x3c>
 802235c:	68db      	ldr	r3, [r3, #12]
 802235e:	b16b      	cbz	r3, 802237c <_reclaim_reent+0x30>
 8022360:	2500      	movs	r5, #0
 8022362:	69e3      	ldr	r3, [r4, #28]
 8022364:	68db      	ldr	r3, [r3, #12]
 8022366:	5959      	ldr	r1, [r3, r5]
 8022368:	2900      	cmp	r1, #0
 802236a:	d13b      	bne.n	80223e4 <_reclaim_reent+0x98>
 802236c:	3504      	adds	r5, #4
 802236e:	2d80      	cmp	r5, #128	@ 0x80
 8022370:	d1f7      	bne.n	8022362 <_reclaim_reent+0x16>
 8022372:	69e3      	ldr	r3, [r4, #28]
 8022374:	4620      	mov	r0, r4
 8022376:	68d9      	ldr	r1, [r3, #12]
 8022378:	f000 f8f2 	bl	8022560 <_free_r>
 802237c:	69e3      	ldr	r3, [r4, #28]
 802237e:	6819      	ldr	r1, [r3, #0]
 8022380:	b111      	cbz	r1, 8022388 <_reclaim_reent+0x3c>
 8022382:	4620      	mov	r0, r4
 8022384:	f000 f8ec 	bl	8022560 <_free_r>
 8022388:	6961      	ldr	r1, [r4, #20]
 802238a:	b111      	cbz	r1, 8022392 <_reclaim_reent+0x46>
 802238c:	4620      	mov	r0, r4
 802238e:	f000 f8e7 	bl	8022560 <_free_r>
 8022392:	69e1      	ldr	r1, [r4, #28]
 8022394:	b111      	cbz	r1, 802239c <_reclaim_reent+0x50>
 8022396:	4620      	mov	r0, r4
 8022398:	f000 f8e2 	bl	8022560 <_free_r>
 802239c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802239e:	b111      	cbz	r1, 80223a6 <_reclaim_reent+0x5a>
 80223a0:	4620      	mov	r0, r4
 80223a2:	f000 f8dd 	bl	8022560 <_free_r>
 80223a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80223a8:	b111      	cbz	r1, 80223b0 <_reclaim_reent+0x64>
 80223aa:	4620      	mov	r0, r4
 80223ac:	f000 f8d8 	bl	8022560 <_free_r>
 80223b0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80223b2:	b111      	cbz	r1, 80223ba <_reclaim_reent+0x6e>
 80223b4:	4620      	mov	r0, r4
 80223b6:	f000 f8d3 	bl	8022560 <_free_r>
 80223ba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80223bc:	b111      	cbz	r1, 80223c4 <_reclaim_reent+0x78>
 80223be:	4620      	mov	r0, r4
 80223c0:	f000 f8ce 	bl	8022560 <_free_r>
 80223c4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80223c6:	b111      	cbz	r1, 80223ce <_reclaim_reent+0x82>
 80223c8:	4620      	mov	r0, r4
 80223ca:	f000 f8c9 	bl	8022560 <_free_r>
 80223ce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80223d0:	b111      	cbz	r1, 80223d8 <_reclaim_reent+0x8c>
 80223d2:	4620      	mov	r0, r4
 80223d4:	f000 f8c4 	bl	8022560 <_free_r>
 80223d8:	6a23      	ldr	r3, [r4, #32]
 80223da:	b14b      	cbz	r3, 80223f0 <_reclaim_reent+0xa4>
 80223dc:	4620      	mov	r0, r4
 80223de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80223e2:	4718      	bx	r3
 80223e4:	680e      	ldr	r6, [r1, #0]
 80223e6:	4620      	mov	r0, r4
 80223e8:	f000 f8ba 	bl	8022560 <_free_r>
 80223ec:	4631      	mov	r1, r6
 80223ee:	e7bb      	b.n	8022368 <_reclaim_reent+0x1c>
 80223f0:	bd70      	pop	{r4, r5, r6, pc}
 80223f2:	bf00      	nop
 80223f4:	240012bc 	.word	0x240012bc

080223f8 <_lseek_r>:
 80223f8:	b538      	push	{r3, r4, r5, lr}
 80223fa:	4d07      	ldr	r5, [pc, #28]	@ (8022418 <_lseek_r+0x20>)
 80223fc:	4604      	mov	r4, r0
 80223fe:	4608      	mov	r0, r1
 8022400:	4611      	mov	r1, r2
 8022402:	2200      	movs	r2, #0
 8022404:	602a      	str	r2, [r5, #0]
 8022406:	461a      	mov	r2, r3
 8022408:	f7e0 f9cd 	bl	80027a6 <_lseek>
 802240c:	1c43      	adds	r3, r0, #1
 802240e:	d102      	bne.n	8022416 <_lseek_r+0x1e>
 8022410:	682b      	ldr	r3, [r5, #0]
 8022412:	b103      	cbz	r3, 8022416 <_lseek_r+0x1e>
 8022414:	6023      	str	r3, [r4, #0]
 8022416:	bd38      	pop	{r3, r4, r5, pc}
 8022418:	240696e8 	.word	0x240696e8

0802241c <_read_r>:
 802241c:	b538      	push	{r3, r4, r5, lr}
 802241e:	4d07      	ldr	r5, [pc, #28]	@ (802243c <_read_r+0x20>)
 8022420:	4604      	mov	r4, r0
 8022422:	4608      	mov	r0, r1
 8022424:	4611      	mov	r1, r2
 8022426:	2200      	movs	r2, #0
 8022428:	602a      	str	r2, [r5, #0]
 802242a:	461a      	mov	r2, r3
 802242c:	f7e0 f95b 	bl	80026e6 <_read>
 8022430:	1c43      	adds	r3, r0, #1
 8022432:	d102      	bne.n	802243a <_read_r+0x1e>
 8022434:	682b      	ldr	r3, [r5, #0]
 8022436:	b103      	cbz	r3, 802243a <_read_r+0x1e>
 8022438:	6023      	str	r3, [r4, #0]
 802243a:	bd38      	pop	{r3, r4, r5, pc}
 802243c:	240696e8 	.word	0x240696e8

08022440 <_sbrk_r>:
 8022440:	b538      	push	{r3, r4, r5, lr}
 8022442:	4d06      	ldr	r5, [pc, #24]	@ (802245c <_sbrk_r+0x1c>)
 8022444:	2300      	movs	r3, #0
 8022446:	4604      	mov	r4, r0
 8022448:	4608      	mov	r0, r1
 802244a:	602b      	str	r3, [r5, #0]
 802244c:	f7e0 f9b8 	bl	80027c0 <_sbrk>
 8022450:	1c43      	adds	r3, r0, #1
 8022452:	d102      	bne.n	802245a <_sbrk_r+0x1a>
 8022454:	682b      	ldr	r3, [r5, #0]
 8022456:	b103      	cbz	r3, 802245a <_sbrk_r+0x1a>
 8022458:	6023      	str	r3, [r4, #0]
 802245a:	bd38      	pop	{r3, r4, r5, pc}
 802245c:	240696e8 	.word	0x240696e8

08022460 <_write_r>:
 8022460:	b538      	push	{r3, r4, r5, lr}
 8022462:	4d07      	ldr	r5, [pc, #28]	@ (8022480 <_write_r+0x20>)
 8022464:	4604      	mov	r4, r0
 8022466:	4608      	mov	r0, r1
 8022468:	4611      	mov	r1, r2
 802246a:	2200      	movs	r2, #0
 802246c:	602a      	str	r2, [r5, #0]
 802246e:	461a      	mov	r2, r3
 8022470:	f7e0 f956 	bl	8002720 <_write>
 8022474:	1c43      	adds	r3, r0, #1
 8022476:	d102      	bne.n	802247e <_write_r+0x1e>
 8022478:	682b      	ldr	r3, [r5, #0]
 802247a:	b103      	cbz	r3, 802247e <_write_r+0x1e>
 802247c:	6023      	str	r3, [r4, #0]
 802247e:	bd38      	pop	{r3, r4, r5, pc}
 8022480:	240696e8 	.word	0x240696e8

08022484 <__errno>:
 8022484:	4b01      	ldr	r3, [pc, #4]	@ (802248c <__errno+0x8>)
 8022486:	6818      	ldr	r0, [r3, #0]
 8022488:	4770      	bx	lr
 802248a:	bf00      	nop
 802248c:	240012bc 	.word	0x240012bc

08022490 <__libc_init_array>:
 8022490:	b570      	push	{r4, r5, r6, lr}
 8022492:	4d0d      	ldr	r5, [pc, #52]	@ (80224c8 <__libc_init_array+0x38>)
 8022494:	4c0d      	ldr	r4, [pc, #52]	@ (80224cc <__libc_init_array+0x3c>)
 8022496:	1b64      	subs	r4, r4, r5
 8022498:	10a4      	asrs	r4, r4, #2
 802249a:	2600      	movs	r6, #0
 802249c:	42a6      	cmp	r6, r4
 802249e:	d109      	bne.n	80224b4 <__libc_init_array+0x24>
 80224a0:	4d0b      	ldr	r5, [pc, #44]	@ (80224d0 <__libc_init_array+0x40>)
 80224a2:	4c0c      	ldr	r4, [pc, #48]	@ (80224d4 <__libc_init_array+0x44>)
 80224a4:	f000 fe62 	bl	802316c <_init>
 80224a8:	1b64      	subs	r4, r4, r5
 80224aa:	10a4      	asrs	r4, r4, #2
 80224ac:	2600      	movs	r6, #0
 80224ae:	42a6      	cmp	r6, r4
 80224b0:	d105      	bne.n	80224be <__libc_init_array+0x2e>
 80224b2:	bd70      	pop	{r4, r5, r6, pc}
 80224b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80224b8:	4798      	blx	r3
 80224ba:	3601      	adds	r6, #1
 80224bc:	e7ee      	b.n	802249c <__libc_init_array+0xc>
 80224be:	f855 3b04 	ldr.w	r3, [r5], #4
 80224c2:	4798      	blx	r3
 80224c4:	3601      	adds	r6, #1
 80224c6:	e7f2      	b.n	80224ae <__libc_init_array+0x1e>
 80224c8:	08025cf4 	.word	0x08025cf4
 80224cc:	08025cf4 	.word	0x08025cf4
 80224d0:	08025cf4 	.word	0x08025cf4
 80224d4:	08025d38 	.word	0x08025d38

080224d8 <__retarget_lock_init_recursive>:
 80224d8:	4770      	bx	lr

080224da <__retarget_lock_acquire_recursive>:
 80224da:	4770      	bx	lr

080224dc <__retarget_lock_release_recursive>:
 80224dc:	4770      	bx	lr

080224de <strcpy>:
 80224de:	4603      	mov	r3, r0
 80224e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80224e4:	f803 2b01 	strb.w	r2, [r3], #1
 80224e8:	2a00      	cmp	r2, #0
 80224ea:	d1f9      	bne.n	80224e0 <strcpy+0x2>
 80224ec:	4770      	bx	lr

080224ee <memcpy>:
 80224ee:	440a      	add	r2, r1
 80224f0:	4291      	cmp	r1, r2
 80224f2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80224f6:	d100      	bne.n	80224fa <memcpy+0xc>
 80224f8:	4770      	bx	lr
 80224fa:	b510      	push	{r4, lr}
 80224fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022500:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022504:	4291      	cmp	r1, r2
 8022506:	d1f9      	bne.n	80224fc <memcpy+0xe>
 8022508:	bd10      	pop	{r4, pc}
	...

0802250c <__assert_func>:
 802250c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802250e:	4614      	mov	r4, r2
 8022510:	461a      	mov	r2, r3
 8022512:	4b09      	ldr	r3, [pc, #36]	@ (8022538 <__assert_func+0x2c>)
 8022514:	681b      	ldr	r3, [r3, #0]
 8022516:	4605      	mov	r5, r0
 8022518:	68d8      	ldr	r0, [r3, #12]
 802251a:	b954      	cbnz	r4, 8022532 <__assert_func+0x26>
 802251c:	4b07      	ldr	r3, [pc, #28]	@ (802253c <__assert_func+0x30>)
 802251e:	461c      	mov	r4, r3
 8022520:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022524:	9100      	str	r1, [sp, #0]
 8022526:	462b      	mov	r3, r5
 8022528:	4905      	ldr	r1, [pc, #20]	@ (8022540 <__assert_func+0x34>)
 802252a:	f000 fbfd 	bl	8022d28 <fiprintf>
 802252e:	f000 fc91 	bl	8022e54 <abort>
 8022532:	4b04      	ldr	r3, [pc, #16]	@ (8022544 <__assert_func+0x38>)
 8022534:	e7f4      	b.n	8022520 <__assert_func+0x14>
 8022536:	bf00      	nop
 8022538:	240012bc 	.word	0x240012bc
 802253c:	08025cb5 	.word	0x08025cb5
 8022540:	08025c87 	.word	0x08025c87
 8022544:	08025c7a 	.word	0x08025c7a

08022548 <__env_lock>:
 8022548:	4801      	ldr	r0, [pc, #4]	@ (8022550 <__env_lock+0x8>)
 802254a:	f7ff bfc6 	b.w	80224da <__retarget_lock_acquire_recursive>
 802254e:	bf00      	nop
 8022550:	240696ec 	.word	0x240696ec

08022554 <__env_unlock>:
 8022554:	4801      	ldr	r0, [pc, #4]	@ (802255c <__env_unlock+0x8>)
 8022556:	f7ff bfc1 	b.w	80224dc <__retarget_lock_release_recursive>
 802255a:	bf00      	nop
 802255c:	240696ec 	.word	0x240696ec

08022560 <_free_r>:
 8022560:	b538      	push	{r3, r4, r5, lr}
 8022562:	4605      	mov	r5, r0
 8022564:	2900      	cmp	r1, #0
 8022566:	d041      	beq.n	80225ec <_free_r+0x8c>
 8022568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802256c:	1f0c      	subs	r4, r1, #4
 802256e:	2b00      	cmp	r3, #0
 8022570:	bfb8      	it	lt
 8022572:	18e4      	addlt	r4, r4, r3
 8022574:	f7ff faec 	bl	8021b50 <__malloc_lock>
 8022578:	4a1d      	ldr	r2, [pc, #116]	@ (80225f0 <_free_r+0x90>)
 802257a:	6813      	ldr	r3, [r2, #0]
 802257c:	b933      	cbnz	r3, 802258c <_free_r+0x2c>
 802257e:	6063      	str	r3, [r4, #4]
 8022580:	6014      	str	r4, [r2, #0]
 8022582:	4628      	mov	r0, r5
 8022584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022588:	f7ff bae8 	b.w	8021b5c <__malloc_unlock>
 802258c:	42a3      	cmp	r3, r4
 802258e:	d908      	bls.n	80225a2 <_free_r+0x42>
 8022590:	6820      	ldr	r0, [r4, #0]
 8022592:	1821      	adds	r1, r4, r0
 8022594:	428b      	cmp	r3, r1
 8022596:	bf01      	itttt	eq
 8022598:	6819      	ldreq	r1, [r3, #0]
 802259a:	685b      	ldreq	r3, [r3, #4]
 802259c:	1809      	addeq	r1, r1, r0
 802259e:	6021      	streq	r1, [r4, #0]
 80225a0:	e7ed      	b.n	802257e <_free_r+0x1e>
 80225a2:	461a      	mov	r2, r3
 80225a4:	685b      	ldr	r3, [r3, #4]
 80225a6:	b10b      	cbz	r3, 80225ac <_free_r+0x4c>
 80225a8:	42a3      	cmp	r3, r4
 80225aa:	d9fa      	bls.n	80225a2 <_free_r+0x42>
 80225ac:	6811      	ldr	r1, [r2, #0]
 80225ae:	1850      	adds	r0, r2, r1
 80225b0:	42a0      	cmp	r0, r4
 80225b2:	d10b      	bne.n	80225cc <_free_r+0x6c>
 80225b4:	6820      	ldr	r0, [r4, #0]
 80225b6:	4401      	add	r1, r0
 80225b8:	1850      	adds	r0, r2, r1
 80225ba:	4283      	cmp	r3, r0
 80225bc:	6011      	str	r1, [r2, #0]
 80225be:	d1e0      	bne.n	8022582 <_free_r+0x22>
 80225c0:	6818      	ldr	r0, [r3, #0]
 80225c2:	685b      	ldr	r3, [r3, #4]
 80225c4:	6053      	str	r3, [r2, #4]
 80225c6:	4408      	add	r0, r1
 80225c8:	6010      	str	r0, [r2, #0]
 80225ca:	e7da      	b.n	8022582 <_free_r+0x22>
 80225cc:	d902      	bls.n	80225d4 <_free_r+0x74>
 80225ce:	230c      	movs	r3, #12
 80225d0:	602b      	str	r3, [r5, #0]
 80225d2:	e7d6      	b.n	8022582 <_free_r+0x22>
 80225d4:	6820      	ldr	r0, [r4, #0]
 80225d6:	1821      	adds	r1, r4, r0
 80225d8:	428b      	cmp	r3, r1
 80225da:	bf04      	itt	eq
 80225dc:	6819      	ldreq	r1, [r3, #0]
 80225de:	685b      	ldreq	r3, [r3, #4]
 80225e0:	6063      	str	r3, [r4, #4]
 80225e2:	bf04      	itt	eq
 80225e4:	1809      	addeq	r1, r1, r0
 80225e6:	6021      	streq	r1, [r4, #0]
 80225e8:	6054      	str	r4, [r2, #4]
 80225ea:	e7ca      	b.n	8022582 <_free_r+0x22>
 80225ec:	bd38      	pop	{r3, r4, r5, pc}
 80225ee:	bf00      	nop
 80225f0:	240695a8 	.word	0x240695a8

080225f4 <_malloc_usable_size_r>:
 80225f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80225f8:	1f18      	subs	r0, r3, #4
 80225fa:	2b00      	cmp	r3, #0
 80225fc:	bfbc      	itt	lt
 80225fe:	580b      	ldrlt	r3, [r1, r0]
 8022600:	18c0      	addlt	r0, r0, r3
 8022602:	4770      	bx	lr

08022604 <__ssputs_r>:
 8022604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022608:	688e      	ldr	r6, [r1, #8]
 802260a:	461f      	mov	r7, r3
 802260c:	42be      	cmp	r6, r7
 802260e:	680b      	ldr	r3, [r1, #0]
 8022610:	4682      	mov	sl, r0
 8022612:	460c      	mov	r4, r1
 8022614:	4690      	mov	r8, r2
 8022616:	d82d      	bhi.n	8022674 <__ssputs_r+0x70>
 8022618:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802261c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8022620:	d026      	beq.n	8022670 <__ssputs_r+0x6c>
 8022622:	6965      	ldr	r5, [r4, #20]
 8022624:	6909      	ldr	r1, [r1, #16]
 8022626:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802262a:	eba3 0901 	sub.w	r9, r3, r1
 802262e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022632:	1c7b      	adds	r3, r7, #1
 8022634:	444b      	add	r3, r9
 8022636:	106d      	asrs	r5, r5, #1
 8022638:	429d      	cmp	r5, r3
 802263a:	bf38      	it	cc
 802263c:	461d      	movcc	r5, r3
 802263e:	0553      	lsls	r3, r2, #21
 8022640:	d527      	bpl.n	8022692 <__ssputs_r+0x8e>
 8022642:	4629      	mov	r1, r5
 8022644:	f7ff fa04 	bl	8021a50 <_malloc_r>
 8022648:	4606      	mov	r6, r0
 802264a:	b360      	cbz	r0, 80226a6 <__ssputs_r+0xa2>
 802264c:	6921      	ldr	r1, [r4, #16]
 802264e:	464a      	mov	r2, r9
 8022650:	f7ff ff4d 	bl	80224ee <memcpy>
 8022654:	89a3      	ldrh	r3, [r4, #12]
 8022656:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802265a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802265e:	81a3      	strh	r3, [r4, #12]
 8022660:	6126      	str	r6, [r4, #16]
 8022662:	6165      	str	r5, [r4, #20]
 8022664:	444e      	add	r6, r9
 8022666:	eba5 0509 	sub.w	r5, r5, r9
 802266a:	6026      	str	r6, [r4, #0]
 802266c:	60a5      	str	r5, [r4, #8]
 802266e:	463e      	mov	r6, r7
 8022670:	42be      	cmp	r6, r7
 8022672:	d900      	bls.n	8022676 <__ssputs_r+0x72>
 8022674:	463e      	mov	r6, r7
 8022676:	6820      	ldr	r0, [r4, #0]
 8022678:	4632      	mov	r2, r6
 802267a:	4641      	mov	r1, r8
 802267c:	f7ff fdfe 	bl	802227c <memmove>
 8022680:	68a3      	ldr	r3, [r4, #8]
 8022682:	1b9b      	subs	r3, r3, r6
 8022684:	60a3      	str	r3, [r4, #8]
 8022686:	6823      	ldr	r3, [r4, #0]
 8022688:	4433      	add	r3, r6
 802268a:	6023      	str	r3, [r4, #0]
 802268c:	2000      	movs	r0, #0
 802268e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022692:	462a      	mov	r2, r5
 8022694:	f7ff fadc 	bl	8021c50 <_realloc_r>
 8022698:	4606      	mov	r6, r0
 802269a:	2800      	cmp	r0, #0
 802269c:	d1e0      	bne.n	8022660 <__ssputs_r+0x5c>
 802269e:	6921      	ldr	r1, [r4, #16]
 80226a0:	4650      	mov	r0, sl
 80226a2:	f7ff ff5d 	bl	8022560 <_free_r>
 80226a6:	230c      	movs	r3, #12
 80226a8:	f8ca 3000 	str.w	r3, [sl]
 80226ac:	89a3      	ldrh	r3, [r4, #12]
 80226ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80226b2:	81a3      	strh	r3, [r4, #12]
 80226b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80226b8:	e7e9      	b.n	802268e <__ssputs_r+0x8a>
	...

080226bc <_svfiprintf_r>:
 80226bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226c0:	4698      	mov	r8, r3
 80226c2:	898b      	ldrh	r3, [r1, #12]
 80226c4:	061b      	lsls	r3, r3, #24
 80226c6:	b09d      	sub	sp, #116	@ 0x74
 80226c8:	4607      	mov	r7, r0
 80226ca:	460d      	mov	r5, r1
 80226cc:	4614      	mov	r4, r2
 80226ce:	d510      	bpl.n	80226f2 <_svfiprintf_r+0x36>
 80226d0:	690b      	ldr	r3, [r1, #16]
 80226d2:	b973      	cbnz	r3, 80226f2 <_svfiprintf_r+0x36>
 80226d4:	2140      	movs	r1, #64	@ 0x40
 80226d6:	f7ff f9bb 	bl	8021a50 <_malloc_r>
 80226da:	6028      	str	r0, [r5, #0]
 80226dc:	6128      	str	r0, [r5, #16]
 80226de:	b930      	cbnz	r0, 80226ee <_svfiprintf_r+0x32>
 80226e0:	230c      	movs	r3, #12
 80226e2:	603b      	str	r3, [r7, #0]
 80226e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80226e8:	b01d      	add	sp, #116	@ 0x74
 80226ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226ee:	2340      	movs	r3, #64	@ 0x40
 80226f0:	616b      	str	r3, [r5, #20]
 80226f2:	2300      	movs	r3, #0
 80226f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80226f6:	2320      	movs	r3, #32
 80226f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80226fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8022700:	2330      	movs	r3, #48	@ 0x30
 8022702:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80228a0 <_svfiprintf_r+0x1e4>
 8022706:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802270a:	f04f 0901 	mov.w	r9, #1
 802270e:	4623      	mov	r3, r4
 8022710:	469a      	mov	sl, r3
 8022712:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022716:	b10a      	cbz	r2, 802271c <_svfiprintf_r+0x60>
 8022718:	2a25      	cmp	r2, #37	@ 0x25
 802271a:	d1f9      	bne.n	8022710 <_svfiprintf_r+0x54>
 802271c:	ebba 0b04 	subs.w	fp, sl, r4
 8022720:	d00b      	beq.n	802273a <_svfiprintf_r+0x7e>
 8022722:	465b      	mov	r3, fp
 8022724:	4622      	mov	r2, r4
 8022726:	4629      	mov	r1, r5
 8022728:	4638      	mov	r0, r7
 802272a:	f7ff ff6b 	bl	8022604 <__ssputs_r>
 802272e:	3001      	adds	r0, #1
 8022730:	f000 80a7 	beq.w	8022882 <_svfiprintf_r+0x1c6>
 8022734:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022736:	445a      	add	r2, fp
 8022738:	9209      	str	r2, [sp, #36]	@ 0x24
 802273a:	f89a 3000 	ldrb.w	r3, [sl]
 802273e:	2b00      	cmp	r3, #0
 8022740:	f000 809f 	beq.w	8022882 <_svfiprintf_r+0x1c6>
 8022744:	2300      	movs	r3, #0
 8022746:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802274a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802274e:	f10a 0a01 	add.w	sl, sl, #1
 8022752:	9304      	str	r3, [sp, #16]
 8022754:	9307      	str	r3, [sp, #28]
 8022756:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802275a:	931a      	str	r3, [sp, #104]	@ 0x68
 802275c:	4654      	mov	r4, sl
 802275e:	2205      	movs	r2, #5
 8022760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022764:	484e      	ldr	r0, [pc, #312]	@ (80228a0 <_svfiprintf_r+0x1e4>)
 8022766:	f7dd fdd3 	bl	8000310 <memchr>
 802276a:	9a04      	ldr	r2, [sp, #16]
 802276c:	b9d8      	cbnz	r0, 80227a6 <_svfiprintf_r+0xea>
 802276e:	06d0      	lsls	r0, r2, #27
 8022770:	bf44      	itt	mi
 8022772:	2320      	movmi	r3, #32
 8022774:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022778:	0711      	lsls	r1, r2, #28
 802277a:	bf44      	itt	mi
 802277c:	232b      	movmi	r3, #43	@ 0x2b
 802277e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022782:	f89a 3000 	ldrb.w	r3, [sl]
 8022786:	2b2a      	cmp	r3, #42	@ 0x2a
 8022788:	d015      	beq.n	80227b6 <_svfiprintf_r+0xfa>
 802278a:	9a07      	ldr	r2, [sp, #28]
 802278c:	4654      	mov	r4, sl
 802278e:	2000      	movs	r0, #0
 8022790:	f04f 0c0a 	mov.w	ip, #10
 8022794:	4621      	mov	r1, r4
 8022796:	f811 3b01 	ldrb.w	r3, [r1], #1
 802279a:	3b30      	subs	r3, #48	@ 0x30
 802279c:	2b09      	cmp	r3, #9
 802279e:	d94b      	bls.n	8022838 <_svfiprintf_r+0x17c>
 80227a0:	b1b0      	cbz	r0, 80227d0 <_svfiprintf_r+0x114>
 80227a2:	9207      	str	r2, [sp, #28]
 80227a4:	e014      	b.n	80227d0 <_svfiprintf_r+0x114>
 80227a6:	eba0 0308 	sub.w	r3, r0, r8
 80227aa:	fa09 f303 	lsl.w	r3, r9, r3
 80227ae:	4313      	orrs	r3, r2
 80227b0:	9304      	str	r3, [sp, #16]
 80227b2:	46a2      	mov	sl, r4
 80227b4:	e7d2      	b.n	802275c <_svfiprintf_r+0xa0>
 80227b6:	9b03      	ldr	r3, [sp, #12]
 80227b8:	1d19      	adds	r1, r3, #4
 80227ba:	681b      	ldr	r3, [r3, #0]
 80227bc:	9103      	str	r1, [sp, #12]
 80227be:	2b00      	cmp	r3, #0
 80227c0:	bfbb      	ittet	lt
 80227c2:	425b      	neglt	r3, r3
 80227c4:	f042 0202 	orrlt.w	r2, r2, #2
 80227c8:	9307      	strge	r3, [sp, #28]
 80227ca:	9307      	strlt	r3, [sp, #28]
 80227cc:	bfb8      	it	lt
 80227ce:	9204      	strlt	r2, [sp, #16]
 80227d0:	7823      	ldrb	r3, [r4, #0]
 80227d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80227d4:	d10a      	bne.n	80227ec <_svfiprintf_r+0x130>
 80227d6:	7863      	ldrb	r3, [r4, #1]
 80227d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80227da:	d132      	bne.n	8022842 <_svfiprintf_r+0x186>
 80227dc:	9b03      	ldr	r3, [sp, #12]
 80227de:	1d1a      	adds	r2, r3, #4
 80227e0:	681b      	ldr	r3, [r3, #0]
 80227e2:	9203      	str	r2, [sp, #12]
 80227e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80227e8:	3402      	adds	r4, #2
 80227ea:	9305      	str	r3, [sp, #20]
 80227ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80228b0 <_svfiprintf_r+0x1f4>
 80227f0:	7821      	ldrb	r1, [r4, #0]
 80227f2:	2203      	movs	r2, #3
 80227f4:	4650      	mov	r0, sl
 80227f6:	f7dd fd8b 	bl	8000310 <memchr>
 80227fa:	b138      	cbz	r0, 802280c <_svfiprintf_r+0x150>
 80227fc:	9b04      	ldr	r3, [sp, #16]
 80227fe:	eba0 000a 	sub.w	r0, r0, sl
 8022802:	2240      	movs	r2, #64	@ 0x40
 8022804:	4082      	lsls	r2, r0
 8022806:	4313      	orrs	r3, r2
 8022808:	3401      	adds	r4, #1
 802280a:	9304      	str	r3, [sp, #16]
 802280c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022810:	4824      	ldr	r0, [pc, #144]	@ (80228a4 <_svfiprintf_r+0x1e8>)
 8022812:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8022816:	2206      	movs	r2, #6
 8022818:	f7dd fd7a 	bl	8000310 <memchr>
 802281c:	2800      	cmp	r0, #0
 802281e:	d036      	beq.n	802288e <_svfiprintf_r+0x1d2>
 8022820:	4b21      	ldr	r3, [pc, #132]	@ (80228a8 <_svfiprintf_r+0x1ec>)
 8022822:	bb1b      	cbnz	r3, 802286c <_svfiprintf_r+0x1b0>
 8022824:	9b03      	ldr	r3, [sp, #12]
 8022826:	3307      	adds	r3, #7
 8022828:	f023 0307 	bic.w	r3, r3, #7
 802282c:	3308      	adds	r3, #8
 802282e:	9303      	str	r3, [sp, #12]
 8022830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022832:	4433      	add	r3, r6
 8022834:	9309      	str	r3, [sp, #36]	@ 0x24
 8022836:	e76a      	b.n	802270e <_svfiprintf_r+0x52>
 8022838:	fb0c 3202 	mla	r2, ip, r2, r3
 802283c:	460c      	mov	r4, r1
 802283e:	2001      	movs	r0, #1
 8022840:	e7a8      	b.n	8022794 <_svfiprintf_r+0xd8>
 8022842:	2300      	movs	r3, #0
 8022844:	3401      	adds	r4, #1
 8022846:	9305      	str	r3, [sp, #20]
 8022848:	4619      	mov	r1, r3
 802284a:	f04f 0c0a 	mov.w	ip, #10
 802284e:	4620      	mov	r0, r4
 8022850:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022854:	3a30      	subs	r2, #48	@ 0x30
 8022856:	2a09      	cmp	r2, #9
 8022858:	d903      	bls.n	8022862 <_svfiprintf_r+0x1a6>
 802285a:	2b00      	cmp	r3, #0
 802285c:	d0c6      	beq.n	80227ec <_svfiprintf_r+0x130>
 802285e:	9105      	str	r1, [sp, #20]
 8022860:	e7c4      	b.n	80227ec <_svfiprintf_r+0x130>
 8022862:	fb0c 2101 	mla	r1, ip, r1, r2
 8022866:	4604      	mov	r4, r0
 8022868:	2301      	movs	r3, #1
 802286a:	e7f0      	b.n	802284e <_svfiprintf_r+0x192>
 802286c:	ab03      	add	r3, sp, #12
 802286e:	9300      	str	r3, [sp, #0]
 8022870:	462a      	mov	r2, r5
 8022872:	4b0e      	ldr	r3, [pc, #56]	@ (80228ac <_svfiprintf_r+0x1f0>)
 8022874:	a904      	add	r1, sp, #16
 8022876:	4638      	mov	r0, r7
 8022878:	f3af 8000 	nop.w
 802287c:	1c42      	adds	r2, r0, #1
 802287e:	4606      	mov	r6, r0
 8022880:	d1d6      	bne.n	8022830 <_svfiprintf_r+0x174>
 8022882:	89ab      	ldrh	r3, [r5, #12]
 8022884:	065b      	lsls	r3, r3, #25
 8022886:	f53f af2d 	bmi.w	80226e4 <_svfiprintf_r+0x28>
 802288a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802288c:	e72c      	b.n	80226e8 <_svfiprintf_r+0x2c>
 802288e:	ab03      	add	r3, sp, #12
 8022890:	9300      	str	r3, [sp, #0]
 8022892:	462a      	mov	r2, r5
 8022894:	4b05      	ldr	r3, [pc, #20]	@ (80228ac <_svfiprintf_r+0x1f0>)
 8022896:	a904      	add	r1, sp, #16
 8022898:	4638      	mov	r0, r7
 802289a:	f000 f879 	bl	8022990 <_printf_i>
 802289e:	e7ed      	b.n	802287c <_svfiprintf_r+0x1c0>
 80228a0:	08025cb6 	.word	0x08025cb6
 80228a4:	08025cc0 	.word	0x08025cc0
 80228a8:	00000000 	.word	0x00000000
 80228ac:	08022605 	.word	0x08022605
 80228b0:	08025cbc 	.word	0x08025cbc

080228b4 <_printf_common>:
 80228b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80228b8:	4616      	mov	r6, r2
 80228ba:	4698      	mov	r8, r3
 80228bc:	688a      	ldr	r2, [r1, #8]
 80228be:	690b      	ldr	r3, [r1, #16]
 80228c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80228c4:	4293      	cmp	r3, r2
 80228c6:	bfb8      	it	lt
 80228c8:	4613      	movlt	r3, r2
 80228ca:	6033      	str	r3, [r6, #0]
 80228cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80228d0:	4607      	mov	r7, r0
 80228d2:	460c      	mov	r4, r1
 80228d4:	b10a      	cbz	r2, 80228da <_printf_common+0x26>
 80228d6:	3301      	adds	r3, #1
 80228d8:	6033      	str	r3, [r6, #0]
 80228da:	6823      	ldr	r3, [r4, #0]
 80228dc:	0699      	lsls	r1, r3, #26
 80228de:	bf42      	ittt	mi
 80228e0:	6833      	ldrmi	r3, [r6, #0]
 80228e2:	3302      	addmi	r3, #2
 80228e4:	6033      	strmi	r3, [r6, #0]
 80228e6:	6825      	ldr	r5, [r4, #0]
 80228e8:	f015 0506 	ands.w	r5, r5, #6
 80228ec:	d106      	bne.n	80228fc <_printf_common+0x48>
 80228ee:	f104 0a19 	add.w	sl, r4, #25
 80228f2:	68e3      	ldr	r3, [r4, #12]
 80228f4:	6832      	ldr	r2, [r6, #0]
 80228f6:	1a9b      	subs	r3, r3, r2
 80228f8:	42ab      	cmp	r3, r5
 80228fa:	dc26      	bgt.n	802294a <_printf_common+0x96>
 80228fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8022900:	6822      	ldr	r2, [r4, #0]
 8022902:	3b00      	subs	r3, #0
 8022904:	bf18      	it	ne
 8022906:	2301      	movne	r3, #1
 8022908:	0692      	lsls	r2, r2, #26
 802290a:	d42b      	bmi.n	8022964 <_printf_common+0xb0>
 802290c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8022910:	4641      	mov	r1, r8
 8022912:	4638      	mov	r0, r7
 8022914:	47c8      	blx	r9
 8022916:	3001      	adds	r0, #1
 8022918:	d01e      	beq.n	8022958 <_printf_common+0xa4>
 802291a:	6823      	ldr	r3, [r4, #0]
 802291c:	6922      	ldr	r2, [r4, #16]
 802291e:	f003 0306 	and.w	r3, r3, #6
 8022922:	2b04      	cmp	r3, #4
 8022924:	bf02      	ittt	eq
 8022926:	68e5      	ldreq	r5, [r4, #12]
 8022928:	6833      	ldreq	r3, [r6, #0]
 802292a:	1aed      	subeq	r5, r5, r3
 802292c:	68a3      	ldr	r3, [r4, #8]
 802292e:	bf0c      	ite	eq
 8022930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022934:	2500      	movne	r5, #0
 8022936:	4293      	cmp	r3, r2
 8022938:	bfc4      	itt	gt
 802293a:	1a9b      	subgt	r3, r3, r2
 802293c:	18ed      	addgt	r5, r5, r3
 802293e:	2600      	movs	r6, #0
 8022940:	341a      	adds	r4, #26
 8022942:	42b5      	cmp	r5, r6
 8022944:	d11a      	bne.n	802297c <_printf_common+0xc8>
 8022946:	2000      	movs	r0, #0
 8022948:	e008      	b.n	802295c <_printf_common+0xa8>
 802294a:	2301      	movs	r3, #1
 802294c:	4652      	mov	r2, sl
 802294e:	4641      	mov	r1, r8
 8022950:	4638      	mov	r0, r7
 8022952:	47c8      	blx	r9
 8022954:	3001      	adds	r0, #1
 8022956:	d103      	bne.n	8022960 <_printf_common+0xac>
 8022958:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802295c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022960:	3501      	adds	r5, #1
 8022962:	e7c6      	b.n	80228f2 <_printf_common+0x3e>
 8022964:	18e1      	adds	r1, r4, r3
 8022966:	1c5a      	adds	r2, r3, #1
 8022968:	2030      	movs	r0, #48	@ 0x30
 802296a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802296e:	4422      	add	r2, r4
 8022970:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8022974:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8022978:	3302      	adds	r3, #2
 802297a:	e7c7      	b.n	802290c <_printf_common+0x58>
 802297c:	2301      	movs	r3, #1
 802297e:	4622      	mov	r2, r4
 8022980:	4641      	mov	r1, r8
 8022982:	4638      	mov	r0, r7
 8022984:	47c8      	blx	r9
 8022986:	3001      	adds	r0, #1
 8022988:	d0e6      	beq.n	8022958 <_printf_common+0xa4>
 802298a:	3601      	adds	r6, #1
 802298c:	e7d9      	b.n	8022942 <_printf_common+0x8e>
	...

08022990 <_printf_i>:
 8022990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022994:	7e0f      	ldrb	r7, [r1, #24]
 8022996:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8022998:	2f78      	cmp	r7, #120	@ 0x78
 802299a:	4691      	mov	r9, r2
 802299c:	4680      	mov	r8, r0
 802299e:	460c      	mov	r4, r1
 80229a0:	469a      	mov	sl, r3
 80229a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80229a6:	d807      	bhi.n	80229b8 <_printf_i+0x28>
 80229a8:	2f62      	cmp	r7, #98	@ 0x62
 80229aa:	d80a      	bhi.n	80229c2 <_printf_i+0x32>
 80229ac:	2f00      	cmp	r7, #0
 80229ae:	f000 80d2 	beq.w	8022b56 <_printf_i+0x1c6>
 80229b2:	2f58      	cmp	r7, #88	@ 0x58
 80229b4:	f000 80b9 	beq.w	8022b2a <_printf_i+0x19a>
 80229b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80229bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80229c0:	e03a      	b.n	8022a38 <_printf_i+0xa8>
 80229c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80229c6:	2b15      	cmp	r3, #21
 80229c8:	d8f6      	bhi.n	80229b8 <_printf_i+0x28>
 80229ca:	a101      	add	r1, pc, #4	@ (adr r1, 80229d0 <_printf_i+0x40>)
 80229cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80229d0:	08022a29 	.word	0x08022a29
 80229d4:	08022a3d 	.word	0x08022a3d
 80229d8:	080229b9 	.word	0x080229b9
 80229dc:	080229b9 	.word	0x080229b9
 80229e0:	080229b9 	.word	0x080229b9
 80229e4:	080229b9 	.word	0x080229b9
 80229e8:	08022a3d 	.word	0x08022a3d
 80229ec:	080229b9 	.word	0x080229b9
 80229f0:	080229b9 	.word	0x080229b9
 80229f4:	080229b9 	.word	0x080229b9
 80229f8:	080229b9 	.word	0x080229b9
 80229fc:	08022b3d 	.word	0x08022b3d
 8022a00:	08022a67 	.word	0x08022a67
 8022a04:	08022af7 	.word	0x08022af7
 8022a08:	080229b9 	.word	0x080229b9
 8022a0c:	080229b9 	.word	0x080229b9
 8022a10:	08022b5f 	.word	0x08022b5f
 8022a14:	080229b9 	.word	0x080229b9
 8022a18:	08022a67 	.word	0x08022a67
 8022a1c:	080229b9 	.word	0x080229b9
 8022a20:	080229b9 	.word	0x080229b9
 8022a24:	08022aff 	.word	0x08022aff
 8022a28:	6833      	ldr	r3, [r6, #0]
 8022a2a:	1d1a      	adds	r2, r3, #4
 8022a2c:	681b      	ldr	r3, [r3, #0]
 8022a2e:	6032      	str	r2, [r6, #0]
 8022a30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022a34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8022a38:	2301      	movs	r3, #1
 8022a3a:	e09d      	b.n	8022b78 <_printf_i+0x1e8>
 8022a3c:	6833      	ldr	r3, [r6, #0]
 8022a3e:	6820      	ldr	r0, [r4, #0]
 8022a40:	1d19      	adds	r1, r3, #4
 8022a42:	6031      	str	r1, [r6, #0]
 8022a44:	0606      	lsls	r6, r0, #24
 8022a46:	d501      	bpl.n	8022a4c <_printf_i+0xbc>
 8022a48:	681d      	ldr	r5, [r3, #0]
 8022a4a:	e003      	b.n	8022a54 <_printf_i+0xc4>
 8022a4c:	0645      	lsls	r5, r0, #25
 8022a4e:	d5fb      	bpl.n	8022a48 <_printf_i+0xb8>
 8022a50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8022a54:	2d00      	cmp	r5, #0
 8022a56:	da03      	bge.n	8022a60 <_printf_i+0xd0>
 8022a58:	232d      	movs	r3, #45	@ 0x2d
 8022a5a:	426d      	negs	r5, r5
 8022a5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022a60:	4859      	ldr	r0, [pc, #356]	@ (8022bc8 <_printf_i+0x238>)
 8022a62:	230a      	movs	r3, #10
 8022a64:	e011      	b.n	8022a8a <_printf_i+0xfa>
 8022a66:	6821      	ldr	r1, [r4, #0]
 8022a68:	6833      	ldr	r3, [r6, #0]
 8022a6a:	0608      	lsls	r0, r1, #24
 8022a6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8022a70:	d402      	bmi.n	8022a78 <_printf_i+0xe8>
 8022a72:	0649      	lsls	r1, r1, #25
 8022a74:	bf48      	it	mi
 8022a76:	b2ad      	uxthmi	r5, r5
 8022a78:	2f6f      	cmp	r7, #111	@ 0x6f
 8022a7a:	4853      	ldr	r0, [pc, #332]	@ (8022bc8 <_printf_i+0x238>)
 8022a7c:	6033      	str	r3, [r6, #0]
 8022a7e:	bf14      	ite	ne
 8022a80:	230a      	movne	r3, #10
 8022a82:	2308      	moveq	r3, #8
 8022a84:	2100      	movs	r1, #0
 8022a86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8022a8a:	6866      	ldr	r6, [r4, #4]
 8022a8c:	60a6      	str	r6, [r4, #8]
 8022a8e:	2e00      	cmp	r6, #0
 8022a90:	bfa2      	ittt	ge
 8022a92:	6821      	ldrge	r1, [r4, #0]
 8022a94:	f021 0104 	bicge.w	r1, r1, #4
 8022a98:	6021      	strge	r1, [r4, #0]
 8022a9a:	b90d      	cbnz	r5, 8022aa0 <_printf_i+0x110>
 8022a9c:	2e00      	cmp	r6, #0
 8022a9e:	d04b      	beq.n	8022b38 <_printf_i+0x1a8>
 8022aa0:	4616      	mov	r6, r2
 8022aa2:	fbb5 f1f3 	udiv	r1, r5, r3
 8022aa6:	fb03 5711 	mls	r7, r3, r1, r5
 8022aaa:	5dc7      	ldrb	r7, [r0, r7]
 8022aac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022ab0:	462f      	mov	r7, r5
 8022ab2:	42bb      	cmp	r3, r7
 8022ab4:	460d      	mov	r5, r1
 8022ab6:	d9f4      	bls.n	8022aa2 <_printf_i+0x112>
 8022ab8:	2b08      	cmp	r3, #8
 8022aba:	d10b      	bne.n	8022ad4 <_printf_i+0x144>
 8022abc:	6823      	ldr	r3, [r4, #0]
 8022abe:	07df      	lsls	r7, r3, #31
 8022ac0:	d508      	bpl.n	8022ad4 <_printf_i+0x144>
 8022ac2:	6923      	ldr	r3, [r4, #16]
 8022ac4:	6861      	ldr	r1, [r4, #4]
 8022ac6:	4299      	cmp	r1, r3
 8022ac8:	bfde      	ittt	le
 8022aca:	2330      	movle	r3, #48	@ 0x30
 8022acc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022ad0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8022ad4:	1b92      	subs	r2, r2, r6
 8022ad6:	6122      	str	r2, [r4, #16]
 8022ad8:	f8cd a000 	str.w	sl, [sp]
 8022adc:	464b      	mov	r3, r9
 8022ade:	aa03      	add	r2, sp, #12
 8022ae0:	4621      	mov	r1, r4
 8022ae2:	4640      	mov	r0, r8
 8022ae4:	f7ff fee6 	bl	80228b4 <_printf_common>
 8022ae8:	3001      	adds	r0, #1
 8022aea:	d14a      	bne.n	8022b82 <_printf_i+0x1f2>
 8022aec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022af0:	b004      	add	sp, #16
 8022af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022af6:	6823      	ldr	r3, [r4, #0]
 8022af8:	f043 0320 	orr.w	r3, r3, #32
 8022afc:	6023      	str	r3, [r4, #0]
 8022afe:	4833      	ldr	r0, [pc, #204]	@ (8022bcc <_printf_i+0x23c>)
 8022b00:	2778      	movs	r7, #120	@ 0x78
 8022b02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8022b06:	6823      	ldr	r3, [r4, #0]
 8022b08:	6831      	ldr	r1, [r6, #0]
 8022b0a:	061f      	lsls	r7, r3, #24
 8022b0c:	f851 5b04 	ldr.w	r5, [r1], #4
 8022b10:	d402      	bmi.n	8022b18 <_printf_i+0x188>
 8022b12:	065f      	lsls	r7, r3, #25
 8022b14:	bf48      	it	mi
 8022b16:	b2ad      	uxthmi	r5, r5
 8022b18:	6031      	str	r1, [r6, #0]
 8022b1a:	07d9      	lsls	r1, r3, #31
 8022b1c:	bf44      	itt	mi
 8022b1e:	f043 0320 	orrmi.w	r3, r3, #32
 8022b22:	6023      	strmi	r3, [r4, #0]
 8022b24:	b11d      	cbz	r5, 8022b2e <_printf_i+0x19e>
 8022b26:	2310      	movs	r3, #16
 8022b28:	e7ac      	b.n	8022a84 <_printf_i+0xf4>
 8022b2a:	4827      	ldr	r0, [pc, #156]	@ (8022bc8 <_printf_i+0x238>)
 8022b2c:	e7e9      	b.n	8022b02 <_printf_i+0x172>
 8022b2e:	6823      	ldr	r3, [r4, #0]
 8022b30:	f023 0320 	bic.w	r3, r3, #32
 8022b34:	6023      	str	r3, [r4, #0]
 8022b36:	e7f6      	b.n	8022b26 <_printf_i+0x196>
 8022b38:	4616      	mov	r6, r2
 8022b3a:	e7bd      	b.n	8022ab8 <_printf_i+0x128>
 8022b3c:	6833      	ldr	r3, [r6, #0]
 8022b3e:	6825      	ldr	r5, [r4, #0]
 8022b40:	6961      	ldr	r1, [r4, #20]
 8022b42:	1d18      	adds	r0, r3, #4
 8022b44:	6030      	str	r0, [r6, #0]
 8022b46:	062e      	lsls	r6, r5, #24
 8022b48:	681b      	ldr	r3, [r3, #0]
 8022b4a:	d501      	bpl.n	8022b50 <_printf_i+0x1c0>
 8022b4c:	6019      	str	r1, [r3, #0]
 8022b4e:	e002      	b.n	8022b56 <_printf_i+0x1c6>
 8022b50:	0668      	lsls	r0, r5, #25
 8022b52:	d5fb      	bpl.n	8022b4c <_printf_i+0x1bc>
 8022b54:	8019      	strh	r1, [r3, #0]
 8022b56:	2300      	movs	r3, #0
 8022b58:	6123      	str	r3, [r4, #16]
 8022b5a:	4616      	mov	r6, r2
 8022b5c:	e7bc      	b.n	8022ad8 <_printf_i+0x148>
 8022b5e:	6833      	ldr	r3, [r6, #0]
 8022b60:	1d1a      	adds	r2, r3, #4
 8022b62:	6032      	str	r2, [r6, #0]
 8022b64:	681e      	ldr	r6, [r3, #0]
 8022b66:	6862      	ldr	r2, [r4, #4]
 8022b68:	2100      	movs	r1, #0
 8022b6a:	4630      	mov	r0, r6
 8022b6c:	f7dd fbd0 	bl	8000310 <memchr>
 8022b70:	b108      	cbz	r0, 8022b76 <_printf_i+0x1e6>
 8022b72:	1b80      	subs	r0, r0, r6
 8022b74:	6060      	str	r0, [r4, #4]
 8022b76:	6863      	ldr	r3, [r4, #4]
 8022b78:	6123      	str	r3, [r4, #16]
 8022b7a:	2300      	movs	r3, #0
 8022b7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022b80:	e7aa      	b.n	8022ad8 <_printf_i+0x148>
 8022b82:	6923      	ldr	r3, [r4, #16]
 8022b84:	4632      	mov	r2, r6
 8022b86:	4649      	mov	r1, r9
 8022b88:	4640      	mov	r0, r8
 8022b8a:	47d0      	blx	sl
 8022b8c:	3001      	adds	r0, #1
 8022b8e:	d0ad      	beq.n	8022aec <_printf_i+0x15c>
 8022b90:	6823      	ldr	r3, [r4, #0]
 8022b92:	079b      	lsls	r3, r3, #30
 8022b94:	d413      	bmi.n	8022bbe <_printf_i+0x22e>
 8022b96:	68e0      	ldr	r0, [r4, #12]
 8022b98:	9b03      	ldr	r3, [sp, #12]
 8022b9a:	4298      	cmp	r0, r3
 8022b9c:	bfb8      	it	lt
 8022b9e:	4618      	movlt	r0, r3
 8022ba0:	e7a6      	b.n	8022af0 <_printf_i+0x160>
 8022ba2:	2301      	movs	r3, #1
 8022ba4:	4632      	mov	r2, r6
 8022ba6:	4649      	mov	r1, r9
 8022ba8:	4640      	mov	r0, r8
 8022baa:	47d0      	blx	sl
 8022bac:	3001      	adds	r0, #1
 8022bae:	d09d      	beq.n	8022aec <_printf_i+0x15c>
 8022bb0:	3501      	adds	r5, #1
 8022bb2:	68e3      	ldr	r3, [r4, #12]
 8022bb4:	9903      	ldr	r1, [sp, #12]
 8022bb6:	1a5b      	subs	r3, r3, r1
 8022bb8:	42ab      	cmp	r3, r5
 8022bba:	dcf2      	bgt.n	8022ba2 <_printf_i+0x212>
 8022bbc:	e7eb      	b.n	8022b96 <_printf_i+0x206>
 8022bbe:	2500      	movs	r5, #0
 8022bc0:	f104 0619 	add.w	r6, r4, #25
 8022bc4:	e7f5      	b.n	8022bb2 <_printf_i+0x222>
 8022bc6:	bf00      	nop
 8022bc8:	08025cc7 	.word	0x08025cc7
 8022bcc:	08025cd8 	.word	0x08025cd8

08022bd0 <__sflush_r>:
 8022bd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8022bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022bd8:	0716      	lsls	r6, r2, #28
 8022bda:	4605      	mov	r5, r0
 8022bdc:	460c      	mov	r4, r1
 8022bde:	d454      	bmi.n	8022c8a <__sflush_r+0xba>
 8022be0:	684b      	ldr	r3, [r1, #4]
 8022be2:	2b00      	cmp	r3, #0
 8022be4:	dc02      	bgt.n	8022bec <__sflush_r+0x1c>
 8022be6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8022be8:	2b00      	cmp	r3, #0
 8022bea:	dd48      	ble.n	8022c7e <__sflush_r+0xae>
 8022bec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022bee:	2e00      	cmp	r6, #0
 8022bf0:	d045      	beq.n	8022c7e <__sflush_r+0xae>
 8022bf2:	2300      	movs	r3, #0
 8022bf4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8022bf8:	682f      	ldr	r7, [r5, #0]
 8022bfa:	6a21      	ldr	r1, [r4, #32]
 8022bfc:	602b      	str	r3, [r5, #0]
 8022bfe:	d030      	beq.n	8022c62 <__sflush_r+0x92>
 8022c00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8022c02:	89a3      	ldrh	r3, [r4, #12]
 8022c04:	0759      	lsls	r1, r3, #29
 8022c06:	d505      	bpl.n	8022c14 <__sflush_r+0x44>
 8022c08:	6863      	ldr	r3, [r4, #4]
 8022c0a:	1ad2      	subs	r2, r2, r3
 8022c0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8022c0e:	b10b      	cbz	r3, 8022c14 <__sflush_r+0x44>
 8022c10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8022c12:	1ad2      	subs	r2, r2, r3
 8022c14:	2300      	movs	r3, #0
 8022c16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022c18:	6a21      	ldr	r1, [r4, #32]
 8022c1a:	4628      	mov	r0, r5
 8022c1c:	47b0      	blx	r6
 8022c1e:	1c43      	adds	r3, r0, #1
 8022c20:	89a3      	ldrh	r3, [r4, #12]
 8022c22:	d106      	bne.n	8022c32 <__sflush_r+0x62>
 8022c24:	6829      	ldr	r1, [r5, #0]
 8022c26:	291d      	cmp	r1, #29
 8022c28:	d82b      	bhi.n	8022c82 <__sflush_r+0xb2>
 8022c2a:	4a2a      	ldr	r2, [pc, #168]	@ (8022cd4 <__sflush_r+0x104>)
 8022c2c:	410a      	asrs	r2, r1
 8022c2e:	07d6      	lsls	r6, r2, #31
 8022c30:	d427      	bmi.n	8022c82 <__sflush_r+0xb2>
 8022c32:	2200      	movs	r2, #0
 8022c34:	6062      	str	r2, [r4, #4]
 8022c36:	04d9      	lsls	r1, r3, #19
 8022c38:	6922      	ldr	r2, [r4, #16]
 8022c3a:	6022      	str	r2, [r4, #0]
 8022c3c:	d504      	bpl.n	8022c48 <__sflush_r+0x78>
 8022c3e:	1c42      	adds	r2, r0, #1
 8022c40:	d101      	bne.n	8022c46 <__sflush_r+0x76>
 8022c42:	682b      	ldr	r3, [r5, #0]
 8022c44:	b903      	cbnz	r3, 8022c48 <__sflush_r+0x78>
 8022c46:	6560      	str	r0, [r4, #84]	@ 0x54
 8022c48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022c4a:	602f      	str	r7, [r5, #0]
 8022c4c:	b1b9      	cbz	r1, 8022c7e <__sflush_r+0xae>
 8022c4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022c52:	4299      	cmp	r1, r3
 8022c54:	d002      	beq.n	8022c5c <__sflush_r+0x8c>
 8022c56:	4628      	mov	r0, r5
 8022c58:	f7ff fc82 	bl	8022560 <_free_r>
 8022c5c:	2300      	movs	r3, #0
 8022c5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8022c60:	e00d      	b.n	8022c7e <__sflush_r+0xae>
 8022c62:	2301      	movs	r3, #1
 8022c64:	4628      	mov	r0, r5
 8022c66:	47b0      	blx	r6
 8022c68:	4602      	mov	r2, r0
 8022c6a:	1c50      	adds	r0, r2, #1
 8022c6c:	d1c9      	bne.n	8022c02 <__sflush_r+0x32>
 8022c6e:	682b      	ldr	r3, [r5, #0]
 8022c70:	2b00      	cmp	r3, #0
 8022c72:	d0c6      	beq.n	8022c02 <__sflush_r+0x32>
 8022c74:	2b1d      	cmp	r3, #29
 8022c76:	d001      	beq.n	8022c7c <__sflush_r+0xac>
 8022c78:	2b16      	cmp	r3, #22
 8022c7a:	d11e      	bne.n	8022cba <__sflush_r+0xea>
 8022c7c:	602f      	str	r7, [r5, #0]
 8022c7e:	2000      	movs	r0, #0
 8022c80:	e022      	b.n	8022cc8 <__sflush_r+0xf8>
 8022c82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022c86:	b21b      	sxth	r3, r3
 8022c88:	e01b      	b.n	8022cc2 <__sflush_r+0xf2>
 8022c8a:	690f      	ldr	r7, [r1, #16]
 8022c8c:	2f00      	cmp	r7, #0
 8022c8e:	d0f6      	beq.n	8022c7e <__sflush_r+0xae>
 8022c90:	0793      	lsls	r3, r2, #30
 8022c92:	680e      	ldr	r6, [r1, #0]
 8022c94:	bf08      	it	eq
 8022c96:	694b      	ldreq	r3, [r1, #20]
 8022c98:	600f      	str	r7, [r1, #0]
 8022c9a:	bf18      	it	ne
 8022c9c:	2300      	movne	r3, #0
 8022c9e:	eba6 0807 	sub.w	r8, r6, r7
 8022ca2:	608b      	str	r3, [r1, #8]
 8022ca4:	f1b8 0f00 	cmp.w	r8, #0
 8022ca8:	dde9      	ble.n	8022c7e <__sflush_r+0xae>
 8022caa:	6a21      	ldr	r1, [r4, #32]
 8022cac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8022cae:	4643      	mov	r3, r8
 8022cb0:	463a      	mov	r2, r7
 8022cb2:	4628      	mov	r0, r5
 8022cb4:	47b0      	blx	r6
 8022cb6:	2800      	cmp	r0, #0
 8022cb8:	dc08      	bgt.n	8022ccc <__sflush_r+0xfc>
 8022cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022cbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022cc2:	81a3      	strh	r3, [r4, #12]
 8022cc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022ccc:	4407      	add	r7, r0
 8022cce:	eba8 0800 	sub.w	r8, r8, r0
 8022cd2:	e7e7      	b.n	8022ca4 <__sflush_r+0xd4>
 8022cd4:	dfbffffe 	.word	0xdfbffffe

08022cd8 <_fflush_r>:
 8022cd8:	b538      	push	{r3, r4, r5, lr}
 8022cda:	690b      	ldr	r3, [r1, #16]
 8022cdc:	4605      	mov	r5, r0
 8022cde:	460c      	mov	r4, r1
 8022ce0:	b913      	cbnz	r3, 8022ce8 <_fflush_r+0x10>
 8022ce2:	2500      	movs	r5, #0
 8022ce4:	4628      	mov	r0, r5
 8022ce6:	bd38      	pop	{r3, r4, r5, pc}
 8022ce8:	b118      	cbz	r0, 8022cf2 <_fflush_r+0x1a>
 8022cea:	6a03      	ldr	r3, [r0, #32]
 8022cec:	b90b      	cbnz	r3, 8022cf2 <_fflush_r+0x1a>
 8022cee:	f7ff f8e1 	bl	8021eb4 <__sinit>
 8022cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022cf6:	2b00      	cmp	r3, #0
 8022cf8:	d0f3      	beq.n	8022ce2 <_fflush_r+0xa>
 8022cfa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8022cfc:	07d0      	lsls	r0, r2, #31
 8022cfe:	d404      	bmi.n	8022d0a <_fflush_r+0x32>
 8022d00:	0599      	lsls	r1, r3, #22
 8022d02:	d402      	bmi.n	8022d0a <_fflush_r+0x32>
 8022d04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022d06:	f7ff fbe8 	bl	80224da <__retarget_lock_acquire_recursive>
 8022d0a:	4628      	mov	r0, r5
 8022d0c:	4621      	mov	r1, r4
 8022d0e:	f7ff ff5f 	bl	8022bd0 <__sflush_r>
 8022d12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022d14:	07da      	lsls	r2, r3, #31
 8022d16:	4605      	mov	r5, r0
 8022d18:	d4e4      	bmi.n	8022ce4 <_fflush_r+0xc>
 8022d1a:	89a3      	ldrh	r3, [r4, #12]
 8022d1c:	059b      	lsls	r3, r3, #22
 8022d1e:	d4e1      	bmi.n	8022ce4 <_fflush_r+0xc>
 8022d20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022d22:	f7ff fbdb 	bl	80224dc <__retarget_lock_release_recursive>
 8022d26:	e7dd      	b.n	8022ce4 <_fflush_r+0xc>

08022d28 <fiprintf>:
 8022d28:	b40e      	push	{r1, r2, r3}
 8022d2a:	b503      	push	{r0, r1, lr}
 8022d2c:	4601      	mov	r1, r0
 8022d2e:	ab03      	add	r3, sp, #12
 8022d30:	4805      	ldr	r0, [pc, #20]	@ (8022d48 <fiprintf+0x20>)
 8022d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8022d36:	6800      	ldr	r0, [r0, #0]
 8022d38:	9301      	str	r3, [sp, #4]
 8022d3a:	f000 f8bb 	bl	8022eb4 <_vfiprintf_r>
 8022d3e:	b002      	add	sp, #8
 8022d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8022d44:	b003      	add	sp, #12
 8022d46:	4770      	bx	lr
 8022d48:	240012bc 	.word	0x240012bc

08022d4c <__swhatbuf_r>:
 8022d4c:	b570      	push	{r4, r5, r6, lr}
 8022d4e:	460c      	mov	r4, r1
 8022d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022d54:	2900      	cmp	r1, #0
 8022d56:	b096      	sub	sp, #88	@ 0x58
 8022d58:	4615      	mov	r5, r2
 8022d5a:	461e      	mov	r6, r3
 8022d5c:	da0d      	bge.n	8022d7a <__swhatbuf_r+0x2e>
 8022d5e:	89a3      	ldrh	r3, [r4, #12]
 8022d60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8022d64:	f04f 0100 	mov.w	r1, #0
 8022d68:	bf14      	ite	ne
 8022d6a:	2340      	movne	r3, #64	@ 0x40
 8022d6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8022d70:	2000      	movs	r0, #0
 8022d72:	6031      	str	r1, [r6, #0]
 8022d74:	602b      	str	r3, [r5, #0]
 8022d76:	b016      	add	sp, #88	@ 0x58
 8022d78:	bd70      	pop	{r4, r5, r6, pc}
 8022d7a:	466a      	mov	r2, sp
 8022d7c:	f000 f848 	bl	8022e10 <_fstat_r>
 8022d80:	2800      	cmp	r0, #0
 8022d82:	dbec      	blt.n	8022d5e <__swhatbuf_r+0x12>
 8022d84:	9901      	ldr	r1, [sp, #4]
 8022d86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8022d8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8022d8e:	4259      	negs	r1, r3
 8022d90:	4159      	adcs	r1, r3
 8022d92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8022d96:	e7eb      	b.n	8022d70 <__swhatbuf_r+0x24>

08022d98 <__smakebuf_r>:
 8022d98:	898b      	ldrh	r3, [r1, #12]
 8022d9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022d9c:	079d      	lsls	r5, r3, #30
 8022d9e:	4606      	mov	r6, r0
 8022da0:	460c      	mov	r4, r1
 8022da2:	d507      	bpl.n	8022db4 <__smakebuf_r+0x1c>
 8022da4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8022da8:	6023      	str	r3, [r4, #0]
 8022daa:	6123      	str	r3, [r4, #16]
 8022dac:	2301      	movs	r3, #1
 8022dae:	6163      	str	r3, [r4, #20]
 8022db0:	b003      	add	sp, #12
 8022db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022db4:	ab01      	add	r3, sp, #4
 8022db6:	466a      	mov	r2, sp
 8022db8:	f7ff ffc8 	bl	8022d4c <__swhatbuf_r>
 8022dbc:	9f00      	ldr	r7, [sp, #0]
 8022dbe:	4605      	mov	r5, r0
 8022dc0:	4639      	mov	r1, r7
 8022dc2:	4630      	mov	r0, r6
 8022dc4:	f7fe fe44 	bl	8021a50 <_malloc_r>
 8022dc8:	b948      	cbnz	r0, 8022dde <__smakebuf_r+0x46>
 8022dca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022dce:	059a      	lsls	r2, r3, #22
 8022dd0:	d4ee      	bmi.n	8022db0 <__smakebuf_r+0x18>
 8022dd2:	f023 0303 	bic.w	r3, r3, #3
 8022dd6:	f043 0302 	orr.w	r3, r3, #2
 8022dda:	81a3      	strh	r3, [r4, #12]
 8022ddc:	e7e2      	b.n	8022da4 <__smakebuf_r+0xc>
 8022dde:	89a3      	ldrh	r3, [r4, #12]
 8022de0:	6020      	str	r0, [r4, #0]
 8022de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8022de6:	81a3      	strh	r3, [r4, #12]
 8022de8:	9b01      	ldr	r3, [sp, #4]
 8022dea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8022dee:	b15b      	cbz	r3, 8022e08 <__smakebuf_r+0x70>
 8022df0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022df4:	4630      	mov	r0, r6
 8022df6:	f000 f81d 	bl	8022e34 <_isatty_r>
 8022dfa:	b128      	cbz	r0, 8022e08 <__smakebuf_r+0x70>
 8022dfc:	89a3      	ldrh	r3, [r4, #12]
 8022dfe:	f023 0303 	bic.w	r3, r3, #3
 8022e02:	f043 0301 	orr.w	r3, r3, #1
 8022e06:	81a3      	strh	r3, [r4, #12]
 8022e08:	89a3      	ldrh	r3, [r4, #12]
 8022e0a:	431d      	orrs	r5, r3
 8022e0c:	81a5      	strh	r5, [r4, #12]
 8022e0e:	e7cf      	b.n	8022db0 <__smakebuf_r+0x18>

08022e10 <_fstat_r>:
 8022e10:	b538      	push	{r3, r4, r5, lr}
 8022e12:	4d07      	ldr	r5, [pc, #28]	@ (8022e30 <_fstat_r+0x20>)
 8022e14:	2300      	movs	r3, #0
 8022e16:	4604      	mov	r4, r0
 8022e18:	4608      	mov	r0, r1
 8022e1a:	4611      	mov	r1, r2
 8022e1c:	602b      	str	r3, [r5, #0]
 8022e1e:	f7df fca7 	bl	8002770 <_fstat>
 8022e22:	1c43      	adds	r3, r0, #1
 8022e24:	d102      	bne.n	8022e2c <_fstat_r+0x1c>
 8022e26:	682b      	ldr	r3, [r5, #0]
 8022e28:	b103      	cbz	r3, 8022e2c <_fstat_r+0x1c>
 8022e2a:	6023      	str	r3, [r4, #0]
 8022e2c:	bd38      	pop	{r3, r4, r5, pc}
 8022e2e:	bf00      	nop
 8022e30:	240696e8 	.word	0x240696e8

08022e34 <_isatty_r>:
 8022e34:	b538      	push	{r3, r4, r5, lr}
 8022e36:	4d06      	ldr	r5, [pc, #24]	@ (8022e50 <_isatty_r+0x1c>)
 8022e38:	2300      	movs	r3, #0
 8022e3a:	4604      	mov	r4, r0
 8022e3c:	4608      	mov	r0, r1
 8022e3e:	602b      	str	r3, [r5, #0]
 8022e40:	f7df fca6 	bl	8002790 <_isatty>
 8022e44:	1c43      	adds	r3, r0, #1
 8022e46:	d102      	bne.n	8022e4e <_isatty_r+0x1a>
 8022e48:	682b      	ldr	r3, [r5, #0]
 8022e4a:	b103      	cbz	r3, 8022e4e <_isatty_r+0x1a>
 8022e4c:	6023      	str	r3, [r4, #0]
 8022e4e:	bd38      	pop	{r3, r4, r5, pc}
 8022e50:	240696e8 	.word	0x240696e8

08022e54 <abort>:
 8022e54:	b508      	push	{r3, lr}
 8022e56:	2006      	movs	r0, #6
 8022e58:	f000 f96c 	bl	8023134 <raise>
 8022e5c:	2001      	movs	r0, #1
 8022e5e:	f7df fc37 	bl	80026d0 <_exit>

08022e62 <__sfputc_r>:
 8022e62:	6893      	ldr	r3, [r2, #8]
 8022e64:	3b01      	subs	r3, #1
 8022e66:	2b00      	cmp	r3, #0
 8022e68:	b410      	push	{r4}
 8022e6a:	6093      	str	r3, [r2, #8]
 8022e6c:	da08      	bge.n	8022e80 <__sfputc_r+0x1e>
 8022e6e:	6994      	ldr	r4, [r2, #24]
 8022e70:	42a3      	cmp	r3, r4
 8022e72:	db01      	blt.n	8022e78 <__sfputc_r+0x16>
 8022e74:	290a      	cmp	r1, #10
 8022e76:	d103      	bne.n	8022e80 <__sfputc_r+0x1e>
 8022e78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022e7c:	f7ff b95a 	b.w	8022134 <__swbuf_r>
 8022e80:	6813      	ldr	r3, [r2, #0]
 8022e82:	1c58      	adds	r0, r3, #1
 8022e84:	6010      	str	r0, [r2, #0]
 8022e86:	7019      	strb	r1, [r3, #0]
 8022e88:	4608      	mov	r0, r1
 8022e8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022e8e:	4770      	bx	lr

08022e90 <__sfputs_r>:
 8022e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022e92:	4606      	mov	r6, r0
 8022e94:	460f      	mov	r7, r1
 8022e96:	4614      	mov	r4, r2
 8022e98:	18d5      	adds	r5, r2, r3
 8022e9a:	42ac      	cmp	r4, r5
 8022e9c:	d101      	bne.n	8022ea2 <__sfputs_r+0x12>
 8022e9e:	2000      	movs	r0, #0
 8022ea0:	e007      	b.n	8022eb2 <__sfputs_r+0x22>
 8022ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022ea6:	463a      	mov	r2, r7
 8022ea8:	4630      	mov	r0, r6
 8022eaa:	f7ff ffda 	bl	8022e62 <__sfputc_r>
 8022eae:	1c43      	adds	r3, r0, #1
 8022eb0:	d1f3      	bne.n	8022e9a <__sfputs_r+0xa>
 8022eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08022eb4 <_vfiprintf_r>:
 8022eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022eb8:	460d      	mov	r5, r1
 8022eba:	b09d      	sub	sp, #116	@ 0x74
 8022ebc:	4614      	mov	r4, r2
 8022ebe:	4698      	mov	r8, r3
 8022ec0:	4606      	mov	r6, r0
 8022ec2:	b118      	cbz	r0, 8022ecc <_vfiprintf_r+0x18>
 8022ec4:	6a03      	ldr	r3, [r0, #32]
 8022ec6:	b90b      	cbnz	r3, 8022ecc <_vfiprintf_r+0x18>
 8022ec8:	f7fe fff4 	bl	8021eb4 <__sinit>
 8022ecc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022ece:	07d9      	lsls	r1, r3, #31
 8022ed0:	d405      	bmi.n	8022ede <_vfiprintf_r+0x2a>
 8022ed2:	89ab      	ldrh	r3, [r5, #12]
 8022ed4:	059a      	lsls	r2, r3, #22
 8022ed6:	d402      	bmi.n	8022ede <_vfiprintf_r+0x2a>
 8022ed8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022eda:	f7ff fafe 	bl	80224da <__retarget_lock_acquire_recursive>
 8022ede:	89ab      	ldrh	r3, [r5, #12]
 8022ee0:	071b      	lsls	r3, r3, #28
 8022ee2:	d501      	bpl.n	8022ee8 <_vfiprintf_r+0x34>
 8022ee4:	692b      	ldr	r3, [r5, #16]
 8022ee6:	b99b      	cbnz	r3, 8022f10 <_vfiprintf_r+0x5c>
 8022ee8:	4629      	mov	r1, r5
 8022eea:	4630      	mov	r0, r6
 8022eec:	f7ff f960 	bl	80221b0 <__swsetup_r>
 8022ef0:	b170      	cbz	r0, 8022f10 <_vfiprintf_r+0x5c>
 8022ef2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022ef4:	07dc      	lsls	r4, r3, #31
 8022ef6:	d504      	bpl.n	8022f02 <_vfiprintf_r+0x4e>
 8022ef8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022efc:	b01d      	add	sp, #116	@ 0x74
 8022efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f02:	89ab      	ldrh	r3, [r5, #12]
 8022f04:	0598      	lsls	r0, r3, #22
 8022f06:	d4f7      	bmi.n	8022ef8 <_vfiprintf_r+0x44>
 8022f08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022f0a:	f7ff fae7 	bl	80224dc <__retarget_lock_release_recursive>
 8022f0e:	e7f3      	b.n	8022ef8 <_vfiprintf_r+0x44>
 8022f10:	2300      	movs	r3, #0
 8022f12:	9309      	str	r3, [sp, #36]	@ 0x24
 8022f14:	2320      	movs	r3, #32
 8022f16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8022f1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8022f1e:	2330      	movs	r3, #48	@ 0x30
 8022f20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80230d0 <_vfiprintf_r+0x21c>
 8022f24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8022f28:	f04f 0901 	mov.w	r9, #1
 8022f2c:	4623      	mov	r3, r4
 8022f2e:	469a      	mov	sl, r3
 8022f30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022f34:	b10a      	cbz	r2, 8022f3a <_vfiprintf_r+0x86>
 8022f36:	2a25      	cmp	r2, #37	@ 0x25
 8022f38:	d1f9      	bne.n	8022f2e <_vfiprintf_r+0x7a>
 8022f3a:	ebba 0b04 	subs.w	fp, sl, r4
 8022f3e:	d00b      	beq.n	8022f58 <_vfiprintf_r+0xa4>
 8022f40:	465b      	mov	r3, fp
 8022f42:	4622      	mov	r2, r4
 8022f44:	4629      	mov	r1, r5
 8022f46:	4630      	mov	r0, r6
 8022f48:	f7ff ffa2 	bl	8022e90 <__sfputs_r>
 8022f4c:	3001      	adds	r0, #1
 8022f4e:	f000 80a7 	beq.w	80230a0 <_vfiprintf_r+0x1ec>
 8022f52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022f54:	445a      	add	r2, fp
 8022f56:	9209      	str	r2, [sp, #36]	@ 0x24
 8022f58:	f89a 3000 	ldrb.w	r3, [sl]
 8022f5c:	2b00      	cmp	r3, #0
 8022f5e:	f000 809f 	beq.w	80230a0 <_vfiprintf_r+0x1ec>
 8022f62:	2300      	movs	r3, #0
 8022f64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8022f68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022f6c:	f10a 0a01 	add.w	sl, sl, #1
 8022f70:	9304      	str	r3, [sp, #16]
 8022f72:	9307      	str	r3, [sp, #28]
 8022f74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8022f78:	931a      	str	r3, [sp, #104]	@ 0x68
 8022f7a:	4654      	mov	r4, sl
 8022f7c:	2205      	movs	r2, #5
 8022f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022f82:	4853      	ldr	r0, [pc, #332]	@ (80230d0 <_vfiprintf_r+0x21c>)
 8022f84:	f7dd f9c4 	bl	8000310 <memchr>
 8022f88:	9a04      	ldr	r2, [sp, #16]
 8022f8a:	b9d8      	cbnz	r0, 8022fc4 <_vfiprintf_r+0x110>
 8022f8c:	06d1      	lsls	r1, r2, #27
 8022f8e:	bf44      	itt	mi
 8022f90:	2320      	movmi	r3, #32
 8022f92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022f96:	0713      	lsls	r3, r2, #28
 8022f98:	bf44      	itt	mi
 8022f9a:	232b      	movmi	r3, #43	@ 0x2b
 8022f9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022fa0:	f89a 3000 	ldrb.w	r3, [sl]
 8022fa4:	2b2a      	cmp	r3, #42	@ 0x2a
 8022fa6:	d015      	beq.n	8022fd4 <_vfiprintf_r+0x120>
 8022fa8:	9a07      	ldr	r2, [sp, #28]
 8022faa:	4654      	mov	r4, sl
 8022fac:	2000      	movs	r0, #0
 8022fae:	f04f 0c0a 	mov.w	ip, #10
 8022fb2:	4621      	mov	r1, r4
 8022fb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022fb8:	3b30      	subs	r3, #48	@ 0x30
 8022fba:	2b09      	cmp	r3, #9
 8022fbc:	d94b      	bls.n	8023056 <_vfiprintf_r+0x1a2>
 8022fbe:	b1b0      	cbz	r0, 8022fee <_vfiprintf_r+0x13a>
 8022fc0:	9207      	str	r2, [sp, #28]
 8022fc2:	e014      	b.n	8022fee <_vfiprintf_r+0x13a>
 8022fc4:	eba0 0308 	sub.w	r3, r0, r8
 8022fc8:	fa09 f303 	lsl.w	r3, r9, r3
 8022fcc:	4313      	orrs	r3, r2
 8022fce:	9304      	str	r3, [sp, #16]
 8022fd0:	46a2      	mov	sl, r4
 8022fd2:	e7d2      	b.n	8022f7a <_vfiprintf_r+0xc6>
 8022fd4:	9b03      	ldr	r3, [sp, #12]
 8022fd6:	1d19      	adds	r1, r3, #4
 8022fd8:	681b      	ldr	r3, [r3, #0]
 8022fda:	9103      	str	r1, [sp, #12]
 8022fdc:	2b00      	cmp	r3, #0
 8022fde:	bfbb      	ittet	lt
 8022fe0:	425b      	neglt	r3, r3
 8022fe2:	f042 0202 	orrlt.w	r2, r2, #2
 8022fe6:	9307      	strge	r3, [sp, #28]
 8022fe8:	9307      	strlt	r3, [sp, #28]
 8022fea:	bfb8      	it	lt
 8022fec:	9204      	strlt	r2, [sp, #16]
 8022fee:	7823      	ldrb	r3, [r4, #0]
 8022ff0:	2b2e      	cmp	r3, #46	@ 0x2e
 8022ff2:	d10a      	bne.n	802300a <_vfiprintf_r+0x156>
 8022ff4:	7863      	ldrb	r3, [r4, #1]
 8022ff6:	2b2a      	cmp	r3, #42	@ 0x2a
 8022ff8:	d132      	bne.n	8023060 <_vfiprintf_r+0x1ac>
 8022ffa:	9b03      	ldr	r3, [sp, #12]
 8022ffc:	1d1a      	adds	r2, r3, #4
 8022ffe:	681b      	ldr	r3, [r3, #0]
 8023000:	9203      	str	r2, [sp, #12]
 8023002:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8023006:	3402      	adds	r4, #2
 8023008:	9305      	str	r3, [sp, #20]
 802300a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80230e0 <_vfiprintf_r+0x22c>
 802300e:	7821      	ldrb	r1, [r4, #0]
 8023010:	2203      	movs	r2, #3
 8023012:	4650      	mov	r0, sl
 8023014:	f7dd f97c 	bl	8000310 <memchr>
 8023018:	b138      	cbz	r0, 802302a <_vfiprintf_r+0x176>
 802301a:	9b04      	ldr	r3, [sp, #16]
 802301c:	eba0 000a 	sub.w	r0, r0, sl
 8023020:	2240      	movs	r2, #64	@ 0x40
 8023022:	4082      	lsls	r2, r0
 8023024:	4313      	orrs	r3, r2
 8023026:	3401      	adds	r4, #1
 8023028:	9304      	str	r3, [sp, #16]
 802302a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802302e:	4829      	ldr	r0, [pc, #164]	@ (80230d4 <_vfiprintf_r+0x220>)
 8023030:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8023034:	2206      	movs	r2, #6
 8023036:	f7dd f96b 	bl	8000310 <memchr>
 802303a:	2800      	cmp	r0, #0
 802303c:	d03f      	beq.n	80230be <_vfiprintf_r+0x20a>
 802303e:	4b26      	ldr	r3, [pc, #152]	@ (80230d8 <_vfiprintf_r+0x224>)
 8023040:	bb1b      	cbnz	r3, 802308a <_vfiprintf_r+0x1d6>
 8023042:	9b03      	ldr	r3, [sp, #12]
 8023044:	3307      	adds	r3, #7
 8023046:	f023 0307 	bic.w	r3, r3, #7
 802304a:	3308      	adds	r3, #8
 802304c:	9303      	str	r3, [sp, #12]
 802304e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023050:	443b      	add	r3, r7
 8023052:	9309      	str	r3, [sp, #36]	@ 0x24
 8023054:	e76a      	b.n	8022f2c <_vfiprintf_r+0x78>
 8023056:	fb0c 3202 	mla	r2, ip, r2, r3
 802305a:	460c      	mov	r4, r1
 802305c:	2001      	movs	r0, #1
 802305e:	e7a8      	b.n	8022fb2 <_vfiprintf_r+0xfe>
 8023060:	2300      	movs	r3, #0
 8023062:	3401      	adds	r4, #1
 8023064:	9305      	str	r3, [sp, #20]
 8023066:	4619      	mov	r1, r3
 8023068:	f04f 0c0a 	mov.w	ip, #10
 802306c:	4620      	mov	r0, r4
 802306e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023072:	3a30      	subs	r2, #48	@ 0x30
 8023074:	2a09      	cmp	r2, #9
 8023076:	d903      	bls.n	8023080 <_vfiprintf_r+0x1cc>
 8023078:	2b00      	cmp	r3, #0
 802307a:	d0c6      	beq.n	802300a <_vfiprintf_r+0x156>
 802307c:	9105      	str	r1, [sp, #20]
 802307e:	e7c4      	b.n	802300a <_vfiprintf_r+0x156>
 8023080:	fb0c 2101 	mla	r1, ip, r1, r2
 8023084:	4604      	mov	r4, r0
 8023086:	2301      	movs	r3, #1
 8023088:	e7f0      	b.n	802306c <_vfiprintf_r+0x1b8>
 802308a:	ab03      	add	r3, sp, #12
 802308c:	9300      	str	r3, [sp, #0]
 802308e:	462a      	mov	r2, r5
 8023090:	4b12      	ldr	r3, [pc, #72]	@ (80230dc <_vfiprintf_r+0x228>)
 8023092:	a904      	add	r1, sp, #16
 8023094:	4630      	mov	r0, r6
 8023096:	f3af 8000 	nop.w
 802309a:	4607      	mov	r7, r0
 802309c:	1c78      	adds	r0, r7, #1
 802309e:	d1d6      	bne.n	802304e <_vfiprintf_r+0x19a>
 80230a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80230a2:	07d9      	lsls	r1, r3, #31
 80230a4:	d405      	bmi.n	80230b2 <_vfiprintf_r+0x1fe>
 80230a6:	89ab      	ldrh	r3, [r5, #12]
 80230a8:	059a      	lsls	r2, r3, #22
 80230aa:	d402      	bmi.n	80230b2 <_vfiprintf_r+0x1fe>
 80230ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80230ae:	f7ff fa15 	bl	80224dc <__retarget_lock_release_recursive>
 80230b2:	89ab      	ldrh	r3, [r5, #12]
 80230b4:	065b      	lsls	r3, r3, #25
 80230b6:	f53f af1f 	bmi.w	8022ef8 <_vfiprintf_r+0x44>
 80230ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80230bc:	e71e      	b.n	8022efc <_vfiprintf_r+0x48>
 80230be:	ab03      	add	r3, sp, #12
 80230c0:	9300      	str	r3, [sp, #0]
 80230c2:	462a      	mov	r2, r5
 80230c4:	4b05      	ldr	r3, [pc, #20]	@ (80230dc <_vfiprintf_r+0x228>)
 80230c6:	a904      	add	r1, sp, #16
 80230c8:	4630      	mov	r0, r6
 80230ca:	f7ff fc61 	bl	8022990 <_printf_i>
 80230ce:	e7e4      	b.n	802309a <_vfiprintf_r+0x1e6>
 80230d0:	08025cb6 	.word	0x08025cb6
 80230d4:	08025cc0 	.word	0x08025cc0
 80230d8:	00000000 	.word	0x00000000
 80230dc:	08022e91 	.word	0x08022e91
 80230e0:	08025cbc 	.word	0x08025cbc

080230e4 <_raise_r>:
 80230e4:	291f      	cmp	r1, #31
 80230e6:	b538      	push	{r3, r4, r5, lr}
 80230e8:	4605      	mov	r5, r0
 80230ea:	460c      	mov	r4, r1
 80230ec:	d904      	bls.n	80230f8 <_raise_r+0x14>
 80230ee:	2316      	movs	r3, #22
 80230f0:	6003      	str	r3, [r0, #0]
 80230f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80230f6:	bd38      	pop	{r3, r4, r5, pc}
 80230f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80230fa:	b112      	cbz	r2, 8023102 <_raise_r+0x1e>
 80230fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023100:	b94b      	cbnz	r3, 8023116 <_raise_r+0x32>
 8023102:	4628      	mov	r0, r5
 8023104:	f000 f830 	bl	8023168 <_getpid_r>
 8023108:	4622      	mov	r2, r4
 802310a:	4601      	mov	r1, r0
 802310c:	4628      	mov	r0, r5
 802310e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023112:	f000 b817 	b.w	8023144 <_kill_r>
 8023116:	2b01      	cmp	r3, #1
 8023118:	d00a      	beq.n	8023130 <_raise_r+0x4c>
 802311a:	1c59      	adds	r1, r3, #1
 802311c:	d103      	bne.n	8023126 <_raise_r+0x42>
 802311e:	2316      	movs	r3, #22
 8023120:	6003      	str	r3, [r0, #0]
 8023122:	2001      	movs	r0, #1
 8023124:	e7e7      	b.n	80230f6 <_raise_r+0x12>
 8023126:	2100      	movs	r1, #0
 8023128:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802312c:	4620      	mov	r0, r4
 802312e:	4798      	blx	r3
 8023130:	2000      	movs	r0, #0
 8023132:	e7e0      	b.n	80230f6 <_raise_r+0x12>

08023134 <raise>:
 8023134:	4b02      	ldr	r3, [pc, #8]	@ (8023140 <raise+0xc>)
 8023136:	4601      	mov	r1, r0
 8023138:	6818      	ldr	r0, [r3, #0]
 802313a:	f7ff bfd3 	b.w	80230e4 <_raise_r>
 802313e:	bf00      	nop
 8023140:	240012bc 	.word	0x240012bc

08023144 <_kill_r>:
 8023144:	b538      	push	{r3, r4, r5, lr}
 8023146:	4d07      	ldr	r5, [pc, #28]	@ (8023164 <_kill_r+0x20>)
 8023148:	2300      	movs	r3, #0
 802314a:	4604      	mov	r4, r0
 802314c:	4608      	mov	r0, r1
 802314e:	4611      	mov	r1, r2
 8023150:	602b      	str	r3, [r5, #0]
 8023152:	f7df faad 	bl	80026b0 <_kill>
 8023156:	1c43      	adds	r3, r0, #1
 8023158:	d102      	bne.n	8023160 <_kill_r+0x1c>
 802315a:	682b      	ldr	r3, [r5, #0]
 802315c:	b103      	cbz	r3, 8023160 <_kill_r+0x1c>
 802315e:	6023      	str	r3, [r4, #0]
 8023160:	bd38      	pop	{r3, r4, r5, pc}
 8023162:	bf00      	nop
 8023164:	240696e8 	.word	0x240696e8

08023168 <_getpid_r>:
 8023168:	f7df ba9a 	b.w	80026a0 <_getpid>

0802316c <_init>:
 802316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802316e:	bf00      	nop
 8023170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023172:	bc08      	pop	{r3}
 8023174:	469e      	mov	lr, r3
 8023176:	4770      	bx	lr

08023178 <_fini>:
 8023178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802317a:	bf00      	nop
 802317c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802317e:	bc08      	pop	{r3}
 8023180:	469e      	mov	lr, r3
 8023182:	4770      	bx	lr
