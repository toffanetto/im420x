
nucleo-H753ZI_TemplateAutoware_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013b94  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a5c  08013e34  08013e34  00014e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015890  08015890  00016890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000040  08015898  08015898  00016898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080158d8  080158d8  000168d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000013ec  24000000  080158dc  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0003213c  240013ec  08016cc8  000183ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24033528  08016cc8  00018528  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000183ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002a997  00000000  00000000  0001841a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005130  00000000  00000000  00042db1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e58  00000000  00000000  00047ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001772  00000000  00000000  00049d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003efbf  00000000  00000000  0004b4b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002e43f  00000000  00000000  0008a471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018ed17  00000000  00000000  000b88b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000076  00000000  00000000  002475c7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000087ac  00000000  00000000  00247640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000080  00000000  00000000  0024fdec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240013ec 	.word	0x240013ec
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013e1c 	.word	0x08013e1c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240013f0 	.word	0x240013f0
 80002dc:	08013e1c 	.word	0x08013e1c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr

08000304 <__aeabi_uldivmod>:
 8000304:	b953      	cbnz	r3, 800031c <__aeabi_uldivmod+0x18>
 8000306:	b94a      	cbnz	r2, 800031c <__aeabi_uldivmod+0x18>
 8000308:	2900      	cmp	r1, #0
 800030a:	bf08      	it	eq
 800030c:	2800      	cmpeq	r0, #0
 800030e:	bf1c      	itt	ne
 8000310:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000314:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000318:	f000 b96a 	b.w	80005f0 <__aeabi_idiv0>
 800031c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000320:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000324:	f000 f806 	bl	8000334 <__udivmoddi4>
 8000328:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000330:	b004      	add	sp, #16
 8000332:	4770      	bx	lr

08000334 <__udivmoddi4>:
 8000334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000338:	9d08      	ldr	r5, [sp, #32]
 800033a:	460c      	mov	r4, r1
 800033c:	2b00      	cmp	r3, #0
 800033e:	d14e      	bne.n	80003de <__udivmoddi4+0xaa>
 8000340:	4694      	mov	ip, r2
 8000342:	458c      	cmp	ip, r1
 8000344:	4686      	mov	lr, r0
 8000346:	fab2 f282 	clz	r2, r2
 800034a:	d962      	bls.n	8000412 <__udivmoddi4+0xde>
 800034c:	b14a      	cbz	r2, 8000362 <__udivmoddi4+0x2e>
 800034e:	f1c2 0320 	rsb	r3, r2, #32
 8000352:	4091      	lsls	r1, r2
 8000354:	fa20 f303 	lsr.w	r3, r0, r3
 8000358:	fa0c fc02 	lsl.w	ip, ip, r2
 800035c:	4319      	orrs	r1, r3
 800035e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f f68c 	uxth.w	r6, ip
 800036a:	fbb1 f4f7 	udiv	r4, r1, r7
 800036e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000372:	fb07 1114 	mls	r1, r7, r4, r1
 8000376:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037a:	fb04 f106 	mul.w	r1, r4, r6
 800037e:	4299      	cmp	r1, r3
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x64>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800038a:	f080 8112 	bcs.w	80005b2 <__udivmoddi4+0x27e>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 810f 	bls.w	80005b2 <__udivmoddi4+0x27e>
 8000394:	3c02      	subs	r4, #2
 8000396:	4463      	add	r3, ip
 8000398:	1a59      	subs	r1, r3, r1
 800039a:	fa1f f38e 	uxth.w	r3, lr
 800039e:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a2:	fb07 1110 	mls	r1, r7, r0, r1
 80003a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003aa:	fb00 f606 	mul.w	r6, r0, r6
 80003ae:	429e      	cmp	r6, r3
 80003b0:	d90a      	bls.n	80003c8 <__udivmoddi4+0x94>
 80003b2:	eb1c 0303 	adds.w	r3, ip, r3
 80003b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003ba:	f080 80fc 	bcs.w	80005b6 <__udivmoddi4+0x282>
 80003be:	429e      	cmp	r6, r3
 80003c0:	f240 80f9 	bls.w	80005b6 <__udivmoddi4+0x282>
 80003c4:	4463      	add	r3, ip
 80003c6:	3802      	subs	r0, #2
 80003c8:	1b9b      	subs	r3, r3, r6
 80003ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ce:	2100      	movs	r1, #0
 80003d0:	b11d      	cbz	r5, 80003da <__udivmoddi4+0xa6>
 80003d2:	40d3      	lsrs	r3, r2
 80003d4:	2200      	movs	r2, #0
 80003d6:	e9c5 3200 	strd	r3, r2, [r5]
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	428b      	cmp	r3, r1
 80003e0:	d905      	bls.n	80003ee <__udivmoddi4+0xba>
 80003e2:	b10d      	cbz	r5, 80003e8 <__udivmoddi4+0xb4>
 80003e4:	e9c5 0100 	strd	r0, r1, [r5]
 80003e8:	2100      	movs	r1, #0
 80003ea:	4608      	mov	r0, r1
 80003ec:	e7f5      	b.n	80003da <__udivmoddi4+0xa6>
 80003ee:	fab3 f183 	clz	r1, r3
 80003f2:	2900      	cmp	r1, #0
 80003f4:	d146      	bne.n	8000484 <__udivmoddi4+0x150>
 80003f6:	42a3      	cmp	r3, r4
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0xcc>
 80003fa:	4290      	cmp	r0, r2
 80003fc:	f0c0 80f0 	bcc.w	80005e0 <__udivmoddi4+0x2ac>
 8000400:	1a86      	subs	r6, r0, r2
 8000402:	eb64 0303 	sbc.w	r3, r4, r3
 8000406:	2001      	movs	r0, #1
 8000408:	2d00      	cmp	r5, #0
 800040a:	d0e6      	beq.n	80003da <__udivmoddi4+0xa6>
 800040c:	e9c5 6300 	strd	r6, r3, [r5]
 8000410:	e7e3      	b.n	80003da <__udivmoddi4+0xa6>
 8000412:	2a00      	cmp	r2, #0
 8000414:	f040 8090 	bne.w	8000538 <__udivmoddi4+0x204>
 8000418:	eba1 040c 	sub.w	r4, r1, ip
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	2101      	movs	r1, #1
 8000426:	fbb4 f6f8 	udiv	r6, r4, r8
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb08 4416 	mls	r4, r8, r6, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb07 f006 	mul.w	r0, r7, r6
 800043a:	4298      	cmp	r0, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x11c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x11a>
 8000448:	4298      	cmp	r0, r3
 800044a:	f200 80cd 	bhi.w	80005e8 <__udivmoddi4+0x2b4>
 800044e:	4626      	mov	r6, r4
 8000450:	1a1c      	subs	r4, r3, r0
 8000452:	fa1f f38e 	uxth.w	r3, lr
 8000456:	fbb4 f0f8 	udiv	r0, r4, r8
 800045a:	fb08 4410 	mls	r4, r8, r0, r4
 800045e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000462:	fb00 f707 	mul.w	r7, r0, r7
 8000466:	429f      	cmp	r7, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x148>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x146>
 8000474:	429f      	cmp	r7, r3
 8000476:	f200 80b0 	bhi.w	80005da <__udivmoddi4+0x2a6>
 800047a:	4620      	mov	r0, r4
 800047c:	1bdb      	subs	r3, r3, r7
 800047e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000482:	e7a5      	b.n	80003d0 <__udivmoddi4+0x9c>
 8000484:	f1c1 0620 	rsb	r6, r1, #32
 8000488:	408b      	lsls	r3, r1
 800048a:	fa22 f706 	lsr.w	r7, r2, r6
 800048e:	431f      	orrs	r7, r3
 8000490:	fa20 fc06 	lsr.w	ip, r0, r6
 8000494:	fa04 f301 	lsl.w	r3, r4, r1
 8000498:	ea43 030c 	orr.w	r3, r3, ip
 800049c:	40f4      	lsrs	r4, r6
 800049e:	fa00 f801 	lsl.w	r8, r0, r1
 80004a2:	0c38      	lsrs	r0, r7, #16
 80004a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004a8:	fbb4 fef0 	udiv	lr, r4, r0
 80004ac:	fa1f fc87 	uxth.w	ip, r7
 80004b0:	fb00 441e 	mls	r4, r0, lr, r4
 80004b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b8:	fb0e f90c 	mul.w	r9, lr, ip
 80004bc:	45a1      	cmp	r9, r4
 80004be:	fa02 f201 	lsl.w	r2, r2, r1
 80004c2:	d90a      	bls.n	80004da <__udivmoddi4+0x1a6>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004ca:	f080 8084 	bcs.w	80005d6 <__udivmoddi4+0x2a2>
 80004ce:	45a1      	cmp	r9, r4
 80004d0:	f240 8081 	bls.w	80005d6 <__udivmoddi4+0x2a2>
 80004d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80004d8:	443c      	add	r4, r7
 80004da:	eba4 0409 	sub.w	r4, r4, r9
 80004de:	fa1f f983 	uxth.w	r9, r3
 80004e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80004e6:	fb00 4413 	mls	r4, r0, r3, r4
 80004ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f2:	45a4      	cmp	ip, r4
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x1d2>
 80004f6:	193c      	adds	r4, r7, r4
 80004f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004fc:	d267      	bcs.n	80005ce <__udivmoddi4+0x29a>
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d965      	bls.n	80005ce <__udivmoddi4+0x29a>
 8000502:	3b02      	subs	r3, #2
 8000504:	443c      	add	r4, r7
 8000506:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800050a:	fba0 9302 	umull	r9, r3, r0, r2
 800050e:	eba4 040c 	sub.w	r4, r4, ip
 8000512:	429c      	cmp	r4, r3
 8000514:	46ce      	mov	lr, r9
 8000516:	469c      	mov	ip, r3
 8000518:	d351      	bcc.n	80005be <__udivmoddi4+0x28a>
 800051a:	d04e      	beq.n	80005ba <__udivmoddi4+0x286>
 800051c:	b155      	cbz	r5, 8000534 <__udivmoddi4+0x200>
 800051e:	ebb8 030e 	subs.w	r3, r8, lr
 8000522:	eb64 040c 	sbc.w	r4, r4, ip
 8000526:	fa04 f606 	lsl.w	r6, r4, r6
 800052a:	40cb      	lsrs	r3, r1
 800052c:	431e      	orrs	r6, r3
 800052e:	40cc      	lsrs	r4, r1
 8000530:	e9c5 6400 	strd	r6, r4, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	e750      	b.n	80003da <__udivmoddi4+0xa6>
 8000538:	f1c2 0320 	rsb	r3, r2, #32
 800053c:	fa20 f103 	lsr.w	r1, r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa24 f303 	lsr.w	r3, r4, r3
 8000548:	4094      	lsls	r4, r2
 800054a:	430c      	orrs	r4, r1
 800054c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000550:	fa00 fe02 	lsl.w	lr, r0, r2
 8000554:	fa1f f78c 	uxth.w	r7, ip
 8000558:	fbb3 f0f8 	udiv	r0, r3, r8
 800055c:	fb08 3110 	mls	r1, r8, r0, r3
 8000560:	0c23      	lsrs	r3, r4, #16
 8000562:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000566:	fb00 f107 	mul.w	r1, r0, r7
 800056a:	4299      	cmp	r1, r3
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x24c>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000576:	d22c      	bcs.n	80005d2 <__udivmoddi4+0x29e>
 8000578:	4299      	cmp	r1, r3
 800057a:	d92a      	bls.n	80005d2 <__udivmoddi4+0x29e>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1a5b      	subs	r3, r3, r1
 8000582:	b2a4      	uxth	r4, r4
 8000584:	fbb3 f1f8 	udiv	r1, r3, r8
 8000588:	fb08 3311 	mls	r3, r8, r1, r3
 800058c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000590:	fb01 f307 	mul.w	r3, r1, r7
 8000594:	42a3      	cmp	r3, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x276>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005a0:	d213      	bcs.n	80005ca <__udivmoddi4+0x296>
 80005a2:	42a3      	cmp	r3, r4
 80005a4:	d911      	bls.n	80005ca <__udivmoddi4+0x296>
 80005a6:	3902      	subs	r1, #2
 80005a8:	4464      	add	r4, ip
 80005aa:	1ae4      	subs	r4, r4, r3
 80005ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b0:	e739      	b.n	8000426 <__udivmoddi4+0xf2>
 80005b2:	4604      	mov	r4, r0
 80005b4:	e6f0      	b.n	8000398 <__udivmoddi4+0x64>
 80005b6:	4608      	mov	r0, r1
 80005b8:	e706      	b.n	80003c8 <__udivmoddi4+0x94>
 80005ba:	45c8      	cmp	r8, r9
 80005bc:	d2ae      	bcs.n	800051c <__udivmoddi4+0x1e8>
 80005be:	ebb9 0e02 	subs.w	lr, r9, r2
 80005c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80005c6:	3801      	subs	r0, #1
 80005c8:	e7a8      	b.n	800051c <__udivmoddi4+0x1e8>
 80005ca:	4631      	mov	r1, r6
 80005cc:	e7ed      	b.n	80005aa <__udivmoddi4+0x276>
 80005ce:	4603      	mov	r3, r0
 80005d0:	e799      	b.n	8000506 <__udivmoddi4+0x1d2>
 80005d2:	4630      	mov	r0, r6
 80005d4:	e7d4      	b.n	8000580 <__udivmoddi4+0x24c>
 80005d6:	46d6      	mov	lr, sl
 80005d8:	e77f      	b.n	80004da <__udivmoddi4+0x1a6>
 80005da:	4463      	add	r3, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e74d      	b.n	800047c <__udivmoddi4+0x148>
 80005e0:	4606      	mov	r6, r0
 80005e2:	4623      	mov	r3, r4
 80005e4:	4608      	mov	r0, r1
 80005e6:	e70f      	b.n	8000408 <__udivmoddi4+0xd4>
 80005e8:	3e02      	subs	r6, #2
 80005ea:	4463      	add	r3, ip
 80005ec:	e730      	b.n	8000450 <__udivmoddi4+0x11c>
 80005ee:	bf00      	nop

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	@ 0x28
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000606:	463b      	mov	r3, r7
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
 8000614:	615a      	str	r2, [r3, #20]
 8000616:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000618:	4b37      	ldr	r3, [pc, #220]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800061a:	4a38      	ldr	r2, [pc, #224]	@ (80006fc <MX_ADC1_Init+0x108>)
 800061c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800061e:	4b36      	ldr	r3, [pc, #216]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000620:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000624:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000626:	4b34      	ldr	r3, [pc, #208]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800062c:	4b32      	ldr	r3, [pc, #200]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800062e:	2201      	movs	r2, #1
 8000630:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b31      	ldr	r3, [pc, #196]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000634:	2204      	movs	r2, #4
 8000636:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	4b2f      	ldr	r3, [pc, #188]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800063a:	2200      	movs	r2, #0
 800063c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800063e:	4b2e      	ldr	r3, [pc, #184]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000640:	2201      	movs	r2, #1
 8000642:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000644:	4b2c      	ldr	r3, [pc, #176]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000646:	2202      	movs	r2, #2
 8000648:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b2b      	ldr	r3, [pc, #172]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000650:	4b29      	ldr	r3, [pc, #164]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000656:	4b28      	ldr	r3, [pc, #160]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800065c:	4b26      	ldr	r3, [pc, #152]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800065e:	2203      	movs	r2, #3
 8000660:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000662:	4b25      	ldr	r3, [pc, #148]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000668:	4b23      	ldr	r3, [pc, #140]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800066a:	2200      	movs	r2, #0
 800066c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800066e:	4b22      	ldr	r3, [pc, #136]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000676:	4820      	ldr	r0, [pc, #128]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000678:	f001 fe96 	bl	80023a8 <HAL_ADC_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000682:	f000 fd0f 	bl	80010a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	4619      	mov	r1, r3
 8000690:	4819      	ldr	r0, [pc, #100]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000692:	f002 feb9 	bl	8003408 <HAL_ADCEx_MultiModeConfigChannel>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800069c:	f000 fd02 	bl	80010a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006a0:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <MX_ADC1_Init+0x10c>)
 80006a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a4:	2306      	movs	r3, #6
 80006a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80006a8:	2306      	movs	r3, #6
 80006aa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ac:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80006b0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b2:	2304      	movs	r3, #4
 80006b4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006be:	463b      	mov	r3, r7
 80006c0:	4619      	mov	r1, r3
 80006c2:	480d      	ldr	r0, [pc, #52]	@ (80006f8 <MX_ADC1_Init+0x104>)
 80006c4:	f002 f8f4 	bl	80028b0 <HAL_ADC_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ce:	f000 fce9 	bl	80010a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_ADC1_Init+0x110>)
 80006d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006d6:	230c      	movs	r3, #12
 80006d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	4619      	mov	r1, r3
 80006de:	4806      	ldr	r0, [pc, #24]	@ (80006f8 <MX_ADC1_Init+0x104>)
 80006e0:	f002 f8e6 	bl	80028b0 <HAL_ADC_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80006ea:	f000 fcdb 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	@ 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	24001408 	.word	0x24001408
 80006fc:	40022000 	.word	0x40022000
 8000700:	19200040 	.word	0x19200040
 8000704:	08600004 	.word	0x08600004

08000708 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b0ba      	sub	sp, #232	@ 0xe8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	22c0      	movs	r2, #192	@ 0xc0
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f013 f905 	bl	8013938 <memset>
  if(adcHandle->Instance==ADC1)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a45      	ldr	r2, [pc, #276]	@ (8000848 <HAL_ADC_MspInit+0x140>)
 8000734:	4293      	cmp	r3, r2
 8000736:	f040 8083 	bne.w	8000840 <HAL_ADC_MspInit+0x138>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800073a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800073e:	f04f 0300 	mov.w	r3, #0
 8000742:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000746:	2301      	movs	r3, #1
 8000748:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 37;
 800074a:	2325      	movs	r3, #37	@ 0x25
 800074c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800074e:	2302      	movs	r3, #2
 8000750:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000752:	2302      	movs	r3, #2
 8000754:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000756:	2302      	movs	r3, #2
 8000758:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800075a:	2380      	movs	r3, #128	@ 0x80
 800075c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800075e:	2320      	movs	r3, #32
 8000760:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 8000762:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000766:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000768:	2300      	movs	r3, #0
 800076a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800076e:	f107 0310 	add.w	r3, r7, #16
 8000772:	4618      	mov	r0, r3
 8000774:	f007 f888 	bl	8007888 <HAL_RCCEx_PeriphCLKConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 800077e:	f000 fc91 	bl	80010a4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000782:	4b32      	ldr	r3, [pc, #200]	@ (800084c <HAL_ADC_MspInit+0x144>)
 8000784:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000788:	4a30      	ldr	r2, [pc, #192]	@ (800084c <HAL_ADC_MspInit+0x144>)
 800078a:	f043 0320 	orr.w	r3, r3, #32
 800078e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000792:	4b2e      	ldr	r3, [pc, #184]	@ (800084c <HAL_ADC_MspInit+0x144>)
 8000794:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000798:	f003 0320 	and.w	r3, r3, #32
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80007a0:	4b2a      	ldr	r3, [pc, #168]	@ (800084c <HAL_ADC_MspInit+0x144>)
 80007a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a6:	4a29      	ldr	r2, [pc, #164]	@ (800084c <HAL_ADC_MspInit+0x144>)
 80007a8:	f043 0320 	orr.w	r3, r3, #32
 80007ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b0:	4b26      	ldr	r3, [pc, #152]	@ (800084c <HAL_ADC_MspInit+0x144>)
 80007b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b6:	f003 0320 	and.w	r3, r3, #32
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007be:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80007c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c6:	2303      	movs	r3, #3
 80007c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007d2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80007d6:	4619      	mov	r1, r3
 80007d8:	481d      	ldr	r0, [pc, #116]	@ (8000850 <HAL_ADC_MspInit+0x148>)
 80007da:	f005 fe0f 	bl	80063fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80007de:	4b1d      	ldr	r3, [pc, #116]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000858 <HAL_ADC_MspInit+0x150>)
 80007e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007e6:	2209      	movs	r2, #9
 80007e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f0:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007f6:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000800:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000804:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000806:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000808:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800080c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800080e:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000810:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000814:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000816:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000818:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800081c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800081e:	4b0d      	ldr	r3, [pc, #52]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000824:	480b      	ldr	r0, [pc, #44]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000826:	f002 ffad 	bl	8003784 <HAL_DMA_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 8000830:	f000 fc38 	bl	80010a4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a07      	ldr	r2, [pc, #28]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000838:	64da      	str	r2, [r3, #76]	@ 0x4c
 800083a:	4a06      	ldr	r2, [pc, #24]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000840:	bf00      	nop
 8000842:	37e8      	adds	r7, #232	@ 0xe8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40022000 	.word	0x40022000
 800084c:	58024400 	.word	0x58024400
 8000850:	58021400 	.word	0x58021400
 8000854:	2400146c 	.word	0x2400146c
 8000858:	40020410 	.word	0x40020410

0800085c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000862:	4b21      	ldr	r3, [pc, #132]	@ (80008e8 <MX_DMA_Init+0x8c>)
 8000864:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000868:	4a1f      	ldr	r2, [pc, #124]	@ (80008e8 <MX_DMA_Init+0x8c>)
 800086a:	f043 0301 	orr.w	r3, r3, #1
 800086e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000872:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <MX_DMA_Init+0x8c>)
 8000874:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000880:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <MX_DMA_Init+0x8c>)
 8000882:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000886:	4a18      	ldr	r2, [pc, #96]	@ (80008e8 <MX_DMA_Init+0x8c>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000890:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <MX_DMA_Init+0x8c>)
 8000892:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	200b      	movs	r0, #11
 80008a4:	f002 ff46 	bl	8003734 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008a8:	200b      	movs	r0, #11
 80008aa:	f002 ff5d 	bl	8003768 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	200c      	movs	r0, #12
 80008b4:	f002 ff3e 	bl	8003734 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80008b8:	200c      	movs	r0, #12
 80008ba:	f002 ff55 	bl	8003768 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2105      	movs	r1, #5
 80008c2:	2039      	movs	r0, #57	@ 0x39
 80008c4:	f002 ff36 	bl	8003734 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008c8:	2039      	movs	r0, #57	@ 0x39
 80008ca:	f002 ff4d 	bl	8003768 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2105      	movs	r1, #5
 80008d2:	203a      	movs	r0, #58	@ 0x3a
 80008d4:	f002 ff2e 	bl	8003734 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008d8:	203a      	movs	r0, #58	@ 0x3a
 80008da:	f002 ff45 	bl	8003768 <HAL_NVIC_EnableIRQ>

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	58024400 	.word	0x58024400

080008ec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexControlSignal */
  MutexControlSignalHandle = osMutexNew(&MutexControlSignal_attributes);
 80008f0:	480a      	ldr	r0, [pc, #40]	@ (800091c <MX_FREERTOS_Init+0x30>)
 80008f2:	f00c f9c7 	bl	800cc84 <osMutexNew>
 80008f6:	4603      	mov	r3, r0
 80008f8:	4a09      	ldr	r2, [pc, #36]	@ (8000920 <MX_FREERTOS_Init+0x34>)
 80008fa:	6013      	str	r3, [r2, #0]

  /* creation of MutexControlAction */
  MutexControlActionHandle = osMutexNew(&MutexControlAction_attributes);
 80008fc:	4809      	ldr	r0, [pc, #36]	@ (8000924 <MX_FREERTOS_Init+0x38>)
 80008fe:	f00c f9c1 	bl	800cc84 <osMutexNew>
 8000902:	4603      	mov	r3, r0
 8000904:	4a08      	ldr	r2, [pc, #32]	@ (8000928 <MX_FREERTOS_Init+0x3c>)
 8000906:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskControle */
  TaskControleHandle = osThreadNew(StartTaskControle, NULL, &TaskControle_attributes);
 8000908:	4a08      	ldr	r2, [pc, #32]	@ (800092c <MX_FREERTOS_Init+0x40>)
 800090a:	2100      	movs	r1, #0
 800090c:	4808      	ldr	r0, [pc, #32]	@ (8000930 <MX_FREERTOS_Init+0x44>)
 800090e:	f00c f83d 	bl	800c98c <osThreadNew>
 8000912:	4603      	mov	r3, r0
 8000914:	4a07      	ldr	r2, [pc, #28]	@ (8000934 <MX_FREERTOS_Init+0x48>)
 8000916:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	08013eb8 	.word	0x08013eb8
 8000920:	240014ec 	.word	0x240014ec
 8000924:	08013ec8 	.word	0x08013ec8
 8000928:	240014f0 	.word	0x240014f0
 800092c:	08013e94 	.word	0x08013e94
 8000930:	08001525 	.word	0x08001525
 8000934:	240014e4 	.word	0x240014e4

08000938 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08e      	sub	sp, #56	@ 0x38
 800093c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	4b9e      	ldr	r3, [pc, #632]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000954:	4a9c      	ldr	r2, [pc, #624]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000956:	f043 0304 	orr.w	r3, r3, #4
 800095a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800095e:	4b9a      	ldr	r3, [pc, #616]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	623b      	str	r3, [r7, #32]
 800096a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096c:	4b96      	ldr	r3, [pc, #600]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 800096e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000972:	4a95      	ldr	r2, [pc, #596]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000978:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800097c:	4b92      	ldr	r3, [pc, #584]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 800097e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000986:	61fb      	str	r3, [r7, #28]
 8000988:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b8f      	ldr	r3, [pc, #572]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000990:	4a8d      	ldr	r2, [pc, #564]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000992:	f043 0301 	orr.w	r3, r3, #1
 8000996:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800099a:	4b8b      	ldr	r3, [pc, #556]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 800099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	61bb      	str	r3, [r7, #24]
 80009a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a8:	4b87      	ldr	r3, [pc, #540]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ae:	4a86      	ldr	r2, [pc, #536]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009b8:	4b83      	ldr	r3, [pc, #524]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c6:	4b80      	ldr	r3, [pc, #512]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009cc:	4a7e      	ldr	r2, [pc, #504]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009ce:	f043 0320 	orr.w	r3, r3, #32
 80009d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d6:	4b7c      	ldr	r3, [pc, #496]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009dc:	f003 0320 	and.w	r3, r3, #32
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e4:	4b78      	ldr	r3, [pc, #480]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ea:	4a77      	ldr	r2, [pc, #476]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009ec:	f043 0308 	orr.w	r3, r3, #8
 80009f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f4:	4b74      	ldr	r3, [pc, #464]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fa:	f003 0308 	and.w	r3, r3, #8
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a02:	4b71      	ldr	r3, [pc, #452]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a08:	4a6f      	ldr	r2, [pc, #444]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a12:	4b6d      	ldr	r3, [pc, #436]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a20:	4b69      	ldr	r3, [pc, #420]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a26:	4a68      	ldr	r2, [pc, #416]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a28:	f043 0310 	orr.w	r3, r3, #16
 8000a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a30:	4b65      	ldr	r3, [pc, #404]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a36:	f003 0310 	and.w	r3, r3, #16
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000a44:	4861      	ldr	r0, [pc, #388]	@ (8000bcc <MX_GPIO_Init+0x294>)
 8000a46:	f005 fe89 	bl	800675c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a50:	485f      	ldr	r0, [pc, #380]	@ (8000bd0 <MX_GPIO_Init+0x298>)
 8000a52:	f005 fe83 	bl	800675c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2102      	movs	r1, #2
 8000a5a:	485e      	ldr	r0, [pc, #376]	@ (8000bd4 <MX_GPIO_Init+0x29c>)
 8000a5c:	f005 fe7e 	bl	800675c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a72:	4619      	mov	r1, r3
 8000a74:	4858      	ldr	r0, [pc, #352]	@ (8000bd8 <MX_GPIO_Init+0x2a0>)
 8000a76:	f005 fcc1 	bl	80063fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a7a:	2332      	movs	r3, #50	@ 0x32
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a8a:	230b      	movs	r3, #11
 8000a8c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a92:	4619      	mov	r1, r3
 8000a94:	4850      	ldr	r0, [pc, #320]	@ (8000bd8 <MX_GPIO_Init+0x2a0>)
 8000a96:	f005 fcb1 	bl	80063fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000a9a:	2386      	movs	r3, #134	@ 0x86
 8000a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aaa:	230b      	movs	r3, #11
 8000aac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4849      	ldr	r0, [pc, #292]	@ (8000bdc <MX_GPIO_Init+0x2a4>)
 8000ab6:	f005 fca1 	bl	80063fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000aba:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000abe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	483e      	ldr	r0, [pc, #248]	@ (8000bcc <MX_GPIO_Init+0x294>)
 8000ad4:	f005 fc92 	bl	80063fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JoySW_Pin;
 8000ad8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000adc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ade:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(JoySW_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aec:	4619      	mov	r1, r3
 8000aee:	483c      	ldr	r0, [pc, #240]	@ (8000be0 <MX_GPIO_Init+0x2a8>)
 8000af0:	f005 fc84 	bl	80063fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000af4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b06:	230b      	movs	r3, #11
 8000b08:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0e:	4619      	mov	r1, r3
 8000b10:	482e      	ldr	r0, [pc, #184]	@ (8000bcc <MX_GPIO_Init+0x294>)
 8000b12:	f005 fc73 	bl	80063fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4828      	ldr	r0, [pc, #160]	@ (8000bd0 <MX_GPIO_Init+0x298>)
 8000b30:	f005 fc64 	bl	80063fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b34:	2380      	movs	r3, #128	@ 0x80
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b38:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b46:	4619      	mov	r1, r3
 8000b48:	4826      	ldr	r0, [pc, #152]	@ (8000be4 <MX_GPIO_Init+0x2ac>)
 8000b4a:	f005 fc57 	bl	80063fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000b4e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000b60:	230a      	movs	r3, #10
 8000b62:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b68:	4619      	mov	r1, r3
 8000b6a:	481c      	ldr	r0, [pc, #112]	@ (8000bdc <MX_GPIO_Init+0x2a4>)
 8000b6c:	f005 fc46 	bl	80063fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000b70:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b82:	230b      	movs	r3, #11
 8000b84:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4815      	ldr	r0, [pc, #84]	@ (8000be4 <MX_GPIO_Init+0x2ac>)
 8000b8e:	f005 fc35 	bl	80063fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b92:	2302      	movs	r3, #2
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480a      	ldr	r0, [pc, #40]	@ (8000bd4 <MX_GPIO_Init+0x29c>)
 8000baa:	f005 fc27 	bl	80063fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2107      	movs	r1, #7
 8000bb2:	2028      	movs	r0, #40	@ 0x28
 8000bb4:	f002 fdbe 	bl	8003734 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bb8:	2028      	movs	r0, #40	@ 0x28
 8000bba:	f002 fdd5 	bl	8003768 <HAL_NVIC_EnableIRQ>

}
 8000bbe:	bf00      	nop
 8000bc0:	3738      	adds	r7, #56	@ 0x38
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	58024400 	.word	0x58024400
 8000bcc:	58020400 	.word	0x58020400
 8000bd0:	58020c00 	.word	0x58020c00
 8000bd4:	58021000 	.word	0x58021000
 8000bd8:	58020800 	.word	0x58020800
 8000bdc:	58020000 	.word	0x58020000
 8000be0:	58021400 	.word	0x58021400
 8000be4:	58021800 	.word	0x58021800

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bec:	f001 f98c 	bl	8001f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf0:	f000 f81c 	bl	8000c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf4:	f7ff fea0 	bl	8000938 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bf8:	f7ff fe30 	bl	800085c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000bfc:	f000 fe9a 	bl	8001934 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000c00:	f7ff fcf8 	bl	80005f4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000c04:	f000 fe4a 	bl	800189c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Starting ADC1 reading by DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t * ) uiADC1Buffer, 2);
 8000c08:	2202      	movs	r2, #2
 8000c0a:	4906      	ldr	r1, [pc, #24]	@ (8000c24 <main+0x3c>)
 8000c0c:	4806      	ldr	r0, [pc, #24]	@ (8000c28 <main+0x40>)
 8000c0e:	f001 fd6d 	bl	80026ec <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c12:	f00b fe71 	bl	800c8f8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000c16:	f7ff fe69 	bl	80008ec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c1a:	f00b fe91 	bl	800c940 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c1e:	bf00      	nop
 8000c20:	e7fd      	b.n	8000c1e <main+0x36>
 8000c22:	bf00      	nop
 8000c24:	240014f8 	.word	0x240014f8
 8000c28:	24001408 	.word	0x24001408

08000c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b09e      	sub	sp, #120	@ 0x78
 8000c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c36:	224c      	movs	r2, #76	@ 0x4c
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f012 fe7c 	bl	8013938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	2220      	movs	r2, #32
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f012 fe75 	bl	8013938 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c4e:	2002      	movs	r0, #2
 8000c50:	f005 fdb8 	bl	80067c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	4b49      	ldr	r3, [pc, #292]	@ (8000d80 <SystemClock_Config+0x154>)
 8000c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c5c:	4a48      	ldr	r2, [pc, #288]	@ (8000d80 <SystemClock_Config+0x154>)
 8000c5e:	f023 0301 	bic.w	r3, r3, #1
 8000c62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c64:	4b46      	ldr	r3, [pc, #280]	@ (8000d80 <SystemClock_Config+0x154>)
 8000c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	4b45      	ldr	r3, [pc, #276]	@ (8000d84 <SystemClock_Config+0x158>)
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	4a44      	ldr	r2, [pc, #272]	@ (8000d84 <SystemClock_Config+0x158>)
 8000c74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c78:	6193      	str	r3, [r2, #24]
 8000c7a:	4b42      	ldr	r3, [pc, #264]	@ (8000d84 <SystemClock_Config+0x158>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c86:	bf00      	nop
 8000c88:	4b3e      	ldr	r3, [pc, #248]	@ (8000d84 <SystemClock_Config+0x158>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c94:	d1f8      	bne.n	8000c88 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	4b3c      	ldr	r3, [pc, #240]	@ (8000d88 <SystemClock_Config+0x15c>)
 8000c98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c9c:	4a3a      	ldr	r2, [pc, #232]	@ (8000d88 <SystemClock_Config+0x15c>)
 8000c9e:	f043 0302 	orr.w	r3, r3, #2
 8000ca2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ca6:	4b38      	ldr	r3, [pc, #224]	@ (8000d88 <SystemClock_Config+0x15c>)
 8000ca8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cac:	f003 0302 	and.w	r3, r3, #2
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	4b32      	ldr	r3, [pc, #200]	@ (8000d84 <SystemClock_Config+0x158>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a31      	ldr	r2, [pc, #196]	@ (8000d84 <SystemClock_Config+0x158>)
 8000cbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b2f      	ldr	r3, [pc, #188]	@ (8000d84 <SystemClock_Config+0x158>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	4b2c      	ldr	r3, [pc, #176]	@ (8000d80 <SystemClock_Config+0x154>)
 8000cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd2:	4a2b      	ldr	r2, [pc, #172]	@ (8000d80 <SystemClock_Config+0x154>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000cda:	4b29      	ldr	r3, [pc, #164]	@ (8000d80 <SystemClock_Config+0x154>)
 8000cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ce6:	bf00      	nop
 8000ce8:	4b26      	ldr	r3, [pc, #152]	@ (8000d84 <SystemClock_Config+0x158>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cf4:	d1f8      	bne.n	8000ce8 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000cf6:	2310      	movs	r3, #16
 8000cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000cfa:	2380      	movs	r3, #128	@ 0x80
 8000cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000cfe:	2320      	movs	r3, #32
 8000d00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d02:	2302      	movs	r3, #2
 8000d04:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8000d06:	2301      	movs	r3, #1
 8000d08:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000d0e:	23f0      	movs	r3, #240	@ 0xf0
 8000d10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d12:	2302      	movs	r3, #2
 8000d14:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d16:	2304      	movs	r3, #4
 8000d18:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d1e:	2308      	movs	r3, #8
 8000d20:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f005 fd82 	bl	8006838 <HAL_RCC_OscConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000d3a:	f000 f9b3 	bl	80010a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3e:	233f      	movs	r3, #63	@ 0x3f
 8000d40:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d42:	2303      	movs	r3, #3
 8000d44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d4a:	2308      	movs	r3, #8
 8000d4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d4e:	2340      	movs	r3, #64	@ 0x40
 8000d50:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d52:	2340      	movs	r3, #64	@ 0x40
 8000d54:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d5c:	2340      	movs	r3, #64	@ 0x40
 8000d5e:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	2104      	movs	r1, #4
 8000d66:	4618      	mov	r0, r3
 8000d68:	f006 f9c0 	bl	80070ec <HAL_RCC_ClockConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000d72:	f000 f997 	bl	80010a4 <Error_Handler>
  }
}
 8000d76:	bf00      	nop
 8000d78:	3778      	adds	r7, #120	@ 0x78
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	58000400 	.word	0x58000400
 8000d84:	58024800 	.word	0x58024800
 8000d88:	58024400 	.word	0x58024400

08000d8c <HAL_GPIO_EXTI_Callback>:
  * @brief  ISR callback for the JoySW, switching the control mode.
  * @param  GPIO_Pin: EXTI pin.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]
  if(JoySW_Pin == GPIO_Pin){
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d9c:	d10d      	bne.n	8000dba <HAL_GPIO_EXTI_Callback+0x2e>
    ucButtonState ^= 1;
 8000d9e:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <HAL_GPIO_EXTI_Callback+0x38>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	f083 0301 	eor.w	r3, r3, #1
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <HAL_GPIO_EXTI_Callback+0x38>)
 8000daa:	701a      	strb	r2, [r3, #0]
    osThreadFlagsSet(TaskControleHandle, 0x1000);
 8000dac:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000db4:	4618      	mov	r0, r3
 8000db6:	f00b fe7b 	bl	800cab0 <osThreadFlagsSet>
  }
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	240014f4 	.word	0x240014f4
 8000dc8:	240014e4 	.word	0x240014e4

08000dcc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if(&huart2 == huart)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4aa6      	ldr	r2, [pc, #664]	@ (8001070 <HAL_UART_RxCpltCallback+0x2a4>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	f040 8145 	bne.w	8001068 <HAL_UART_RxCpltCallback+0x29c>
  {

    unsigned int ucSmState = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]

    for(unsigned char i = 0; i<UART2_DMA_BUFFER_SIZE; i++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	72fb      	strb	r3, [r7, #11]
 8000de6:	e136      	b.n	8001056 <HAL_UART_RxCpltCallback+0x28a>
    {
      switch (ucSmState)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2b28      	cmp	r3, #40	@ 0x28
 8000dec:	f200 812c 	bhi.w	8001048 <HAL_UART_RxCpltCallback+0x27c>
 8000df0:	a201      	add	r2, pc, #4	@ (adr r2, 8000df8 <HAL_UART_RxCpltCallback+0x2c>)
 8000df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df6:	bf00      	nop
 8000df8:	08000e9d 	.word	0x08000e9d
 8000dfc:	08000eaf 	.word	0x08000eaf
 8000e00:	08001049 	.word	0x08001049
 8000e04:	08001049 	.word	0x08001049
 8000e08:	08001049 	.word	0x08001049
 8000e0c:	08001049 	.word	0x08001049
 8000e10:	08001049 	.word	0x08001049
 8000e14:	08001049 	.word	0x08001049
 8000e18:	08001049 	.word	0x08001049
 8000e1c:	08001049 	.word	0x08001049
 8000e20:	08000f79 	.word	0x08000f79
 8000e24:	08000f89 	.word	0x08000f89
 8000e28:	08000f99 	.word	0x08000f99
 8000e2c:	08000fa9 	.word	0x08000fa9
 8000e30:	08001049 	.word	0x08001049
 8000e34:	08001049 	.word	0x08001049
 8000e38:	08001049 	.word	0x08001049
 8000e3c:	08001049 	.word	0x08001049
 8000e40:	08001049 	.word	0x08001049
 8000e44:	08001049 	.word	0x08001049
 8000e48:	08000fb9 	.word	0x08000fb9
 8000e4c:	08000fc9 	.word	0x08000fc9
 8000e50:	08000fd9 	.word	0x08000fd9
 8000e54:	08000fe9 	.word	0x08000fe9
 8000e58:	08001049 	.word	0x08001049
 8000e5c:	08001049 	.word	0x08001049
 8000e60:	08001049 	.word	0x08001049
 8000e64:	08001049 	.word	0x08001049
 8000e68:	08001049 	.word	0x08001049
 8000e6c:	08001049 	.word	0x08001049
 8000e70:	08000ff9 	.word	0x08000ff9
 8000e74:	08001009 	.word	0x08001009
 8000e78:	08001019 	.word	0x08001019
 8000e7c:	08001029 	.word	0x08001029
 8000e80:	08001049 	.word	0x08001049
 8000e84:	08001049 	.word	0x08001049
 8000e88:	08001049 	.word	0x08001049
 8000e8c:	08001049 	.word	0x08001049
 8000e90:	08001049 	.word	0x08001049
 8000e94:	08001049 	.word	0x08001049
 8000e98:	08001039 	.word	0x08001039
      {
        case 0:
        if('#' == ucDmaBuffer[i])
 8000e9c:	7afb      	ldrb	r3, [r7, #11]
 8000e9e:	4a75      	ldr	r2, [pc, #468]	@ (8001074 <HAL_UART_RxCpltCallback+0x2a8>)
 8000ea0:	5cd3      	ldrb	r3, [r2, r3]
 8000ea2:	2b23      	cmp	r3, #35	@ 0x23
 8000ea4:	f040 80d3 	bne.w	800104e <HAL_UART_RxCpltCallback+0x282>
        {
          ucSmState = 1;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000eac:	e0cf      	b.n	800104e <HAL_UART_RxCpltCallback+0x282>

        case 1:
        switch (ucDmaBuffer[i])
 8000eae:	7afb      	ldrb	r3, [r7, #11]
 8000eb0:	4a70      	ldr	r2, [pc, #448]	@ (8001074 <HAL_UART_RxCpltCallback+0x2a8>)
 8000eb2:	5cd3      	ldrb	r3, [r2, r3]
 8000eb4:	3b24      	subs	r3, #36	@ 0x24
 8000eb6:	2b20      	cmp	r3, #32
 8000eb8:	d85a      	bhi.n	8000f70 <HAL_UART_RxCpltCallback+0x1a4>
 8000eba:	a201      	add	r2, pc, #4	@ (adr r2, 8000ec0 <HAL_UART_RxCpltCallback+0xf4>)
 8000ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec0:	08000f5d 	.word	0x08000f5d
 8000ec4:	08000f71 	.word	0x08000f71
 8000ec8:	08000f71 	.word	0x08000f71
 8000ecc:	08000f71 	.word	0x08000f71
 8000ed0:	08000f71 	.word	0x08000f71
 8000ed4:	08000f71 	.word	0x08000f71
 8000ed8:	08000f71 	.word	0x08000f71
 8000edc:	08000f71 	.word	0x08000f71
 8000ee0:	08000f71 	.word	0x08000f71
 8000ee4:	08000f71 	.word	0x08000f71
 8000ee8:	08000f71 	.word	0x08000f71
 8000eec:	08000f71 	.word	0x08000f71
 8000ef0:	08000f71 	.word	0x08000f71
 8000ef4:	08000f71 	.word	0x08000f71
 8000ef8:	08000f71 	.word	0x08000f71
 8000efc:	08000f71 	.word	0x08000f71
 8000f00:	08000f71 	.word	0x08000f71
 8000f04:	08000f71 	.word	0x08000f71
 8000f08:	08000f71 	.word	0x08000f71
 8000f0c:	08000f71 	.word	0x08000f71
 8000f10:	08000f71 	.word	0x08000f71
 8000f14:	08000f71 	.word	0x08000f71
 8000f18:	08000f71 	.word	0x08000f71
 8000f1c:	08000f71 	.word	0x08000f71
 8000f20:	08000f71 	.word	0x08000f71
 8000f24:	08000f71 	.word	0x08000f71
 8000f28:	08000f71 	.word	0x08000f71
 8000f2c:	08000f71 	.word	0x08000f71
 8000f30:	08000f71 	.word	0x08000f71
 8000f34:	08000f45 	.word	0x08000f45
 8000f38:	08000f4b 	.word	0x08000f4b
 8000f3c:	08000f51 	.word	0x08000f51
 8000f40:	08000f57 	.word	0x08000f57
        {
          case 'A':
          ucSmState = 10;
 8000f44:	230a      	movs	r3, #10
 8000f46:	60fb      	str	r3, [r7, #12]
          break;
 8000f48:	e015      	b.n	8000f76 <HAL_UART_RxCpltCallback+0x1aa>

          case 'B':
          ucSmState = 20;
 8000f4a:	2314      	movs	r3, #20
 8000f4c:	60fb      	str	r3, [r7, #12]
          break;
 8000f4e:	e012      	b.n	8000f76 <HAL_UART_RxCpltCallback+0x1aa>

          case 'C':
          ucSmState = 30;
 8000f50:	231e      	movs	r3, #30
 8000f52:	60fb      	str	r3, [r7, #12]
          break;
 8000f54:	e00f      	b.n	8000f76 <HAL_UART_RxCpltCallback+0x1aa>

          case 'D':
          ucSmState = 40;
 8000f56:	2328      	movs	r3, #40	@ 0x28
 8000f58:	60fb      	str	r3, [r7, #12]
          break;
 8000f5a:	e00c      	b.n	8000f76 <HAL_UART_RxCpltCallback+0x1aa>

          case '$':
          ucSmState = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
          osThreadFlagsSet(TaskControleHandle, 0x10000);
 8000f60:	4b45      	ldr	r3, [pc, #276]	@ (8001078 <HAL_UART_RxCpltCallback+0x2ac>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f00b fda1 	bl	800cab0 <osThreadFlagsSet>
          break;
 8000f6e:	e002      	b.n	8000f76 <HAL_UART_RxCpltCallback+0x1aa>

          default:
            ucSmState = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
            break;
 8000f74:	bf00      	nop
        }
        break;
 8000f76:	e06b      	b.n	8001050 <HAL_UART_RxCpltCallback+0x284>

        case 10:
        xVehicleStatus.xLongSpeed.ucBytes[0] = ucDmaBuffer[i];
 8000f78:	7afb      	ldrb	r3, [r7, #11]
 8000f7a:	4a3e      	ldr	r2, [pc, #248]	@ (8001074 <HAL_UART_RxCpltCallback+0x2a8>)
 8000f7c:	5cd2      	ldrb	r2, [r2, r3]
 8000f7e:	4b3f      	ldr	r3, [pc, #252]	@ (800107c <HAL_UART_RxCpltCallback+0x2b0>)
 8000f80:	701a      	strb	r2, [r3, #0]
        ucSmState = 11;
 8000f82:	230b      	movs	r3, #11
 8000f84:	60fb      	str	r3, [r7, #12]
        break;
 8000f86:	e063      	b.n	8001050 <HAL_UART_RxCpltCallback+0x284>

        case 11:
        xVehicleStatus.xLongSpeed.ucBytes[1] = ucDmaBuffer[i];
 8000f88:	7afb      	ldrb	r3, [r7, #11]
 8000f8a:	4a3a      	ldr	r2, [pc, #232]	@ (8001074 <HAL_UART_RxCpltCallback+0x2a8>)
 8000f8c:	5cd2      	ldrb	r2, [r2, r3]
 8000f8e:	4b3b      	ldr	r3, [pc, #236]	@ (800107c <HAL_UART_RxCpltCallback+0x2b0>)
 8000f90:	705a      	strb	r2, [r3, #1]
        ucSmState = 12;
 8000f92:	230c      	movs	r3, #12
 8000f94:	60fb      	str	r3, [r7, #12]
        break;
 8000f96:	e05b      	b.n	8001050 <HAL_UART_RxCpltCallback+0x284>

        case 12:
        xVehicleStatus.xLongSpeed.ucBytes[2] = ucDmaBuffer[i];
 8000f98:	7afb      	ldrb	r3, [r7, #11]
 8000f9a:	4a36      	ldr	r2, [pc, #216]	@ (8001074 <HAL_UART_RxCpltCallback+0x2a8>)
 8000f9c:	5cd2      	ldrb	r2, [r2, r3]
 8000f9e:	4b37      	ldr	r3, [pc, #220]	@ (800107c <HAL_UART_RxCpltCallback+0x2b0>)
 8000fa0:	709a      	strb	r2, [r3, #2]
        ucSmState = 13;
 8000fa2:	230d      	movs	r3, #13
 8000fa4:	60fb      	str	r3, [r7, #12]
        break;
 8000fa6:	e053      	b.n	8001050 <HAL_UART_RxCpltCallback+0x284>

        case 13:
        xVehicleStatus.xLongSpeed.ucBytes[3] = ucDmaBuffer[i];
 8000fa8:	7afb      	ldrb	r3, [r7, #11]
 8000faa:	4a32      	ldr	r2, [pc, #200]	@ (8001074 <HAL_UART_RxCpltCallback+0x2a8>)
 8000fac:	5cd2      	ldrb	r2, [r2, r3]
 8000fae:	4b33      	ldr	r3, [pc, #204]	@ (800107c <HAL_UART_RxCpltCallback+0x2b0>)
 8000fb0:	70da      	strb	r2, [r3, #3]
        ucSmState = 1;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	60fb      	str	r3, [r7, #12]
        break;
 8000fb6:	e04b      	b.n	8001050 <HAL_UART_RxCpltCallback+0x284>

        case 20:
        xVehicleStatus.xLatSpeed.ucBytes[0] = ucDmaBuffer[i];
 8000fb8:	7afb      	ldrb	r3, [r7, #11]
 8000fba:	4a2e      	ldr	r2, [pc, #184]	@ (8001074 <HAL_UART_RxCpltCallback+0x2a8>)
 8000fbc:	5cd2      	ldrb	r2, [r2, r3]
 8000fbe:	4b2f      	ldr	r3, [pc, #188]	@ (800107c <HAL_UART_RxCpltCallback+0x2b0>)
 8000fc0:	711a      	strb	r2, [r3, #4]
        ucSmState = 21;
 8000fc2:	2315      	movs	r3, #21
 8000fc4:	60fb      	str	r3, [r7, #12]
        break;
 8000fc6:	e043      	b.n	8001050 <HAL_UART_RxCpltCallback+0x284>

        case 21:
        xVehicleStatus.xLatSpeed.ucBytes[1] = ucDmaBuffer[i];
 8000fc8:	7afb      	ldrb	r3, [r7, #11]
 8000fca:	4a2a      	ldr	r2, [pc, #168]	@ (8001074 <HAL_UART_RxCpltCallback+0x2a8>)
 8000fcc:	5cd2      	ldrb	r2, [r2, r3]
 8000fce:	4b2b      	ldr	r3, [pc, #172]	@ (800107c <HAL_UART_RxCpltCallback+0x2b0>)
 8000fd0:	715a      	strb	r2, [r3, #5]
        ucSmState = 22;
 8000fd2:	2316      	movs	r3, #22
 8000fd4:	60fb      	str	r3, [r7, #12]
        break;
 8000fd6:	e03b      	b.n	8001050 <HAL_UART_RxCpltCallback+0x284>

        case 22:
        xVehicleStatus.xLatSpeed.ucBytes[2] = ucDmaBuffer[i];
 8000fd8:	7afb      	ldrb	r3, [r7, #11]
 8000fda:	4a26      	ldr	r2, [pc, #152]	@ (8001074 <HAL_UART_RxCpltCallback+0x2a8>)
 8000fdc:	5cd2      	ldrb	r2, [r2, r3]
 8000fde:	4b27      	ldr	r3, [pc, #156]	@ (800107c <HAL_UART_RxCpltCallback+0x2b0>)
 8000fe0:	719a      	strb	r2, [r3, #6]
        ucSmState = 23;
 8000fe2:	2317      	movs	r3, #23
 8000fe4:	60fb      	str	r3, [r7, #12]
        break;
 8000fe6:	e033      	b.n	8001050 <HAL_UART_RxCpltCallback+0x284>

        case 23:
        xVehicleStatus.xLatSpeed.ucBytes[3] = ucDmaBuffer[i];
 8000fe8:	7afb      	ldrb	r3, [r7, #11]
 8000fea:	4a22      	ldr	r2, [pc, #136]	@ (8001074 <HAL_UART_RxCpltCallback+0x2a8>)
 8000fec:	5cd2      	ldrb	r2, [r2, r3]
 8000fee:	4b23      	ldr	r3, [pc, #140]	@ (800107c <HAL_UART_RxCpltCallback+0x2b0>)
 8000ff0:	71da      	strb	r2, [r3, #7]
        ucSmState = 1;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	60fb      	str	r3, [r7, #12]
        break;
 8000ff6:	e02b      	b.n	8001050 <HAL_UART_RxCpltCallback+0x284>

        case 30:
        xVehicleStatus.xHeadingRate.ucBytes[0] = ucDmaBuffer[i];
 8000ff8:	7afb      	ldrb	r3, [r7, #11]
 8000ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8001074 <HAL_UART_RxCpltCallback+0x2a8>)
 8000ffc:	5cd2      	ldrb	r2, [r2, r3]
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800107c <HAL_UART_RxCpltCallback+0x2b0>)
 8001000:	721a      	strb	r2, [r3, #8]
        ucSmState = 31;
 8001002:	231f      	movs	r3, #31
 8001004:	60fb      	str	r3, [r7, #12]
        break;
 8001006:	e023      	b.n	8001050 <HAL_UART_RxCpltCallback+0x284>

        case 31:
        xVehicleStatus.xHeadingRate.ucBytes[1] = ucDmaBuffer[i];
 8001008:	7afb      	ldrb	r3, [r7, #11]
 800100a:	4a1a      	ldr	r2, [pc, #104]	@ (8001074 <HAL_UART_RxCpltCallback+0x2a8>)
 800100c:	5cd2      	ldrb	r2, [r2, r3]
 800100e:	4b1b      	ldr	r3, [pc, #108]	@ (800107c <HAL_UART_RxCpltCallback+0x2b0>)
 8001010:	725a      	strb	r2, [r3, #9]
        ucSmState = 32;
 8001012:	2320      	movs	r3, #32
 8001014:	60fb      	str	r3, [r7, #12]
        break;
 8001016:	e01b      	b.n	8001050 <HAL_UART_RxCpltCallback+0x284>

        case 32:
        xVehicleStatus.xHeadingRate.ucBytes[2] = ucDmaBuffer[i];
 8001018:	7afb      	ldrb	r3, [r7, #11]
 800101a:	4a16      	ldr	r2, [pc, #88]	@ (8001074 <HAL_UART_RxCpltCallback+0x2a8>)
 800101c:	5cd2      	ldrb	r2, [r2, r3]
 800101e:	4b17      	ldr	r3, [pc, #92]	@ (800107c <HAL_UART_RxCpltCallback+0x2b0>)
 8001020:	729a      	strb	r2, [r3, #10]
        ucSmState = 33;
 8001022:	2321      	movs	r3, #33	@ 0x21
 8001024:	60fb      	str	r3, [r7, #12]
        break;
 8001026:	e013      	b.n	8001050 <HAL_UART_RxCpltCallback+0x284>

        case 33:
        xVehicleStatus.xHeadingRate.ucBytes[3] = ucDmaBuffer[i];
 8001028:	7afb      	ldrb	r3, [r7, #11]
 800102a:	4a12      	ldr	r2, [pc, #72]	@ (8001074 <HAL_UART_RxCpltCallback+0x2a8>)
 800102c:	5cd2      	ldrb	r2, [r2, r3]
 800102e:	4b13      	ldr	r3, [pc, #76]	@ (800107c <HAL_UART_RxCpltCallback+0x2b0>)
 8001030:	72da      	strb	r2, [r3, #11]
        ucSmState = 1;
 8001032:	2301      	movs	r3, #1
 8001034:	60fb      	str	r3, [r7, #12]
        break;
 8001036:	e00b      	b.n	8001050 <HAL_UART_RxCpltCallback+0x284>

        case 40:
        xVehicleStatus.ucGear = ucDmaBuffer[i];
 8001038:	7afb      	ldrb	r3, [r7, #11]
 800103a:	4a0e      	ldr	r2, [pc, #56]	@ (8001074 <HAL_UART_RxCpltCallback+0x2a8>)
 800103c:	5cd2      	ldrb	r2, [r2, r3]
 800103e:	4b0f      	ldr	r3, [pc, #60]	@ (800107c <HAL_UART_RxCpltCallback+0x2b0>)
 8001040:	731a      	strb	r2, [r3, #12]
        ucSmState = 1;
 8001042:	2301      	movs	r3, #1
 8001044:	60fb      	str	r3, [r7, #12]
        break;
 8001046:	e003      	b.n	8001050 <HAL_UART_RxCpltCallback+0x284>

        default:
		      ucSmState = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
          break;
 800104c:	e000      	b.n	8001050 <HAL_UART_RxCpltCallback+0x284>
        break;
 800104e:	bf00      	nop
    for(unsigned char i = 0; i<UART2_DMA_BUFFER_SIZE; i++)
 8001050:	7afb      	ldrb	r3, [r7, #11]
 8001052:	3301      	adds	r3, #1
 8001054:	72fb      	strb	r3, [r7, #11]
 8001056:	7afb      	ldrb	r3, [r7, #11]
 8001058:	2b12      	cmp	r3, #18
 800105a:	f67f aec5 	bls.w	8000de8 <HAL_UART_RxCpltCallback+0x1c>
      }
    }
    HAL_UART_Receive_DMA(&huart2, ucDmaBuffer, UART2_DMA_BUFFER_SIZE);
 800105e:	2213      	movs	r2, #19
 8001060:	4904      	ldr	r1, [pc, #16]	@ (8001074 <HAL_UART_RxCpltCallback+0x2a8>)
 8001062:	4803      	ldr	r0, [pc, #12]	@ (8001070 <HAL_UART_RxCpltCallback+0x2a4>)
 8001064:	f009 fcac 	bl	800a9c0 <HAL_UART_Receive_DMA>

  }
}
 8001068:	bf00      	nop
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	240015a8 	.word	0x240015a8
 8001074:	24001544 	.word	0x24001544
 8001078:	240014e4 	.word	0x240014e4
 800107c:	24001534 	.word	0x24001534

08001080 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a04      	ldr	r2, [pc, #16]	@ (80010a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d101      	bne.n	8001096 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001092:	f000 ff75 	bl	8001f80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40001000 	.word	0x40001000

080010a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a8:	b672      	cpsid	i
}
 80010aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <Error_Handler+0x8>

080010b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <HAL_MspInit+0x38>)
 80010b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010bc:	4a0a      	ldr	r2, [pc, #40]	@ (80010e8 <HAL_MspInit+0x38>)
 80010be:	f043 0302 	orr.w	r3, r3, #2
 80010c2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010c6:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <HAL_MspInit+0x38>)
 80010c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	210f      	movs	r1, #15
 80010d8:	f06f 0001 	mvn.w	r0, #1
 80010dc:	f002 fb2a 	bl	8003734 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	58024400 	.word	0x58024400

080010ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b090      	sub	sp, #64	@ 0x40
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b0f      	cmp	r3, #15
 80010f8:	d827      	bhi.n	800114a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80010fa:	2200      	movs	r2, #0
 80010fc:	6879      	ldr	r1, [r7, #4]
 80010fe:	2036      	movs	r0, #54	@ 0x36
 8001100:	f002 fb18 	bl	8003734 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001104:	2036      	movs	r0, #54	@ 0x36
 8001106:	f002 fb2f 	bl	8003768 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800110a:	4a29      	ldr	r2, [pc, #164]	@ (80011b0 <HAL_InitTick+0xc4>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001110:	4b28      	ldr	r3, [pc, #160]	@ (80011b4 <HAL_InitTick+0xc8>)
 8001112:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001116:	4a27      	ldr	r2, [pc, #156]	@ (80011b4 <HAL_InitTick+0xc8>)
 8001118:	f043 0310 	orr.w	r3, r3, #16
 800111c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001120:	4b24      	ldr	r3, [pc, #144]	@ (80011b4 <HAL_InitTick+0xc8>)
 8001122:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001126:	f003 0310 	and.w	r3, r3, #16
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800112e:	f107 0210 	add.w	r2, r7, #16
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f006 fb63 	bl	8007804 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800113e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001140:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001144:	2b00      	cmp	r3, #0
 8001146:	d106      	bne.n	8001156 <HAL_InitTick+0x6a>
 8001148:	e001      	b.n	800114e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e02b      	b.n	80011a6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800114e:	f006 fb2d 	bl	80077ac <HAL_RCC_GetPCLK1Freq>
 8001152:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001154:	e004      	b.n	8001160 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001156:	f006 fb29 	bl	80077ac <HAL_RCC_GetPCLK1Freq>
 800115a:	4603      	mov	r3, r0
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001160:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001162:	4a15      	ldr	r2, [pc, #84]	@ (80011b8 <HAL_InitTick+0xcc>)
 8001164:	fba2 2303 	umull	r2, r3, r2, r3
 8001168:	0c9b      	lsrs	r3, r3, #18
 800116a:	3b01      	subs	r3, #1
 800116c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800116e:	4b13      	ldr	r3, [pc, #76]	@ (80011bc <HAL_InitTick+0xd0>)
 8001170:	4a13      	ldr	r2, [pc, #76]	@ (80011c0 <HAL_InitTick+0xd4>)
 8001172:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001174:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <HAL_InitTick+0xd0>)
 8001176:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800117a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800117c:	4a0f      	ldr	r2, [pc, #60]	@ (80011bc <HAL_InitTick+0xd0>)
 800117e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001180:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001182:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <HAL_InitTick+0xd0>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001188:	4b0c      	ldr	r3, [pc, #48]	@ (80011bc <HAL_InitTick+0xd0>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800118e:	480b      	ldr	r0, [pc, #44]	@ (80011bc <HAL_InitTick+0xd0>)
 8001190:	f009 f878 	bl	800a284 <HAL_TIM_Base_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d104      	bne.n	80011a4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800119a:	4808      	ldr	r0, [pc, #32]	@ (80011bc <HAL_InitTick+0xd0>)
 800119c:	f009 f8d4 	bl	800a348 <HAL_TIM_Base_Start_IT>
 80011a0:	4603      	mov	r3, r0
 80011a2:	e000      	b.n	80011a6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3740      	adds	r7, #64	@ 0x40
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	24000008 	.word	0x24000008
 80011b4:	58024400 	.word	0x58024400
 80011b8:	431bde83 	.word	0x431bde83
 80011bc:	24001558 	.word	0x24001558
 80011c0:	40001000 	.word	0x40001000

080011c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <NMI_Handler+0x4>

080011cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <HardFault_Handler+0x4>

080011d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <MemManage_Handler+0x4>

080011dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <BusFault_Handler+0x4>

080011e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <UsageFault_Handler+0x4>

080011ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001200:	4802      	ldr	r0, [pc, #8]	@ (800120c <DMA1_Stream0_IRQHandler+0x10>)
 8001202:	f003 fde9 	bl	8004dd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	240017c0 	.word	0x240017c0

08001210 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001214:	4802      	ldr	r0, [pc, #8]	@ (8001220 <DMA1_Stream1_IRQHandler+0x10>)
 8001216:	f003 fddf 	bl	8004dd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	24001838 	.word	0x24001838

08001224 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001228:	4802      	ldr	r0, [pc, #8]	@ (8001234 <USART2_IRQHandler+0x10>)
 800122a:	f009 fc15 	bl	800aa58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	240015a8 	.word	0x240015a8

08001238 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800123c:	4802      	ldr	r0, [pc, #8]	@ (8001248 <USART3_IRQHandler+0x10>)
 800123e:	f009 fc0b 	bl	800aa58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	2400163c 	.word	0x2400163c

0800124c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JoySW_Pin);
 8001250:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001254:	f005 fa9b 	bl	800678e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}

0800125c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001260:	4802      	ldr	r0, [pc, #8]	@ (800126c <TIM6_DAC_IRQHandler+0x10>)
 8001262:	f009 f8e9 	bl	800a438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	24001558 	.word	0x24001558

08001270 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001274:	4802      	ldr	r0, [pc, #8]	@ (8001280 <DMA2_Stream1_IRQHandler+0x10>)
 8001276:	f003 fdaf 	bl	8004dd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	240016d0 	.word	0x240016d0

08001284 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001288:	4802      	ldr	r0, [pc, #8]	@ (8001294 <DMA2_Stream2_IRQHandler+0x10>)
 800128a:	f003 fda5 	bl	8004dd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	24001748 	.word	0x24001748

08001298 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012a2:	f012 fbfd 	bl	8013aa0 <__errno>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2216      	movs	r2, #22
 80012aa:	601a      	str	r2, [r3, #0]
  return -1;
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <_exit>:

void _exit (int status)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ffe7 	bl	8001298 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012ca:	bf00      	nop
 80012cc:	e7fd      	b.n	80012ca <_exit+0x12>

080012ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b086      	sub	sp, #24
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	e00a      	b.n	80012f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012e0:	f3af 8000 	nop.w
 80012e4:	4601      	mov	r1, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1c5a      	adds	r2, r3, #1
 80012ea:	60ba      	str	r2, [r7, #8]
 80012ec:	b2ca      	uxtb	r2, r1
 80012ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	3301      	adds	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	dbf0      	blt.n	80012e0 <_read+0x12>
  }

  return len;
 80012fe:	687b      	ldr	r3, [r7, #4]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	e009      	b.n	800132e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	60ba      	str	r2, [r7, #8]
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	3301      	adds	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	429a      	cmp	r2, r3
 8001334:	dbf1      	blt.n	800131a <_write+0x12>
  }
  return len;
 8001336:	687b      	ldr	r3, [r7, #4]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <_close>:

int _close(int file)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001348:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001368:	605a      	str	r2, [r3, #4]
  return 0;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <_isatty>:

int _isatty(int file)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001380:	2301      	movs	r3, #1
}
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800138e:	b480      	push	{r7}
 8001390:	b085      	sub	sp, #20
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b0:	4a14      	ldr	r2, [pc, #80]	@ (8001404 <_sbrk+0x5c>)
 80013b2:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <_sbrk+0x60>)
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013bc:	4b13      	ldr	r3, [pc, #76]	@ (800140c <_sbrk+0x64>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d102      	bne.n	80013ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c4:	4b11      	ldr	r3, [pc, #68]	@ (800140c <_sbrk+0x64>)
 80013c6:	4a12      	ldr	r2, [pc, #72]	@ (8001410 <_sbrk+0x68>)
 80013c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ca:	4b10      	ldr	r3, [pc, #64]	@ (800140c <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d207      	bcs.n	80013e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d8:	f012 fb62 	bl	8013aa0 <__errno>
 80013dc:	4603      	mov	r3, r0
 80013de:	220c      	movs	r2, #12
 80013e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013e6:	e009      	b.n	80013fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e8:	4b08      	ldr	r3, [pc, #32]	@ (800140c <_sbrk+0x64>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ee:	4b07      	ldr	r3, [pc, #28]	@ (800140c <_sbrk+0x64>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	4a05      	ldr	r2, [pc, #20]	@ (800140c <_sbrk+0x64>)
 80013f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013fa:	68fb      	ldr	r3, [r7, #12]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	24080000 	.word	0x24080000
 8001408:	00000400 	.word	0x00000400
 800140c:	240015a4 	.word	0x240015a4
 8001410:	24033528 	.word	0x24033528

08001414 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001418:	4b37      	ldr	r3, [pc, #220]	@ (80014f8 <SystemInit+0xe4>)
 800141a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800141e:	4a36      	ldr	r2, [pc, #216]	@ (80014f8 <SystemInit+0xe4>)
 8001420:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001424:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001428:	4b34      	ldr	r3, [pc, #208]	@ (80014fc <SystemInit+0xe8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 030f 	and.w	r3, r3, #15
 8001430:	2b06      	cmp	r3, #6
 8001432:	d807      	bhi.n	8001444 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001434:	4b31      	ldr	r3, [pc, #196]	@ (80014fc <SystemInit+0xe8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f023 030f 	bic.w	r3, r3, #15
 800143c:	4a2f      	ldr	r2, [pc, #188]	@ (80014fc <SystemInit+0xe8>)
 800143e:	f043 0307 	orr.w	r3, r3, #7
 8001442:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001444:	4b2e      	ldr	r3, [pc, #184]	@ (8001500 <SystemInit+0xec>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a2d      	ldr	r2, [pc, #180]	@ (8001500 <SystemInit+0xec>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001450:	4b2b      	ldr	r3, [pc, #172]	@ (8001500 <SystemInit+0xec>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001456:	4b2a      	ldr	r3, [pc, #168]	@ (8001500 <SystemInit+0xec>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4929      	ldr	r1, [pc, #164]	@ (8001500 <SystemInit+0xec>)
 800145c:	4b29      	ldr	r3, [pc, #164]	@ (8001504 <SystemInit+0xf0>)
 800145e:	4013      	ands	r3, r2
 8001460:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001462:	4b26      	ldr	r3, [pc, #152]	@ (80014fc <SystemInit+0xe8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	2b00      	cmp	r3, #0
 800146c:	d007      	beq.n	800147e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800146e:	4b23      	ldr	r3, [pc, #140]	@ (80014fc <SystemInit+0xe8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f023 030f 	bic.w	r3, r3, #15
 8001476:	4a21      	ldr	r2, [pc, #132]	@ (80014fc <SystemInit+0xe8>)
 8001478:	f043 0307 	orr.w	r3, r3, #7
 800147c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800147e:	4b20      	ldr	r3, [pc, #128]	@ (8001500 <SystemInit+0xec>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001484:	4b1e      	ldr	r3, [pc, #120]	@ (8001500 <SystemInit+0xec>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800148a:	4b1d      	ldr	r3, [pc, #116]	@ (8001500 <SystemInit+0xec>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001490:	4b1b      	ldr	r3, [pc, #108]	@ (8001500 <SystemInit+0xec>)
 8001492:	4a1d      	ldr	r2, [pc, #116]	@ (8001508 <SystemInit+0xf4>)
 8001494:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001496:	4b1a      	ldr	r3, [pc, #104]	@ (8001500 <SystemInit+0xec>)
 8001498:	4a1c      	ldr	r2, [pc, #112]	@ (800150c <SystemInit+0xf8>)
 800149a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800149c:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <SystemInit+0xec>)
 800149e:	4a1c      	ldr	r2, [pc, #112]	@ (8001510 <SystemInit+0xfc>)
 80014a0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014a2:	4b17      	ldr	r3, [pc, #92]	@ (8001500 <SystemInit+0xec>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014a8:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <SystemInit+0xec>)
 80014aa:	4a19      	ldr	r2, [pc, #100]	@ (8001510 <SystemInit+0xfc>)
 80014ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014ae:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <SystemInit+0xec>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014b4:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <SystemInit+0xec>)
 80014b6:	4a16      	ldr	r2, [pc, #88]	@ (8001510 <SystemInit+0xfc>)
 80014b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014ba:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <SystemInit+0xec>)
 80014bc:	2200      	movs	r2, #0
 80014be:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001500 <SystemInit+0xec>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001500 <SystemInit+0xec>)
 80014c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001500 <SystemInit+0xec>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80014d2:	4b10      	ldr	r3, [pc, #64]	@ (8001514 <SystemInit+0x100>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <SystemInit+0x104>)
 80014d8:	4013      	ands	r3, r2
 80014da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80014de:	d202      	bcs.n	80014e6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80014e0:	4b0e      	ldr	r3, [pc, #56]	@ (800151c <SystemInit+0x108>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001520 <SystemInit+0x10c>)
 80014e8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80014ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000ed00 	.word	0xe000ed00
 80014fc:	52002000 	.word	0x52002000
 8001500:	58024400 	.word	0x58024400
 8001504:	eaf6ed7f 	.word	0xeaf6ed7f
 8001508:	02020200 	.word	0x02020200
 800150c:	01ff0000 	.word	0x01ff0000
 8001510:	01010280 	.word	0x01010280
 8001514:	5c001000 	.word	0x5c001000
 8001518:	ffff0000 	.word	0xffff0000
 800151c:	51008108 	.word	0x51008108
 8001520:	52004000 	.word	0x52004000

08001524 <StartTaskControle>:
  * @brief  TaskControle task function.
  * @param  argument: not used.
  * @retval None
  */
void StartTaskControle(void *argument)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b096      	sub	sp, #88	@ 0x58
 8001528:	af02      	add	r7, sp, #8
 800152a:	6078      	str	r0, [r7, #4]
  // Local variables -- START
  unsigned char ucControlMode;
  unsigned char ucFlagFullMsg;

  // Joystick calibration
  unsigned int uiX0   = 33970;
 800152c:	f248 43b2 	movw	r3, #33970	@ 0x84b2
 8001530:	647b      	str	r3, [r7, #68]	@ 0x44
  unsigned int uiXMin = 1057;
 8001532:	f240 4321 	movw	r3, #1057	@ 0x421
 8001536:	643b      	str	r3, [r7, #64]	@ 0x40
  unsigned int uiXMax = 65535;
 8001538:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800153c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  unsigned int uiY0   = 33580;
 800153e:	f248 332c 	movw	r3, #33580	@ 0x832c
 8001542:	63bb      	str	r3, [r7, #56]	@ 0x38
  unsigned int uiYMin = 1062;
 8001544:	f240 4326 	movw	r3, #1062	@ 0x426
 8001548:	637b      	str	r3, [r7, #52]	@ 0x34
  unsigned int uiYMax = 65535;
 800154a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800154e:	633b      	str	r3, [r7, #48]	@ 0x30

  // Return flags
  unsigned int uiFlags = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	64bb      	str	r3, [r7, #72]	@ 0x48
  unsigned char ucTxMsgToCarla[MSG_TO_CARLA_SIZE];

  // Local variables -- END

  // Initialization of DMA RX in circular mode
  HAL_UART_Receive_DMA(&huart2, ucDmaBuffer, UART2_DMA_BUFFER_SIZE);
 8001554:	2213      	movs	r2, #19
 8001556:	4980      	ldr	r1, [pc, #512]	@ (8001758 <StartTaskControle+0x234>)
 8001558:	4880      	ldr	r0, [pc, #512]	@ (800175c <StartTaskControle+0x238>)
 800155a:	f009 fa31 	bl	800a9c0 <HAL_UART_Receive_DMA>

  // Initialization of operation mode
  ucControlMode = MANUAL;
 800155e:	2302      	movs	r3, #2
 8001560:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  // Task loop
  for(;;)
  {
	// Looking fot operation mode change by Autoware -- START
	uiFlags = osThreadFlagsWait(0x11, osFlagsWaitAny, 0);
 8001564:	2200      	movs	r2, #0
 8001566:	2100      	movs	r1, #0
 8001568:	2011      	movs	r0, #17
 800156a:	f00b faef 	bl	800cb4c <osThreadFlagsWait>
 800156e:	64b8      	str	r0, [r7, #72]	@ 0x48

	if(0x01 == uiFlags)
 8001570:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001572:	2b01      	cmp	r3, #1
 8001574:	d104      	bne.n	8001580 <StartTaskControle+0x5c>
	{
	  ucControlMode = AUTOWARE;
 8001576:	2301      	movs	r3, #1
 8001578:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	  uiFlags = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	64bb      	str	r3, [r7, #72]	@ 0x48
	}

	if(0x10 == uiFlags)
 8001580:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001582:	2b10      	cmp	r3, #16
 8001584:	d104      	bne.n	8001590 <StartTaskControle+0x6c>
	{
	  ucControlMode = MANUAL;
 8001586:	2302      	movs	r3, #2
 8001588:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	  uiFlags = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	64bb      	str	r3, [r7, #72]	@ 0x48
	}
	// Looking for operation mode change by Autoware -- END

	// Looking for operation mode change by JoySW -- START
	uiFlags = osThreadFlagsWait(0x1000, osFlagsWaitAll, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	2101      	movs	r1, #1
 8001594:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001598:	f00b fad8 	bl	800cb4c <osThreadFlagsWait>
 800159c:	64b8      	str	r0, [r7, #72]	@ 0x48

	if(0x1000 == uiFlags)
 800159e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015a4:	d11c      	bne.n	80015e0 <StartTaskControle+0xbc>
	{
	  if(AUTOWARE == ucControlMode)
 80015a6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d109      	bne.n	80015c2 <StartTaskControle+0x9e>
	  {
		ucControlMode = MANUAL;
 80015ae:	2302      	movs	r3, #2
 80015b0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		osThreadFlagsSet(TaskMicroAutowaHandle, 0x10);
 80015b4:	4b6a      	ldr	r3, [pc, #424]	@ (8001760 <StartTaskControle+0x23c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2110      	movs	r1, #16
 80015ba:	4618      	mov	r0, r3
 80015bc:	f00b fa78 	bl	800cab0 <osThreadFlagsSet>
 80015c0:	e00c      	b.n	80015dc <StartTaskControle+0xb8>
	  }
	  else if(MANUAL == ucControlMode)
 80015c2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d108      	bne.n	80015dc <StartTaskControle+0xb8>
	  {
		ucControlMode = AUTOWARE;
 80015ca:	2301      	movs	r3, #1
 80015cc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		osThreadFlagsSet(TaskMicroAutowaHandle, 0x01);
 80015d0:	4b63      	ldr	r3, [pc, #396]	@ (8001760 <StartTaskControle+0x23c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2101      	movs	r1, #1
 80015d6:	4618      	mov	r0, r3
 80015d8:	f00b fa6a 	bl	800cab0 <osThreadFlagsSet>
	  }
	  uiFlags = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	64bb      	str	r3, [r7, #72]	@ 0x48
	}
	// Looking for operation mode change by JoySW -- END

	// Autonomous mode (AUTOWARE) routine -- START
	if(AUTOWARE == ucControlMode)
 80015e0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d175      	bne.n	80016d4 <StartTaskControle+0x1b0>
	{
    // Setting driving mode lights
    HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 1);
 80015e8:	2201      	movs	r2, #1
 80015ea:	2102      	movs	r1, #2
 80015ec:	485d      	ldr	r0, [pc, #372]	@ (8001764 <StartTaskControle+0x240>)
 80015ee:	f005 f8b5 	bl	800675c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015f8:	485b      	ldr	r0, [pc, #364]	@ (8001768 <StartTaskControle+0x244>)
 80015fa:	f005 f8af 	bl	800675c <HAL_GPIO_WritePin>

	  // WAIT for flag to sync xControlAction update
	  uiFlags = osThreadFlagsWait(0x100, osFlagsWaitAll, TIMEOUT_GET_CONTROL_ACTION);
 80015fe:	221e      	movs	r2, #30
 8001600:	2101      	movs	r1, #1
 8001602:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001606:	f00b faa1 	bl	800cb4c <osThreadFlagsWait>
 800160a:	64b8      	str	r0, [r7, #72]	@ 0x48
	  if(osFlagsErrorTimeout == uiFlags)
	  {
	  // Deu ruim timeout
	  }

	  if(0x100 == uiFlags)
 800160c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800160e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001612:	d15f      	bne.n	80016d4 <StartTaskControle+0x1b0>
	  {
        osMutexAcquire(MutexControlActionHandle, osWaitForever);
 8001614:	4b55      	ldr	r3, [pc, #340]	@ (800176c <StartTaskControle+0x248>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800161c:	4618      	mov	r0, r3
 800161e:	f00b fbb7 	bl	800cd90 <osMutexAcquire>
        vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 8001622:	4b53      	ldr	r3, [pc, #332]	@ (8001770 <StartTaskControle+0x24c>)
 8001624:	f107 020c 	add.w	r2, r7, #12
 8001628:	9201      	str	r2, [sp, #4]
 800162a:	691a      	ldr	r2, [r3, #16]
 800162c:	9200      	str	r2, [sp, #0]
 800162e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001630:	f000 fbc0 	bl	8001db4 <vGetStringFromControlAction>
        osMutexRelease(MutexControlActionHandle);
 8001634:	4b4d      	ldr	r3, [pc, #308]	@ (800176c <StartTaskControle+0x248>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f00b fbf4 	bl	800ce26 <osMutexRelease>

        // Send cTxMsgToCarla to CARLA
        HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, strlen((char * ) ucTxMsgToCarla));
 800163e:	f107 030c 	add.w	r3, r7, #12
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe fe56 	bl	80002f4 <strlen>
 8001648:	4603      	mov	r3, r0
 800164a:	b29a      	uxth	r2, r3
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	4619      	mov	r1, r3
 8001652:	4842      	ldr	r0, [pc, #264]	@ (800175c <StartTaskControle+0x238>)
 8001654:	f009 f934 	bl	800a8c0 <HAL_UART_Transmit_DMA>

  	  // Recieve data from CARLA

      osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 8001658:	4b46      	ldr	r3, [pc, #280]	@ (8001774 <StartTaskControle+0x250>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001660:	4618      	mov	r0, r3
 8001662:	f00b fb95 	bl	800cd90 <osMutexAcquire>
      xControlSignal.fThrottle = xControlAction.fTrottle;
 8001666:	4b42      	ldr	r3, [pc, #264]	@ (8001770 <StartTaskControle+0x24c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a43      	ldr	r2, [pc, #268]	@ (8001778 <StartTaskControle+0x254>)
 800166c:	6013      	str	r3, [r2, #0]
      xControlSignal.fBrake = xControlAction.fBrake;
 800166e:	4b40      	ldr	r3, [pc, #256]	@ (8001770 <StartTaskControle+0x24c>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	4a41      	ldr	r2, [pc, #260]	@ (8001778 <StartTaskControle+0x254>)
 8001674:	6053      	str	r3, [r2, #4]
      xControlSignal.fSteeringAngle = xControlAction.fSteeringAngle;
 8001676:	4b3e      	ldr	r3, [pc, #248]	@ (8001770 <StartTaskControle+0x24c>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	4a3f      	ldr	r2, [pc, #252]	@ (8001778 <StartTaskControle+0x254>)
 800167c:	6093      	str	r3, [r2, #8]
      xControlSignal.ucManualGearShift = xControlAction.ucManualGearShift;
 800167e:	4b3c      	ldr	r3, [pc, #240]	@ (8001770 <StartTaskControle+0x24c>)
 8001680:	7b9a      	ldrb	r2, [r3, #14]
 8001682:	4b3d      	ldr	r3, [pc, #244]	@ (8001778 <StartTaskControle+0x254>)
 8001684:	739a      	strb	r2, [r3, #14]
      xControlSignal.ucHandBrake = xControlAction.ucHandBrake;
 8001686:	4b3a      	ldr	r3, [pc, #232]	@ (8001770 <StartTaskControle+0x24c>)
 8001688:	7b1a      	ldrb	r2, [r3, #12]
 800168a:	4b3b      	ldr	r3, [pc, #236]	@ (8001778 <StartTaskControle+0x254>)
 800168c:	731a      	strb	r2, [r3, #12]
      xControlSignal.ucReverse = xControlAction.ucReverse;
 800168e:	4b38      	ldr	r3, [pc, #224]	@ (8001770 <StartTaskControle+0x24c>)
 8001690:	7b5a      	ldrb	r2, [r3, #13]
 8001692:	4b39      	ldr	r3, [pc, #228]	@ (8001778 <StartTaskControle+0x254>)
 8001694:	735a      	strb	r2, [r3, #13]
      xControlSignal.ucControlMode = AUTOWARE;
 8001696:	4b38      	ldr	r3, [pc, #224]	@ (8001778 <StartTaskControle+0x254>)
 8001698:	2201      	movs	r2, #1
 800169a:	741a      	strb	r2, [r3, #16]
      xControlSignal.ucGear = xVehicleStatus.ucGear;
 800169c:	4b37      	ldr	r3, [pc, #220]	@ (800177c <StartTaskControle+0x258>)
 800169e:	7b1a      	ldrb	r2, [r3, #12]
 80016a0:	4b35      	ldr	r3, [pc, #212]	@ (8001778 <StartTaskControle+0x254>)
 80016a2:	73da      	strb	r2, [r3, #15]
      xControlSignal.fLongSpeed = xVehicleStatus.xLongSpeed.fFloat;
 80016a4:	4b35      	ldr	r3, [pc, #212]	@ (800177c <StartTaskControle+0x258>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a33      	ldr	r2, [pc, #204]	@ (8001778 <StartTaskControle+0x254>)
 80016aa:	6153      	str	r3, [r2, #20]
      xControlSignal.fLatSpeed = xVehicleStatus.xLatSpeed.fFloat;
 80016ac:	4b33      	ldr	r3, [pc, #204]	@ (800177c <StartTaskControle+0x258>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	4a31      	ldr	r2, [pc, #196]	@ (8001778 <StartTaskControle+0x254>)
 80016b2:	6193      	str	r3, [r2, #24]
      xControlSignal.fHeadingRate = xVehicleStatus.xHeadingRate.fFloat;
 80016b4:	4b31      	ldr	r3, [pc, #196]	@ (800177c <StartTaskControle+0x258>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4a2f      	ldr	r2, [pc, #188]	@ (8001778 <StartTaskControle+0x254>)
 80016ba:	61d3      	str	r3, [r2, #28]
      osMutexRelease(MutexControlSignalHandle);
 80016bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001774 <StartTaskControle+0x250>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f00b fbb0 	bl	800ce26 <osMutexRelease>

      osThreadFlagsSet(TaskMicroAutowaHandle, 0x100);
 80016c6:	4b26      	ldr	r3, [pc, #152]	@ (8001760 <StartTaskControle+0x23c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016ce:	4618      	mov	r0, r3
 80016d0:	f00b f9ee 	bl	800cab0 <osThreadFlagsSet>
	}
	// Autonomous mode (AUTOWARE) routine -- END


	// Manual mode (MANUAL) routine -- START
    if(MANUAL == ucControlMode)
 80016d4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80016d8:	2b02      	cmp	r3, #2
 80016da:	f47f af43 	bne.w	8001564 <StartTaskControle+0x40>
    {
      // Setting driving mode lights
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2102      	movs	r1, #2
 80016e2:	4820      	ldr	r0, [pc, #128]	@ (8001764 <StartTaskControle+0x240>)
 80016e4:	f005 f83a 	bl	800675c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 1);
 80016e8:	2201      	movs	r2, #1
 80016ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016ee:	481e      	ldr	r0, [pc, #120]	@ (8001768 <StartTaskControle+0x244>)
 80016f0:	f005 f834 	bl	800675c <HAL_GPIO_WritePin>

      // Joystick read block -- START
      fJoyXAxis = fGetJoyPostition((unsigned int) uiADC1Buffer[0], uiX0, uiXMax, uiXMin);
 80016f4:	4b22      	ldr	r3, [pc, #136]	@ (8001780 <StartTaskControle+0x25c>)
 80016f6:	6818      	ldr	r0, [r3, #0]
 80016f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016fc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80016fe:	f000 fb25 	bl	8001d4c <fGetJoyPostition>
 8001702:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
      fJoyYAxis = fGetJoyPostition((unsigned int) uiADC1Buffer[1], uiY0, uiYMax, uiYMin);
 8001706:	4b1e      	ldr	r3, [pc, #120]	@ (8001780 <StartTaskControle+0x25c>)
 8001708:	6858      	ldr	r0, [r3, #4]
 800170a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800170c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800170e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001710:	f000 fb1c 	bl	8001d4c <fGetJoyPostition>
 8001714:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28

      osMutexAcquire(MutexControlActionHandle, osWaitForever);
 8001718:	4b14      	ldr	r3, [pc, #80]	@ (800176c <StartTaskControle+0x248>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001720:	4618      	mov	r0, r3
 8001722:	f00b fb35 	bl	800cd90 <osMutexAcquire>
      xControlAction.fTrottle = (fJoyYAxis > 0) ? fJoyYAxis*MAX_TROTTLE : 0.0;
 8001726:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800172a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800172e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001732:	dd01      	ble.n	8001738 <StartTaskControle+0x214>
 8001734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001736:	e001      	b.n	800173c <StartTaskControle+0x218>
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	4a0c      	ldr	r2, [pc, #48]	@ (8001770 <StartTaskControle+0x24c>)
 800173e:	6013      	str	r3, [r2, #0]
      xControlAction.fBrake = (fJoyYAxis < 0) ? -fJoyYAxis*MAX_BRAKE : 0.0;
 8001740:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001744:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174c:	d51c      	bpl.n	8001788 <StartTaskControle+0x264>
 800174e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001752:	eef1 7a67 	vneg.f32	s15, s15
 8001756:	e019      	b.n	800178c <StartTaskControle+0x268>
 8001758:	24001544 	.word	0x24001544
 800175c:	240015a8 	.word	0x240015a8
 8001760:	240014e8 	.word	0x240014e8
 8001764:	58021000 	.word	0x58021000
 8001768:	58020400 	.word	0x58020400
 800176c:	240014f0 	.word	0x240014f0
 8001770:	24001500 	.word	0x24001500
 8001774:	240014ec 	.word	0x240014ec
 8001778:	24001514 	.word	0x24001514
 800177c:	24001534 	.word	0x24001534
 8001780:	240014f8 	.word	0x240014f8
 8001784:	00000000 	.word	0x00000000
 8001788:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 8001784 <StartTaskControle+0x260>
 800178c:	4b3c      	ldr	r3, [pc, #240]	@ (8001880 <StartTaskControle+0x35c>)
 800178e:	edc3 7a01 	vstr	s15, [r3, #4]
      xControlAction.fSteeringAngle = fJoyXAxis*MAX_STEERING_ANGLE;
 8001792:	4a3b      	ldr	r2, [pc, #236]	@ (8001880 <StartTaskControle+0x35c>)
 8001794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001796:	6093      	str	r3, [r2, #8]
      xControlAction.ucManualGearShift = 1;
 8001798:	4b39      	ldr	r3, [pc, #228]	@ (8001880 <StartTaskControle+0x35c>)
 800179a:	2201      	movs	r2, #1
 800179c:	739a      	strb	r2, [r3, #14]
      xControlAction.ucHandBrake = 2;
 800179e:	4b38      	ldr	r3, [pc, #224]	@ (8001880 <StartTaskControle+0x35c>)
 80017a0:	2202      	movs	r2, #2
 80017a2:	731a      	strb	r2, [r3, #12]
      xControlAction.ucReverse = 3;
 80017a4:	4b36      	ldr	r3, [pc, #216]	@ (8001880 <StartTaskControle+0x35c>)
 80017a6:	2203      	movs	r2, #3
 80017a8:	735a      	strb	r2, [r3, #13]
      xControlAction.ucControlMode = MANUAL;
 80017aa:	4b35      	ldr	r3, [pc, #212]	@ (8001880 <StartTaskControle+0x35c>)
 80017ac:	2202      	movs	r2, #2
 80017ae:	741a      	strb	r2, [r3, #16]
      xControlAction.ucGear = 4;
 80017b0:	4b33      	ldr	r3, [pc, #204]	@ (8001880 <StartTaskControle+0x35c>)
 80017b2:	2204      	movs	r2, #4
 80017b4:	73da      	strb	r2, [r3, #15]

      vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 80017b6:	4b32      	ldr	r3, [pc, #200]	@ (8001880 <StartTaskControle+0x35c>)
 80017b8:	f107 020c 	add.w	r2, r7, #12
 80017bc:	9201      	str	r2, [sp, #4]
 80017be:	691a      	ldr	r2, [r3, #16]
 80017c0:	9200      	str	r2, [sp, #0]
 80017c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017c4:	f000 faf6 	bl	8001db4 <vGetStringFromControlAction>

	  osMutexRelease(MutexControlActionHandle);
 80017c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001884 <StartTaskControle+0x360>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f00b fb2a 	bl	800ce26 <osMutexRelease>

	  // Send cTxMsgToCarla to CARLA
	  if(huart2.gState == HAL_UART_STATE_READY)
 80017d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001888 <StartTaskControle+0x364>)
 80017d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017d8:	2b20      	cmp	r3, #32
 80017da:	d106      	bne.n	80017ea <StartTaskControle+0x2c6>
	  {
		HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	221a      	movs	r2, #26
 80017e2:	4619      	mov	r1, r3
 80017e4:	4828      	ldr	r0, [pc, #160]	@ (8001888 <StartTaskControle+0x364>)
 80017e6:	f009 f86b 	bl	800a8c0 <HAL_UART_Transmit_DMA>
	  }

	  // Wait CARLA full msg xVehicleStatusRx
	  uiFlags = osThreadFlagsWait(0x10000, osFlagsWaitAll, TIMEOUT_GET_CARLA_RX);
 80017ea:	2214      	movs	r2, #20
 80017ec:	2101      	movs	r1, #1
 80017ee:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80017f2:	f00b f9ab 	bl	800cb4c <osThreadFlagsWait>
 80017f6:	64b8      	str	r0, [r7, #72]	@ 0x48
	  // Timeout error
	  if(osFlagsErrorTimeout == uiFlags)
	  {
	  // Deu ruim timeout
	  }
	  uiFlags = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	64bb      	str	r3, [r7, #72]	@ 0x48

      // Empacota xControlSignal

      osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 80017fc:	4b23      	ldr	r3, [pc, #140]	@ (800188c <StartTaskControle+0x368>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001804:	4618      	mov	r0, r3
 8001806:	f00b fac3 	bl	800cd90 <osMutexAcquire>
      xControlSignal.fThrottle = xControlAction.fTrottle;
 800180a:	4b1d      	ldr	r3, [pc, #116]	@ (8001880 <StartTaskControle+0x35c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a20      	ldr	r2, [pc, #128]	@ (8001890 <StartTaskControle+0x36c>)
 8001810:	6013      	str	r3, [r2, #0]
      xControlSignal.fBrake = xControlAction.fBrake;
 8001812:	4b1b      	ldr	r3, [pc, #108]	@ (8001880 <StartTaskControle+0x35c>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	4a1e      	ldr	r2, [pc, #120]	@ (8001890 <StartTaskControle+0x36c>)
 8001818:	6053      	str	r3, [r2, #4]
      xControlSignal.fSteeringAngle = xControlAction.fSteeringAngle;
 800181a:	4b19      	ldr	r3, [pc, #100]	@ (8001880 <StartTaskControle+0x35c>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	4a1c      	ldr	r2, [pc, #112]	@ (8001890 <StartTaskControle+0x36c>)
 8001820:	6093      	str	r3, [r2, #8]
      xControlSignal.ucManualGearShift = xControlAction.ucManualGearShift;
 8001822:	4b17      	ldr	r3, [pc, #92]	@ (8001880 <StartTaskControle+0x35c>)
 8001824:	7b9a      	ldrb	r2, [r3, #14]
 8001826:	4b1a      	ldr	r3, [pc, #104]	@ (8001890 <StartTaskControle+0x36c>)
 8001828:	739a      	strb	r2, [r3, #14]
      xControlSignal.ucHandBrake = xControlAction.ucHandBrake;
 800182a:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <StartTaskControle+0x35c>)
 800182c:	7b1a      	ldrb	r2, [r3, #12]
 800182e:	4b18      	ldr	r3, [pc, #96]	@ (8001890 <StartTaskControle+0x36c>)
 8001830:	731a      	strb	r2, [r3, #12]
      xControlSignal.ucReverse = xControlAction.ucReverse;
 8001832:	4b13      	ldr	r3, [pc, #76]	@ (8001880 <StartTaskControle+0x35c>)
 8001834:	7b5a      	ldrb	r2, [r3, #13]
 8001836:	4b16      	ldr	r3, [pc, #88]	@ (8001890 <StartTaskControle+0x36c>)
 8001838:	735a      	strb	r2, [r3, #13]
      xControlSignal.ucControlMode = MANUAL;
 800183a:	4b15      	ldr	r3, [pc, #84]	@ (8001890 <StartTaskControle+0x36c>)
 800183c:	2202      	movs	r2, #2
 800183e:	741a      	strb	r2, [r3, #16]
      xControlSignal.ucGear = xVehicleStatus.ucGear;
 8001840:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <StartTaskControle+0x370>)
 8001842:	7b1a      	ldrb	r2, [r3, #12]
 8001844:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <StartTaskControle+0x36c>)
 8001846:	73da      	strb	r2, [r3, #15]
      xControlSignal.fLongSpeed = xVehicleStatus.xLongSpeed.fFloat;
 8001848:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <StartTaskControle+0x370>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a10      	ldr	r2, [pc, #64]	@ (8001890 <StartTaskControle+0x36c>)
 800184e:	6153      	str	r3, [r2, #20]
      xControlSignal.fLatSpeed = xVehicleStatus.xLatSpeed.fFloat;
 8001850:	4b10      	ldr	r3, [pc, #64]	@ (8001894 <StartTaskControle+0x370>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	4a0e      	ldr	r2, [pc, #56]	@ (8001890 <StartTaskControle+0x36c>)
 8001856:	6193      	str	r3, [r2, #24]
      xControlSignal.fHeadingRate = xVehicleStatus.xHeadingRate.fFloat;
 8001858:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <StartTaskControle+0x370>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	4a0c      	ldr	r2, [pc, #48]	@ (8001890 <StartTaskControle+0x36c>)
 800185e:	61d3      	str	r3, [r2, #28]
      osMutexRelease(MutexControlSignalHandle);
 8001860:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <StartTaskControle+0x368>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f00b fade 	bl	800ce26 <osMutexRelease>

      osThreadFlagsSet(TaskMicroAutowaHandle, 0x100);
 800186a:	4b0b      	ldr	r3, [pc, #44]	@ (8001898 <StartTaskControle+0x374>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001872:	4618      	mov	r0, r3
 8001874:	f00b f91c 	bl	800cab0 <osThreadFlagsSet>

      // WAIT
      osDelay(200);
 8001878:	20c8      	movs	r0, #200	@ 0xc8
 800187a:	f00b f9e8 	bl	800cc4e <osDelay>
	uiFlags = osThreadFlagsWait(0x11, osFlagsWaitAny, 0);
 800187e:	e671      	b.n	8001564 <StartTaskControle+0x40>
 8001880:	24001500 	.word	0x24001500
 8001884:	240014f0 	.word	0x240014f0
 8001888:	240015a8 	.word	0x240015a8
 800188c:	240014ec 	.word	0x240014ec
 8001890:	24001514 	.word	0x24001514
 8001894:	24001534 	.word	0x24001534
 8001898:	240014e8 	.word	0x240014e8

0800189c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018a0:	4b22      	ldr	r3, [pc, #136]	@ (800192c <MX_USART2_UART_Init+0x90>)
 80018a2:	4a23      	ldr	r2, [pc, #140]	@ (8001930 <MX_USART2_UART_Init+0x94>)
 80018a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018a6:	4b21      	ldr	r3, [pc, #132]	@ (800192c <MX_USART2_UART_Init+0x90>)
 80018a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ae:	4b1f      	ldr	r3, [pc, #124]	@ (800192c <MX_USART2_UART_Init+0x90>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018b4:	4b1d      	ldr	r3, [pc, #116]	@ (800192c <MX_USART2_UART_Init+0x90>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018ba:	4b1c      	ldr	r3, [pc, #112]	@ (800192c <MX_USART2_UART_Init+0x90>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018c0:	4b1a      	ldr	r3, [pc, #104]	@ (800192c <MX_USART2_UART_Init+0x90>)
 80018c2:	220c      	movs	r2, #12
 80018c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c6:	4b19      	ldr	r3, [pc, #100]	@ (800192c <MX_USART2_UART_Init+0x90>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018cc:	4b17      	ldr	r3, [pc, #92]	@ (800192c <MX_USART2_UART_Init+0x90>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018d2:	4b16      	ldr	r3, [pc, #88]	@ (800192c <MX_USART2_UART_Init+0x90>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018d8:	4b14      	ldr	r3, [pc, #80]	@ (800192c <MX_USART2_UART_Init+0x90>)
 80018da:	2200      	movs	r2, #0
 80018dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018de:	4b13      	ldr	r3, [pc, #76]	@ (800192c <MX_USART2_UART_Init+0x90>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018e4:	4811      	ldr	r0, [pc, #68]	@ (800192c <MX_USART2_UART_Init+0x90>)
 80018e6:	f008 ff9b 	bl	800a820 <HAL_UART_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80018f0:	f7ff fbd8 	bl	80010a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018f4:	2100      	movs	r1, #0
 80018f6:	480d      	ldr	r0, [pc, #52]	@ (800192c <MX_USART2_UART_Init+0x90>)
 80018f8:	f00a fef0 	bl	800c6dc <HAL_UARTEx_SetTxFifoThreshold>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001902:	f7ff fbcf 	bl	80010a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001906:	2100      	movs	r1, #0
 8001908:	4808      	ldr	r0, [pc, #32]	@ (800192c <MX_USART2_UART_Init+0x90>)
 800190a:	f00a ff25 	bl	800c758 <HAL_UARTEx_SetRxFifoThreshold>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001914:	f7ff fbc6 	bl	80010a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001918:	4804      	ldr	r0, [pc, #16]	@ (800192c <MX_USART2_UART_Init+0x90>)
 800191a:	f00a fea6 	bl	800c66a <HAL_UARTEx_DisableFifoMode>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001924:	f7ff fbbe 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	240015a8 	.word	0x240015a8
 8001930:	40004400 	.word	0x40004400

08001934 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001938:	4b22      	ldr	r3, [pc, #136]	@ (80019c4 <MX_USART3_UART_Init+0x90>)
 800193a:	4a23      	ldr	r2, [pc, #140]	@ (80019c8 <MX_USART3_UART_Init+0x94>)
 800193c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800193e:	4b21      	ldr	r3, [pc, #132]	@ (80019c4 <MX_USART3_UART_Init+0x90>)
 8001940:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001944:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001946:	4b1f      	ldr	r3, [pc, #124]	@ (80019c4 <MX_USART3_UART_Init+0x90>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800194c:	4b1d      	ldr	r3, [pc, #116]	@ (80019c4 <MX_USART3_UART_Init+0x90>)
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001952:	4b1c      	ldr	r3, [pc, #112]	@ (80019c4 <MX_USART3_UART_Init+0x90>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001958:	4b1a      	ldr	r3, [pc, #104]	@ (80019c4 <MX_USART3_UART_Init+0x90>)
 800195a:	220c      	movs	r2, #12
 800195c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195e:	4b19      	ldr	r3, [pc, #100]	@ (80019c4 <MX_USART3_UART_Init+0x90>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001964:	4b17      	ldr	r3, [pc, #92]	@ (80019c4 <MX_USART3_UART_Init+0x90>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800196a:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <MX_USART3_UART_Init+0x90>)
 800196c:	2200      	movs	r2, #0
 800196e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001970:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <MX_USART3_UART_Init+0x90>)
 8001972:	2200      	movs	r2, #0
 8001974:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001976:	4b13      	ldr	r3, [pc, #76]	@ (80019c4 <MX_USART3_UART_Init+0x90>)
 8001978:	2200      	movs	r2, #0
 800197a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800197c:	4811      	ldr	r0, [pc, #68]	@ (80019c4 <MX_USART3_UART_Init+0x90>)
 800197e:	f008 ff4f 	bl	800a820 <HAL_UART_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001988:	f7ff fb8c 	bl	80010a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800198c:	2100      	movs	r1, #0
 800198e:	480d      	ldr	r0, [pc, #52]	@ (80019c4 <MX_USART3_UART_Init+0x90>)
 8001990:	f00a fea4 	bl	800c6dc <HAL_UARTEx_SetTxFifoThreshold>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800199a:	f7ff fb83 	bl	80010a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800199e:	2100      	movs	r1, #0
 80019a0:	4808      	ldr	r0, [pc, #32]	@ (80019c4 <MX_USART3_UART_Init+0x90>)
 80019a2:	f00a fed9 	bl	800c758 <HAL_UARTEx_SetRxFifoThreshold>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80019ac:	f7ff fb7a 	bl	80010a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80019b0:	4804      	ldr	r0, [pc, #16]	@ (80019c4 <MX_USART3_UART_Init+0x90>)
 80019b2:	f00a fe5a 	bl	800c66a <HAL_UARTEx_DisableFifoMode>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80019bc:	f7ff fb72 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	2400163c 	.word	0x2400163c
 80019c8:	40004800 	.word	0x40004800

080019cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b0be      	sub	sp, #248	@ 0xf8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019e4:	f107 0320 	add.w	r3, r7, #32
 80019e8:	22c0      	movs	r2, #192	@ 0xc0
 80019ea:	2100      	movs	r1, #0
 80019ec:	4618      	mov	r0, r3
 80019ee:	f011 ffa3 	bl	8013938 <memset>
  if(uartHandle->Instance==USART2)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a6a      	ldr	r2, [pc, #424]	@ (8001ba0 <HAL_UART_MspInit+0x1d4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	f040 80e1 	bne.w	8001bc0 <HAL_UART_MspInit+0x1f4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019fe:	f04f 0202 	mov.w	r2, #2
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a10:	f107 0320 	add.w	r3, r7, #32
 8001a14:	4618      	mov	r0, r3
 8001a16:	f005 ff37 	bl	8007888 <HAL_RCCEx_PeriphCLKConfig>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001a20:	f7ff fb40 	bl	80010a4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a24:	4b5f      	ldr	r3, [pc, #380]	@ (8001ba4 <HAL_UART_MspInit+0x1d8>)
 8001a26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a2a:	4a5e      	ldr	r2, [pc, #376]	@ (8001ba4 <HAL_UART_MspInit+0x1d8>)
 8001a2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a30:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a34:	4b5b      	ldr	r3, [pc, #364]	@ (8001ba4 <HAL_UART_MspInit+0x1d8>)
 8001a36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3e:	61fb      	str	r3, [r7, #28]
 8001a40:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	4b58      	ldr	r3, [pc, #352]	@ (8001ba4 <HAL_UART_MspInit+0x1d8>)
 8001a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a48:	4a56      	ldr	r2, [pc, #344]	@ (8001ba4 <HAL_UART_MspInit+0x1d8>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a52:	4b54      	ldr	r3, [pc, #336]	@ (8001ba4 <HAL_UART_MspInit+0x1d8>)
 8001a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	61bb      	str	r3, [r7, #24]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a60:	4b50      	ldr	r3, [pc, #320]	@ (8001ba4 <HAL_UART_MspInit+0x1d8>)
 8001a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a66:	4a4f      	ldr	r2, [pc, #316]	@ (8001ba4 <HAL_UART_MspInit+0x1d8>)
 8001a68:	f043 0308 	orr.w	r3, r3, #8
 8001a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a70:	4b4c      	ldr	r3, [pc, #304]	@ (8001ba4 <HAL_UART_MspInit+0x1d8>)
 8001a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a7e:	2308      	movs	r3, #8
 8001a80:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a96:	2307      	movs	r3, #7
 8001a98:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4841      	ldr	r0, [pc, #260]	@ (8001ba8 <HAL_UART_MspInit+0x1dc>)
 8001aa4:	f004 fcaa 	bl	80063fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001aa8:	2320      	movs	r3, #32
 8001aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ac0:	2307      	movs	r3, #7
 8001ac2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001aca:	4619      	mov	r1, r3
 8001acc:	4837      	ldr	r0, [pc, #220]	@ (8001bac <HAL_UART_MspInit+0x1e0>)
 8001ace:	f004 fc95 	bl	80063fc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Stream1;
 8001ad2:	4b37      	ldr	r3, [pc, #220]	@ (8001bb0 <HAL_UART_MspInit+0x1e4>)
 8001ad4:	4a37      	ldr	r2, [pc, #220]	@ (8001bb4 <HAL_UART_MspInit+0x1e8>)
 8001ad6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001ad8:	4b35      	ldr	r3, [pc, #212]	@ (8001bb0 <HAL_UART_MspInit+0x1e4>)
 8001ada:	222b      	movs	r2, #43	@ 0x2b
 8001adc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ade:	4b34      	ldr	r3, [pc, #208]	@ (8001bb0 <HAL_UART_MspInit+0x1e4>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ae4:	4b32      	ldr	r3, [pc, #200]	@ (8001bb0 <HAL_UART_MspInit+0x1e4>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001aea:	4b31      	ldr	r3, [pc, #196]	@ (8001bb0 <HAL_UART_MspInit+0x1e4>)
 8001aec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001af0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001af2:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb0 <HAL_UART_MspInit+0x1e4>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001af8:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb0 <HAL_UART_MspInit+0x1e4>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001afe:	4b2c      	ldr	r3, [pc, #176]	@ (8001bb0 <HAL_UART_MspInit+0x1e4>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b04:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb0 <HAL_UART_MspInit+0x1e4>)
 8001b06:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001b0a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b0c:	4b28      	ldr	r3, [pc, #160]	@ (8001bb0 <HAL_UART_MspInit+0x1e4>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b12:	4827      	ldr	r0, [pc, #156]	@ (8001bb0 <HAL_UART_MspInit+0x1e4>)
 8001b14:	f001 fe36 	bl	8003784 <HAL_DMA_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 8001b1e:	f7ff fac1 	bl	80010a4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a22      	ldr	r2, [pc, #136]	@ (8001bb0 <HAL_UART_MspInit+0x1e4>)
 8001b26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001b2a:	4a21      	ldr	r2, [pc, #132]	@ (8001bb0 <HAL_UART_MspInit+0x1e4>)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA2_Stream2;
 8001b30:	4b21      	ldr	r3, [pc, #132]	@ (8001bb8 <HAL_UART_MspInit+0x1ec>)
 8001b32:	4a22      	ldr	r2, [pc, #136]	@ (8001bbc <HAL_UART_MspInit+0x1f0>)
 8001b34:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001b36:	4b20      	ldr	r3, [pc, #128]	@ (8001bb8 <HAL_UART_MspInit+0x1ec>)
 8001b38:	222c      	movs	r2, #44	@ 0x2c
 8001b3a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb8 <HAL_UART_MspInit+0x1ec>)
 8001b3e:	2240      	movs	r2, #64	@ 0x40
 8001b40:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b42:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb8 <HAL_UART_MspInit+0x1ec>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b48:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb8 <HAL_UART_MspInit+0x1ec>)
 8001b4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b4e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b50:	4b19      	ldr	r3, [pc, #100]	@ (8001bb8 <HAL_UART_MspInit+0x1ec>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b56:	4b18      	ldr	r3, [pc, #96]	@ (8001bb8 <HAL_UART_MspInit+0x1ec>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001b5c:	4b16      	ldr	r3, [pc, #88]	@ (8001bb8 <HAL_UART_MspInit+0x1ec>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b62:	4b15      	ldr	r3, [pc, #84]	@ (8001bb8 <HAL_UART_MspInit+0x1ec>)
 8001b64:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001b68:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b6a:	4b13      	ldr	r3, [pc, #76]	@ (8001bb8 <HAL_UART_MspInit+0x1ec>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001b70:	4811      	ldr	r0, [pc, #68]	@ (8001bb8 <HAL_UART_MspInit+0x1ec>)
 8001b72:	f001 fe07 	bl	8003784 <HAL_DMA_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <HAL_UART_MspInit+0x1b4>
    {
      Error_Handler();
 8001b7c:	f7ff fa92 	bl	80010a4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb8 <HAL_UART_MspInit+0x1ec>)
 8001b84:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001b86:	4a0c      	ldr	r2, [pc, #48]	@ (8001bb8 <HAL_UART_MspInit+0x1ec>)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2105      	movs	r1, #5
 8001b90:	2026      	movs	r0, #38	@ 0x26
 8001b92:	f001 fdcf 	bl	8003734 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b96:	2026      	movs	r0, #38	@ 0x26
 8001b98:	f001 fde6 	bl	8003768 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b9c:	e0c3      	b.n	8001d26 <HAL_UART_MspInit+0x35a>
 8001b9e:	bf00      	nop
 8001ba0:	40004400 	.word	0x40004400
 8001ba4:	58024400 	.word	0x58024400
 8001ba8:	58020000 	.word	0x58020000
 8001bac:	58020c00 	.word	0x58020c00
 8001bb0:	240016d0 	.word	0x240016d0
 8001bb4:	40020428 	.word	0x40020428
 8001bb8:	24001748 	.word	0x24001748
 8001bbc:	40020440 	.word	0x40020440
  else if(uartHandle->Instance==USART3)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a5a      	ldr	r2, [pc, #360]	@ (8001d30 <HAL_UART_MspInit+0x364>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	f040 80ad 	bne.w	8001d26 <HAL_UART_MspInit+0x35a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001bcc:	f04f 0202 	mov.w	r2, #2
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bde:	f107 0320 	add.w	r3, r7, #32
 8001be2:	4618      	mov	r0, r3
 8001be4:	f005 fe50 	bl	8007888 <HAL_RCCEx_PeriphCLKConfig>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_UART_MspInit+0x226>
      Error_Handler();
 8001bee:	f7ff fa59 	bl	80010a4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bf2:	4b50      	ldr	r3, [pc, #320]	@ (8001d34 <HAL_UART_MspInit+0x368>)
 8001bf4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bf8:	4a4e      	ldr	r2, [pc, #312]	@ (8001d34 <HAL_UART_MspInit+0x368>)
 8001bfa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bfe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c02:	4b4c      	ldr	r3, [pc, #304]	@ (8001d34 <HAL_UART_MspInit+0x368>)
 8001c04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c10:	4b48      	ldr	r3, [pc, #288]	@ (8001d34 <HAL_UART_MspInit+0x368>)
 8001c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c16:	4a47      	ldr	r2, [pc, #284]	@ (8001d34 <HAL_UART_MspInit+0x368>)
 8001c18:	f043 0308 	orr.w	r3, r3, #8
 8001c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c20:	4b44      	ldr	r3, [pc, #272]	@ (8001d34 <HAL_UART_MspInit+0x368>)
 8001c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001c2e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c48:	2307      	movs	r3, #7
 8001c4a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c4e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001c52:	4619      	mov	r1, r3
 8001c54:	4838      	ldr	r0, [pc, #224]	@ (8001d38 <HAL_UART_MspInit+0x36c>)
 8001c56:	f004 fbd1 	bl	80063fc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001c5a:	4b38      	ldr	r3, [pc, #224]	@ (8001d3c <HAL_UART_MspInit+0x370>)
 8001c5c:	4a38      	ldr	r2, [pc, #224]	@ (8001d40 <HAL_UART_MspInit+0x374>)
 8001c5e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001c60:	4b36      	ldr	r3, [pc, #216]	@ (8001d3c <HAL_UART_MspInit+0x370>)
 8001c62:	222d      	movs	r2, #45	@ 0x2d
 8001c64:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c66:	4b35      	ldr	r3, [pc, #212]	@ (8001d3c <HAL_UART_MspInit+0x370>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c6c:	4b33      	ldr	r3, [pc, #204]	@ (8001d3c <HAL_UART_MspInit+0x370>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c72:	4b32      	ldr	r3, [pc, #200]	@ (8001d3c <HAL_UART_MspInit+0x370>)
 8001c74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c78:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c7a:	4b30      	ldr	r3, [pc, #192]	@ (8001d3c <HAL_UART_MspInit+0x370>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c80:	4b2e      	ldr	r3, [pc, #184]	@ (8001d3c <HAL_UART_MspInit+0x370>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001c86:	4b2d      	ldr	r3, [pc, #180]	@ (8001d3c <HAL_UART_MspInit+0x370>)
 8001c88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c8c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001c8e:	4b2b      	ldr	r3, [pc, #172]	@ (8001d3c <HAL_UART_MspInit+0x370>)
 8001c90:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001c94:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c96:	4b29      	ldr	r3, [pc, #164]	@ (8001d3c <HAL_UART_MspInit+0x370>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001c9c:	4827      	ldr	r0, [pc, #156]	@ (8001d3c <HAL_UART_MspInit+0x370>)
 8001c9e:	f001 fd71 	bl	8003784 <HAL_DMA_Init>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <HAL_UART_MspInit+0x2e0>
      Error_Handler();
 8001ca8:	f7ff f9fc 	bl	80010a4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a23      	ldr	r2, [pc, #140]	@ (8001d3c <HAL_UART_MspInit+0x370>)
 8001cb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001cb4:	4a21      	ldr	r2, [pc, #132]	@ (8001d3c <HAL_UART_MspInit+0x370>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001cba:	4b22      	ldr	r3, [pc, #136]	@ (8001d44 <HAL_UART_MspInit+0x378>)
 8001cbc:	4a22      	ldr	r2, [pc, #136]	@ (8001d48 <HAL_UART_MspInit+0x37c>)
 8001cbe:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001cc0:	4b20      	ldr	r3, [pc, #128]	@ (8001d44 <HAL_UART_MspInit+0x378>)
 8001cc2:	222e      	movs	r2, #46	@ 0x2e
 8001cc4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d44 <HAL_UART_MspInit+0x378>)
 8001cc8:	2240      	movs	r2, #64	@ 0x40
 8001cca:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8001d44 <HAL_UART_MspInit+0x378>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d44 <HAL_UART_MspInit+0x378>)
 8001cd4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cd8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cda:	4b1a      	ldr	r3, [pc, #104]	@ (8001d44 <HAL_UART_MspInit+0x378>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ce0:	4b18      	ldr	r3, [pc, #96]	@ (8001d44 <HAL_UART_MspInit+0x378>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001ce6:	4b17      	ldr	r3, [pc, #92]	@ (8001d44 <HAL_UART_MspInit+0x378>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001cec:	4b15      	ldr	r3, [pc, #84]	@ (8001d44 <HAL_UART_MspInit+0x378>)
 8001cee:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001cf2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cf4:	4b13      	ldr	r3, [pc, #76]	@ (8001d44 <HAL_UART_MspInit+0x378>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001cfa:	4812      	ldr	r0, [pc, #72]	@ (8001d44 <HAL_UART_MspInit+0x378>)
 8001cfc:	f001 fd42 	bl	8003784 <HAL_DMA_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_UART_MspInit+0x33e>
      Error_Handler();
 8001d06:	f7ff f9cd 	bl	80010a4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d44 <HAL_UART_MspInit+0x378>)
 8001d0e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001d10:	4a0c      	ldr	r2, [pc, #48]	@ (8001d44 <HAL_UART_MspInit+0x378>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2108      	movs	r1, #8
 8001d1a:	2027      	movs	r0, #39	@ 0x27
 8001d1c:	f001 fd0a 	bl	8003734 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d20:	2027      	movs	r0, #39	@ 0x27
 8001d22:	f001 fd21 	bl	8003768 <HAL_NVIC_EnableIRQ>
}
 8001d26:	bf00      	nop
 8001d28:	37f8      	adds	r7, #248	@ 0xf8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40004800 	.word	0x40004800
 8001d34:	58024400 	.word	0x58024400
 8001d38:	58020c00 	.word	0x58020c00
 8001d3c:	240017c0 	.word	0x240017c0
 8001d40:	40020010 	.word	0x40020010
 8001d44:	24001838 	.word	0x24001838
 8001d48:	40020028 	.word	0x40020028

08001d4c <fGetJoyPostition>:
  * @param  uiRefMax: Analog value for axis maximum limit.
  * @param  uiRefMin: Analog value for axis minimum limit.
  * @retval Float value with joystick position between -1 and 1.
  */
float fGetJoyPostition(unsigned int uiValue, unsigned int uiRef0, unsigned int uiRefMax, unsigned int uiRefMin)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
 8001d58:	603b      	str	r3, [r7, #0]
  return ((int)(uiValue - uiRef0) > 0) ? ((int)(uiValue - uiRef0))/((float)(uiRefMax - uiRef0)) : ((int)(uiValue - uiRef0))/((float)(uiRef0 - uiRefMin));
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	dd10      	ble.n	8001d86 <fGetJoyPostition+0x3a>
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	ee07 3a90 	vmov	s15, r3
 8001d6e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	ee07 3a90 	vmov	s15, r3
 8001d7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d84:	e00f      	b.n	8001da6 <fGetJoyPostition+0x5a>
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	ee07 3a90 	vmov	s15, r3
 8001d90:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	ee07 3a90 	vmov	s15, r3
 8001d9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 8001da6:	eeb0 0a67 	vmov.f32	s0, s15
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <vGetStringFromControlAction>:
  * @param  xControlActionTx: Compressed data with information to CARLA.
  * @param  ucTxMsg: Formated msg to be transmitted.
  * @retval None.
  */
void vGetStringFromControlAction(control_action xControlActionTx, unsigned char * ucTxMsg)
{
 8001db4:	b084      	sub	sp, #16
 8001db6:	b480      	push	{r7}
 8001db8:	b085      	sub	sp, #20
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	f107 0c18 	add.w	ip, r7, #24
 8001dc0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  float_bytes xThrottle;
  float_bytes xSteering;
  float_bytes xBrake;

  xThrottle.fFloat = xControlActionTx.fTrottle;
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	60fb      	str	r3, [r7, #12]
  xSteering.fFloat = xControlActionTx.fSteeringAngle;
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	60bb      	str	r3, [r7, #8]
  xBrake.fFloat = xControlActionTx.fBrake;
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	607b      	str	r3, [r7, #4]

  ucTxMsg[0]  = (unsigned char)'#';
 8001dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dd2:	2223      	movs	r2, #35	@ 0x23
 8001dd4:	701a      	strb	r2, [r3, #0]
  ucTxMsg[1]  = (unsigned char)'T';
 8001dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dd8:	3301      	adds	r3, #1
 8001dda:	2254      	movs	r2, #84	@ 0x54
 8001ddc:	701a      	strb	r2, [r3, #0]
  ucTxMsg[2]  = xThrottle.ucBytes[0];
 8001dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001de0:	3302      	adds	r3, #2
 8001de2:	7b3a      	ldrb	r2, [r7, #12]
 8001de4:	701a      	strb	r2, [r3, #0]
  ucTxMsg[3]  = xThrottle.ucBytes[1];
 8001de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001de8:	3303      	adds	r3, #3
 8001dea:	7b7a      	ldrb	r2, [r7, #13]
 8001dec:	701a      	strb	r2, [r3, #0]
  ucTxMsg[4]  = xThrottle.ucBytes[2];
 8001dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001df0:	3304      	adds	r3, #4
 8001df2:	7bba      	ldrb	r2, [r7, #14]
 8001df4:	701a      	strb	r2, [r3, #0]
  ucTxMsg[5]  = xThrottle.ucBytes[3];
 8001df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001df8:	3305      	adds	r3, #5
 8001dfa:	7bfa      	ldrb	r2, [r7, #15]
 8001dfc:	701a      	strb	r2, [r3, #0]
  ucTxMsg[6]  = (unsigned char)'S';
 8001dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e00:	3306      	adds	r3, #6
 8001e02:	2253      	movs	r2, #83	@ 0x53
 8001e04:	701a      	strb	r2, [r3, #0]
  ucTxMsg[7]  = xSteering.ucBytes[0];
 8001e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e08:	3307      	adds	r3, #7
 8001e0a:	7a3a      	ldrb	r2, [r7, #8]
 8001e0c:	701a      	strb	r2, [r3, #0]
  ucTxMsg[8]  = xSteering.ucBytes[1];
 8001e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e10:	3308      	adds	r3, #8
 8001e12:	7a7a      	ldrb	r2, [r7, #9]
 8001e14:	701a      	strb	r2, [r3, #0]
  ucTxMsg[9]  = xSteering.ucBytes[2];
 8001e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e18:	3309      	adds	r3, #9
 8001e1a:	7aba      	ldrb	r2, [r7, #10]
 8001e1c:	701a      	strb	r2, [r3, #0]
  ucTxMsg[10] = xSteering.ucBytes[3];
 8001e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e20:	330a      	adds	r3, #10
 8001e22:	7afa      	ldrb	r2, [r7, #11]
 8001e24:	701a      	strb	r2, [r3, #0]
  ucTxMsg[11] = (unsigned char)'B';
 8001e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e28:	330b      	adds	r3, #11
 8001e2a:	2242      	movs	r2, #66	@ 0x42
 8001e2c:	701a      	strb	r2, [r3, #0]
  ucTxMsg[12] = xBrake.ucBytes[0];
 8001e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e30:	330c      	adds	r3, #12
 8001e32:	793a      	ldrb	r2, [r7, #4]
 8001e34:	701a      	strb	r2, [r3, #0]
  ucTxMsg[13] = xBrake.ucBytes[1];
 8001e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e38:	330d      	adds	r3, #13
 8001e3a:	797a      	ldrb	r2, [r7, #5]
 8001e3c:	701a      	strb	r2, [r3, #0]
  ucTxMsg[14] = xBrake.ucBytes[2];
 8001e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e40:	330e      	adds	r3, #14
 8001e42:	79ba      	ldrb	r2, [r7, #6]
 8001e44:	701a      	strb	r2, [r3, #0]
  ucTxMsg[15] = xBrake.ucBytes[3];
 8001e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e48:	330f      	adds	r3, #15
 8001e4a:	79fa      	ldrb	r2, [r7, #7]
 8001e4c:	701a      	strb	r2, [r3, #0]
  ucTxMsg[16] = (unsigned char)'H';
 8001e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e50:	3310      	adds	r3, #16
 8001e52:	2248      	movs	r2, #72	@ 0x48
 8001e54:	701a      	strb	r2, [r3, #0]
  ucTxMsg[17] = xControlActionTx.ucHandBrake;
 8001e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e58:	3311      	adds	r3, #17
 8001e5a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001e5e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[18] = (unsigned char)'R';
 8001e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e62:	3312      	adds	r3, #18
 8001e64:	2252      	movs	r2, #82	@ 0x52
 8001e66:	701a      	strb	r2, [r3, #0]
  ucTxMsg[19] = xControlActionTx.ucReverse;
 8001e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e6a:	3313      	adds	r3, #19
 8001e6c:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8001e70:	701a      	strb	r2, [r3, #0]
  ucTxMsg[20] = (unsigned char)'G';
 8001e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e74:	3314      	adds	r3, #20
 8001e76:	2247      	movs	r2, #71	@ 0x47
 8001e78:	701a      	strb	r2, [r3, #0]
  ucTxMsg[21] = xControlActionTx.ucGear;
 8001e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e7c:	3315      	adds	r3, #21
 8001e7e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001e82:	701a      	strb	r2, [r3, #0]
  ucTxMsg[22] = (unsigned char)'M';
 8001e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e86:	3316      	adds	r3, #22
 8001e88:	224d      	movs	r2, #77	@ 0x4d
 8001e8a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[23] = xControlActionTx.ucManualGearShift;
 8001e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e8e:	3317      	adds	r3, #23
 8001e90:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001e94:	701a      	strb	r2, [r3, #0]
  ucTxMsg[24] = (unsigned char)'$';
 8001e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e98:	3318      	adds	r3, #24
 8001e9a:	2224      	movs	r2, #36	@ 0x24
 8001e9c:	701a      	strb	r2, [r3, #0]
  ucTxMsg[25] = (unsigned char)'\0';
 8001e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ea0:	3319      	adds	r3, #25
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
  
}
 8001ea6:	bf00      	nop
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	b004      	add	sp, #16
 8001eb2:	4770      	bx	lr

08001eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001eb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001eec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001eb8:	f7ff faac 	bl	8001414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ebc:	480c      	ldr	r0, [pc, #48]	@ (8001ef0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ebe:	490d      	ldr	r1, [pc, #52]	@ (8001ef4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec4:	e002      	b.n	8001ecc <LoopCopyDataInit>

08001ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eca:	3304      	adds	r3, #4

08001ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed0:	d3f9      	bcc.n	8001ec6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8001efc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ed4:	4c0a      	ldr	r4, [pc, #40]	@ (8001f00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed8:	e001      	b.n	8001ede <LoopFillZerobss>

08001eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001edc:	3204      	adds	r2, #4

08001ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee0:	d3fb      	bcc.n	8001eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ee2:	f011 fde3 	bl	8013aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ee6:	f7fe fe7f 	bl	8000be8 <main>
  bx  lr
 8001eea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001eec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ef0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ef4:	240013ec 	.word	0x240013ec
  ldr r2, =_sidata
 8001ef8:	080158dc 	.word	0x080158dc
  ldr r2, =_sbss
 8001efc:	240013ec 	.word	0x240013ec
  ldr r4, =_ebss
 8001f00:	24033528 	.word	0x24033528

08001f04 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f04:	e7fe      	b.n	8001f04 <ADC3_IRQHandler>
	...

08001f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f0e:	2003      	movs	r0, #3
 8001f10:	f001 fc05 	bl	800371e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f14:	f005 faa0 	bl	8007458 <HAL_RCC_GetSysClockFreq>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	4b15      	ldr	r3, [pc, #84]	@ (8001f70 <HAL_Init+0x68>)
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	0a1b      	lsrs	r3, r3, #8
 8001f20:	f003 030f 	and.w	r3, r3, #15
 8001f24:	4913      	ldr	r1, [pc, #76]	@ (8001f74 <HAL_Init+0x6c>)
 8001f26:	5ccb      	ldrb	r3, [r1, r3]
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f30:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f32:	4b0f      	ldr	r3, [pc, #60]	@ (8001f70 <HAL_Init+0x68>)
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f74 <HAL_Init+0x6c>)
 8001f3c:	5cd3      	ldrb	r3, [r2, r3]
 8001f3e:	f003 031f 	and.w	r3, r3, #31
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	fa22 f303 	lsr.w	r3, r2, r3
 8001f48:	4a0b      	ldr	r2, [pc, #44]	@ (8001f78 <HAL_Init+0x70>)
 8001f4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f7c <HAL_Init+0x74>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f52:	200f      	movs	r0, #15
 8001f54:	f7ff f8ca 	bl	80010ec <HAL_InitTick>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e002      	b.n	8001f68 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f62:	f7ff f8a5 	bl	80010b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	58024400 	.word	0x58024400
 8001f74:	08013ed8 	.word	0x08013ed8
 8001f78:	24000004 	.word	0x24000004
 8001f7c:	24000000 	.word	0x24000000

08001f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f84:	4b06      	ldr	r3, [pc, #24]	@ (8001fa0 <HAL_IncTick+0x20>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <HAL_IncTick+0x24>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	4a04      	ldr	r2, [pc, #16]	@ (8001fa4 <HAL_IncTick+0x24>)
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	2400000c 	.word	0x2400000c
 8001fa4:	240018b0 	.word	0x240018b0

08001fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return uwTick;
 8001fac:	4b03      	ldr	r3, [pc, #12]	@ (8001fbc <HAL_GetTick+0x14>)
 8001fae:	681b      	ldr	r3, [r3, #0]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	240018b0 	.word	0x240018b0

08001fc0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001fc4:	4b03      	ldr	r3, [pc, #12]	@ (8001fd4 <HAL_GetREVID+0x14>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	0c1b      	lsrs	r3, r3, #16
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	5c001000 	.word	0x5c001000

08001fd8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	431a      	orrs	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	609a      	str	r2, [r3, #8]
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002034:	4618      	mov	r0, r3
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	3360      	adds	r3, #96	@ 0x60
 8002052:	461a      	mov	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	430b      	orrs	r3, r1
 800206e:	431a      	orrs	r2, r3
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002074:	bf00      	nop
 8002076:	371c      	adds	r7, #28
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	f003 031f 	and.w	r3, r3, #31
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	fa01 f303 	lsl.w	r3, r1, r3
 80020a0:	431a      	orrs	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	611a      	str	r2, [r3, #16]
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b087      	sub	sp, #28
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	3360      	adds	r3, #96	@ 0x60
 80020c2:	461a      	mov	r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	601a      	str	r2, [r3, #0]
  }
}
 80020dc:	bf00      	nop
 80020de:	371c      	adds	r7, #28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800210e:	b480      	push	{r7}
 8002110:	b087      	sub	sp, #28
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	3330      	adds	r3, #48	@ 0x30
 800211e:	461a      	mov	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	0a1b      	lsrs	r3, r3, #8
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	4413      	add	r3, r2
 800212c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	f003 031f 	and.w	r3, r3, #31
 8002138:	211f      	movs	r1, #31
 800213a:	fa01 f303 	lsl.w	r3, r1, r3
 800213e:	43db      	mvns	r3, r3
 8002140:	401a      	ands	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	0e9b      	lsrs	r3, r3, #26
 8002146:	f003 011f 	and.w	r1, r3, #31
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	fa01 f303 	lsl.w	r3, r1, r3
 8002154:	431a      	orrs	r2, r3
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800215a:	bf00      	nop
 800215c:	371c      	adds	r7, #28
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f023 0203 	bic.w	r2, r3, #3
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	60da      	str	r2, [r3, #12]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	3314      	adds	r3, #20
 800219c:	461a      	mov	r2, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	0e5b      	lsrs	r3, r3, #25
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	4413      	add	r3, r2
 80021aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	0d1b      	lsrs	r3, r3, #20
 80021b4:	f003 031f 	and.w	r3, r3, #31
 80021b8:	2107      	movs	r1, #7
 80021ba:	fa01 f303 	lsl.w	r3, r1, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	401a      	ands	r2, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	0d1b      	lsrs	r3, r3, #20
 80021c6:	f003 031f 	and.w	r3, r3, #31
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	fa01 f303 	lsl.w	r3, r1, r3
 80021d0:	431a      	orrs	r2, r3
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021d6:	bf00      	nop
 80021d8:	371c      	adds	r7, #28
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021fc:	43db      	mvns	r3, r3
 80021fe:	401a      	ands	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f003 0318 	and.w	r3, r3, #24
 8002206:	4908      	ldr	r1, [pc, #32]	@ (8002228 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002208:	40d9      	lsrs	r1, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	400b      	ands	r3, r1
 800220e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002212:	431a      	orrs	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800221a:	bf00      	nop
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	000fffff 	.word	0x000fffff

0800222c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 031f 	and.w	r3, r3, #31
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	4b04      	ldr	r3, [pc, #16]	@ (8002268 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002256:	4013      	ands	r3, r2
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6093      	str	r3, [r2, #8]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	5fffffc0 	.word	0x5fffffc0

0800226c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800227c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002280:	d101      	bne.n	8002286 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	4b05      	ldr	r3, [pc, #20]	@ (80022b8 <LL_ADC_EnableInternalRegulator+0x24>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	6fffffc0 	.word	0x6fffffc0

080022bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022d0:	d101      	bne.n	80022d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	4b05      	ldr	r3, [pc, #20]	@ (8002308 <LL_ADC_Enable+0x24>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	f043 0201 	orr.w	r2, r3, #1
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	7fffffc0 	.word	0x7fffffc0

0800230c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b01      	cmp	r3, #1
 800231e:	d101      	bne.n	8002324 <LL_ADC_IsEnabled+0x18>
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <LL_ADC_IsEnabled+0x1a>
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	4b05      	ldr	r3, [pc, #20]	@ (8002358 <LL_ADC_REG_StartConversion+0x24>)
 8002342:	4013      	ands	r3, r2
 8002344:	f043 0204 	orr.w	r2, r3, #4
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	7fffffc0 	.word	0x7fffffc0

0800235c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b04      	cmp	r3, #4
 800236e:	d101      	bne.n	8002374 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b08      	cmp	r3, #8
 8002394:	d101      	bne.n	800239a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	b089      	sub	sp, #36	@ 0x24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e18f      	b.n	80026e2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d109      	bne.n	80023e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7fe f999 	bl	8000708 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff3f 	bl	800226c <LL_ADC_IsDeepPowerDownEnabled>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d004      	beq.n	80023fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ff25 	bl	8002248 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff ff5a 	bl	80022bc <LL_ADC_IsInternalRegulatorEnabled>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d114      	bne.n	8002438 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff ff3e 	bl	8002294 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002418:	4b87      	ldr	r3, [pc, #540]	@ (8002638 <HAL_ADC_Init+0x290>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	099b      	lsrs	r3, r3, #6
 800241e:	4a87      	ldr	r2, [pc, #540]	@ (800263c <HAL_ADC_Init+0x294>)
 8002420:	fba2 2303 	umull	r2, r3, r2, r3
 8002424:	099b      	lsrs	r3, r3, #6
 8002426:	3301      	adds	r3, #1
 8002428:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800242a:	e002      	b.n	8002432 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	3b01      	subs	r3, #1
 8002430:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f9      	bne.n	800242c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff3d 	bl	80022bc <LL_ADC_IsInternalRegulatorEnabled>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10d      	bne.n	8002464 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800244c:	f043 0210 	orr.w	r2, r3, #16
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002458:	f043 0201 	orr.w	r2, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff77 	bl	800235c <LL_ADC_REG_IsConversionOngoing>
 800246e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002474:	f003 0310 	and.w	r3, r3, #16
 8002478:	2b00      	cmp	r3, #0
 800247a:	f040 8129 	bne.w	80026d0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2b00      	cmp	r3, #0
 8002482:	f040 8125 	bne.w	80026d0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800248a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800248e:	f043 0202 	orr.w	r2, r3, #2
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff ff36 	bl	800230c <LL_ADC_IsEnabled>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d136      	bne.n	8002514 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a65      	ldr	r2, [pc, #404]	@ (8002640 <HAL_ADC_Init+0x298>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d004      	beq.n	80024ba <HAL_ADC_Init+0x112>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a63      	ldr	r2, [pc, #396]	@ (8002644 <HAL_ADC_Init+0x29c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d10e      	bne.n	80024d8 <HAL_ADC_Init+0x130>
 80024ba:	4861      	ldr	r0, [pc, #388]	@ (8002640 <HAL_ADC_Init+0x298>)
 80024bc:	f7ff ff26 	bl	800230c <LL_ADC_IsEnabled>
 80024c0:	4604      	mov	r4, r0
 80024c2:	4860      	ldr	r0, [pc, #384]	@ (8002644 <HAL_ADC_Init+0x29c>)
 80024c4:	f7ff ff22 	bl	800230c <LL_ADC_IsEnabled>
 80024c8:	4603      	mov	r3, r0
 80024ca:	4323      	orrs	r3, r4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	bf0c      	ite	eq
 80024d0:	2301      	moveq	r3, #1
 80024d2:	2300      	movne	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	e008      	b.n	80024ea <HAL_ADC_Init+0x142>
 80024d8:	485b      	ldr	r0, [pc, #364]	@ (8002648 <HAL_ADC_Init+0x2a0>)
 80024da:	f7ff ff17 	bl	800230c <LL_ADC_IsEnabled>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bf0c      	ite	eq
 80024e4:	2301      	moveq	r3, #1
 80024e6:	2300      	movne	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d012      	beq.n	8002514 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a53      	ldr	r2, [pc, #332]	@ (8002640 <HAL_ADC_Init+0x298>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d004      	beq.n	8002502 <HAL_ADC_Init+0x15a>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a51      	ldr	r2, [pc, #324]	@ (8002644 <HAL_ADC_Init+0x29c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d101      	bne.n	8002506 <HAL_ADC_Init+0x15e>
 8002502:	4a52      	ldr	r2, [pc, #328]	@ (800264c <HAL_ADC_Init+0x2a4>)
 8002504:	e000      	b.n	8002508 <HAL_ADC_Init+0x160>
 8002506:	4a52      	ldr	r2, [pc, #328]	@ (8002650 <HAL_ADC_Init+0x2a8>)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4619      	mov	r1, r3
 800250e:	4610      	mov	r0, r2
 8002510:	f7ff fd62 	bl	8001fd8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002514:	f7ff fd54 	bl	8001fc0 <HAL_GetREVID>
 8002518:	4603      	mov	r3, r0
 800251a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800251e:	4293      	cmp	r3, r2
 8002520:	d914      	bls.n	800254c <HAL_ADC_Init+0x1a4>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2b10      	cmp	r3, #16
 8002528:	d110      	bne.n	800254c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	7d5b      	ldrb	r3, [r3, #21]
 800252e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002534:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800253a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	7f1b      	ldrb	r3, [r3, #28]
 8002540:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002542:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002544:	f043 030c 	orr.w	r3, r3, #12
 8002548:	61bb      	str	r3, [r7, #24]
 800254a:	e00d      	b.n	8002568 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	7d5b      	ldrb	r3, [r3, #21]
 8002550:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002556:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800255c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	7f1b      	ldrb	r3, [r3, #28]
 8002562:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	7f1b      	ldrb	r3, [r3, #28]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d106      	bne.n	800257e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	3b01      	subs	r3, #1
 8002576:	045b      	lsls	r3, r3, #17
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002582:	2b00      	cmp	r3, #0
 8002584:	d009      	beq.n	800259a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002592:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68da      	ldr	r2, [r3, #12]
 80025a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002654 <HAL_ADC_Init+0x2ac>)
 80025a2:	4013      	ands	r3, r2
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	69b9      	ldr	r1, [r7, #24]
 80025aa:	430b      	orrs	r3, r1
 80025ac:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff fed2 	bl	800235c <LL_ADC_REG_IsConversionOngoing>
 80025b8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fedf 	bl	8002382 <LL_ADC_INJ_IsConversionOngoing>
 80025c4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d15f      	bne.n	800268c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d15c      	bne.n	800268c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	7d1b      	ldrb	r3, [r3, #20]
 80025d6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002658 <HAL_ADC_Init+0x2b0>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6812      	ldr	r2, [r2, #0]
 80025ee:	69b9      	ldr	r1, [r7, #24]
 80025f0:	430b      	orrs	r3, r1
 80025f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d130      	bne.n	8002660 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002602:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691a      	ldr	r2, [r3, #16]
 800260a:	4b14      	ldr	r3, [pc, #80]	@ (800265c <HAL_ADC_Init+0x2b4>)
 800260c:	4013      	ands	r3, r2
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002612:	3a01      	subs	r2, #1
 8002614:	0411      	lsls	r1, r2, #16
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800261a:	4311      	orrs	r1, r2
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002620:	4311      	orrs	r1, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002626:	430a      	orrs	r2, r1
 8002628:	431a      	orrs	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	611a      	str	r2, [r3, #16]
 8002634:	e01c      	b.n	8002670 <HAL_ADC_Init+0x2c8>
 8002636:	bf00      	nop
 8002638:	24000000 	.word	0x24000000
 800263c:	053e2d63 	.word	0x053e2d63
 8002640:	40022000 	.word	0x40022000
 8002644:	40022100 	.word	0x40022100
 8002648:	58026000 	.word	0x58026000
 800264c:	40022300 	.word	0x40022300
 8002650:	58026300 	.word	0x58026300
 8002654:	fff0c003 	.word	0xfff0c003
 8002658:	ffffbffc 	.word	0xffffbffc
 800265c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0201 	bic.w	r2, r2, #1
 800266e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fd8c 	bl	80031a4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d10c      	bne.n	80026ae <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	f023 010f 	bic.w	r1, r3, #15
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	1e5a      	subs	r2, r3, #1
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80026ac:	e007      	b.n	80026be <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 020f 	bic.w	r2, r2, #15
 80026bc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c2:	f023 0303 	bic.w	r3, r3, #3
 80026c6:	f043 0201 	orr.w	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	655a      	str	r2, [r3, #84]	@ 0x54
 80026ce:	e007      	b.n	80026e0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d4:	f043 0210 	orr.w	r2, r3, #16
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3724      	adds	r7, #36	@ 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd90      	pop	{r4, r7, pc}
 80026ea:	bf00      	nop

080026ec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a55      	ldr	r2, [pc, #340]	@ (8002854 <HAL_ADC_Start_DMA+0x168>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d004      	beq.n	800270c <HAL_ADC_Start_DMA+0x20>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a54      	ldr	r2, [pc, #336]	@ (8002858 <HAL_ADC_Start_DMA+0x16c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d101      	bne.n	8002710 <HAL_ADC_Start_DMA+0x24>
 800270c:	4b53      	ldr	r3, [pc, #332]	@ (800285c <HAL_ADC_Start_DMA+0x170>)
 800270e:	e000      	b.n	8002712 <HAL_ADC_Start_DMA+0x26>
 8002710:	4b53      	ldr	r3, [pc, #332]	@ (8002860 <HAL_ADC_Start_DMA+0x174>)
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fd8a 	bl	800222c <LL_ADC_GetMultimode>
 8002718:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff fe1c 	bl	800235c <LL_ADC_REG_IsConversionOngoing>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	f040 808c 	bne.w	8002844 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002732:	2b01      	cmp	r3, #1
 8002734:	d101      	bne.n	800273a <HAL_ADC_Start_DMA+0x4e>
 8002736:	2302      	movs	r3, #2
 8002738:	e087      	b.n	800284a <HAL_ADC_Start_DMA+0x15e>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	2b05      	cmp	r3, #5
 800274c:	d002      	beq.n	8002754 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	2b09      	cmp	r3, #9
 8002752:	d170      	bne.n	8002836 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 fc07 	bl	8002f68 <ADC_Enable>
 800275a:	4603      	mov	r3, r0
 800275c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800275e:	7dfb      	ldrb	r3, [r7, #23]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d163      	bne.n	800282c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002768:	4b3e      	ldr	r3, [pc, #248]	@ (8002864 <HAL_ADC_Start_DMA+0x178>)
 800276a:	4013      	ands	r3, r2
 800276c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a37      	ldr	r2, [pc, #220]	@ (8002858 <HAL_ADC_Start_DMA+0x16c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d002      	beq.n	8002784 <HAL_ADC_Start_DMA+0x98>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	e000      	b.n	8002786 <HAL_ADC_Start_DMA+0x9a>
 8002784:	4b33      	ldr	r3, [pc, #204]	@ (8002854 <HAL_ADC_Start_DMA+0x168>)
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	4293      	cmp	r3, r2
 800278c:	d002      	beq.n	8002794 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d105      	bne.n	80027a0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002798:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d006      	beq.n	80027ba <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b0:	f023 0206 	bic.w	r2, r3, #6
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80027b8:	e002      	b.n	80027c0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027c4:	4a28      	ldr	r2, [pc, #160]	@ (8002868 <HAL_ADC_Start_DMA+0x17c>)
 80027c6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027cc:	4a27      	ldr	r2, [pc, #156]	@ (800286c <HAL_ADC_Start_DMA+0x180>)
 80027ce:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d4:	4a26      	ldr	r2, [pc, #152]	@ (8002870 <HAL_ADC_Start_DMA+0x184>)
 80027d6:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	221c      	movs	r2, #28
 80027de:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0210 	orr.w	r2, r2, #16
 80027f6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002800:	4619      	mov	r1, r3
 8002802:	4610      	mov	r0, r2
 8002804:	f7ff fcaf 	bl	8002166 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	3340      	adds	r3, #64	@ 0x40
 8002812:	4619      	mov	r1, r3
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f001 fb10 	bl	8003e3c <HAL_DMA_Start_IT>
 800281c:	4603      	mov	r3, r0
 800281e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fd85 	bl	8002334 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800282a:	e00d      	b.n	8002848 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002834:	e008      	b.n	8002848 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002842:	e001      	b.n	8002848 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002844:	2302      	movs	r3, #2
 8002846:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002848:	7dfb      	ldrb	r3, [r7, #23]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40022000 	.word	0x40022000
 8002858:	40022100 	.word	0x40022100
 800285c:	40022300 	.word	0x40022300
 8002860:	58026300 	.word	0x58026300
 8002864:	fffff0fe 	.word	0xfffff0fe
 8002868:	0800307d 	.word	0x0800307d
 800286c:	08003155 	.word	0x08003155
 8002870:	08003171 	.word	0x08003171

08002874 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028b0:	b590      	push	{r4, r7, lr}
 80028b2:	b0a1      	sub	sp, #132	@ 0x84
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4a65      	ldr	r2, [pc, #404]	@ (8002a60 <HAL_ADC_ConfigChannel+0x1b0>)
 80028ca:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_ADC_ConfigChannel+0x2a>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e32e      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x688>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff fd38 	bl	800235c <LL_ADC_REG_IsConversionOngoing>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f040 8313 	bne.w	8002f1a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	db2c      	blt.n	8002956 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002904:	2b00      	cmp	r3, #0
 8002906:	d108      	bne.n	800291a <HAL_ADC_ConfigChannel+0x6a>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	0e9b      	lsrs	r3, r3, #26
 800290e:	f003 031f 	and.w	r3, r3, #31
 8002912:	2201      	movs	r2, #1
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	e016      	b.n	8002948 <HAL_ADC_ConfigChannel+0x98>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002920:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002922:	fa93 f3a3 	rbit	r3, r3
 8002926:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002928:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800292a:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800292c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002932:	2320      	movs	r3, #32
 8002934:	e003      	b.n	800293e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002936:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002938:	fab3 f383 	clz	r3, r3
 800293c:	b2db      	uxtb	r3, r3
 800293e:	f003 031f 	and.w	r3, r3, #31
 8002942:	2201      	movs	r2, #1
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6812      	ldr	r2, [r2, #0]
 800294c:	69d1      	ldr	r1, [r2, #28]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6812      	ldr	r2, [r2, #0]
 8002952:	430b      	orrs	r3, r1
 8002954:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	6859      	ldr	r1, [r3, #4]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	f7ff fbd3 	bl	800210e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff fcf5 	bl	800235c <LL_ADC_REG_IsConversionOngoing>
 8002972:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fd02 	bl	8002382 <LL_ADC_INJ_IsConversionOngoing>
 800297e:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002980:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002982:	2b00      	cmp	r3, #0
 8002984:	f040 80b8 	bne.w	8002af8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002988:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800298a:	2b00      	cmp	r3, #0
 800298c:	f040 80b4 	bne.w	8002af8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	6819      	ldr	r1, [r3, #0]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	461a      	mov	r2, r3
 800299e:	f7ff fbf5 	bl	800218c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80029a2:	4b30      	ldr	r3, [pc, #192]	@ (8002a64 <HAL_ADC_ConfigChannel+0x1b4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80029aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029ae:	d10b      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x118>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	695a      	ldr	r2, [r3, #20]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	089b      	lsrs	r3, r3, #2
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	e01d      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x154>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f003 0310 	and.w	r3, r3, #16
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10b      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x13e>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	695a      	ldr	r2, [r3, #20]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	089b      	lsrs	r3, r3, #2
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	e00a      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x154>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	695a      	ldr	r2, [r3, #20]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	089b      	lsrs	r3, r3, #2
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d02c      	beq.n	8002a68 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	6919      	ldr	r1, [r3, #16]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a1c:	f7ff fb10 	bl	8002040 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	6919      	ldr	r1, [r3, #16]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	7e5b      	ldrb	r3, [r3, #25]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d102      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x186>
 8002a30:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002a34:	e000      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x188>
 8002a36:	2300      	movs	r3, #0
 8002a38:	461a      	mov	r2, r3
 8002a3a:	f7ff fb3a 	bl	80020b2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6919      	ldr	r1, [r3, #16]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	7e1b      	ldrb	r3, [r3, #24]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d102      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x1a4>
 8002a4e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a52:	e000      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x1a6>
 8002a54:	2300      	movs	r3, #0
 8002a56:	461a      	mov	r2, r3
 8002a58:	f7ff fb12 	bl	8002080 <LL_ADC_SetDataRightShift>
 8002a5c:	e04c      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x248>
 8002a5e:	bf00      	nop
 8002a60:	47ff0000 	.word	0x47ff0000
 8002a64:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a6e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	069b      	lsls	r3, r3, #26
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d107      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002a8a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	069b      	lsls	r3, r3, #26
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d107      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002aae:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ab6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	069b      	lsls	r3, r3, #26
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d107      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002ad2:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ada:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	069b      	lsls	r3, r3, #26
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d107      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002af6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff fc05 	bl	800230c <LL_ADC_IsEnabled>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f040 8211 	bne.w	8002f2c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	6819      	ldr	r1, [r3, #0]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	461a      	mov	r2, r3
 8002b18:	f7ff fb64 	bl	80021e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4aa1      	ldr	r2, [pc, #644]	@ (8002da8 <HAL_ADC_ConfigChannel+0x4f8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	f040 812e 	bne.w	8002d84 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10b      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x2a0>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	0e9b      	lsrs	r3, r3, #26
 8002b3e:	3301      	adds	r3, #1
 8002b40:	f003 031f 	and.w	r3, r3, #31
 8002b44:	2b09      	cmp	r3, #9
 8002b46:	bf94      	ite	ls
 8002b48:	2301      	movls	r3, #1
 8002b4a:	2300      	movhi	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	e019      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x2d4>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b58:	fa93 f3a3 	rbit	r3, r3
 8002b5c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b60:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002b62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002b68:	2320      	movs	r3, #32
 8002b6a:	e003      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002b6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b6e:	fab3 f383 	clz	r3, r3
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	3301      	adds	r3, #1
 8002b76:	f003 031f 	and.w	r3, r3, #31
 8002b7a:	2b09      	cmp	r3, #9
 8002b7c:	bf94      	ite	ls
 8002b7e:	2301      	movls	r3, #1
 8002b80:	2300      	movhi	r3, #0
 8002b82:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d079      	beq.n	8002c7c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d107      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x2f4>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	0e9b      	lsrs	r3, r3, #26
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	069b      	lsls	r3, r3, #26
 8002b9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ba2:	e015      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x320>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bac:	fa93 f3a3 	rbit	r3, r3
 8002bb0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002bb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bb4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002bb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002bbc:	2320      	movs	r3, #32
 8002bbe:	e003      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002bc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bc2:	fab3 f383 	clz	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	3301      	adds	r3, #1
 8002bca:	069b      	lsls	r3, r3, #26
 8002bcc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d109      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x340>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	0e9b      	lsrs	r3, r3, #26
 8002be2:	3301      	adds	r3, #1
 8002be4:	f003 031f 	and.w	r3, r3, #31
 8002be8:	2101      	movs	r1, #1
 8002bea:	fa01 f303 	lsl.w	r3, r1, r3
 8002bee:	e017      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x370>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c00:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002c02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002c08:	2320      	movs	r3, #32
 8002c0a:	e003      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002c0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c0e:	fab3 f383 	clz	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	3301      	adds	r3, #1
 8002c16:	f003 031f 	and.w	r3, r3, #31
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c20:	ea42 0103 	orr.w	r1, r2, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10a      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x396>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	0e9b      	lsrs	r3, r3, #26
 8002c36:	3301      	adds	r3, #1
 8002c38:	f003 021f 	and.w	r2, r3, #31
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	4413      	add	r3, r2
 8002c42:	051b      	lsls	r3, r3, #20
 8002c44:	e018      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x3c8>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c4e:	fa93 f3a3 	rbit	r3, r3
 8002c52:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c56:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002c5e:	2320      	movs	r3, #32
 8002c60:	e003      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8002c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c64:	fab3 f383 	clz	r3, r3
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	f003 021f 	and.w	r2, r3, #31
 8002c70:	4613      	mov	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4413      	add	r3, r2
 8002c76:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	e07e      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d107      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x3e8>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	0e9b      	lsrs	r3, r3, #26
 8002c8e:	3301      	adds	r3, #1
 8002c90:	069b      	lsls	r3, r3, #26
 8002c92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c96:	e015      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x414>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca0:	fa93 f3a3 	rbit	r3, r3
 8002ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002cb0:	2320      	movs	r3, #32
 8002cb2:	e003      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb6:	fab3 f383 	clz	r3, r3
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	069b      	lsls	r3, r3, #26
 8002cc0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d109      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x434>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	0e9b      	lsrs	r3, r3, #26
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	2101      	movs	r1, #1
 8002cde:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce2:	e017      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x464>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	fa93 f3a3 	rbit	r3, r3
 8002cf0:	61bb      	str	r3, [r7, #24]
  return result;
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002cfc:	2320      	movs	r3, #32
 8002cfe:	e003      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	fab3 f383 	clz	r3, r3
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	3301      	adds	r3, #1
 8002d0a:	f003 031f 	and.w	r3, r3, #31
 8002d0e:	2101      	movs	r1, #1
 8002d10:	fa01 f303 	lsl.w	r3, r1, r3
 8002d14:	ea42 0103 	orr.w	r1, r2, r3
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10d      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x490>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	0e9b      	lsrs	r3, r3, #26
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	f003 021f 	and.w	r2, r3, #31
 8002d30:	4613      	mov	r3, r2
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	4413      	add	r3, r2
 8002d36:	3b1e      	subs	r3, #30
 8002d38:	051b      	lsls	r3, r3, #20
 8002d3a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d3e:	e01b      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x4c8>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	fa93 f3a3 	rbit	r3, r3
 8002d4c:	60fb      	str	r3, [r7, #12]
  return result;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002d58:	2320      	movs	r3, #32
 8002d5a:	e003      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	3301      	adds	r3, #1
 8002d66:	f003 021f 	and.w	r2, r3, #31
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	4413      	add	r3, r2
 8002d70:	3b1e      	subs	r3, #30
 8002d72:	051b      	lsls	r3, r3, #20
 8002d74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	6892      	ldr	r2, [r2, #8]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	f7ff fa04 	bl	800218c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f280 80cf 	bge.w	8002f2c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a06      	ldr	r2, [pc, #24]	@ (8002dac <HAL_ADC_ConfigChannel+0x4fc>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d004      	beq.n	8002da2 <HAL_ADC_ConfigChannel+0x4f2>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a04      	ldr	r2, [pc, #16]	@ (8002db0 <HAL_ADC_ConfigChannel+0x500>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d10a      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x508>
 8002da2:	4b04      	ldr	r3, [pc, #16]	@ (8002db4 <HAL_ADC_ConfigChannel+0x504>)
 8002da4:	e009      	b.n	8002dba <HAL_ADC_ConfigChannel+0x50a>
 8002da6:	bf00      	nop
 8002da8:	47ff0000 	.word	0x47ff0000
 8002dac:	40022000 	.word	0x40022000
 8002db0:	40022100 	.word	0x40022100
 8002db4:	40022300 	.word	0x40022300
 8002db8:	4b61      	ldr	r3, [pc, #388]	@ (8002f40 <HAL_ADC_ConfigChannel+0x690>)
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff f932 	bl	8002024 <LL_ADC_GetCommonPathInternalCh>
 8002dc0:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a5f      	ldr	r2, [pc, #380]	@ (8002f44 <HAL_ADC_ConfigChannel+0x694>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d004      	beq.n	8002dd6 <HAL_ADC_ConfigChannel+0x526>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a5d      	ldr	r2, [pc, #372]	@ (8002f48 <HAL_ADC_ConfigChannel+0x698>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d10e      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x544>
 8002dd6:	485b      	ldr	r0, [pc, #364]	@ (8002f44 <HAL_ADC_ConfigChannel+0x694>)
 8002dd8:	f7ff fa98 	bl	800230c <LL_ADC_IsEnabled>
 8002ddc:	4604      	mov	r4, r0
 8002dde:	485a      	ldr	r0, [pc, #360]	@ (8002f48 <HAL_ADC_ConfigChannel+0x698>)
 8002de0:	f7ff fa94 	bl	800230c <LL_ADC_IsEnabled>
 8002de4:	4603      	mov	r3, r0
 8002de6:	4323      	orrs	r3, r4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	bf0c      	ite	eq
 8002dec:	2301      	moveq	r3, #1
 8002dee:	2300      	movne	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	e008      	b.n	8002e06 <HAL_ADC_ConfigChannel+0x556>
 8002df4:	4855      	ldr	r0, [pc, #340]	@ (8002f4c <HAL_ADC_ConfigChannel+0x69c>)
 8002df6:	f7ff fa89 	bl	800230c <LL_ADC_IsEnabled>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d07d      	beq.n	8002f06 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a50      	ldr	r2, [pc, #320]	@ (8002f50 <HAL_ADC_ConfigChannel+0x6a0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d130      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x5c6>
 8002e14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d12b      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a4a      	ldr	r2, [pc, #296]	@ (8002f4c <HAL_ADC_ConfigChannel+0x69c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	f040 8081 	bne.w	8002f2c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a45      	ldr	r2, [pc, #276]	@ (8002f44 <HAL_ADC_ConfigChannel+0x694>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d004      	beq.n	8002e3e <HAL_ADC_ConfigChannel+0x58e>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a43      	ldr	r2, [pc, #268]	@ (8002f48 <HAL_ADC_ConfigChannel+0x698>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d101      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x592>
 8002e3e:	4a45      	ldr	r2, [pc, #276]	@ (8002f54 <HAL_ADC_ConfigChannel+0x6a4>)
 8002e40:	e000      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x594>
 8002e42:	4a3f      	ldr	r2, [pc, #252]	@ (8002f40 <HAL_ADC_ConfigChannel+0x690>)
 8002e44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e46:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	f7ff f8d6 	bl	8001ffe <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e52:	4b41      	ldr	r3, [pc, #260]	@ (8002f58 <HAL_ADC_ConfigChannel+0x6a8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	099b      	lsrs	r3, r3, #6
 8002e58:	4a40      	ldr	r2, [pc, #256]	@ (8002f5c <HAL_ADC_ConfigChannel+0x6ac>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	099b      	lsrs	r3, r3, #6
 8002e60:	3301      	adds	r3, #1
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002e66:	e002      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1f9      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e74:	e05a      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a39      	ldr	r2, [pc, #228]	@ (8002f60 <HAL_ADC_ConfigChannel+0x6b0>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d11e      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x60e>
 8002e80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d119      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a2f      	ldr	r2, [pc, #188]	@ (8002f4c <HAL_ADC_ConfigChannel+0x69c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d14b      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a2a      	ldr	r2, [pc, #168]	@ (8002f44 <HAL_ADC_ConfigChannel+0x694>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d004      	beq.n	8002ea8 <HAL_ADC_ConfigChannel+0x5f8>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a29      	ldr	r2, [pc, #164]	@ (8002f48 <HAL_ADC_ConfigChannel+0x698>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d101      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x5fc>
 8002ea8:	4a2a      	ldr	r2, [pc, #168]	@ (8002f54 <HAL_ADC_ConfigChannel+0x6a4>)
 8002eaa:	e000      	b.n	8002eae <HAL_ADC_ConfigChannel+0x5fe>
 8002eac:	4a24      	ldr	r2, [pc, #144]	@ (8002f40 <HAL_ADC_ConfigChannel+0x690>)
 8002eae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eb0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	f7ff f8a1 	bl	8001ffe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ebc:	e036      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a28      	ldr	r2, [pc, #160]	@ (8002f64 <HAL_ADC_ConfigChannel+0x6b4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d131      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x67c>
 8002ec8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d12c      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8002f4c <HAL_ADC_ConfigChannel+0x69c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d127      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a18      	ldr	r2, [pc, #96]	@ (8002f44 <HAL_ADC_ConfigChannel+0x694>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d004      	beq.n	8002ef0 <HAL_ADC_ConfigChannel+0x640>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a17      	ldr	r2, [pc, #92]	@ (8002f48 <HAL_ADC_ConfigChannel+0x698>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d101      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x644>
 8002ef0:	4a18      	ldr	r2, [pc, #96]	@ (8002f54 <HAL_ADC_ConfigChannel+0x6a4>)
 8002ef2:	e000      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x646>
 8002ef4:	4a12      	ldr	r2, [pc, #72]	@ (8002f40 <HAL_ADC_ConfigChannel+0x690>)
 8002ef6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ef8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002efc:	4619      	mov	r1, r3
 8002efe:	4610      	mov	r0, r2
 8002f00:	f7ff f87d 	bl	8001ffe <LL_ADC_SetCommonPathInternalCh>
 8002f04:	e012      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0a:	f043 0220 	orr.w	r2, r3, #32
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002f18:	e008      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f1e:	f043 0220 	orr.w	r2, r3, #32
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f34:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3784      	adds	r7, #132	@ 0x84
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd90      	pop	{r4, r7, pc}
 8002f40:	58026300 	.word	0x58026300
 8002f44:	40022000 	.word	0x40022000
 8002f48:	40022100 	.word	0x40022100
 8002f4c:	58026000 	.word	0x58026000
 8002f50:	cb840000 	.word	0xcb840000
 8002f54:	40022300 	.word	0x40022300
 8002f58:	24000000 	.word	0x24000000
 8002f5c:	053e2d63 	.word	0x053e2d63
 8002f60:	c7520000 	.word	0xc7520000
 8002f64:	cfb80000 	.word	0xcfb80000

08002f68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff f9c9 	bl	800230c <LL_ADC_IsEnabled>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d16e      	bne.n	800305e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	4b38      	ldr	r3, [pc, #224]	@ (8003068 <ADC_Enable+0x100>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00d      	beq.n	8002faa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f92:	f043 0210 	orr.w	r2, r3, #16
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9e:	f043 0201 	orr.w	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e05a      	b.n	8003060 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff f998 	bl	80022e4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002fb4:	f7fe fff8 	bl	8001fa8 <HAL_GetTick>
 8002fb8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a2b      	ldr	r2, [pc, #172]	@ (800306c <ADC_Enable+0x104>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d004      	beq.n	8002fce <ADC_Enable+0x66>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a29      	ldr	r2, [pc, #164]	@ (8003070 <ADC_Enable+0x108>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d101      	bne.n	8002fd2 <ADC_Enable+0x6a>
 8002fce:	4b29      	ldr	r3, [pc, #164]	@ (8003074 <ADC_Enable+0x10c>)
 8002fd0:	e000      	b.n	8002fd4 <ADC_Enable+0x6c>
 8002fd2:	4b29      	ldr	r3, [pc, #164]	@ (8003078 <ADC_Enable+0x110>)
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff f929 	bl	800222c <LL_ADC_GetMultimode>
 8002fda:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a23      	ldr	r2, [pc, #140]	@ (8003070 <ADC_Enable+0x108>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d002      	beq.n	8002fec <ADC_Enable+0x84>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	e000      	b.n	8002fee <ADC_Enable+0x86>
 8002fec:	4b1f      	ldr	r3, [pc, #124]	@ (800306c <ADC_Enable+0x104>)
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6812      	ldr	r2, [r2, #0]
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d02c      	beq.n	8003050 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d130      	bne.n	800305e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ffc:	e028      	b.n	8003050 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff f982 	bl	800230c <LL_ADC_IsEnabled>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d104      	bne.n	8003018 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff f966 	bl	80022e4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003018:	f7fe ffc6 	bl	8001fa8 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d914      	bls.n	8003050 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b01      	cmp	r3, #1
 8003032:	d00d      	beq.n	8003050 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003038:	f043 0210 	orr.w	r2, r3, #16
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003044:	f043 0201 	orr.w	r2, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e007      	b.n	8003060 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b01      	cmp	r3, #1
 800305c:	d1cf      	bne.n	8002ffe <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	8000003f 	.word	0x8000003f
 800306c:	40022000 	.word	0x40022000
 8003070:	40022100 	.word	0x40022100
 8003074:	40022300 	.word	0x40022300
 8003078:	58026300 	.word	0x58026300

0800307c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003088:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800308e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003092:	2b00      	cmp	r3, #0
 8003094:	d14b      	bne.n	800312e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800309a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0308 	and.w	r3, r3, #8
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d021      	beq.n	80030f4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff f817 	bl	80020e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d032      	beq.n	8003126 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d12b      	bne.n	8003126 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d11f      	bne.n	8003126 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ea:	f043 0201 	orr.w	r2, r3, #1
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	655a      	str	r2, [r3, #84]	@ 0x54
 80030f2:	e018      	b.n	8003126 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d111      	bne.n	8003126 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003106:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003112:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d105      	bne.n	8003126 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800311e:	f043 0201 	orr.w	r2, r3, #1
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f7ff fba4 	bl	8002874 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800312c:	e00e      	b.n	800314c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003132:	f003 0310 	and.w	r3, r3, #16
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f7ff fbae 	bl	800289c <HAL_ADC_ErrorCallback>
}
 8003140:	e004      	b.n	800314c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	4798      	blx	r3
}
 800314c:	bf00      	nop
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003160:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f7ff fb90 	bl	8002888 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003168:	bf00      	nop
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800317c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003182:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318e:	f043 0204 	orr.w	r2, r3, #4
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f7ff fb80 	bl	800289c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a7a      	ldr	r2, [pc, #488]	@ (800339c <ADC_ConfigureBoostMode+0x1f8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d004      	beq.n	80031c0 <ADC_ConfigureBoostMode+0x1c>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a79      	ldr	r2, [pc, #484]	@ (80033a0 <ADC_ConfigureBoostMode+0x1fc>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d109      	bne.n	80031d4 <ADC_ConfigureBoostMode+0x30>
 80031c0:	4b78      	ldr	r3, [pc, #480]	@ (80033a4 <ADC_ConfigureBoostMode+0x200>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bf14      	ite	ne
 80031cc:	2301      	movne	r3, #1
 80031ce:	2300      	moveq	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	e008      	b.n	80031e6 <ADC_ConfigureBoostMode+0x42>
 80031d4:	4b74      	ldr	r3, [pc, #464]	@ (80033a8 <ADC_ConfigureBoostMode+0x204>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	bf14      	ite	ne
 80031e0:	2301      	movne	r3, #1
 80031e2:	2300      	moveq	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d01c      	beq.n	8003224 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80031ea:	f004 faaf 	bl	800774c <HAL_RCC_GetHCLKFreq>
 80031ee:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80031f8:	d010      	beq.n	800321c <ADC_ConfigureBoostMode+0x78>
 80031fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80031fe:	d873      	bhi.n	80032e8 <ADC_ConfigureBoostMode+0x144>
 8003200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003204:	d002      	beq.n	800320c <ADC_ConfigureBoostMode+0x68>
 8003206:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800320a:	d16d      	bne.n	80032e8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	0c1b      	lsrs	r3, r3, #16
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	fbb2 f3f3 	udiv	r3, r2, r3
 8003218:	60fb      	str	r3, [r7, #12]
        break;
 800321a:	e068      	b.n	80032ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	089b      	lsrs	r3, r3, #2
 8003220:	60fb      	str	r3, [r7, #12]
        break;
 8003222:	e064      	b.n	80032ee <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003224:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003228:	f04f 0100 	mov.w	r1, #0
 800322c:	f005 fd36 	bl	8008c9c <HAL_RCCEx_GetPeriphCLKFreq>
 8003230:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800323a:	d051      	beq.n	80032e0 <ADC_ConfigureBoostMode+0x13c>
 800323c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003240:	d854      	bhi.n	80032ec <ADC_ConfigureBoostMode+0x148>
 8003242:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003246:	d047      	beq.n	80032d8 <ADC_ConfigureBoostMode+0x134>
 8003248:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800324c:	d84e      	bhi.n	80032ec <ADC_ConfigureBoostMode+0x148>
 800324e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003252:	d03d      	beq.n	80032d0 <ADC_ConfigureBoostMode+0x12c>
 8003254:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003258:	d848      	bhi.n	80032ec <ADC_ConfigureBoostMode+0x148>
 800325a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800325e:	d033      	beq.n	80032c8 <ADC_ConfigureBoostMode+0x124>
 8003260:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003264:	d842      	bhi.n	80032ec <ADC_ConfigureBoostMode+0x148>
 8003266:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800326a:	d029      	beq.n	80032c0 <ADC_ConfigureBoostMode+0x11c>
 800326c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003270:	d83c      	bhi.n	80032ec <ADC_ConfigureBoostMode+0x148>
 8003272:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003276:	d01a      	beq.n	80032ae <ADC_ConfigureBoostMode+0x10a>
 8003278:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800327c:	d836      	bhi.n	80032ec <ADC_ConfigureBoostMode+0x148>
 800327e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003282:	d014      	beq.n	80032ae <ADC_ConfigureBoostMode+0x10a>
 8003284:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003288:	d830      	bhi.n	80032ec <ADC_ConfigureBoostMode+0x148>
 800328a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800328e:	d00e      	beq.n	80032ae <ADC_ConfigureBoostMode+0x10a>
 8003290:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003294:	d82a      	bhi.n	80032ec <ADC_ConfigureBoostMode+0x148>
 8003296:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800329a:	d008      	beq.n	80032ae <ADC_ConfigureBoostMode+0x10a>
 800329c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80032a0:	d824      	bhi.n	80032ec <ADC_ConfigureBoostMode+0x148>
 80032a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80032a6:	d002      	beq.n	80032ae <ADC_ConfigureBoostMode+0x10a>
 80032a8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80032ac:	d11e      	bne.n	80032ec <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	0c9b      	lsrs	r3, r3, #18
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032bc:	60fb      	str	r3, [r7, #12]
        break;
 80032be:	e016      	b.n	80032ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	091b      	lsrs	r3, r3, #4
 80032c4:	60fb      	str	r3, [r7, #12]
        break;
 80032c6:	e012      	b.n	80032ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	60fb      	str	r3, [r7, #12]
        break;
 80032ce:	e00e      	b.n	80032ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	099b      	lsrs	r3, r3, #6
 80032d4:	60fb      	str	r3, [r7, #12]
        break;
 80032d6:	e00a      	b.n	80032ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	09db      	lsrs	r3, r3, #7
 80032dc:	60fb      	str	r3, [r7, #12]
        break;
 80032de:	e006      	b.n	80032ee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	0a1b      	lsrs	r3, r3, #8
 80032e4:	60fb      	str	r3, [r7, #12]
        break;
 80032e6:	e002      	b.n	80032ee <ADC_ConfigureBoostMode+0x14a>
        break;
 80032e8:	bf00      	nop
 80032ea:	e000      	b.n	80032ee <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80032ec:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80032ee:	f7fe fe67 	bl	8001fc0 <HAL_GetREVID>
 80032f2:	4603      	mov	r3, r0
 80032f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d815      	bhi.n	8003328 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4a2b      	ldr	r2, [pc, #172]	@ (80033ac <ADC_ConfigureBoostMode+0x208>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d908      	bls.n	8003316 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003312:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003314:	e03e      	b.n	8003394 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003324:	609a      	str	r2, [r3, #8]
}
 8003326:	e035      	b.n	8003394 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	085b      	lsrs	r3, r3, #1
 800332c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4a1f      	ldr	r2, [pc, #124]	@ (80033b0 <ADC_ConfigureBoostMode+0x20c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d808      	bhi.n	8003348 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003344:	609a      	str	r2, [r3, #8]
}
 8003346:	e025      	b.n	8003394 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4a1a      	ldr	r2, [pc, #104]	@ (80033b4 <ADC_ConfigureBoostMode+0x210>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d80a      	bhi.n	8003366 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003362:	609a      	str	r2, [r3, #8]
}
 8003364:	e016      	b.n	8003394 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4a13      	ldr	r2, [pc, #76]	@ (80033b8 <ADC_ConfigureBoostMode+0x214>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d80a      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003380:	609a      	str	r2, [r3, #8]
}
 8003382:	e007      	b.n	8003394 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003392:	609a      	str	r2, [r3, #8]
}
 8003394:	bf00      	nop
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40022000 	.word	0x40022000
 80033a0:	40022100 	.word	0x40022100
 80033a4:	40022300 	.word	0x40022300
 80033a8:	58026300 	.word	0x58026300
 80033ac:	01312d00 	.word	0x01312d00
 80033b0:	005f5e10 	.word	0x005f5e10
 80033b4:	00bebc20 	.word	0x00bebc20
 80033b8:	017d7840 	.word	0x017d7840

080033bc <LL_ADC_IsEnabled>:
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <LL_ADC_IsEnabled+0x18>
 80033d0:	2301      	movs	r3, #1
 80033d2:	e000      	b.n	80033d6 <LL_ADC_IsEnabled+0x1a>
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <LL_ADC_REG_IsConversionOngoing>:
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d101      	bne.n	80033fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003408:	b590      	push	{r4, r7, lr}
 800340a:	b09f      	sub	sp, #124	@ 0x7c
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003412:	2300      	movs	r3, #0
 8003414:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003422:	2302      	movs	r3, #2
 8003424:	e0be      	b.n	80035a4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800342e:	2300      	movs	r3, #0
 8003430:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003432:	2300      	movs	r3, #0
 8003434:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a5c      	ldr	r2, [pc, #368]	@ (80035ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d102      	bne.n	8003446 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003440:	4b5b      	ldr	r3, [pc, #364]	@ (80035b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	e001      	b.n	800344a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003446:	2300      	movs	r3, #0
 8003448:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10b      	bne.n	8003468 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003454:	f043 0220 	orr.w	r2, r3, #32
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e09d      	b.n	80035a4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff ffb9 	bl	80033e2 <LL_ADC_REG_IsConversionOngoing>
 8003470:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff ffb3 	bl	80033e2 <LL_ADC_REG_IsConversionOngoing>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d17f      	bne.n	8003582 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003482:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003484:	2b00      	cmp	r3, #0
 8003486:	d17c      	bne.n	8003582 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a47      	ldr	r2, [pc, #284]	@ (80035ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d004      	beq.n	800349c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a46      	ldr	r2, [pc, #280]	@ (80035b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d101      	bne.n	80034a0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800349c:	4b45      	ldr	r3, [pc, #276]	@ (80035b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800349e:	e000      	b.n	80034a2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80034a0:	4b45      	ldr	r3, [pc, #276]	@ (80035b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80034a2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d039      	beq.n	8003520 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80034ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	431a      	orrs	r2, r3
 80034ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034bc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a3a      	ldr	r2, [pc, #232]	@ (80035ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d004      	beq.n	80034d2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a38      	ldr	r2, [pc, #224]	@ (80035b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d10e      	bne.n	80034f0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80034d2:	4836      	ldr	r0, [pc, #216]	@ (80035ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80034d4:	f7ff ff72 	bl	80033bc <LL_ADC_IsEnabled>
 80034d8:	4604      	mov	r4, r0
 80034da:	4835      	ldr	r0, [pc, #212]	@ (80035b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034dc:	f7ff ff6e 	bl	80033bc <LL_ADC_IsEnabled>
 80034e0:	4603      	mov	r3, r0
 80034e2:	4323      	orrs	r3, r4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	bf0c      	ite	eq
 80034e8:	2301      	moveq	r3, #1
 80034ea:	2300      	movne	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	e008      	b.n	8003502 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80034f0:	4832      	ldr	r0, [pc, #200]	@ (80035bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80034f2:	f7ff ff63 	bl	80033bc <LL_ADC_IsEnabled>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	bf0c      	ite	eq
 80034fc:	2301      	moveq	r3, #1
 80034fe:	2300      	movne	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d047      	beq.n	8003596 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003506:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	4b2d      	ldr	r3, [pc, #180]	@ (80035c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800350c:	4013      	ands	r3, r2
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	6811      	ldr	r1, [r2, #0]
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	6892      	ldr	r2, [r2, #8]
 8003516:	430a      	orrs	r2, r1
 8003518:	431a      	orrs	r2, r3
 800351a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800351c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800351e:	e03a      	b.n	8003596 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003520:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003528:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800352a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1e      	ldr	r2, [pc, #120]	@ (80035ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d004      	beq.n	8003540 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a1d      	ldr	r2, [pc, #116]	@ (80035b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d10e      	bne.n	800355e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003540:	481a      	ldr	r0, [pc, #104]	@ (80035ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003542:	f7ff ff3b 	bl	80033bc <LL_ADC_IsEnabled>
 8003546:	4604      	mov	r4, r0
 8003548:	4819      	ldr	r0, [pc, #100]	@ (80035b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800354a:	f7ff ff37 	bl	80033bc <LL_ADC_IsEnabled>
 800354e:	4603      	mov	r3, r0
 8003550:	4323      	orrs	r3, r4
 8003552:	2b00      	cmp	r3, #0
 8003554:	bf0c      	ite	eq
 8003556:	2301      	moveq	r3, #1
 8003558:	2300      	movne	r3, #0
 800355a:	b2db      	uxtb	r3, r3
 800355c:	e008      	b.n	8003570 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800355e:	4817      	ldr	r0, [pc, #92]	@ (80035bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003560:	f7ff ff2c 	bl	80033bc <LL_ADC_IsEnabled>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	bf0c      	ite	eq
 800356a:	2301      	moveq	r3, #1
 800356c:	2300      	movne	r3, #0
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d010      	beq.n	8003596 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003574:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	4b11      	ldr	r3, [pc, #68]	@ (80035c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800357a:	4013      	ands	r3, r2
 800357c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800357e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003580:	e009      	b.n	8003596 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003586:	f043 0220 	orr.w	r2, r3, #32
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003594:	e000      	b.n	8003598 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003596:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80035a0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	377c      	adds	r7, #124	@ 0x7c
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd90      	pop	{r4, r7, pc}
 80035ac:	40022000 	.word	0x40022000
 80035b0:	40022100 	.word	0x40022100
 80035b4:	40022300 	.word	0x40022300
 80035b8:	58026300 	.word	0x58026300
 80035bc:	58026000 	.word	0x58026000
 80035c0:	fffff0e0 	.word	0xfffff0e0

080035c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003604 <__NVIC_SetPriorityGrouping+0x40>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035e0:	4013      	ands	r3, r2
 80035e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80035ec:	4b06      	ldr	r3, [pc, #24]	@ (8003608 <__NVIC_SetPriorityGrouping+0x44>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035f2:	4a04      	ldr	r2, [pc, #16]	@ (8003604 <__NVIC_SetPriorityGrouping+0x40>)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	60d3      	str	r3, [r2, #12]
}
 80035f8:	bf00      	nop
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	e000ed00 	.word	0xe000ed00
 8003608:	05fa0000 	.word	0x05fa0000

0800360c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003610:	4b04      	ldr	r3, [pc, #16]	@ (8003624 <__NVIC_GetPriorityGrouping+0x18>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	0a1b      	lsrs	r3, r3, #8
 8003616:	f003 0307 	and.w	r3, r3, #7
}
 800361a:	4618      	mov	r0, r3
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	e000ed00 	.word	0xe000ed00

08003628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003636:	2b00      	cmp	r3, #0
 8003638:	db0b      	blt.n	8003652 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800363a:	88fb      	ldrh	r3, [r7, #6]
 800363c:	f003 021f 	and.w	r2, r3, #31
 8003640:	4907      	ldr	r1, [pc, #28]	@ (8003660 <__NVIC_EnableIRQ+0x38>)
 8003642:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	2001      	movs	r0, #1
 800364a:	fa00 f202 	lsl.w	r2, r0, r2
 800364e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	e000e100 	.word	0xe000e100

08003664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	6039      	str	r1, [r7, #0]
 800366e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003670:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003674:	2b00      	cmp	r3, #0
 8003676:	db0a      	blt.n	800368e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	b2da      	uxtb	r2, r3
 800367c:	490c      	ldr	r1, [pc, #48]	@ (80036b0 <__NVIC_SetPriority+0x4c>)
 800367e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003682:	0112      	lsls	r2, r2, #4
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	440b      	add	r3, r1
 8003688:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800368c:	e00a      	b.n	80036a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	b2da      	uxtb	r2, r3
 8003692:	4908      	ldr	r1, [pc, #32]	@ (80036b4 <__NVIC_SetPriority+0x50>)
 8003694:	88fb      	ldrh	r3, [r7, #6]
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	3b04      	subs	r3, #4
 800369c:	0112      	lsls	r2, r2, #4
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	440b      	add	r3, r1
 80036a2:	761a      	strb	r2, [r3, #24]
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	e000e100 	.word	0xe000e100
 80036b4:	e000ed00 	.word	0xe000ed00

080036b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b089      	sub	sp, #36	@ 0x24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f1c3 0307 	rsb	r3, r3, #7
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	bf28      	it	cs
 80036d6:	2304      	movcs	r3, #4
 80036d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3304      	adds	r3, #4
 80036de:	2b06      	cmp	r3, #6
 80036e0:	d902      	bls.n	80036e8 <NVIC_EncodePriority+0x30>
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	3b03      	subs	r3, #3
 80036e6:	e000      	b.n	80036ea <NVIC_EncodePriority+0x32>
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43da      	mvns	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	401a      	ands	r2, r3
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003700:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	fa01 f303 	lsl.w	r3, r1, r3
 800370a:	43d9      	mvns	r1, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003710:	4313      	orrs	r3, r2
         );
}
 8003712:	4618      	mov	r0, r3
 8003714:	3724      	adds	r7, #36	@ 0x24
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff ff4c 	bl	80035c4 <__NVIC_SetPriorityGrouping>
}
 800372c:	bf00      	nop
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003742:	f7ff ff63 	bl	800360c <__NVIC_GetPriorityGrouping>
 8003746:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	68b9      	ldr	r1, [r7, #8]
 800374c:	6978      	ldr	r0, [r7, #20]
 800374e:	f7ff ffb3 	bl	80036b8 <NVIC_EncodePriority>
 8003752:	4602      	mov	r2, r0
 8003754:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003758:	4611      	mov	r1, r2
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff ff82 	bl	8003664 <__NVIC_SetPriority>
}
 8003760:	bf00      	nop
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff ff56 	bl	8003628 <__NVIC_EnableIRQ>
}
 800377c:	bf00      	nop
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800378c:	f7fe fc0c 	bl	8001fa8 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e316      	b.n	8003dca <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a66      	ldr	r2, [pc, #408]	@ (800393c <HAL_DMA_Init+0x1b8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d04a      	beq.n	800383c <HAL_DMA_Init+0xb8>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a65      	ldr	r2, [pc, #404]	@ (8003940 <HAL_DMA_Init+0x1bc>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d045      	beq.n	800383c <HAL_DMA_Init+0xb8>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a63      	ldr	r2, [pc, #396]	@ (8003944 <HAL_DMA_Init+0x1c0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d040      	beq.n	800383c <HAL_DMA_Init+0xb8>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a62      	ldr	r2, [pc, #392]	@ (8003948 <HAL_DMA_Init+0x1c4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d03b      	beq.n	800383c <HAL_DMA_Init+0xb8>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a60      	ldr	r2, [pc, #384]	@ (800394c <HAL_DMA_Init+0x1c8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d036      	beq.n	800383c <HAL_DMA_Init+0xb8>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a5f      	ldr	r2, [pc, #380]	@ (8003950 <HAL_DMA_Init+0x1cc>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d031      	beq.n	800383c <HAL_DMA_Init+0xb8>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a5d      	ldr	r2, [pc, #372]	@ (8003954 <HAL_DMA_Init+0x1d0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d02c      	beq.n	800383c <HAL_DMA_Init+0xb8>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a5c      	ldr	r2, [pc, #368]	@ (8003958 <HAL_DMA_Init+0x1d4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d027      	beq.n	800383c <HAL_DMA_Init+0xb8>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a5a      	ldr	r2, [pc, #360]	@ (800395c <HAL_DMA_Init+0x1d8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d022      	beq.n	800383c <HAL_DMA_Init+0xb8>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a59      	ldr	r2, [pc, #356]	@ (8003960 <HAL_DMA_Init+0x1dc>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d01d      	beq.n	800383c <HAL_DMA_Init+0xb8>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a57      	ldr	r2, [pc, #348]	@ (8003964 <HAL_DMA_Init+0x1e0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d018      	beq.n	800383c <HAL_DMA_Init+0xb8>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a56      	ldr	r2, [pc, #344]	@ (8003968 <HAL_DMA_Init+0x1e4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d013      	beq.n	800383c <HAL_DMA_Init+0xb8>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a54      	ldr	r2, [pc, #336]	@ (800396c <HAL_DMA_Init+0x1e8>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d00e      	beq.n	800383c <HAL_DMA_Init+0xb8>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a53      	ldr	r2, [pc, #332]	@ (8003970 <HAL_DMA_Init+0x1ec>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d009      	beq.n	800383c <HAL_DMA_Init+0xb8>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a51      	ldr	r2, [pc, #324]	@ (8003974 <HAL_DMA_Init+0x1f0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d004      	beq.n	800383c <HAL_DMA_Init+0xb8>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a50      	ldr	r2, [pc, #320]	@ (8003978 <HAL_DMA_Init+0x1f4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d101      	bne.n	8003840 <HAL_DMA_Init+0xbc>
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <HAL_DMA_Init+0xbe>
 8003840:	2300      	movs	r3, #0
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 813b 	beq.w	8003abe <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a37      	ldr	r2, [pc, #220]	@ (800393c <HAL_DMA_Init+0x1b8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d04a      	beq.n	80038f8 <HAL_DMA_Init+0x174>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a36      	ldr	r2, [pc, #216]	@ (8003940 <HAL_DMA_Init+0x1bc>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d045      	beq.n	80038f8 <HAL_DMA_Init+0x174>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a34      	ldr	r2, [pc, #208]	@ (8003944 <HAL_DMA_Init+0x1c0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d040      	beq.n	80038f8 <HAL_DMA_Init+0x174>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a33      	ldr	r2, [pc, #204]	@ (8003948 <HAL_DMA_Init+0x1c4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d03b      	beq.n	80038f8 <HAL_DMA_Init+0x174>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a31      	ldr	r2, [pc, #196]	@ (800394c <HAL_DMA_Init+0x1c8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d036      	beq.n	80038f8 <HAL_DMA_Init+0x174>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a30      	ldr	r2, [pc, #192]	@ (8003950 <HAL_DMA_Init+0x1cc>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d031      	beq.n	80038f8 <HAL_DMA_Init+0x174>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a2e      	ldr	r2, [pc, #184]	@ (8003954 <HAL_DMA_Init+0x1d0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d02c      	beq.n	80038f8 <HAL_DMA_Init+0x174>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a2d      	ldr	r2, [pc, #180]	@ (8003958 <HAL_DMA_Init+0x1d4>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d027      	beq.n	80038f8 <HAL_DMA_Init+0x174>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a2b      	ldr	r2, [pc, #172]	@ (800395c <HAL_DMA_Init+0x1d8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d022      	beq.n	80038f8 <HAL_DMA_Init+0x174>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a2a      	ldr	r2, [pc, #168]	@ (8003960 <HAL_DMA_Init+0x1dc>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d01d      	beq.n	80038f8 <HAL_DMA_Init+0x174>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a28      	ldr	r2, [pc, #160]	@ (8003964 <HAL_DMA_Init+0x1e0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d018      	beq.n	80038f8 <HAL_DMA_Init+0x174>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a27      	ldr	r2, [pc, #156]	@ (8003968 <HAL_DMA_Init+0x1e4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d013      	beq.n	80038f8 <HAL_DMA_Init+0x174>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a25      	ldr	r2, [pc, #148]	@ (800396c <HAL_DMA_Init+0x1e8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00e      	beq.n	80038f8 <HAL_DMA_Init+0x174>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a24      	ldr	r2, [pc, #144]	@ (8003970 <HAL_DMA_Init+0x1ec>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d009      	beq.n	80038f8 <HAL_DMA_Init+0x174>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a22      	ldr	r2, [pc, #136]	@ (8003974 <HAL_DMA_Init+0x1f0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d004      	beq.n	80038f8 <HAL_DMA_Init+0x174>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a21      	ldr	r2, [pc, #132]	@ (8003978 <HAL_DMA_Init+0x1f4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d108      	bne.n	800390a <HAL_DMA_Init+0x186>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0201 	bic.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	e007      	b.n	800391a <HAL_DMA_Init+0x196>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0201 	bic.w	r2, r2, #1
 8003918:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800391a:	e02f      	b.n	800397c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800391c:	f7fe fb44 	bl	8001fa8 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b05      	cmp	r3, #5
 8003928:	d928      	bls.n	800397c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2220      	movs	r2, #32
 800392e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2203      	movs	r2, #3
 8003934:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e246      	b.n	8003dca <HAL_DMA_Init+0x646>
 800393c:	40020010 	.word	0x40020010
 8003940:	40020028 	.word	0x40020028
 8003944:	40020040 	.word	0x40020040
 8003948:	40020058 	.word	0x40020058
 800394c:	40020070 	.word	0x40020070
 8003950:	40020088 	.word	0x40020088
 8003954:	400200a0 	.word	0x400200a0
 8003958:	400200b8 	.word	0x400200b8
 800395c:	40020410 	.word	0x40020410
 8003960:	40020428 	.word	0x40020428
 8003964:	40020440 	.word	0x40020440
 8003968:	40020458 	.word	0x40020458
 800396c:	40020470 	.word	0x40020470
 8003970:	40020488 	.word	0x40020488
 8003974:	400204a0 	.word	0x400204a0
 8003978:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1c8      	bne.n	800391c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4b83      	ldr	r3, [pc, #524]	@ (8003ba4 <HAL_DMA_Init+0x420>)
 8003996:	4013      	ands	r3, r2
 8003998:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80039a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ba:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d107      	bne.n	80039e0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d8:	4313      	orrs	r3, r2
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	4313      	orrs	r3, r2
 80039de:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80039e0:	4b71      	ldr	r3, [pc, #452]	@ (8003ba8 <HAL_DMA_Init+0x424>)
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	4b71      	ldr	r3, [pc, #452]	@ (8003bac <HAL_DMA_Init+0x428>)
 80039e6:	4013      	ands	r3, r2
 80039e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039ec:	d328      	bcc.n	8003a40 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b28      	cmp	r3, #40	@ 0x28
 80039f4:	d903      	bls.n	80039fe <HAL_DMA_Init+0x27a>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80039fc:	d917      	bls.n	8003a2e <HAL_DMA_Init+0x2aa>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a04:	d903      	bls.n	8003a0e <HAL_DMA_Init+0x28a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b42      	cmp	r3, #66	@ 0x42
 8003a0c:	d90f      	bls.n	8003a2e <HAL_DMA_Init+0x2aa>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b46      	cmp	r3, #70	@ 0x46
 8003a14:	d903      	bls.n	8003a1e <HAL_DMA_Init+0x29a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b48      	cmp	r3, #72	@ 0x48
 8003a1c:	d907      	bls.n	8003a2e <HAL_DMA_Init+0x2aa>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b4e      	cmp	r3, #78	@ 0x4e
 8003a24:	d905      	bls.n	8003a32 <HAL_DMA_Init+0x2ae>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b52      	cmp	r3, #82	@ 0x52
 8003a2c:	d801      	bhi.n	8003a32 <HAL_DMA_Init+0x2ae>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <HAL_DMA_Init+0x2b0>
 8003a32:	2300      	movs	r3, #0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a3e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f023 0307 	bic.w	r3, r3, #7
 8003a56:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d117      	bne.n	8003a9a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00e      	beq.n	8003a9a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f002 fb33 	bl	80060e8 <DMA_CheckFifoParam>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2240      	movs	r2, #64	@ 0x40
 8003a8c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e197      	b.n	8003dca <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f002 fa6e 	bl	8005f84 <DMA_CalcBaseAndBitshift>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab0:	f003 031f 	and.w	r3, r3, #31
 8003ab4:	223f      	movs	r2, #63	@ 0x3f
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	609a      	str	r2, [r3, #8]
 8003abc:	e0cd      	b.n	8003c5a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a3b      	ldr	r2, [pc, #236]	@ (8003bb0 <HAL_DMA_Init+0x42c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d022      	beq.n	8003b0e <HAL_DMA_Init+0x38a>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a39      	ldr	r2, [pc, #228]	@ (8003bb4 <HAL_DMA_Init+0x430>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d01d      	beq.n	8003b0e <HAL_DMA_Init+0x38a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a38      	ldr	r2, [pc, #224]	@ (8003bb8 <HAL_DMA_Init+0x434>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d018      	beq.n	8003b0e <HAL_DMA_Init+0x38a>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a36      	ldr	r2, [pc, #216]	@ (8003bbc <HAL_DMA_Init+0x438>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d013      	beq.n	8003b0e <HAL_DMA_Init+0x38a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a35      	ldr	r2, [pc, #212]	@ (8003bc0 <HAL_DMA_Init+0x43c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d00e      	beq.n	8003b0e <HAL_DMA_Init+0x38a>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a33      	ldr	r2, [pc, #204]	@ (8003bc4 <HAL_DMA_Init+0x440>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d009      	beq.n	8003b0e <HAL_DMA_Init+0x38a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a32      	ldr	r2, [pc, #200]	@ (8003bc8 <HAL_DMA_Init+0x444>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d004      	beq.n	8003b0e <HAL_DMA_Init+0x38a>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a30      	ldr	r2, [pc, #192]	@ (8003bcc <HAL_DMA_Init+0x448>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d101      	bne.n	8003b12 <HAL_DMA_Init+0x38e>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e000      	b.n	8003b14 <HAL_DMA_Init+0x390>
 8003b12:	2300      	movs	r3, #0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8097 	beq.w	8003c48 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a24      	ldr	r2, [pc, #144]	@ (8003bb0 <HAL_DMA_Init+0x42c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d021      	beq.n	8003b68 <HAL_DMA_Init+0x3e4>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a22      	ldr	r2, [pc, #136]	@ (8003bb4 <HAL_DMA_Init+0x430>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d01c      	beq.n	8003b68 <HAL_DMA_Init+0x3e4>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a21      	ldr	r2, [pc, #132]	@ (8003bb8 <HAL_DMA_Init+0x434>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d017      	beq.n	8003b68 <HAL_DMA_Init+0x3e4>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a1f      	ldr	r2, [pc, #124]	@ (8003bbc <HAL_DMA_Init+0x438>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d012      	beq.n	8003b68 <HAL_DMA_Init+0x3e4>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a1e      	ldr	r2, [pc, #120]	@ (8003bc0 <HAL_DMA_Init+0x43c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d00d      	beq.n	8003b68 <HAL_DMA_Init+0x3e4>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a1c      	ldr	r2, [pc, #112]	@ (8003bc4 <HAL_DMA_Init+0x440>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d008      	beq.n	8003b68 <HAL_DMA_Init+0x3e4>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8003bc8 <HAL_DMA_Init+0x444>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d003      	beq.n	8003b68 <HAL_DMA_Init+0x3e4>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a19      	ldr	r2, [pc, #100]	@ (8003bcc <HAL_DMA_Init+0x448>)
 8003b66:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4b13      	ldr	r3, [pc, #76]	@ (8003bd0 <HAL_DMA_Init+0x44c>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b40      	cmp	r3, #64	@ 0x40
 8003b8e:	d021      	beq.n	8003bd4 <HAL_DMA_Init+0x450>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2b80      	cmp	r3, #128	@ 0x80
 8003b96:	d102      	bne.n	8003b9e <HAL_DMA_Init+0x41a>
 8003b98:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003b9c:	e01b      	b.n	8003bd6 <HAL_DMA_Init+0x452>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e019      	b.n	8003bd6 <HAL_DMA_Init+0x452>
 8003ba2:	bf00      	nop
 8003ba4:	fe10803f 	.word	0xfe10803f
 8003ba8:	5c001000 	.word	0x5c001000
 8003bac:	ffff0000 	.word	0xffff0000
 8003bb0:	58025408 	.word	0x58025408
 8003bb4:	5802541c 	.word	0x5802541c
 8003bb8:	58025430 	.word	0x58025430
 8003bbc:	58025444 	.word	0x58025444
 8003bc0:	58025458 	.word	0x58025458
 8003bc4:	5802546c 	.word	0x5802546c
 8003bc8:	58025480 	.word	0x58025480
 8003bcc:	58025494 	.word	0x58025494
 8003bd0:	fffe000f 	.word	0xfffe000f
 8003bd4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	68d2      	ldr	r2, [r2, #12]
 8003bda:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003bdc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003be4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003bec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003bf4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003bfc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c04:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4b6e      	ldr	r3, [pc, #440]	@ (8003dd4 <HAL_DMA_Init+0x650>)
 8003c1c:	4413      	add	r3, r2
 8003c1e:	4a6e      	ldr	r2, [pc, #440]	@ (8003dd8 <HAL_DMA_Init+0x654>)
 8003c20:	fba2 2303 	umull	r2, r3, r2, r3
 8003c24:	091b      	lsrs	r3, r3, #4
 8003c26:	009a      	lsls	r2, r3, #2
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f002 f9a9 	bl	8005f84 <DMA_CalcBaseAndBitshift>
 8003c32:	4603      	mov	r3, r0
 8003c34:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c3a:	f003 031f 	and.w	r3, r3, #31
 8003c3e:	2201      	movs	r2, #1
 8003c40:	409a      	lsls	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	605a      	str	r2, [r3, #4]
 8003c46:	e008      	b.n	8003c5a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2240      	movs	r2, #64	@ 0x40
 8003c4c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2203      	movs	r2, #3
 8003c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e0b7      	b.n	8003dca <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a5f      	ldr	r2, [pc, #380]	@ (8003ddc <HAL_DMA_Init+0x658>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d072      	beq.n	8003d4a <HAL_DMA_Init+0x5c6>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a5d      	ldr	r2, [pc, #372]	@ (8003de0 <HAL_DMA_Init+0x65c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d06d      	beq.n	8003d4a <HAL_DMA_Init+0x5c6>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a5c      	ldr	r2, [pc, #368]	@ (8003de4 <HAL_DMA_Init+0x660>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d068      	beq.n	8003d4a <HAL_DMA_Init+0x5c6>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a5a      	ldr	r2, [pc, #360]	@ (8003de8 <HAL_DMA_Init+0x664>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d063      	beq.n	8003d4a <HAL_DMA_Init+0x5c6>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a59      	ldr	r2, [pc, #356]	@ (8003dec <HAL_DMA_Init+0x668>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d05e      	beq.n	8003d4a <HAL_DMA_Init+0x5c6>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a57      	ldr	r2, [pc, #348]	@ (8003df0 <HAL_DMA_Init+0x66c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d059      	beq.n	8003d4a <HAL_DMA_Init+0x5c6>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a56      	ldr	r2, [pc, #344]	@ (8003df4 <HAL_DMA_Init+0x670>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d054      	beq.n	8003d4a <HAL_DMA_Init+0x5c6>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a54      	ldr	r2, [pc, #336]	@ (8003df8 <HAL_DMA_Init+0x674>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d04f      	beq.n	8003d4a <HAL_DMA_Init+0x5c6>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a53      	ldr	r2, [pc, #332]	@ (8003dfc <HAL_DMA_Init+0x678>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d04a      	beq.n	8003d4a <HAL_DMA_Init+0x5c6>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a51      	ldr	r2, [pc, #324]	@ (8003e00 <HAL_DMA_Init+0x67c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d045      	beq.n	8003d4a <HAL_DMA_Init+0x5c6>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a50      	ldr	r2, [pc, #320]	@ (8003e04 <HAL_DMA_Init+0x680>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d040      	beq.n	8003d4a <HAL_DMA_Init+0x5c6>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a4e      	ldr	r2, [pc, #312]	@ (8003e08 <HAL_DMA_Init+0x684>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d03b      	beq.n	8003d4a <HAL_DMA_Init+0x5c6>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a4d      	ldr	r2, [pc, #308]	@ (8003e0c <HAL_DMA_Init+0x688>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d036      	beq.n	8003d4a <HAL_DMA_Init+0x5c6>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a4b      	ldr	r2, [pc, #300]	@ (8003e10 <HAL_DMA_Init+0x68c>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d031      	beq.n	8003d4a <HAL_DMA_Init+0x5c6>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a4a      	ldr	r2, [pc, #296]	@ (8003e14 <HAL_DMA_Init+0x690>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d02c      	beq.n	8003d4a <HAL_DMA_Init+0x5c6>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a48      	ldr	r2, [pc, #288]	@ (8003e18 <HAL_DMA_Init+0x694>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d027      	beq.n	8003d4a <HAL_DMA_Init+0x5c6>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a47      	ldr	r2, [pc, #284]	@ (8003e1c <HAL_DMA_Init+0x698>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d022      	beq.n	8003d4a <HAL_DMA_Init+0x5c6>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a45      	ldr	r2, [pc, #276]	@ (8003e20 <HAL_DMA_Init+0x69c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d01d      	beq.n	8003d4a <HAL_DMA_Init+0x5c6>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a44      	ldr	r2, [pc, #272]	@ (8003e24 <HAL_DMA_Init+0x6a0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d018      	beq.n	8003d4a <HAL_DMA_Init+0x5c6>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a42      	ldr	r2, [pc, #264]	@ (8003e28 <HAL_DMA_Init+0x6a4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d013      	beq.n	8003d4a <HAL_DMA_Init+0x5c6>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a41      	ldr	r2, [pc, #260]	@ (8003e2c <HAL_DMA_Init+0x6a8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00e      	beq.n	8003d4a <HAL_DMA_Init+0x5c6>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a3f      	ldr	r2, [pc, #252]	@ (8003e30 <HAL_DMA_Init+0x6ac>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d009      	beq.n	8003d4a <HAL_DMA_Init+0x5c6>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a3e      	ldr	r2, [pc, #248]	@ (8003e34 <HAL_DMA_Init+0x6b0>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d004      	beq.n	8003d4a <HAL_DMA_Init+0x5c6>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a3c      	ldr	r2, [pc, #240]	@ (8003e38 <HAL_DMA_Init+0x6b4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d101      	bne.n	8003d4e <HAL_DMA_Init+0x5ca>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <HAL_DMA_Init+0x5cc>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d032      	beq.n	8003dba <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f002 fa43 	bl	80061e0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2b80      	cmp	r3, #128	@ 0x80
 8003d60:	d102      	bne.n	8003d68 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d70:	b2d2      	uxtb	r2, r2
 8003d72:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003d7c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d010      	beq.n	8003da8 <HAL_DMA_Init+0x624>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d80c      	bhi.n	8003da8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f002 fac0 	bl	8006314 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003da4:	605a      	str	r2, [r3, #4]
 8003da6:	e008      	b.n	8003dba <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	a7fdabf8 	.word	0xa7fdabf8
 8003dd8:	cccccccd 	.word	0xcccccccd
 8003ddc:	40020010 	.word	0x40020010
 8003de0:	40020028 	.word	0x40020028
 8003de4:	40020040 	.word	0x40020040
 8003de8:	40020058 	.word	0x40020058
 8003dec:	40020070 	.word	0x40020070
 8003df0:	40020088 	.word	0x40020088
 8003df4:	400200a0 	.word	0x400200a0
 8003df8:	400200b8 	.word	0x400200b8
 8003dfc:	40020410 	.word	0x40020410
 8003e00:	40020428 	.word	0x40020428
 8003e04:	40020440 	.word	0x40020440
 8003e08:	40020458 	.word	0x40020458
 8003e0c:	40020470 	.word	0x40020470
 8003e10:	40020488 	.word	0x40020488
 8003e14:	400204a0 	.word	0x400204a0
 8003e18:	400204b8 	.word	0x400204b8
 8003e1c:	58025408 	.word	0x58025408
 8003e20:	5802541c 	.word	0x5802541c
 8003e24:	58025430 	.word	0x58025430
 8003e28:	58025444 	.word	0x58025444
 8003e2c:	58025458 	.word	0x58025458
 8003e30:	5802546c 	.word	0x5802546c
 8003e34:	58025480 	.word	0x58025480
 8003e38:	58025494 	.word	0x58025494

08003e3c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e226      	b.n	80042a6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d101      	bne.n	8003e66 <HAL_DMA_Start_IT+0x2a>
 8003e62:	2302      	movs	r3, #2
 8003e64:	e21f      	b.n	80042a6 <HAL_DMA_Start_IT+0x46a>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	f040 820a 	bne.w	8004290 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a68      	ldr	r2, [pc, #416]	@ (8004030 <HAL_DMA_Start_IT+0x1f4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d04a      	beq.n	8003f2a <HAL_DMA_Start_IT+0xee>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a66      	ldr	r2, [pc, #408]	@ (8004034 <HAL_DMA_Start_IT+0x1f8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d045      	beq.n	8003f2a <HAL_DMA_Start_IT+0xee>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a65      	ldr	r2, [pc, #404]	@ (8004038 <HAL_DMA_Start_IT+0x1fc>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d040      	beq.n	8003f2a <HAL_DMA_Start_IT+0xee>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a63      	ldr	r2, [pc, #396]	@ (800403c <HAL_DMA_Start_IT+0x200>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d03b      	beq.n	8003f2a <HAL_DMA_Start_IT+0xee>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a62      	ldr	r2, [pc, #392]	@ (8004040 <HAL_DMA_Start_IT+0x204>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d036      	beq.n	8003f2a <HAL_DMA_Start_IT+0xee>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a60      	ldr	r2, [pc, #384]	@ (8004044 <HAL_DMA_Start_IT+0x208>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d031      	beq.n	8003f2a <HAL_DMA_Start_IT+0xee>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a5f      	ldr	r2, [pc, #380]	@ (8004048 <HAL_DMA_Start_IT+0x20c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d02c      	beq.n	8003f2a <HAL_DMA_Start_IT+0xee>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a5d      	ldr	r2, [pc, #372]	@ (800404c <HAL_DMA_Start_IT+0x210>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d027      	beq.n	8003f2a <HAL_DMA_Start_IT+0xee>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a5c      	ldr	r2, [pc, #368]	@ (8004050 <HAL_DMA_Start_IT+0x214>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d022      	beq.n	8003f2a <HAL_DMA_Start_IT+0xee>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a5a      	ldr	r2, [pc, #360]	@ (8004054 <HAL_DMA_Start_IT+0x218>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d01d      	beq.n	8003f2a <HAL_DMA_Start_IT+0xee>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a59      	ldr	r2, [pc, #356]	@ (8004058 <HAL_DMA_Start_IT+0x21c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d018      	beq.n	8003f2a <HAL_DMA_Start_IT+0xee>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a57      	ldr	r2, [pc, #348]	@ (800405c <HAL_DMA_Start_IT+0x220>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d013      	beq.n	8003f2a <HAL_DMA_Start_IT+0xee>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a56      	ldr	r2, [pc, #344]	@ (8004060 <HAL_DMA_Start_IT+0x224>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00e      	beq.n	8003f2a <HAL_DMA_Start_IT+0xee>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a54      	ldr	r2, [pc, #336]	@ (8004064 <HAL_DMA_Start_IT+0x228>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d009      	beq.n	8003f2a <HAL_DMA_Start_IT+0xee>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a53      	ldr	r2, [pc, #332]	@ (8004068 <HAL_DMA_Start_IT+0x22c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d004      	beq.n	8003f2a <HAL_DMA_Start_IT+0xee>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a51      	ldr	r2, [pc, #324]	@ (800406c <HAL_DMA_Start_IT+0x230>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d108      	bne.n	8003f3c <HAL_DMA_Start_IT+0x100>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0201 	bic.w	r2, r2, #1
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	e007      	b.n	8003f4c <HAL_DMA_Start_IT+0x110>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0201 	bic.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	68b9      	ldr	r1, [r7, #8]
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f001 fe6a 	bl	8005c2c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a34      	ldr	r2, [pc, #208]	@ (8004030 <HAL_DMA_Start_IT+0x1f4>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d04a      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x1bc>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a33      	ldr	r2, [pc, #204]	@ (8004034 <HAL_DMA_Start_IT+0x1f8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d045      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x1bc>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a31      	ldr	r2, [pc, #196]	@ (8004038 <HAL_DMA_Start_IT+0x1fc>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d040      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x1bc>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a30      	ldr	r2, [pc, #192]	@ (800403c <HAL_DMA_Start_IT+0x200>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d03b      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x1bc>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a2e      	ldr	r2, [pc, #184]	@ (8004040 <HAL_DMA_Start_IT+0x204>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d036      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x1bc>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a2d      	ldr	r2, [pc, #180]	@ (8004044 <HAL_DMA_Start_IT+0x208>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d031      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x1bc>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a2b      	ldr	r2, [pc, #172]	@ (8004048 <HAL_DMA_Start_IT+0x20c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d02c      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x1bc>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a2a      	ldr	r2, [pc, #168]	@ (800404c <HAL_DMA_Start_IT+0x210>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d027      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x1bc>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a28      	ldr	r2, [pc, #160]	@ (8004050 <HAL_DMA_Start_IT+0x214>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d022      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x1bc>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a27      	ldr	r2, [pc, #156]	@ (8004054 <HAL_DMA_Start_IT+0x218>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d01d      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x1bc>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a25      	ldr	r2, [pc, #148]	@ (8004058 <HAL_DMA_Start_IT+0x21c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d018      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x1bc>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a24      	ldr	r2, [pc, #144]	@ (800405c <HAL_DMA_Start_IT+0x220>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d013      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x1bc>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a22      	ldr	r2, [pc, #136]	@ (8004060 <HAL_DMA_Start_IT+0x224>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00e      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x1bc>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a21      	ldr	r2, [pc, #132]	@ (8004064 <HAL_DMA_Start_IT+0x228>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d009      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x1bc>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a1f      	ldr	r2, [pc, #124]	@ (8004068 <HAL_DMA_Start_IT+0x22c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d004      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x1bc>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800406c <HAL_DMA_Start_IT+0x230>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d101      	bne.n	8003ffc <HAL_DMA_Start_IT+0x1c0>
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <HAL_DMA_Start_IT+0x1c2>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d036      	beq.n	8004070 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f023 021e 	bic.w	r2, r3, #30
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0216 	orr.w	r2, r2, #22
 8004014:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401a:	2b00      	cmp	r3, #0
 800401c:	d03e      	beq.n	800409c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0208 	orr.w	r2, r2, #8
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	e035      	b.n	800409c <HAL_DMA_Start_IT+0x260>
 8004030:	40020010 	.word	0x40020010
 8004034:	40020028 	.word	0x40020028
 8004038:	40020040 	.word	0x40020040
 800403c:	40020058 	.word	0x40020058
 8004040:	40020070 	.word	0x40020070
 8004044:	40020088 	.word	0x40020088
 8004048:	400200a0 	.word	0x400200a0
 800404c:	400200b8 	.word	0x400200b8
 8004050:	40020410 	.word	0x40020410
 8004054:	40020428 	.word	0x40020428
 8004058:	40020440 	.word	0x40020440
 800405c:	40020458 	.word	0x40020458
 8004060:	40020470 	.word	0x40020470
 8004064:	40020488 	.word	0x40020488
 8004068:	400204a0 	.word	0x400204a0
 800406c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f023 020e 	bic.w	r2, r3, #14
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 020a 	orr.w	r2, r2, #10
 8004082:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004088:	2b00      	cmp	r3, #0
 800408a:	d007      	beq.n	800409c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0204 	orr.w	r2, r2, #4
 800409a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a83      	ldr	r2, [pc, #524]	@ (80042b0 <HAL_DMA_Start_IT+0x474>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d072      	beq.n	800418c <HAL_DMA_Start_IT+0x350>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a82      	ldr	r2, [pc, #520]	@ (80042b4 <HAL_DMA_Start_IT+0x478>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d06d      	beq.n	800418c <HAL_DMA_Start_IT+0x350>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a80      	ldr	r2, [pc, #512]	@ (80042b8 <HAL_DMA_Start_IT+0x47c>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d068      	beq.n	800418c <HAL_DMA_Start_IT+0x350>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a7f      	ldr	r2, [pc, #508]	@ (80042bc <HAL_DMA_Start_IT+0x480>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d063      	beq.n	800418c <HAL_DMA_Start_IT+0x350>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a7d      	ldr	r2, [pc, #500]	@ (80042c0 <HAL_DMA_Start_IT+0x484>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d05e      	beq.n	800418c <HAL_DMA_Start_IT+0x350>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a7c      	ldr	r2, [pc, #496]	@ (80042c4 <HAL_DMA_Start_IT+0x488>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d059      	beq.n	800418c <HAL_DMA_Start_IT+0x350>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a7a      	ldr	r2, [pc, #488]	@ (80042c8 <HAL_DMA_Start_IT+0x48c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d054      	beq.n	800418c <HAL_DMA_Start_IT+0x350>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a79      	ldr	r2, [pc, #484]	@ (80042cc <HAL_DMA_Start_IT+0x490>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d04f      	beq.n	800418c <HAL_DMA_Start_IT+0x350>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a77      	ldr	r2, [pc, #476]	@ (80042d0 <HAL_DMA_Start_IT+0x494>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d04a      	beq.n	800418c <HAL_DMA_Start_IT+0x350>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a76      	ldr	r2, [pc, #472]	@ (80042d4 <HAL_DMA_Start_IT+0x498>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d045      	beq.n	800418c <HAL_DMA_Start_IT+0x350>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a74      	ldr	r2, [pc, #464]	@ (80042d8 <HAL_DMA_Start_IT+0x49c>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d040      	beq.n	800418c <HAL_DMA_Start_IT+0x350>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a73      	ldr	r2, [pc, #460]	@ (80042dc <HAL_DMA_Start_IT+0x4a0>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d03b      	beq.n	800418c <HAL_DMA_Start_IT+0x350>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a71      	ldr	r2, [pc, #452]	@ (80042e0 <HAL_DMA_Start_IT+0x4a4>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d036      	beq.n	800418c <HAL_DMA_Start_IT+0x350>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a70      	ldr	r2, [pc, #448]	@ (80042e4 <HAL_DMA_Start_IT+0x4a8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d031      	beq.n	800418c <HAL_DMA_Start_IT+0x350>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a6e      	ldr	r2, [pc, #440]	@ (80042e8 <HAL_DMA_Start_IT+0x4ac>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d02c      	beq.n	800418c <HAL_DMA_Start_IT+0x350>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a6d      	ldr	r2, [pc, #436]	@ (80042ec <HAL_DMA_Start_IT+0x4b0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d027      	beq.n	800418c <HAL_DMA_Start_IT+0x350>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a6b      	ldr	r2, [pc, #428]	@ (80042f0 <HAL_DMA_Start_IT+0x4b4>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d022      	beq.n	800418c <HAL_DMA_Start_IT+0x350>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a6a      	ldr	r2, [pc, #424]	@ (80042f4 <HAL_DMA_Start_IT+0x4b8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d01d      	beq.n	800418c <HAL_DMA_Start_IT+0x350>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a68      	ldr	r2, [pc, #416]	@ (80042f8 <HAL_DMA_Start_IT+0x4bc>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d018      	beq.n	800418c <HAL_DMA_Start_IT+0x350>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a67      	ldr	r2, [pc, #412]	@ (80042fc <HAL_DMA_Start_IT+0x4c0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d013      	beq.n	800418c <HAL_DMA_Start_IT+0x350>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a65      	ldr	r2, [pc, #404]	@ (8004300 <HAL_DMA_Start_IT+0x4c4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00e      	beq.n	800418c <HAL_DMA_Start_IT+0x350>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a64      	ldr	r2, [pc, #400]	@ (8004304 <HAL_DMA_Start_IT+0x4c8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d009      	beq.n	800418c <HAL_DMA_Start_IT+0x350>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a62      	ldr	r2, [pc, #392]	@ (8004308 <HAL_DMA_Start_IT+0x4cc>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d004      	beq.n	800418c <HAL_DMA_Start_IT+0x350>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a61      	ldr	r2, [pc, #388]	@ (800430c <HAL_DMA_Start_IT+0x4d0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d101      	bne.n	8004190 <HAL_DMA_Start_IT+0x354>
 800418c:	2301      	movs	r3, #1
 800418e:	e000      	b.n	8004192 <HAL_DMA_Start_IT+0x356>
 8004190:	2300      	movs	r3, #0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d01a      	beq.n	80041cc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d007      	beq.n	80041b4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041b2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d007      	beq.n	80041cc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041ca:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a37      	ldr	r2, [pc, #220]	@ (80042b0 <HAL_DMA_Start_IT+0x474>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d04a      	beq.n	800426c <HAL_DMA_Start_IT+0x430>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a36      	ldr	r2, [pc, #216]	@ (80042b4 <HAL_DMA_Start_IT+0x478>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d045      	beq.n	800426c <HAL_DMA_Start_IT+0x430>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a34      	ldr	r2, [pc, #208]	@ (80042b8 <HAL_DMA_Start_IT+0x47c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d040      	beq.n	800426c <HAL_DMA_Start_IT+0x430>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a33      	ldr	r2, [pc, #204]	@ (80042bc <HAL_DMA_Start_IT+0x480>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d03b      	beq.n	800426c <HAL_DMA_Start_IT+0x430>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a31      	ldr	r2, [pc, #196]	@ (80042c0 <HAL_DMA_Start_IT+0x484>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d036      	beq.n	800426c <HAL_DMA_Start_IT+0x430>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a30      	ldr	r2, [pc, #192]	@ (80042c4 <HAL_DMA_Start_IT+0x488>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d031      	beq.n	800426c <HAL_DMA_Start_IT+0x430>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a2e      	ldr	r2, [pc, #184]	@ (80042c8 <HAL_DMA_Start_IT+0x48c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d02c      	beq.n	800426c <HAL_DMA_Start_IT+0x430>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a2d      	ldr	r2, [pc, #180]	@ (80042cc <HAL_DMA_Start_IT+0x490>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d027      	beq.n	800426c <HAL_DMA_Start_IT+0x430>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a2b      	ldr	r2, [pc, #172]	@ (80042d0 <HAL_DMA_Start_IT+0x494>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d022      	beq.n	800426c <HAL_DMA_Start_IT+0x430>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a2a      	ldr	r2, [pc, #168]	@ (80042d4 <HAL_DMA_Start_IT+0x498>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d01d      	beq.n	800426c <HAL_DMA_Start_IT+0x430>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a28      	ldr	r2, [pc, #160]	@ (80042d8 <HAL_DMA_Start_IT+0x49c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d018      	beq.n	800426c <HAL_DMA_Start_IT+0x430>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a27      	ldr	r2, [pc, #156]	@ (80042dc <HAL_DMA_Start_IT+0x4a0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d013      	beq.n	800426c <HAL_DMA_Start_IT+0x430>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a25      	ldr	r2, [pc, #148]	@ (80042e0 <HAL_DMA_Start_IT+0x4a4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00e      	beq.n	800426c <HAL_DMA_Start_IT+0x430>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a24      	ldr	r2, [pc, #144]	@ (80042e4 <HAL_DMA_Start_IT+0x4a8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d009      	beq.n	800426c <HAL_DMA_Start_IT+0x430>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a22      	ldr	r2, [pc, #136]	@ (80042e8 <HAL_DMA_Start_IT+0x4ac>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d004      	beq.n	800426c <HAL_DMA_Start_IT+0x430>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a21      	ldr	r2, [pc, #132]	@ (80042ec <HAL_DMA_Start_IT+0x4b0>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d108      	bne.n	800427e <HAL_DMA_Start_IT+0x442>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0201 	orr.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	e012      	b.n	80042a4 <HAL_DMA_Start_IT+0x468>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f042 0201 	orr.w	r2, r2, #1
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	e009      	b.n	80042a4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004296:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80042a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40020010 	.word	0x40020010
 80042b4:	40020028 	.word	0x40020028
 80042b8:	40020040 	.word	0x40020040
 80042bc:	40020058 	.word	0x40020058
 80042c0:	40020070 	.word	0x40020070
 80042c4:	40020088 	.word	0x40020088
 80042c8:	400200a0 	.word	0x400200a0
 80042cc:	400200b8 	.word	0x400200b8
 80042d0:	40020410 	.word	0x40020410
 80042d4:	40020428 	.word	0x40020428
 80042d8:	40020440 	.word	0x40020440
 80042dc:	40020458 	.word	0x40020458
 80042e0:	40020470 	.word	0x40020470
 80042e4:	40020488 	.word	0x40020488
 80042e8:	400204a0 	.word	0x400204a0
 80042ec:	400204b8 	.word	0x400204b8
 80042f0:	58025408 	.word	0x58025408
 80042f4:	5802541c 	.word	0x5802541c
 80042f8:	58025430 	.word	0x58025430
 80042fc:	58025444 	.word	0x58025444
 8004300:	58025458 	.word	0x58025458
 8004304:	5802546c 	.word	0x5802546c
 8004308:	58025480 	.word	0x58025480
 800430c:	58025494 	.word	0x58025494

08004310 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004318:	f7fd fe46 	bl	8001fa8 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e2dc      	b.n	80048e2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d008      	beq.n	8004346 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2280      	movs	r2, #128	@ 0x80
 8004338:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e2cd      	b.n	80048e2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a76      	ldr	r2, [pc, #472]	@ (8004524 <HAL_DMA_Abort+0x214>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d04a      	beq.n	80043e6 <HAL_DMA_Abort+0xd6>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a74      	ldr	r2, [pc, #464]	@ (8004528 <HAL_DMA_Abort+0x218>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d045      	beq.n	80043e6 <HAL_DMA_Abort+0xd6>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a73      	ldr	r2, [pc, #460]	@ (800452c <HAL_DMA_Abort+0x21c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d040      	beq.n	80043e6 <HAL_DMA_Abort+0xd6>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a71      	ldr	r2, [pc, #452]	@ (8004530 <HAL_DMA_Abort+0x220>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d03b      	beq.n	80043e6 <HAL_DMA_Abort+0xd6>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a70      	ldr	r2, [pc, #448]	@ (8004534 <HAL_DMA_Abort+0x224>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d036      	beq.n	80043e6 <HAL_DMA_Abort+0xd6>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a6e      	ldr	r2, [pc, #440]	@ (8004538 <HAL_DMA_Abort+0x228>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d031      	beq.n	80043e6 <HAL_DMA_Abort+0xd6>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a6d      	ldr	r2, [pc, #436]	@ (800453c <HAL_DMA_Abort+0x22c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d02c      	beq.n	80043e6 <HAL_DMA_Abort+0xd6>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a6b      	ldr	r2, [pc, #428]	@ (8004540 <HAL_DMA_Abort+0x230>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d027      	beq.n	80043e6 <HAL_DMA_Abort+0xd6>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a6a      	ldr	r2, [pc, #424]	@ (8004544 <HAL_DMA_Abort+0x234>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d022      	beq.n	80043e6 <HAL_DMA_Abort+0xd6>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a68      	ldr	r2, [pc, #416]	@ (8004548 <HAL_DMA_Abort+0x238>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d01d      	beq.n	80043e6 <HAL_DMA_Abort+0xd6>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a67      	ldr	r2, [pc, #412]	@ (800454c <HAL_DMA_Abort+0x23c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d018      	beq.n	80043e6 <HAL_DMA_Abort+0xd6>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a65      	ldr	r2, [pc, #404]	@ (8004550 <HAL_DMA_Abort+0x240>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d013      	beq.n	80043e6 <HAL_DMA_Abort+0xd6>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a64      	ldr	r2, [pc, #400]	@ (8004554 <HAL_DMA_Abort+0x244>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d00e      	beq.n	80043e6 <HAL_DMA_Abort+0xd6>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a62      	ldr	r2, [pc, #392]	@ (8004558 <HAL_DMA_Abort+0x248>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d009      	beq.n	80043e6 <HAL_DMA_Abort+0xd6>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a61      	ldr	r2, [pc, #388]	@ (800455c <HAL_DMA_Abort+0x24c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d004      	beq.n	80043e6 <HAL_DMA_Abort+0xd6>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a5f      	ldr	r2, [pc, #380]	@ (8004560 <HAL_DMA_Abort+0x250>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d101      	bne.n	80043ea <HAL_DMA_Abort+0xda>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <HAL_DMA_Abort+0xdc>
 80043ea:	2300      	movs	r3, #0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d013      	beq.n	8004418 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 021e 	bic.w	r2, r2, #30
 80043fe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695a      	ldr	r2, [r3, #20]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800440e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	617b      	str	r3, [r7, #20]
 8004416:	e00a      	b.n	800442e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 020e 	bic.w	r2, r2, #14
 8004426:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a3c      	ldr	r2, [pc, #240]	@ (8004524 <HAL_DMA_Abort+0x214>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d072      	beq.n	800451e <HAL_DMA_Abort+0x20e>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a3a      	ldr	r2, [pc, #232]	@ (8004528 <HAL_DMA_Abort+0x218>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d06d      	beq.n	800451e <HAL_DMA_Abort+0x20e>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a39      	ldr	r2, [pc, #228]	@ (800452c <HAL_DMA_Abort+0x21c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d068      	beq.n	800451e <HAL_DMA_Abort+0x20e>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a37      	ldr	r2, [pc, #220]	@ (8004530 <HAL_DMA_Abort+0x220>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d063      	beq.n	800451e <HAL_DMA_Abort+0x20e>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a36      	ldr	r2, [pc, #216]	@ (8004534 <HAL_DMA_Abort+0x224>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d05e      	beq.n	800451e <HAL_DMA_Abort+0x20e>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a34      	ldr	r2, [pc, #208]	@ (8004538 <HAL_DMA_Abort+0x228>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d059      	beq.n	800451e <HAL_DMA_Abort+0x20e>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a33      	ldr	r2, [pc, #204]	@ (800453c <HAL_DMA_Abort+0x22c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d054      	beq.n	800451e <HAL_DMA_Abort+0x20e>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a31      	ldr	r2, [pc, #196]	@ (8004540 <HAL_DMA_Abort+0x230>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d04f      	beq.n	800451e <HAL_DMA_Abort+0x20e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a30      	ldr	r2, [pc, #192]	@ (8004544 <HAL_DMA_Abort+0x234>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d04a      	beq.n	800451e <HAL_DMA_Abort+0x20e>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a2e      	ldr	r2, [pc, #184]	@ (8004548 <HAL_DMA_Abort+0x238>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d045      	beq.n	800451e <HAL_DMA_Abort+0x20e>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a2d      	ldr	r2, [pc, #180]	@ (800454c <HAL_DMA_Abort+0x23c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d040      	beq.n	800451e <HAL_DMA_Abort+0x20e>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004550 <HAL_DMA_Abort+0x240>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d03b      	beq.n	800451e <HAL_DMA_Abort+0x20e>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004554 <HAL_DMA_Abort+0x244>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d036      	beq.n	800451e <HAL_DMA_Abort+0x20e>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a28      	ldr	r2, [pc, #160]	@ (8004558 <HAL_DMA_Abort+0x248>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d031      	beq.n	800451e <HAL_DMA_Abort+0x20e>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a27      	ldr	r2, [pc, #156]	@ (800455c <HAL_DMA_Abort+0x24c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d02c      	beq.n	800451e <HAL_DMA_Abort+0x20e>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a25      	ldr	r2, [pc, #148]	@ (8004560 <HAL_DMA_Abort+0x250>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d027      	beq.n	800451e <HAL_DMA_Abort+0x20e>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a24      	ldr	r2, [pc, #144]	@ (8004564 <HAL_DMA_Abort+0x254>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d022      	beq.n	800451e <HAL_DMA_Abort+0x20e>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a22      	ldr	r2, [pc, #136]	@ (8004568 <HAL_DMA_Abort+0x258>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d01d      	beq.n	800451e <HAL_DMA_Abort+0x20e>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a21      	ldr	r2, [pc, #132]	@ (800456c <HAL_DMA_Abort+0x25c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d018      	beq.n	800451e <HAL_DMA_Abort+0x20e>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004570 <HAL_DMA_Abort+0x260>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d013      	beq.n	800451e <HAL_DMA_Abort+0x20e>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a1e      	ldr	r2, [pc, #120]	@ (8004574 <HAL_DMA_Abort+0x264>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d00e      	beq.n	800451e <HAL_DMA_Abort+0x20e>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a1c      	ldr	r2, [pc, #112]	@ (8004578 <HAL_DMA_Abort+0x268>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d009      	beq.n	800451e <HAL_DMA_Abort+0x20e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a1b      	ldr	r2, [pc, #108]	@ (800457c <HAL_DMA_Abort+0x26c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d004      	beq.n	800451e <HAL_DMA_Abort+0x20e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a19      	ldr	r2, [pc, #100]	@ (8004580 <HAL_DMA_Abort+0x270>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d132      	bne.n	8004584 <HAL_DMA_Abort+0x274>
 800451e:	2301      	movs	r3, #1
 8004520:	e031      	b.n	8004586 <HAL_DMA_Abort+0x276>
 8004522:	bf00      	nop
 8004524:	40020010 	.word	0x40020010
 8004528:	40020028 	.word	0x40020028
 800452c:	40020040 	.word	0x40020040
 8004530:	40020058 	.word	0x40020058
 8004534:	40020070 	.word	0x40020070
 8004538:	40020088 	.word	0x40020088
 800453c:	400200a0 	.word	0x400200a0
 8004540:	400200b8 	.word	0x400200b8
 8004544:	40020410 	.word	0x40020410
 8004548:	40020428 	.word	0x40020428
 800454c:	40020440 	.word	0x40020440
 8004550:	40020458 	.word	0x40020458
 8004554:	40020470 	.word	0x40020470
 8004558:	40020488 	.word	0x40020488
 800455c:	400204a0 	.word	0x400204a0
 8004560:	400204b8 	.word	0x400204b8
 8004564:	58025408 	.word	0x58025408
 8004568:	5802541c 	.word	0x5802541c
 800456c:	58025430 	.word	0x58025430
 8004570:	58025444 	.word	0x58025444
 8004574:	58025458 	.word	0x58025458
 8004578:	5802546c 	.word	0x5802546c
 800457c:	58025480 	.word	0x58025480
 8004580:	58025494 	.word	0x58025494
 8004584:	2300      	movs	r3, #0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d007      	beq.n	800459a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004594:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004598:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a6d      	ldr	r2, [pc, #436]	@ (8004754 <HAL_DMA_Abort+0x444>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d04a      	beq.n	800463a <HAL_DMA_Abort+0x32a>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a6b      	ldr	r2, [pc, #428]	@ (8004758 <HAL_DMA_Abort+0x448>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d045      	beq.n	800463a <HAL_DMA_Abort+0x32a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a6a      	ldr	r2, [pc, #424]	@ (800475c <HAL_DMA_Abort+0x44c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d040      	beq.n	800463a <HAL_DMA_Abort+0x32a>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a68      	ldr	r2, [pc, #416]	@ (8004760 <HAL_DMA_Abort+0x450>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d03b      	beq.n	800463a <HAL_DMA_Abort+0x32a>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a67      	ldr	r2, [pc, #412]	@ (8004764 <HAL_DMA_Abort+0x454>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d036      	beq.n	800463a <HAL_DMA_Abort+0x32a>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a65      	ldr	r2, [pc, #404]	@ (8004768 <HAL_DMA_Abort+0x458>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d031      	beq.n	800463a <HAL_DMA_Abort+0x32a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a64      	ldr	r2, [pc, #400]	@ (800476c <HAL_DMA_Abort+0x45c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d02c      	beq.n	800463a <HAL_DMA_Abort+0x32a>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a62      	ldr	r2, [pc, #392]	@ (8004770 <HAL_DMA_Abort+0x460>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d027      	beq.n	800463a <HAL_DMA_Abort+0x32a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a61      	ldr	r2, [pc, #388]	@ (8004774 <HAL_DMA_Abort+0x464>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d022      	beq.n	800463a <HAL_DMA_Abort+0x32a>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a5f      	ldr	r2, [pc, #380]	@ (8004778 <HAL_DMA_Abort+0x468>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d01d      	beq.n	800463a <HAL_DMA_Abort+0x32a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a5e      	ldr	r2, [pc, #376]	@ (800477c <HAL_DMA_Abort+0x46c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d018      	beq.n	800463a <HAL_DMA_Abort+0x32a>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a5c      	ldr	r2, [pc, #368]	@ (8004780 <HAL_DMA_Abort+0x470>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d013      	beq.n	800463a <HAL_DMA_Abort+0x32a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a5b      	ldr	r2, [pc, #364]	@ (8004784 <HAL_DMA_Abort+0x474>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d00e      	beq.n	800463a <HAL_DMA_Abort+0x32a>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a59      	ldr	r2, [pc, #356]	@ (8004788 <HAL_DMA_Abort+0x478>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d009      	beq.n	800463a <HAL_DMA_Abort+0x32a>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a58      	ldr	r2, [pc, #352]	@ (800478c <HAL_DMA_Abort+0x47c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d004      	beq.n	800463a <HAL_DMA_Abort+0x32a>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a56      	ldr	r2, [pc, #344]	@ (8004790 <HAL_DMA_Abort+0x480>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d108      	bne.n	800464c <HAL_DMA_Abort+0x33c>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0201 	bic.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	e007      	b.n	800465c <HAL_DMA_Abort+0x34c>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 0201 	bic.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800465c:	e013      	b.n	8004686 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800465e:	f7fd fca3 	bl	8001fa8 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b05      	cmp	r3, #5
 800466a:	d90c      	bls.n	8004686 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2203      	movs	r2, #3
 8004676:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e12d      	b.n	80048e2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1e5      	bne.n	800465e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a2f      	ldr	r2, [pc, #188]	@ (8004754 <HAL_DMA_Abort+0x444>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d04a      	beq.n	8004732 <HAL_DMA_Abort+0x422>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a2d      	ldr	r2, [pc, #180]	@ (8004758 <HAL_DMA_Abort+0x448>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d045      	beq.n	8004732 <HAL_DMA_Abort+0x422>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a2c      	ldr	r2, [pc, #176]	@ (800475c <HAL_DMA_Abort+0x44c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d040      	beq.n	8004732 <HAL_DMA_Abort+0x422>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a2a      	ldr	r2, [pc, #168]	@ (8004760 <HAL_DMA_Abort+0x450>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d03b      	beq.n	8004732 <HAL_DMA_Abort+0x422>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a29      	ldr	r2, [pc, #164]	@ (8004764 <HAL_DMA_Abort+0x454>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d036      	beq.n	8004732 <HAL_DMA_Abort+0x422>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a27      	ldr	r2, [pc, #156]	@ (8004768 <HAL_DMA_Abort+0x458>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d031      	beq.n	8004732 <HAL_DMA_Abort+0x422>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a26      	ldr	r2, [pc, #152]	@ (800476c <HAL_DMA_Abort+0x45c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d02c      	beq.n	8004732 <HAL_DMA_Abort+0x422>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a24      	ldr	r2, [pc, #144]	@ (8004770 <HAL_DMA_Abort+0x460>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d027      	beq.n	8004732 <HAL_DMA_Abort+0x422>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a23      	ldr	r2, [pc, #140]	@ (8004774 <HAL_DMA_Abort+0x464>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d022      	beq.n	8004732 <HAL_DMA_Abort+0x422>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a21      	ldr	r2, [pc, #132]	@ (8004778 <HAL_DMA_Abort+0x468>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d01d      	beq.n	8004732 <HAL_DMA_Abort+0x422>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a20      	ldr	r2, [pc, #128]	@ (800477c <HAL_DMA_Abort+0x46c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d018      	beq.n	8004732 <HAL_DMA_Abort+0x422>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a1e      	ldr	r2, [pc, #120]	@ (8004780 <HAL_DMA_Abort+0x470>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d013      	beq.n	8004732 <HAL_DMA_Abort+0x422>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a1d      	ldr	r2, [pc, #116]	@ (8004784 <HAL_DMA_Abort+0x474>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d00e      	beq.n	8004732 <HAL_DMA_Abort+0x422>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a1b      	ldr	r2, [pc, #108]	@ (8004788 <HAL_DMA_Abort+0x478>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d009      	beq.n	8004732 <HAL_DMA_Abort+0x422>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a1a      	ldr	r2, [pc, #104]	@ (800478c <HAL_DMA_Abort+0x47c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d004      	beq.n	8004732 <HAL_DMA_Abort+0x422>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a18      	ldr	r2, [pc, #96]	@ (8004790 <HAL_DMA_Abort+0x480>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d101      	bne.n	8004736 <HAL_DMA_Abort+0x426>
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <HAL_DMA_Abort+0x428>
 8004736:	2300      	movs	r3, #0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d02b      	beq.n	8004794 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004740:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004746:	f003 031f 	and.w	r3, r3, #31
 800474a:	223f      	movs	r2, #63	@ 0x3f
 800474c:	409a      	lsls	r2, r3
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	609a      	str	r2, [r3, #8]
 8004752:	e02a      	b.n	80047aa <HAL_DMA_Abort+0x49a>
 8004754:	40020010 	.word	0x40020010
 8004758:	40020028 	.word	0x40020028
 800475c:	40020040 	.word	0x40020040
 8004760:	40020058 	.word	0x40020058
 8004764:	40020070 	.word	0x40020070
 8004768:	40020088 	.word	0x40020088
 800476c:	400200a0 	.word	0x400200a0
 8004770:	400200b8 	.word	0x400200b8
 8004774:	40020410 	.word	0x40020410
 8004778:	40020428 	.word	0x40020428
 800477c:	40020440 	.word	0x40020440
 8004780:	40020458 	.word	0x40020458
 8004784:	40020470 	.word	0x40020470
 8004788:	40020488 	.word	0x40020488
 800478c:	400204a0 	.word	0x400204a0
 8004790:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004798:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800479e:	f003 031f 	and.w	r3, r3, #31
 80047a2:	2201      	movs	r2, #1
 80047a4:	409a      	lsls	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a4f      	ldr	r2, [pc, #316]	@ (80048ec <HAL_DMA_Abort+0x5dc>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d072      	beq.n	800489a <HAL_DMA_Abort+0x58a>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a4d      	ldr	r2, [pc, #308]	@ (80048f0 <HAL_DMA_Abort+0x5e0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d06d      	beq.n	800489a <HAL_DMA_Abort+0x58a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a4c      	ldr	r2, [pc, #304]	@ (80048f4 <HAL_DMA_Abort+0x5e4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d068      	beq.n	800489a <HAL_DMA_Abort+0x58a>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a4a      	ldr	r2, [pc, #296]	@ (80048f8 <HAL_DMA_Abort+0x5e8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d063      	beq.n	800489a <HAL_DMA_Abort+0x58a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a49      	ldr	r2, [pc, #292]	@ (80048fc <HAL_DMA_Abort+0x5ec>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d05e      	beq.n	800489a <HAL_DMA_Abort+0x58a>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a47      	ldr	r2, [pc, #284]	@ (8004900 <HAL_DMA_Abort+0x5f0>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d059      	beq.n	800489a <HAL_DMA_Abort+0x58a>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a46      	ldr	r2, [pc, #280]	@ (8004904 <HAL_DMA_Abort+0x5f4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d054      	beq.n	800489a <HAL_DMA_Abort+0x58a>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a44      	ldr	r2, [pc, #272]	@ (8004908 <HAL_DMA_Abort+0x5f8>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d04f      	beq.n	800489a <HAL_DMA_Abort+0x58a>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a43      	ldr	r2, [pc, #268]	@ (800490c <HAL_DMA_Abort+0x5fc>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d04a      	beq.n	800489a <HAL_DMA_Abort+0x58a>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a41      	ldr	r2, [pc, #260]	@ (8004910 <HAL_DMA_Abort+0x600>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d045      	beq.n	800489a <HAL_DMA_Abort+0x58a>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a40      	ldr	r2, [pc, #256]	@ (8004914 <HAL_DMA_Abort+0x604>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d040      	beq.n	800489a <HAL_DMA_Abort+0x58a>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a3e      	ldr	r2, [pc, #248]	@ (8004918 <HAL_DMA_Abort+0x608>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d03b      	beq.n	800489a <HAL_DMA_Abort+0x58a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a3d      	ldr	r2, [pc, #244]	@ (800491c <HAL_DMA_Abort+0x60c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d036      	beq.n	800489a <HAL_DMA_Abort+0x58a>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a3b      	ldr	r2, [pc, #236]	@ (8004920 <HAL_DMA_Abort+0x610>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d031      	beq.n	800489a <HAL_DMA_Abort+0x58a>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a3a      	ldr	r2, [pc, #232]	@ (8004924 <HAL_DMA_Abort+0x614>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d02c      	beq.n	800489a <HAL_DMA_Abort+0x58a>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a38      	ldr	r2, [pc, #224]	@ (8004928 <HAL_DMA_Abort+0x618>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d027      	beq.n	800489a <HAL_DMA_Abort+0x58a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a37      	ldr	r2, [pc, #220]	@ (800492c <HAL_DMA_Abort+0x61c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d022      	beq.n	800489a <HAL_DMA_Abort+0x58a>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a35      	ldr	r2, [pc, #212]	@ (8004930 <HAL_DMA_Abort+0x620>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d01d      	beq.n	800489a <HAL_DMA_Abort+0x58a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a34      	ldr	r2, [pc, #208]	@ (8004934 <HAL_DMA_Abort+0x624>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d018      	beq.n	800489a <HAL_DMA_Abort+0x58a>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a32      	ldr	r2, [pc, #200]	@ (8004938 <HAL_DMA_Abort+0x628>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d013      	beq.n	800489a <HAL_DMA_Abort+0x58a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a31      	ldr	r2, [pc, #196]	@ (800493c <HAL_DMA_Abort+0x62c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d00e      	beq.n	800489a <HAL_DMA_Abort+0x58a>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a2f      	ldr	r2, [pc, #188]	@ (8004940 <HAL_DMA_Abort+0x630>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d009      	beq.n	800489a <HAL_DMA_Abort+0x58a>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a2e      	ldr	r2, [pc, #184]	@ (8004944 <HAL_DMA_Abort+0x634>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d004      	beq.n	800489a <HAL_DMA_Abort+0x58a>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a2c      	ldr	r2, [pc, #176]	@ (8004948 <HAL_DMA_Abort+0x638>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d101      	bne.n	800489e <HAL_DMA_Abort+0x58e>
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <HAL_DMA_Abort+0x590>
 800489e:	2300      	movs	r3, #0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d015      	beq.n	80048d0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80048ac:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00c      	beq.n	80048d0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048c4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80048ce:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	40020010 	.word	0x40020010
 80048f0:	40020028 	.word	0x40020028
 80048f4:	40020040 	.word	0x40020040
 80048f8:	40020058 	.word	0x40020058
 80048fc:	40020070 	.word	0x40020070
 8004900:	40020088 	.word	0x40020088
 8004904:	400200a0 	.word	0x400200a0
 8004908:	400200b8 	.word	0x400200b8
 800490c:	40020410 	.word	0x40020410
 8004910:	40020428 	.word	0x40020428
 8004914:	40020440 	.word	0x40020440
 8004918:	40020458 	.word	0x40020458
 800491c:	40020470 	.word	0x40020470
 8004920:	40020488 	.word	0x40020488
 8004924:	400204a0 	.word	0x400204a0
 8004928:	400204b8 	.word	0x400204b8
 800492c:	58025408 	.word	0x58025408
 8004930:	5802541c 	.word	0x5802541c
 8004934:	58025430 	.word	0x58025430
 8004938:	58025444 	.word	0x58025444
 800493c:	58025458 	.word	0x58025458
 8004940:	5802546c 	.word	0x5802546c
 8004944:	58025480 	.word	0x58025480
 8004948:	58025494 	.word	0x58025494

0800494c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e237      	b.n	8004dce <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d004      	beq.n	8004974 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2280      	movs	r2, #128	@ 0x80
 800496e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e22c      	b.n	8004dce <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a5c      	ldr	r2, [pc, #368]	@ (8004aec <HAL_DMA_Abort_IT+0x1a0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d04a      	beq.n	8004a14 <HAL_DMA_Abort_IT+0xc8>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a5b      	ldr	r2, [pc, #364]	@ (8004af0 <HAL_DMA_Abort_IT+0x1a4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d045      	beq.n	8004a14 <HAL_DMA_Abort_IT+0xc8>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a59      	ldr	r2, [pc, #356]	@ (8004af4 <HAL_DMA_Abort_IT+0x1a8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d040      	beq.n	8004a14 <HAL_DMA_Abort_IT+0xc8>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a58      	ldr	r2, [pc, #352]	@ (8004af8 <HAL_DMA_Abort_IT+0x1ac>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d03b      	beq.n	8004a14 <HAL_DMA_Abort_IT+0xc8>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a56      	ldr	r2, [pc, #344]	@ (8004afc <HAL_DMA_Abort_IT+0x1b0>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d036      	beq.n	8004a14 <HAL_DMA_Abort_IT+0xc8>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a55      	ldr	r2, [pc, #340]	@ (8004b00 <HAL_DMA_Abort_IT+0x1b4>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d031      	beq.n	8004a14 <HAL_DMA_Abort_IT+0xc8>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a53      	ldr	r2, [pc, #332]	@ (8004b04 <HAL_DMA_Abort_IT+0x1b8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d02c      	beq.n	8004a14 <HAL_DMA_Abort_IT+0xc8>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a52      	ldr	r2, [pc, #328]	@ (8004b08 <HAL_DMA_Abort_IT+0x1bc>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d027      	beq.n	8004a14 <HAL_DMA_Abort_IT+0xc8>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a50      	ldr	r2, [pc, #320]	@ (8004b0c <HAL_DMA_Abort_IT+0x1c0>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d022      	beq.n	8004a14 <HAL_DMA_Abort_IT+0xc8>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a4f      	ldr	r2, [pc, #316]	@ (8004b10 <HAL_DMA_Abort_IT+0x1c4>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d01d      	beq.n	8004a14 <HAL_DMA_Abort_IT+0xc8>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a4d      	ldr	r2, [pc, #308]	@ (8004b14 <HAL_DMA_Abort_IT+0x1c8>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d018      	beq.n	8004a14 <HAL_DMA_Abort_IT+0xc8>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a4c      	ldr	r2, [pc, #304]	@ (8004b18 <HAL_DMA_Abort_IT+0x1cc>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d013      	beq.n	8004a14 <HAL_DMA_Abort_IT+0xc8>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a4a      	ldr	r2, [pc, #296]	@ (8004b1c <HAL_DMA_Abort_IT+0x1d0>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00e      	beq.n	8004a14 <HAL_DMA_Abort_IT+0xc8>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a49      	ldr	r2, [pc, #292]	@ (8004b20 <HAL_DMA_Abort_IT+0x1d4>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d009      	beq.n	8004a14 <HAL_DMA_Abort_IT+0xc8>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a47      	ldr	r2, [pc, #284]	@ (8004b24 <HAL_DMA_Abort_IT+0x1d8>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d004      	beq.n	8004a14 <HAL_DMA_Abort_IT+0xc8>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a46      	ldr	r2, [pc, #280]	@ (8004b28 <HAL_DMA_Abort_IT+0x1dc>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d101      	bne.n	8004a18 <HAL_DMA_Abort_IT+0xcc>
 8004a14:	2301      	movs	r3, #1
 8004a16:	e000      	b.n	8004a1a <HAL_DMA_Abort_IT+0xce>
 8004a18:	2300      	movs	r3, #0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 8086 	beq.w	8004b2c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2204      	movs	r2, #4
 8004a24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a2f      	ldr	r2, [pc, #188]	@ (8004aec <HAL_DMA_Abort_IT+0x1a0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d04a      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0x17c>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a2e      	ldr	r2, [pc, #184]	@ (8004af0 <HAL_DMA_Abort_IT+0x1a4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d045      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0x17c>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a2c      	ldr	r2, [pc, #176]	@ (8004af4 <HAL_DMA_Abort_IT+0x1a8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d040      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0x17c>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a2b      	ldr	r2, [pc, #172]	@ (8004af8 <HAL_DMA_Abort_IT+0x1ac>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d03b      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0x17c>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a29      	ldr	r2, [pc, #164]	@ (8004afc <HAL_DMA_Abort_IT+0x1b0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d036      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0x17c>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a28      	ldr	r2, [pc, #160]	@ (8004b00 <HAL_DMA_Abort_IT+0x1b4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d031      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0x17c>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a26      	ldr	r2, [pc, #152]	@ (8004b04 <HAL_DMA_Abort_IT+0x1b8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d02c      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0x17c>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a25      	ldr	r2, [pc, #148]	@ (8004b08 <HAL_DMA_Abort_IT+0x1bc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d027      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0x17c>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a23      	ldr	r2, [pc, #140]	@ (8004b0c <HAL_DMA_Abort_IT+0x1c0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d022      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0x17c>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a22      	ldr	r2, [pc, #136]	@ (8004b10 <HAL_DMA_Abort_IT+0x1c4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d01d      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0x17c>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a20      	ldr	r2, [pc, #128]	@ (8004b14 <HAL_DMA_Abort_IT+0x1c8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d018      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0x17c>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a1f      	ldr	r2, [pc, #124]	@ (8004b18 <HAL_DMA_Abort_IT+0x1cc>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d013      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0x17c>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8004b1c <HAL_DMA_Abort_IT+0x1d0>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d00e      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0x17c>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a1c      	ldr	r2, [pc, #112]	@ (8004b20 <HAL_DMA_Abort_IT+0x1d4>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d009      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0x17c>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a1a      	ldr	r2, [pc, #104]	@ (8004b24 <HAL_DMA_Abort_IT+0x1d8>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d004      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0x17c>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a19      	ldr	r2, [pc, #100]	@ (8004b28 <HAL_DMA_Abort_IT+0x1dc>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d108      	bne.n	8004ada <HAL_DMA_Abort_IT+0x18e>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0201 	bic.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	e178      	b.n	8004dcc <HAL_DMA_Abort_IT+0x480>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0201 	bic.w	r2, r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	e16f      	b.n	8004dcc <HAL_DMA_Abort_IT+0x480>
 8004aec:	40020010 	.word	0x40020010
 8004af0:	40020028 	.word	0x40020028
 8004af4:	40020040 	.word	0x40020040
 8004af8:	40020058 	.word	0x40020058
 8004afc:	40020070 	.word	0x40020070
 8004b00:	40020088 	.word	0x40020088
 8004b04:	400200a0 	.word	0x400200a0
 8004b08:	400200b8 	.word	0x400200b8
 8004b0c:	40020410 	.word	0x40020410
 8004b10:	40020428 	.word	0x40020428
 8004b14:	40020440 	.word	0x40020440
 8004b18:	40020458 	.word	0x40020458
 8004b1c:	40020470 	.word	0x40020470
 8004b20:	40020488 	.word	0x40020488
 8004b24:	400204a0 	.word	0x400204a0
 8004b28:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 020e 	bic.w	r2, r2, #14
 8004b3a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a6c      	ldr	r2, [pc, #432]	@ (8004cf4 <HAL_DMA_Abort_IT+0x3a8>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d04a      	beq.n	8004bdc <HAL_DMA_Abort_IT+0x290>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a6b      	ldr	r2, [pc, #428]	@ (8004cf8 <HAL_DMA_Abort_IT+0x3ac>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d045      	beq.n	8004bdc <HAL_DMA_Abort_IT+0x290>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a69      	ldr	r2, [pc, #420]	@ (8004cfc <HAL_DMA_Abort_IT+0x3b0>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d040      	beq.n	8004bdc <HAL_DMA_Abort_IT+0x290>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a68      	ldr	r2, [pc, #416]	@ (8004d00 <HAL_DMA_Abort_IT+0x3b4>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d03b      	beq.n	8004bdc <HAL_DMA_Abort_IT+0x290>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a66      	ldr	r2, [pc, #408]	@ (8004d04 <HAL_DMA_Abort_IT+0x3b8>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d036      	beq.n	8004bdc <HAL_DMA_Abort_IT+0x290>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a65      	ldr	r2, [pc, #404]	@ (8004d08 <HAL_DMA_Abort_IT+0x3bc>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d031      	beq.n	8004bdc <HAL_DMA_Abort_IT+0x290>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a63      	ldr	r2, [pc, #396]	@ (8004d0c <HAL_DMA_Abort_IT+0x3c0>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d02c      	beq.n	8004bdc <HAL_DMA_Abort_IT+0x290>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a62      	ldr	r2, [pc, #392]	@ (8004d10 <HAL_DMA_Abort_IT+0x3c4>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d027      	beq.n	8004bdc <HAL_DMA_Abort_IT+0x290>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a60      	ldr	r2, [pc, #384]	@ (8004d14 <HAL_DMA_Abort_IT+0x3c8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d022      	beq.n	8004bdc <HAL_DMA_Abort_IT+0x290>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a5f      	ldr	r2, [pc, #380]	@ (8004d18 <HAL_DMA_Abort_IT+0x3cc>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d01d      	beq.n	8004bdc <HAL_DMA_Abort_IT+0x290>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a5d      	ldr	r2, [pc, #372]	@ (8004d1c <HAL_DMA_Abort_IT+0x3d0>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d018      	beq.n	8004bdc <HAL_DMA_Abort_IT+0x290>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a5c      	ldr	r2, [pc, #368]	@ (8004d20 <HAL_DMA_Abort_IT+0x3d4>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d013      	beq.n	8004bdc <HAL_DMA_Abort_IT+0x290>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a5a      	ldr	r2, [pc, #360]	@ (8004d24 <HAL_DMA_Abort_IT+0x3d8>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d00e      	beq.n	8004bdc <HAL_DMA_Abort_IT+0x290>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a59      	ldr	r2, [pc, #356]	@ (8004d28 <HAL_DMA_Abort_IT+0x3dc>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d009      	beq.n	8004bdc <HAL_DMA_Abort_IT+0x290>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a57      	ldr	r2, [pc, #348]	@ (8004d2c <HAL_DMA_Abort_IT+0x3e0>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d004      	beq.n	8004bdc <HAL_DMA_Abort_IT+0x290>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a56      	ldr	r2, [pc, #344]	@ (8004d30 <HAL_DMA_Abort_IT+0x3e4>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d108      	bne.n	8004bee <HAL_DMA_Abort_IT+0x2a2>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 0201 	bic.w	r2, r2, #1
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	e007      	b.n	8004bfe <HAL_DMA_Abort_IT+0x2b2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0201 	bic.w	r2, r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a3c      	ldr	r2, [pc, #240]	@ (8004cf4 <HAL_DMA_Abort_IT+0x3a8>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d072      	beq.n	8004cee <HAL_DMA_Abort_IT+0x3a2>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a3a      	ldr	r2, [pc, #232]	@ (8004cf8 <HAL_DMA_Abort_IT+0x3ac>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d06d      	beq.n	8004cee <HAL_DMA_Abort_IT+0x3a2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a39      	ldr	r2, [pc, #228]	@ (8004cfc <HAL_DMA_Abort_IT+0x3b0>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d068      	beq.n	8004cee <HAL_DMA_Abort_IT+0x3a2>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a37      	ldr	r2, [pc, #220]	@ (8004d00 <HAL_DMA_Abort_IT+0x3b4>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d063      	beq.n	8004cee <HAL_DMA_Abort_IT+0x3a2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a36      	ldr	r2, [pc, #216]	@ (8004d04 <HAL_DMA_Abort_IT+0x3b8>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d05e      	beq.n	8004cee <HAL_DMA_Abort_IT+0x3a2>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a34      	ldr	r2, [pc, #208]	@ (8004d08 <HAL_DMA_Abort_IT+0x3bc>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d059      	beq.n	8004cee <HAL_DMA_Abort_IT+0x3a2>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a33      	ldr	r2, [pc, #204]	@ (8004d0c <HAL_DMA_Abort_IT+0x3c0>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d054      	beq.n	8004cee <HAL_DMA_Abort_IT+0x3a2>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a31      	ldr	r2, [pc, #196]	@ (8004d10 <HAL_DMA_Abort_IT+0x3c4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d04f      	beq.n	8004cee <HAL_DMA_Abort_IT+0x3a2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a30      	ldr	r2, [pc, #192]	@ (8004d14 <HAL_DMA_Abort_IT+0x3c8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d04a      	beq.n	8004cee <HAL_DMA_Abort_IT+0x3a2>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a2e      	ldr	r2, [pc, #184]	@ (8004d18 <HAL_DMA_Abort_IT+0x3cc>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d045      	beq.n	8004cee <HAL_DMA_Abort_IT+0x3a2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a2d      	ldr	r2, [pc, #180]	@ (8004d1c <HAL_DMA_Abort_IT+0x3d0>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d040      	beq.n	8004cee <HAL_DMA_Abort_IT+0x3a2>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a2b      	ldr	r2, [pc, #172]	@ (8004d20 <HAL_DMA_Abort_IT+0x3d4>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d03b      	beq.n	8004cee <HAL_DMA_Abort_IT+0x3a2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a2a      	ldr	r2, [pc, #168]	@ (8004d24 <HAL_DMA_Abort_IT+0x3d8>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d036      	beq.n	8004cee <HAL_DMA_Abort_IT+0x3a2>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a28      	ldr	r2, [pc, #160]	@ (8004d28 <HAL_DMA_Abort_IT+0x3dc>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d031      	beq.n	8004cee <HAL_DMA_Abort_IT+0x3a2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a27      	ldr	r2, [pc, #156]	@ (8004d2c <HAL_DMA_Abort_IT+0x3e0>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d02c      	beq.n	8004cee <HAL_DMA_Abort_IT+0x3a2>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a25      	ldr	r2, [pc, #148]	@ (8004d30 <HAL_DMA_Abort_IT+0x3e4>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d027      	beq.n	8004cee <HAL_DMA_Abort_IT+0x3a2>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a24      	ldr	r2, [pc, #144]	@ (8004d34 <HAL_DMA_Abort_IT+0x3e8>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d022      	beq.n	8004cee <HAL_DMA_Abort_IT+0x3a2>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a22      	ldr	r2, [pc, #136]	@ (8004d38 <HAL_DMA_Abort_IT+0x3ec>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d01d      	beq.n	8004cee <HAL_DMA_Abort_IT+0x3a2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a21      	ldr	r2, [pc, #132]	@ (8004d3c <HAL_DMA_Abort_IT+0x3f0>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d018      	beq.n	8004cee <HAL_DMA_Abort_IT+0x3a2>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a1f      	ldr	r2, [pc, #124]	@ (8004d40 <HAL_DMA_Abort_IT+0x3f4>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d013      	beq.n	8004cee <HAL_DMA_Abort_IT+0x3a2>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a1e      	ldr	r2, [pc, #120]	@ (8004d44 <HAL_DMA_Abort_IT+0x3f8>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d00e      	beq.n	8004cee <HAL_DMA_Abort_IT+0x3a2>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d48 <HAL_DMA_Abort_IT+0x3fc>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d009      	beq.n	8004cee <HAL_DMA_Abort_IT+0x3a2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a1b      	ldr	r2, [pc, #108]	@ (8004d4c <HAL_DMA_Abort_IT+0x400>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d004      	beq.n	8004cee <HAL_DMA_Abort_IT+0x3a2>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a19      	ldr	r2, [pc, #100]	@ (8004d50 <HAL_DMA_Abort_IT+0x404>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d132      	bne.n	8004d54 <HAL_DMA_Abort_IT+0x408>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e031      	b.n	8004d56 <HAL_DMA_Abort_IT+0x40a>
 8004cf2:	bf00      	nop
 8004cf4:	40020010 	.word	0x40020010
 8004cf8:	40020028 	.word	0x40020028
 8004cfc:	40020040 	.word	0x40020040
 8004d00:	40020058 	.word	0x40020058
 8004d04:	40020070 	.word	0x40020070
 8004d08:	40020088 	.word	0x40020088
 8004d0c:	400200a0 	.word	0x400200a0
 8004d10:	400200b8 	.word	0x400200b8
 8004d14:	40020410 	.word	0x40020410
 8004d18:	40020428 	.word	0x40020428
 8004d1c:	40020440 	.word	0x40020440
 8004d20:	40020458 	.word	0x40020458
 8004d24:	40020470 	.word	0x40020470
 8004d28:	40020488 	.word	0x40020488
 8004d2c:	400204a0 	.word	0x400204a0
 8004d30:	400204b8 	.word	0x400204b8
 8004d34:	58025408 	.word	0x58025408
 8004d38:	5802541c 	.word	0x5802541c
 8004d3c:	58025430 	.word	0x58025430
 8004d40:	58025444 	.word	0x58025444
 8004d44:	58025458 	.word	0x58025458
 8004d48:	5802546c 	.word	0x5802546c
 8004d4c:	58025480 	.word	0x58025480
 8004d50:	58025494 	.word	0x58025494
 8004d54:	2300      	movs	r3, #0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d028      	beq.n	8004dac <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d68:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d6e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d74:	f003 031f 	and.w	r3, r3, #31
 8004d78:	2201      	movs	r2, #1
 8004d7a:	409a      	lsls	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004d88:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00c      	beq.n	8004dac <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004da0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004daa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d003      	beq.n	8004dcc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop

08004dd8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08a      	sub	sp, #40	@ 0x28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004de4:	4b67      	ldr	r3, [pc, #412]	@ (8004f84 <HAL_DMA_IRQHandler+0x1ac>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a67      	ldr	r2, [pc, #412]	@ (8004f88 <HAL_DMA_IRQHandler+0x1b0>)
 8004dea:	fba2 2303 	umull	r2, r3, r2, r3
 8004dee:	0a9b      	lsrs	r3, r3, #10
 8004df0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dfc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a5f      	ldr	r2, [pc, #380]	@ (8004f8c <HAL_DMA_IRQHandler+0x1b4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d04a      	beq.n	8004eaa <HAL_DMA_IRQHandler+0xd2>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a5d      	ldr	r2, [pc, #372]	@ (8004f90 <HAL_DMA_IRQHandler+0x1b8>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d045      	beq.n	8004eaa <HAL_DMA_IRQHandler+0xd2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a5c      	ldr	r2, [pc, #368]	@ (8004f94 <HAL_DMA_IRQHandler+0x1bc>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d040      	beq.n	8004eaa <HAL_DMA_IRQHandler+0xd2>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a5a      	ldr	r2, [pc, #360]	@ (8004f98 <HAL_DMA_IRQHandler+0x1c0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d03b      	beq.n	8004eaa <HAL_DMA_IRQHandler+0xd2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a59      	ldr	r2, [pc, #356]	@ (8004f9c <HAL_DMA_IRQHandler+0x1c4>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d036      	beq.n	8004eaa <HAL_DMA_IRQHandler+0xd2>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a57      	ldr	r2, [pc, #348]	@ (8004fa0 <HAL_DMA_IRQHandler+0x1c8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d031      	beq.n	8004eaa <HAL_DMA_IRQHandler+0xd2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a56      	ldr	r2, [pc, #344]	@ (8004fa4 <HAL_DMA_IRQHandler+0x1cc>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d02c      	beq.n	8004eaa <HAL_DMA_IRQHandler+0xd2>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a54      	ldr	r2, [pc, #336]	@ (8004fa8 <HAL_DMA_IRQHandler+0x1d0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d027      	beq.n	8004eaa <HAL_DMA_IRQHandler+0xd2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a53      	ldr	r2, [pc, #332]	@ (8004fac <HAL_DMA_IRQHandler+0x1d4>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d022      	beq.n	8004eaa <HAL_DMA_IRQHandler+0xd2>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a51      	ldr	r2, [pc, #324]	@ (8004fb0 <HAL_DMA_IRQHandler+0x1d8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d01d      	beq.n	8004eaa <HAL_DMA_IRQHandler+0xd2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a50      	ldr	r2, [pc, #320]	@ (8004fb4 <HAL_DMA_IRQHandler+0x1dc>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d018      	beq.n	8004eaa <HAL_DMA_IRQHandler+0xd2>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a4e      	ldr	r2, [pc, #312]	@ (8004fb8 <HAL_DMA_IRQHandler+0x1e0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d013      	beq.n	8004eaa <HAL_DMA_IRQHandler+0xd2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a4d      	ldr	r2, [pc, #308]	@ (8004fbc <HAL_DMA_IRQHandler+0x1e4>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00e      	beq.n	8004eaa <HAL_DMA_IRQHandler+0xd2>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a4b      	ldr	r2, [pc, #300]	@ (8004fc0 <HAL_DMA_IRQHandler+0x1e8>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d009      	beq.n	8004eaa <HAL_DMA_IRQHandler+0xd2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a4a      	ldr	r2, [pc, #296]	@ (8004fc4 <HAL_DMA_IRQHandler+0x1ec>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d004      	beq.n	8004eaa <HAL_DMA_IRQHandler+0xd2>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a48      	ldr	r2, [pc, #288]	@ (8004fc8 <HAL_DMA_IRQHandler+0x1f0>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d101      	bne.n	8004eae <HAL_DMA_IRQHandler+0xd6>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e000      	b.n	8004eb0 <HAL_DMA_IRQHandler+0xd8>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 842b 	beq.w	800570c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eba:	f003 031f 	and.w	r3, r3, #31
 8004ebe:	2208      	movs	r2, #8
 8004ec0:	409a      	lsls	r2, r3
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f000 80a2 	beq.w	8005010 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a2e      	ldr	r2, [pc, #184]	@ (8004f8c <HAL_DMA_IRQHandler+0x1b4>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d04a      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x194>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a2d      	ldr	r2, [pc, #180]	@ (8004f90 <HAL_DMA_IRQHandler+0x1b8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d045      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x194>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a2b      	ldr	r2, [pc, #172]	@ (8004f94 <HAL_DMA_IRQHandler+0x1bc>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d040      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x194>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a2a      	ldr	r2, [pc, #168]	@ (8004f98 <HAL_DMA_IRQHandler+0x1c0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d03b      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x194>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a28      	ldr	r2, [pc, #160]	@ (8004f9c <HAL_DMA_IRQHandler+0x1c4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d036      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x194>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a27      	ldr	r2, [pc, #156]	@ (8004fa0 <HAL_DMA_IRQHandler+0x1c8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d031      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x194>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a25      	ldr	r2, [pc, #148]	@ (8004fa4 <HAL_DMA_IRQHandler+0x1cc>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d02c      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x194>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a24      	ldr	r2, [pc, #144]	@ (8004fa8 <HAL_DMA_IRQHandler+0x1d0>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d027      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x194>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a22      	ldr	r2, [pc, #136]	@ (8004fac <HAL_DMA_IRQHandler+0x1d4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d022      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x194>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a21      	ldr	r2, [pc, #132]	@ (8004fb0 <HAL_DMA_IRQHandler+0x1d8>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d01d      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x194>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a1f      	ldr	r2, [pc, #124]	@ (8004fb4 <HAL_DMA_IRQHandler+0x1dc>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d018      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x194>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8004fb8 <HAL_DMA_IRQHandler+0x1e0>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d013      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x194>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a1c      	ldr	r2, [pc, #112]	@ (8004fbc <HAL_DMA_IRQHandler+0x1e4>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d00e      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x194>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a1b      	ldr	r2, [pc, #108]	@ (8004fc0 <HAL_DMA_IRQHandler+0x1e8>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d009      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x194>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a19      	ldr	r2, [pc, #100]	@ (8004fc4 <HAL_DMA_IRQHandler+0x1ec>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d004      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x194>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a18      	ldr	r2, [pc, #96]	@ (8004fc8 <HAL_DMA_IRQHandler+0x1f0>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d12f      	bne.n	8004fcc <HAL_DMA_IRQHandler+0x1f4>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0304 	and.w	r3, r3, #4
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	bf14      	ite	ne
 8004f7a:	2301      	movne	r3, #1
 8004f7c:	2300      	moveq	r3, #0
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	e02e      	b.n	8004fe0 <HAL_DMA_IRQHandler+0x208>
 8004f82:	bf00      	nop
 8004f84:	24000000 	.word	0x24000000
 8004f88:	1b4e81b5 	.word	0x1b4e81b5
 8004f8c:	40020010 	.word	0x40020010
 8004f90:	40020028 	.word	0x40020028
 8004f94:	40020040 	.word	0x40020040
 8004f98:	40020058 	.word	0x40020058
 8004f9c:	40020070 	.word	0x40020070
 8004fa0:	40020088 	.word	0x40020088
 8004fa4:	400200a0 	.word	0x400200a0
 8004fa8:	400200b8 	.word	0x400200b8
 8004fac:	40020410 	.word	0x40020410
 8004fb0:	40020428 	.word	0x40020428
 8004fb4:	40020440 	.word	0x40020440
 8004fb8:	40020458 	.word	0x40020458
 8004fbc:	40020470 	.word	0x40020470
 8004fc0:	40020488 	.word	0x40020488
 8004fc4:	400204a0 	.word	0x400204a0
 8004fc8:	400204b8 	.word	0x400204b8
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	bf14      	ite	ne
 8004fda:	2301      	movne	r3, #1
 8004fdc:	2300      	moveq	r3, #0
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d015      	beq.n	8005010 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0204 	bic.w	r2, r2, #4
 8004ff2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff8:	f003 031f 	and.w	r3, r3, #31
 8004ffc:	2208      	movs	r2, #8
 8004ffe:	409a      	lsls	r2, r3
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005008:	f043 0201 	orr.w	r2, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005014:	f003 031f 	and.w	r3, r3, #31
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	fa22 f303 	lsr.w	r3, r2, r3
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d06e      	beq.n	8005104 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a69      	ldr	r2, [pc, #420]	@ (80051d0 <HAL_DMA_IRQHandler+0x3f8>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d04a      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x2ee>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a67      	ldr	r2, [pc, #412]	@ (80051d4 <HAL_DMA_IRQHandler+0x3fc>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d045      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x2ee>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a66      	ldr	r2, [pc, #408]	@ (80051d8 <HAL_DMA_IRQHandler+0x400>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d040      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x2ee>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a64      	ldr	r2, [pc, #400]	@ (80051dc <HAL_DMA_IRQHandler+0x404>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d03b      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x2ee>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a63      	ldr	r2, [pc, #396]	@ (80051e0 <HAL_DMA_IRQHandler+0x408>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d036      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x2ee>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a61      	ldr	r2, [pc, #388]	@ (80051e4 <HAL_DMA_IRQHandler+0x40c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d031      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x2ee>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a60      	ldr	r2, [pc, #384]	@ (80051e8 <HAL_DMA_IRQHandler+0x410>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d02c      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x2ee>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a5e      	ldr	r2, [pc, #376]	@ (80051ec <HAL_DMA_IRQHandler+0x414>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d027      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x2ee>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a5d      	ldr	r2, [pc, #372]	@ (80051f0 <HAL_DMA_IRQHandler+0x418>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d022      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x2ee>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a5b      	ldr	r2, [pc, #364]	@ (80051f4 <HAL_DMA_IRQHandler+0x41c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d01d      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x2ee>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a5a      	ldr	r2, [pc, #360]	@ (80051f8 <HAL_DMA_IRQHandler+0x420>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d018      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x2ee>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a58      	ldr	r2, [pc, #352]	@ (80051fc <HAL_DMA_IRQHandler+0x424>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d013      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x2ee>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a57      	ldr	r2, [pc, #348]	@ (8005200 <HAL_DMA_IRQHandler+0x428>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d00e      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x2ee>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a55      	ldr	r2, [pc, #340]	@ (8005204 <HAL_DMA_IRQHandler+0x42c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d009      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x2ee>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a54      	ldr	r2, [pc, #336]	@ (8005208 <HAL_DMA_IRQHandler+0x430>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d004      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x2ee>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a52      	ldr	r2, [pc, #328]	@ (800520c <HAL_DMA_IRQHandler+0x434>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d10a      	bne.n	80050dc <HAL_DMA_IRQHandler+0x304>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	bf14      	ite	ne
 80050d4:	2301      	movne	r3, #1
 80050d6:	2300      	moveq	r3, #0
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	e003      	b.n	80050e4 <HAL_DMA_IRQHandler+0x30c>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2300      	movs	r3, #0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00d      	beq.n	8005104 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ec:	f003 031f 	and.w	r3, r3, #31
 80050f0:	2201      	movs	r2, #1
 80050f2:	409a      	lsls	r2, r3
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fc:	f043 0202 	orr.w	r2, r3, #2
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005108:	f003 031f 	and.w	r3, r3, #31
 800510c:	2204      	movs	r2, #4
 800510e:	409a      	lsls	r2, r3
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	4013      	ands	r3, r2
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 808f 	beq.w	8005238 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a2c      	ldr	r2, [pc, #176]	@ (80051d0 <HAL_DMA_IRQHandler+0x3f8>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d04a      	beq.n	80051ba <HAL_DMA_IRQHandler+0x3e2>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a2a      	ldr	r2, [pc, #168]	@ (80051d4 <HAL_DMA_IRQHandler+0x3fc>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d045      	beq.n	80051ba <HAL_DMA_IRQHandler+0x3e2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a29      	ldr	r2, [pc, #164]	@ (80051d8 <HAL_DMA_IRQHandler+0x400>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d040      	beq.n	80051ba <HAL_DMA_IRQHandler+0x3e2>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a27      	ldr	r2, [pc, #156]	@ (80051dc <HAL_DMA_IRQHandler+0x404>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d03b      	beq.n	80051ba <HAL_DMA_IRQHandler+0x3e2>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a26      	ldr	r2, [pc, #152]	@ (80051e0 <HAL_DMA_IRQHandler+0x408>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d036      	beq.n	80051ba <HAL_DMA_IRQHandler+0x3e2>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a24      	ldr	r2, [pc, #144]	@ (80051e4 <HAL_DMA_IRQHandler+0x40c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d031      	beq.n	80051ba <HAL_DMA_IRQHandler+0x3e2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a23      	ldr	r2, [pc, #140]	@ (80051e8 <HAL_DMA_IRQHandler+0x410>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d02c      	beq.n	80051ba <HAL_DMA_IRQHandler+0x3e2>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a21      	ldr	r2, [pc, #132]	@ (80051ec <HAL_DMA_IRQHandler+0x414>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d027      	beq.n	80051ba <HAL_DMA_IRQHandler+0x3e2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a20      	ldr	r2, [pc, #128]	@ (80051f0 <HAL_DMA_IRQHandler+0x418>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d022      	beq.n	80051ba <HAL_DMA_IRQHandler+0x3e2>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a1e      	ldr	r2, [pc, #120]	@ (80051f4 <HAL_DMA_IRQHandler+0x41c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d01d      	beq.n	80051ba <HAL_DMA_IRQHandler+0x3e2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a1d      	ldr	r2, [pc, #116]	@ (80051f8 <HAL_DMA_IRQHandler+0x420>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d018      	beq.n	80051ba <HAL_DMA_IRQHandler+0x3e2>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a1b      	ldr	r2, [pc, #108]	@ (80051fc <HAL_DMA_IRQHandler+0x424>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d013      	beq.n	80051ba <HAL_DMA_IRQHandler+0x3e2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a1a      	ldr	r2, [pc, #104]	@ (8005200 <HAL_DMA_IRQHandler+0x428>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d00e      	beq.n	80051ba <HAL_DMA_IRQHandler+0x3e2>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a18      	ldr	r2, [pc, #96]	@ (8005204 <HAL_DMA_IRQHandler+0x42c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d009      	beq.n	80051ba <HAL_DMA_IRQHandler+0x3e2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a17      	ldr	r2, [pc, #92]	@ (8005208 <HAL_DMA_IRQHandler+0x430>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d004      	beq.n	80051ba <HAL_DMA_IRQHandler+0x3e2>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a15      	ldr	r2, [pc, #84]	@ (800520c <HAL_DMA_IRQHandler+0x434>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d12a      	bne.n	8005210 <HAL_DMA_IRQHandler+0x438>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	bf14      	ite	ne
 80051c8:	2301      	movne	r3, #1
 80051ca:	2300      	moveq	r3, #0
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	e023      	b.n	8005218 <HAL_DMA_IRQHandler+0x440>
 80051d0:	40020010 	.word	0x40020010
 80051d4:	40020028 	.word	0x40020028
 80051d8:	40020040 	.word	0x40020040
 80051dc:	40020058 	.word	0x40020058
 80051e0:	40020070 	.word	0x40020070
 80051e4:	40020088 	.word	0x40020088
 80051e8:	400200a0 	.word	0x400200a0
 80051ec:	400200b8 	.word	0x400200b8
 80051f0:	40020410 	.word	0x40020410
 80051f4:	40020428 	.word	0x40020428
 80051f8:	40020440 	.word	0x40020440
 80051fc:	40020458 	.word	0x40020458
 8005200:	40020470 	.word	0x40020470
 8005204:	40020488 	.word	0x40020488
 8005208:	400204a0 	.word	0x400204a0
 800520c:	400204b8 	.word	0x400204b8
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2300      	movs	r3, #0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00d      	beq.n	8005238 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005220:	f003 031f 	and.w	r3, r3, #31
 8005224:	2204      	movs	r2, #4
 8005226:	409a      	lsls	r2, r3
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005230:	f043 0204 	orr.w	r2, r3, #4
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800523c:	f003 031f 	and.w	r3, r3, #31
 8005240:	2210      	movs	r2, #16
 8005242:	409a      	lsls	r2, r3
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	4013      	ands	r3, r2
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 80a6 	beq.w	800539a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a85      	ldr	r2, [pc, #532]	@ (8005468 <HAL_DMA_IRQHandler+0x690>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d04a      	beq.n	80052ee <HAL_DMA_IRQHandler+0x516>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a83      	ldr	r2, [pc, #524]	@ (800546c <HAL_DMA_IRQHandler+0x694>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d045      	beq.n	80052ee <HAL_DMA_IRQHandler+0x516>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a82      	ldr	r2, [pc, #520]	@ (8005470 <HAL_DMA_IRQHandler+0x698>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d040      	beq.n	80052ee <HAL_DMA_IRQHandler+0x516>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a80      	ldr	r2, [pc, #512]	@ (8005474 <HAL_DMA_IRQHandler+0x69c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d03b      	beq.n	80052ee <HAL_DMA_IRQHandler+0x516>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a7f      	ldr	r2, [pc, #508]	@ (8005478 <HAL_DMA_IRQHandler+0x6a0>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d036      	beq.n	80052ee <HAL_DMA_IRQHandler+0x516>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a7d      	ldr	r2, [pc, #500]	@ (800547c <HAL_DMA_IRQHandler+0x6a4>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d031      	beq.n	80052ee <HAL_DMA_IRQHandler+0x516>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a7c      	ldr	r2, [pc, #496]	@ (8005480 <HAL_DMA_IRQHandler+0x6a8>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d02c      	beq.n	80052ee <HAL_DMA_IRQHandler+0x516>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a7a      	ldr	r2, [pc, #488]	@ (8005484 <HAL_DMA_IRQHandler+0x6ac>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d027      	beq.n	80052ee <HAL_DMA_IRQHandler+0x516>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a79      	ldr	r2, [pc, #484]	@ (8005488 <HAL_DMA_IRQHandler+0x6b0>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d022      	beq.n	80052ee <HAL_DMA_IRQHandler+0x516>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a77      	ldr	r2, [pc, #476]	@ (800548c <HAL_DMA_IRQHandler+0x6b4>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d01d      	beq.n	80052ee <HAL_DMA_IRQHandler+0x516>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a76      	ldr	r2, [pc, #472]	@ (8005490 <HAL_DMA_IRQHandler+0x6b8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d018      	beq.n	80052ee <HAL_DMA_IRQHandler+0x516>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a74      	ldr	r2, [pc, #464]	@ (8005494 <HAL_DMA_IRQHandler+0x6bc>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d013      	beq.n	80052ee <HAL_DMA_IRQHandler+0x516>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a73      	ldr	r2, [pc, #460]	@ (8005498 <HAL_DMA_IRQHandler+0x6c0>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d00e      	beq.n	80052ee <HAL_DMA_IRQHandler+0x516>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a71      	ldr	r2, [pc, #452]	@ (800549c <HAL_DMA_IRQHandler+0x6c4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d009      	beq.n	80052ee <HAL_DMA_IRQHandler+0x516>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a70      	ldr	r2, [pc, #448]	@ (80054a0 <HAL_DMA_IRQHandler+0x6c8>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d004      	beq.n	80052ee <HAL_DMA_IRQHandler+0x516>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a6e      	ldr	r2, [pc, #440]	@ (80054a4 <HAL_DMA_IRQHandler+0x6cc>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d10a      	bne.n	8005304 <HAL_DMA_IRQHandler+0x52c>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0308 	and.w	r3, r3, #8
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	bf14      	ite	ne
 80052fc:	2301      	movne	r3, #1
 80052fe:	2300      	moveq	r3, #0
 8005300:	b2db      	uxtb	r3, r3
 8005302:	e009      	b.n	8005318 <HAL_DMA_IRQHandler+0x540>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0304 	and.w	r3, r3, #4
 800530e:	2b00      	cmp	r3, #0
 8005310:	bf14      	ite	ne
 8005312:	2301      	movne	r3, #1
 8005314:	2300      	moveq	r3, #0
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	d03e      	beq.n	800539a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005320:	f003 031f 	and.w	r3, r3, #31
 8005324:	2210      	movs	r2, #16
 8005326:	409a      	lsls	r2, r3
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d018      	beq.n	800536c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d108      	bne.n	800535a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534c:	2b00      	cmp	r3, #0
 800534e:	d024      	beq.n	800539a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	4798      	blx	r3
 8005358:	e01f      	b.n	800539a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800535e:	2b00      	cmp	r3, #0
 8005360:	d01b      	beq.n	800539a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	4798      	blx	r3
 800536a:	e016      	b.n	800539a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005376:	2b00      	cmp	r3, #0
 8005378:	d107      	bne.n	800538a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 0208 	bic.w	r2, r2, #8
 8005388:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800539e:	f003 031f 	and.w	r3, r3, #31
 80053a2:	2220      	movs	r2, #32
 80053a4:	409a      	lsls	r2, r3
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	4013      	ands	r3, r2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f000 8110 	beq.w	80055d0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a2c      	ldr	r2, [pc, #176]	@ (8005468 <HAL_DMA_IRQHandler+0x690>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d04a      	beq.n	8005450 <HAL_DMA_IRQHandler+0x678>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a2b      	ldr	r2, [pc, #172]	@ (800546c <HAL_DMA_IRQHandler+0x694>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d045      	beq.n	8005450 <HAL_DMA_IRQHandler+0x678>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a29      	ldr	r2, [pc, #164]	@ (8005470 <HAL_DMA_IRQHandler+0x698>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d040      	beq.n	8005450 <HAL_DMA_IRQHandler+0x678>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a28      	ldr	r2, [pc, #160]	@ (8005474 <HAL_DMA_IRQHandler+0x69c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d03b      	beq.n	8005450 <HAL_DMA_IRQHandler+0x678>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a26      	ldr	r2, [pc, #152]	@ (8005478 <HAL_DMA_IRQHandler+0x6a0>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d036      	beq.n	8005450 <HAL_DMA_IRQHandler+0x678>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a25      	ldr	r2, [pc, #148]	@ (800547c <HAL_DMA_IRQHandler+0x6a4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d031      	beq.n	8005450 <HAL_DMA_IRQHandler+0x678>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a23      	ldr	r2, [pc, #140]	@ (8005480 <HAL_DMA_IRQHandler+0x6a8>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d02c      	beq.n	8005450 <HAL_DMA_IRQHandler+0x678>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a22      	ldr	r2, [pc, #136]	@ (8005484 <HAL_DMA_IRQHandler+0x6ac>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d027      	beq.n	8005450 <HAL_DMA_IRQHandler+0x678>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a20      	ldr	r2, [pc, #128]	@ (8005488 <HAL_DMA_IRQHandler+0x6b0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d022      	beq.n	8005450 <HAL_DMA_IRQHandler+0x678>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a1f      	ldr	r2, [pc, #124]	@ (800548c <HAL_DMA_IRQHandler+0x6b4>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d01d      	beq.n	8005450 <HAL_DMA_IRQHandler+0x678>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a1d      	ldr	r2, [pc, #116]	@ (8005490 <HAL_DMA_IRQHandler+0x6b8>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d018      	beq.n	8005450 <HAL_DMA_IRQHandler+0x678>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a1c      	ldr	r2, [pc, #112]	@ (8005494 <HAL_DMA_IRQHandler+0x6bc>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d013      	beq.n	8005450 <HAL_DMA_IRQHandler+0x678>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a1a      	ldr	r2, [pc, #104]	@ (8005498 <HAL_DMA_IRQHandler+0x6c0>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d00e      	beq.n	8005450 <HAL_DMA_IRQHandler+0x678>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a19      	ldr	r2, [pc, #100]	@ (800549c <HAL_DMA_IRQHandler+0x6c4>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d009      	beq.n	8005450 <HAL_DMA_IRQHandler+0x678>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a17      	ldr	r2, [pc, #92]	@ (80054a0 <HAL_DMA_IRQHandler+0x6c8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d004      	beq.n	8005450 <HAL_DMA_IRQHandler+0x678>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a16      	ldr	r2, [pc, #88]	@ (80054a4 <HAL_DMA_IRQHandler+0x6cc>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d12b      	bne.n	80054a8 <HAL_DMA_IRQHandler+0x6d0>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0310 	and.w	r3, r3, #16
 800545a:	2b00      	cmp	r3, #0
 800545c:	bf14      	ite	ne
 800545e:	2301      	movne	r3, #1
 8005460:	2300      	moveq	r3, #0
 8005462:	b2db      	uxtb	r3, r3
 8005464:	e02a      	b.n	80054bc <HAL_DMA_IRQHandler+0x6e4>
 8005466:	bf00      	nop
 8005468:	40020010 	.word	0x40020010
 800546c:	40020028 	.word	0x40020028
 8005470:	40020040 	.word	0x40020040
 8005474:	40020058 	.word	0x40020058
 8005478:	40020070 	.word	0x40020070
 800547c:	40020088 	.word	0x40020088
 8005480:	400200a0 	.word	0x400200a0
 8005484:	400200b8 	.word	0x400200b8
 8005488:	40020410 	.word	0x40020410
 800548c:	40020428 	.word	0x40020428
 8005490:	40020440 	.word	0x40020440
 8005494:	40020458 	.word	0x40020458
 8005498:	40020470 	.word	0x40020470
 800549c:	40020488 	.word	0x40020488
 80054a0:	400204a0 	.word	0x400204a0
 80054a4:	400204b8 	.word	0x400204b8
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	bf14      	ite	ne
 80054b6:	2301      	movne	r3, #1
 80054b8:	2300      	moveq	r3, #0
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 8087 	beq.w	80055d0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054c6:	f003 031f 	and.w	r3, r3, #31
 80054ca:	2220      	movs	r2, #32
 80054cc:	409a      	lsls	r2, r3
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b04      	cmp	r3, #4
 80054dc:	d139      	bne.n	8005552 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 0216 	bic.w	r2, r2, #22
 80054ec:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695a      	ldr	r2, [r3, #20]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80054fc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	d103      	bne.n	800550e <HAL_DMA_IRQHandler+0x736>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800550a:	2b00      	cmp	r3, #0
 800550c:	d007      	beq.n	800551e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0208 	bic.w	r2, r2, #8
 800551c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005522:	f003 031f 	and.w	r3, r3, #31
 8005526:	223f      	movs	r2, #63	@ 0x3f
 8005528:	409a      	lsls	r2, r3
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 834a 	beq.w	8005bdc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	4798      	blx	r3
          }
          return;
 8005550:	e344      	b.n	8005bdc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d018      	beq.n	8005592 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d108      	bne.n	8005580 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005572:	2b00      	cmp	r3, #0
 8005574:	d02c      	beq.n	80055d0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	4798      	blx	r3
 800557e:	e027      	b.n	80055d0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005584:	2b00      	cmp	r3, #0
 8005586:	d023      	beq.n	80055d0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	4798      	blx	r3
 8005590:	e01e      	b.n	80055d0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10f      	bne.n	80055c0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0210 	bic.w	r2, r2, #16
 80055ae:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 8306 	beq.w	8005be6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 8088 	beq.w	80056f8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2204      	movs	r2, #4
 80055ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a7a      	ldr	r2, [pc, #488]	@ (80057e0 <HAL_DMA_IRQHandler+0xa08>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d04a      	beq.n	8005690 <HAL_DMA_IRQHandler+0x8b8>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a79      	ldr	r2, [pc, #484]	@ (80057e4 <HAL_DMA_IRQHandler+0xa0c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d045      	beq.n	8005690 <HAL_DMA_IRQHandler+0x8b8>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a77      	ldr	r2, [pc, #476]	@ (80057e8 <HAL_DMA_IRQHandler+0xa10>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d040      	beq.n	8005690 <HAL_DMA_IRQHandler+0x8b8>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a76      	ldr	r2, [pc, #472]	@ (80057ec <HAL_DMA_IRQHandler+0xa14>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d03b      	beq.n	8005690 <HAL_DMA_IRQHandler+0x8b8>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a74      	ldr	r2, [pc, #464]	@ (80057f0 <HAL_DMA_IRQHandler+0xa18>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d036      	beq.n	8005690 <HAL_DMA_IRQHandler+0x8b8>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a73      	ldr	r2, [pc, #460]	@ (80057f4 <HAL_DMA_IRQHandler+0xa1c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d031      	beq.n	8005690 <HAL_DMA_IRQHandler+0x8b8>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a71      	ldr	r2, [pc, #452]	@ (80057f8 <HAL_DMA_IRQHandler+0xa20>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d02c      	beq.n	8005690 <HAL_DMA_IRQHandler+0x8b8>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a70      	ldr	r2, [pc, #448]	@ (80057fc <HAL_DMA_IRQHandler+0xa24>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d027      	beq.n	8005690 <HAL_DMA_IRQHandler+0x8b8>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a6e      	ldr	r2, [pc, #440]	@ (8005800 <HAL_DMA_IRQHandler+0xa28>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d022      	beq.n	8005690 <HAL_DMA_IRQHandler+0x8b8>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a6d      	ldr	r2, [pc, #436]	@ (8005804 <HAL_DMA_IRQHandler+0xa2c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d01d      	beq.n	8005690 <HAL_DMA_IRQHandler+0x8b8>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a6b      	ldr	r2, [pc, #428]	@ (8005808 <HAL_DMA_IRQHandler+0xa30>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d018      	beq.n	8005690 <HAL_DMA_IRQHandler+0x8b8>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a6a      	ldr	r2, [pc, #424]	@ (800580c <HAL_DMA_IRQHandler+0xa34>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d013      	beq.n	8005690 <HAL_DMA_IRQHandler+0x8b8>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a68      	ldr	r2, [pc, #416]	@ (8005810 <HAL_DMA_IRQHandler+0xa38>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d00e      	beq.n	8005690 <HAL_DMA_IRQHandler+0x8b8>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a67      	ldr	r2, [pc, #412]	@ (8005814 <HAL_DMA_IRQHandler+0xa3c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d009      	beq.n	8005690 <HAL_DMA_IRQHandler+0x8b8>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a65      	ldr	r2, [pc, #404]	@ (8005818 <HAL_DMA_IRQHandler+0xa40>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d004      	beq.n	8005690 <HAL_DMA_IRQHandler+0x8b8>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a64      	ldr	r2, [pc, #400]	@ (800581c <HAL_DMA_IRQHandler+0xa44>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d108      	bne.n	80056a2 <HAL_DMA_IRQHandler+0x8ca>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 0201 	bic.w	r2, r2, #1
 800569e:	601a      	str	r2, [r3, #0]
 80056a0:	e007      	b.n	80056b2 <HAL_DMA_IRQHandler+0x8da>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 0201 	bic.w	r2, r2, #1
 80056b0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	3301      	adds	r3, #1
 80056b6:	60fb      	str	r3, [r7, #12]
 80056b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d307      	bcc.n	80056ce <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1f2      	bne.n	80056b2 <HAL_DMA_IRQHandler+0x8da>
 80056cc:	e000      	b.n	80056d0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80056ce:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d004      	beq.n	80056e8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2203      	movs	r2, #3
 80056e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80056e6:	e003      	b.n	80056f0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 8272 	beq.w	8005be6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	4798      	blx	r3
 800570a:	e26c      	b.n	8005be6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a43      	ldr	r2, [pc, #268]	@ (8005820 <HAL_DMA_IRQHandler+0xa48>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d022      	beq.n	800575c <HAL_DMA_IRQHandler+0x984>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a42      	ldr	r2, [pc, #264]	@ (8005824 <HAL_DMA_IRQHandler+0xa4c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d01d      	beq.n	800575c <HAL_DMA_IRQHandler+0x984>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a40      	ldr	r2, [pc, #256]	@ (8005828 <HAL_DMA_IRQHandler+0xa50>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d018      	beq.n	800575c <HAL_DMA_IRQHandler+0x984>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a3f      	ldr	r2, [pc, #252]	@ (800582c <HAL_DMA_IRQHandler+0xa54>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d013      	beq.n	800575c <HAL_DMA_IRQHandler+0x984>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a3d      	ldr	r2, [pc, #244]	@ (8005830 <HAL_DMA_IRQHandler+0xa58>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00e      	beq.n	800575c <HAL_DMA_IRQHandler+0x984>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a3c      	ldr	r2, [pc, #240]	@ (8005834 <HAL_DMA_IRQHandler+0xa5c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d009      	beq.n	800575c <HAL_DMA_IRQHandler+0x984>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a3a      	ldr	r2, [pc, #232]	@ (8005838 <HAL_DMA_IRQHandler+0xa60>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d004      	beq.n	800575c <HAL_DMA_IRQHandler+0x984>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a39      	ldr	r2, [pc, #228]	@ (800583c <HAL_DMA_IRQHandler+0xa64>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d101      	bne.n	8005760 <HAL_DMA_IRQHandler+0x988>
 800575c:	2301      	movs	r3, #1
 800575e:	e000      	b.n	8005762 <HAL_DMA_IRQHandler+0x98a>
 8005760:	2300      	movs	r3, #0
 8005762:	2b00      	cmp	r3, #0
 8005764:	f000 823f 	beq.w	8005be6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005774:	f003 031f 	and.w	r3, r3, #31
 8005778:	2204      	movs	r2, #4
 800577a:	409a      	lsls	r2, r3
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	4013      	ands	r3, r2
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 80cd 	beq.w	8005920 <HAL_DMA_IRQHandler+0xb48>
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	f003 0304 	and.w	r3, r3, #4
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 80c7 	beq.w	8005920 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005796:	f003 031f 	and.w	r3, r3, #31
 800579a:	2204      	movs	r2, #4
 800579c:	409a      	lsls	r2, r3
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d049      	beq.n	8005840 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d109      	bne.n	80057ca <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f000 8210 	beq.w	8005be0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057c8:	e20a      	b.n	8005be0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 8206 	beq.w	8005be0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057dc:	e200      	b.n	8005be0 <HAL_DMA_IRQHandler+0xe08>
 80057de:	bf00      	nop
 80057e0:	40020010 	.word	0x40020010
 80057e4:	40020028 	.word	0x40020028
 80057e8:	40020040 	.word	0x40020040
 80057ec:	40020058 	.word	0x40020058
 80057f0:	40020070 	.word	0x40020070
 80057f4:	40020088 	.word	0x40020088
 80057f8:	400200a0 	.word	0x400200a0
 80057fc:	400200b8 	.word	0x400200b8
 8005800:	40020410 	.word	0x40020410
 8005804:	40020428 	.word	0x40020428
 8005808:	40020440 	.word	0x40020440
 800580c:	40020458 	.word	0x40020458
 8005810:	40020470 	.word	0x40020470
 8005814:	40020488 	.word	0x40020488
 8005818:	400204a0 	.word	0x400204a0
 800581c:	400204b8 	.word	0x400204b8
 8005820:	58025408 	.word	0x58025408
 8005824:	5802541c 	.word	0x5802541c
 8005828:	58025430 	.word	0x58025430
 800582c:	58025444 	.word	0x58025444
 8005830:	58025458 	.word	0x58025458
 8005834:	5802546c 	.word	0x5802546c
 8005838:	58025480 	.word	0x58025480
 800583c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	f003 0320 	and.w	r3, r3, #32
 8005846:	2b00      	cmp	r3, #0
 8005848:	d160      	bne.n	800590c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a7f      	ldr	r2, [pc, #508]	@ (8005a4c <HAL_DMA_IRQHandler+0xc74>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d04a      	beq.n	80058ea <HAL_DMA_IRQHandler+0xb12>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a7d      	ldr	r2, [pc, #500]	@ (8005a50 <HAL_DMA_IRQHandler+0xc78>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d045      	beq.n	80058ea <HAL_DMA_IRQHandler+0xb12>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a7c      	ldr	r2, [pc, #496]	@ (8005a54 <HAL_DMA_IRQHandler+0xc7c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d040      	beq.n	80058ea <HAL_DMA_IRQHandler+0xb12>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a7a      	ldr	r2, [pc, #488]	@ (8005a58 <HAL_DMA_IRQHandler+0xc80>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d03b      	beq.n	80058ea <HAL_DMA_IRQHandler+0xb12>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a79      	ldr	r2, [pc, #484]	@ (8005a5c <HAL_DMA_IRQHandler+0xc84>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d036      	beq.n	80058ea <HAL_DMA_IRQHandler+0xb12>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a77      	ldr	r2, [pc, #476]	@ (8005a60 <HAL_DMA_IRQHandler+0xc88>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d031      	beq.n	80058ea <HAL_DMA_IRQHandler+0xb12>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a76      	ldr	r2, [pc, #472]	@ (8005a64 <HAL_DMA_IRQHandler+0xc8c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d02c      	beq.n	80058ea <HAL_DMA_IRQHandler+0xb12>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a74      	ldr	r2, [pc, #464]	@ (8005a68 <HAL_DMA_IRQHandler+0xc90>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d027      	beq.n	80058ea <HAL_DMA_IRQHandler+0xb12>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a73      	ldr	r2, [pc, #460]	@ (8005a6c <HAL_DMA_IRQHandler+0xc94>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d022      	beq.n	80058ea <HAL_DMA_IRQHandler+0xb12>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a71      	ldr	r2, [pc, #452]	@ (8005a70 <HAL_DMA_IRQHandler+0xc98>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d01d      	beq.n	80058ea <HAL_DMA_IRQHandler+0xb12>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a70      	ldr	r2, [pc, #448]	@ (8005a74 <HAL_DMA_IRQHandler+0xc9c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d018      	beq.n	80058ea <HAL_DMA_IRQHandler+0xb12>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a6e      	ldr	r2, [pc, #440]	@ (8005a78 <HAL_DMA_IRQHandler+0xca0>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d013      	beq.n	80058ea <HAL_DMA_IRQHandler+0xb12>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a6d      	ldr	r2, [pc, #436]	@ (8005a7c <HAL_DMA_IRQHandler+0xca4>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00e      	beq.n	80058ea <HAL_DMA_IRQHandler+0xb12>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a6b      	ldr	r2, [pc, #428]	@ (8005a80 <HAL_DMA_IRQHandler+0xca8>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d009      	beq.n	80058ea <HAL_DMA_IRQHandler+0xb12>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a6a      	ldr	r2, [pc, #424]	@ (8005a84 <HAL_DMA_IRQHandler+0xcac>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d004      	beq.n	80058ea <HAL_DMA_IRQHandler+0xb12>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a68      	ldr	r2, [pc, #416]	@ (8005a88 <HAL_DMA_IRQHandler+0xcb0>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d108      	bne.n	80058fc <HAL_DMA_IRQHandler+0xb24>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0208 	bic.w	r2, r2, #8
 80058f8:	601a      	str	r2, [r3, #0]
 80058fa:	e007      	b.n	800590c <HAL_DMA_IRQHandler+0xb34>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 0204 	bic.w	r2, r2, #4
 800590a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 8165 	beq.w	8005be0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800591e:	e15f      	b.n	8005be0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005924:	f003 031f 	and.w	r3, r3, #31
 8005928:	2202      	movs	r2, #2
 800592a:	409a      	lsls	r2, r3
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	4013      	ands	r3, r2
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 80c5 	beq.w	8005ac0 <HAL_DMA_IRQHandler+0xce8>
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 80bf 	beq.w	8005ac0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005946:	f003 031f 	and.w	r3, r3, #31
 800594a:	2202      	movs	r2, #2
 800594c:	409a      	lsls	r2, r3
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d018      	beq.n	800598e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d109      	bne.n	800597a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 813a 	beq.w	8005be4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005978:	e134      	b.n	8005be4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800597e:	2b00      	cmp	r3, #0
 8005980:	f000 8130 	beq.w	8005be4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800598c:	e12a      	b.n	8005be4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f003 0320 	and.w	r3, r3, #32
 8005994:	2b00      	cmp	r3, #0
 8005996:	f040 8089 	bne.w	8005aac <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a2b      	ldr	r2, [pc, #172]	@ (8005a4c <HAL_DMA_IRQHandler+0xc74>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d04a      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xc62>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a29      	ldr	r2, [pc, #164]	@ (8005a50 <HAL_DMA_IRQHandler+0xc78>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d045      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xc62>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a28      	ldr	r2, [pc, #160]	@ (8005a54 <HAL_DMA_IRQHandler+0xc7c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d040      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xc62>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a26      	ldr	r2, [pc, #152]	@ (8005a58 <HAL_DMA_IRQHandler+0xc80>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d03b      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xc62>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a25      	ldr	r2, [pc, #148]	@ (8005a5c <HAL_DMA_IRQHandler+0xc84>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d036      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xc62>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a23      	ldr	r2, [pc, #140]	@ (8005a60 <HAL_DMA_IRQHandler+0xc88>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d031      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xc62>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a22      	ldr	r2, [pc, #136]	@ (8005a64 <HAL_DMA_IRQHandler+0xc8c>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d02c      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xc62>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a20      	ldr	r2, [pc, #128]	@ (8005a68 <HAL_DMA_IRQHandler+0xc90>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d027      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xc62>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a1f      	ldr	r2, [pc, #124]	@ (8005a6c <HAL_DMA_IRQHandler+0xc94>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d022      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xc62>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005a70 <HAL_DMA_IRQHandler+0xc98>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d01d      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xc62>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1c      	ldr	r2, [pc, #112]	@ (8005a74 <HAL_DMA_IRQHandler+0xc9c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d018      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xc62>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a1a      	ldr	r2, [pc, #104]	@ (8005a78 <HAL_DMA_IRQHandler+0xca0>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d013      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xc62>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a19      	ldr	r2, [pc, #100]	@ (8005a7c <HAL_DMA_IRQHandler+0xca4>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00e      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xc62>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a17      	ldr	r2, [pc, #92]	@ (8005a80 <HAL_DMA_IRQHandler+0xca8>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d009      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xc62>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a16      	ldr	r2, [pc, #88]	@ (8005a84 <HAL_DMA_IRQHandler+0xcac>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d004      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xc62>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a14      	ldr	r2, [pc, #80]	@ (8005a88 <HAL_DMA_IRQHandler+0xcb0>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d128      	bne.n	8005a8c <HAL_DMA_IRQHandler+0xcb4>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 0214 	bic.w	r2, r2, #20
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	e027      	b.n	8005a9c <HAL_DMA_IRQHandler+0xcc4>
 8005a4c:	40020010 	.word	0x40020010
 8005a50:	40020028 	.word	0x40020028
 8005a54:	40020040 	.word	0x40020040
 8005a58:	40020058 	.word	0x40020058
 8005a5c:	40020070 	.word	0x40020070
 8005a60:	40020088 	.word	0x40020088
 8005a64:	400200a0 	.word	0x400200a0
 8005a68:	400200b8 	.word	0x400200b8
 8005a6c:	40020410 	.word	0x40020410
 8005a70:	40020428 	.word	0x40020428
 8005a74:	40020440 	.word	0x40020440
 8005a78:	40020458 	.word	0x40020458
 8005a7c:	40020470 	.word	0x40020470
 8005a80:	40020488 	.word	0x40020488
 8005a84:	400204a0 	.word	0x400204a0
 8005a88:	400204b8 	.word	0x400204b8
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 020a 	bic.w	r2, r2, #10
 8005a9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 8097 	beq.w	8005be4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005abe:	e091      	b.n	8005be4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac4:	f003 031f 	and.w	r3, r3, #31
 8005ac8:	2208      	movs	r2, #8
 8005aca:	409a      	lsls	r2, r3
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	4013      	ands	r3, r2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 8088 	beq.w	8005be6 <HAL_DMA_IRQHandler+0xe0e>
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f003 0308 	and.w	r3, r3, #8
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 8082 	beq.w	8005be6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a41      	ldr	r2, [pc, #260]	@ (8005bec <HAL_DMA_IRQHandler+0xe14>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d04a      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xdaa>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a3f      	ldr	r2, [pc, #252]	@ (8005bf0 <HAL_DMA_IRQHandler+0xe18>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d045      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xdaa>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a3e      	ldr	r2, [pc, #248]	@ (8005bf4 <HAL_DMA_IRQHandler+0xe1c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d040      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xdaa>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a3c      	ldr	r2, [pc, #240]	@ (8005bf8 <HAL_DMA_IRQHandler+0xe20>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d03b      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xdaa>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a3b      	ldr	r2, [pc, #236]	@ (8005bfc <HAL_DMA_IRQHandler+0xe24>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d036      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xdaa>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a39      	ldr	r2, [pc, #228]	@ (8005c00 <HAL_DMA_IRQHandler+0xe28>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d031      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xdaa>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a38      	ldr	r2, [pc, #224]	@ (8005c04 <HAL_DMA_IRQHandler+0xe2c>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d02c      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xdaa>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a36      	ldr	r2, [pc, #216]	@ (8005c08 <HAL_DMA_IRQHandler+0xe30>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d027      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xdaa>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a35      	ldr	r2, [pc, #212]	@ (8005c0c <HAL_DMA_IRQHandler+0xe34>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d022      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xdaa>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a33      	ldr	r2, [pc, #204]	@ (8005c10 <HAL_DMA_IRQHandler+0xe38>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d01d      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xdaa>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a32      	ldr	r2, [pc, #200]	@ (8005c14 <HAL_DMA_IRQHandler+0xe3c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d018      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xdaa>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a30      	ldr	r2, [pc, #192]	@ (8005c18 <HAL_DMA_IRQHandler+0xe40>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d013      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xdaa>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a2f      	ldr	r2, [pc, #188]	@ (8005c1c <HAL_DMA_IRQHandler+0xe44>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00e      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xdaa>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a2d      	ldr	r2, [pc, #180]	@ (8005c20 <HAL_DMA_IRQHandler+0xe48>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d009      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xdaa>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a2c      	ldr	r2, [pc, #176]	@ (8005c24 <HAL_DMA_IRQHandler+0xe4c>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d004      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xdaa>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a2a      	ldr	r2, [pc, #168]	@ (8005c28 <HAL_DMA_IRQHandler+0xe50>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d108      	bne.n	8005b94 <HAL_DMA_IRQHandler+0xdbc>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f022 021c 	bic.w	r2, r2, #28
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	e007      	b.n	8005ba4 <HAL_DMA_IRQHandler+0xdcc>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 020e 	bic.w	r2, r2, #14
 8005ba2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ba8:	f003 031f 	and.w	r3, r3, #31
 8005bac:	2201      	movs	r2, #1
 8005bae:	409a      	lsls	r2, r3
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d009      	beq.n	8005be6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	4798      	blx	r3
 8005bda:	e004      	b.n	8005be6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005bdc:	bf00      	nop
 8005bde:	e002      	b.n	8005be6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005be0:	bf00      	nop
 8005be2:	e000      	b.n	8005be6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005be4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005be6:	3728      	adds	r7, #40	@ 0x28
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	40020010 	.word	0x40020010
 8005bf0:	40020028 	.word	0x40020028
 8005bf4:	40020040 	.word	0x40020040
 8005bf8:	40020058 	.word	0x40020058
 8005bfc:	40020070 	.word	0x40020070
 8005c00:	40020088 	.word	0x40020088
 8005c04:	400200a0 	.word	0x400200a0
 8005c08:	400200b8 	.word	0x400200b8
 8005c0c:	40020410 	.word	0x40020410
 8005c10:	40020428 	.word	0x40020428
 8005c14:	40020440 	.word	0x40020440
 8005c18:	40020458 	.word	0x40020458
 8005c1c:	40020470 	.word	0x40020470
 8005c20:	40020488 	.word	0x40020488
 8005c24:	400204a0 	.word	0x400204a0
 8005c28:	400204b8 	.word	0x400204b8

08005c2c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
 8005c38:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c3e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c44:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a7f      	ldr	r2, [pc, #508]	@ (8005e48 <DMA_SetConfig+0x21c>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d072      	beq.n	8005d36 <DMA_SetConfig+0x10a>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a7d      	ldr	r2, [pc, #500]	@ (8005e4c <DMA_SetConfig+0x220>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d06d      	beq.n	8005d36 <DMA_SetConfig+0x10a>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a7c      	ldr	r2, [pc, #496]	@ (8005e50 <DMA_SetConfig+0x224>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d068      	beq.n	8005d36 <DMA_SetConfig+0x10a>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a7a      	ldr	r2, [pc, #488]	@ (8005e54 <DMA_SetConfig+0x228>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d063      	beq.n	8005d36 <DMA_SetConfig+0x10a>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a79      	ldr	r2, [pc, #484]	@ (8005e58 <DMA_SetConfig+0x22c>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d05e      	beq.n	8005d36 <DMA_SetConfig+0x10a>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a77      	ldr	r2, [pc, #476]	@ (8005e5c <DMA_SetConfig+0x230>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d059      	beq.n	8005d36 <DMA_SetConfig+0x10a>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a76      	ldr	r2, [pc, #472]	@ (8005e60 <DMA_SetConfig+0x234>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d054      	beq.n	8005d36 <DMA_SetConfig+0x10a>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a74      	ldr	r2, [pc, #464]	@ (8005e64 <DMA_SetConfig+0x238>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d04f      	beq.n	8005d36 <DMA_SetConfig+0x10a>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a73      	ldr	r2, [pc, #460]	@ (8005e68 <DMA_SetConfig+0x23c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d04a      	beq.n	8005d36 <DMA_SetConfig+0x10a>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a71      	ldr	r2, [pc, #452]	@ (8005e6c <DMA_SetConfig+0x240>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d045      	beq.n	8005d36 <DMA_SetConfig+0x10a>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a70      	ldr	r2, [pc, #448]	@ (8005e70 <DMA_SetConfig+0x244>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d040      	beq.n	8005d36 <DMA_SetConfig+0x10a>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a6e      	ldr	r2, [pc, #440]	@ (8005e74 <DMA_SetConfig+0x248>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d03b      	beq.n	8005d36 <DMA_SetConfig+0x10a>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a6d      	ldr	r2, [pc, #436]	@ (8005e78 <DMA_SetConfig+0x24c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d036      	beq.n	8005d36 <DMA_SetConfig+0x10a>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a6b      	ldr	r2, [pc, #428]	@ (8005e7c <DMA_SetConfig+0x250>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d031      	beq.n	8005d36 <DMA_SetConfig+0x10a>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a6a      	ldr	r2, [pc, #424]	@ (8005e80 <DMA_SetConfig+0x254>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d02c      	beq.n	8005d36 <DMA_SetConfig+0x10a>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a68      	ldr	r2, [pc, #416]	@ (8005e84 <DMA_SetConfig+0x258>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d027      	beq.n	8005d36 <DMA_SetConfig+0x10a>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a67      	ldr	r2, [pc, #412]	@ (8005e88 <DMA_SetConfig+0x25c>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d022      	beq.n	8005d36 <DMA_SetConfig+0x10a>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a65      	ldr	r2, [pc, #404]	@ (8005e8c <DMA_SetConfig+0x260>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d01d      	beq.n	8005d36 <DMA_SetConfig+0x10a>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a64      	ldr	r2, [pc, #400]	@ (8005e90 <DMA_SetConfig+0x264>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d018      	beq.n	8005d36 <DMA_SetConfig+0x10a>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a62      	ldr	r2, [pc, #392]	@ (8005e94 <DMA_SetConfig+0x268>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d013      	beq.n	8005d36 <DMA_SetConfig+0x10a>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a61      	ldr	r2, [pc, #388]	@ (8005e98 <DMA_SetConfig+0x26c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d00e      	beq.n	8005d36 <DMA_SetConfig+0x10a>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a5f      	ldr	r2, [pc, #380]	@ (8005e9c <DMA_SetConfig+0x270>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d009      	beq.n	8005d36 <DMA_SetConfig+0x10a>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a5e      	ldr	r2, [pc, #376]	@ (8005ea0 <DMA_SetConfig+0x274>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d004      	beq.n	8005d36 <DMA_SetConfig+0x10a>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a5c      	ldr	r2, [pc, #368]	@ (8005ea4 <DMA_SetConfig+0x278>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d101      	bne.n	8005d3a <DMA_SetConfig+0x10e>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e000      	b.n	8005d3c <DMA_SetConfig+0x110>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00d      	beq.n	8005d5c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005d48:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d004      	beq.n	8005d5c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005d5a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a39      	ldr	r2, [pc, #228]	@ (8005e48 <DMA_SetConfig+0x21c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d04a      	beq.n	8005dfc <DMA_SetConfig+0x1d0>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a38      	ldr	r2, [pc, #224]	@ (8005e4c <DMA_SetConfig+0x220>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d045      	beq.n	8005dfc <DMA_SetConfig+0x1d0>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a36      	ldr	r2, [pc, #216]	@ (8005e50 <DMA_SetConfig+0x224>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d040      	beq.n	8005dfc <DMA_SetConfig+0x1d0>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a35      	ldr	r2, [pc, #212]	@ (8005e54 <DMA_SetConfig+0x228>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d03b      	beq.n	8005dfc <DMA_SetConfig+0x1d0>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a33      	ldr	r2, [pc, #204]	@ (8005e58 <DMA_SetConfig+0x22c>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d036      	beq.n	8005dfc <DMA_SetConfig+0x1d0>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a32      	ldr	r2, [pc, #200]	@ (8005e5c <DMA_SetConfig+0x230>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d031      	beq.n	8005dfc <DMA_SetConfig+0x1d0>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a30      	ldr	r2, [pc, #192]	@ (8005e60 <DMA_SetConfig+0x234>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d02c      	beq.n	8005dfc <DMA_SetConfig+0x1d0>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a2f      	ldr	r2, [pc, #188]	@ (8005e64 <DMA_SetConfig+0x238>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d027      	beq.n	8005dfc <DMA_SetConfig+0x1d0>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a2d      	ldr	r2, [pc, #180]	@ (8005e68 <DMA_SetConfig+0x23c>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d022      	beq.n	8005dfc <DMA_SetConfig+0x1d0>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a2c      	ldr	r2, [pc, #176]	@ (8005e6c <DMA_SetConfig+0x240>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d01d      	beq.n	8005dfc <DMA_SetConfig+0x1d0>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a2a      	ldr	r2, [pc, #168]	@ (8005e70 <DMA_SetConfig+0x244>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d018      	beq.n	8005dfc <DMA_SetConfig+0x1d0>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a29      	ldr	r2, [pc, #164]	@ (8005e74 <DMA_SetConfig+0x248>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d013      	beq.n	8005dfc <DMA_SetConfig+0x1d0>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a27      	ldr	r2, [pc, #156]	@ (8005e78 <DMA_SetConfig+0x24c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d00e      	beq.n	8005dfc <DMA_SetConfig+0x1d0>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a26      	ldr	r2, [pc, #152]	@ (8005e7c <DMA_SetConfig+0x250>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d009      	beq.n	8005dfc <DMA_SetConfig+0x1d0>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a24      	ldr	r2, [pc, #144]	@ (8005e80 <DMA_SetConfig+0x254>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d004      	beq.n	8005dfc <DMA_SetConfig+0x1d0>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a23      	ldr	r2, [pc, #140]	@ (8005e84 <DMA_SetConfig+0x258>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d101      	bne.n	8005e00 <DMA_SetConfig+0x1d4>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e000      	b.n	8005e02 <DMA_SetConfig+0x1d6>
 8005e00:	2300      	movs	r3, #0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d059      	beq.n	8005eba <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e0a:	f003 031f 	and.w	r3, r3, #31
 8005e0e:	223f      	movs	r2, #63	@ 0x3f
 8005e10:	409a      	lsls	r2, r3
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005e24:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	2b40      	cmp	r3, #64	@ 0x40
 8005e34:	d138      	bne.n	8005ea8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005e46:	e086      	b.n	8005f56 <DMA_SetConfig+0x32a>
 8005e48:	40020010 	.word	0x40020010
 8005e4c:	40020028 	.word	0x40020028
 8005e50:	40020040 	.word	0x40020040
 8005e54:	40020058 	.word	0x40020058
 8005e58:	40020070 	.word	0x40020070
 8005e5c:	40020088 	.word	0x40020088
 8005e60:	400200a0 	.word	0x400200a0
 8005e64:	400200b8 	.word	0x400200b8
 8005e68:	40020410 	.word	0x40020410
 8005e6c:	40020428 	.word	0x40020428
 8005e70:	40020440 	.word	0x40020440
 8005e74:	40020458 	.word	0x40020458
 8005e78:	40020470 	.word	0x40020470
 8005e7c:	40020488 	.word	0x40020488
 8005e80:	400204a0 	.word	0x400204a0
 8005e84:	400204b8 	.word	0x400204b8
 8005e88:	58025408 	.word	0x58025408
 8005e8c:	5802541c 	.word	0x5802541c
 8005e90:	58025430 	.word	0x58025430
 8005e94:	58025444 	.word	0x58025444
 8005e98:	58025458 	.word	0x58025458
 8005e9c:	5802546c 	.word	0x5802546c
 8005ea0:	58025480 	.word	0x58025480
 8005ea4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	60da      	str	r2, [r3, #12]
}
 8005eb8:	e04d      	b.n	8005f56 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a29      	ldr	r2, [pc, #164]	@ (8005f64 <DMA_SetConfig+0x338>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d022      	beq.n	8005f0a <DMA_SetConfig+0x2de>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a27      	ldr	r2, [pc, #156]	@ (8005f68 <DMA_SetConfig+0x33c>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d01d      	beq.n	8005f0a <DMA_SetConfig+0x2de>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a26      	ldr	r2, [pc, #152]	@ (8005f6c <DMA_SetConfig+0x340>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d018      	beq.n	8005f0a <DMA_SetConfig+0x2de>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a24      	ldr	r2, [pc, #144]	@ (8005f70 <DMA_SetConfig+0x344>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d013      	beq.n	8005f0a <DMA_SetConfig+0x2de>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a23      	ldr	r2, [pc, #140]	@ (8005f74 <DMA_SetConfig+0x348>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d00e      	beq.n	8005f0a <DMA_SetConfig+0x2de>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a21      	ldr	r2, [pc, #132]	@ (8005f78 <DMA_SetConfig+0x34c>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d009      	beq.n	8005f0a <DMA_SetConfig+0x2de>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a20      	ldr	r2, [pc, #128]	@ (8005f7c <DMA_SetConfig+0x350>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d004      	beq.n	8005f0a <DMA_SetConfig+0x2de>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a1e      	ldr	r2, [pc, #120]	@ (8005f80 <DMA_SetConfig+0x354>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d101      	bne.n	8005f0e <DMA_SetConfig+0x2e2>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e000      	b.n	8005f10 <DMA_SetConfig+0x2e4>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d020      	beq.n	8005f56 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f18:	f003 031f 	and.w	r3, r3, #31
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	409a      	lsls	r2, r3
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	2b40      	cmp	r3, #64	@ 0x40
 8005f32:	d108      	bne.n	8005f46 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	60da      	str	r2, [r3, #12]
}
 8005f44:	e007      	b.n	8005f56 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	60da      	str	r2, [r3, #12]
}
 8005f56:	bf00      	nop
 8005f58:	371c      	adds	r7, #28
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	58025408 	.word	0x58025408
 8005f68:	5802541c 	.word	0x5802541c
 8005f6c:	58025430 	.word	0x58025430
 8005f70:	58025444 	.word	0x58025444
 8005f74:	58025458 	.word	0x58025458
 8005f78:	5802546c 	.word	0x5802546c
 8005f7c:	58025480 	.word	0x58025480
 8005f80:	58025494 	.word	0x58025494

08005f84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a42      	ldr	r2, [pc, #264]	@ (800609c <DMA_CalcBaseAndBitshift+0x118>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d04a      	beq.n	800602c <DMA_CalcBaseAndBitshift+0xa8>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a41      	ldr	r2, [pc, #260]	@ (80060a0 <DMA_CalcBaseAndBitshift+0x11c>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d045      	beq.n	800602c <DMA_CalcBaseAndBitshift+0xa8>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a3f      	ldr	r2, [pc, #252]	@ (80060a4 <DMA_CalcBaseAndBitshift+0x120>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d040      	beq.n	800602c <DMA_CalcBaseAndBitshift+0xa8>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a3e      	ldr	r2, [pc, #248]	@ (80060a8 <DMA_CalcBaseAndBitshift+0x124>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d03b      	beq.n	800602c <DMA_CalcBaseAndBitshift+0xa8>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a3c      	ldr	r2, [pc, #240]	@ (80060ac <DMA_CalcBaseAndBitshift+0x128>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d036      	beq.n	800602c <DMA_CalcBaseAndBitshift+0xa8>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a3b      	ldr	r2, [pc, #236]	@ (80060b0 <DMA_CalcBaseAndBitshift+0x12c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d031      	beq.n	800602c <DMA_CalcBaseAndBitshift+0xa8>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a39      	ldr	r2, [pc, #228]	@ (80060b4 <DMA_CalcBaseAndBitshift+0x130>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d02c      	beq.n	800602c <DMA_CalcBaseAndBitshift+0xa8>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a38      	ldr	r2, [pc, #224]	@ (80060b8 <DMA_CalcBaseAndBitshift+0x134>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d027      	beq.n	800602c <DMA_CalcBaseAndBitshift+0xa8>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a36      	ldr	r2, [pc, #216]	@ (80060bc <DMA_CalcBaseAndBitshift+0x138>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d022      	beq.n	800602c <DMA_CalcBaseAndBitshift+0xa8>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a35      	ldr	r2, [pc, #212]	@ (80060c0 <DMA_CalcBaseAndBitshift+0x13c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d01d      	beq.n	800602c <DMA_CalcBaseAndBitshift+0xa8>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a33      	ldr	r2, [pc, #204]	@ (80060c4 <DMA_CalcBaseAndBitshift+0x140>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d018      	beq.n	800602c <DMA_CalcBaseAndBitshift+0xa8>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a32      	ldr	r2, [pc, #200]	@ (80060c8 <DMA_CalcBaseAndBitshift+0x144>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d013      	beq.n	800602c <DMA_CalcBaseAndBitshift+0xa8>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a30      	ldr	r2, [pc, #192]	@ (80060cc <DMA_CalcBaseAndBitshift+0x148>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d00e      	beq.n	800602c <DMA_CalcBaseAndBitshift+0xa8>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a2f      	ldr	r2, [pc, #188]	@ (80060d0 <DMA_CalcBaseAndBitshift+0x14c>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d009      	beq.n	800602c <DMA_CalcBaseAndBitshift+0xa8>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a2d      	ldr	r2, [pc, #180]	@ (80060d4 <DMA_CalcBaseAndBitshift+0x150>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d004      	beq.n	800602c <DMA_CalcBaseAndBitshift+0xa8>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a2c      	ldr	r2, [pc, #176]	@ (80060d8 <DMA_CalcBaseAndBitshift+0x154>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d101      	bne.n	8006030 <DMA_CalcBaseAndBitshift+0xac>
 800602c:	2301      	movs	r3, #1
 800602e:	e000      	b.n	8006032 <DMA_CalcBaseAndBitshift+0xae>
 8006030:	2300      	movs	r3, #0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d024      	beq.n	8006080 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	b2db      	uxtb	r3, r3
 800603c:	3b10      	subs	r3, #16
 800603e:	4a27      	ldr	r2, [pc, #156]	@ (80060dc <DMA_CalcBaseAndBitshift+0x158>)
 8006040:	fba2 2303 	umull	r2, r3, r2, r3
 8006044:	091b      	lsrs	r3, r3, #4
 8006046:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	4a24      	ldr	r2, [pc, #144]	@ (80060e0 <DMA_CalcBaseAndBitshift+0x15c>)
 8006050:	5cd3      	ldrb	r3, [r2, r3]
 8006052:	461a      	mov	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2b03      	cmp	r3, #3
 800605c:	d908      	bls.n	8006070 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	461a      	mov	r2, r3
 8006064:	4b1f      	ldr	r3, [pc, #124]	@ (80060e4 <DMA_CalcBaseAndBitshift+0x160>)
 8006066:	4013      	ands	r3, r2
 8006068:	1d1a      	adds	r2, r3, #4
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	659a      	str	r2, [r3, #88]	@ 0x58
 800606e:	e00d      	b.n	800608c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	461a      	mov	r2, r3
 8006076:	4b1b      	ldr	r3, [pc, #108]	@ (80060e4 <DMA_CalcBaseAndBitshift+0x160>)
 8006078:	4013      	ands	r3, r2
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	6593      	str	r3, [r2, #88]	@ 0x58
 800607e:	e005      	b.n	800608c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006090:	4618      	mov	r0, r3
 8006092:	3714      	adds	r7, #20
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	40020010 	.word	0x40020010
 80060a0:	40020028 	.word	0x40020028
 80060a4:	40020040 	.word	0x40020040
 80060a8:	40020058 	.word	0x40020058
 80060ac:	40020070 	.word	0x40020070
 80060b0:	40020088 	.word	0x40020088
 80060b4:	400200a0 	.word	0x400200a0
 80060b8:	400200b8 	.word	0x400200b8
 80060bc:	40020410 	.word	0x40020410
 80060c0:	40020428 	.word	0x40020428
 80060c4:	40020440 	.word	0x40020440
 80060c8:	40020458 	.word	0x40020458
 80060cc:	40020470 	.word	0x40020470
 80060d0:	40020488 	.word	0x40020488
 80060d4:	400204a0 	.word	0x400204a0
 80060d8:	400204b8 	.word	0x400204b8
 80060dc:	aaaaaaab 	.word	0xaaaaaaab
 80060e0:	08013ee8 	.word	0x08013ee8
 80060e4:	fffffc00 	.word	0xfffffc00

080060e8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060f0:	2300      	movs	r3, #0
 80060f2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d120      	bne.n	800613e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006100:	2b03      	cmp	r3, #3
 8006102:	d858      	bhi.n	80061b6 <DMA_CheckFifoParam+0xce>
 8006104:	a201      	add	r2, pc, #4	@ (adr r2, 800610c <DMA_CheckFifoParam+0x24>)
 8006106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610a:	bf00      	nop
 800610c:	0800611d 	.word	0x0800611d
 8006110:	0800612f 	.word	0x0800612f
 8006114:	0800611d 	.word	0x0800611d
 8006118:	080061b7 	.word	0x080061b7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006120:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d048      	beq.n	80061ba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800612c:	e045      	b.n	80061ba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006132:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006136:	d142      	bne.n	80061be <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800613c:	e03f      	b.n	80061be <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006146:	d123      	bne.n	8006190 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800614c:	2b03      	cmp	r3, #3
 800614e:	d838      	bhi.n	80061c2 <DMA_CheckFifoParam+0xda>
 8006150:	a201      	add	r2, pc, #4	@ (adr r2, 8006158 <DMA_CheckFifoParam+0x70>)
 8006152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006156:	bf00      	nop
 8006158:	08006169 	.word	0x08006169
 800615c:	0800616f 	.word	0x0800616f
 8006160:	08006169 	.word	0x08006169
 8006164:	08006181 	.word	0x08006181
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	73fb      	strb	r3, [r7, #15]
        break;
 800616c:	e030      	b.n	80061d0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006172:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d025      	beq.n	80061c6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800617e:	e022      	b.n	80061c6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006184:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006188:	d11f      	bne.n	80061ca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800618e:	e01c      	b.n	80061ca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006194:	2b02      	cmp	r3, #2
 8006196:	d902      	bls.n	800619e <DMA_CheckFifoParam+0xb6>
 8006198:	2b03      	cmp	r3, #3
 800619a:	d003      	beq.n	80061a4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800619c:	e018      	b.n	80061d0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	73fb      	strb	r3, [r7, #15]
        break;
 80061a2:	e015      	b.n	80061d0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00e      	beq.n	80061ce <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	73fb      	strb	r3, [r7, #15]
    break;
 80061b4:	e00b      	b.n	80061ce <DMA_CheckFifoParam+0xe6>
        break;
 80061b6:	bf00      	nop
 80061b8:	e00a      	b.n	80061d0 <DMA_CheckFifoParam+0xe8>
        break;
 80061ba:	bf00      	nop
 80061bc:	e008      	b.n	80061d0 <DMA_CheckFifoParam+0xe8>
        break;
 80061be:	bf00      	nop
 80061c0:	e006      	b.n	80061d0 <DMA_CheckFifoParam+0xe8>
        break;
 80061c2:	bf00      	nop
 80061c4:	e004      	b.n	80061d0 <DMA_CheckFifoParam+0xe8>
        break;
 80061c6:	bf00      	nop
 80061c8:	e002      	b.n	80061d0 <DMA_CheckFifoParam+0xe8>
        break;
 80061ca:	bf00      	nop
 80061cc:	e000      	b.n	80061d0 <DMA_CheckFifoParam+0xe8>
    break;
 80061ce:	bf00      	nop
    }
  }

  return status;
 80061d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop

080061e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a38      	ldr	r2, [pc, #224]	@ (80062d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d022      	beq.n	800623e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a36      	ldr	r2, [pc, #216]	@ (80062d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d01d      	beq.n	800623e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a35      	ldr	r2, [pc, #212]	@ (80062dc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d018      	beq.n	800623e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a33      	ldr	r2, [pc, #204]	@ (80062e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d013      	beq.n	800623e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a32      	ldr	r2, [pc, #200]	@ (80062e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d00e      	beq.n	800623e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a30      	ldr	r2, [pc, #192]	@ (80062e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d009      	beq.n	800623e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a2f      	ldr	r2, [pc, #188]	@ (80062ec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d004      	beq.n	800623e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a2d      	ldr	r2, [pc, #180]	@ (80062f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d101      	bne.n	8006242 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006242:	2300      	movs	r3, #0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d01a      	beq.n	800627e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	b2db      	uxtb	r3, r3
 800624e:	3b08      	subs	r3, #8
 8006250:	4a28      	ldr	r2, [pc, #160]	@ (80062f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006252:	fba2 2303 	umull	r2, r3, r2, r3
 8006256:	091b      	lsrs	r3, r3, #4
 8006258:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	4b26      	ldr	r3, [pc, #152]	@ (80062f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800625e:	4413      	add	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	461a      	mov	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a24      	ldr	r2, [pc, #144]	@ (80062fc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800626c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f003 031f 	and.w	r3, r3, #31
 8006274:	2201      	movs	r2, #1
 8006276:	409a      	lsls	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800627c:	e024      	b.n	80062c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	b2db      	uxtb	r3, r3
 8006284:	3b10      	subs	r3, #16
 8006286:	4a1e      	ldr	r2, [pc, #120]	@ (8006300 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006288:	fba2 2303 	umull	r2, r3, r2, r3
 800628c:	091b      	lsrs	r3, r3, #4
 800628e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	4a1c      	ldr	r2, [pc, #112]	@ (8006304 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d806      	bhi.n	80062a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	4a1b      	ldr	r2, [pc, #108]	@ (8006308 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d902      	bls.n	80062a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	3308      	adds	r3, #8
 80062a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	4b18      	ldr	r3, [pc, #96]	@ (800630c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80062aa:	4413      	add	r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	461a      	mov	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a16      	ldr	r2, [pc, #88]	@ (8006310 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80062b8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f003 031f 	and.w	r3, r3, #31
 80062c0:	2201      	movs	r2, #1
 80062c2:	409a      	lsls	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80062c8:	bf00      	nop
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr
 80062d4:	58025408 	.word	0x58025408
 80062d8:	5802541c 	.word	0x5802541c
 80062dc:	58025430 	.word	0x58025430
 80062e0:	58025444 	.word	0x58025444
 80062e4:	58025458 	.word	0x58025458
 80062e8:	5802546c 	.word	0x5802546c
 80062ec:	58025480 	.word	0x58025480
 80062f0:	58025494 	.word	0x58025494
 80062f4:	cccccccd 	.word	0xcccccccd
 80062f8:	16009600 	.word	0x16009600
 80062fc:	58025880 	.word	0x58025880
 8006300:	aaaaaaab 	.word	0xaaaaaaab
 8006304:	400204b8 	.word	0x400204b8
 8006308:	4002040f 	.word	0x4002040f
 800630c:	10008200 	.word	0x10008200
 8006310:	40020880 	.word	0x40020880

08006314 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	b2db      	uxtb	r3, r3
 8006322:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d04a      	beq.n	80063c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2b08      	cmp	r3, #8
 800632e:	d847      	bhi.n	80063c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a25      	ldr	r2, [pc, #148]	@ (80063cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d022      	beq.n	8006380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a24      	ldr	r2, [pc, #144]	@ (80063d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d01d      	beq.n	8006380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a22      	ldr	r2, [pc, #136]	@ (80063d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d018      	beq.n	8006380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a21      	ldr	r2, [pc, #132]	@ (80063d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d013      	beq.n	8006380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a1f      	ldr	r2, [pc, #124]	@ (80063dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d00e      	beq.n	8006380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a1e      	ldr	r2, [pc, #120]	@ (80063e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d009      	beq.n	8006380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a1c      	ldr	r2, [pc, #112]	@ (80063e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d004      	beq.n	8006380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a1b      	ldr	r2, [pc, #108]	@ (80063e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d101      	bne.n	8006384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006380:	2301      	movs	r3, #1
 8006382:	e000      	b.n	8006386 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006384:	2300      	movs	r3, #0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00a      	beq.n	80063a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	4b17      	ldr	r3, [pc, #92]	@ (80063ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800638e:	4413      	add	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	461a      	mov	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a15      	ldr	r2, [pc, #84]	@ (80063f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800639c:	671a      	str	r2, [r3, #112]	@ 0x70
 800639e:	e009      	b.n	80063b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	4b14      	ldr	r3, [pc, #80]	@ (80063f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80063a4:	4413      	add	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	461a      	mov	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a11      	ldr	r2, [pc, #68]	@ (80063f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80063b2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	3b01      	subs	r3, #1
 80063b8:	2201      	movs	r2, #1
 80063ba:	409a      	lsls	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80063c0:	bf00      	nop
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	58025408 	.word	0x58025408
 80063d0:	5802541c 	.word	0x5802541c
 80063d4:	58025430 	.word	0x58025430
 80063d8:	58025444 	.word	0x58025444
 80063dc:	58025458 	.word	0x58025458
 80063e0:	5802546c 	.word	0x5802546c
 80063e4:	58025480 	.word	0x58025480
 80063e8:	58025494 	.word	0x58025494
 80063ec:	1600963f 	.word	0x1600963f
 80063f0:	58025940 	.word	0x58025940
 80063f4:	1000823f 	.word	0x1000823f
 80063f8:	40020940 	.word	0x40020940

080063fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b089      	sub	sp, #36	@ 0x24
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006406:	2300      	movs	r3, #0
 8006408:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800640a:	4b89      	ldr	r3, [pc, #548]	@ (8006630 <HAL_GPIO_Init+0x234>)
 800640c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800640e:	e194      	b.n	800673a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	2101      	movs	r1, #1
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	fa01 f303 	lsl.w	r3, r1, r3
 800641c:	4013      	ands	r3, r2
 800641e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	2b00      	cmp	r3, #0
 8006424:	f000 8186 	beq.w	8006734 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f003 0303 	and.w	r3, r3, #3
 8006430:	2b01      	cmp	r3, #1
 8006432:	d005      	beq.n	8006440 <HAL_GPIO_Init+0x44>
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f003 0303 	and.w	r3, r3, #3
 800643c:	2b02      	cmp	r3, #2
 800643e:	d130      	bne.n	80064a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	005b      	lsls	r3, r3, #1
 800644a:	2203      	movs	r2, #3
 800644c:	fa02 f303 	lsl.w	r3, r2, r3
 8006450:	43db      	mvns	r3, r3
 8006452:	69ba      	ldr	r2, [r7, #24]
 8006454:	4013      	ands	r3, r2
 8006456:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	68da      	ldr	r2, [r3, #12]
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	005b      	lsls	r3, r3, #1
 8006460:	fa02 f303 	lsl.w	r3, r2, r3
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	4313      	orrs	r3, r2
 8006468:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006476:	2201      	movs	r2, #1
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	fa02 f303 	lsl.w	r3, r2, r3
 800647e:	43db      	mvns	r3, r3
 8006480:	69ba      	ldr	r2, [r7, #24]
 8006482:	4013      	ands	r3, r2
 8006484:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	091b      	lsrs	r3, r3, #4
 800648c:	f003 0201 	and.w	r2, r3, #1
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	fa02 f303 	lsl.w	r3, r2, r3
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	4313      	orrs	r3, r2
 800649a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f003 0303 	and.w	r3, r3, #3
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	d017      	beq.n	80064de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	2203      	movs	r2, #3
 80064ba:	fa02 f303 	lsl.w	r3, r2, r3
 80064be:	43db      	mvns	r3, r3
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	4013      	ands	r3, r2
 80064c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	689a      	ldr	r2, [r3, #8]
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	005b      	lsls	r3, r3, #1
 80064ce:	fa02 f303 	lsl.w	r3, r2, r3
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f003 0303 	and.w	r3, r3, #3
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d123      	bne.n	8006532 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	08da      	lsrs	r2, r3, #3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	3208      	adds	r2, #8
 80064f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	f003 0307 	and.w	r3, r3, #7
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	220f      	movs	r2, #15
 8006502:	fa02 f303 	lsl.w	r3, r2, r3
 8006506:	43db      	mvns	r3, r3
 8006508:	69ba      	ldr	r2, [r7, #24]
 800650a:	4013      	ands	r3, r2
 800650c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	691a      	ldr	r2, [r3, #16]
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	f003 0307 	and.w	r3, r3, #7
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	fa02 f303 	lsl.w	r3, r2, r3
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	4313      	orrs	r3, r2
 8006522:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	08da      	lsrs	r2, r3, #3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	3208      	adds	r2, #8
 800652c:	69b9      	ldr	r1, [r7, #24]
 800652e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	005b      	lsls	r3, r3, #1
 800653c:	2203      	movs	r2, #3
 800653e:	fa02 f303 	lsl.w	r3, r2, r3
 8006542:	43db      	mvns	r3, r3
 8006544:	69ba      	ldr	r2, [r7, #24]
 8006546:	4013      	ands	r3, r2
 8006548:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f003 0203 	and.w	r2, r3, #3
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	005b      	lsls	r3, r3, #1
 8006556:	fa02 f303 	lsl.w	r3, r2, r3
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	4313      	orrs	r3, r2
 800655e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	69ba      	ldr	r2, [r7, #24]
 8006564:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 80e0 	beq.w	8006734 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006574:	4b2f      	ldr	r3, [pc, #188]	@ (8006634 <HAL_GPIO_Init+0x238>)
 8006576:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800657a:	4a2e      	ldr	r2, [pc, #184]	@ (8006634 <HAL_GPIO_Init+0x238>)
 800657c:	f043 0302 	orr.w	r3, r3, #2
 8006580:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006584:	4b2b      	ldr	r3, [pc, #172]	@ (8006634 <HAL_GPIO_Init+0x238>)
 8006586:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006592:	4a29      	ldr	r2, [pc, #164]	@ (8006638 <HAL_GPIO_Init+0x23c>)
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	089b      	lsrs	r3, r3, #2
 8006598:	3302      	adds	r3, #2
 800659a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800659e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	220f      	movs	r2, #15
 80065aa:	fa02 f303 	lsl.w	r3, r2, r3
 80065ae:	43db      	mvns	r3, r3
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	4013      	ands	r3, r2
 80065b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a20      	ldr	r2, [pc, #128]	@ (800663c <HAL_GPIO_Init+0x240>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d052      	beq.n	8006664 <HAL_GPIO_Init+0x268>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a1f      	ldr	r2, [pc, #124]	@ (8006640 <HAL_GPIO_Init+0x244>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d031      	beq.n	800662a <HAL_GPIO_Init+0x22e>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a1e      	ldr	r2, [pc, #120]	@ (8006644 <HAL_GPIO_Init+0x248>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d02b      	beq.n	8006626 <HAL_GPIO_Init+0x22a>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006648 <HAL_GPIO_Init+0x24c>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d025      	beq.n	8006622 <HAL_GPIO_Init+0x226>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a1c      	ldr	r2, [pc, #112]	@ (800664c <HAL_GPIO_Init+0x250>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d01f      	beq.n	800661e <HAL_GPIO_Init+0x222>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006650 <HAL_GPIO_Init+0x254>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d019      	beq.n	800661a <HAL_GPIO_Init+0x21e>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a1a      	ldr	r2, [pc, #104]	@ (8006654 <HAL_GPIO_Init+0x258>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d013      	beq.n	8006616 <HAL_GPIO_Init+0x21a>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a19      	ldr	r2, [pc, #100]	@ (8006658 <HAL_GPIO_Init+0x25c>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d00d      	beq.n	8006612 <HAL_GPIO_Init+0x216>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a18      	ldr	r2, [pc, #96]	@ (800665c <HAL_GPIO_Init+0x260>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d007      	beq.n	800660e <HAL_GPIO_Init+0x212>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a17      	ldr	r2, [pc, #92]	@ (8006660 <HAL_GPIO_Init+0x264>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d101      	bne.n	800660a <HAL_GPIO_Init+0x20e>
 8006606:	2309      	movs	r3, #9
 8006608:	e02d      	b.n	8006666 <HAL_GPIO_Init+0x26a>
 800660a:	230a      	movs	r3, #10
 800660c:	e02b      	b.n	8006666 <HAL_GPIO_Init+0x26a>
 800660e:	2308      	movs	r3, #8
 8006610:	e029      	b.n	8006666 <HAL_GPIO_Init+0x26a>
 8006612:	2307      	movs	r3, #7
 8006614:	e027      	b.n	8006666 <HAL_GPIO_Init+0x26a>
 8006616:	2306      	movs	r3, #6
 8006618:	e025      	b.n	8006666 <HAL_GPIO_Init+0x26a>
 800661a:	2305      	movs	r3, #5
 800661c:	e023      	b.n	8006666 <HAL_GPIO_Init+0x26a>
 800661e:	2304      	movs	r3, #4
 8006620:	e021      	b.n	8006666 <HAL_GPIO_Init+0x26a>
 8006622:	2303      	movs	r3, #3
 8006624:	e01f      	b.n	8006666 <HAL_GPIO_Init+0x26a>
 8006626:	2302      	movs	r3, #2
 8006628:	e01d      	b.n	8006666 <HAL_GPIO_Init+0x26a>
 800662a:	2301      	movs	r3, #1
 800662c:	e01b      	b.n	8006666 <HAL_GPIO_Init+0x26a>
 800662e:	bf00      	nop
 8006630:	58000080 	.word	0x58000080
 8006634:	58024400 	.word	0x58024400
 8006638:	58000400 	.word	0x58000400
 800663c:	58020000 	.word	0x58020000
 8006640:	58020400 	.word	0x58020400
 8006644:	58020800 	.word	0x58020800
 8006648:	58020c00 	.word	0x58020c00
 800664c:	58021000 	.word	0x58021000
 8006650:	58021400 	.word	0x58021400
 8006654:	58021800 	.word	0x58021800
 8006658:	58021c00 	.word	0x58021c00
 800665c:	58022000 	.word	0x58022000
 8006660:	58022400 	.word	0x58022400
 8006664:	2300      	movs	r3, #0
 8006666:	69fa      	ldr	r2, [r7, #28]
 8006668:	f002 0203 	and.w	r2, r2, #3
 800666c:	0092      	lsls	r2, r2, #2
 800666e:	4093      	lsls	r3, r2
 8006670:	69ba      	ldr	r2, [r7, #24]
 8006672:	4313      	orrs	r3, r2
 8006674:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006676:	4938      	ldr	r1, [pc, #224]	@ (8006758 <HAL_GPIO_Init+0x35c>)
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	089b      	lsrs	r3, r3, #2
 800667c:	3302      	adds	r3, #2
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006684:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	43db      	mvns	r3, r3
 8006690:	69ba      	ldr	r2, [r7, #24]
 8006692:	4013      	ands	r3, r2
 8006694:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80066aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80066b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	43db      	mvns	r3, r3
 80066be:	69ba      	ldr	r2, [r7, #24]
 80066c0:	4013      	ands	r3, r2
 80066c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d003      	beq.n	80066d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80066d0:	69ba      	ldr	r2, [r7, #24]
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80066d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	43db      	mvns	r3, r3
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	4013      	ands	r3, r2
 80066ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	4313      	orrs	r3, r2
 8006702:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	43db      	mvns	r3, r3
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	4013      	ands	r3, r2
 8006718:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006726:	69ba      	ldr	r2, [r7, #24]
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	4313      	orrs	r3, r2
 800672c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	3301      	adds	r3, #1
 8006738:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	fa22 f303 	lsr.w	r3, r2, r3
 8006744:	2b00      	cmp	r3, #0
 8006746:	f47f ae63 	bne.w	8006410 <HAL_GPIO_Init+0x14>
  }
}
 800674a:	bf00      	nop
 800674c:	bf00      	nop
 800674e:	3724      	adds	r7, #36	@ 0x24
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	58000400 	.word	0x58000400

0800675c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	460b      	mov	r3, r1
 8006766:	807b      	strh	r3, [r7, #2]
 8006768:	4613      	mov	r3, r2
 800676a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800676c:	787b      	ldrb	r3, [r7, #1]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006772:	887a      	ldrh	r2, [r7, #2]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006778:	e003      	b.n	8006782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800677a:	887b      	ldrh	r3, [r7, #2]
 800677c:	041a      	lsls	r2, r3, #16
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	619a      	str	r2, [r3, #24]
}
 8006782:	bf00      	nop
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b082      	sub	sp, #8
 8006792:	af00      	add	r7, sp, #0
 8006794:	4603      	mov	r3, r0
 8006796:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800679c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80067a0:	88fb      	ldrh	r3, [r7, #6]
 80067a2:	4013      	ands	r3, r2
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d008      	beq.n	80067ba <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80067a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067ac:	88fb      	ldrh	r3, [r7, #6]
 80067ae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80067b2:	88fb      	ldrh	r3, [r7, #6]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7fa fae9 	bl	8000d8c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80067ba:	bf00      	nop
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
	...

080067c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80067cc:	4b19      	ldr	r3, [pc, #100]	@ (8006834 <HAL_PWREx_ConfigSupply+0x70>)
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f003 0304 	and.w	r3, r3, #4
 80067d4:	2b04      	cmp	r3, #4
 80067d6:	d00a      	beq.n	80067ee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80067d8:	4b16      	ldr	r3, [pc, #88]	@ (8006834 <HAL_PWREx_ConfigSupply+0x70>)
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	f003 0307 	and.w	r3, r3, #7
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d001      	beq.n	80067ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e01f      	b.n	800682a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	e01d      	b.n	800682a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80067ee:	4b11      	ldr	r3, [pc, #68]	@ (8006834 <HAL_PWREx_ConfigSupply+0x70>)
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f023 0207 	bic.w	r2, r3, #7
 80067f6:	490f      	ldr	r1, [pc, #60]	@ (8006834 <HAL_PWREx_ConfigSupply+0x70>)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80067fe:	f7fb fbd3 	bl	8001fa8 <HAL_GetTick>
 8006802:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006804:	e009      	b.n	800681a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006806:	f7fb fbcf 	bl	8001fa8 <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006814:	d901      	bls.n	800681a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e007      	b.n	800682a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800681a:	4b06      	ldr	r3, [pc, #24]	@ (8006834 <HAL_PWREx_ConfigSupply+0x70>)
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006822:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006826:	d1ee      	bne.n	8006806 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	58024800 	.word	0x58024800

08006838 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b08c      	sub	sp, #48	@ 0x30
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d102      	bne.n	800684c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	f000 bc48 	b.w	80070dc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b00      	cmp	r3, #0
 8006856:	f000 8088 	beq.w	800696a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800685a:	4b99      	ldr	r3, [pc, #612]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006862:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006864:	4b96      	ldr	r3, [pc, #600]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 8006866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006868:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800686a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686c:	2b10      	cmp	r3, #16
 800686e:	d007      	beq.n	8006880 <HAL_RCC_OscConfig+0x48>
 8006870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006872:	2b18      	cmp	r3, #24
 8006874:	d111      	bne.n	800689a <HAL_RCC_OscConfig+0x62>
 8006876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006878:	f003 0303 	and.w	r3, r3, #3
 800687c:	2b02      	cmp	r3, #2
 800687e:	d10c      	bne.n	800689a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006880:	4b8f      	ldr	r3, [pc, #572]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d06d      	beq.n	8006968 <HAL_RCC_OscConfig+0x130>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d169      	bne.n	8006968 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	f000 bc21 	b.w	80070dc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068a2:	d106      	bne.n	80068b2 <HAL_RCC_OscConfig+0x7a>
 80068a4:	4b86      	ldr	r3, [pc, #536]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a85      	ldr	r2, [pc, #532]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 80068aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068ae:	6013      	str	r3, [r2, #0]
 80068b0:	e02e      	b.n	8006910 <HAL_RCC_OscConfig+0xd8>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10c      	bne.n	80068d4 <HAL_RCC_OscConfig+0x9c>
 80068ba:	4b81      	ldr	r3, [pc, #516]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a80      	ldr	r2, [pc, #512]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 80068c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	4b7e      	ldr	r3, [pc, #504]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a7d      	ldr	r2, [pc, #500]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 80068cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068d0:	6013      	str	r3, [r2, #0]
 80068d2:	e01d      	b.n	8006910 <HAL_RCC_OscConfig+0xd8>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80068dc:	d10c      	bne.n	80068f8 <HAL_RCC_OscConfig+0xc0>
 80068de:	4b78      	ldr	r3, [pc, #480]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a77      	ldr	r2, [pc, #476]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 80068e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80068e8:	6013      	str	r3, [r2, #0]
 80068ea:	4b75      	ldr	r3, [pc, #468]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a74      	ldr	r2, [pc, #464]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 80068f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068f4:	6013      	str	r3, [r2, #0]
 80068f6:	e00b      	b.n	8006910 <HAL_RCC_OscConfig+0xd8>
 80068f8:	4b71      	ldr	r3, [pc, #452]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a70      	ldr	r2, [pc, #448]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 80068fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006902:	6013      	str	r3, [r2, #0]
 8006904:	4b6e      	ldr	r3, [pc, #440]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a6d      	ldr	r2, [pc, #436]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 800690a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800690e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d013      	beq.n	8006940 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006918:	f7fb fb46 	bl	8001fa8 <HAL_GetTick>
 800691c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800691e:	e008      	b.n	8006932 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006920:	f7fb fb42 	bl	8001fa8 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	2b64      	cmp	r3, #100	@ 0x64
 800692c:	d901      	bls.n	8006932 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e3d4      	b.n	80070dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006932:	4b63      	ldr	r3, [pc, #396]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0f0      	beq.n	8006920 <HAL_RCC_OscConfig+0xe8>
 800693e:	e014      	b.n	800696a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006940:	f7fb fb32 	bl	8001fa8 <HAL_GetTick>
 8006944:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006946:	e008      	b.n	800695a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006948:	f7fb fb2e 	bl	8001fa8 <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	2b64      	cmp	r3, #100	@ 0x64
 8006954:	d901      	bls.n	800695a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e3c0      	b.n	80070dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800695a:	4b59      	ldr	r3, [pc, #356]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1f0      	bne.n	8006948 <HAL_RCC_OscConfig+0x110>
 8006966:	e000      	b.n	800696a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0302 	and.w	r3, r3, #2
 8006972:	2b00      	cmp	r3, #0
 8006974:	f000 80ca 	beq.w	8006b0c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006978:	4b51      	ldr	r3, [pc, #324]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006980:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006982:	4b4f      	ldr	r3, [pc, #316]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 8006984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006986:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d007      	beq.n	800699e <HAL_RCC_OscConfig+0x166>
 800698e:	6a3b      	ldr	r3, [r7, #32]
 8006990:	2b18      	cmp	r3, #24
 8006992:	d156      	bne.n	8006a42 <HAL_RCC_OscConfig+0x20a>
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	f003 0303 	and.w	r3, r3, #3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d151      	bne.n	8006a42 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800699e:	4b48      	ldr	r3, [pc, #288]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0304 	and.w	r3, r3, #4
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d005      	beq.n	80069b6 <HAL_RCC_OscConfig+0x17e>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d101      	bne.n	80069b6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e392      	b.n	80070dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80069b6:	4b42      	ldr	r3, [pc, #264]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f023 0219 	bic.w	r2, r3, #25
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	493f      	ldr	r1, [pc, #252]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c8:	f7fb faee 	bl	8001fa8 <HAL_GetTick>
 80069cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069ce:	e008      	b.n	80069e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069d0:	f7fb faea 	bl	8001fa8 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d901      	bls.n	80069e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e37c      	b.n	80070dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069e2:	4b37      	ldr	r3, [pc, #220]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0304 	and.w	r3, r3, #4
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d0f0      	beq.n	80069d0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069ee:	f7fb fae7 	bl	8001fc0 <HAL_GetREVID>
 80069f2:	4603      	mov	r3, r0
 80069f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d817      	bhi.n	8006a2c <HAL_RCC_OscConfig+0x1f4>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	2b40      	cmp	r3, #64	@ 0x40
 8006a02:	d108      	bne.n	8006a16 <HAL_RCC_OscConfig+0x1de>
 8006a04:	4b2e      	ldr	r3, [pc, #184]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006a0c:	4a2c      	ldr	r2, [pc, #176]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 8006a0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a12:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a14:	e07a      	b.n	8006b0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a16:	4b2a      	ldr	r3, [pc, #168]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	031b      	lsls	r3, r3, #12
 8006a24:	4926      	ldr	r1, [pc, #152]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a2a:	e06f      	b.n	8006b0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a2c:	4b24      	ldr	r3, [pc, #144]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	061b      	lsls	r3, r3, #24
 8006a3a:	4921      	ldr	r1, [pc, #132]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a40:	e064      	b.n	8006b0c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d047      	beq.n	8006ada <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f023 0219 	bic.w	r2, r3, #25
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	491a      	ldr	r1, [pc, #104]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a5c:	f7fb faa4 	bl	8001fa8 <HAL_GetTick>
 8006a60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a62:	e008      	b.n	8006a76 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a64:	f7fb faa0 	bl	8001fa8 <HAL_GetTick>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d901      	bls.n	8006a76 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e332      	b.n	80070dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a76:	4b12      	ldr	r3, [pc, #72]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0304 	and.w	r3, r3, #4
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d0f0      	beq.n	8006a64 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a82:	f7fb fa9d 	bl	8001fc0 <HAL_GetREVID>
 8006a86:	4603      	mov	r3, r0
 8006a88:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d819      	bhi.n	8006ac4 <HAL_RCC_OscConfig+0x28c>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	2b40      	cmp	r3, #64	@ 0x40
 8006a96:	d108      	bne.n	8006aaa <HAL_RCC_OscConfig+0x272>
 8006a98:	4b09      	ldr	r3, [pc, #36]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006aa0:	4a07      	ldr	r2, [pc, #28]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 8006aa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006aa6:	6053      	str	r3, [r2, #4]
 8006aa8:	e030      	b.n	8006b0c <HAL_RCC_OscConfig+0x2d4>
 8006aaa:	4b05      	ldr	r3, [pc, #20]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	031b      	lsls	r3, r3, #12
 8006ab8:	4901      	ldr	r1, [pc, #4]	@ (8006ac0 <HAL_RCC_OscConfig+0x288>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	604b      	str	r3, [r1, #4]
 8006abe:	e025      	b.n	8006b0c <HAL_RCC_OscConfig+0x2d4>
 8006ac0:	58024400 	.word	0x58024400
 8006ac4:	4b9a      	ldr	r3, [pc, #616]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	061b      	lsls	r3, r3, #24
 8006ad2:	4997      	ldr	r1, [pc, #604]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	604b      	str	r3, [r1, #4]
 8006ad8:	e018      	b.n	8006b0c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ada:	4b95      	ldr	r3, [pc, #596]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a94      	ldr	r2, [pc, #592]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006ae0:	f023 0301 	bic.w	r3, r3, #1
 8006ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ae6:	f7fb fa5f 	bl	8001fa8 <HAL_GetTick>
 8006aea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006aec:	e008      	b.n	8006b00 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006aee:	f7fb fa5b 	bl	8001fa8 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d901      	bls.n	8006b00 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e2ed      	b.n	80070dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b00:	4b8b      	ldr	r3, [pc, #556]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0304 	and.w	r3, r3, #4
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1f0      	bne.n	8006aee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0310 	and.w	r3, r3, #16
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 80a9 	beq.w	8006c6c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b1a:	4b85      	ldr	r3, [pc, #532]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b22:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b24:	4b82      	ldr	r3, [pc, #520]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b28:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d007      	beq.n	8006b40 <HAL_RCC_OscConfig+0x308>
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	2b18      	cmp	r3, #24
 8006b34:	d13a      	bne.n	8006bac <HAL_RCC_OscConfig+0x374>
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f003 0303 	and.w	r3, r3, #3
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d135      	bne.n	8006bac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b40:	4b7b      	ldr	r3, [pc, #492]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d005      	beq.n	8006b58 <HAL_RCC_OscConfig+0x320>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	2b80      	cmp	r3, #128	@ 0x80
 8006b52:	d001      	beq.n	8006b58 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e2c1      	b.n	80070dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b58:	f7fb fa32 	bl	8001fc0 <HAL_GetREVID>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d817      	bhi.n	8006b96 <HAL_RCC_OscConfig+0x35e>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	d108      	bne.n	8006b80 <HAL_RCC_OscConfig+0x348>
 8006b6e:	4b70      	ldr	r3, [pc, #448]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006b76:	4a6e      	ldr	r2, [pc, #440]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006b78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b7c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b7e:	e075      	b.n	8006c6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b80:	4b6b      	ldr	r3, [pc, #428]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	069b      	lsls	r3, r3, #26
 8006b8e:	4968      	ldr	r1, [pc, #416]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b94:	e06a      	b.n	8006c6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b96:	4b66      	ldr	r3, [pc, #408]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	061b      	lsls	r3, r3, #24
 8006ba4:	4962      	ldr	r1, [pc, #392]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006baa:	e05f      	b.n	8006c6c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d042      	beq.n	8006c3a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006bb4:	4b5e      	ldr	r3, [pc, #376]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a5d      	ldr	r2, [pc, #372]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc0:	f7fb f9f2 	bl	8001fa8 <HAL_GetTick>
 8006bc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006bc6:	e008      	b.n	8006bda <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006bc8:	f7fb f9ee 	bl	8001fa8 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d901      	bls.n	8006bda <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e280      	b.n	80070dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006bda:	4b55      	ldr	r3, [pc, #340]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d0f0      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006be6:	f7fb f9eb 	bl	8001fc0 <HAL_GetREVID>
 8006bea:	4603      	mov	r3, r0
 8006bec:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d817      	bhi.n	8006c24 <HAL_RCC_OscConfig+0x3ec>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	2b20      	cmp	r3, #32
 8006bfa:	d108      	bne.n	8006c0e <HAL_RCC_OscConfig+0x3d6>
 8006bfc:	4b4c      	ldr	r3, [pc, #304]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006c04:	4a4a      	ldr	r2, [pc, #296]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006c06:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c0a:	6053      	str	r3, [r2, #4]
 8006c0c:	e02e      	b.n	8006c6c <HAL_RCC_OscConfig+0x434>
 8006c0e:	4b48      	ldr	r3, [pc, #288]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	069b      	lsls	r3, r3, #26
 8006c1c:	4944      	ldr	r1, [pc, #272]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	604b      	str	r3, [r1, #4]
 8006c22:	e023      	b.n	8006c6c <HAL_RCC_OscConfig+0x434>
 8006c24:	4b42      	ldr	r3, [pc, #264]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	061b      	lsls	r3, r3, #24
 8006c32:	493f      	ldr	r1, [pc, #252]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60cb      	str	r3, [r1, #12]
 8006c38:	e018      	b.n	8006c6c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006c3a:	4b3d      	ldr	r3, [pc, #244]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a3c      	ldr	r2, [pc, #240]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006c40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c46:	f7fb f9af 	bl	8001fa8 <HAL_GetTick>
 8006c4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c4c:	e008      	b.n	8006c60 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006c4e:	f7fb f9ab 	bl	8001fa8 <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d901      	bls.n	8006c60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e23d      	b.n	80070dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c60:	4b33      	ldr	r3, [pc, #204]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1f0      	bne.n	8006c4e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0308 	and.w	r3, r3, #8
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d036      	beq.n	8006ce6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	695b      	ldr	r3, [r3, #20]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d019      	beq.n	8006cb4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c80:	4b2b      	ldr	r3, [pc, #172]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006c82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c84:	4a2a      	ldr	r2, [pc, #168]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006c86:	f043 0301 	orr.w	r3, r3, #1
 8006c8a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c8c:	f7fb f98c 	bl	8001fa8 <HAL_GetTick>
 8006c90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c92:	e008      	b.n	8006ca6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c94:	f7fb f988 	bl	8001fa8 <HAL_GetTick>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d901      	bls.n	8006ca6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	e21a      	b.n	80070dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006ca6:	4b22      	ldr	r3, [pc, #136]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006ca8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006caa:	f003 0302 	and.w	r3, r3, #2
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d0f0      	beq.n	8006c94 <HAL_RCC_OscConfig+0x45c>
 8006cb2:	e018      	b.n	8006ce6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006cba:	f023 0301 	bic.w	r3, r3, #1
 8006cbe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cc0:	f7fb f972 	bl	8001fa8 <HAL_GetTick>
 8006cc4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006cc6:	e008      	b.n	8006cda <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cc8:	f7fb f96e 	bl	8001fa8 <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d901      	bls.n	8006cda <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e200      	b.n	80070dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006cda:	4b15      	ldr	r3, [pc, #84]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006cdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1f0      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0320 	and.w	r3, r3, #32
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d039      	beq.n	8006d66 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d01c      	beq.n	8006d34 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a0c      	ldr	r2, [pc, #48]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006d00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006d04:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d06:	f7fb f94f 	bl	8001fa8 <HAL_GetTick>
 8006d0a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d0c:	e008      	b.n	8006d20 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d0e:	f7fb f94b 	bl	8001fa8 <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d901      	bls.n	8006d20 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e1dd      	b.n	80070dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d20:	4b03      	ldr	r3, [pc, #12]	@ (8006d30 <HAL_RCC_OscConfig+0x4f8>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d0f0      	beq.n	8006d0e <HAL_RCC_OscConfig+0x4d6>
 8006d2c:	e01b      	b.n	8006d66 <HAL_RCC_OscConfig+0x52e>
 8006d2e:	bf00      	nop
 8006d30:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d34:	4b9b      	ldr	r3, [pc, #620]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a9a      	ldr	r2, [pc, #616]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006d3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d3e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d40:	f7fb f932 	bl	8001fa8 <HAL_GetTick>
 8006d44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d46:	e008      	b.n	8006d5a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d48:	f7fb f92e 	bl	8001fa8 <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d901      	bls.n	8006d5a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e1c0      	b.n	80070dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d5a:	4b92      	ldr	r3, [pc, #584]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1f0      	bne.n	8006d48 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0304 	and.w	r3, r3, #4
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 8081 	beq.w	8006e76 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006d74:	4b8c      	ldr	r3, [pc, #560]	@ (8006fa8 <HAL_RCC_OscConfig+0x770>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a8b      	ldr	r2, [pc, #556]	@ (8006fa8 <HAL_RCC_OscConfig+0x770>)
 8006d7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d80:	f7fb f912 	bl	8001fa8 <HAL_GetTick>
 8006d84:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d86:	e008      	b.n	8006d9a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d88:	f7fb f90e 	bl	8001fa8 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	2b64      	cmp	r3, #100	@ 0x64
 8006d94:	d901      	bls.n	8006d9a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e1a0      	b.n	80070dc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d9a:	4b83      	ldr	r3, [pc, #524]	@ (8006fa8 <HAL_RCC_OscConfig+0x770>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d0f0      	beq.n	8006d88 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d106      	bne.n	8006dbc <HAL_RCC_OscConfig+0x584>
 8006dae:	4b7d      	ldr	r3, [pc, #500]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006db2:	4a7c      	ldr	r2, [pc, #496]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006db4:	f043 0301 	orr.w	r3, r3, #1
 8006db8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dba:	e02d      	b.n	8006e18 <HAL_RCC_OscConfig+0x5e0>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10c      	bne.n	8006dde <HAL_RCC_OscConfig+0x5a6>
 8006dc4:	4b77      	ldr	r3, [pc, #476]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dc8:	4a76      	ldr	r2, [pc, #472]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006dca:	f023 0301 	bic.w	r3, r3, #1
 8006dce:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dd0:	4b74      	ldr	r3, [pc, #464]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dd4:	4a73      	ldr	r2, [pc, #460]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006dd6:	f023 0304 	bic.w	r3, r3, #4
 8006dda:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ddc:	e01c      	b.n	8006e18 <HAL_RCC_OscConfig+0x5e0>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	2b05      	cmp	r3, #5
 8006de4:	d10c      	bne.n	8006e00 <HAL_RCC_OscConfig+0x5c8>
 8006de6:	4b6f      	ldr	r3, [pc, #444]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dea:	4a6e      	ldr	r2, [pc, #440]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006dec:	f043 0304 	orr.w	r3, r3, #4
 8006df0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006df2:	4b6c      	ldr	r3, [pc, #432]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006df6:	4a6b      	ldr	r2, [pc, #428]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006df8:	f043 0301 	orr.w	r3, r3, #1
 8006dfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dfe:	e00b      	b.n	8006e18 <HAL_RCC_OscConfig+0x5e0>
 8006e00:	4b68      	ldr	r3, [pc, #416]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e04:	4a67      	ldr	r2, [pc, #412]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006e06:	f023 0301 	bic.w	r3, r3, #1
 8006e0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e0c:	4b65      	ldr	r3, [pc, #404]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e10:	4a64      	ldr	r2, [pc, #400]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006e12:	f023 0304 	bic.w	r3, r3, #4
 8006e16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d015      	beq.n	8006e4c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e20:	f7fb f8c2 	bl	8001fa8 <HAL_GetTick>
 8006e24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e26:	e00a      	b.n	8006e3e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e28:	f7fb f8be 	bl	8001fa8 <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d901      	bls.n	8006e3e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e14e      	b.n	80070dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e3e:	4b59      	ldr	r3, [pc, #356]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e42:	f003 0302 	and.w	r3, r3, #2
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d0ee      	beq.n	8006e28 <HAL_RCC_OscConfig+0x5f0>
 8006e4a:	e014      	b.n	8006e76 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e4c:	f7fb f8ac 	bl	8001fa8 <HAL_GetTick>
 8006e50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e52:	e00a      	b.n	8006e6a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e54:	f7fb f8a8 	bl	8001fa8 <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d901      	bls.n	8006e6a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e138      	b.n	80070dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e6a:	4b4e      	ldr	r3, [pc, #312]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e6e:	f003 0302 	and.w	r3, r3, #2
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1ee      	bne.n	8006e54 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 812d 	beq.w	80070da <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006e80:	4b48      	ldr	r3, [pc, #288]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e88:	2b18      	cmp	r3, #24
 8006e8a:	f000 80bd 	beq.w	8007008 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	f040 809e 	bne.w	8006fd4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e98:	4b42      	ldr	r3, [pc, #264]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a41      	ldr	r2, [pc, #260]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006e9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ea4:	f7fb f880 	bl	8001fa8 <HAL_GetTick>
 8006ea8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006eaa:	e008      	b.n	8006ebe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eac:	f7fb f87c 	bl	8001fa8 <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d901      	bls.n	8006ebe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e10e      	b.n	80070dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ebe:	4b39      	ldr	r3, [pc, #228]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1f0      	bne.n	8006eac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006eca:	4b36      	ldr	r3, [pc, #216]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006ecc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ece:	4b37      	ldr	r3, [pc, #220]	@ (8006fac <HAL_RCC_OscConfig+0x774>)
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006eda:	0112      	lsls	r2, r2, #4
 8006edc:	430a      	orrs	r2, r1
 8006ede:	4931      	ldr	r1, [pc, #196]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	628b      	str	r3, [r1, #40]	@ 0x28
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	025b      	lsls	r3, r3, #9
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	431a      	orrs	r2, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006efe:	3b01      	subs	r3, #1
 8006f00:	041b      	lsls	r3, r3, #16
 8006f02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006f06:	431a      	orrs	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	061b      	lsls	r3, r3, #24
 8006f10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006f14:	4923      	ldr	r1, [pc, #140]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006f1a:	4b22      	ldr	r3, [pc, #136]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1e:	4a21      	ldr	r2, [pc, #132]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006f20:	f023 0301 	bic.w	r3, r3, #1
 8006f24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f26:	4b1f      	ldr	r3, [pc, #124]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006f28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f2a:	4b21      	ldr	r3, [pc, #132]	@ (8006fb0 <HAL_RCC_OscConfig+0x778>)
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006f32:	00d2      	lsls	r2, r2, #3
 8006f34:	491b      	ldr	r1, [pc, #108]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f3e:	f023 020c 	bic.w	r2, r3, #12
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f46:	4917      	ldr	r1, [pc, #92]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006f4c:	4b15      	ldr	r3, [pc, #84]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f50:	f023 0202 	bic.w	r2, r3, #2
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f58:	4912      	ldr	r1, [pc, #72]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006f5e:	4b11      	ldr	r3, [pc, #68]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f62:	4a10      	ldr	r2, [pc, #64]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f6e:	4a0d      	ldr	r2, [pc, #52]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006f70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006f76:	4b0b      	ldr	r3, [pc, #44]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006f7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006f82:	4b08      	ldr	r3, [pc, #32]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f86:	4a07      	ldr	r2, [pc, #28]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006f88:	f043 0301 	orr.w	r3, r3, #1
 8006f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f8e:	4b05      	ldr	r3, [pc, #20]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a04      	ldr	r2, [pc, #16]	@ (8006fa4 <HAL_RCC_OscConfig+0x76c>)
 8006f94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f9a:	f7fb f805 	bl	8001fa8 <HAL_GetTick>
 8006f9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006fa0:	e011      	b.n	8006fc6 <HAL_RCC_OscConfig+0x78e>
 8006fa2:	bf00      	nop
 8006fa4:	58024400 	.word	0x58024400
 8006fa8:	58024800 	.word	0x58024800
 8006fac:	fffffc0c 	.word	0xfffffc0c
 8006fb0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fb4:	f7fa fff8 	bl	8001fa8 <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d901      	bls.n	8006fc6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e08a      	b.n	80070dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006fc6:	4b47      	ldr	r3, [pc, #284]	@ (80070e4 <HAL_RCC_OscConfig+0x8ac>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d0f0      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x77c>
 8006fd2:	e082      	b.n	80070da <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fd4:	4b43      	ldr	r3, [pc, #268]	@ (80070e4 <HAL_RCC_OscConfig+0x8ac>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a42      	ldr	r2, [pc, #264]	@ (80070e4 <HAL_RCC_OscConfig+0x8ac>)
 8006fda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe0:	f7fa ffe2 	bl	8001fa8 <HAL_GetTick>
 8006fe4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006fe6:	e008      	b.n	8006ffa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fe8:	f7fa ffde 	bl	8001fa8 <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d901      	bls.n	8006ffa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e070      	b.n	80070dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ffa:	4b3a      	ldr	r3, [pc, #232]	@ (80070e4 <HAL_RCC_OscConfig+0x8ac>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1f0      	bne.n	8006fe8 <HAL_RCC_OscConfig+0x7b0>
 8007006:	e068      	b.n	80070da <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007008:	4b36      	ldr	r3, [pc, #216]	@ (80070e4 <HAL_RCC_OscConfig+0x8ac>)
 800700a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800700c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800700e:	4b35      	ldr	r3, [pc, #212]	@ (80070e4 <HAL_RCC_OscConfig+0x8ac>)
 8007010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007012:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007018:	2b01      	cmp	r3, #1
 800701a:	d031      	beq.n	8007080 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	f003 0203 	and.w	r2, r3, #3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007026:	429a      	cmp	r2, r3
 8007028:	d12a      	bne.n	8007080 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	091b      	lsrs	r3, r3, #4
 800702e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007036:	429a      	cmp	r2, r3
 8007038:	d122      	bne.n	8007080 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007044:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007046:	429a      	cmp	r2, r3
 8007048:	d11a      	bne.n	8007080 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	0a5b      	lsrs	r3, r3, #9
 800704e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007056:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007058:	429a      	cmp	r2, r3
 800705a:	d111      	bne.n	8007080 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	0c1b      	lsrs	r3, r3, #16
 8007060:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007068:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800706a:	429a      	cmp	r2, r3
 800706c:	d108      	bne.n	8007080 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	0e1b      	lsrs	r3, r3, #24
 8007072:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800707a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800707c:	429a      	cmp	r2, r3
 800707e:	d001      	beq.n	8007084 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e02b      	b.n	80070dc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007084:	4b17      	ldr	r3, [pc, #92]	@ (80070e4 <HAL_RCC_OscConfig+0x8ac>)
 8007086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007088:	08db      	lsrs	r3, r3, #3
 800708a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800708e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	429a      	cmp	r2, r3
 8007098:	d01f      	beq.n	80070da <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800709a:	4b12      	ldr	r3, [pc, #72]	@ (80070e4 <HAL_RCC_OscConfig+0x8ac>)
 800709c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709e:	4a11      	ldr	r2, [pc, #68]	@ (80070e4 <HAL_RCC_OscConfig+0x8ac>)
 80070a0:	f023 0301 	bic.w	r3, r3, #1
 80070a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80070a6:	f7fa ff7f 	bl	8001fa8 <HAL_GetTick>
 80070aa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80070ac:	bf00      	nop
 80070ae:	f7fa ff7b 	bl	8001fa8 <HAL_GetTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d0f9      	beq.n	80070ae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80070ba:	4b0a      	ldr	r3, [pc, #40]	@ (80070e4 <HAL_RCC_OscConfig+0x8ac>)
 80070bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070be:	4b0a      	ldr	r3, [pc, #40]	@ (80070e8 <HAL_RCC_OscConfig+0x8b0>)
 80070c0:	4013      	ands	r3, r2
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80070c6:	00d2      	lsls	r2, r2, #3
 80070c8:	4906      	ldr	r1, [pc, #24]	@ (80070e4 <HAL_RCC_OscConfig+0x8ac>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80070ce:	4b05      	ldr	r3, [pc, #20]	@ (80070e4 <HAL_RCC_OscConfig+0x8ac>)
 80070d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d2:	4a04      	ldr	r2, [pc, #16]	@ (80070e4 <HAL_RCC_OscConfig+0x8ac>)
 80070d4:	f043 0301 	orr.w	r3, r3, #1
 80070d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3730      	adds	r7, #48	@ 0x30
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	58024400 	.word	0x58024400
 80070e8:	ffff0007 	.word	0xffff0007

080070ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b086      	sub	sp, #24
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d101      	bne.n	8007100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e19c      	b.n	800743a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007100:	4b8a      	ldr	r3, [pc, #552]	@ (800732c <HAL_RCC_ClockConfig+0x240>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 030f 	and.w	r3, r3, #15
 8007108:	683a      	ldr	r2, [r7, #0]
 800710a:	429a      	cmp	r2, r3
 800710c:	d910      	bls.n	8007130 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800710e:	4b87      	ldr	r3, [pc, #540]	@ (800732c <HAL_RCC_ClockConfig+0x240>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f023 020f 	bic.w	r2, r3, #15
 8007116:	4985      	ldr	r1, [pc, #532]	@ (800732c <HAL_RCC_ClockConfig+0x240>)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	4313      	orrs	r3, r2
 800711c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800711e:	4b83      	ldr	r3, [pc, #524]	@ (800732c <HAL_RCC_ClockConfig+0x240>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 030f 	and.w	r3, r3, #15
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	429a      	cmp	r2, r3
 800712a:	d001      	beq.n	8007130 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e184      	b.n	800743a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0304 	and.w	r3, r3, #4
 8007138:	2b00      	cmp	r3, #0
 800713a:	d010      	beq.n	800715e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	691a      	ldr	r2, [r3, #16]
 8007140:	4b7b      	ldr	r3, [pc, #492]	@ (8007330 <HAL_RCC_ClockConfig+0x244>)
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007148:	429a      	cmp	r2, r3
 800714a:	d908      	bls.n	800715e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800714c:	4b78      	ldr	r3, [pc, #480]	@ (8007330 <HAL_RCC_ClockConfig+0x244>)
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	4975      	ldr	r1, [pc, #468]	@ (8007330 <HAL_RCC_ClockConfig+0x244>)
 800715a:	4313      	orrs	r3, r2
 800715c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0308 	and.w	r3, r3, #8
 8007166:	2b00      	cmp	r3, #0
 8007168:	d010      	beq.n	800718c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	695a      	ldr	r2, [r3, #20]
 800716e:	4b70      	ldr	r3, [pc, #448]	@ (8007330 <HAL_RCC_ClockConfig+0x244>)
 8007170:	69db      	ldr	r3, [r3, #28]
 8007172:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007176:	429a      	cmp	r2, r3
 8007178:	d908      	bls.n	800718c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800717a:	4b6d      	ldr	r3, [pc, #436]	@ (8007330 <HAL_RCC_ClockConfig+0x244>)
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	496a      	ldr	r1, [pc, #424]	@ (8007330 <HAL_RCC_ClockConfig+0x244>)
 8007188:	4313      	orrs	r3, r2
 800718a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0310 	and.w	r3, r3, #16
 8007194:	2b00      	cmp	r3, #0
 8007196:	d010      	beq.n	80071ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	699a      	ldr	r2, [r3, #24]
 800719c:	4b64      	ldr	r3, [pc, #400]	@ (8007330 <HAL_RCC_ClockConfig+0x244>)
 800719e:	69db      	ldr	r3, [r3, #28]
 80071a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d908      	bls.n	80071ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80071a8:	4b61      	ldr	r3, [pc, #388]	@ (8007330 <HAL_RCC_ClockConfig+0x244>)
 80071aa:	69db      	ldr	r3, [r3, #28]
 80071ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	699b      	ldr	r3, [r3, #24]
 80071b4:	495e      	ldr	r1, [pc, #376]	@ (8007330 <HAL_RCC_ClockConfig+0x244>)
 80071b6:	4313      	orrs	r3, r2
 80071b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0320 	and.w	r3, r3, #32
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d010      	beq.n	80071e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	69da      	ldr	r2, [r3, #28]
 80071ca:	4b59      	ldr	r3, [pc, #356]	@ (8007330 <HAL_RCC_ClockConfig+0x244>)
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d908      	bls.n	80071e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80071d6:	4b56      	ldr	r3, [pc, #344]	@ (8007330 <HAL_RCC_ClockConfig+0x244>)
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	69db      	ldr	r3, [r3, #28]
 80071e2:	4953      	ldr	r1, [pc, #332]	@ (8007330 <HAL_RCC_ClockConfig+0x244>)
 80071e4:	4313      	orrs	r3, r2
 80071e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0302 	and.w	r3, r3, #2
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d010      	beq.n	8007216 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68da      	ldr	r2, [r3, #12]
 80071f8:	4b4d      	ldr	r3, [pc, #308]	@ (8007330 <HAL_RCC_ClockConfig+0x244>)
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	f003 030f 	and.w	r3, r3, #15
 8007200:	429a      	cmp	r2, r3
 8007202:	d908      	bls.n	8007216 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007204:	4b4a      	ldr	r3, [pc, #296]	@ (8007330 <HAL_RCC_ClockConfig+0x244>)
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	f023 020f 	bic.w	r2, r3, #15
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	4947      	ldr	r1, [pc, #284]	@ (8007330 <HAL_RCC_ClockConfig+0x244>)
 8007212:	4313      	orrs	r3, r2
 8007214:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	2b00      	cmp	r3, #0
 8007220:	d055      	beq.n	80072ce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007222:	4b43      	ldr	r3, [pc, #268]	@ (8007330 <HAL_RCC_ClockConfig+0x244>)
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	4940      	ldr	r1, [pc, #256]	@ (8007330 <HAL_RCC_ClockConfig+0x244>)
 8007230:	4313      	orrs	r3, r2
 8007232:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	2b02      	cmp	r3, #2
 800723a:	d107      	bne.n	800724c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800723c:	4b3c      	ldr	r3, [pc, #240]	@ (8007330 <HAL_RCC_ClockConfig+0x244>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d121      	bne.n	800728c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e0f6      	b.n	800743a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	2b03      	cmp	r3, #3
 8007252:	d107      	bne.n	8007264 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007254:	4b36      	ldr	r3, [pc, #216]	@ (8007330 <HAL_RCC_ClockConfig+0x244>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800725c:	2b00      	cmp	r3, #0
 800725e:	d115      	bne.n	800728c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e0ea      	b.n	800743a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d107      	bne.n	800727c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800726c:	4b30      	ldr	r3, [pc, #192]	@ (8007330 <HAL_RCC_ClockConfig+0x244>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007274:	2b00      	cmp	r3, #0
 8007276:	d109      	bne.n	800728c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e0de      	b.n	800743a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800727c:	4b2c      	ldr	r3, [pc, #176]	@ (8007330 <HAL_RCC_ClockConfig+0x244>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0304 	and.w	r3, r3, #4
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e0d6      	b.n	800743a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800728c:	4b28      	ldr	r3, [pc, #160]	@ (8007330 <HAL_RCC_ClockConfig+0x244>)
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	f023 0207 	bic.w	r2, r3, #7
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	4925      	ldr	r1, [pc, #148]	@ (8007330 <HAL_RCC_ClockConfig+0x244>)
 800729a:	4313      	orrs	r3, r2
 800729c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800729e:	f7fa fe83 	bl	8001fa8 <HAL_GetTick>
 80072a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072a4:	e00a      	b.n	80072bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072a6:	f7fa fe7f 	bl	8001fa8 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d901      	bls.n	80072bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e0be      	b.n	800743a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072bc:	4b1c      	ldr	r3, [pc, #112]	@ (8007330 <HAL_RCC_ClockConfig+0x244>)
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	00db      	lsls	r3, r3, #3
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d1eb      	bne.n	80072a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d010      	beq.n	80072fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68da      	ldr	r2, [r3, #12]
 80072de:	4b14      	ldr	r3, [pc, #80]	@ (8007330 <HAL_RCC_ClockConfig+0x244>)
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	f003 030f 	and.w	r3, r3, #15
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d208      	bcs.n	80072fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072ea:	4b11      	ldr	r3, [pc, #68]	@ (8007330 <HAL_RCC_ClockConfig+0x244>)
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	f023 020f 	bic.w	r2, r3, #15
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	490e      	ldr	r1, [pc, #56]	@ (8007330 <HAL_RCC_ClockConfig+0x244>)
 80072f8:	4313      	orrs	r3, r2
 80072fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072fc:	4b0b      	ldr	r3, [pc, #44]	@ (800732c <HAL_RCC_ClockConfig+0x240>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 030f 	and.w	r3, r3, #15
 8007304:	683a      	ldr	r2, [r7, #0]
 8007306:	429a      	cmp	r2, r3
 8007308:	d214      	bcs.n	8007334 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800730a:	4b08      	ldr	r3, [pc, #32]	@ (800732c <HAL_RCC_ClockConfig+0x240>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f023 020f 	bic.w	r2, r3, #15
 8007312:	4906      	ldr	r1, [pc, #24]	@ (800732c <HAL_RCC_ClockConfig+0x240>)
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	4313      	orrs	r3, r2
 8007318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800731a:	4b04      	ldr	r3, [pc, #16]	@ (800732c <HAL_RCC_ClockConfig+0x240>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 030f 	and.w	r3, r3, #15
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	429a      	cmp	r2, r3
 8007326:	d005      	beq.n	8007334 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e086      	b.n	800743a <HAL_RCC_ClockConfig+0x34e>
 800732c:	52002000 	.word	0x52002000
 8007330:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0304 	and.w	r3, r3, #4
 800733c:	2b00      	cmp	r3, #0
 800733e:	d010      	beq.n	8007362 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	691a      	ldr	r2, [r3, #16]
 8007344:	4b3f      	ldr	r3, [pc, #252]	@ (8007444 <HAL_RCC_ClockConfig+0x358>)
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800734c:	429a      	cmp	r2, r3
 800734e:	d208      	bcs.n	8007362 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007350:	4b3c      	ldr	r3, [pc, #240]	@ (8007444 <HAL_RCC_ClockConfig+0x358>)
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	4939      	ldr	r1, [pc, #228]	@ (8007444 <HAL_RCC_ClockConfig+0x358>)
 800735e:	4313      	orrs	r3, r2
 8007360:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 0308 	and.w	r3, r3, #8
 800736a:	2b00      	cmp	r3, #0
 800736c:	d010      	beq.n	8007390 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	695a      	ldr	r2, [r3, #20]
 8007372:	4b34      	ldr	r3, [pc, #208]	@ (8007444 <HAL_RCC_ClockConfig+0x358>)
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800737a:	429a      	cmp	r2, r3
 800737c:	d208      	bcs.n	8007390 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800737e:	4b31      	ldr	r3, [pc, #196]	@ (8007444 <HAL_RCC_ClockConfig+0x358>)
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	492e      	ldr	r1, [pc, #184]	@ (8007444 <HAL_RCC_ClockConfig+0x358>)
 800738c:	4313      	orrs	r3, r2
 800738e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0310 	and.w	r3, r3, #16
 8007398:	2b00      	cmp	r3, #0
 800739a:	d010      	beq.n	80073be <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	699a      	ldr	r2, [r3, #24]
 80073a0:	4b28      	ldr	r3, [pc, #160]	@ (8007444 <HAL_RCC_ClockConfig+0x358>)
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d208      	bcs.n	80073be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80073ac:	4b25      	ldr	r3, [pc, #148]	@ (8007444 <HAL_RCC_ClockConfig+0x358>)
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	4922      	ldr	r1, [pc, #136]	@ (8007444 <HAL_RCC_ClockConfig+0x358>)
 80073ba:	4313      	orrs	r3, r2
 80073bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0320 	and.w	r3, r3, #32
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d010      	beq.n	80073ec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	69da      	ldr	r2, [r3, #28]
 80073ce:	4b1d      	ldr	r3, [pc, #116]	@ (8007444 <HAL_RCC_ClockConfig+0x358>)
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d208      	bcs.n	80073ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80073da:	4b1a      	ldr	r3, [pc, #104]	@ (8007444 <HAL_RCC_ClockConfig+0x358>)
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	4917      	ldr	r1, [pc, #92]	@ (8007444 <HAL_RCC_ClockConfig+0x358>)
 80073e8:	4313      	orrs	r3, r2
 80073ea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80073ec:	f000 f834 	bl	8007458 <HAL_RCC_GetSysClockFreq>
 80073f0:	4602      	mov	r2, r0
 80073f2:	4b14      	ldr	r3, [pc, #80]	@ (8007444 <HAL_RCC_ClockConfig+0x358>)
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	0a1b      	lsrs	r3, r3, #8
 80073f8:	f003 030f 	and.w	r3, r3, #15
 80073fc:	4912      	ldr	r1, [pc, #72]	@ (8007448 <HAL_RCC_ClockConfig+0x35c>)
 80073fe:	5ccb      	ldrb	r3, [r1, r3]
 8007400:	f003 031f 	and.w	r3, r3, #31
 8007404:	fa22 f303 	lsr.w	r3, r2, r3
 8007408:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800740a:	4b0e      	ldr	r3, [pc, #56]	@ (8007444 <HAL_RCC_ClockConfig+0x358>)
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	f003 030f 	and.w	r3, r3, #15
 8007412:	4a0d      	ldr	r2, [pc, #52]	@ (8007448 <HAL_RCC_ClockConfig+0x35c>)
 8007414:	5cd3      	ldrb	r3, [r2, r3]
 8007416:	f003 031f 	and.w	r3, r3, #31
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	fa22 f303 	lsr.w	r3, r2, r3
 8007420:	4a0a      	ldr	r2, [pc, #40]	@ (800744c <HAL_RCC_ClockConfig+0x360>)
 8007422:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007424:	4a0a      	ldr	r2, [pc, #40]	@ (8007450 <HAL_RCC_ClockConfig+0x364>)
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800742a:	4b0a      	ldr	r3, [pc, #40]	@ (8007454 <HAL_RCC_ClockConfig+0x368>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4618      	mov	r0, r3
 8007430:	f7f9 fe5c 	bl	80010ec <HAL_InitTick>
 8007434:	4603      	mov	r3, r0
 8007436:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007438:	7bfb      	ldrb	r3, [r7, #15]
}
 800743a:	4618      	mov	r0, r3
 800743c:	3718      	adds	r7, #24
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	58024400 	.word	0x58024400
 8007448:	08013ed8 	.word	0x08013ed8
 800744c:	24000004 	.word	0x24000004
 8007450:	24000000 	.word	0x24000000
 8007454:	24000008 	.word	0x24000008

08007458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007458:	b480      	push	{r7}
 800745a:	b089      	sub	sp, #36	@ 0x24
 800745c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800745e:	4bb3      	ldr	r3, [pc, #716]	@ (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007466:	2b18      	cmp	r3, #24
 8007468:	f200 8155 	bhi.w	8007716 <HAL_RCC_GetSysClockFreq+0x2be>
 800746c:	a201      	add	r2, pc, #4	@ (adr r2, 8007474 <HAL_RCC_GetSysClockFreq+0x1c>)
 800746e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007472:	bf00      	nop
 8007474:	080074d9 	.word	0x080074d9
 8007478:	08007717 	.word	0x08007717
 800747c:	08007717 	.word	0x08007717
 8007480:	08007717 	.word	0x08007717
 8007484:	08007717 	.word	0x08007717
 8007488:	08007717 	.word	0x08007717
 800748c:	08007717 	.word	0x08007717
 8007490:	08007717 	.word	0x08007717
 8007494:	080074ff 	.word	0x080074ff
 8007498:	08007717 	.word	0x08007717
 800749c:	08007717 	.word	0x08007717
 80074a0:	08007717 	.word	0x08007717
 80074a4:	08007717 	.word	0x08007717
 80074a8:	08007717 	.word	0x08007717
 80074ac:	08007717 	.word	0x08007717
 80074b0:	08007717 	.word	0x08007717
 80074b4:	08007505 	.word	0x08007505
 80074b8:	08007717 	.word	0x08007717
 80074bc:	08007717 	.word	0x08007717
 80074c0:	08007717 	.word	0x08007717
 80074c4:	08007717 	.word	0x08007717
 80074c8:	08007717 	.word	0x08007717
 80074cc:	08007717 	.word	0x08007717
 80074d0:	08007717 	.word	0x08007717
 80074d4:	0800750b 	.word	0x0800750b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074d8:	4b94      	ldr	r3, [pc, #592]	@ (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0320 	and.w	r3, r3, #32
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d009      	beq.n	80074f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074e4:	4b91      	ldr	r3, [pc, #580]	@ (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	08db      	lsrs	r3, r3, #3
 80074ea:	f003 0303 	and.w	r3, r3, #3
 80074ee:	4a90      	ldr	r2, [pc, #576]	@ (8007730 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80074f0:	fa22 f303 	lsr.w	r3, r2, r3
 80074f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80074f6:	e111      	b.n	800771c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80074f8:	4b8d      	ldr	r3, [pc, #564]	@ (8007730 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80074fa:	61bb      	str	r3, [r7, #24]
      break;
 80074fc:	e10e      	b.n	800771c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80074fe:	4b8d      	ldr	r3, [pc, #564]	@ (8007734 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007500:	61bb      	str	r3, [r7, #24]
      break;
 8007502:	e10b      	b.n	800771c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007504:	4b8c      	ldr	r3, [pc, #560]	@ (8007738 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007506:	61bb      	str	r3, [r7, #24]
      break;
 8007508:	e108      	b.n	800771c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800750a:	4b88      	ldr	r3, [pc, #544]	@ (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800750c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800750e:	f003 0303 	and.w	r3, r3, #3
 8007512:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007514:	4b85      	ldr	r3, [pc, #532]	@ (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007518:	091b      	lsrs	r3, r3, #4
 800751a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800751e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007520:	4b82      	ldr	r3, [pc, #520]	@ (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007524:	f003 0301 	and.w	r3, r3, #1
 8007528:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800752a:	4b80      	ldr	r3, [pc, #512]	@ (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800752c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800752e:	08db      	lsrs	r3, r3, #3
 8007530:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	fb02 f303 	mul.w	r3, r2, r3
 800753a:	ee07 3a90 	vmov	s15, r3
 800753e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007542:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	2b00      	cmp	r3, #0
 800754a:	f000 80e1 	beq.w	8007710 <HAL_RCC_GetSysClockFreq+0x2b8>
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2b02      	cmp	r3, #2
 8007552:	f000 8083 	beq.w	800765c <HAL_RCC_GetSysClockFreq+0x204>
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	2b02      	cmp	r3, #2
 800755a:	f200 80a1 	bhi.w	80076a0 <HAL_RCC_GetSysClockFreq+0x248>
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d003      	beq.n	800756c <HAL_RCC_GetSysClockFreq+0x114>
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d056      	beq.n	8007618 <HAL_RCC_GetSysClockFreq+0x1c0>
 800756a:	e099      	b.n	80076a0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800756c:	4b6f      	ldr	r3, [pc, #444]	@ (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0320 	and.w	r3, r3, #32
 8007574:	2b00      	cmp	r3, #0
 8007576:	d02d      	beq.n	80075d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007578:	4b6c      	ldr	r3, [pc, #432]	@ (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	08db      	lsrs	r3, r3, #3
 800757e:	f003 0303 	and.w	r3, r3, #3
 8007582:	4a6b      	ldr	r2, [pc, #428]	@ (8007730 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007584:	fa22 f303 	lsr.w	r3, r2, r3
 8007588:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	ee07 3a90 	vmov	s15, r3
 8007590:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	ee07 3a90 	vmov	s15, r3
 800759a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800759e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075a2:	4b62      	ldr	r3, [pc, #392]	@ (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075aa:	ee07 3a90 	vmov	s15, r3
 80075ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80075b6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800773c <HAL_RCC_GetSysClockFreq+0x2e4>
 80075ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80075d2:	e087      	b.n	80076e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	ee07 3a90 	vmov	s15, r3
 80075da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075de:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007740 <HAL_RCC_GetSysClockFreq+0x2e8>
 80075e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075e6:	4b51      	ldr	r3, [pc, #324]	@ (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ee:	ee07 3a90 	vmov	s15, r3
 80075f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80075fa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800773c <HAL_RCC_GetSysClockFreq+0x2e4>
 80075fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007606:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800760a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800760e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007612:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007616:	e065      	b.n	80076e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	ee07 3a90 	vmov	s15, r3
 800761e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007622:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007744 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800762a:	4b40      	ldr	r3, [pc, #256]	@ (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800762c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800762e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007632:	ee07 3a90 	vmov	s15, r3
 8007636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800763a:	ed97 6a02 	vldr	s12, [r7, #8]
 800763e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800773c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800764a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800764e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007656:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800765a:	e043      	b.n	80076e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	ee07 3a90 	vmov	s15, r3
 8007662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007666:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007748 <HAL_RCC_GetSysClockFreq+0x2f0>
 800766a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800766e:	4b2f      	ldr	r3, [pc, #188]	@ (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007676:	ee07 3a90 	vmov	s15, r3
 800767a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800767e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007682:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800773c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800768a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800768e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800769a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800769e:	e021      	b.n	80076e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	ee07 3a90 	vmov	s15, r3
 80076a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076aa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007744 <HAL_RCC_GetSysClockFreq+0x2ec>
 80076ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076b2:	4b1e      	ldr	r3, [pc, #120]	@ (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ba:	ee07 3a90 	vmov	s15, r3
 80076be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80076c6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800773c <HAL_RCC_GetSysClockFreq+0x2e4>
 80076ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80076e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80076e4:	4b11      	ldr	r3, [pc, #68]	@ (800772c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e8:	0a5b      	lsrs	r3, r3, #9
 80076ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076ee:	3301      	adds	r3, #1
 80076f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	ee07 3a90 	vmov	s15, r3
 80076f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80076fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007708:	ee17 3a90 	vmov	r3, s15
 800770c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800770e:	e005      	b.n	800771c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007710:	2300      	movs	r3, #0
 8007712:	61bb      	str	r3, [r7, #24]
      break;
 8007714:	e002      	b.n	800771c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007716:	4b07      	ldr	r3, [pc, #28]	@ (8007734 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007718:	61bb      	str	r3, [r7, #24]
      break;
 800771a:	bf00      	nop
  }

  return sysclockfreq;
 800771c:	69bb      	ldr	r3, [r7, #24]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3724      	adds	r7, #36	@ 0x24
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	58024400 	.word	0x58024400
 8007730:	03d09000 	.word	0x03d09000
 8007734:	003d0900 	.word	0x003d0900
 8007738:	007a1200 	.word	0x007a1200
 800773c:	46000000 	.word	0x46000000
 8007740:	4c742400 	.word	0x4c742400
 8007744:	4a742400 	.word	0x4a742400
 8007748:	4af42400 	.word	0x4af42400

0800774c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007752:	f7ff fe81 	bl	8007458 <HAL_RCC_GetSysClockFreq>
 8007756:	4602      	mov	r2, r0
 8007758:	4b10      	ldr	r3, [pc, #64]	@ (800779c <HAL_RCC_GetHCLKFreq+0x50>)
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	0a1b      	lsrs	r3, r3, #8
 800775e:	f003 030f 	and.w	r3, r3, #15
 8007762:	490f      	ldr	r1, [pc, #60]	@ (80077a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007764:	5ccb      	ldrb	r3, [r1, r3]
 8007766:	f003 031f 	and.w	r3, r3, #31
 800776a:	fa22 f303 	lsr.w	r3, r2, r3
 800776e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007770:	4b0a      	ldr	r3, [pc, #40]	@ (800779c <HAL_RCC_GetHCLKFreq+0x50>)
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	f003 030f 	and.w	r3, r3, #15
 8007778:	4a09      	ldr	r2, [pc, #36]	@ (80077a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800777a:	5cd3      	ldrb	r3, [r2, r3]
 800777c:	f003 031f 	and.w	r3, r3, #31
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	fa22 f303 	lsr.w	r3, r2, r3
 8007786:	4a07      	ldr	r2, [pc, #28]	@ (80077a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007788:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800778a:	4a07      	ldr	r2, [pc, #28]	@ (80077a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007790:	4b04      	ldr	r3, [pc, #16]	@ (80077a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007792:	681b      	ldr	r3, [r3, #0]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	58024400 	.word	0x58024400
 80077a0:	08013ed8 	.word	0x08013ed8
 80077a4:	24000004 	.word	0x24000004
 80077a8:	24000000 	.word	0x24000000

080077ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80077b0:	f7ff ffcc 	bl	800774c <HAL_RCC_GetHCLKFreq>
 80077b4:	4602      	mov	r2, r0
 80077b6:	4b06      	ldr	r3, [pc, #24]	@ (80077d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077b8:	69db      	ldr	r3, [r3, #28]
 80077ba:	091b      	lsrs	r3, r3, #4
 80077bc:	f003 0307 	and.w	r3, r3, #7
 80077c0:	4904      	ldr	r1, [pc, #16]	@ (80077d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80077c2:	5ccb      	ldrb	r3, [r1, r3]
 80077c4:	f003 031f 	and.w	r3, r3, #31
 80077c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	58024400 	.word	0x58024400
 80077d4:	08013ed8 	.word	0x08013ed8

080077d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80077dc:	f7ff ffb6 	bl	800774c <HAL_RCC_GetHCLKFreq>
 80077e0:	4602      	mov	r2, r0
 80077e2:	4b06      	ldr	r3, [pc, #24]	@ (80077fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80077e4:	69db      	ldr	r3, [r3, #28]
 80077e6:	0a1b      	lsrs	r3, r3, #8
 80077e8:	f003 0307 	and.w	r3, r3, #7
 80077ec:	4904      	ldr	r1, [pc, #16]	@ (8007800 <HAL_RCC_GetPCLK2Freq+0x28>)
 80077ee:	5ccb      	ldrb	r3, [r1, r3]
 80077f0:	f003 031f 	and.w	r3, r3, #31
 80077f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	58024400 	.word	0x58024400
 8007800:	08013ed8 	.word	0x08013ed8

08007804 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	223f      	movs	r2, #63	@ 0x3f
 8007812:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007814:	4b1a      	ldr	r3, [pc, #104]	@ (8007880 <HAL_RCC_GetClockConfig+0x7c>)
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	f003 0207 	and.w	r2, r3, #7
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007820:	4b17      	ldr	r3, [pc, #92]	@ (8007880 <HAL_RCC_GetClockConfig+0x7c>)
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800782c:	4b14      	ldr	r3, [pc, #80]	@ (8007880 <HAL_RCC_GetClockConfig+0x7c>)
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	f003 020f 	and.w	r2, r3, #15
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007838:	4b11      	ldr	r3, [pc, #68]	@ (8007880 <HAL_RCC_GetClockConfig+0x7c>)
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007844:	4b0e      	ldr	r3, [pc, #56]	@ (8007880 <HAL_RCC_GetClockConfig+0x7c>)
 8007846:	69db      	ldr	r3, [r3, #28]
 8007848:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007850:	4b0b      	ldr	r3, [pc, #44]	@ (8007880 <HAL_RCC_GetClockConfig+0x7c>)
 8007852:	69db      	ldr	r3, [r3, #28]
 8007854:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800785c:	4b08      	ldr	r3, [pc, #32]	@ (8007880 <HAL_RCC_GetClockConfig+0x7c>)
 800785e:	6a1b      	ldr	r3, [r3, #32]
 8007860:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007868:	4b06      	ldr	r3, [pc, #24]	@ (8007884 <HAL_RCC_GetClockConfig+0x80>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 020f 	and.w	r2, r3, #15
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	601a      	str	r2, [r3, #0]
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	58024400 	.word	0x58024400
 8007884:	52002000 	.word	0x52002000

08007888 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800788c:	b0ca      	sub	sp, #296	@ 0x128
 800788e:	af00      	add	r7, sp, #0
 8007890:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007894:	2300      	movs	r3, #0
 8007896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800789a:	2300      	movs	r3, #0
 800789c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80078a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80078ac:	2500      	movs	r5, #0
 80078ae:	ea54 0305 	orrs.w	r3, r4, r5
 80078b2:	d049      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80078b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80078ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80078be:	d02f      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80078c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80078c4:	d828      	bhi.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80078c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078ca:	d01a      	beq.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80078cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078d0:	d822      	bhi.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d003      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80078d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078da:	d007      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80078dc:	e01c      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078de:	4bb8      	ldr	r3, [pc, #736]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e2:	4ab7      	ldr	r2, [pc, #732]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80078ea:	e01a      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078f0:	3308      	adds	r3, #8
 80078f2:	2102      	movs	r1, #2
 80078f4:	4618      	mov	r0, r3
 80078f6:	f002 fb61 	bl	8009fbc <RCCEx_PLL2_Config>
 80078fa:	4603      	mov	r3, r0
 80078fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007900:	e00f      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007906:	3328      	adds	r3, #40	@ 0x28
 8007908:	2102      	movs	r1, #2
 800790a:	4618      	mov	r0, r3
 800790c:	f002 fc08 	bl	800a120 <RCCEx_PLL3_Config>
 8007910:	4603      	mov	r3, r0
 8007912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007916:	e004      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800791e:	e000      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007920:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10a      	bne.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800792a:	4ba5      	ldr	r3, [pc, #660]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800792c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800792e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007936:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007938:	4aa1      	ldr	r2, [pc, #644]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800793a:	430b      	orrs	r3, r1
 800793c:	6513      	str	r3, [r2, #80]	@ 0x50
 800793e:	e003      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007940:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007944:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800794c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007950:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007954:	f04f 0900 	mov.w	r9, #0
 8007958:	ea58 0309 	orrs.w	r3, r8, r9
 800795c:	d047      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800795e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007964:	2b04      	cmp	r3, #4
 8007966:	d82a      	bhi.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007968:	a201      	add	r2, pc, #4	@ (adr r2, 8007970 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800796a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796e:	bf00      	nop
 8007970:	08007985 	.word	0x08007985
 8007974:	08007993 	.word	0x08007993
 8007978:	080079a9 	.word	0x080079a9
 800797c:	080079c7 	.word	0x080079c7
 8007980:	080079c7 	.word	0x080079c7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007984:	4b8e      	ldr	r3, [pc, #568]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007988:	4a8d      	ldr	r2, [pc, #564]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800798a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800798e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007990:	e01a      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007996:	3308      	adds	r3, #8
 8007998:	2100      	movs	r1, #0
 800799a:	4618      	mov	r0, r3
 800799c:	f002 fb0e 	bl	8009fbc <RCCEx_PLL2_Config>
 80079a0:	4603      	mov	r3, r0
 80079a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079a6:	e00f      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ac:	3328      	adds	r3, #40	@ 0x28
 80079ae:	2100      	movs	r1, #0
 80079b0:	4618      	mov	r0, r3
 80079b2:	f002 fbb5 	bl	800a120 <RCCEx_PLL3_Config>
 80079b6:	4603      	mov	r3, r0
 80079b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079bc:	e004      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079c4:	e000      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80079c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10a      	bne.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079d0:	4b7b      	ldr	r3, [pc, #492]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079d4:	f023 0107 	bic.w	r1, r3, #7
 80079d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079de:	4a78      	ldr	r2, [pc, #480]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079e0:	430b      	orrs	r3, r1
 80079e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80079e4:	e003      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80079ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80079fa:	f04f 0b00 	mov.w	fp, #0
 80079fe:	ea5a 030b 	orrs.w	r3, sl, fp
 8007a02:	d04c      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a0e:	d030      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007a10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a14:	d829      	bhi.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007a16:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a18:	d02d      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007a1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a1c:	d825      	bhi.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007a1e:	2b80      	cmp	r3, #128	@ 0x80
 8007a20:	d018      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007a22:	2b80      	cmp	r3, #128	@ 0x80
 8007a24:	d821      	bhi.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d002      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007a2a:	2b40      	cmp	r3, #64	@ 0x40
 8007a2c:	d007      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007a2e:	e01c      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a30:	4b63      	ldr	r3, [pc, #396]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a34:	4a62      	ldr	r2, [pc, #392]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007a3c:	e01c      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a42:	3308      	adds	r3, #8
 8007a44:	2100      	movs	r1, #0
 8007a46:	4618      	mov	r0, r3
 8007a48:	f002 fab8 	bl	8009fbc <RCCEx_PLL2_Config>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007a52:	e011      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a58:	3328      	adds	r3, #40	@ 0x28
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f002 fb5f 	bl	800a120 <RCCEx_PLL3_Config>
 8007a62:	4603      	mov	r3, r0
 8007a64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007a68:	e006      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a70:	e002      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007a72:	bf00      	nop
 8007a74:	e000      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007a76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10a      	bne.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007a80:	4b4f      	ldr	r3, [pc, #316]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a84:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a8e:	4a4c      	ldr	r2, [pc, #304]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a90:	430b      	orrs	r3, r1
 8007a92:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a94:	e003      	b.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007aaa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007aae:	2300      	movs	r3, #0
 8007ab0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007ab4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007ab8:	460b      	mov	r3, r1
 8007aba:	4313      	orrs	r3, r2
 8007abc:	d053      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007ac6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007aca:	d035      	beq.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007acc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ad0:	d82e      	bhi.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007ad2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007ad6:	d031      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007ad8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007adc:	d828      	bhi.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007ade:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ae2:	d01a      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007ae4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ae8:	d822      	bhi.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d003      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007aee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007af2:	d007      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007af4:	e01c      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007af6:	4b32      	ldr	r3, [pc, #200]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afa:	4a31      	ldr	r2, [pc, #196]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007afc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b02:	e01c      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b08:	3308      	adds	r3, #8
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f002 fa55 	bl	8009fbc <RCCEx_PLL2_Config>
 8007b12:	4603      	mov	r3, r0
 8007b14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007b18:	e011      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b1e:	3328      	adds	r3, #40	@ 0x28
 8007b20:	2100      	movs	r1, #0
 8007b22:	4618      	mov	r0, r3
 8007b24:	f002 fafc 	bl	800a120 <RCCEx_PLL3_Config>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b2e:	e006      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b36:	e002      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007b38:	bf00      	nop
 8007b3a:	e000      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007b3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10b      	bne.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007b46:	4b1e      	ldr	r3, [pc, #120]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b4a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007b56:	4a1a      	ldr	r2, [pc, #104]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b58:	430b      	orrs	r3, r1
 8007b5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b5c:	e003      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007b72:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007b76:	2300      	movs	r3, #0
 8007b78:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007b7c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007b80:	460b      	mov	r3, r1
 8007b82:	4313      	orrs	r3, r2
 8007b84:	d056      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007b8e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b92:	d038      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007b94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b98:	d831      	bhi.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b9a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b9e:	d034      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007ba0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007ba4:	d82b      	bhi.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007ba6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007baa:	d01d      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007bac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007bb0:	d825      	bhi.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d006      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007bb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007bba:	d00a      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007bbc:	e01f      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007bbe:	bf00      	nop
 8007bc0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bc4:	4ba2      	ldr	r3, [pc, #648]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc8:	4aa1      	ldr	r2, [pc, #644]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007bd0:	e01c      	b.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd6:	3308      	adds	r3, #8
 8007bd8:	2100      	movs	r1, #0
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f002 f9ee 	bl	8009fbc <RCCEx_PLL2_Config>
 8007be0:	4603      	mov	r3, r0
 8007be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007be6:	e011      	b.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bec:	3328      	adds	r3, #40	@ 0x28
 8007bee:	2100      	movs	r1, #0
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f002 fa95 	bl	800a120 <RCCEx_PLL3_Config>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007bfc:	e006      	b.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c04:	e002      	b.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007c06:	bf00      	nop
 8007c08:	e000      	b.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10b      	bne.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007c14:	4b8e      	ldr	r3, [pc, #568]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c18:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007c24:	4a8a      	ldr	r2, [pc, #552]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c26:	430b      	orrs	r3, r1
 8007c28:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c2a:	e003      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007c40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007c44:	2300      	movs	r3, #0
 8007c46:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007c4a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4313      	orrs	r3, r2
 8007c52:	d03a      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c5a:	2b30      	cmp	r3, #48	@ 0x30
 8007c5c:	d01f      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007c5e:	2b30      	cmp	r3, #48	@ 0x30
 8007c60:	d819      	bhi.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007c62:	2b20      	cmp	r3, #32
 8007c64:	d00c      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007c66:	2b20      	cmp	r3, #32
 8007c68:	d815      	bhi.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d019      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007c6e:	2b10      	cmp	r3, #16
 8007c70:	d111      	bne.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c72:	4b77      	ldr	r3, [pc, #476]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c76:	4a76      	ldr	r2, [pc, #472]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007c7e:	e011      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c84:	3308      	adds	r3, #8
 8007c86:	2102      	movs	r1, #2
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f002 f997 	bl	8009fbc <RCCEx_PLL2_Config>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007c94:	e006      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c9c:	e002      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007c9e:	bf00      	nop
 8007ca0:	e000      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007ca2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10a      	bne.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007cac:	4b68      	ldr	r3, [pc, #416]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cb0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cba:	4a65      	ldr	r2, [pc, #404]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cbc:	430b      	orrs	r3, r1
 8007cbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007cc0:	e003      	b.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007cd6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007cda:	2300      	movs	r3, #0
 8007cdc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007ce0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	d051      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cf0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007cf4:	d035      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007cf6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007cfa:	d82e      	bhi.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007cfc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d00:	d031      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007d02:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d06:	d828      	bhi.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007d08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d0c:	d01a      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007d0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d12:	d822      	bhi.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d003      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007d18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d1c:	d007      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007d1e:	e01c      	b.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d20:	4b4b      	ldr	r3, [pc, #300]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d24:	4a4a      	ldr	r2, [pc, #296]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d2c:	e01c      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d32:	3308      	adds	r3, #8
 8007d34:	2100      	movs	r1, #0
 8007d36:	4618      	mov	r0, r3
 8007d38:	f002 f940 	bl	8009fbc <RCCEx_PLL2_Config>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d42:	e011      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d48:	3328      	adds	r3, #40	@ 0x28
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f002 f9e7 	bl	800a120 <RCCEx_PLL3_Config>
 8007d52:	4603      	mov	r3, r0
 8007d54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d58:	e006      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d60:	e002      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007d62:	bf00      	nop
 8007d64:	e000      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007d66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10a      	bne.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007d70:	4b37      	ldr	r3, [pc, #220]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d74:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d7e:	4a34      	ldr	r2, [pc, #208]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d80:	430b      	orrs	r3, r1
 8007d82:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d84:	e003      	b.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d96:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007d9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007d9e:	2300      	movs	r3, #0
 8007da0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007da4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007da8:	460b      	mov	r3, r1
 8007daa:	4313      	orrs	r3, r2
 8007dac:	d056      	beq.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007db2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007db4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007db8:	d033      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007dba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007dbe:	d82c      	bhi.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007dc0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007dc4:	d02f      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007dc6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007dca:	d826      	bhi.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007dcc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007dd0:	d02b      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007dd2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007dd6:	d820      	bhi.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007dd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ddc:	d012      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007dde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007de2:	d81a      	bhi.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d022      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dec:	d115      	bne.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df2:	3308      	adds	r3, #8
 8007df4:	2101      	movs	r1, #1
 8007df6:	4618      	mov	r0, r3
 8007df8:	f002 f8e0 	bl	8009fbc <RCCEx_PLL2_Config>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007e02:	e015      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e08:	3328      	adds	r3, #40	@ 0x28
 8007e0a:	2101      	movs	r1, #1
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f002 f987 	bl	800a120 <RCCEx_PLL3_Config>
 8007e12:	4603      	mov	r3, r0
 8007e14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007e18:	e00a      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e20:	e006      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e22:	bf00      	nop
 8007e24:	e004      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e26:	bf00      	nop
 8007e28:	e002      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e2a:	bf00      	nop
 8007e2c:	e000      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d10d      	bne.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007e38:	4b05      	ldr	r3, [pc, #20]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e3c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e46:	4a02      	ldr	r2, [pc, #8]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e48:	430b      	orrs	r3, r1
 8007e4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e4c:	e006      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007e4e:	bf00      	nop
 8007e50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e64:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007e68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e72:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007e76:	460b      	mov	r3, r1
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	d055      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007e84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e88:	d033      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007e8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e8e:	d82c      	bhi.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e94:	d02f      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e9a:	d826      	bhi.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e9c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ea0:	d02b      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007ea2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ea6:	d820      	bhi.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007ea8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007eac:	d012      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007eae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007eb2:	d81a      	bhi.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d022      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007eb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ebc:	d115      	bne.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec2:	3308      	adds	r3, #8
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f002 f878 	bl	8009fbc <RCCEx_PLL2_Config>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007ed2:	e015      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed8:	3328      	adds	r3, #40	@ 0x28
 8007eda:	2101      	movs	r1, #1
 8007edc:	4618      	mov	r0, r3
 8007ede:	f002 f91f 	bl	800a120 <RCCEx_PLL3_Config>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007ee8:	e00a      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ef0:	e006      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007ef2:	bf00      	nop
 8007ef4:	e004      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007ef6:	bf00      	nop
 8007ef8:	e002      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007efa:	bf00      	nop
 8007efc:	e000      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007efe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10b      	bne.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007f08:	4ba3      	ldr	r3, [pc, #652]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f0c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007f18:	4a9f      	ldr	r2, [pc, #636]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f1a:	430b      	orrs	r3, r1
 8007f1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f1e:	e003      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f30:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007f34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007f38:	2300      	movs	r3, #0
 8007f3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007f3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007f42:	460b      	mov	r3, r1
 8007f44:	4313      	orrs	r3, r2
 8007f46:	d037      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f52:	d00e      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007f54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f58:	d816      	bhi.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d018      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007f5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f62:	d111      	bne.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f64:	4b8c      	ldr	r3, [pc, #560]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f68:	4a8b      	ldr	r2, [pc, #556]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007f70:	e00f      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f76:	3308      	adds	r3, #8
 8007f78:	2101      	movs	r1, #1
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f002 f81e 	bl	8009fbc <RCCEx_PLL2_Config>
 8007f80:	4603      	mov	r3, r0
 8007f82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007f86:	e004      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f8e:	e000      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10a      	bne.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f9a:	4b7f      	ldr	r3, [pc, #508]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f9e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fa8:	4a7b      	ldr	r2, [pc, #492]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007faa:	430b      	orrs	r3, r1
 8007fac:	6513      	str	r3, [r2, #80]	@ 0x50
 8007fae:	e003      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007fc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007fc8:	2300      	movs	r3, #0
 8007fca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007fce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	d039      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fde:	2b03      	cmp	r3, #3
 8007fe0:	d81c      	bhi.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe8:	08008025 	.word	0x08008025
 8007fec:	08007ff9 	.word	0x08007ff9
 8007ff0:	08008007 	.word	0x08008007
 8007ff4:	08008025 	.word	0x08008025
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ff8:	4b67      	ldr	r3, [pc, #412]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ffc:	4a66      	ldr	r2, [pc, #408]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ffe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008002:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008004:	e00f      	b.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800800a:	3308      	adds	r3, #8
 800800c:	2102      	movs	r1, #2
 800800e:	4618      	mov	r0, r3
 8008010:	f001 ffd4 	bl	8009fbc <RCCEx_PLL2_Config>
 8008014:	4603      	mov	r3, r0
 8008016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800801a:	e004      	b.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008022:	e000      	b.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008024:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008026:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10a      	bne.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800802e:	4b5a      	ldr	r3, [pc, #360]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008032:	f023 0103 	bic.w	r1, r3, #3
 8008036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800803a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800803c:	4a56      	ldr	r2, [pc, #344]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800803e:	430b      	orrs	r3, r1
 8008040:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008042:	e003      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008044:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008048:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800804c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008054:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008058:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800805c:	2300      	movs	r3, #0
 800805e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008062:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008066:	460b      	mov	r3, r1
 8008068:	4313      	orrs	r3, r2
 800806a:	f000 809f 	beq.w	80081ac <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800806e:	4b4b      	ldr	r3, [pc, #300]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a4a      	ldr	r2, [pc, #296]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008074:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008078:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800807a:	f7f9 ff95 	bl	8001fa8 <HAL_GetTick>
 800807e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008082:	e00b      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008084:	f7f9 ff90 	bl	8001fa8 <HAL_GetTick>
 8008088:	4602      	mov	r2, r0
 800808a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	2b64      	cmp	r3, #100	@ 0x64
 8008092:	d903      	bls.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008094:	2303      	movs	r3, #3
 8008096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800809a:	e005      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800809c:	4b3f      	ldr	r3, [pc, #252]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d0ed      	beq.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80080a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d179      	bne.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80080b0:	4b39      	ldr	r3, [pc, #228]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080b2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80080b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80080bc:	4053      	eors	r3, r2
 80080be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d015      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80080c6:	4b34      	ldr	r3, [pc, #208]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080ce:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80080d2:	4b31      	ldr	r3, [pc, #196]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080d6:	4a30      	ldr	r2, [pc, #192]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080dc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80080de:	4b2e      	ldr	r3, [pc, #184]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080e2:	4a2d      	ldr	r2, [pc, #180]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080e8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80080ea:	4a2b      	ldr	r2, [pc, #172]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80080f0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80080f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80080fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080fe:	d118      	bne.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008100:	f7f9 ff52 	bl	8001fa8 <HAL_GetTick>
 8008104:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008108:	e00d      	b.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800810a:	f7f9 ff4d 	bl	8001fa8 <HAL_GetTick>
 800810e:	4602      	mov	r2, r0
 8008110:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008114:	1ad2      	subs	r2, r2, r3
 8008116:	f241 3388 	movw	r3, #5000	@ 0x1388
 800811a:	429a      	cmp	r2, r3
 800811c:	d903      	bls.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800811e:	2303      	movs	r3, #3
 8008120:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8008124:	e005      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008126:	4b1c      	ldr	r3, [pc, #112]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800812a:	f003 0302 	and.w	r3, r3, #2
 800812e:	2b00      	cmp	r3, #0
 8008130:	d0eb      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008132:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008136:	2b00      	cmp	r3, #0
 8008138:	d129      	bne.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800813a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800813e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008142:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008146:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800814a:	d10e      	bne.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800814c:	4b12      	ldr	r3, [pc, #72]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008158:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800815c:	091a      	lsrs	r2, r3, #4
 800815e:	4b10      	ldr	r3, [pc, #64]	@ (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008160:	4013      	ands	r3, r2
 8008162:	4a0d      	ldr	r2, [pc, #52]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008164:	430b      	orrs	r3, r1
 8008166:	6113      	str	r3, [r2, #16]
 8008168:	e005      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800816a:	4b0b      	ldr	r3, [pc, #44]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	4a0a      	ldr	r2, [pc, #40]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008170:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008174:	6113      	str	r3, [r2, #16]
 8008176:	4b08      	ldr	r3, [pc, #32]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008178:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800817a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800817e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008186:	4a04      	ldr	r2, [pc, #16]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008188:	430b      	orrs	r3, r1
 800818a:	6713      	str	r3, [r2, #112]	@ 0x70
 800818c:	e00e      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800818e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008192:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008196:	e009      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008198:	58024400 	.word	0x58024400
 800819c:	58024800 	.word	0x58024800
 80081a0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80081ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b4:	f002 0301 	and.w	r3, r2, #1
 80081b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80081bc:	2300      	movs	r3, #0
 80081be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80081c2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80081c6:	460b      	mov	r3, r1
 80081c8:	4313      	orrs	r3, r2
 80081ca:	f000 8089 	beq.w	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80081ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80081d4:	2b28      	cmp	r3, #40	@ 0x28
 80081d6:	d86b      	bhi.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80081d8:	a201      	add	r2, pc, #4	@ (adr r2, 80081e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80081da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081de:	bf00      	nop
 80081e0:	080082b9 	.word	0x080082b9
 80081e4:	080082b1 	.word	0x080082b1
 80081e8:	080082b1 	.word	0x080082b1
 80081ec:	080082b1 	.word	0x080082b1
 80081f0:	080082b1 	.word	0x080082b1
 80081f4:	080082b1 	.word	0x080082b1
 80081f8:	080082b1 	.word	0x080082b1
 80081fc:	080082b1 	.word	0x080082b1
 8008200:	08008285 	.word	0x08008285
 8008204:	080082b1 	.word	0x080082b1
 8008208:	080082b1 	.word	0x080082b1
 800820c:	080082b1 	.word	0x080082b1
 8008210:	080082b1 	.word	0x080082b1
 8008214:	080082b1 	.word	0x080082b1
 8008218:	080082b1 	.word	0x080082b1
 800821c:	080082b1 	.word	0x080082b1
 8008220:	0800829b 	.word	0x0800829b
 8008224:	080082b1 	.word	0x080082b1
 8008228:	080082b1 	.word	0x080082b1
 800822c:	080082b1 	.word	0x080082b1
 8008230:	080082b1 	.word	0x080082b1
 8008234:	080082b1 	.word	0x080082b1
 8008238:	080082b1 	.word	0x080082b1
 800823c:	080082b1 	.word	0x080082b1
 8008240:	080082b9 	.word	0x080082b9
 8008244:	080082b1 	.word	0x080082b1
 8008248:	080082b1 	.word	0x080082b1
 800824c:	080082b1 	.word	0x080082b1
 8008250:	080082b1 	.word	0x080082b1
 8008254:	080082b1 	.word	0x080082b1
 8008258:	080082b1 	.word	0x080082b1
 800825c:	080082b1 	.word	0x080082b1
 8008260:	080082b9 	.word	0x080082b9
 8008264:	080082b1 	.word	0x080082b1
 8008268:	080082b1 	.word	0x080082b1
 800826c:	080082b1 	.word	0x080082b1
 8008270:	080082b1 	.word	0x080082b1
 8008274:	080082b1 	.word	0x080082b1
 8008278:	080082b1 	.word	0x080082b1
 800827c:	080082b1 	.word	0x080082b1
 8008280:	080082b9 	.word	0x080082b9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008288:	3308      	adds	r3, #8
 800828a:	2101      	movs	r1, #1
 800828c:	4618      	mov	r0, r3
 800828e:	f001 fe95 	bl	8009fbc <RCCEx_PLL2_Config>
 8008292:	4603      	mov	r3, r0
 8008294:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008298:	e00f      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800829a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800829e:	3328      	adds	r3, #40	@ 0x28
 80082a0:	2101      	movs	r1, #1
 80082a2:	4618      	mov	r0, r3
 80082a4:	f001 ff3c 	bl	800a120 <RCCEx_PLL3_Config>
 80082a8:	4603      	mov	r3, r0
 80082aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80082ae:	e004      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082b6:	e000      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80082b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10a      	bne.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80082c2:	4bbf      	ldr	r3, [pc, #764]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80082c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082c6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80082ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082d0:	4abb      	ldr	r2, [pc, #748]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80082d2:	430b      	orrs	r3, r1
 80082d4:	6553      	str	r3, [r2, #84]	@ 0x54
 80082d6:	e003      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80082e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e8:	f002 0302 	and.w	r3, r2, #2
 80082ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80082f0:	2300      	movs	r3, #0
 80082f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80082f6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80082fa:	460b      	mov	r3, r1
 80082fc:	4313      	orrs	r3, r2
 80082fe:	d041      	beq.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008304:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008306:	2b05      	cmp	r3, #5
 8008308:	d824      	bhi.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800830a:	a201      	add	r2, pc, #4	@ (adr r2, 8008310 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800830c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008310:	0800835d 	.word	0x0800835d
 8008314:	08008329 	.word	0x08008329
 8008318:	0800833f 	.word	0x0800833f
 800831c:	0800835d 	.word	0x0800835d
 8008320:	0800835d 	.word	0x0800835d
 8008324:	0800835d 	.word	0x0800835d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800832c:	3308      	adds	r3, #8
 800832e:	2101      	movs	r1, #1
 8008330:	4618      	mov	r0, r3
 8008332:	f001 fe43 	bl	8009fbc <RCCEx_PLL2_Config>
 8008336:	4603      	mov	r3, r0
 8008338:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800833c:	e00f      	b.n	800835e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800833e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008342:	3328      	adds	r3, #40	@ 0x28
 8008344:	2101      	movs	r1, #1
 8008346:	4618      	mov	r0, r3
 8008348:	f001 feea 	bl	800a120 <RCCEx_PLL3_Config>
 800834c:	4603      	mov	r3, r0
 800834e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008352:	e004      	b.n	800835e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800835a:	e000      	b.n	800835e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800835c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800835e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008362:	2b00      	cmp	r3, #0
 8008364:	d10a      	bne.n	800837c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008366:	4b96      	ldr	r3, [pc, #600]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800836a:	f023 0107 	bic.w	r1, r3, #7
 800836e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008372:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008374:	4a92      	ldr	r2, [pc, #584]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008376:	430b      	orrs	r3, r1
 8008378:	6553      	str	r3, [r2, #84]	@ 0x54
 800837a:	e003      	b.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800837c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008380:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838c:	f002 0304 	and.w	r3, r2, #4
 8008390:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008394:	2300      	movs	r3, #0
 8008396:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800839a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800839e:	460b      	mov	r3, r1
 80083a0:	4313      	orrs	r3, r2
 80083a2:	d044      	beq.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80083a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083ac:	2b05      	cmp	r3, #5
 80083ae:	d825      	bhi.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80083b0:	a201      	add	r2, pc, #4	@ (adr r2, 80083b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80083b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b6:	bf00      	nop
 80083b8:	08008405 	.word	0x08008405
 80083bc:	080083d1 	.word	0x080083d1
 80083c0:	080083e7 	.word	0x080083e7
 80083c4:	08008405 	.word	0x08008405
 80083c8:	08008405 	.word	0x08008405
 80083cc:	08008405 	.word	0x08008405
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083d4:	3308      	adds	r3, #8
 80083d6:	2101      	movs	r1, #1
 80083d8:	4618      	mov	r0, r3
 80083da:	f001 fdef 	bl	8009fbc <RCCEx_PLL2_Config>
 80083de:	4603      	mov	r3, r0
 80083e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80083e4:	e00f      	b.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ea:	3328      	adds	r3, #40	@ 0x28
 80083ec:	2101      	movs	r1, #1
 80083ee:	4618      	mov	r0, r3
 80083f0:	f001 fe96 	bl	800a120 <RCCEx_PLL3_Config>
 80083f4:	4603      	mov	r3, r0
 80083f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80083fa:	e004      	b.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008402:	e000      	b.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008404:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008406:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800840a:	2b00      	cmp	r3, #0
 800840c:	d10b      	bne.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800840e:	4b6c      	ldr	r3, [pc, #432]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008412:	f023 0107 	bic.w	r1, r3, #7
 8008416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800841a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800841e:	4a68      	ldr	r2, [pc, #416]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008420:	430b      	orrs	r3, r1
 8008422:	6593      	str	r3, [r2, #88]	@ 0x58
 8008424:	e003      	b.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008426:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800842a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800842e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008436:	f002 0320 	and.w	r3, r2, #32
 800843a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800843e:	2300      	movs	r3, #0
 8008440:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008444:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008448:	460b      	mov	r3, r1
 800844a:	4313      	orrs	r3, r2
 800844c:	d055      	beq.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800844e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008456:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800845a:	d033      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800845c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008460:	d82c      	bhi.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008466:	d02f      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800846c:	d826      	bhi.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800846e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008472:	d02b      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008474:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008478:	d820      	bhi.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800847a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800847e:	d012      	beq.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008480:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008484:	d81a      	bhi.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008486:	2b00      	cmp	r3, #0
 8008488:	d022      	beq.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800848a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800848e:	d115      	bne.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008494:	3308      	adds	r3, #8
 8008496:	2100      	movs	r1, #0
 8008498:	4618      	mov	r0, r3
 800849a:	f001 fd8f 	bl	8009fbc <RCCEx_PLL2_Config>
 800849e:	4603      	mov	r3, r0
 80084a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80084a4:	e015      	b.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80084a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084aa:	3328      	adds	r3, #40	@ 0x28
 80084ac:	2102      	movs	r1, #2
 80084ae:	4618      	mov	r0, r3
 80084b0:	f001 fe36 	bl	800a120 <RCCEx_PLL3_Config>
 80084b4:	4603      	mov	r3, r0
 80084b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80084ba:	e00a      	b.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084c2:	e006      	b.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80084c4:	bf00      	nop
 80084c6:	e004      	b.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80084c8:	bf00      	nop
 80084ca:	e002      	b.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80084cc:	bf00      	nop
 80084ce:	e000      	b.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80084d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10b      	bne.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80084da:	4b39      	ldr	r3, [pc, #228]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084de:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80084e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084ea:	4a35      	ldr	r2, [pc, #212]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084ec:	430b      	orrs	r3, r1
 80084ee:	6553      	str	r3, [r2, #84]	@ 0x54
 80084f0:	e003      	b.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80084fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008502:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008506:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800850a:	2300      	movs	r3, #0
 800850c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008510:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008514:	460b      	mov	r3, r1
 8008516:	4313      	orrs	r3, r2
 8008518:	d058      	beq.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800851a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800851e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008522:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008526:	d033      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008528:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800852c:	d82c      	bhi.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800852e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008532:	d02f      	beq.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008534:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008538:	d826      	bhi.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800853a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800853e:	d02b      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008540:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008544:	d820      	bhi.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008546:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800854a:	d012      	beq.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800854c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008550:	d81a      	bhi.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008552:	2b00      	cmp	r3, #0
 8008554:	d022      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008556:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800855a:	d115      	bne.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800855c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008560:	3308      	adds	r3, #8
 8008562:	2100      	movs	r1, #0
 8008564:	4618      	mov	r0, r3
 8008566:	f001 fd29 	bl	8009fbc <RCCEx_PLL2_Config>
 800856a:	4603      	mov	r3, r0
 800856c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008570:	e015      	b.n	800859e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008576:	3328      	adds	r3, #40	@ 0x28
 8008578:	2102      	movs	r1, #2
 800857a:	4618      	mov	r0, r3
 800857c:	f001 fdd0 	bl	800a120 <RCCEx_PLL3_Config>
 8008580:	4603      	mov	r3, r0
 8008582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008586:	e00a      	b.n	800859e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800858e:	e006      	b.n	800859e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008590:	bf00      	nop
 8008592:	e004      	b.n	800859e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008594:	bf00      	nop
 8008596:	e002      	b.n	800859e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008598:	bf00      	nop
 800859a:	e000      	b.n	800859e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800859c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800859e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10e      	bne.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80085a6:	4b06      	ldr	r3, [pc, #24]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085aa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80085ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80085b6:	4a02      	ldr	r2, [pc, #8]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085b8:	430b      	orrs	r3, r1
 80085ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80085bc:	e006      	b.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80085be:	bf00      	nop
 80085c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80085cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80085d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80085dc:	2300      	movs	r3, #0
 80085de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80085e2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80085e6:	460b      	mov	r3, r1
 80085e8:	4313      	orrs	r3, r2
 80085ea:	d055      	beq.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80085ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80085f4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80085f8:	d033      	beq.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80085fa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80085fe:	d82c      	bhi.n	800865a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008600:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008604:	d02f      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008606:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800860a:	d826      	bhi.n	800865a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800860c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008610:	d02b      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008612:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008616:	d820      	bhi.n	800865a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008618:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800861c:	d012      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800861e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008622:	d81a      	bhi.n	800865a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008624:	2b00      	cmp	r3, #0
 8008626:	d022      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008628:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800862c:	d115      	bne.n	800865a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800862e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008632:	3308      	adds	r3, #8
 8008634:	2100      	movs	r1, #0
 8008636:	4618      	mov	r0, r3
 8008638:	f001 fcc0 	bl	8009fbc <RCCEx_PLL2_Config>
 800863c:	4603      	mov	r3, r0
 800863e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008642:	e015      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008648:	3328      	adds	r3, #40	@ 0x28
 800864a:	2102      	movs	r1, #2
 800864c:	4618      	mov	r0, r3
 800864e:	f001 fd67 	bl	800a120 <RCCEx_PLL3_Config>
 8008652:	4603      	mov	r3, r0
 8008654:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008658:	e00a      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008660:	e006      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008662:	bf00      	nop
 8008664:	e004      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008666:	bf00      	nop
 8008668:	e002      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800866a:	bf00      	nop
 800866c:	e000      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800866e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008670:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008674:	2b00      	cmp	r3, #0
 8008676:	d10b      	bne.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008678:	4ba1      	ldr	r3, [pc, #644]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800867a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800867c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008684:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008688:	4a9d      	ldr	r2, [pc, #628]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800868a:	430b      	orrs	r3, r1
 800868c:	6593      	str	r3, [r2, #88]	@ 0x58
 800868e:	e003      	b.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008690:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008694:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800869c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a0:	f002 0308 	and.w	r3, r2, #8
 80086a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80086a8:	2300      	movs	r3, #0
 80086aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80086ae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80086b2:	460b      	mov	r3, r1
 80086b4:	4313      	orrs	r3, r2
 80086b6:	d01e      	beq.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80086b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086c4:	d10c      	bne.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80086c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ca:	3328      	adds	r3, #40	@ 0x28
 80086cc:	2102      	movs	r1, #2
 80086ce:	4618      	mov	r0, r3
 80086d0:	f001 fd26 	bl	800a120 <RCCEx_PLL3_Config>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d002      	beq.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80086e0:	4b87      	ldr	r3, [pc, #540]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086e4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80086e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086f0:	4a83      	ldr	r2, [pc, #524]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086f2:	430b      	orrs	r3, r1
 80086f4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80086f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fe:	f002 0310 	and.w	r3, r2, #16
 8008702:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008706:	2300      	movs	r3, #0
 8008708:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800870c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008710:	460b      	mov	r3, r1
 8008712:	4313      	orrs	r3, r2
 8008714:	d01e      	beq.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800871a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800871e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008722:	d10c      	bne.n	800873e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008728:	3328      	adds	r3, #40	@ 0x28
 800872a:	2102      	movs	r1, #2
 800872c:	4618      	mov	r0, r3
 800872e:	f001 fcf7 	bl	800a120 <RCCEx_PLL3_Config>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d002      	beq.n	800873e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800873e:	4b70      	ldr	r3, [pc, #448]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008742:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800874a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800874e:	4a6c      	ldr	r2, [pc, #432]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008750:	430b      	orrs	r3, r1
 8008752:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008760:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008764:	2300      	movs	r3, #0
 8008766:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800876a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800876e:	460b      	mov	r3, r1
 8008770:	4313      	orrs	r3, r2
 8008772:	d03e      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008778:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800877c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008780:	d022      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008782:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008786:	d81b      	bhi.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800878c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008790:	d00b      	beq.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008792:	e015      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008798:	3308      	adds	r3, #8
 800879a:	2100      	movs	r1, #0
 800879c:	4618      	mov	r0, r3
 800879e:	f001 fc0d 	bl	8009fbc <RCCEx_PLL2_Config>
 80087a2:	4603      	mov	r3, r0
 80087a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80087a8:	e00f      	b.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80087aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ae:	3328      	adds	r3, #40	@ 0x28
 80087b0:	2102      	movs	r1, #2
 80087b2:	4618      	mov	r0, r3
 80087b4:	f001 fcb4 	bl	800a120 <RCCEx_PLL3_Config>
 80087b8:	4603      	mov	r3, r0
 80087ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80087be:	e004      	b.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087c0:	2301      	movs	r3, #1
 80087c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087c6:	e000      	b.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80087c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10b      	bne.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80087d2:	4b4b      	ldr	r3, [pc, #300]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087d6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80087da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80087e2:	4a47      	ldr	r2, [pc, #284]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087e4:	430b      	orrs	r3, r1
 80087e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80087e8:	e003      	b.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80087f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80087fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008800:	2300      	movs	r3, #0
 8008802:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008804:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008808:	460b      	mov	r3, r1
 800880a:	4313      	orrs	r3, r2
 800880c:	d03b      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800880e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008816:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800881a:	d01f      	beq.n	800885c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800881c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008820:	d818      	bhi.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008822:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008826:	d003      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008828:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800882c:	d007      	beq.n	800883e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800882e:	e011      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008830:	4b33      	ldr	r3, [pc, #204]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008834:	4a32      	ldr	r2, [pc, #200]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008836:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800883a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800883c:	e00f      	b.n	800885e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800883e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008842:	3328      	adds	r3, #40	@ 0x28
 8008844:	2101      	movs	r1, #1
 8008846:	4618      	mov	r0, r3
 8008848:	f001 fc6a 	bl	800a120 <RCCEx_PLL3_Config>
 800884c:	4603      	mov	r3, r0
 800884e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008852:	e004      	b.n	800885e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800885a:	e000      	b.n	800885e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800885c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800885e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008862:	2b00      	cmp	r3, #0
 8008864:	d10b      	bne.n	800887e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008866:	4b26      	ldr	r3, [pc, #152]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800886a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800886e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008876:	4a22      	ldr	r2, [pc, #136]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008878:	430b      	orrs	r3, r1
 800887a:	6553      	str	r3, [r2, #84]	@ 0x54
 800887c:	e003      	b.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800887e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008882:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800888a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008892:	673b      	str	r3, [r7, #112]	@ 0x70
 8008894:	2300      	movs	r3, #0
 8008896:	677b      	str	r3, [r7, #116]	@ 0x74
 8008898:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800889c:	460b      	mov	r3, r1
 800889e:	4313      	orrs	r3, r2
 80088a0:	d034      	beq.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80088a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d003      	beq.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80088ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088b0:	d007      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80088b2:	e011      	b.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088b4:	4b12      	ldr	r3, [pc, #72]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b8:	4a11      	ldr	r2, [pc, #68]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80088c0:	e00e      	b.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80088c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088c6:	3308      	adds	r3, #8
 80088c8:	2102      	movs	r1, #2
 80088ca:	4618      	mov	r0, r3
 80088cc:	f001 fb76 	bl	8009fbc <RCCEx_PLL2_Config>
 80088d0:	4603      	mov	r3, r0
 80088d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80088d6:	e003      	b.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80088de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10d      	bne.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80088e8:	4b05      	ldr	r3, [pc, #20]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088ec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80088f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088f6:	4a02      	ldr	r2, [pc, #8]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088f8:	430b      	orrs	r3, r1
 80088fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80088fc:	e006      	b.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80088fe:	bf00      	nop
 8008900:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008904:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008908:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800890c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008914:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008918:	66bb      	str	r3, [r7, #104]	@ 0x68
 800891a:	2300      	movs	r3, #0
 800891c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800891e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008922:	460b      	mov	r3, r1
 8008924:	4313      	orrs	r3, r2
 8008926:	d00c      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800892c:	3328      	adds	r3, #40	@ 0x28
 800892e:	2102      	movs	r1, #2
 8008930:	4618      	mov	r0, r3
 8008932:	f001 fbf5 	bl	800a120 <RCCEx_PLL3_Config>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d002      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800894e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008950:	2300      	movs	r3, #0
 8008952:	667b      	str	r3, [r7, #100]	@ 0x64
 8008954:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008958:	460b      	mov	r3, r1
 800895a:	4313      	orrs	r3, r2
 800895c:	d038      	beq.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800895e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008962:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008966:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800896a:	d018      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800896c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008970:	d811      	bhi.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008972:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008976:	d014      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800897c:	d80b      	bhi.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800897e:	2b00      	cmp	r3, #0
 8008980:	d011      	beq.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008982:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008986:	d106      	bne.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008988:	4bc3      	ldr	r3, [pc, #780]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800898a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800898c:	4ac2      	ldr	r2, [pc, #776]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800898e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008992:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008994:	e008      	b.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800899c:	e004      	b.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800899e:	bf00      	nop
 80089a0:	e002      	b.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80089a2:	bf00      	nop
 80089a4:	e000      	b.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80089a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d10b      	bne.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80089b0:	4bb9      	ldr	r3, [pc, #740]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089b4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80089b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089c0:	4ab5      	ldr	r2, [pc, #724]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089c2:	430b      	orrs	r3, r1
 80089c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80089c6:	e003      	b.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80089d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80089dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80089de:	2300      	movs	r3, #0
 80089e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089e2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80089e6:	460b      	mov	r3, r1
 80089e8:	4313      	orrs	r3, r2
 80089ea:	d009      	beq.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80089ec:	4baa      	ldr	r3, [pc, #680]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80089f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089fa:	4aa7      	ldr	r2, [pc, #668]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089fc:	430b      	orrs	r3, r1
 80089fe:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a08:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008a0c:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a0e:	2300      	movs	r3, #0
 8008a10:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a12:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008a16:	460b      	mov	r3, r1
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	d00a      	beq.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008a1c:	4b9e      	ldr	r3, [pc, #632]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008a2c:	4a9a      	ldr	r2, [pc, #616]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a2e:	430b      	orrs	r3, r1
 8008a30:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a40:	2300      	movs	r3, #0
 8008a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a44:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008a48:	460b      	mov	r3, r1
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	d009      	beq.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008a4e:	4b92      	ldr	r3, [pc, #584]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a52:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a5c:	4a8e      	ldr	r2, [pc, #568]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a5e:	430b      	orrs	r3, r1
 8008a60:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008a6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a70:	2300      	movs	r3, #0
 8008a72:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a74:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	d00e      	beq.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008a7e:	4b86      	ldr	r3, [pc, #536]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	4a85      	ldr	r2, [pc, #532]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a84:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a88:	6113      	str	r3, [r2, #16]
 8008a8a:	4b83      	ldr	r3, [pc, #524]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a8c:	6919      	ldr	r1, [r3, #16]
 8008a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a92:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008a96:	4a80      	ldr	r2, [pc, #512]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a98:	430b      	orrs	r3, r1
 8008a9a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008aaa:	2300      	movs	r3, #0
 8008aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008aae:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	d009      	beq.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008ab8:	4b77      	ldr	r3, [pc, #476]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008abc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ac6:	4a74      	ldr	r2, [pc, #464]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ac8:	430b      	orrs	r3, r1
 8008aca:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008ad8:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ada:	2300      	movs	r3, #0
 8008adc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ade:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	d00a      	beq.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008ae8:	4b6b      	ldr	r3, [pc, #428]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aec:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008af8:	4a67      	ldr	r2, [pc, #412]	@ (8008c98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008afa:	430b      	orrs	r3, r1
 8008afc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b06:	2100      	movs	r1, #0
 8008b08:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008b0a:	f003 0301 	and.w	r3, r3, #1
 8008b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b10:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008b14:	460b      	mov	r3, r1
 8008b16:	4313      	orrs	r3, r2
 8008b18:	d011      	beq.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b1e:	3308      	adds	r3, #8
 8008b20:	2100      	movs	r1, #0
 8008b22:	4618      	mov	r0, r3
 8008b24:	f001 fa4a 	bl	8009fbc <RCCEx_PLL2_Config>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d003      	beq.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b46:	2100      	movs	r1, #0
 8008b48:	6239      	str	r1, [r7, #32]
 8008b4a:	f003 0302 	and.w	r3, r3, #2
 8008b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b50:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008b54:	460b      	mov	r3, r1
 8008b56:	4313      	orrs	r3, r2
 8008b58:	d011      	beq.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b5e:	3308      	adds	r3, #8
 8008b60:	2101      	movs	r1, #1
 8008b62:	4618      	mov	r0, r3
 8008b64:	f001 fa2a 	bl	8009fbc <RCCEx_PLL2_Config>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d003      	beq.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b86:	2100      	movs	r1, #0
 8008b88:	61b9      	str	r1, [r7, #24]
 8008b8a:	f003 0304 	and.w	r3, r3, #4
 8008b8e:	61fb      	str	r3, [r7, #28]
 8008b90:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008b94:	460b      	mov	r3, r1
 8008b96:	4313      	orrs	r3, r2
 8008b98:	d011      	beq.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b9e:	3308      	adds	r3, #8
 8008ba0:	2102      	movs	r1, #2
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f001 fa0a 	bl	8009fbc <RCCEx_PLL2_Config>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d003      	beq.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	6139      	str	r1, [r7, #16]
 8008bca:	f003 0308 	and.w	r3, r3, #8
 8008bce:	617b      	str	r3, [r7, #20]
 8008bd0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	d011      	beq.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bde:	3328      	adds	r3, #40	@ 0x28
 8008be0:	2100      	movs	r1, #0
 8008be2:	4618      	mov	r0, r3
 8008be4:	f001 fa9c 	bl	800a120 <RCCEx_PLL3_Config>
 8008be8:	4603      	mov	r3, r0
 8008bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d003      	beq.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c06:	2100      	movs	r1, #0
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	f003 0310 	and.w	r3, r3, #16
 8008c0e:	60fb      	str	r3, [r7, #12]
 8008c10:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008c14:	460b      	mov	r3, r1
 8008c16:	4313      	orrs	r3, r2
 8008c18:	d011      	beq.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c1e:	3328      	adds	r3, #40	@ 0x28
 8008c20:	2101      	movs	r1, #1
 8008c22:	4618      	mov	r0, r3
 8008c24:	f001 fa7c 	bl	800a120 <RCCEx_PLL3_Config>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d003      	beq.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c46:	2100      	movs	r1, #0
 8008c48:	6039      	str	r1, [r7, #0]
 8008c4a:	f003 0320 	and.w	r3, r3, #32
 8008c4e:	607b      	str	r3, [r7, #4]
 8008c50:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008c54:	460b      	mov	r3, r1
 8008c56:	4313      	orrs	r3, r2
 8008c58:	d011      	beq.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c5e:	3328      	adds	r3, #40	@ 0x28
 8008c60:	2102      	movs	r1, #2
 8008c62:	4618      	mov	r0, r3
 8008c64:	f001 fa5c 	bl	800a120 <RCCEx_PLL3_Config>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d003      	beq.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008c7e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d101      	bne.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008c86:	2300      	movs	r3, #0
 8008c88:	e000      	b.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008c92:	46bd      	mov	sp, r7
 8008c94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c98:	58024400 	.word	0x58024400

08008c9c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b090      	sub	sp, #64	@ 0x40
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008ca6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008caa:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008cae:	430b      	orrs	r3, r1
 8008cb0:	f040 8094 	bne.w	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008cb4:	4b9e      	ldr	r3, [pc, #632]	@ (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cb8:	f003 0307 	and.w	r3, r3, #7
 8008cbc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc0:	2b04      	cmp	r3, #4
 8008cc2:	f200 8087 	bhi.w	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ccc:	08008ce1 	.word	0x08008ce1
 8008cd0:	08008d09 	.word	0x08008d09
 8008cd4:	08008d31 	.word	0x08008d31
 8008cd8:	08008dcd 	.word	0x08008dcd
 8008cdc:	08008d59 	.word	0x08008d59
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ce0:	4b93      	ldr	r3, [pc, #588]	@ (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ce8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008cec:	d108      	bne.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f001 f810 	bl	8009d18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cfc:	f000 bd45 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d00:	2300      	movs	r3, #0
 8008d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d04:	f000 bd41 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d08:	4b89      	ldr	r3, [pc, #548]	@ (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d14:	d108      	bne.n	8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d16:	f107 0318 	add.w	r3, r7, #24
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f000 fd54 	bl	80097c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d24:	f000 bd31 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d2c:	f000 bd2d 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d30:	4b7f      	ldr	r3, [pc, #508]	@ (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d3c:	d108      	bne.n	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d3e:	f107 030c 	add.w	r3, r7, #12
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 fe94 	bl	8009a70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d4c:	f000 bd1d 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d50:	2300      	movs	r3, #0
 8008d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d54:	f000 bd19 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d58:	4b75      	ldr	r3, [pc, #468]	@ (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008d60:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d62:	4b73      	ldr	r3, [pc, #460]	@ (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 0304 	and.w	r3, r3, #4
 8008d6a:	2b04      	cmp	r3, #4
 8008d6c:	d10c      	bne.n	8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d109      	bne.n	8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d74:	4b6e      	ldr	r3, [pc, #440]	@ (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	08db      	lsrs	r3, r3, #3
 8008d7a:	f003 0303 	and.w	r3, r3, #3
 8008d7e:	4a6d      	ldr	r2, [pc, #436]	@ (8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008d80:	fa22 f303 	lsr.w	r3, r2, r3
 8008d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d86:	e01f      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d88:	4b69      	ldr	r3, [pc, #420]	@ (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d94:	d106      	bne.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d9c:	d102      	bne.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d9e:	4b66      	ldr	r3, [pc, #408]	@ (8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008da2:	e011      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008da4:	4b62      	ldr	r3, [pc, #392]	@ (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008db0:	d106      	bne.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008db4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008db8:	d102      	bne.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008dba:	4b60      	ldr	r3, [pc, #384]	@ (8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008dbe:	e003      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008dc4:	f000 bce1 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008dc8:	f000 bcdf 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008dcc:	4b5c      	ldr	r3, [pc, #368]	@ (8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dd0:	f000 bcdb 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dd8:	f000 bcd7 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008ddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008de0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008de4:	430b      	orrs	r3, r1
 8008de6:	f040 80ad 	bne.w	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008dea:	4b51      	ldr	r3, [pc, #324]	@ (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008dec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dee:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008df2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dfa:	d056      	beq.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e02:	f200 8090 	bhi.w	8008f26 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e08:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e0a:	f000 8088 	beq.w	8008f1e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e10:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e12:	f200 8088 	bhi.w	8008f26 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e18:	2b80      	cmp	r3, #128	@ 0x80
 8008e1a:	d032      	beq.n	8008e82 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e1e:	2b80      	cmp	r3, #128	@ 0x80
 8008e20:	f200 8081 	bhi.w	8008f26 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d003      	beq.n	8008e32 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e2c:	2b40      	cmp	r3, #64	@ 0x40
 8008e2e:	d014      	beq.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008e30:	e079      	b.n	8008f26 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e32:	4b3f      	ldr	r3, [pc, #252]	@ (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e3e:	d108      	bne.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e44:	4618      	mov	r0, r3
 8008e46:	f000 ff67 	bl	8009d18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e4e:	f000 bc9c 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e52:	2300      	movs	r3, #0
 8008e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e56:	f000 bc98 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e5a:	4b35      	ldr	r3, [pc, #212]	@ (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e66:	d108      	bne.n	8008e7a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e68:	f107 0318 	add.w	r3, r7, #24
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f000 fcab 	bl	80097c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e76:	f000 bc88 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e7e:	f000 bc84 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e82:	4b2b      	ldr	r3, [pc, #172]	@ (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e8e:	d108      	bne.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e90:	f107 030c 	add.w	r3, r7, #12
 8008e94:	4618      	mov	r0, r3
 8008e96:	f000 fdeb 	bl	8009a70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e9e:	f000 bc74 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ea6:	f000 bc70 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008eaa:	4b21      	ldr	r3, [pc, #132]	@ (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008eae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008eb2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f003 0304 	and.w	r3, r3, #4
 8008ebc:	2b04      	cmp	r3, #4
 8008ebe:	d10c      	bne.n	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d109      	bne.n	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	08db      	lsrs	r3, r3, #3
 8008ecc:	f003 0303 	and.w	r3, r3, #3
 8008ed0:	4a18      	ldr	r2, [pc, #96]	@ (8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ed8:	e01f      	b.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008eda:	4b15      	ldr	r3, [pc, #84]	@ (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ee2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ee6:	d106      	bne.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008eee:	d102      	bne.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ef0:	4b11      	ldr	r3, [pc, #68]	@ (8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ef4:	e011      	b.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008efe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f02:	d106      	bne.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f0a:	d102      	bne.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f10:	e003      	b.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f12:	2300      	movs	r3, #0
 8008f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008f16:	f000 bc38 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f1a:	f000 bc36 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008f1e:	4b08      	ldr	r3, [pc, #32]	@ (8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f22:	f000 bc32 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008f26:	2300      	movs	r3, #0
 8008f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f2a:	f000 bc2e 	b.w	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f2e:	bf00      	nop
 8008f30:	58024400 	.word	0x58024400
 8008f34:	03d09000 	.word	0x03d09000
 8008f38:	003d0900 	.word	0x003d0900
 8008f3c:	007a1200 	.word	0x007a1200
 8008f40:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008f44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f48:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008f4c:	430b      	orrs	r3, r1
 8008f4e:	f040 809c 	bne.w	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008f52:	4b9e      	ldr	r3, [pc, #632]	@ (80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f56:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008f5a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008f62:	d054      	beq.n	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f66:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008f6a:	f200 808b 	bhi.w	8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f70:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008f74:	f000 8083 	beq.w	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008f7e:	f200 8081 	bhi.w	8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f88:	d02f      	beq.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f90:	d878      	bhi.n	8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d004      	beq.n	8008fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008f9e:	d012      	beq.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008fa0:	e070      	b.n	8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fa2:	4b8a      	ldr	r3, [pc, #552]	@ (80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008faa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008fae:	d107      	bne.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f000 feaf 	bl	8009d18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fbe:	e3e4      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fc4:	e3e1      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fc6:	4b81      	ldr	r3, [pc, #516]	@ (80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fd2:	d107      	bne.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fd4:	f107 0318 	add.w	r3, r7, #24
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f000 fbf5 	bl	80097c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fe2:	e3d2      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fe8:	e3cf      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008fea:	4b78      	ldr	r3, [pc, #480]	@ (80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ff2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ff6:	d107      	bne.n	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ff8:	f107 030c 	add.w	r3, r7, #12
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f000 fd37 	bl	8009a70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009006:	e3c0      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009008:	2300      	movs	r3, #0
 800900a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800900c:	e3bd      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800900e:	4b6f      	ldr	r3, [pc, #444]	@ (80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009012:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009016:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009018:	4b6c      	ldr	r3, [pc, #432]	@ (80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 0304 	and.w	r3, r3, #4
 8009020:	2b04      	cmp	r3, #4
 8009022:	d10c      	bne.n	800903e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009026:	2b00      	cmp	r3, #0
 8009028:	d109      	bne.n	800903e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800902a:	4b68      	ldr	r3, [pc, #416]	@ (80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	08db      	lsrs	r3, r3, #3
 8009030:	f003 0303 	and.w	r3, r3, #3
 8009034:	4a66      	ldr	r2, [pc, #408]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009036:	fa22 f303 	lsr.w	r3, r2, r3
 800903a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800903c:	e01e      	b.n	800907c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800903e:	4b63      	ldr	r3, [pc, #396]	@ (80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009046:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800904a:	d106      	bne.n	800905a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800904c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800904e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009052:	d102      	bne.n	800905a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009054:	4b5f      	ldr	r3, [pc, #380]	@ (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009056:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009058:	e010      	b.n	800907c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800905a:	4b5c      	ldr	r3, [pc, #368]	@ (80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009062:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009066:	d106      	bne.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800906a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800906e:	d102      	bne.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009070:	4b59      	ldr	r3, [pc, #356]	@ (80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009072:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009074:	e002      	b.n	800907c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009076:	2300      	movs	r3, #0
 8009078:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800907a:	e386      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800907c:	e385      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800907e:	4b57      	ldr	r3, [pc, #348]	@ (80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009082:	e382      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009084:	2300      	movs	r3, #0
 8009086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009088:	e37f      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800908a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800908e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009092:	430b      	orrs	r3, r1
 8009094:	f040 80a7 	bne.w	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009098:	4b4c      	ldr	r3, [pc, #304]	@ (80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800909a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800909c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80090a0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80090a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80090a8:	d055      	beq.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80090aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80090b0:	f200 8096 	bhi.w	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80090b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80090ba:	f000 8084 	beq.w	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80090be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80090c4:	f200 808c 	bhi.w	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80090c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80090ce:	d030      	beq.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80090d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80090d6:	f200 8083 	bhi.w	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80090da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d004      	beq.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80090e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80090e6:	d012      	beq.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80090e8:	e07a      	b.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090ea:	4b38      	ldr	r3, [pc, #224]	@ (80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80090f6:	d107      	bne.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80090fc:	4618      	mov	r0, r3
 80090fe:	f000 fe0b 	bl	8009d18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009106:	e340      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009108:	2300      	movs	r3, #0
 800910a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800910c:	e33d      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800910e:	4b2f      	ldr	r3, [pc, #188]	@ (80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009116:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800911a:	d107      	bne.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800911c:	f107 0318 	add.w	r3, r7, #24
 8009120:	4618      	mov	r0, r3
 8009122:	f000 fb51 	bl	80097c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800912a:	e32e      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800912c:	2300      	movs	r3, #0
 800912e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009130:	e32b      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009132:	4b26      	ldr	r3, [pc, #152]	@ (80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800913a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800913e:	d107      	bne.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009140:	f107 030c 	add.w	r3, r7, #12
 8009144:	4618      	mov	r0, r3
 8009146:	f000 fc93 	bl	8009a70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800914e:	e31c      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009150:	2300      	movs	r3, #0
 8009152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009154:	e319      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009156:	4b1d      	ldr	r3, [pc, #116]	@ (80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800915a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800915e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009160:	4b1a      	ldr	r3, [pc, #104]	@ (80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 0304 	and.w	r3, r3, #4
 8009168:	2b04      	cmp	r3, #4
 800916a:	d10c      	bne.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800916c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800916e:	2b00      	cmp	r3, #0
 8009170:	d109      	bne.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009172:	4b16      	ldr	r3, [pc, #88]	@ (80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	08db      	lsrs	r3, r3, #3
 8009178:	f003 0303 	and.w	r3, r3, #3
 800917c:	4a14      	ldr	r2, [pc, #80]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800917e:	fa22 f303 	lsr.w	r3, r2, r3
 8009182:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009184:	e01e      	b.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009186:	4b11      	ldr	r3, [pc, #68]	@ (80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800918e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009192:	d106      	bne.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009196:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800919a:	d102      	bne.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800919c:	4b0d      	ldr	r3, [pc, #52]	@ (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800919e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091a0:	e010      	b.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80091a2:	4b0a      	ldr	r3, [pc, #40]	@ (80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091ae:	d106      	bne.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80091b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091b6:	d102      	bne.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80091b8:	4b07      	ldr	r3, [pc, #28]	@ (80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80091ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091bc:	e002      	b.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80091be:	2300      	movs	r3, #0
 80091c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80091c2:	e2e2      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80091c4:	e2e1      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80091c6:	4b05      	ldr	r3, [pc, #20]	@ (80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80091c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091ca:	e2de      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80091cc:	58024400 	.word	0x58024400
 80091d0:	03d09000 	.word	0x03d09000
 80091d4:	003d0900 	.word	0x003d0900
 80091d8:	007a1200 	.word	0x007a1200
 80091dc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80091e0:	2300      	movs	r3, #0
 80091e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091e4:	e2d1      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80091e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091ea:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80091ee:	430b      	orrs	r3, r1
 80091f0:	f040 809c 	bne.w	800932c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80091f4:	4b93      	ldr	r3, [pc, #588]	@ (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80091f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091f8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80091fc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80091fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009200:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009204:	d054      	beq.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009208:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800920c:	f200 808b 	bhi.w	8009326 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009212:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009216:	f000 8083 	beq.w	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800921a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800921c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009220:	f200 8081 	bhi.w	8009326 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009226:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800922a:	d02f      	beq.n	800928c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800922c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800922e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009232:	d878      	bhi.n	8009326 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009236:	2b00      	cmp	r3, #0
 8009238:	d004      	beq.n	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800923a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800923c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009240:	d012      	beq.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009242:	e070      	b.n	8009326 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009244:	4b7f      	ldr	r3, [pc, #508]	@ (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800924c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009250:	d107      	bne.n	8009262 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009252:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009256:	4618      	mov	r0, r3
 8009258:	f000 fd5e 	bl	8009d18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800925c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800925e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009260:	e293      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009262:	2300      	movs	r3, #0
 8009264:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009266:	e290      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009268:	4b76      	ldr	r3, [pc, #472]	@ (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009270:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009274:	d107      	bne.n	8009286 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009276:	f107 0318 	add.w	r3, r7, #24
 800927a:	4618      	mov	r0, r3
 800927c:	f000 faa4 	bl	80097c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009284:	e281      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009286:	2300      	movs	r3, #0
 8009288:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800928a:	e27e      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800928c:	4b6d      	ldr	r3, [pc, #436]	@ (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009294:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009298:	d107      	bne.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800929a:	f107 030c 	add.w	r3, r7, #12
 800929e:	4618      	mov	r0, r3
 80092a0:	f000 fbe6 	bl	8009a70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092a8:	e26f      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092aa:	2300      	movs	r3, #0
 80092ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092ae:	e26c      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092b0:	4b64      	ldr	r3, [pc, #400]	@ (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80092b8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092ba:	4b62      	ldr	r3, [pc, #392]	@ (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f003 0304 	and.w	r3, r3, #4
 80092c2:	2b04      	cmp	r3, #4
 80092c4:	d10c      	bne.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80092c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d109      	bne.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092cc:	4b5d      	ldr	r3, [pc, #372]	@ (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	08db      	lsrs	r3, r3, #3
 80092d2:	f003 0303 	and.w	r3, r3, #3
 80092d6:	4a5c      	ldr	r2, [pc, #368]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80092d8:	fa22 f303 	lsr.w	r3, r2, r3
 80092dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092de:	e01e      	b.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092e0:	4b58      	ldr	r3, [pc, #352]	@ (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092ec:	d106      	bne.n	80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80092ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092f4:	d102      	bne.n	80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80092f6:	4b55      	ldr	r3, [pc, #340]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80092f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092fa:	e010      	b.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092fc:	4b51      	ldr	r3, [pc, #324]	@ (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009304:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009308:	d106      	bne.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800930a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800930c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009310:	d102      	bne.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009312:	4b4f      	ldr	r3, [pc, #316]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009314:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009316:	e002      	b.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009318:	2300      	movs	r3, #0
 800931a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800931c:	e235      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800931e:	e234      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009320:	4b4c      	ldr	r3, [pc, #304]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009324:	e231      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009326:	2300      	movs	r3, #0
 8009328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800932a:	e22e      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800932c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009330:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009334:	430b      	orrs	r3, r1
 8009336:	f040 808f 	bne.w	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800933a:	4b42      	ldr	r3, [pc, #264]	@ (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800933c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800933e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009342:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009346:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800934a:	d06b      	beq.n	8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800934c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800934e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009352:	d874      	bhi.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009356:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800935a:	d056      	beq.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800935c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800935e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009362:	d86c      	bhi.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009366:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800936a:	d03b      	beq.n	80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800936c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009372:	d864      	bhi.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009376:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800937a:	d021      	beq.n	80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800937c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800937e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009382:	d85c      	bhi.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009386:	2b00      	cmp	r3, #0
 8009388:	d004      	beq.n	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800938a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800938c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009390:	d004      	beq.n	800939c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009392:	e054      	b.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009394:	f7fe fa0a 	bl	80077ac <HAL_RCC_GetPCLK1Freq>
 8009398:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800939a:	e1f6      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800939c:	4b29      	ldr	r3, [pc, #164]	@ (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093a8:	d107      	bne.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093aa:	f107 0318 	add.w	r3, r7, #24
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 fa0a 	bl	80097c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093b8:	e1e7      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093ba:	2300      	movs	r3, #0
 80093bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093be:	e1e4      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093c0:	4b20      	ldr	r3, [pc, #128]	@ (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80093c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093cc:	d107      	bne.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093ce:	f107 030c 	add.w	r3, r7, #12
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 fb4c 	bl	8009a70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093dc:	e1d5      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093de:	2300      	movs	r3, #0
 80093e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093e2:	e1d2      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80093e4:	4b17      	ldr	r3, [pc, #92]	@ (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f003 0304 	and.w	r3, r3, #4
 80093ec:	2b04      	cmp	r3, #4
 80093ee:	d109      	bne.n	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093f0:	4b14      	ldr	r3, [pc, #80]	@ (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	08db      	lsrs	r3, r3, #3
 80093f6:	f003 0303 	and.w	r3, r3, #3
 80093fa:	4a13      	ldr	r2, [pc, #76]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80093fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009402:	e1c2      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009404:	2300      	movs	r3, #0
 8009406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009408:	e1bf      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800940a:	4b0e      	ldr	r3, [pc, #56]	@ (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009412:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009416:	d102      	bne.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009418:	4b0c      	ldr	r3, [pc, #48]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800941a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800941c:	e1b5      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800941e:	2300      	movs	r3, #0
 8009420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009422:	e1b2      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009424:	4b07      	ldr	r3, [pc, #28]	@ (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800942c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009430:	d102      	bne.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009432:	4b07      	ldr	r3, [pc, #28]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009436:	e1a8      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009438:	2300      	movs	r3, #0
 800943a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800943c:	e1a5      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800943e:	2300      	movs	r3, #0
 8009440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009442:	e1a2      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009444:	58024400 	.word	0x58024400
 8009448:	03d09000 	.word	0x03d09000
 800944c:	003d0900 	.word	0x003d0900
 8009450:	007a1200 	.word	0x007a1200
 8009454:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800945c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009460:	430b      	orrs	r3, r1
 8009462:	d173      	bne.n	800954c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009464:	4b9c      	ldr	r3, [pc, #624]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009468:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800946c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800946e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009470:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009474:	d02f      	beq.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009478:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800947c:	d863      	bhi.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800947e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009480:	2b00      	cmp	r3, #0
 8009482:	d004      	beq.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009486:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800948a:	d012      	beq.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800948c:	e05b      	b.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800948e:	4b92      	ldr	r3, [pc, #584]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009496:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800949a:	d107      	bne.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800949c:	f107 0318 	add.w	r3, r7, #24
 80094a0:	4618      	mov	r0, r3
 80094a2:	f000 f991 	bl	80097c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094aa:	e16e      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094ac:	2300      	movs	r3, #0
 80094ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094b0:	e16b      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094b2:	4b89      	ldr	r3, [pc, #548]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094be:	d107      	bne.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094c0:	f107 030c 	add.w	r3, r7, #12
 80094c4:	4618      	mov	r0, r3
 80094c6:	f000 fad3 	bl	8009a70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094ce:	e15c      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094d0:	2300      	movs	r3, #0
 80094d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094d4:	e159      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80094d6:	4b80      	ldr	r3, [pc, #512]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80094de:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094e0:	4b7d      	ldr	r3, [pc, #500]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f003 0304 	and.w	r3, r3, #4
 80094e8:	2b04      	cmp	r3, #4
 80094ea:	d10c      	bne.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80094ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d109      	bne.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094f2:	4b79      	ldr	r3, [pc, #484]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	08db      	lsrs	r3, r3, #3
 80094f8:	f003 0303 	and.w	r3, r3, #3
 80094fc:	4a77      	ldr	r2, [pc, #476]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80094fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009502:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009504:	e01e      	b.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009506:	4b74      	ldr	r3, [pc, #464]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800950e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009512:	d106      	bne.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009516:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800951a:	d102      	bne.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800951c:	4b70      	ldr	r3, [pc, #448]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800951e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009520:	e010      	b.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009522:	4b6d      	ldr	r3, [pc, #436]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800952a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800952e:	d106      	bne.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009532:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009536:	d102      	bne.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009538:	4b6a      	ldr	r3, [pc, #424]	@ (80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800953a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800953c:	e002      	b.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800953e:	2300      	movs	r3, #0
 8009540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009542:	e122      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009544:	e121      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009546:	2300      	movs	r3, #0
 8009548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800954a:	e11e      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800954c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009550:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009554:	430b      	orrs	r3, r1
 8009556:	d133      	bne.n	80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009558:	4b5f      	ldr	r3, [pc, #380]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800955a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800955c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009560:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009564:	2b00      	cmp	r3, #0
 8009566:	d004      	beq.n	8009572 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800956a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800956e:	d012      	beq.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009570:	e023      	b.n	80095ba <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009572:	4b59      	ldr	r3, [pc, #356]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800957a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800957e:	d107      	bne.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009580:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009584:	4618      	mov	r0, r3
 8009586:	f000 fbc7 	bl	8009d18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800958a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800958c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800958e:	e0fc      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009590:	2300      	movs	r3, #0
 8009592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009594:	e0f9      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009596:	4b50      	ldr	r3, [pc, #320]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800959e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095a2:	d107      	bne.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095a4:	f107 0318 	add.w	r3, r7, #24
 80095a8:	4618      	mov	r0, r3
 80095aa:	f000 f90d 	bl	80097c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80095ae:	6a3b      	ldr	r3, [r7, #32]
 80095b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095b2:	e0ea      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095b4:	2300      	movs	r3, #0
 80095b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095b8:	e0e7      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80095ba:	2300      	movs	r3, #0
 80095bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095be:	e0e4      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80095c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095c4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80095c8:	430b      	orrs	r3, r1
 80095ca:	f040 808d 	bne.w	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80095ce:	4b42      	ldr	r3, [pc, #264]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095d2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80095d6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80095d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80095de:	d06b      	beq.n	80096b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80095e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80095e6:	d874      	bhi.n	80096d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80095e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095ee:	d056      	beq.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80095f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095f6:	d86c      	bhi.n	80096d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80095f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80095fe:	d03b      	beq.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009602:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009606:	d864      	bhi.n	80096d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800960a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800960e:	d021      	beq.n	8009654 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009612:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009616:	d85c      	bhi.n	80096d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800961a:	2b00      	cmp	r3, #0
 800961c:	d004      	beq.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800961e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009620:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009624:	d004      	beq.n	8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009626:	e054      	b.n	80096d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009628:	f000 f8b8 	bl	800979c <HAL_RCCEx_GetD3PCLK1Freq>
 800962c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800962e:	e0ac      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009630:	4b29      	ldr	r3, [pc, #164]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009638:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800963c:	d107      	bne.n	800964e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800963e:	f107 0318 	add.w	r3, r7, #24
 8009642:	4618      	mov	r0, r3
 8009644:	f000 f8c0 	bl	80097c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009648:	69fb      	ldr	r3, [r7, #28]
 800964a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800964c:	e09d      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800964e:	2300      	movs	r3, #0
 8009650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009652:	e09a      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009654:	4b20      	ldr	r3, [pc, #128]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800965c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009660:	d107      	bne.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009662:	f107 030c 	add.w	r3, r7, #12
 8009666:	4618      	mov	r0, r3
 8009668:	f000 fa02 	bl	8009a70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009670:	e08b      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009672:	2300      	movs	r3, #0
 8009674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009676:	e088      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009678:	4b17      	ldr	r3, [pc, #92]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 0304 	and.w	r3, r3, #4
 8009680:	2b04      	cmp	r3, #4
 8009682:	d109      	bne.n	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009684:	4b14      	ldr	r3, [pc, #80]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	08db      	lsrs	r3, r3, #3
 800968a:	f003 0303 	and.w	r3, r3, #3
 800968e:	4a13      	ldr	r2, [pc, #76]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009690:	fa22 f303 	lsr.w	r3, r2, r3
 8009694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009696:	e078      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009698:	2300      	movs	r3, #0
 800969a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800969c:	e075      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800969e:	4b0e      	ldr	r3, [pc, #56]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096aa:	d102      	bne.n	80096b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80096ac:	4b0c      	ldr	r3, [pc, #48]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80096ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096b0:	e06b      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096b2:	2300      	movs	r3, #0
 80096b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096b6:	e068      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80096b8:	4b07      	ldr	r3, [pc, #28]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096c4:	d102      	bne.n	80096cc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80096c6:	4b07      	ldr	r3, [pc, #28]	@ (80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80096c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096ca:	e05e      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096cc:	2300      	movs	r3, #0
 80096ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096d0:	e05b      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80096d2:	2300      	movs	r3, #0
 80096d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096d6:	e058      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80096d8:	58024400 	.word	0x58024400
 80096dc:	03d09000 	.word	0x03d09000
 80096e0:	003d0900 	.word	0x003d0900
 80096e4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80096e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096ec:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80096f0:	430b      	orrs	r3, r1
 80096f2:	d148      	bne.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80096f4:	4b27      	ldr	r3, [pc, #156]	@ (8009794 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80096f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80096fc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80096fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009700:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009704:	d02a      	beq.n	800975c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009708:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800970c:	d838      	bhi.n	8009780 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800970e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009710:	2b00      	cmp	r3, #0
 8009712:	d004      	beq.n	800971e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009716:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800971a:	d00d      	beq.n	8009738 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800971c:	e030      	b.n	8009780 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800971e:	4b1d      	ldr	r3, [pc, #116]	@ (8009794 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009726:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800972a:	d102      	bne.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800972c:	4b1a      	ldr	r3, [pc, #104]	@ (8009798 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800972e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009730:	e02b      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009732:	2300      	movs	r3, #0
 8009734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009736:	e028      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009738:	4b16      	ldr	r3, [pc, #88]	@ (8009794 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009740:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009744:	d107      	bne.n	8009756 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009746:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800974a:	4618      	mov	r0, r3
 800974c:	f000 fae4 	bl	8009d18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009754:	e019      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009756:	2300      	movs	r3, #0
 8009758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800975a:	e016      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800975c:	4b0d      	ldr	r3, [pc, #52]	@ (8009794 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009764:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009768:	d107      	bne.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800976a:	f107 0318 	add.w	r3, r7, #24
 800976e:	4618      	mov	r0, r3
 8009770:	f000 f82a 	bl	80097c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009778:	e007      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800977a:	2300      	movs	r3, #0
 800977c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800977e:	e004      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009780:	2300      	movs	r3, #0
 8009782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009784:	e001      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009786:	2300      	movs	r3, #0
 8009788:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800978a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800978c:	4618      	mov	r0, r3
 800978e:	3740      	adds	r7, #64	@ 0x40
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	58024400 	.word	0x58024400
 8009798:	007a1200 	.word	0x007a1200

0800979c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80097a0:	f7fd ffd4 	bl	800774c <HAL_RCC_GetHCLKFreq>
 80097a4:	4602      	mov	r2, r0
 80097a6:	4b06      	ldr	r3, [pc, #24]	@ (80097c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80097a8:	6a1b      	ldr	r3, [r3, #32]
 80097aa:	091b      	lsrs	r3, r3, #4
 80097ac:	f003 0307 	and.w	r3, r3, #7
 80097b0:	4904      	ldr	r1, [pc, #16]	@ (80097c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80097b2:	5ccb      	ldrb	r3, [r1, r3]
 80097b4:	f003 031f 	and.w	r3, r3, #31
 80097b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80097bc:	4618      	mov	r0, r3
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	58024400 	.word	0x58024400
 80097c4:	08013ed8 	.word	0x08013ed8

080097c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b089      	sub	sp, #36	@ 0x24
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097d0:	4ba1      	ldr	r3, [pc, #644]	@ (8009a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097d4:	f003 0303 	and.w	r3, r3, #3
 80097d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80097da:	4b9f      	ldr	r3, [pc, #636]	@ (8009a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097de:	0b1b      	lsrs	r3, r3, #12
 80097e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80097e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80097e6:	4b9c      	ldr	r3, [pc, #624]	@ (8009a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ea:	091b      	lsrs	r3, r3, #4
 80097ec:	f003 0301 	and.w	r3, r3, #1
 80097f0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80097f2:	4b99      	ldr	r3, [pc, #612]	@ (8009a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097f6:	08db      	lsrs	r3, r3, #3
 80097f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097fc:	693a      	ldr	r2, [r7, #16]
 80097fe:	fb02 f303 	mul.w	r3, r2, r3
 8009802:	ee07 3a90 	vmov	s15, r3
 8009806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800980a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	2b00      	cmp	r3, #0
 8009812:	f000 8111 	beq.w	8009a38 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	2b02      	cmp	r3, #2
 800981a:	f000 8083 	beq.w	8009924 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	2b02      	cmp	r3, #2
 8009822:	f200 80a1 	bhi.w	8009968 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d003      	beq.n	8009834 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	2b01      	cmp	r3, #1
 8009830:	d056      	beq.n	80098e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009832:	e099      	b.n	8009968 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009834:	4b88      	ldr	r3, [pc, #544]	@ (8009a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f003 0320 	and.w	r3, r3, #32
 800983c:	2b00      	cmp	r3, #0
 800983e:	d02d      	beq.n	800989c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009840:	4b85      	ldr	r3, [pc, #532]	@ (8009a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	08db      	lsrs	r3, r3, #3
 8009846:	f003 0303 	and.w	r3, r3, #3
 800984a:	4a84      	ldr	r2, [pc, #528]	@ (8009a5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800984c:	fa22 f303 	lsr.w	r3, r2, r3
 8009850:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	ee07 3a90 	vmov	s15, r3
 8009858:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	ee07 3a90 	vmov	s15, r3
 8009862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800986a:	4b7b      	ldr	r3, [pc, #492]	@ (8009a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800986c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800986e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009872:	ee07 3a90 	vmov	s15, r3
 8009876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800987a:	ed97 6a03 	vldr	s12, [r7, #12]
 800987e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800988a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800988e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009896:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800989a:	e087      	b.n	80099ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	ee07 3a90 	vmov	s15, r3
 80098a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098a6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009a64 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80098aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ae:	4b6a      	ldr	r3, [pc, #424]	@ (8009a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098b6:	ee07 3a90 	vmov	s15, r3
 80098ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098be:	ed97 6a03 	vldr	s12, [r7, #12]
 80098c2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098de:	e065      	b.n	80099ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	ee07 3a90 	vmov	s15, r3
 80098e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009a68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80098ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098f2:	4b59      	ldr	r3, [pc, #356]	@ (8009a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098fa:	ee07 3a90 	vmov	s15, r3
 80098fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009902:	ed97 6a03 	vldr	s12, [r7, #12]
 8009906:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800990a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800990e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009912:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800991a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800991e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009922:	e043      	b.n	80099ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	ee07 3a90 	vmov	s15, r3
 800992a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800992e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009936:	4b48      	ldr	r3, [pc, #288]	@ (8009a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800993a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800993e:	ee07 3a90 	vmov	s15, r3
 8009942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009946:	ed97 6a03 	vldr	s12, [r7, #12]
 800994a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800994e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009956:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800995a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800995e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009962:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009966:	e021      	b.n	80099ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	ee07 3a90 	vmov	s15, r3
 800996e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009972:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009a68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800997a:	4b37      	ldr	r3, [pc, #220]	@ (8009a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800997c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800997e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009982:	ee07 3a90 	vmov	s15, r3
 8009986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800998a:	ed97 6a03 	vldr	s12, [r7, #12]
 800998e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800999a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800999e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80099ac:	4b2a      	ldr	r3, [pc, #168]	@ (8009a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099b0:	0a5b      	lsrs	r3, r3, #9
 80099b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099b6:	ee07 3a90 	vmov	s15, r3
 80099ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80099ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099d2:	ee17 2a90 	vmov	r2, s15
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80099da:	4b1f      	ldr	r3, [pc, #124]	@ (8009a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099de:	0c1b      	lsrs	r3, r3, #16
 80099e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099e4:	ee07 3a90 	vmov	s15, r3
 80099e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80099f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a00:	ee17 2a90 	vmov	r2, s15
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009a08:	4b13      	ldr	r3, [pc, #76]	@ (8009a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a0c:	0e1b      	lsrs	r3, r3, #24
 8009a0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a12:	ee07 3a90 	vmov	s15, r3
 8009a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a22:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a2e:	ee17 2a90 	vmov	r2, s15
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009a36:	e008      	b.n	8009a4a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	609a      	str	r2, [r3, #8]
}
 8009a4a:	bf00      	nop
 8009a4c:	3724      	adds	r7, #36	@ 0x24
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	58024400 	.word	0x58024400
 8009a5c:	03d09000 	.word	0x03d09000
 8009a60:	46000000 	.word	0x46000000
 8009a64:	4c742400 	.word	0x4c742400
 8009a68:	4a742400 	.word	0x4a742400
 8009a6c:	4af42400 	.word	0x4af42400

08009a70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b089      	sub	sp, #36	@ 0x24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a78:	4ba1      	ldr	r3, [pc, #644]	@ (8009d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a7c:	f003 0303 	and.w	r3, r3, #3
 8009a80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009a82:	4b9f      	ldr	r3, [pc, #636]	@ (8009d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a86:	0d1b      	lsrs	r3, r3, #20
 8009a88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009a8e:	4b9c      	ldr	r3, [pc, #624]	@ (8009d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a92:	0a1b      	lsrs	r3, r3, #8
 8009a94:	f003 0301 	and.w	r3, r3, #1
 8009a98:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009a9a:	4b99      	ldr	r3, [pc, #612]	@ (8009d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a9e:	08db      	lsrs	r3, r3, #3
 8009aa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009aa4:	693a      	ldr	r2, [r7, #16]
 8009aa6:	fb02 f303 	mul.w	r3, r2, r3
 8009aaa:	ee07 3a90 	vmov	s15, r3
 8009aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f000 8111 	beq.w	8009ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	f000 8083 	beq.w	8009bcc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	f200 80a1 	bhi.w	8009c10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d003      	beq.n	8009adc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d056      	beq.n	8009b88 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009ada:	e099      	b.n	8009c10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009adc:	4b88      	ldr	r3, [pc, #544]	@ (8009d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f003 0320 	and.w	r3, r3, #32
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d02d      	beq.n	8009b44 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ae8:	4b85      	ldr	r3, [pc, #532]	@ (8009d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	08db      	lsrs	r3, r3, #3
 8009aee:	f003 0303 	and.w	r3, r3, #3
 8009af2:	4a84      	ldr	r2, [pc, #528]	@ (8009d04 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009af4:	fa22 f303 	lsr.w	r3, r2, r3
 8009af8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	ee07 3a90 	vmov	s15, r3
 8009b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	ee07 3a90 	vmov	s15, r3
 8009b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b12:	4b7b      	ldr	r3, [pc, #492]	@ (8009d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b1a:	ee07 3a90 	vmov	s15, r3
 8009b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b26:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009b42:	e087      	b.n	8009c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	ee07 3a90 	vmov	s15, r3
 8009b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b4e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009d0c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b56:	4b6a      	ldr	r3, [pc, #424]	@ (8009d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b5e:	ee07 3a90 	vmov	s15, r3
 8009b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b6a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b86:	e065      	b.n	8009c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	ee07 3a90 	vmov	s15, r3
 8009b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b92:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009d10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b9a:	4b59      	ldr	r3, [pc, #356]	@ (8009d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ba2:	ee07 3a90 	vmov	s15, r3
 8009ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bca:	e043      	b.n	8009c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	ee07 3a90 	vmov	s15, r3
 8009bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bd6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009d14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bde:	4b48      	ldr	r3, [pc, #288]	@ (8009d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009be6:	ee07 3a90 	vmov	s15, r3
 8009bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bf2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c0e:	e021      	b.n	8009c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	ee07 3a90 	vmov	s15, r3
 8009c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c1a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009d10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c22:	4b37      	ldr	r3, [pc, #220]	@ (8009d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c2a:	ee07 3a90 	vmov	s15, r3
 8009c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c36:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009c54:	4b2a      	ldr	r3, [pc, #168]	@ (8009d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c58:	0a5b      	lsrs	r3, r3, #9
 8009c5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c5e:	ee07 3a90 	vmov	s15, r3
 8009c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c7a:	ee17 2a90 	vmov	r2, s15
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009c82:	4b1f      	ldr	r3, [pc, #124]	@ (8009d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c86:	0c1b      	lsrs	r3, r3, #16
 8009c88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c8c:	ee07 3a90 	vmov	s15, r3
 8009c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ca8:	ee17 2a90 	vmov	r2, s15
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009cb0:	4b13      	ldr	r3, [pc, #76]	@ (8009d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cb4:	0e1b      	lsrs	r3, r3, #24
 8009cb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cba:	ee07 3a90 	vmov	s15, r3
 8009cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cca:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cd6:	ee17 2a90 	vmov	r2, s15
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009cde:	e008      	b.n	8009cf2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	609a      	str	r2, [r3, #8]
}
 8009cf2:	bf00      	nop
 8009cf4:	3724      	adds	r7, #36	@ 0x24
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	58024400 	.word	0x58024400
 8009d04:	03d09000 	.word	0x03d09000
 8009d08:	46000000 	.word	0x46000000
 8009d0c:	4c742400 	.word	0x4c742400
 8009d10:	4a742400 	.word	0x4a742400
 8009d14:	4af42400 	.word	0x4af42400

08009d18 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b089      	sub	sp, #36	@ 0x24
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d20:	4ba0      	ldr	r3, [pc, #640]	@ (8009fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d24:	f003 0303 	and.w	r3, r3, #3
 8009d28:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009d2a:	4b9e      	ldr	r3, [pc, #632]	@ (8009fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d2e:	091b      	lsrs	r3, r3, #4
 8009d30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d34:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009d36:	4b9b      	ldr	r3, [pc, #620]	@ (8009fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d3a:	f003 0301 	and.w	r3, r3, #1
 8009d3e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009d40:	4b98      	ldr	r3, [pc, #608]	@ (8009fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d44:	08db      	lsrs	r3, r3, #3
 8009d46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d4a:	693a      	ldr	r2, [r7, #16]
 8009d4c:	fb02 f303 	mul.w	r3, r2, r3
 8009d50:	ee07 3a90 	vmov	s15, r3
 8009d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d58:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f000 8111 	beq.w	8009f86 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	2b02      	cmp	r3, #2
 8009d68:	f000 8083 	beq.w	8009e72 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	2b02      	cmp	r3, #2
 8009d70:	f200 80a1 	bhi.w	8009eb6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009d74:	69bb      	ldr	r3, [r7, #24]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d003      	beq.n	8009d82 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d056      	beq.n	8009e2e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009d80:	e099      	b.n	8009eb6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d82:	4b88      	ldr	r3, [pc, #544]	@ (8009fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f003 0320 	and.w	r3, r3, #32
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d02d      	beq.n	8009dea <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d8e:	4b85      	ldr	r3, [pc, #532]	@ (8009fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	08db      	lsrs	r3, r3, #3
 8009d94:	f003 0303 	and.w	r3, r3, #3
 8009d98:	4a83      	ldr	r2, [pc, #524]	@ (8009fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d9e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	ee07 3a90 	vmov	s15, r3
 8009da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	ee07 3a90 	vmov	s15, r3
 8009db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009db4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009db8:	4b7a      	ldr	r3, [pc, #488]	@ (8009fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dc0:	ee07 3a90 	vmov	s15, r3
 8009dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dc8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dcc:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009fac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009dd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ddc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009de4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009de8:	e087      	b.n	8009efa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	ee07 3a90 	vmov	s15, r3
 8009df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009df4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009df8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dfc:	4b69      	ldr	r3, [pc, #420]	@ (8009fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e04:	ee07 3a90 	vmov	s15, r3
 8009e08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e10:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009fac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e2c:	e065      	b.n	8009efa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	ee07 3a90 	vmov	s15, r3
 8009e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e38:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009e3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e40:	4b58      	ldr	r3, [pc, #352]	@ (8009fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e48:	ee07 3a90 	vmov	s15, r3
 8009e4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e50:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e54:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009fac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e70:	e043      	b.n	8009efa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	ee07 3a90 	vmov	s15, r3
 8009e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e7c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009e80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e84:	4b47      	ldr	r3, [pc, #284]	@ (8009fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e8c:	ee07 3a90 	vmov	s15, r3
 8009e90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e94:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e98:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009fac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ea0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ea4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ea8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eb0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009eb4:	e021      	b.n	8009efa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	ee07 3a90 	vmov	s15, r3
 8009ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ec0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009ec4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ec8:	4b36      	ldr	r3, [pc, #216]	@ (8009fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ed0:	ee07 3a90 	vmov	s15, r3
 8009ed4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ed8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009edc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009fac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ee0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ee4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ee8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009eec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ef4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ef8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009efa:	4b2a      	ldr	r3, [pc, #168]	@ (8009fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009efe:	0a5b      	lsrs	r3, r3, #9
 8009f00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f04:	ee07 3a90 	vmov	s15, r3
 8009f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f14:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f20:	ee17 2a90 	vmov	r2, s15
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009f28:	4b1e      	ldr	r3, [pc, #120]	@ (8009fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f2c:	0c1b      	lsrs	r3, r3, #16
 8009f2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f32:	ee07 3a90 	vmov	s15, r3
 8009f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f42:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f4e:	ee17 2a90 	vmov	r2, s15
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009f56:	4b13      	ldr	r3, [pc, #76]	@ (8009fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f5a:	0e1b      	lsrs	r3, r3, #24
 8009f5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f60:	ee07 3a90 	vmov	s15, r3
 8009f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f70:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f7c:	ee17 2a90 	vmov	r2, s15
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009f84:	e008      	b.n	8009f98 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	609a      	str	r2, [r3, #8]
}
 8009f98:	bf00      	nop
 8009f9a:	3724      	adds	r7, #36	@ 0x24
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr
 8009fa4:	58024400 	.word	0x58024400
 8009fa8:	03d09000 	.word	0x03d09000
 8009fac:	46000000 	.word	0x46000000
 8009fb0:	4c742400 	.word	0x4c742400
 8009fb4:	4a742400 	.word	0x4a742400
 8009fb8:	4af42400 	.word	0x4af42400

08009fbc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009fca:	4b53      	ldr	r3, [pc, #332]	@ (800a118 <RCCEx_PLL2_Config+0x15c>)
 8009fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fce:	f003 0303 	and.w	r3, r3, #3
 8009fd2:	2b03      	cmp	r3, #3
 8009fd4:	d101      	bne.n	8009fda <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e099      	b.n	800a10e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009fda:	4b4f      	ldr	r3, [pc, #316]	@ (800a118 <RCCEx_PLL2_Config+0x15c>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a4e      	ldr	r2, [pc, #312]	@ (800a118 <RCCEx_PLL2_Config+0x15c>)
 8009fe0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009fe4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fe6:	f7f7 ffdf 	bl	8001fa8 <HAL_GetTick>
 8009fea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009fec:	e008      	b.n	800a000 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009fee:	f7f7 ffdb 	bl	8001fa8 <HAL_GetTick>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	1ad3      	subs	r3, r2, r3
 8009ff8:	2b02      	cmp	r3, #2
 8009ffa:	d901      	bls.n	800a000 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009ffc:	2303      	movs	r3, #3
 8009ffe:	e086      	b.n	800a10e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a000:	4b45      	ldr	r3, [pc, #276]	@ (800a118 <RCCEx_PLL2_Config+0x15c>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d1f0      	bne.n	8009fee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a00c:	4b42      	ldr	r3, [pc, #264]	@ (800a118 <RCCEx_PLL2_Config+0x15c>)
 800a00e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a010:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	031b      	lsls	r3, r3, #12
 800a01a:	493f      	ldr	r1, [pc, #252]	@ (800a118 <RCCEx_PLL2_Config+0x15c>)
 800a01c:	4313      	orrs	r3, r2
 800a01e:	628b      	str	r3, [r1, #40]	@ 0x28
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	3b01      	subs	r3, #1
 800a026:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	3b01      	subs	r3, #1
 800a030:	025b      	lsls	r3, r3, #9
 800a032:	b29b      	uxth	r3, r3
 800a034:	431a      	orrs	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	68db      	ldr	r3, [r3, #12]
 800a03a:	3b01      	subs	r3, #1
 800a03c:	041b      	lsls	r3, r3, #16
 800a03e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a042:	431a      	orrs	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	3b01      	subs	r3, #1
 800a04a:	061b      	lsls	r3, r3, #24
 800a04c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a050:	4931      	ldr	r1, [pc, #196]	@ (800a118 <RCCEx_PLL2_Config+0x15c>)
 800a052:	4313      	orrs	r3, r2
 800a054:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a056:	4b30      	ldr	r3, [pc, #192]	@ (800a118 <RCCEx_PLL2_Config+0x15c>)
 800a058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a05a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	695b      	ldr	r3, [r3, #20]
 800a062:	492d      	ldr	r1, [pc, #180]	@ (800a118 <RCCEx_PLL2_Config+0x15c>)
 800a064:	4313      	orrs	r3, r2
 800a066:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a068:	4b2b      	ldr	r3, [pc, #172]	@ (800a118 <RCCEx_PLL2_Config+0x15c>)
 800a06a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a06c:	f023 0220 	bic.w	r2, r3, #32
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	699b      	ldr	r3, [r3, #24]
 800a074:	4928      	ldr	r1, [pc, #160]	@ (800a118 <RCCEx_PLL2_Config+0x15c>)
 800a076:	4313      	orrs	r3, r2
 800a078:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a07a:	4b27      	ldr	r3, [pc, #156]	@ (800a118 <RCCEx_PLL2_Config+0x15c>)
 800a07c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a07e:	4a26      	ldr	r2, [pc, #152]	@ (800a118 <RCCEx_PLL2_Config+0x15c>)
 800a080:	f023 0310 	bic.w	r3, r3, #16
 800a084:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a086:	4b24      	ldr	r3, [pc, #144]	@ (800a118 <RCCEx_PLL2_Config+0x15c>)
 800a088:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a08a:	4b24      	ldr	r3, [pc, #144]	@ (800a11c <RCCEx_PLL2_Config+0x160>)
 800a08c:	4013      	ands	r3, r2
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	69d2      	ldr	r2, [r2, #28]
 800a092:	00d2      	lsls	r2, r2, #3
 800a094:	4920      	ldr	r1, [pc, #128]	@ (800a118 <RCCEx_PLL2_Config+0x15c>)
 800a096:	4313      	orrs	r3, r2
 800a098:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a09a:	4b1f      	ldr	r3, [pc, #124]	@ (800a118 <RCCEx_PLL2_Config+0x15c>)
 800a09c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a09e:	4a1e      	ldr	r2, [pc, #120]	@ (800a118 <RCCEx_PLL2_Config+0x15c>)
 800a0a0:	f043 0310 	orr.w	r3, r3, #16
 800a0a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d106      	bne.n	800a0ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a0ac:	4b1a      	ldr	r3, [pc, #104]	@ (800a118 <RCCEx_PLL2_Config+0x15c>)
 800a0ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0b0:	4a19      	ldr	r2, [pc, #100]	@ (800a118 <RCCEx_PLL2_Config+0x15c>)
 800a0b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a0b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a0b8:	e00f      	b.n	800a0da <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d106      	bne.n	800a0ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a0c0:	4b15      	ldr	r3, [pc, #84]	@ (800a118 <RCCEx_PLL2_Config+0x15c>)
 800a0c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0c4:	4a14      	ldr	r2, [pc, #80]	@ (800a118 <RCCEx_PLL2_Config+0x15c>)
 800a0c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a0ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a0cc:	e005      	b.n	800a0da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a0ce:	4b12      	ldr	r3, [pc, #72]	@ (800a118 <RCCEx_PLL2_Config+0x15c>)
 800a0d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0d2:	4a11      	ldr	r2, [pc, #68]	@ (800a118 <RCCEx_PLL2_Config+0x15c>)
 800a0d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a0d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a0da:	4b0f      	ldr	r3, [pc, #60]	@ (800a118 <RCCEx_PLL2_Config+0x15c>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a0e      	ldr	r2, [pc, #56]	@ (800a118 <RCCEx_PLL2_Config+0x15c>)
 800a0e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a0e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0e6:	f7f7 ff5f 	bl	8001fa8 <HAL_GetTick>
 800a0ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a0ec:	e008      	b.n	800a100 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a0ee:	f7f7 ff5b 	bl	8001fa8 <HAL_GetTick>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	1ad3      	subs	r3, r2, r3
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	d901      	bls.n	800a100 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a0fc:	2303      	movs	r3, #3
 800a0fe:	e006      	b.n	800a10e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a100:	4b05      	ldr	r3, [pc, #20]	@ (800a118 <RCCEx_PLL2_Config+0x15c>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d0f0      	beq.n	800a0ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a10c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	58024400 	.word	0x58024400
 800a11c:	ffff0007 	.word	0xffff0007

0800a120 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a12a:	2300      	movs	r3, #0
 800a12c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a12e:	4b53      	ldr	r3, [pc, #332]	@ (800a27c <RCCEx_PLL3_Config+0x15c>)
 800a130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a132:	f003 0303 	and.w	r3, r3, #3
 800a136:	2b03      	cmp	r3, #3
 800a138:	d101      	bne.n	800a13e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	e099      	b.n	800a272 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a13e:	4b4f      	ldr	r3, [pc, #316]	@ (800a27c <RCCEx_PLL3_Config+0x15c>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a4e      	ldr	r2, [pc, #312]	@ (800a27c <RCCEx_PLL3_Config+0x15c>)
 800a144:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a148:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a14a:	f7f7 ff2d 	bl	8001fa8 <HAL_GetTick>
 800a14e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a150:	e008      	b.n	800a164 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a152:	f7f7 ff29 	bl	8001fa8 <HAL_GetTick>
 800a156:	4602      	mov	r2, r0
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	1ad3      	subs	r3, r2, r3
 800a15c:	2b02      	cmp	r3, #2
 800a15e:	d901      	bls.n	800a164 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a160:	2303      	movs	r3, #3
 800a162:	e086      	b.n	800a272 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a164:	4b45      	ldr	r3, [pc, #276]	@ (800a27c <RCCEx_PLL3_Config+0x15c>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d1f0      	bne.n	800a152 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a170:	4b42      	ldr	r3, [pc, #264]	@ (800a27c <RCCEx_PLL3_Config+0x15c>)
 800a172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a174:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	051b      	lsls	r3, r3, #20
 800a17e:	493f      	ldr	r1, [pc, #252]	@ (800a27c <RCCEx_PLL3_Config+0x15c>)
 800a180:	4313      	orrs	r3, r2
 800a182:	628b      	str	r3, [r1, #40]	@ 0x28
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	3b01      	subs	r3, #1
 800a18a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	3b01      	subs	r3, #1
 800a194:	025b      	lsls	r3, r3, #9
 800a196:	b29b      	uxth	r3, r3
 800a198:	431a      	orrs	r2, r3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	3b01      	subs	r3, #1
 800a1a0:	041b      	lsls	r3, r3, #16
 800a1a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a1a6:	431a      	orrs	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	061b      	lsls	r3, r3, #24
 800a1b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a1b4:	4931      	ldr	r1, [pc, #196]	@ (800a27c <RCCEx_PLL3_Config+0x15c>)
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a1ba:	4b30      	ldr	r3, [pc, #192]	@ (800a27c <RCCEx_PLL3_Config+0x15c>)
 800a1bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	695b      	ldr	r3, [r3, #20]
 800a1c6:	492d      	ldr	r1, [pc, #180]	@ (800a27c <RCCEx_PLL3_Config+0x15c>)
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a1cc:	4b2b      	ldr	r3, [pc, #172]	@ (800a27c <RCCEx_PLL3_Config+0x15c>)
 800a1ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1d0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	699b      	ldr	r3, [r3, #24]
 800a1d8:	4928      	ldr	r1, [pc, #160]	@ (800a27c <RCCEx_PLL3_Config+0x15c>)
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a1de:	4b27      	ldr	r3, [pc, #156]	@ (800a27c <RCCEx_PLL3_Config+0x15c>)
 800a1e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1e2:	4a26      	ldr	r2, [pc, #152]	@ (800a27c <RCCEx_PLL3_Config+0x15c>)
 800a1e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a1e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a1ea:	4b24      	ldr	r3, [pc, #144]	@ (800a27c <RCCEx_PLL3_Config+0x15c>)
 800a1ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a1ee:	4b24      	ldr	r3, [pc, #144]	@ (800a280 <RCCEx_PLL3_Config+0x160>)
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	69d2      	ldr	r2, [r2, #28]
 800a1f6:	00d2      	lsls	r2, r2, #3
 800a1f8:	4920      	ldr	r1, [pc, #128]	@ (800a27c <RCCEx_PLL3_Config+0x15c>)
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a1fe:	4b1f      	ldr	r3, [pc, #124]	@ (800a27c <RCCEx_PLL3_Config+0x15c>)
 800a200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a202:	4a1e      	ldr	r2, [pc, #120]	@ (800a27c <RCCEx_PLL3_Config+0x15c>)
 800a204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a208:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d106      	bne.n	800a21e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a210:	4b1a      	ldr	r3, [pc, #104]	@ (800a27c <RCCEx_PLL3_Config+0x15c>)
 800a212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a214:	4a19      	ldr	r2, [pc, #100]	@ (800a27c <RCCEx_PLL3_Config+0x15c>)
 800a216:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a21a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a21c:	e00f      	b.n	800a23e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	2b01      	cmp	r3, #1
 800a222:	d106      	bne.n	800a232 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a224:	4b15      	ldr	r3, [pc, #84]	@ (800a27c <RCCEx_PLL3_Config+0x15c>)
 800a226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a228:	4a14      	ldr	r2, [pc, #80]	@ (800a27c <RCCEx_PLL3_Config+0x15c>)
 800a22a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a22e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a230:	e005      	b.n	800a23e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a232:	4b12      	ldr	r3, [pc, #72]	@ (800a27c <RCCEx_PLL3_Config+0x15c>)
 800a234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a236:	4a11      	ldr	r2, [pc, #68]	@ (800a27c <RCCEx_PLL3_Config+0x15c>)
 800a238:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a23c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a23e:	4b0f      	ldr	r3, [pc, #60]	@ (800a27c <RCCEx_PLL3_Config+0x15c>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a0e      	ldr	r2, [pc, #56]	@ (800a27c <RCCEx_PLL3_Config+0x15c>)
 800a244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a248:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a24a:	f7f7 fead 	bl	8001fa8 <HAL_GetTick>
 800a24e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a250:	e008      	b.n	800a264 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a252:	f7f7 fea9 	bl	8001fa8 <HAL_GetTick>
 800a256:	4602      	mov	r2, r0
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	1ad3      	subs	r3, r2, r3
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d901      	bls.n	800a264 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a260:	2303      	movs	r3, #3
 800a262:	e006      	b.n	800a272 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a264:	4b05      	ldr	r3, [pc, #20]	@ (800a27c <RCCEx_PLL3_Config+0x15c>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d0f0      	beq.n	800a252 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a270:	7bfb      	ldrb	r3, [r7, #15]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	58024400 	.word	0x58024400
 800a280:	ffff0007 	.word	0xffff0007

0800a284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d101      	bne.n	800a296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	e049      	b.n	800a32a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d106      	bne.n	800a2b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 f841 	bl	800a332 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	3304      	adds	r3, #4
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	4610      	mov	r0, r2
 800a2c4:	f000 f9e8 	bl	800a698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2201      	movs	r2, #1
 800a324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a328:	2300      	movs	r3, #0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3708      	adds	r7, #8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a332:	b480      	push	{r7}
 800a334:	b083      	sub	sp, #12
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a33a:	bf00      	nop
 800a33c:	370c      	adds	r7, #12
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
	...

0800a348 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a356:	b2db      	uxtb	r3, r3
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d001      	beq.n	800a360 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a35c:	2301      	movs	r3, #1
 800a35e:	e054      	b.n	800a40a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2202      	movs	r2, #2
 800a364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	68da      	ldr	r2, [r3, #12]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f042 0201 	orr.w	r2, r2, #1
 800a376:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a26      	ldr	r2, [pc, #152]	@ (800a418 <HAL_TIM_Base_Start_IT+0xd0>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d022      	beq.n	800a3c8 <HAL_TIM_Base_Start_IT+0x80>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a38a:	d01d      	beq.n	800a3c8 <HAL_TIM_Base_Start_IT+0x80>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a22      	ldr	r2, [pc, #136]	@ (800a41c <HAL_TIM_Base_Start_IT+0xd4>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d018      	beq.n	800a3c8 <HAL_TIM_Base_Start_IT+0x80>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a21      	ldr	r2, [pc, #132]	@ (800a420 <HAL_TIM_Base_Start_IT+0xd8>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d013      	beq.n	800a3c8 <HAL_TIM_Base_Start_IT+0x80>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a1f      	ldr	r2, [pc, #124]	@ (800a424 <HAL_TIM_Base_Start_IT+0xdc>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d00e      	beq.n	800a3c8 <HAL_TIM_Base_Start_IT+0x80>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a1e      	ldr	r2, [pc, #120]	@ (800a428 <HAL_TIM_Base_Start_IT+0xe0>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d009      	beq.n	800a3c8 <HAL_TIM_Base_Start_IT+0x80>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a1c      	ldr	r2, [pc, #112]	@ (800a42c <HAL_TIM_Base_Start_IT+0xe4>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d004      	beq.n	800a3c8 <HAL_TIM_Base_Start_IT+0x80>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a1b      	ldr	r2, [pc, #108]	@ (800a430 <HAL_TIM_Base_Start_IT+0xe8>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d115      	bne.n	800a3f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	689a      	ldr	r2, [r3, #8]
 800a3ce:	4b19      	ldr	r3, [pc, #100]	@ (800a434 <HAL_TIM_Base_Start_IT+0xec>)
 800a3d0:	4013      	ands	r3, r2
 800a3d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2b06      	cmp	r3, #6
 800a3d8:	d015      	beq.n	800a406 <HAL_TIM_Base_Start_IT+0xbe>
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3e0:	d011      	beq.n	800a406 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f042 0201 	orr.w	r2, r2, #1
 800a3f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3f2:	e008      	b.n	800a406 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f042 0201 	orr.w	r2, r2, #1
 800a402:	601a      	str	r2, [r3, #0]
 800a404:	e000      	b.n	800a408 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a406:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3714      	adds	r7, #20
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	40010000 	.word	0x40010000
 800a41c:	40000400 	.word	0x40000400
 800a420:	40000800 	.word	0x40000800
 800a424:	40000c00 	.word	0x40000c00
 800a428:	40010400 	.word	0x40010400
 800a42c:	40001800 	.word	0x40001800
 800a430:	40014000 	.word	0x40014000
 800a434:	00010007 	.word	0x00010007

0800a438 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	691b      	ldr	r3, [r3, #16]
 800a44e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	f003 0302 	and.w	r3, r3, #2
 800a456:	2b00      	cmp	r3, #0
 800a458:	d020      	beq.n	800a49c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f003 0302 	and.w	r3, r3, #2
 800a460:	2b00      	cmp	r3, #0
 800a462:	d01b      	beq.n	800a49c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f06f 0202 	mvn.w	r2, #2
 800a46c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2201      	movs	r2, #1
 800a472:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	699b      	ldr	r3, [r3, #24]
 800a47a:	f003 0303 	and.w	r3, r3, #3
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d003      	beq.n	800a48a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 f8e9 	bl	800a65a <HAL_TIM_IC_CaptureCallback>
 800a488:	e005      	b.n	800a496 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 f8db 	bl	800a646 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 f8ec 	bl	800a66e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	f003 0304 	and.w	r3, r3, #4
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d020      	beq.n	800a4e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f003 0304 	and.w	r3, r3, #4
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d01b      	beq.n	800a4e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f06f 0204 	mvn.w	r2, #4
 800a4b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2202      	movs	r2, #2
 800a4be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	699b      	ldr	r3, [r3, #24]
 800a4c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d003      	beq.n	800a4d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 f8c3 	bl	800a65a <HAL_TIM_IC_CaptureCallback>
 800a4d4:	e005      	b.n	800a4e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 f8b5 	bl	800a646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 f8c6 	bl	800a66e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	f003 0308 	and.w	r3, r3, #8
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d020      	beq.n	800a534 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f003 0308 	and.w	r3, r3, #8
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d01b      	beq.n	800a534 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f06f 0208 	mvn.w	r2, #8
 800a504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2204      	movs	r2, #4
 800a50a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	69db      	ldr	r3, [r3, #28]
 800a512:	f003 0303 	and.w	r3, r3, #3
 800a516:	2b00      	cmp	r3, #0
 800a518:	d003      	beq.n	800a522 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 f89d 	bl	800a65a <HAL_TIM_IC_CaptureCallback>
 800a520:	e005      	b.n	800a52e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 f88f 	bl	800a646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 f8a0 	bl	800a66e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	f003 0310 	and.w	r3, r3, #16
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d020      	beq.n	800a580 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f003 0310 	and.w	r3, r3, #16
 800a544:	2b00      	cmp	r3, #0
 800a546:	d01b      	beq.n	800a580 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f06f 0210 	mvn.w	r2, #16
 800a550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2208      	movs	r2, #8
 800a556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	69db      	ldr	r3, [r3, #28]
 800a55e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a562:	2b00      	cmp	r3, #0
 800a564:	d003      	beq.n	800a56e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 f877 	bl	800a65a <HAL_TIM_IC_CaptureCallback>
 800a56c:	e005      	b.n	800a57a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 f869 	bl	800a646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 f87a 	bl	800a66e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	f003 0301 	and.w	r3, r3, #1
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00c      	beq.n	800a5a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f003 0301 	and.w	r3, r3, #1
 800a590:	2b00      	cmp	r3, #0
 800a592:	d007      	beq.n	800a5a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f06f 0201 	mvn.w	r2, #1
 800a59c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f7f6 fd6e 	bl	8001080 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d104      	bne.n	800a5b8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d00c      	beq.n	800a5d2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d007      	beq.n	800a5d2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a5ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 f913 	bl	800a7f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00c      	beq.n	800a5f6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d007      	beq.n	800a5f6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a5ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 f90b 	bl	800a80c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d00c      	beq.n	800a61a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a606:	2b00      	cmp	r3, #0
 800a608:	d007      	beq.n	800a61a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 f834 	bl	800a682 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	f003 0320 	and.w	r3, r3, #32
 800a620:	2b00      	cmp	r3, #0
 800a622:	d00c      	beq.n	800a63e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f003 0320 	and.w	r3, r3, #32
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d007      	beq.n	800a63e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f06f 0220 	mvn.w	r2, #32
 800a636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 f8d3 	bl	800a7e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a63e:	bf00      	nop
 800a640:	3710      	adds	r7, #16
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}

0800a646 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a646:	b480      	push	{r7}
 800a648:	b083      	sub	sp, #12
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a64e:	bf00      	nop
 800a650:	370c      	adds	r7, #12
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr

0800a65a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a65a:	b480      	push	{r7}
 800a65c:	b083      	sub	sp, #12
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a662:	bf00      	nop
 800a664:	370c      	adds	r7, #12
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr

0800a66e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a66e:	b480      	push	{r7}
 800a670:	b083      	sub	sp, #12
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a676:	bf00      	nop
 800a678:	370c      	adds	r7, #12
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr

0800a682 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a682:	b480      	push	{r7}
 800a684:	b083      	sub	sp, #12
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a68a:	bf00      	nop
 800a68c:	370c      	adds	r7, #12
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
	...

0800a698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a698:	b480      	push	{r7}
 800a69a:	b085      	sub	sp, #20
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	4a46      	ldr	r2, [pc, #280]	@ (800a7c4 <TIM_Base_SetConfig+0x12c>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d013      	beq.n	800a6d8 <TIM_Base_SetConfig+0x40>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6b6:	d00f      	beq.n	800a6d8 <TIM_Base_SetConfig+0x40>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	4a43      	ldr	r2, [pc, #268]	@ (800a7c8 <TIM_Base_SetConfig+0x130>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d00b      	beq.n	800a6d8 <TIM_Base_SetConfig+0x40>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	4a42      	ldr	r2, [pc, #264]	@ (800a7cc <TIM_Base_SetConfig+0x134>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d007      	beq.n	800a6d8 <TIM_Base_SetConfig+0x40>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	4a41      	ldr	r2, [pc, #260]	@ (800a7d0 <TIM_Base_SetConfig+0x138>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d003      	beq.n	800a6d8 <TIM_Base_SetConfig+0x40>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	4a40      	ldr	r2, [pc, #256]	@ (800a7d4 <TIM_Base_SetConfig+0x13c>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d108      	bne.n	800a6ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	68fa      	ldr	r2, [r7, #12]
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	4a35      	ldr	r2, [pc, #212]	@ (800a7c4 <TIM_Base_SetConfig+0x12c>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d01f      	beq.n	800a732 <TIM_Base_SetConfig+0x9a>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6f8:	d01b      	beq.n	800a732 <TIM_Base_SetConfig+0x9a>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4a32      	ldr	r2, [pc, #200]	@ (800a7c8 <TIM_Base_SetConfig+0x130>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d017      	beq.n	800a732 <TIM_Base_SetConfig+0x9a>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	4a31      	ldr	r2, [pc, #196]	@ (800a7cc <TIM_Base_SetConfig+0x134>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d013      	beq.n	800a732 <TIM_Base_SetConfig+0x9a>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	4a30      	ldr	r2, [pc, #192]	@ (800a7d0 <TIM_Base_SetConfig+0x138>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d00f      	beq.n	800a732 <TIM_Base_SetConfig+0x9a>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	4a2f      	ldr	r2, [pc, #188]	@ (800a7d4 <TIM_Base_SetConfig+0x13c>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d00b      	beq.n	800a732 <TIM_Base_SetConfig+0x9a>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	4a2e      	ldr	r2, [pc, #184]	@ (800a7d8 <TIM_Base_SetConfig+0x140>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d007      	beq.n	800a732 <TIM_Base_SetConfig+0x9a>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	4a2d      	ldr	r2, [pc, #180]	@ (800a7dc <TIM_Base_SetConfig+0x144>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d003      	beq.n	800a732 <TIM_Base_SetConfig+0x9a>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	4a2c      	ldr	r2, [pc, #176]	@ (800a7e0 <TIM_Base_SetConfig+0x148>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d108      	bne.n	800a744 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	68fa      	ldr	r2, [r7, #12]
 800a740:	4313      	orrs	r3, r2
 800a742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	695b      	ldr	r3, [r3, #20]
 800a74e:	4313      	orrs	r3, r2
 800a750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	689a      	ldr	r2, [r3, #8]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a16      	ldr	r2, [pc, #88]	@ (800a7c4 <TIM_Base_SetConfig+0x12c>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d00f      	beq.n	800a790 <TIM_Base_SetConfig+0xf8>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a18      	ldr	r2, [pc, #96]	@ (800a7d4 <TIM_Base_SetConfig+0x13c>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d00b      	beq.n	800a790 <TIM_Base_SetConfig+0xf8>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a17      	ldr	r2, [pc, #92]	@ (800a7d8 <TIM_Base_SetConfig+0x140>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d007      	beq.n	800a790 <TIM_Base_SetConfig+0xf8>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4a16      	ldr	r2, [pc, #88]	@ (800a7dc <TIM_Base_SetConfig+0x144>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d003      	beq.n	800a790 <TIM_Base_SetConfig+0xf8>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	4a15      	ldr	r2, [pc, #84]	@ (800a7e0 <TIM_Base_SetConfig+0x148>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d103      	bne.n	800a798 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	691a      	ldr	r2, [r3, #16]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	691b      	ldr	r3, [r3, #16]
 800a7a2:	f003 0301 	and.w	r3, r3, #1
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d105      	bne.n	800a7b6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	f023 0201 	bic.w	r2, r3, #1
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	611a      	str	r2, [r3, #16]
  }
}
 800a7b6:	bf00      	nop
 800a7b8:	3714      	adds	r7, #20
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop
 800a7c4:	40010000 	.word	0x40010000
 800a7c8:	40000400 	.word	0x40000400
 800a7cc:	40000800 	.word	0x40000800
 800a7d0:	40000c00 	.word	0x40000c00
 800a7d4:	40010400 	.word	0x40010400
 800a7d8:	40014000 	.word	0x40014000
 800a7dc:	40014400 	.word	0x40014400
 800a7e0:	40014800 	.word	0x40014800

0800a7e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a7ec:	bf00      	nop
 800a7ee:	370c      	adds	r7, #12
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a800:	bf00      	nop
 800a802:	370c      	adds	r7, #12
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a814:	bf00      	nop
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d101      	bne.n	800a832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a82e:	2301      	movs	r3, #1
 800a830:	e042      	b.n	800a8b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d106      	bne.n	800a84a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f7f7 f8c1 	bl	80019cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2224      	movs	r2, #36	@ 0x24
 800a84e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f022 0201 	bic.w	r2, r2, #1
 800a860:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a866:	2b00      	cmp	r3, #0
 800a868:	d002      	beq.n	800a870 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f001 fa4a 	bl	800bd04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 fcdf 	bl	800b234 <UART_SetConfig>
 800a876:	4603      	mov	r3, r0
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d101      	bne.n	800a880 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a87c:	2301      	movs	r3, #1
 800a87e:	e01b      	b.n	800a8b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	685a      	ldr	r2, [r3, #4]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a88e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	689a      	ldr	r2, [r3, #8]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a89e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	681a      	ldr	r2, [r3, #0]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f042 0201 	orr.w	r2, r2, #1
 800a8ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f001 fac9 	bl	800be48 <UART_CheckIdleState>
 800a8b6:	4603      	mov	r3, r0
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3708      	adds	r7, #8
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b08a      	sub	sp, #40	@ 0x28
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	4613      	mov	r3, r2
 800a8cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8d4:	2b20      	cmp	r3, #32
 800a8d6:	d167      	bne.n	800a9a8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d002      	beq.n	800a8e4 <HAL_UART_Transmit_DMA+0x24>
 800a8de:	88fb      	ldrh	r3, [r7, #6]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d101      	bne.n	800a8e8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	e060      	b.n	800a9aa <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	68ba      	ldr	r2, [r7, #8]
 800a8ec:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	88fa      	ldrh	r2, [r7, #6]
 800a8f2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	88fa      	ldrh	r2, [r7, #6]
 800a8fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2200      	movs	r2, #0
 800a902:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2221      	movs	r2, #33	@ 0x21
 800a90a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a912:	2b00      	cmp	r3, #0
 800a914:	d028      	beq.n	800a968 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a91a:	4a26      	ldr	r2, [pc, #152]	@ (800a9b4 <HAL_UART_Transmit_DMA+0xf4>)
 800a91c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a922:	4a25      	ldr	r2, [pc, #148]	@ (800a9b8 <HAL_UART_Transmit_DMA+0xf8>)
 800a924:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a92a:	4a24      	ldr	r2, [pc, #144]	@ (800a9bc <HAL_UART_Transmit_DMA+0xfc>)
 800a92c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a932:	2200      	movs	r2, #0
 800a934:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a93e:	4619      	mov	r1, r3
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	3328      	adds	r3, #40	@ 0x28
 800a946:	461a      	mov	r2, r3
 800a948:	88fb      	ldrh	r3, [r7, #6]
 800a94a:	f7f9 fa77 	bl	8003e3c <HAL_DMA_Start_IT>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	d009      	beq.n	800a968 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2210      	movs	r2, #16
 800a958:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2220      	movs	r2, #32
 800a960:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800a964:	2301      	movs	r3, #1
 800a966:	e020      	b.n	800a9aa <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2240      	movs	r2, #64	@ 0x40
 800a96e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	3308      	adds	r3, #8
 800a976:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	e853 3f00 	ldrex	r3, [r3]
 800a97e:	613b      	str	r3, [r7, #16]
   return(result);
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a986:	627b      	str	r3, [r7, #36]	@ 0x24
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	3308      	adds	r3, #8
 800a98e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a990:	623a      	str	r2, [r7, #32]
 800a992:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a994:	69f9      	ldr	r1, [r7, #28]
 800a996:	6a3a      	ldr	r2, [r7, #32]
 800a998:	e841 2300 	strex	r3, r2, [r1]
 800a99c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a99e:	69bb      	ldr	r3, [r7, #24]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d1e5      	bne.n	800a970 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	e000      	b.n	800a9aa <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a9a8:	2302      	movs	r3, #2
  }
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3728      	adds	r7, #40	@ 0x28
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	0800c315 	.word	0x0800c315
 800a9b8:	0800c3ab 	.word	0x0800c3ab
 800a9bc:	0800c52d 	.word	0x0800c52d

0800a9c0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b08a      	sub	sp, #40	@ 0x28
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9d4:	2b20      	cmp	r3, #32
 800a9d6:	d137      	bne.n	800aa48 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d002      	beq.n	800a9e4 <HAL_UART_Receive_DMA+0x24>
 800a9de:	88fb      	ldrh	r3, [r7, #6]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d101      	bne.n	800a9e8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e030      	b.n	800aa4a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4a18      	ldr	r2, [pc, #96]	@ (800aa54 <HAL_UART_Receive_DMA+0x94>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d01f      	beq.n	800aa38 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d018      	beq.n	800aa38 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	e853 3f00 	ldrex	r3, [r3]
 800aa12:	613b      	str	r3, [r7, #16]
   return(result);
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800aa1a:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	461a      	mov	r2, r3
 800aa22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa24:	623b      	str	r3, [r7, #32]
 800aa26:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa28:	69f9      	ldr	r1, [r7, #28]
 800aa2a:	6a3a      	ldr	r2, [r7, #32]
 800aa2c:	e841 2300 	strex	r3, r2, [r1]
 800aa30:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d1e6      	bne.n	800aa06 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800aa38:	88fb      	ldrh	r3, [r7, #6]
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	68b9      	ldr	r1, [r7, #8]
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f001 fb1a 	bl	800c078 <UART_Start_Receive_DMA>
 800aa44:	4603      	mov	r3, r0
 800aa46:	e000      	b.n	800aa4a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800aa48:	2302      	movs	r3, #2
  }
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3728      	adds	r7, #40	@ 0x28
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	58000c00 	.word	0x58000c00

0800aa58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b0ba      	sub	sp, #232	@ 0xe8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	69db      	ldr	r3, [r3, #28]
 800aa66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aa7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800aa82:	f640 030f 	movw	r3, #2063	@ 0x80f
 800aa86:	4013      	ands	r3, r2
 800aa88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800aa8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d11b      	bne.n	800aacc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aa94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa98:	f003 0320 	and.w	r3, r3, #32
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d015      	beq.n	800aacc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aaa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aaa4:	f003 0320 	and.w	r3, r3, #32
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d105      	bne.n	800aab8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aaac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aab0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d009      	beq.n	800aacc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	f000 8377 	beq.w	800b1b0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	4798      	blx	r3
      }
      return;
 800aaca:	e371      	b.n	800b1b0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aacc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	f000 8123 	beq.w	800ad1c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800aad6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800aada:	4b8d      	ldr	r3, [pc, #564]	@ (800ad10 <HAL_UART_IRQHandler+0x2b8>)
 800aadc:	4013      	ands	r3, r2
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d106      	bne.n	800aaf0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800aae2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800aae6:	4b8b      	ldr	r3, [pc, #556]	@ (800ad14 <HAL_UART_IRQHandler+0x2bc>)
 800aae8:	4013      	ands	r3, r2
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	f000 8116 	beq.w	800ad1c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aaf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aaf4:	f003 0301 	and.w	r3, r3, #1
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d011      	beq.n	800ab20 <HAL_UART_IRQHandler+0xc8>
 800aafc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d00b      	beq.n	800ab20 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab16:	f043 0201 	orr.w	r2, r3, #1
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab24:	f003 0302 	and.w	r3, r3, #2
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d011      	beq.n	800ab50 <HAL_UART_IRQHandler+0xf8>
 800ab2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab30:	f003 0301 	and.w	r3, r3, #1
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d00b      	beq.n	800ab50 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2202      	movs	r2, #2
 800ab3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab46:	f043 0204 	orr.w	r2, r3, #4
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab54:	f003 0304 	and.w	r3, r3, #4
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d011      	beq.n	800ab80 <HAL_UART_IRQHandler+0x128>
 800ab5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab60:	f003 0301 	and.w	r3, r3, #1
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d00b      	beq.n	800ab80 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	2204      	movs	r2, #4
 800ab6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab76:	f043 0202 	orr.w	r2, r3, #2
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ab80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab84:	f003 0308 	and.w	r3, r3, #8
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d017      	beq.n	800abbc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ab8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab90:	f003 0320 	and.w	r3, r3, #32
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d105      	bne.n	800aba4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ab98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ab9c:	4b5c      	ldr	r3, [pc, #368]	@ (800ad10 <HAL_UART_IRQHandler+0x2b8>)
 800ab9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00b      	beq.n	800abbc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	2208      	movs	r2, #8
 800abaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abb2:	f043 0208 	orr.w	r2, r3, #8
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800abbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d012      	beq.n	800abee <HAL_UART_IRQHandler+0x196>
 800abc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d00c      	beq.n	800abee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800abdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abe4:	f043 0220 	orr.w	r2, r3, #32
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	f000 82dd 	beq.w	800b1b4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800abfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abfe:	f003 0320 	and.w	r3, r3, #32
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d013      	beq.n	800ac2e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ac06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac0a:	f003 0320 	and.w	r3, r3, #32
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d105      	bne.n	800ac1e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ac12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d007      	beq.n	800ac2e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d003      	beq.n	800ac2e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac42:	2b40      	cmp	r3, #64	@ 0x40
 800ac44:	d005      	beq.n	800ac52 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ac46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac4a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d054      	beq.n	800acfc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f001 faf8 	bl	800c248 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac62:	2b40      	cmp	r3, #64	@ 0x40
 800ac64:	d146      	bne.n	800acf4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	3308      	adds	r3, #8
 800ac6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ac74:	e853 3f00 	ldrex	r3, [r3]
 800ac78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ac7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ac80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	3308      	adds	r3, #8
 800ac8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ac92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ac96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ac9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800aca2:	e841 2300 	strex	r3, r2, [r1]
 800aca6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800acaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d1d9      	bne.n	800ac66 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d017      	beq.n	800acec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acc2:	4a15      	ldr	r2, [pc, #84]	@ (800ad18 <HAL_UART_IRQHandler+0x2c0>)
 800acc4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800accc:	4618      	mov	r0, r3
 800acce:	f7f9 fe3d 	bl	800494c <HAL_DMA_Abort_IT>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d019      	beq.n	800ad0c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ace6:	4610      	mov	r0, r2
 800ace8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acea:	e00f      	b.n	800ad0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 fa8b 	bl	800b208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acf2:	e00b      	b.n	800ad0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 fa87 	bl	800b208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acfa:	e007      	b.n	800ad0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 fa83 	bl	800b208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2200      	movs	r2, #0
 800ad06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ad0a:	e253      	b.n	800b1b4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad0c:	bf00      	nop
    return;
 800ad0e:	e251      	b.n	800b1b4 <HAL_UART_IRQHandler+0x75c>
 800ad10:	10000001 	.word	0x10000001
 800ad14:	04000120 	.word	0x04000120
 800ad18:	0800c5ad 	.word	0x0800c5ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	f040 81e7 	bne.w	800b0f4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ad26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad2a:	f003 0310 	and.w	r3, r3, #16
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	f000 81e0 	beq.w	800b0f4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ad34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad38:	f003 0310 	and.w	r3, r3, #16
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f000 81d9 	beq.w	800b0f4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	2210      	movs	r2, #16
 800ad48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad54:	2b40      	cmp	r3, #64	@ 0x40
 800ad56:	f040 8151 	bne.w	800affc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a96      	ldr	r2, [pc, #600]	@ (800afbc <HAL_UART_IRQHandler+0x564>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d068      	beq.n	800ae3a <HAL_UART_IRQHandler+0x3e2>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a93      	ldr	r2, [pc, #588]	@ (800afc0 <HAL_UART_IRQHandler+0x568>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d061      	beq.n	800ae3a <HAL_UART_IRQHandler+0x3e2>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a91      	ldr	r2, [pc, #580]	@ (800afc4 <HAL_UART_IRQHandler+0x56c>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d05a      	beq.n	800ae3a <HAL_UART_IRQHandler+0x3e2>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a8e      	ldr	r2, [pc, #568]	@ (800afc8 <HAL_UART_IRQHandler+0x570>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d053      	beq.n	800ae3a <HAL_UART_IRQHandler+0x3e2>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a8c      	ldr	r2, [pc, #560]	@ (800afcc <HAL_UART_IRQHandler+0x574>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d04c      	beq.n	800ae3a <HAL_UART_IRQHandler+0x3e2>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a89      	ldr	r2, [pc, #548]	@ (800afd0 <HAL_UART_IRQHandler+0x578>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d045      	beq.n	800ae3a <HAL_UART_IRQHandler+0x3e2>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a87      	ldr	r2, [pc, #540]	@ (800afd4 <HAL_UART_IRQHandler+0x57c>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d03e      	beq.n	800ae3a <HAL_UART_IRQHandler+0x3e2>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a84      	ldr	r2, [pc, #528]	@ (800afd8 <HAL_UART_IRQHandler+0x580>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d037      	beq.n	800ae3a <HAL_UART_IRQHandler+0x3e2>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4a82      	ldr	r2, [pc, #520]	@ (800afdc <HAL_UART_IRQHandler+0x584>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d030      	beq.n	800ae3a <HAL_UART_IRQHandler+0x3e2>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a7f      	ldr	r2, [pc, #508]	@ (800afe0 <HAL_UART_IRQHandler+0x588>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d029      	beq.n	800ae3a <HAL_UART_IRQHandler+0x3e2>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a7d      	ldr	r2, [pc, #500]	@ (800afe4 <HAL_UART_IRQHandler+0x58c>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d022      	beq.n	800ae3a <HAL_UART_IRQHandler+0x3e2>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a7a      	ldr	r2, [pc, #488]	@ (800afe8 <HAL_UART_IRQHandler+0x590>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d01b      	beq.n	800ae3a <HAL_UART_IRQHandler+0x3e2>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4a78      	ldr	r2, [pc, #480]	@ (800afec <HAL_UART_IRQHandler+0x594>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d014      	beq.n	800ae3a <HAL_UART_IRQHandler+0x3e2>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a75      	ldr	r2, [pc, #468]	@ (800aff0 <HAL_UART_IRQHandler+0x598>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d00d      	beq.n	800ae3a <HAL_UART_IRQHandler+0x3e2>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4a73      	ldr	r2, [pc, #460]	@ (800aff4 <HAL_UART_IRQHandler+0x59c>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d006      	beq.n	800ae3a <HAL_UART_IRQHandler+0x3e2>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4a70      	ldr	r2, [pc, #448]	@ (800aff8 <HAL_UART_IRQHandler+0x5a0>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d106      	bne.n	800ae48 <HAL_UART_IRQHandler+0x3f0>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	e005      	b.n	800ae54 <HAL_UART_IRQHandler+0x3fc>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ae58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	f000 81ab 	beq.w	800b1b8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ae68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	f080 81a3 	bcs.w	800b1b8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ae78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae82:	69db      	ldr	r3, [r3, #28]
 800ae84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae88:	f000 8087 	beq.w	800af9a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ae98:	e853 3f00 	ldrex	r3, [r3]
 800ae9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800aea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aea4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aea8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aeb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aeba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aebe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800aec2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800aec6:	e841 2300 	strex	r3, r2, [r1]
 800aeca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800aece:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d1da      	bne.n	800ae8c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	3308      	adds	r3, #8
 800aedc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aede:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aee0:	e853 3f00 	ldrex	r3, [r3]
 800aee4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800aee6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aee8:	f023 0301 	bic.w	r3, r3, #1
 800aeec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	3308      	adds	r3, #8
 800aef6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800aefa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800aefe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af00:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800af02:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800af06:	e841 2300 	strex	r3, r2, [r1]
 800af0a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800af0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d1e1      	bne.n	800aed6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	3308      	adds	r3, #8
 800af18:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af1c:	e853 3f00 	ldrex	r3, [r3]
 800af20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800af22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	3308      	adds	r3, #8
 800af32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800af36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800af38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af3a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800af3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800af3e:	e841 2300 	strex	r3, r2, [r1]
 800af42:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800af44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af46:	2b00      	cmp	r3, #0
 800af48:	d1e3      	bne.n	800af12 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2220      	movs	r2, #32
 800af4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2200      	movs	r2, #0
 800af56:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af60:	e853 3f00 	ldrex	r3, [r3]
 800af64:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800af66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af68:	f023 0310 	bic.w	r3, r3, #16
 800af6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	461a      	mov	r2, r3
 800af76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800af7c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800af80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800af82:	e841 2300 	strex	r3, r2, [r1]
 800af86:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800af88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d1e4      	bne.n	800af58 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af94:	4618      	mov	r0, r3
 800af96:	f7f9 f9bb 	bl	8004310 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2202      	movs	r2, #2
 800af9e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800afac:	b29b      	uxth	r3, r3
 800afae:	1ad3      	subs	r3, r2, r3
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	4619      	mov	r1, r3
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 f931 	bl	800b21c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800afba:	e0fd      	b.n	800b1b8 <HAL_UART_IRQHandler+0x760>
 800afbc:	40020010 	.word	0x40020010
 800afc0:	40020028 	.word	0x40020028
 800afc4:	40020040 	.word	0x40020040
 800afc8:	40020058 	.word	0x40020058
 800afcc:	40020070 	.word	0x40020070
 800afd0:	40020088 	.word	0x40020088
 800afd4:	400200a0 	.word	0x400200a0
 800afd8:	400200b8 	.word	0x400200b8
 800afdc:	40020410 	.word	0x40020410
 800afe0:	40020428 	.word	0x40020428
 800afe4:	40020440 	.word	0x40020440
 800afe8:	40020458 	.word	0x40020458
 800afec:	40020470 	.word	0x40020470
 800aff0:	40020488 	.word	0x40020488
 800aff4:	400204a0 	.word	0x400204a0
 800aff8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b008:	b29b      	uxth	r3, r3
 800b00a:	1ad3      	subs	r3, r2, r3
 800b00c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b016:	b29b      	uxth	r3, r3
 800b018:	2b00      	cmp	r3, #0
 800b01a:	f000 80cf 	beq.w	800b1bc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b01e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b022:	2b00      	cmp	r3, #0
 800b024:	f000 80ca 	beq.w	800b1bc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b02e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b030:	e853 3f00 	ldrex	r3, [r3]
 800b034:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b038:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b03c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	461a      	mov	r2, r3
 800b046:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b04a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b04c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b04e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b050:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b052:	e841 2300 	strex	r3, r2, [r1]
 800b056:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d1e4      	bne.n	800b028 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	3308      	adds	r3, #8
 800b064:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b068:	e853 3f00 	ldrex	r3, [r3]
 800b06c:	623b      	str	r3, [r7, #32]
   return(result);
 800b06e:	6a3a      	ldr	r2, [r7, #32]
 800b070:	4b55      	ldr	r3, [pc, #340]	@ (800b1c8 <HAL_UART_IRQHandler+0x770>)
 800b072:	4013      	ands	r3, r2
 800b074:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	3308      	adds	r3, #8
 800b07e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b082:	633a      	str	r2, [r7, #48]	@ 0x30
 800b084:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b086:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b088:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b08a:	e841 2300 	strex	r3, r2, [r1]
 800b08e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b092:	2b00      	cmp	r3, #0
 800b094:	d1e3      	bne.n	800b05e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2220      	movs	r2, #32
 800b09a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	e853 3f00 	ldrex	r3, [r3]
 800b0b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f023 0310 	bic.w	r3, r3, #16
 800b0be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b0cc:	61fb      	str	r3, [r7, #28]
 800b0ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d0:	69b9      	ldr	r1, [r7, #24]
 800b0d2:	69fa      	ldr	r2, [r7, #28]
 800b0d4:	e841 2300 	strex	r3, r2, [r1]
 800b0d8:	617b      	str	r3, [r7, #20]
   return(result);
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d1e4      	bne.n	800b0aa <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2202      	movs	r2, #2
 800b0e4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b0e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 f895 	bl	800b21c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b0f2:	e063      	b.n	800b1bc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b0f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d00e      	beq.n	800b11e <HAL_UART_IRQHandler+0x6c6>
 800b100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b104:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d008      	beq.n	800b11e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b114:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f001 fa89 	bl	800c62e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b11c:	e051      	b.n	800b1c2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b11e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b126:	2b00      	cmp	r3, #0
 800b128:	d014      	beq.n	800b154 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b12a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b12e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b132:	2b00      	cmp	r3, #0
 800b134:	d105      	bne.n	800b142 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b13a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d008      	beq.n	800b154 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b146:	2b00      	cmp	r3, #0
 800b148:	d03a      	beq.n	800b1c0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	4798      	blx	r3
    }
    return;
 800b152:	e035      	b.n	800b1c0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d009      	beq.n	800b174 <HAL_UART_IRQHandler+0x71c>
 800b160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d003      	beq.n	800b174 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f001 fa33 	bl	800c5d8 <UART_EndTransmit_IT>
    return;
 800b172:	e026      	b.n	800b1c2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b178:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d009      	beq.n	800b194 <HAL_UART_IRQHandler+0x73c>
 800b180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b184:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d003      	beq.n	800b194 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f001 fa62 	bl	800c656 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b192:	e016      	b.n	800b1c2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b198:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d010      	beq.n	800b1c2 <HAL_UART_IRQHandler+0x76a>
 800b1a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	da0c      	bge.n	800b1c2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f001 fa4a 	bl	800c642 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b1ae:	e008      	b.n	800b1c2 <HAL_UART_IRQHandler+0x76a>
      return;
 800b1b0:	bf00      	nop
 800b1b2:	e006      	b.n	800b1c2 <HAL_UART_IRQHandler+0x76a>
    return;
 800b1b4:	bf00      	nop
 800b1b6:	e004      	b.n	800b1c2 <HAL_UART_IRQHandler+0x76a>
      return;
 800b1b8:	bf00      	nop
 800b1ba:	e002      	b.n	800b1c2 <HAL_UART_IRQHandler+0x76a>
      return;
 800b1bc:	bf00      	nop
 800b1be:	e000      	b.n	800b1c2 <HAL_UART_IRQHandler+0x76a>
    return;
 800b1c0:	bf00      	nop
  }
}
 800b1c2:	37e8      	adds	r7, #232	@ 0xe8
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	effffffe 	.word	0xeffffffe

0800b1cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b1d4:	bf00      	nop
 800b1d6:	370c      	adds	r7, #12
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b1e8:	bf00      	nop
 800b1ea:	370c      	adds	r7, #12
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b083      	sub	sp, #12
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b1fc:	bf00      	nop
 800b1fe:	370c      	adds	r7, #12
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b208:	b480      	push	{r7}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b210:	bf00      	nop
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	460b      	mov	r3, r1
 800b226:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b228:	bf00      	nop
 800b22a:	370c      	adds	r7, #12
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr

0800b234 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b238:	b092      	sub	sp, #72	@ 0x48
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b23e:	2300      	movs	r3, #0
 800b240:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	689a      	ldr	r2, [r3, #8]
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	691b      	ldr	r3, [r3, #16]
 800b24c:	431a      	orrs	r2, r3
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	695b      	ldr	r3, [r3, #20]
 800b252:	431a      	orrs	r2, r3
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	69db      	ldr	r3, [r3, #28]
 800b258:	4313      	orrs	r3, r2
 800b25a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	4bbe      	ldr	r3, [pc, #760]	@ (800b55c <UART_SetConfig+0x328>)
 800b264:	4013      	ands	r3, r2
 800b266:	697a      	ldr	r2, [r7, #20]
 800b268:	6812      	ldr	r2, [r2, #0]
 800b26a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b26c:	430b      	orrs	r3, r1
 800b26e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	68da      	ldr	r2, [r3, #12]
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	430a      	orrs	r2, r1
 800b284:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	699b      	ldr	r3, [r3, #24]
 800b28a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4ab3      	ldr	r2, [pc, #716]	@ (800b560 <UART_SetConfig+0x32c>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d004      	beq.n	800b2a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	6a1b      	ldr	r3, [r3, #32]
 800b29a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b29c:	4313      	orrs	r3, r2
 800b29e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	689a      	ldr	r2, [r3, #8]
 800b2a6:	4baf      	ldr	r3, [pc, #700]	@ (800b564 <UART_SetConfig+0x330>)
 800b2a8:	4013      	ands	r3, r2
 800b2aa:	697a      	ldr	r2, [r7, #20]
 800b2ac:	6812      	ldr	r2, [r2, #0]
 800b2ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b2b0:	430b      	orrs	r3, r1
 800b2b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2ba:	f023 010f 	bic.w	r1, r3, #15
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	430a      	orrs	r2, r1
 800b2c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	4aa6      	ldr	r2, [pc, #664]	@ (800b568 <UART_SetConfig+0x334>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d177      	bne.n	800b3c4 <UART_SetConfig+0x190>
 800b2d4:	4ba5      	ldr	r3, [pc, #660]	@ (800b56c <UART_SetConfig+0x338>)
 800b2d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b2dc:	2b28      	cmp	r3, #40	@ 0x28
 800b2de:	d86d      	bhi.n	800b3bc <UART_SetConfig+0x188>
 800b2e0:	a201      	add	r2, pc, #4	@ (adr r2, 800b2e8 <UART_SetConfig+0xb4>)
 800b2e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e6:	bf00      	nop
 800b2e8:	0800b38d 	.word	0x0800b38d
 800b2ec:	0800b3bd 	.word	0x0800b3bd
 800b2f0:	0800b3bd 	.word	0x0800b3bd
 800b2f4:	0800b3bd 	.word	0x0800b3bd
 800b2f8:	0800b3bd 	.word	0x0800b3bd
 800b2fc:	0800b3bd 	.word	0x0800b3bd
 800b300:	0800b3bd 	.word	0x0800b3bd
 800b304:	0800b3bd 	.word	0x0800b3bd
 800b308:	0800b395 	.word	0x0800b395
 800b30c:	0800b3bd 	.word	0x0800b3bd
 800b310:	0800b3bd 	.word	0x0800b3bd
 800b314:	0800b3bd 	.word	0x0800b3bd
 800b318:	0800b3bd 	.word	0x0800b3bd
 800b31c:	0800b3bd 	.word	0x0800b3bd
 800b320:	0800b3bd 	.word	0x0800b3bd
 800b324:	0800b3bd 	.word	0x0800b3bd
 800b328:	0800b39d 	.word	0x0800b39d
 800b32c:	0800b3bd 	.word	0x0800b3bd
 800b330:	0800b3bd 	.word	0x0800b3bd
 800b334:	0800b3bd 	.word	0x0800b3bd
 800b338:	0800b3bd 	.word	0x0800b3bd
 800b33c:	0800b3bd 	.word	0x0800b3bd
 800b340:	0800b3bd 	.word	0x0800b3bd
 800b344:	0800b3bd 	.word	0x0800b3bd
 800b348:	0800b3a5 	.word	0x0800b3a5
 800b34c:	0800b3bd 	.word	0x0800b3bd
 800b350:	0800b3bd 	.word	0x0800b3bd
 800b354:	0800b3bd 	.word	0x0800b3bd
 800b358:	0800b3bd 	.word	0x0800b3bd
 800b35c:	0800b3bd 	.word	0x0800b3bd
 800b360:	0800b3bd 	.word	0x0800b3bd
 800b364:	0800b3bd 	.word	0x0800b3bd
 800b368:	0800b3ad 	.word	0x0800b3ad
 800b36c:	0800b3bd 	.word	0x0800b3bd
 800b370:	0800b3bd 	.word	0x0800b3bd
 800b374:	0800b3bd 	.word	0x0800b3bd
 800b378:	0800b3bd 	.word	0x0800b3bd
 800b37c:	0800b3bd 	.word	0x0800b3bd
 800b380:	0800b3bd 	.word	0x0800b3bd
 800b384:	0800b3bd 	.word	0x0800b3bd
 800b388:	0800b3b5 	.word	0x0800b3b5
 800b38c:	2301      	movs	r3, #1
 800b38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b392:	e222      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b394:	2304      	movs	r3, #4
 800b396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b39a:	e21e      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b39c:	2308      	movs	r3, #8
 800b39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3a2:	e21a      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b3a4:	2310      	movs	r3, #16
 800b3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3aa:	e216      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b3ac:	2320      	movs	r3, #32
 800b3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3b2:	e212      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b3b4:	2340      	movs	r3, #64	@ 0x40
 800b3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3ba:	e20e      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b3bc:	2380      	movs	r3, #128	@ 0x80
 800b3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3c2:	e20a      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4a69      	ldr	r2, [pc, #420]	@ (800b570 <UART_SetConfig+0x33c>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d130      	bne.n	800b430 <UART_SetConfig+0x1fc>
 800b3ce:	4b67      	ldr	r3, [pc, #412]	@ (800b56c <UART_SetConfig+0x338>)
 800b3d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3d2:	f003 0307 	and.w	r3, r3, #7
 800b3d6:	2b05      	cmp	r3, #5
 800b3d8:	d826      	bhi.n	800b428 <UART_SetConfig+0x1f4>
 800b3da:	a201      	add	r2, pc, #4	@ (adr r2, 800b3e0 <UART_SetConfig+0x1ac>)
 800b3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e0:	0800b3f9 	.word	0x0800b3f9
 800b3e4:	0800b401 	.word	0x0800b401
 800b3e8:	0800b409 	.word	0x0800b409
 800b3ec:	0800b411 	.word	0x0800b411
 800b3f0:	0800b419 	.word	0x0800b419
 800b3f4:	0800b421 	.word	0x0800b421
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3fe:	e1ec      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b400:	2304      	movs	r3, #4
 800b402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b406:	e1e8      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b408:	2308      	movs	r3, #8
 800b40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b40e:	e1e4      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b410:	2310      	movs	r3, #16
 800b412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b416:	e1e0      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b418:	2320      	movs	r3, #32
 800b41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b41e:	e1dc      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b420:	2340      	movs	r3, #64	@ 0x40
 800b422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b426:	e1d8      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b428:	2380      	movs	r3, #128	@ 0x80
 800b42a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b42e:	e1d4      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a4f      	ldr	r2, [pc, #316]	@ (800b574 <UART_SetConfig+0x340>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d130      	bne.n	800b49c <UART_SetConfig+0x268>
 800b43a:	4b4c      	ldr	r3, [pc, #304]	@ (800b56c <UART_SetConfig+0x338>)
 800b43c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b43e:	f003 0307 	and.w	r3, r3, #7
 800b442:	2b05      	cmp	r3, #5
 800b444:	d826      	bhi.n	800b494 <UART_SetConfig+0x260>
 800b446:	a201      	add	r2, pc, #4	@ (adr r2, 800b44c <UART_SetConfig+0x218>)
 800b448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b44c:	0800b465 	.word	0x0800b465
 800b450:	0800b46d 	.word	0x0800b46d
 800b454:	0800b475 	.word	0x0800b475
 800b458:	0800b47d 	.word	0x0800b47d
 800b45c:	0800b485 	.word	0x0800b485
 800b460:	0800b48d 	.word	0x0800b48d
 800b464:	2300      	movs	r3, #0
 800b466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b46a:	e1b6      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b46c:	2304      	movs	r3, #4
 800b46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b472:	e1b2      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b474:	2308      	movs	r3, #8
 800b476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b47a:	e1ae      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b47c:	2310      	movs	r3, #16
 800b47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b482:	e1aa      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b484:	2320      	movs	r3, #32
 800b486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b48a:	e1a6      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b48c:	2340      	movs	r3, #64	@ 0x40
 800b48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b492:	e1a2      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b494:	2380      	movs	r3, #128	@ 0x80
 800b496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b49a:	e19e      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4a35      	ldr	r2, [pc, #212]	@ (800b578 <UART_SetConfig+0x344>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d130      	bne.n	800b508 <UART_SetConfig+0x2d4>
 800b4a6:	4b31      	ldr	r3, [pc, #196]	@ (800b56c <UART_SetConfig+0x338>)
 800b4a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4aa:	f003 0307 	and.w	r3, r3, #7
 800b4ae:	2b05      	cmp	r3, #5
 800b4b0:	d826      	bhi.n	800b500 <UART_SetConfig+0x2cc>
 800b4b2:	a201      	add	r2, pc, #4	@ (adr r2, 800b4b8 <UART_SetConfig+0x284>)
 800b4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4b8:	0800b4d1 	.word	0x0800b4d1
 800b4bc:	0800b4d9 	.word	0x0800b4d9
 800b4c0:	0800b4e1 	.word	0x0800b4e1
 800b4c4:	0800b4e9 	.word	0x0800b4e9
 800b4c8:	0800b4f1 	.word	0x0800b4f1
 800b4cc:	0800b4f9 	.word	0x0800b4f9
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4d6:	e180      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b4d8:	2304      	movs	r3, #4
 800b4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4de:	e17c      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b4e0:	2308      	movs	r3, #8
 800b4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4e6:	e178      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b4e8:	2310      	movs	r3, #16
 800b4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4ee:	e174      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b4f0:	2320      	movs	r3, #32
 800b4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4f6:	e170      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b4f8:	2340      	movs	r3, #64	@ 0x40
 800b4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4fe:	e16c      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b500:	2380      	movs	r3, #128	@ 0x80
 800b502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b506:	e168      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a1b      	ldr	r2, [pc, #108]	@ (800b57c <UART_SetConfig+0x348>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d142      	bne.n	800b598 <UART_SetConfig+0x364>
 800b512:	4b16      	ldr	r3, [pc, #88]	@ (800b56c <UART_SetConfig+0x338>)
 800b514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b516:	f003 0307 	and.w	r3, r3, #7
 800b51a:	2b05      	cmp	r3, #5
 800b51c:	d838      	bhi.n	800b590 <UART_SetConfig+0x35c>
 800b51e:	a201      	add	r2, pc, #4	@ (adr r2, 800b524 <UART_SetConfig+0x2f0>)
 800b520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b524:	0800b53d 	.word	0x0800b53d
 800b528:	0800b545 	.word	0x0800b545
 800b52c:	0800b54d 	.word	0x0800b54d
 800b530:	0800b555 	.word	0x0800b555
 800b534:	0800b581 	.word	0x0800b581
 800b538:	0800b589 	.word	0x0800b589
 800b53c:	2300      	movs	r3, #0
 800b53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b542:	e14a      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b544:	2304      	movs	r3, #4
 800b546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b54a:	e146      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b54c:	2308      	movs	r3, #8
 800b54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b552:	e142      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b554:	2310      	movs	r3, #16
 800b556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b55a:	e13e      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b55c:	cfff69f3 	.word	0xcfff69f3
 800b560:	58000c00 	.word	0x58000c00
 800b564:	11fff4ff 	.word	0x11fff4ff
 800b568:	40011000 	.word	0x40011000
 800b56c:	58024400 	.word	0x58024400
 800b570:	40004400 	.word	0x40004400
 800b574:	40004800 	.word	0x40004800
 800b578:	40004c00 	.word	0x40004c00
 800b57c:	40005000 	.word	0x40005000
 800b580:	2320      	movs	r3, #32
 800b582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b586:	e128      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b588:	2340      	movs	r3, #64	@ 0x40
 800b58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b58e:	e124      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b590:	2380      	movs	r3, #128	@ 0x80
 800b592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b596:	e120      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4acb      	ldr	r2, [pc, #812]	@ (800b8cc <UART_SetConfig+0x698>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d176      	bne.n	800b690 <UART_SetConfig+0x45c>
 800b5a2:	4bcb      	ldr	r3, [pc, #812]	@ (800b8d0 <UART_SetConfig+0x69c>)
 800b5a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b5aa:	2b28      	cmp	r3, #40	@ 0x28
 800b5ac:	d86c      	bhi.n	800b688 <UART_SetConfig+0x454>
 800b5ae:	a201      	add	r2, pc, #4	@ (adr r2, 800b5b4 <UART_SetConfig+0x380>)
 800b5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5b4:	0800b659 	.word	0x0800b659
 800b5b8:	0800b689 	.word	0x0800b689
 800b5bc:	0800b689 	.word	0x0800b689
 800b5c0:	0800b689 	.word	0x0800b689
 800b5c4:	0800b689 	.word	0x0800b689
 800b5c8:	0800b689 	.word	0x0800b689
 800b5cc:	0800b689 	.word	0x0800b689
 800b5d0:	0800b689 	.word	0x0800b689
 800b5d4:	0800b661 	.word	0x0800b661
 800b5d8:	0800b689 	.word	0x0800b689
 800b5dc:	0800b689 	.word	0x0800b689
 800b5e0:	0800b689 	.word	0x0800b689
 800b5e4:	0800b689 	.word	0x0800b689
 800b5e8:	0800b689 	.word	0x0800b689
 800b5ec:	0800b689 	.word	0x0800b689
 800b5f0:	0800b689 	.word	0x0800b689
 800b5f4:	0800b669 	.word	0x0800b669
 800b5f8:	0800b689 	.word	0x0800b689
 800b5fc:	0800b689 	.word	0x0800b689
 800b600:	0800b689 	.word	0x0800b689
 800b604:	0800b689 	.word	0x0800b689
 800b608:	0800b689 	.word	0x0800b689
 800b60c:	0800b689 	.word	0x0800b689
 800b610:	0800b689 	.word	0x0800b689
 800b614:	0800b671 	.word	0x0800b671
 800b618:	0800b689 	.word	0x0800b689
 800b61c:	0800b689 	.word	0x0800b689
 800b620:	0800b689 	.word	0x0800b689
 800b624:	0800b689 	.word	0x0800b689
 800b628:	0800b689 	.word	0x0800b689
 800b62c:	0800b689 	.word	0x0800b689
 800b630:	0800b689 	.word	0x0800b689
 800b634:	0800b679 	.word	0x0800b679
 800b638:	0800b689 	.word	0x0800b689
 800b63c:	0800b689 	.word	0x0800b689
 800b640:	0800b689 	.word	0x0800b689
 800b644:	0800b689 	.word	0x0800b689
 800b648:	0800b689 	.word	0x0800b689
 800b64c:	0800b689 	.word	0x0800b689
 800b650:	0800b689 	.word	0x0800b689
 800b654:	0800b681 	.word	0x0800b681
 800b658:	2301      	movs	r3, #1
 800b65a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b65e:	e0bc      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b660:	2304      	movs	r3, #4
 800b662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b666:	e0b8      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b668:	2308      	movs	r3, #8
 800b66a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b66e:	e0b4      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b670:	2310      	movs	r3, #16
 800b672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b676:	e0b0      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b678:	2320      	movs	r3, #32
 800b67a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b67e:	e0ac      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b680:	2340      	movs	r3, #64	@ 0x40
 800b682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b686:	e0a8      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b688:	2380      	movs	r3, #128	@ 0x80
 800b68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b68e:	e0a4      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4a8f      	ldr	r2, [pc, #572]	@ (800b8d4 <UART_SetConfig+0x6a0>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d130      	bne.n	800b6fc <UART_SetConfig+0x4c8>
 800b69a:	4b8d      	ldr	r3, [pc, #564]	@ (800b8d0 <UART_SetConfig+0x69c>)
 800b69c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b69e:	f003 0307 	and.w	r3, r3, #7
 800b6a2:	2b05      	cmp	r3, #5
 800b6a4:	d826      	bhi.n	800b6f4 <UART_SetConfig+0x4c0>
 800b6a6:	a201      	add	r2, pc, #4	@ (adr r2, 800b6ac <UART_SetConfig+0x478>)
 800b6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ac:	0800b6c5 	.word	0x0800b6c5
 800b6b0:	0800b6cd 	.word	0x0800b6cd
 800b6b4:	0800b6d5 	.word	0x0800b6d5
 800b6b8:	0800b6dd 	.word	0x0800b6dd
 800b6bc:	0800b6e5 	.word	0x0800b6e5
 800b6c0:	0800b6ed 	.word	0x0800b6ed
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ca:	e086      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b6cc:	2304      	movs	r3, #4
 800b6ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6d2:	e082      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b6d4:	2308      	movs	r3, #8
 800b6d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6da:	e07e      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b6dc:	2310      	movs	r3, #16
 800b6de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6e2:	e07a      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b6e4:	2320      	movs	r3, #32
 800b6e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ea:	e076      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b6ec:	2340      	movs	r3, #64	@ 0x40
 800b6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6f2:	e072      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b6f4:	2380      	movs	r3, #128	@ 0x80
 800b6f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6fa:	e06e      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a75      	ldr	r2, [pc, #468]	@ (800b8d8 <UART_SetConfig+0x6a4>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d130      	bne.n	800b768 <UART_SetConfig+0x534>
 800b706:	4b72      	ldr	r3, [pc, #456]	@ (800b8d0 <UART_SetConfig+0x69c>)
 800b708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b70a:	f003 0307 	and.w	r3, r3, #7
 800b70e:	2b05      	cmp	r3, #5
 800b710:	d826      	bhi.n	800b760 <UART_SetConfig+0x52c>
 800b712:	a201      	add	r2, pc, #4	@ (adr r2, 800b718 <UART_SetConfig+0x4e4>)
 800b714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b718:	0800b731 	.word	0x0800b731
 800b71c:	0800b739 	.word	0x0800b739
 800b720:	0800b741 	.word	0x0800b741
 800b724:	0800b749 	.word	0x0800b749
 800b728:	0800b751 	.word	0x0800b751
 800b72c:	0800b759 	.word	0x0800b759
 800b730:	2300      	movs	r3, #0
 800b732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b736:	e050      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b738:	2304      	movs	r3, #4
 800b73a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b73e:	e04c      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b740:	2308      	movs	r3, #8
 800b742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b746:	e048      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b748:	2310      	movs	r3, #16
 800b74a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b74e:	e044      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b750:	2320      	movs	r3, #32
 800b752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b756:	e040      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b758:	2340      	movs	r3, #64	@ 0x40
 800b75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b75e:	e03c      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b760:	2380      	movs	r3, #128	@ 0x80
 800b762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b766:	e038      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4a5b      	ldr	r2, [pc, #364]	@ (800b8dc <UART_SetConfig+0x6a8>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d130      	bne.n	800b7d4 <UART_SetConfig+0x5a0>
 800b772:	4b57      	ldr	r3, [pc, #348]	@ (800b8d0 <UART_SetConfig+0x69c>)
 800b774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b776:	f003 0307 	and.w	r3, r3, #7
 800b77a:	2b05      	cmp	r3, #5
 800b77c:	d826      	bhi.n	800b7cc <UART_SetConfig+0x598>
 800b77e:	a201      	add	r2, pc, #4	@ (adr r2, 800b784 <UART_SetConfig+0x550>)
 800b780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b784:	0800b79d 	.word	0x0800b79d
 800b788:	0800b7a5 	.word	0x0800b7a5
 800b78c:	0800b7ad 	.word	0x0800b7ad
 800b790:	0800b7b5 	.word	0x0800b7b5
 800b794:	0800b7bd 	.word	0x0800b7bd
 800b798:	0800b7c5 	.word	0x0800b7c5
 800b79c:	2302      	movs	r3, #2
 800b79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7a2:	e01a      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b7a4:	2304      	movs	r3, #4
 800b7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7aa:	e016      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b7ac:	2308      	movs	r3, #8
 800b7ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7b2:	e012      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b7b4:	2310      	movs	r3, #16
 800b7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ba:	e00e      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b7bc:	2320      	movs	r3, #32
 800b7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7c2:	e00a      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b7c4:	2340      	movs	r3, #64	@ 0x40
 800b7c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ca:	e006      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b7cc:	2380      	movs	r3, #128	@ 0x80
 800b7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7d2:	e002      	b.n	800b7da <UART_SetConfig+0x5a6>
 800b7d4:	2380      	movs	r3, #128	@ 0x80
 800b7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	4a3f      	ldr	r2, [pc, #252]	@ (800b8dc <UART_SetConfig+0x6a8>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	f040 80f8 	bne.w	800b9d6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b7e6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b7ea:	2b20      	cmp	r3, #32
 800b7ec:	dc46      	bgt.n	800b87c <UART_SetConfig+0x648>
 800b7ee:	2b02      	cmp	r3, #2
 800b7f0:	f2c0 8082 	blt.w	800b8f8 <UART_SetConfig+0x6c4>
 800b7f4:	3b02      	subs	r3, #2
 800b7f6:	2b1e      	cmp	r3, #30
 800b7f8:	d87e      	bhi.n	800b8f8 <UART_SetConfig+0x6c4>
 800b7fa:	a201      	add	r2, pc, #4	@ (adr r2, 800b800 <UART_SetConfig+0x5cc>)
 800b7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b800:	0800b883 	.word	0x0800b883
 800b804:	0800b8f9 	.word	0x0800b8f9
 800b808:	0800b88b 	.word	0x0800b88b
 800b80c:	0800b8f9 	.word	0x0800b8f9
 800b810:	0800b8f9 	.word	0x0800b8f9
 800b814:	0800b8f9 	.word	0x0800b8f9
 800b818:	0800b89b 	.word	0x0800b89b
 800b81c:	0800b8f9 	.word	0x0800b8f9
 800b820:	0800b8f9 	.word	0x0800b8f9
 800b824:	0800b8f9 	.word	0x0800b8f9
 800b828:	0800b8f9 	.word	0x0800b8f9
 800b82c:	0800b8f9 	.word	0x0800b8f9
 800b830:	0800b8f9 	.word	0x0800b8f9
 800b834:	0800b8f9 	.word	0x0800b8f9
 800b838:	0800b8ab 	.word	0x0800b8ab
 800b83c:	0800b8f9 	.word	0x0800b8f9
 800b840:	0800b8f9 	.word	0x0800b8f9
 800b844:	0800b8f9 	.word	0x0800b8f9
 800b848:	0800b8f9 	.word	0x0800b8f9
 800b84c:	0800b8f9 	.word	0x0800b8f9
 800b850:	0800b8f9 	.word	0x0800b8f9
 800b854:	0800b8f9 	.word	0x0800b8f9
 800b858:	0800b8f9 	.word	0x0800b8f9
 800b85c:	0800b8f9 	.word	0x0800b8f9
 800b860:	0800b8f9 	.word	0x0800b8f9
 800b864:	0800b8f9 	.word	0x0800b8f9
 800b868:	0800b8f9 	.word	0x0800b8f9
 800b86c:	0800b8f9 	.word	0x0800b8f9
 800b870:	0800b8f9 	.word	0x0800b8f9
 800b874:	0800b8f9 	.word	0x0800b8f9
 800b878:	0800b8eb 	.word	0x0800b8eb
 800b87c:	2b40      	cmp	r3, #64	@ 0x40
 800b87e:	d037      	beq.n	800b8f0 <UART_SetConfig+0x6bc>
 800b880:	e03a      	b.n	800b8f8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b882:	f7fd ff8b 	bl	800979c <HAL_RCCEx_GetD3PCLK1Freq>
 800b886:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b888:	e03c      	b.n	800b904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b88a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b88e:	4618      	mov	r0, r3
 800b890:	f7fd ff9a 	bl	80097c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b898:	e034      	b.n	800b904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b89a:	f107 0318 	add.w	r3, r7, #24
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7fe f8e6 	bl	8009a70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b8a4:	69fb      	ldr	r3, [r7, #28]
 800b8a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8a8:	e02c      	b.n	800b904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8aa:	4b09      	ldr	r3, [pc, #36]	@ (800b8d0 <UART_SetConfig+0x69c>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f003 0320 	and.w	r3, r3, #32
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d016      	beq.n	800b8e4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b8b6:	4b06      	ldr	r3, [pc, #24]	@ (800b8d0 <UART_SetConfig+0x69c>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	08db      	lsrs	r3, r3, #3
 800b8bc:	f003 0303 	and.w	r3, r3, #3
 800b8c0:	4a07      	ldr	r2, [pc, #28]	@ (800b8e0 <UART_SetConfig+0x6ac>)
 800b8c2:	fa22 f303 	lsr.w	r3, r2, r3
 800b8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b8c8:	e01c      	b.n	800b904 <UART_SetConfig+0x6d0>
 800b8ca:	bf00      	nop
 800b8cc:	40011400 	.word	0x40011400
 800b8d0:	58024400 	.word	0x58024400
 800b8d4:	40007800 	.word	0x40007800
 800b8d8:	40007c00 	.word	0x40007c00
 800b8dc:	58000c00 	.word	0x58000c00
 800b8e0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b8e4:	4b9d      	ldr	r3, [pc, #628]	@ (800bb5c <UART_SetConfig+0x928>)
 800b8e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8e8:	e00c      	b.n	800b904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b8ea:	4b9d      	ldr	r3, [pc, #628]	@ (800bb60 <UART_SetConfig+0x92c>)
 800b8ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8ee:	e009      	b.n	800b904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b8f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8f6:	e005      	b.n	800b904 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b902:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b906:	2b00      	cmp	r3, #0
 800b908:	f000 81de 	beq.w	800bcc8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b910:	4a94      	ldr	r2, [pc, #592]	@ (800bb64 <UART_SetConfig+0x930>)
 800b912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b916:	461a      	mov	r2, r3
 800b918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b91a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b91e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	685a      	ldr	r2, [r3, #4]
 800b924:	4613      	mov	r3, r2
 800b926:	005b      	lsls	r3, r3, #1
 800b928:	4413      	add	r3, r2
 800b92a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b92c:	429a      	cmp	r2, r3
 800b92e:	d305      	bcc.n	800b93c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b938:	429a      	cmp	r2, r3
 800b93a:	d903      	bls.n	800b944 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b93c:	2301      	movs	r3, #1
 800b93e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b942:	e1c1      	b.n	800bcc8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b946:	2200      	movs	r2, #0
 800b948:	60bb      	str	r3, [r7, #8]
 800b94a:	60fa      	str	r2, [r7, #12]
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b950:	4a84      	ldr	r2, [pc, #528]	@ (800bb64 <UART_SetConfig+0x930>)
 800b952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b956:	b29b      	uxth	r3, r3
 800b958:	2200      	movs	r2, #0
 800b95a:	603b      	str	r3, [r7, #0]
 800b95c:	607a      	str	r2, [r7, #4]
 800b95e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b962:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b966:	f7f4 fccd 	bl	8000304 <__aeabi_uldivmod>
 800b96a:	4602      	mov	r2, r0
 800b96c:	460b      	mov	r3, r1
 800b96e:	4610      	mov	r0, r2
 800b970:	4619      	mov	r1, r3
 800b972:	f04f 0200 	mov.w	r2, #0
 800b976:	f04f 0300 	mov.w	r3, #0
 800b97a:	020b      	lsls	r3, r1, #8
 800b97c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b980:	0202      	lsls	r2, r0, #8
 800b982:	6979      	ldr	r1, [r7, #20]
 800b984:	6849      	ldr	r1, [r1, #4]
 800b986:	0849      	lsrs	r1, r1, #1
 800b988:	2000      	movs	r0, #0
 800b98a:	460c      	mov	r4, r1
 800b98c:	4605      	mov	r5, r0
 800b98e:	eb12 0804 	adds.w	r8, r2, r4
 800b992:	eb43 0905 	adc.w	r9, r3, r5
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	2200      	movs	r2, #0
 800b99c:	469a      	mov	sl, r3
 800b99e:	4693      	mov	fp, r2
 800b9a0:	4652      	mov	r2, sl
 800b9a2:	465b      	mov	r3, fp
 800b9a4:	4640      	mov	r0, r8
 800b9a6:	4649      	mov	r1, r9
 800b9a8:	f7f4 fcac 	bl	8000304 <__aeabi_uldivmod>
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	460b      	mov	r3, r1
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b9b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b9ba:	d308      	bcc.n	800b9ce <UART_SetConfig+0x79a>
 800b9bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b9c2:	d204      	bcs.n	800b9ce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b9ca:	60da      	str	r2, [r3, #12]
 800b9cc:	e17c      	b.n	800bcc8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b9d4:	e178      	b.n	800bcc8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	69db      	ldr	r3, [r3, #28]
 800b9da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b9de:	f040 80c5 	bne.w	800bb6c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b9e2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b9e6:	2b20      	cmp	r3, #32
 800b9e8:	dc48      	bgt.n	800ba7c <UART_SetConfig+0x848>
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	db7b      	blt.n	800bae6 <UART_SetConfig+0x8b2>
 800b9ee:	2b20      	cmp	r3, #32
 800b9f0:	d879      	bhi.n	800bae6 <UART_SetConfig+0x8b2>
 800b9f2:	a201      	add	r2, pc, #4	@ (adr r2, 800b9f8 <UART_SetConfig+0x7c4>)
 800b9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9f8:	0800ba83 	.word	0x0800ba83
 800b9fc:	0800ba8b 	.word	0x0800ba8b
 800ba00:	0800bae7 	.word	0x0800bae7
 800ba04:	0800bae7 	.word	0x0800bae7
 800ba08:	0800ba93 	.word	0x0800ba93
 800ba0c:	0800bae7 	.word	0x0800bae7
 800ba10:	0800bae7 	.word	0x0800bae7
 800ba14:	0800bae7 	.word	0x0800bae7
 800ba18:	0800baa3 	.word	0x0800baa3
 800ba1c:	0800bae7 	.word	0x0800bae7
 800ba20:	0800bae7 	.word	0x0800bae7
 800ba24:	0800bae7 	.word	0x0800bae7
 800ba28:	0800bae7 	.word	0x0800bae7
 800ba2c:	0800bae7 	.word	0x0800bae7
 800ba30:	0800bae7 	.word	0x0800bae7
 800ba34:	0800bae7 	.word	0x0800bae7
 800ba38:	0800bab3 	.word	0x0800bab3
 800ba3c:	0800bae7 	.word	0x0800bae7
 800ba40:	0800bae7 	.word	0x0800bae7
 800ba44:	0800bae7 	.word	0x0800bae7
 800ba48:	0800bae7 	.word	0x0800bae7
 800ba4c:	0800bae7 	.word	0x0800bae7
 800ba50:	0800bae7 	.word	0x0800bae7
 800ba54:	0800bae7 	.word	0x0800bae7
 800ba58:	0800bae7 	.word	0x0800bae7
 800ba5c:	0800bae7 	.word	0x0800bae7
 800ba60:	0800bae7 	.word	0x0800bae7
 800ba64:	0800bae7 	.word	0x0800bae7
 800ba68:	0800bae7 	.word	0x0800bae7
 800ba6c:	0800bae7 	.word	0x0800bae7
 800ba70:	0800bae7 	.word	0x0800bae7
 800ba74:	0800bae7 	.word	0x0800bae7
 800ba78:	0800bad9 	.word	0x0800bad9
 800ba7c:	2b40      	cmp	r3, #64	@ 0x40
 800ba7e:	d02e      	beq.n	800bade <UART_SetConfig+0x8aa>
 800ba80:	e031      	b.n	800bae6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba82:	f7fb fe93 	bl	80077ac <HAL_RCC_GetPCLK1Freq>
 800ba86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ba88:	e033      	b.n	800baf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba8a:	f7fb fea5 	bl	80077d8 <HAL_RCC_GetPCLK2Freq>
 800ba8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ba90:	e02f      	b.n	800baf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7fd fe96 	bl	80097c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800baa0:	e027      	b.n	800baf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800baa2:	f107 0318 	add.w	r3, r7, #24
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7fd ffe2 	bl	8009a70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800baac:	69fb      	ldr	r3, [r7, #28]
 800baae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bab0:	e01f      	b.n	800baf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bab2:	4b2d      	ldr	r3, [pc, #180]	@ (800bb68 <UART_SetConfig+0x934>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f003 0320 	and.w	r3, r3, #32
 800baba:	2b00      	cmp	r3, #0
 800babc:	d009      	beq.n	800bad2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800babe:	4b2a      	ldr	r3, [pc, #168]	@ (800bb68 <UART_SetConfig+0x934>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	08db      	lsrs	r3, r3, #3
 800bac4:	f003 0303 	and.w	r3, r3, #3
 800bac8:	4a24      	ldr	r2, [pc, #144]	@ (800bb5c <UART_SetConfig+0x928>)
 800baca:	fa22 f303 	lsr.w	r3, r2, r3
 800bace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bad0:	e00f      	b.n	800baf2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bad2:	4b22      	ldr	r3, [pc, #136]	@ (800bb5c <UART_SetConfig+0x928>)
 800bad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bad6:	e00c      	b.n	800baf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bad8:	4b21      	ldr	r3, [pc, #132]	@ (800bb60 <UART_SetConfig+0x92c>)
 800bada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800badc:	e009      	b.n	800baf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bade:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bae4:	e005      	b.n	800baf2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bae6:	2300      	movs	r3, #0
 800bae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800baea:	2301      	movs	r3, #1
 800baec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800baf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800baf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	f000 80e7 	beq.w	800bcc8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bafe:	4a19      	ldr	r2, [pc, #100]	@ (800bb64 <UART_SetConfig+0x930>)
 800bb00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb04:	461a      	mov	r2, r3
 800bb06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb08:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb0c:	005a      	lsls	r2, r3, #1
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	085b      	lsrs	r3, r3, #1
 800bb14:	441a      	add	r2, r3
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb22:	2b0f      	cmp	r3, #15
 800bb24:	d916      	bls.n	800bb54 <UART_SetConfig+0x920>
 800bb26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb2c:	d212      	bcs.n	800bb54 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bb2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb30:	b29b      	uxth	r3, r3
 800bb32:	f023 030f 	bic.w	r3, r3, #15
 800bb36:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bb38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb3a:	085b      	lsrs	r3, r3, #1
 800bb3c:	b29b      	uxth	r3, r3
 800bb3e:	f003 0307 	and.w	r3, r3, #7
 800bb42:	b29a      	uxth	r2, r3
 800bb44:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bb46:	4313      	orrs	r3, r2
 800bb48:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bb50:	60da      	str	r2, [r3, #12]
 800bb52:	e0b9      	b.n	800bcc8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bb54:	2301      	movs	r3, #1
 800bb56:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bb5a:	e0b5      	b.n	800bcc8 <UART_SetConfig+0xa94>
 800bb5c:	03d09000 	.word	0x03d09000
 800bb60:	003d0900 	.word	0x003d0900
 800bb64:	08013ef0 	.word	0x08013ef0
 800bb68:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bb6c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bb70:	2b20      	cmp	r3, #32
 800bb72:	dc49      	bgt.n	800bc08 <UART_SetConfig+0x9d4>
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	db7c      	blt.n	800bc72 <UART_SetConfig+0xa3e>
 800bb78:	2b20      	cmp	r3, #32
 800bb7a:	d87a      	bhi.n	800bc72 <UART_SetConfig+0xa3e>
 800bb7c:	a201      	add	r2, pc, #4	@ (adr r2, 800bb84 <UART_SetConfig+0x950>)
 800bb7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb82:	bf00      	nop
 800bb84:	0800bc0f 	.word	0x0800bc0f
 800bb88:	0800bc17 	.word	0x0800bc17
 800bb8c:	0800bc73 	.word	0x0800bc73
 800bb90:	0800bc73 	.word	0x0800bc73
 800bb94:	0800bc1f 	.word	0x0800bc1f
 800bb98:	0800bc73 	.word	0x0800bc73
 800bb9c:	0800bc73 	.word	0x0800bc73
 800bba0:	0800bc73 	.word	0x0800bc73
 800bba4:	0800bc2f 	.word	0x0800bc2f
 800bba8:	0800bc73 	.word	0x0800bc73
 800bbac:	0800bc73 	.word	0x0800bc73
 800bbb0:	0800bc73 	.word	0x0800bc73
 800bbb4:	0800bc73 	.word	0x0800bc73
 800bbb8:	0800bc73 	.word	0x0800bc73
 800bbbc:	0800bc73 	.word	0x0800bc73
 800bbc0:	0800bc73 	.word	0x0800bc73
 800bbc4:	0800bc3f 	.word	0x0800bc3f
 800bbc8:	0800bc73 	.word	0x0800bc73
 800bbcc:	0800bc73 	.word	0x0800bc73
 800bbd0:	0800bc73 	.word	0x0800bc73
 800bbd4:	0800bc73 	.word	0x0800bc73
 800bbd8:	0800bc73 	.word	0x0800bc73
 800bbdc:	0800bc73 	.word	0x0800bc73
 800bbe0:	0800bc73 	.word	0x0800bc73
 800bbe4:	0800bc73 	.word	0x0800bc73
 800bbe8:	0800bc73 	.word	0x0800bc73
 800bbec:	0800bc73 	.word	0x0800bc73
 800bbf0:	0800bc73 	.word	0x0800bc73
 800bbf4:	0800bc73 	.word	0x0800bc73
 800bbf8:	0800bc73 	.word	0x0800bc73
 800bbfc:	0800bc73 	.word	0x0800bc73
 800bc00:	0800bc73 	.word	0x0800bc73
 800bc04:	0800bc65 	.word	0x0800bc65
 800bc08:	2b40      	cmp	r3, #64	@ 0x40
 800bc0a:	d02e      	beq.n	800bc6a <UART_SetConfig+0xa36>
 800bc0c:	e031      	b.n	800bc72 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc0e:	f7fb fdcd 	bl	80077ac <HAL_RCC_GetPCLK1Freq>
 800bc12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc14:	e033      	b.n	800bc7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc16:	f7fb fddf 	bl	80077d8 <HAL_RCC_GetPCLK2Freq>
 800bc1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc1c:	e02f      	b.n	800bc7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc22:	4618      	mov	r0, r3
 800bc24:	f7fd fdd0 	bl	80097c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bc28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc2c:	e027      	b.n	800bc7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc2e:	f107 0318 	add.w	r3, r7, #24
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7fd ff1c 	bl	8009a70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc3c:	e01f      	b.n	800bc7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc3e:	4b2d      	ldr	r3, [pc, #180]	@ (800bcf4 <UART_SetConfig+0xac0>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f003 0320 	and.w	r3, r3, #32
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d009      	beq.n	800bc5e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bc4a:	4b2a      	ldr	r3, [pc, #168]	@ (800bcf4 <UART_SetConfig+0xac0>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	08db      	lsrs	r3, r3, #3
 800bc50:	f003 0303 	and.w	r3, r3, #3
 800bc54:	4a28      	ldr	r2, [pc, #160]	@ (800bcf8 <UART_SetConfig+0xac4>)
 800bc56:	fa22 f303 	lsr.w	r3, r2, r3
 800bc5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bc5c:	e00f      	b.n	800bc7e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800bc5e:	4b26      	ldr	r3, [pc, #152]	@ (800bcf8 <UART_SetConfig+0xac4>)
 800bc60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc62:	e00c      	b.n	800bc7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bc64:	4b25      	ldr	r3, [pc, #148]	@ (800bcfc <UART_SetConfig+0xac8>)
 800bc66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc68:	e009      	b.n	800bc7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc70:	e005      	b.n	800bc7e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800bc72:	2300      	movs	r3, #0
 800bc74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bc76:	2301      	movs	r3, #1
 800bc78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bc7c:	bf00      	nop
    }

    if (pclk != 0U)
 800bc7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d021      	beq.n	800bcc8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc88:	4a1d      	ldr	r2, [pc, #116]	@ (800bd00 <UART_SetConfig+0xacc>)
 800bc8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc8e:	461a      	mov	r2, r3
 800bc90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc92:	fbb3 f2f2 	udiv	r2, r3, r2
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	085b      	lsrs	r3, r3, #1
 800bc9c:	441a      	add	r2, r3
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bca6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcaa:	2b0f      	cmp	r3, #15
 800bcac:	d909      	bls.n	800bcc2 <UART_SetConfig+0xa8e>
 800bcae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bcb4:	d205      	bcs.n	800bcc2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bcb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcb8:	b29a      	uxth	r2, r3
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	60da      	str	r2, [r3, #12]
 800bcc0:	e002      	b.n	800bcc8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	2201      	movs	r2, #1
 800bccc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	2200      	movs	r2, #0
 800bce2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bce4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3748      	adds	r7, #72	@ 0x48
 800bcec:	46bd      	mov	sp, r7
 800bcee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bcf2:	bf00      	nop
 800bcf4:	58024400 	.word	0x58024400
 800bcf8:	03d09000 	.word	0x03d09000
 800bcfc:	003d0900 	.word	0x003d0900
 800bd00:	08013ef0 	.word	0x08013ef0

0800bd04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd10:	f003 0308 	and.w	r3, r3, #8
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d00a      	beq.n	800bd2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	430a      	orrs	r2, r1
 800bd2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd32:	f003 0301 	and.w	r3, r3, #1
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00a      	beq.n	800bd50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	430a      	orrs	r2, r1
 800bd4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd54:	f003 0302 	and.w	r3, r3, #2
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d00a      	beq.n	800bd72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	430a      	orrs	r2, r1
 800bd70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd76:	f003 0304 	and.w	r3, r3, #4
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00a      	beq.n	800bd94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	430a      	orrs	r2, r1
 800bd92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd98:	f003 0310 	and.w	r3, r3, #16
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d00a      	beq.n	800bdb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	689b      	ldr	r3, [r3, #8]
 800bda6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	430a      	orrs	r2, r1
 800bdb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdba:	f003 0320 	and.w	r3, r3, #32
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d00a      	beq.n	800bdd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	689b      	ldr	r3, [r3, #8]
 800bdc8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	430a      	orrs	r2, r1
 800bdd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d01a      	beq.n	800be1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	430a      	orrs	r2, r1
 800bdf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be02:	d10a      	bne.n	800be1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	430a      	orrs	r2, r1
 800be18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be22:	2b00      	cmp	r3, #0
 800be24:	d00a      	beq.n	800be3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	430a      	orrs	r2, r1
 800be3a:	605a      	str	r2, [r3, #4]
  }
}
 800be3c:	bf00      	nop
 800be3e:	370c      	adds	r7, #12
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b098      	sub	sp, #96	@ 0x60
 800be4c:	af02      	add	r7, sp, #8
 800be4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2200      	movs	r2, #0
 800be54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800be58:	f7f6 f8a6 	bl	8001fa8 <HAL_GetTick>
 800be5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f003 0308 	and.w	r3, r3, #8
 800be68:	2b08      	cmp	r3, #8
 800be6a:	d12f      	bne.n	800becc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800be70:	9300      	str	r3, [sp, #0]
 800be72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be74:	2200      	movs	r2, #0
 800be76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 f88e 	bl	800bf9c <UART_WaitOnFlagUntilTimeout>
 800be80:	4603      	mov	r3, r0
 800be82:	2b00      	cmp	r3, #0
 800be84:	d022      	beq.n	800becc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be8e:	e853 3f00 	ldrex	r3, [r3]
 800be92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800be94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800be9a:	653b      	str	r3, [r7, #80]	@ 0x50
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	461a      	mov	r2, r3
 800bea2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bea4:	647b      	str	r3, [r7, #68]	@ 0x44
 800bea6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800beaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800beac:	e841 2300 	strex	r3, r2, [r1]
 800beb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800beb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d1e6      	bne.n	800be86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2220      	movs	r2, #32
 800bebc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bec8:	2303      	movs	r3, #3
 800beca:	e063      	b.n	800bf94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f003 0304 	and.w	r3, r3, #4
 800bed6:	2b04      	cmp	r3, #4
 800bed8:	d149      	bne.n	800bf6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800beda:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bede:	9300      	str	r3, [sp, #0]
 800bee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bee2:	2200      	movs	r2, #0
 800bee4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 f857 	bl	800bf9c <UART_WaitOnFlagUntilTimeout>
 800beee:	4603      	mov	r3, r0
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d03c      	beq.n	800bf6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800befa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800befc:	e853 3f00 	ldrex	r3, [r3]
 800bf00:	623b      	str	r3, [r7, #32]
   return(result);
 800bf02:	6a3b      	ldr	r3, [r7, #32]
 800bf04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	461a      	mov	r2, r3
 800bf10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf12:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf14:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf1a:	e841 2300 	strex	r3, r2, [r1]
 800bf1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bf20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d1e6      	bne.n	800bef4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	3308      	adds	r3, #8
 800bf2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	e853 3f00 	ldrex	r3, [r3]
 800bf34:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f023 0301 	bic.w	r3, r3, #1
 800bf3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	3308      	adds	r3, #8
 800bf44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bf46:	61fa      	str	r2, [r7, #28]
 800bf48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf4a:	69b9      	ldr	r1, [r7, #24]
 800bf4c:	69fa      	ldr	r2, [r7, #28]
 800bf4e:	e841 2300 	strex	r3, r2, [r1]
 800bf52:	617b      	str	r3, [r7, #20]
   return(result);
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d1e5      	bne.n	800bf26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2220      	movs	r2, #32
 800bf5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2200      	movs	r2, #0
 800bf66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf6a:	2303      	movs	r3, #3
 800bf6c:	e012      	b.n	800bf94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2220      	movs	r2, #32
 800bf72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2220      	movs	r2, #32
 800bf7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2200      	movs	r2, #0
 800bf82:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2200      	movs	r2, #0
 800bf88:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf92:	2300      	movs	r3, #0
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3758      	adds	r7, #88	@ 0x58
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	60f8      	str	r0, [r7, #12]
 800bfa4:	60b9      	str	r1, [r7, #8]
 800bfa6:	603b      	str	r3, [r7, #0]
 800bfa8:	4613      	mov	r3, r2
 800bfaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfac:	e04f      	b.n	800c04e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfae:	69bb      	ldr	r3, [r7, #24]
 800bfb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bfb4:	d04b      	beq.n	800c04e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfb6:	f7f5 fff7 	bl	8001fa8 <HAL_GetTick>
 800bfba:	4602      	mov	r2, r0
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	1ad3      	subs	r3, r2, r3
 800bfc0:	69ba      	ldr	r2, [r7, #24]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d302      	bcc.n	800bfcc <UART_WaitOnFlagUntilTimeout+0x30>
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d101      	bne.n	800bfd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bfcc:	2303      	movs	r3, #3
 800bfce:	e04e      	b.n	800c06e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f003 0304 	and.w	r3, r3, #4
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d037      	beq.n	800c04e <UART_WaitOnFlagUntilTimeout+0xb2>
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	2b80      	cmp	r3, #128	@ 0x80
 800bfe2:	d034      	beq.n	800c04e <UART_WaitOnFlagUntilTimeout+0xb2>
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	2b40      	cmp	r3, #64	@ 0x40
 800bfe8:	d031      	beq.n	800c04e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	69db      	ldr	r3, [r3, #28]
 800bff0:	f003 0308 	and.w	r3, r3, #8
 800bff4:	2b08      	cmp	r3, #8
 800bff6:	d110      	bne.n	800c01a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	2208      	movs	r2, #8
 800bffe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c000:	68f8      	ldr	r0, [r7, #12]
 800c002:	f000 f921 	bl	800c248 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2208      	movs	r2, #8
 800c00a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2200      	movs	r2, #0
 800c012:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c016:	2301      	movs	r3, #1
 800c018:	e029      	b.n	800c06e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	69db      	ldr	r3, [r3, #28]
 800c020:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c024:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c028:	d111      	bne.n	800c04e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c032:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c034:	68f8      	ldr	r0, [r7, #12]
 800c036:	f000 f907 	bl	800c248 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	2220      	movs	r2, #32
 800c03e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2200      	movs	r2, #0
 800c046:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c04a:	2303      	movs	r3, #3
 800c04c:	e00f      	b.n	800c06e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	69da      	ldr	r2, [r3, #28]
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	4013      	ands	r3, r2
 800c058:	68ba      	ldr	r2, [r7, #8]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	bf0c      	ite	eq
 800c05e:	2301      	moveq	r3, #1
 800c060:	2300      	movne	r3, #0
 800c062:	b2db      	uxtb	r3, r3
 800c064:	461a      	mov	r2, r3
 800c066:	79fb      	ldrb	r3, [r7, #7]
 800c068:	429a      	cmp	r2, r3
 800c06a:	d0a0      	beq.n	800bfae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c06c:	2300      	movs	r3, #0
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3710      	adds	r7, #16
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
	...

0800c078 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b096      	sub	sp, #88	@ 0x58
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	4613      	mov	r3, r2
 800c084:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	68ba      	ldr	r2, [r7, #8]
 800c08a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	88fa      	ldrh	r2, [r7, #6]
 800c090:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2200      	movs	r2, #0
 800c098:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2222      	movs	r2, #34	@ 0x22
 800c0a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d02d      	beq.n	800c10a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0b4:	4a40      	ldr	r2, [pc, #256]	@ (800c1b8 <UART_Start_Receive_DMA+0x140>)
 800c0b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0be:	4a3f      	ldr	r2, [pc, #252]	@ (800c1bc <UART_Start_Receive_DMA+0x144>)
 800c0c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0c8:	4a3d      	ldr	r2, [pc, #244]	@ (800c1c0 <UART_Start_Receive_DMA+0x148>)
 800c0ca:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	3324      	adds	r3, #36	@ 0x24
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	88fb      	ldrh	r3, [r7, #6]
 800c0ec:	f7f7 fea6 	bl	8003e3c <HAL_DMA_Start_IT>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d009      	beq.n	800c10a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2210      	movs	r2, #16
 800c0fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2220      	movs	r2, #32
 800c102:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c106:	2301      	movs	r3, #1
 800c108:	e051      	b.n	800c1ae <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	691b      	ldr	r3, [r3, #16]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d018      	beq.n	800c144 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c11a:	e853 3f00 	ldrex	r3, [r3]
 800c11e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c122:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c126:	657b      	str	r3, [r7, #84]	@ 0x54
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	461a      	mov	r2, r3
 800c12e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c130:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c132:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c134:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c136:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c138:	e841 2300 	strex	r3, r2, [r1]
 800c13c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c13e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c140:	2b00      	cmp	r3, #0
 800c142:	d1e6      	bne.n	800c112 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	3308      	adds	r3, #8
 800c14a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c14e:	e853 3f00 	ldrex	r3, [r3]
 800c152:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c156:	f043 0301 	orr.w	r3, r3, #1
 800c15a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	3308      	adds	r3, #8
 800c162:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c164:	637a      	str	r2, [r7, #52]	@ 0x34
 800c166:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c168:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c16a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c16c:	e841 2300 	strex	r3, r2, [r1]
 800c170:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c174:	2b00      	cmp	r3, #0
 800c176:	d1e5      	bne.n	800c144 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	3308      	adds	r3, #8
 800c17e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	e853 3f00 	ldrex	r3, [r3]
 800c186:	613b      	str	r3, [r7, #16]
   return(result);
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c18e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	3308      	adds	r3, #8
 800c196:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c198:	623a      	str	r2, [r7, #32]
 800c19a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c19c:	69f9      	ldr	r1, [r7, #28]
 800c19e:	6a3a      	ldr	r2, [r7, #32]
 800c1a0:	e841 2300 	strex	r3, r2, [r1]
 800c1a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800c1a6:	69bb      	ldr	r3, [r7, #24]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d1e5      	bne.n	800c178 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c1ac:	2300      	movs	r3, #0
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3758      	adds	r7, #88	@ 0x58
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	0800c3c7 	.word	0x0800c3c7
 800c1bc:	0800c4ef 	.word	0x0800c4ef
 800c1c0:	0800c52d 	.word	0x0800c52d

0800c1c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b08f      	sub	sp, #60	@ 0x3c
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1d2:	6a3b      	ldr	r3, [r7, #32]
 800c1d4:	e853 3f00 	ldrex	r3, [r3]
 800c1d8:	61fb      	str	r3, [r7, #28]
   return(result);
 800c1da:	69fb      	ldr	r3, [r7, #28]
 800c1dc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c1e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c1ec:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c1f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c1f2:	e841 2300 	strex	r3, r2, [r1]
 800c1f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d1e6      	bne.n	800c1cc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	3308      	adds	r3, #8
 800c204:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	e853 3f00 	ldrex	r3, [r3]
 800c20c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c214:	633b      	str	r3, [r7, #48]	@ 0x30
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	3308      	adds	r3, #8
 800c21c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c21e:	61ba      	str	r2, [r7, #24]
 800c220:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c222:	6979      	ldr	r1, [r7, #20]
 800c224:	69ba      	ldr	r2, [r7, #24]
 800c226:	e841 2300 	strex	r3, r2, [r1]
 800c22a:	613b      	str	r3, [r7, #16]
   return(result);
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d1e5      	bne.n	800c1fe <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2220      	movs	r2, #32
 800c236:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c23a:	bf00      	nop
 800c23c:	373c      	adds	r7, #60	@ 0x3c
 800c23e:	46bd      	mov	sp, r7
 800c240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c244:	4770      	bx	lr
	...

0800c248 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c248:	b480      	push	{r7}
 800c24a:	b095      	sub	sp, #84	@ 0x54
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c258:	e853 3f00 	ldrex	r3, [r3]
 800c25c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c260:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c264:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	461a      	mov	r2, r3
 800c26c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c26e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c270:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c272:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c274:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c276:	e841 2300 	strex	r3, r2, [r1]
 800c27a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d1e6      	bne.n	800c250 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	3308      	adds	r3, #8
 800c288:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c28a:	6a3b      	ldr	r3, [r7, #32]
 800c28c:	e853 3f00 	ldrex	r3, [r3]
 800c290:	61fb      	str	r3, [r7, #28]
   return(result);
 800c292:	69fa      	ldr	r2, [r7, #28]
 800c294:	4b1e      	ldr	r3, [pc, #120]	@ (800c310 <UART_EndRxTransfer+0xc8>)
 800c296:	4013      	ands	r3, r2
 800c298:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	3308      	adds	r3, #8
 800c2a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c2a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c2a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c2a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2aa:	e841 2300 	strex	r3, r2, [r1]
 800c2ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d1e5      	bne.n	800c282 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	d118      	bne.n	800c2f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	e853 3f00 	ldrex	r3, [r3]
 800c2ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	f023 0310 	bic.w	r3, r3, #16
 800c2d2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	461a      	mov	r2, r3
 800c2da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2dc:	61bb      	str	r3, [r7, #24]
 800c2de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2e0:	6979      	ldr	r1, [r7, #20]
 800c2e2:	69ba      	ldr	r2, [r7, #24]
 800c2e4:	e841 2300 	strex	r3, r2, [r1]
 800c2e8:	613b      	str	r3, [r7, #16]
   return(result);
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d1e6      	bne.n	800c2be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2220      	movs	r2, #32
 800c2f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2200      	movs	r2, #0
 800c302:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c304:	bf00      	nop
 800c306:	3754      	adds	r7, #84	@ 0x54
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	4770      	bx	lr
 800c310:	effffffe 	.word	0xeffffffe

0800c314 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b090      	sub	sp, #64	@ 0x40
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c320:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	69db      	ldr	r3, [r3, #28]
 800c326:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c32a:	d037      	beq.n	800c39c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800c32c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c32e:	2200      	movs	r2, #0
 800c330:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	3308      	adds	r3, #8
 800c33a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c33e:	e853 3f00 	ldrex	r3, [r3]
 800c342:	623b      	str	r3, [r7, #32]
   return(result);
 800c344:	6a3b      	ldr	r3, [r7, #32]
 800c346:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c34a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c34c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	3308      	adds	r3, #8
 800c352:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c354:	633a      	str	r2, [r7, #48]	@ 0x30
 800c356:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c358:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c35a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c35c:	e841 2300 	strex	r3, r2, [r1]
 800c360:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c364:	2b00      	cmp	r3, #0
 800c366:	d1e5      	bne.n	800c334 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	e853 3f00 	ldrex	r3, [r3]
 800c374:	60fb      	str	r3, [r7, #12]
   return(result);
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c37c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c37e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	461a      	mov	r2, r3
 800c384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c386:	61fb      	str	r3, [r7, #28]
 800c388:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c38a:	69b9      	ldr	r1, [r7, #24]
 800c38c:	69fa      	ldr	r2, [r7, #28]
 800c38e:	e841 2300 	strex	r3, r2, [r1]
 800c392:	617b      	str	r3, [r7, #20]
   return(result);
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d1e6      	bne.n	800c368 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c39a:	e002      	b.n	800c3a2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800c39c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c39e:	f7fe ff15 	bl	800b1cc <HAL_UART_TxCpltCallback>
}
 800c3a2:	bf00      	nop
 800c3a4:	3740      	adds	r7, #64	@ 0x40
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c3aa:	b580      	push	{r7, lr}
 800c3ac:	b084      	sub	sp, #16
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3b6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c3b8:	68f8      	ldr	r0, [r7, #12]
 800c3ba:	f7fe ff11 	bl	800b1e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c3be:	bf00      	nop
 800c3c0:	3710      	adds	r7, #16
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}

0800c3c6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c3c6:	b580      	push	{r7, lr}
 800c3c8:	b09c      	sub	sp, #112	@ 0x70
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3d2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	69db      	ldr	r3, [r3, #28]
 800c3d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c3dc:	d071      	beq.n	800c4c2 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800c3de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3ee:	e853 3f00 	ldrex	r3, [r3]
 800c3f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c3f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c3f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c3fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c3fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	461a      	mov	r2, r3
 800c402:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c404:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c406:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c408:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c40a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c40c:	e841 2300 	strex	r3, r2, [r1]
 800c410:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c412:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c414:	2b00      	cmp	r3, #0
 800c416:	d1e6      	bne.n	800c3e6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c418:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	3308      	adds	r3, #8
 800c41e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c422:	e853 3f00 	ldrex	r3, [r3]
 800c426:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c42a:	f023 0301 	bic.w	r3, r3, #1
 800c42e:	667b      	str	r3, [r7, #100]	@ 0x64
 800c430:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	3308      	adds	r3, #8
 800c436:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c438:	647a      	str	r2, [r7, #68]	@ 0x44
 800c43a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c43c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c43e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c440:	e841 2300 	strex	r3, r2, [r1]
 800c444:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d1e5      	bne.n	800c418 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c44c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	3308      	adds	r3, #8
 800c452:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c456:	e853 3f00 	ldrex	r3, [r3]
 800c45a:	623b      	str	r3, [r7, #32]
   return(result);
 800c45c:	6a3b      	ldr	r3, [r7, #32]
 800c45e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c462:	663b      	str	r3, [r7, #96]	@ 0x60
 800c464:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	3308      	adds	r3, #8
 800c46a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c46c:	633a      	str	r2, [r7, #48]	@ 0x30
 800c46e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c470:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c472:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c474:	e841 2300 	strex	r3, r2, [r1]
 800c478:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d1e5      	bne.n	800c44c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c480:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c482:	2220      	movs	r2, #32
 800c484:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c488:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c48a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	d118      	bne.n	800c4c2 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c490:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	e853 3f00 	ldrex	r3, [r3]
 800c49c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f023 0310 	bic.w	r3, r3, #16
 800c4a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c4a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	461a      	mov	r2, r3
 800c4ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c4ae:	61fb      	str	r3, [r7, #28]
 800c4b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b2:	69b9      	ldr	r1, [r7, #24]
 800c4b4:	69fa      	ldr	r2, [r7, #28]
 800c4b6:	e841 2300 	strex	r3, r2, [r1]
 800c4ba:	617b      	str	r3, [r7, #20]
   return(result);
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d1e6      	bne.n	800c490 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c4c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d107      	bne.n	800c4e0 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c4d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c4da:	f7fe fe9f 	bl	800b21c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c4de:	e002      	b.n	800c4e6 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800c4e0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c4e2:	f7f4 fc73 	bl	8000dcc <HAL_UART_RxCpltCallback>
}
 800c4e6:	bf00      	nop
 800c4e8:	3770      	adds	r7, #112	@ 0x70
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}

0800c4ee <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b084      	sub	sp, #16
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4fa:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2201      	movs	r2, #1
 800c500:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c506:	2b01      	cmp	r3, #1
 800c508:	d109      	bne.n	800c51e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c510:	085b      	lsrs	r3, r3, #1
 800c512:	b29b      	uxth	r3, r3
 800c514:	4619      	mov	r1, r3
 800c516:	68f8      	ldr	r0, [r7, #12]
 800c518:	f7fe fe80 	bl	800b21c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c51c:	e002      	b.n	800c524 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c51e:	68f8      	ldr	r0, [r7, #12]
 800c520:	f7fe fe68 	bl	800b1f4 <HAL_UART_RxHalfCpltCallback>
}
 800c524:	bf00      	nop
 800c526:	3710      	adds	r7, #16
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b086      	sub	sp, #24
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c538:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c540:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c548:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	689b      	ldr	r3, [r3, #8]
 800c550:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c554:	2b80      	cmp	r3, #128	@ 0x80
 800c556:	d109      	bne.n	800c56c <UART_DMAError+0x40>
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	2b21      	cmp	r3, #33	@ 0x21
 800c55c:	d106      	bne.n	800c56c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	2200      	movs	r2, #0
 800c562:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c566:	6978      	ldr	r0, [r7, #20]
 800c568:	f7ff fe2c 	bl	800c1c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	689b      	ldr	r3, [r3, #8]
 800c572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c576:	2b40      	cmp	r3, #64	@ 0x40
 800c578:	d109      	bne.n	800c58e <UART_DMAError+0x62>
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2b22      	cmp	r3, #34	@ 0x22
 800c57e:	d106      	bne.n	800c58e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	2200      	movs	r2, #0
 800c584:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c588:	6978      	ldr	r0, [r7, #20]
 800c58a:	f7ff fe5d 	bl	800c248 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c594:	f043 0210 	orr.w	r2, r3, #16
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c59e:	6978      	ldr	r0, [r7, #20]
 800c5a0:	f7fe fe32 	bl	800b208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5a4:	bf00      	nop
 800c5a6:	3718      	adds	r7, #24
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}

0800c5ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b084      	sub	sp, #16
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c5ca:	68f8      	ldr	r0, [r7, #12]
 800c5cc:	f7fe fe1c 	bl	800b208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5d0:	bf00      	nop
 800c5d2:	3710      	adds	r7, #16
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b088      	sub	sp, #32
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	e853 3f00 	ldrex	r3, [r3]
 800c5ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5f4:	61fb      	str	r3, [r7, #28]
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	69fb      	ldr	r3, [r7, #28]
 800c5fe:	61bb      	str	r3, [r7, #24]
 800c600:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c602:	6979      	ldr	r1, [r7, #20]
 800c604:	69ba      	ldr	r2, [r7, #24]
 800c606:	e841 2300 	strex	r3, r2, [r1]
 800c60a:	613b      	str	r3, [r7, #16]
   return(result);
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d1e6      	bne.n	800c5e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2220      	movs	r2, #32
 800c616:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2200      	movs	r2, #0
 800c61e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f7fe fdd3 	bl	800b1cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c626:	bf00      	nop
 800c628:	3720      	adds	r7, #32
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}

0800c62e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c62e:	b480      	push	{r7}
 800c630:	b083      	sub	sp, #12
 800c632:	af00      	add	r7, sp, #0
 800c634:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c636:	bf00      	nop
 800c638:	370c      	adds	r7, #12
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr

0800c642 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c642:	b480      	push	{r7}
 800c644:	b083      	sub	sp, #12
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c64a:	bf00      	nop
 800c64c:	370c      	adds	r7, #12
 800c64e:	46bd      	mov	sp, r7
 800c650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c654:	4770      	bx	lr

0800c656 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c656:	b480      	push	{r7}
 800c658:	b083      	sub	sp, #12
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c65e:	bf00      	nop
 800c660:	370c      	adds	r7, #12
 800c662:	46bd      	mov	sp, r7
 800c664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c668:	4770      	bx	lr

0800c66a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c66a:	b480      	push	{r7}
 800c66c:	b085      	sub	sp, #20
 800c66e:	af00      	add	r7, sp, #0
 800c670:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c678:	2b01      	cmp	r3, #1
 800c67a:	d101      	bne.n	800c680 <HAL_UARTEx_DisableFifoMode+0x16>
 800c67c:	2302      	movs	r3, #2
 800c67e:	e027      	b.n	800c6d0 <HAL_UARTEx_DisableFifoMode+0x66>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2201      	movs	r2, #1
 800c684:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2224      	movs	r2, #36	@ 0x24
 800c68c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	681a      	ldr	r2, [r3, #0]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f022 0201 	bic.w	r2, r2, #1
 800c6a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c6ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	68fa      	ldr	r2, [r7, #12]
 800c6bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2220      	movs	r2, #32
 800c6c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c6ce:	2300      	movs	r3, #0
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3714      	adds	r7, #20
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr

0800c6dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d101      	bne.n	800c6f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c6f0:	2302      	movs	r3, #2
 800c6f2:	e02d      	b.n	800c750 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2224      	movs	r2, #36	@ 0x24
 800c700:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	681a      	ldr	r2, [r3, #0]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f022 0201 	bic.w	r2, r2, #1
 800c71a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	689b      	ldr	r3, [r3, #8]
 800c722:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	683a      	ldr	r2, [r7, #0]
 800c72c:	430a      	orrs	r2, r1
 800c72e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f000 f84f 	bl	800c7d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	68fa      	ldr	r2, [r7, #12]
 800c73c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2220      	movs	r2, #32
 800c742:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2200      	movs	r2, #0
 800c74a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c74e:	2300      	movs	r3, #0
}
 800c750:	4618      	mov	r0, r3
 800c752:	3710      	adds	r7, #16
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}

0800c758 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b084      	sub	sp, #16
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c768:	2b01      	cmp	r3, #1
 800c76a:	d101      	bne.n	800c770 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c76c:	2302      	movs	r3, #2
 800c76e:	e02d      	b.n	800c7cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2201      	movs	r2, #1
 800c774:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2224      	movs	r2, #36	@ 0x24
 800c77c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	681a      	ldr	r2, [r3, #0]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f022 0201 	bic.w	r2, r2, #1
 800c796:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	689b      	ldr	r3, [r3, #8]
 800c79e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	683a      	ldr	r2, [r7, #0]
 800c7a8:	430a      	orrs	r2, r1
 800c7aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 f811 	bl	800c7d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	68fa      	ldr	r2, [r7, #12]
 800c7b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2220      	movs	r2, #32
 800c7be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c7ca:	2300      	movs	r3, #0
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3710      	adds	r7, #16
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b085      	sub	sp, #20
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d108      	bne.n	800c7f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c7f4:	e031      	b.n	800c85a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c7f6:	2310      	movs	r3, #16
 800c7f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c7fa:	2310      	movs	r3, #16
 800c7fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	689b      	ldr	r3, [r3, #8]
 800c804:	0e5b      	lsrs	r3, r3, #25
 800c806:	b2db      	uxtb	r3, r3
 800c808:	f003 0307 	and.w	r3, r3, #7
 800c80c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	689b      	ldr	r3, [r3, #8]
 800c814:	0f5b      	lsrs	r3, r3, #29
 800c816:	b2db      	uxtb	r3, r3
 800c818:	f003 0307 	and.w	r3, r3, #7
 800c81c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c81e:	7bbb      	ldrb	r3, [r7, #14]
 800c820:	7b3a      	ldrb	r2, [r7, #12]
 800c822:	4911      	ldr	r1, [pc, #68]	@ (800c868 <UARTEx_SetNbDataToProcess+0x94>)
 800c824:	5c8a      	ldrb	r2, [r1, r2]
 800c826:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c82a:	7b3a      	ldrb	r2, [r7, #12]
 800c82c:	490f      	ldr	r1, [pc, #60]	@ (800c86c <UARTEx_SetNbDataToProcess+0x98>)
 800c82e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c830:	fb93 f3f2 	sdiv	r3, r3, r2
 800c834:	b29a      	uxth	r2, r3
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c83c:	7bfb      	ldrb	r3, [r7, #15]
 800c83e:	7b7a      	ldrb	r2, [r7, #13]
 800c840:	4909      	ldr	r1, [pc, #36]	@ (800c868 <UARTEx_SetNbDataToProcess+0x94>)
 800c842:	5c8a      	ldrb	r2, [r1, r2]
 800c844:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c848:	7b7a      	ldrb	r2, [r7, #13]
 800c84a:	4908      	ldr	r1, [pc, #32]	@ (800c86c <UARTEx_SetNbDataToProcess+0x98>)
 800c84c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c84e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c852:	b29a      	uxth	r2, r3
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c85a:	bf00      	nop
 800c85c:	3714      	adds	r7, #20
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop
 800c868:	08013f08 	.word	0x08013f08
 800c86c:	08013f10 	.word	0x08013f10

0800c870 <__NVIC_SetPriority>:
{
 800c870:	b480      	push	{r7}
 800c872:	b083      	sub	sp, #12
 800c874:	af00      	add	r7, sp, #0
 800c876:	4603      	mov	r3, r0
 800c878:	6039      	str	r1, [r7, #0]
 800c87a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c87c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c880:	2b00      	cmp	r3, #0
 800c882:	db0a      	blt.n	800c89a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	b2da      	uxtb	r2, r3
 800c888:	490c      	ldr	r1, [pc, #48]	@ (800c8bc <__NVIC_SetPriority+0x4c>)
 800c88a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c88e:	0112      	lsls	r2, r2, #4
 800c890:	b2d2      	uxtb	r2, r2
 800c892:	440b      	add	r3, r1
 800c894:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c898:	e00a      	b.n	800c8b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	b2da      	uxtb	r2, r3
 800c89e:	4908      	ldr	r1, [pc, #32]	@ (800c8c0 <__NVIC_SetPriority+0x50>)
 800c8a0:	88fb      	ldrh	r3, [r7, #6]
 800c8a2:	f003 030f 	and.w	r3, r3, #15
 800c8a6:	3b04      	subs	r3, #4
 800c8a8:	0112      	lsls	r2, r2, #4
 800c8aa:	b2d2      	uxtb	r2, r2
 800c8ac:	440b      	add	r3, r1
 800c8ae:	761a      	strb	r2, [r3, #24]
}
 800c8b0:	bf00      	nop
 800c8b2:	370c      	adds	r7, #12
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ba:	4770      	bx	lr
 800c8bc:	e000e100 	.word	0xe000e100
 800c8c0:	e000ed00 	.word	0xe000ed00

0800c8c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c8c8:	4b05      	ldr	r3, [pc, #20]	@ (800c8e0 <SysTick_Handler+0x1c>)
 800c8ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c8cc:	f002 f94e 	bl	800eb6c <xTaskGetSchedulerState>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	2b01      	cmp	r3, #1
 800c8d4:	d001      	beq.n	800c8da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c8d6:	f003 fa4f 	bl	800fd78 <xPortSysTickHandler>
  }
}
 800c8da:	bf00      	nop
 800c8dc:	bd80      	pop	{r7, pc}
 800c8de:	bf00      	nop
 800c8e0:	e000e010 	.word	0xe000e010

0800c8e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c8e8:	2100      	movs	r1, #0
 800c8ea:	f06f 0004 	mvn.w	r0, #4
 800c8ee:	f7ff ffbf 	bl	800c870 <__NVIC_SetPriority>
#endif
}
 800c8f2:	bf00      	nop
 800c8f4:	bd80      	pop	{r7, pc}
	...

0800c8f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c8f8:	b480      	push	{r7}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8fe:	f3ef 8305 	mrs	r3, IPSR
 800c902:	603b      	str	r3, [r7, #0]
  return(result);
 800c904:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c906:	2b00      	cmp	r3, #0
 800c908:	d003      	beq.n	800c912 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c90a:	f06f 0305 	mvn.w	r3, #5
 800c90e:	607b      	str	r3, [r7, #4]
 800c910:	e00c      	b.n	800c92c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c912:	4b0a      	ldr	r3, [pc, #40]	@ (800c93c <osKernelInitialize+0x44>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d105      	bne.n	800c926 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c91a:	4b08      	ldr	r3, [pc, #32]	@ (800c93c <osKernelInitialize+0x44>)
 800c91c:	2201      	movs	r2, #1
 800c91e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c920:	2300      	movs	r3, #0
 800c922:	607b      	str	r3, [r7, #4]
 800c924:	e002      	b.n	800c92c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c926:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c92a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c92c:	687b      	ldr	r3, [r7, #4]
}
 800c92e:	4618      	mov	r0, r3
 800c930:	370c      	adds	r7, #12
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr
 800c93a:	bf00      	nop
 800c93c:	240018b4 	.word	0x240018b4

0800c940 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c940:	b580      	push	{r7, lr}
 800c942:	b082      	sub	sp, #8
 800c944:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c946:	f3ef 8305 	mrs	r3, IPSR
 800c94a:	603b      	str	r3, [r7, #0]
  return(result);
 800c94c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d003      	beq.n	800c95a <osKernelStart+0x1a>
    stat = osErrorISR;
 800c952:	f06f 0305 	mvn.w	r3, #5
 800c956:	607b      	str	r3, [r7, #4]
 800c958:	e010      	b.n	800c97c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c95a:	4b0b      	ldr	r3, [pc, #44]	@ (800c988 <osKernelStart+0x48>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	2b01      	cmp	r3, #1
 800c960:	d109      	bne.n	800c976 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c962:	f7ff ffbf 	bl	800c8e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c966:	4b08      	ldr	r3, [pc, #32]	@ (800c988 <osKernelStart+0x48>)
 800c968:	2202      	movs	r2, #2
 800c96a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c96c:	f001 fc8a 	bl	800e284 <vTaskStartScheduler>
      stat = osOK;
 800c970:	2300      	movs	r3, #0
 800c972:	607b      	str	r3, [r7, #4]
 800c974:	e002      	b.n	800c97c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c976:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c97a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c97c:	687b      	ldr	r3, [r7, #4]
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3708      	adds	r7, #8
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}
 800c986:	bf00      	nop
 800c988:	240018b4 	.word	0x240018b4

0800c98c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b08e      	sub	sp, #56	@ 0x38
 800c990:	af04      	add	r7, sp, #16
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c998:	2300      	movs	r3, #0
 800c99a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c99c:	f3ef 8305 	mrs	r3, IPSR
 800c9a0:	617b      	str	r3, [r7, #20]
  return(result);
 800c9a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d17e      	bne.n	800caa6 <osThreadNew+0x11a>
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d07b      	beq.n	800caa6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c9ae:	2380      	movs	r3, #128	@ 0x80
 800c9b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c9b2:	2318      	movs	r3, #24
 800c9b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c9ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c9be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d045      	beq.n	800ca52 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d002      	beq.n	800c9d4 <osThreadNew+0x48>
        name = attr->name;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	699b      	ldr	r3, [r3, #24]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d002      	beq.n	800c9e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	699b      	ldr	r3, [r3, #24]
 800c9e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c9e2:	69fb      	ldr	r3, [r7, #28]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d008      	beq.n	800c9fa <osThreadNew+0x6e>
 800c9e8:	69fb      	ldr	r3, [r7, #28]
 800c9ea:	2b38      	cmp	r3, #56	@ 0x38
 800c9ec:	d805      	bhi.n	800c9fa <osThreadNew+0x6e>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	f003 0301 	and.w	r3, r3, #1
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d001      	beq.n	800c9fe <osThreadNew+0x72>
        return (NULL);
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	e054      	b.n	800caa8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	695b      	ldr	r3, [r3, #20]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d003      	beq.n	800ca0e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	695b      	ldr	r3, [r3, #20]
 800ca0a:	089b      	lsrs	r3, r3, #2
 800ca0c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	689b      	ldr	r3, [r3, #8]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d00e      	beq.n	800ca34 <osThreadNew+0xa8>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	68db      	ldr	r3, [r3, #12]
 800ca1a:	2ba7      	cmp	r3, #167	@ 0xa7
 800ca1c:	d90a      	bls.n	800ca34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d006      	beq.n	800ca34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	695b      	ldr	r3, [r3, #20]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d002      	beq.n	800ca34 <osThreadNew+0xa8>
        mem = 1;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	61bb      	str	r3, [r7, #24]
 800ca32:	e010      	b.n	800ca56 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	689b      	ldr	r3, [r3, #8]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d10c      	bne.n	800ca56 <osThreadNew+0xca>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	68db      	ldr	r3, [r3, #12]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d108      	bne.n	800ca56 <osThreadNew+0xca>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	691b      	ldr	r3, [r3, #16]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d104      	bne.n	800ca56 <osThreadNew+0xca>
          mem = 0;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	61bb      	str	r3, [r7, #24]
 800ca50:	e001      	b.n	800ca56 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ca52:	2300      	movs	r3, #0
 800ca54:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ca56:	69bb      	ldr	r3, [r7, #24]
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d110      	bne.n	800ca7e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ca60:	687a      	ldr	r2, [r7, #4]
 800ca62:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ca64:	9202      	str	r2, [sp, #8]
 800ca66:	9301      	str	r3, [sp, #4]
 800ca68:	69fb      	ldr	r3, [r7, #28]
 800ca6a:	9300      	str	r3, [sp, #0]
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	6a3a      	ldr	r2, [r7, #32]
 800ca70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ca72:	68f8      	ldr	r0, [r7, #12]
 800ca74:	f001 fa12 	bl	800de9c <xTaskCreateStatic>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	613b      	str	r3, [r7, #16]
 800ca7c:	e013      	b.n	800caa6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ca7e:	69bb      	ldr	r3, [r7, #24]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d110      	bne.n	800caa6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ca84:	6a3b      	ldr	r3, [r7, #32]
 800ca86:	b29a      	uxth	r2, r3
 800ca88:	f107 0310 	add.w	r3, r7, #16
 800ca8c:	9301      	str	r3, [sp, #4]
 800ca8e:	69fb      	ldr	r3, [r7, #28]
 800ca90:	9300      	str	r3, [sp, #0]
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ca96:	68f8      	ldr	r0, [r7, #12]
 800ca98:	f001 fa60 	bl	800df5c <xTaskCreate>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	2b01      	cmp	r3, #1
 800caa0:	d001      	beq.n	800caa6 <osThreadNew+0x11a>
            hTask = NULL;
 800caa2:	2300      	movs	r3, #0
 800caa4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800caa6:	693b      	ldr	r3, [r7, #16]
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3728      	adds	r7, #40	@ 0x28
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b088      	sub	sp, #32
 800cab4:	af02      	add	r7, sp, #8
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d002      	beq.n	800caca <osThreadFlagsSet+0x1a>
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	da03      	bge.n	800cad2 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800caca:	f06f 0303 	mvn.w	r3, #3
 800cace:	60fb      	str	r3, [r7, #12]
 800cad0:	e035      	b.n	800cb3e <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800cad2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cad6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cad8:	f3ef 8305 	mrs	r3, IPSR
 800cadc:	613b      	str	r3, [r7, #16]
  return(result);
 800cade:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d01f      	beq.n	800cb24 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800cae4:	2300      	movs	r3, #0
 800cae6:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800cae8:	f107 0308 	add.w	r3, r7, #8
 800caec:	9300      	str	r3, [sp, #0]
 800caee:	2300      	movs	r3, #0
 800caf0:	2201      	movs	r2, #1
 800caf2:	6839      	ldr	r1, [r7, #0]
 800caf4:	6978      	ldr	r0, [r7, #20]
 800caf6:	f002 fae9 	bl	800f0cc <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800cafa:	f107 030c 	add.w	r3, r7, #12
 800cafe:	2200      	movs	r2, #0
 800cb00:	9200      	str	r2, [sp, #0]
 800cb02:	2200      	movs	r2, #0
 800cb04:	2100      	movs	r1, #0
 800cb06:	6978      	ldr	r0, [r7, #20]
 800cb08:	f002 fae0 	bl	800f0cc <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d015      	beq.n	800cb3e <osThreadFlagsSet+0x8e>
 800cb12:	4b0d      	ldr	r3, [pc, #52]	@ (800cb48 <osThreadFlagsSet+0x98>)
 800cb14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb18:	601a      	str	r2, [r3, #0]
 800cb1a:	f3bf 8f4f 	dsb	sy
 800cb1e:	f3bf 8f6f 	isb	sy
 800cb22:	e00c      	b.n	800cb3e <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800cb24:	2300      	movs	r3, #0
 800cb26:	2201      	movs	r2, #1
 800cb28:	6839      	ldr	r1, [r7, #0]
 800cb2a:	6978      	ldr	r0, [r7, #20]
 800cb2c:	f002 fa0c 	bl	800ef48 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800cb30:	f107 030c 	add.w	r3, r7, #12
 800cb34:	2200      	movs	r2, #0
 800cb36:	2100      	movs	r1, #0
 800cb38:	6978      	ldr	r0, [r7, #20]
 800cb3a:	f002 fa05 	bl	800ef48 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800cb3e:	68fb      	ldr	r3, [r7, #12]
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3718      	adds	r7, #24
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	e000ed04 	.word	0xe000ed04

0800cb4c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b08c      	sub	sp, #48	@ 0x30
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	60f8      	str	r0, [r7, #12]
 800cb54:	60b9      	str	r1, [r7, #8]
 800cb56:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb58:	f3ef 8305 	mrs	r3, IPSR
 800cb5c:	617b      	str	r3, [r7, #20]
  return(result);
 800cb5e:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d003      	beq.n	800cb6c <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800cb64:	f06f 0305 	mvn.w	r3, #5
 800cb68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cb6a:	e06b      	b.n	800cc44 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	da03      	bge.n	800cb7a <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800cb72:	f06f 0303 	mvn.w	r3, #3
 800cb76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cb78:	e064      	b.n	800cc44 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	f003 0302 	and.w	r3, r3, #2
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d002      	beq.n	800cb8a <osThreadFlagsWait+0x3e>
      clear = 0U;
 800cb84:	2300      	movs	r3, #0
 800cb86:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cb88:	e001      	b.n	800cb8e <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800cb96:	f001 fc91 	bl	800e4bc <xTaskGetTickCount>
 800cb9a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800cb9c:	f107 0210 	add.w	r2, r7, #16
 800cba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cba2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cba4:	2000      	movs	r0, #0
 800cba6:	f002 f96f 	bl	800ee88 <xTaskNotifyWait>
 800cbaa:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800cbac:	69fb      	ldr	r3, [r7, #28]
 800cbae:	2b01      	cmp	r3, #1
 800cbb0:	d137      	bne.n	800cc22 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800cbb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	4013      	ands	r3, r2
 800cbb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cbbe:	4313      	orrs	r3, r2
 800cbc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	f003 0301 	and.w	r3, r3, #1
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d00c      	beq.n	800cbe6 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800cbcc:	68fa      	ldr	r2, [r7, #12]
 800cbce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbd0:	4013      	ands	r3, r2
 800cbd2:	68fa      	ldr	r2, [r7, #12]
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d032      	beq.n	800cc3e <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d10f      	bne.n	800cbfe <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800cbde:	f06f 0302 	mvn.w	r3, #2
 800cbe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800cbe4:	e02e      	b.n	800cc44 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800cbe6:	68fa      	ldr	r2, [r7, #12]
 800cbe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbea:	4013      	ands	r3, r2
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d128      	bne.n	800cc42 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d103      	bne.n	800cbfe <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800cbf6:	f06f 0302 	mvn.w	r3, #2
 800cbfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800cbfc:	e022      	b.n	800cc44 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800cbfe:	f001 fc5d 	bl	800e4bc <xTaskGetTickCount>
 800cc02:	4602      	mov	r2, r0
 800cc04:	6a3b      	ldr	r3, [r7, #32]
 800cc06:	1ad3      	subs	r3, r2, r3
 800cc08:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800cc0a:	69ba      	ldr	r2, [r7, #24]
 800cc0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d902      	bls.n	800cc18 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800cc12:	2300      	movs	r3, #0
 800cc14:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc16:	e00e      	b.n	800cc36 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800cc18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc1a:	69bb      	ldr	r3, [r7, #24]
 800cc1c:	1ad3      	subs	r3, r2, r3
 800cc1e:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc20:	e009      	b.n	800cc36 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d103      	bne.n	800cc30 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800cc28:	f06f 0302 	mvn.w	r3, #2
 800cc2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc2e:	e002      	b.n	800cc36 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800cc30:	f06f 0301 	mvn.w	r3, #1
 800cc34:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800cc36:	69fb      	ldr	r3, [r7, #28]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d1af      	bne.n	800cb9c <osThreadFlagsWait+0x50>
 800cc3c:	e002      	b.n	800cc44 <osThreadFlagsWait+0xf8>
            break;
 800cc3e:	bf00      	nop
 800cc40:	e000      	b.n	800cc44 <osThreadFlagsWait+0xf8>
            break;
 800cc42:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800cc44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3730      	adds	r7, #48	@ 0x30
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}

0800cc4e <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cc4e:	b580      	push	{r7, lr}
 800cc50:	b084      	sub	sp, #16
 800cc52:	af00      	add	r7, sp, #0
 800cc54:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc56:	f3ef 8305 	mrs	r3, IPSR
 800cc5a:	60bb      	str	r3, [r7, #8]
  return(result);
 800cc5c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d003      	beq.n	800cc6a <osDelay+0x1c>
    stat = osErrorISR;
 800cc62:	f06f 0305 	mvn.w	r3, #5
 800cc66:	60fb      	str	r3, [r7, #12]
 800cc68:	e007      	b.n	800cc7a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d002      	beq.n	800cc7a <osDelay+0x2c>
      vTaskDelay(ticks);
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f001 facf 	bl	800e218 <vTaskDelay>
    }
  }

  return (stat);
 800cc7a:	68fb      	ldr	r3, [r7, #12]
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3710      	adds	r7, #16
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b088      	sub	sp, #32
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc90:	f3ef 8305 	mrs	r3, IPSR
 800cc94:	60bb      	str	r3, [r7, #8]
  return(result);
 800cc96:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d174      	bne.n	800cd86 <osMutexNew+0x102>
    if (attr != NULL) {
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d003      	beq.n	800ccaa <osMutexNew+0x26>
      type = attr->attr_bits;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	685b      	ldr	r3, [r3, #4]
 800cca6:	61bb      	str	r3, [r7, #24]
 800cca8:	e001      	b.n	800ccae <osMutexNew+0x2a>
    } else {
      type = 0U;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ccae:	69bb      	ldr	r3, [r7, #24]
 800ccb0:	f003 0301 	and.w	r3, r3, #1
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d002      	beq.n	800ccbe <osMutexNew+0x3a>
      rmtx = 1U;
 800ccb8:	2301      	movs	r3, #1
 800ccba:	617b      	str	r3, [r7, #20]
 800ccbc:	e001      	b.n	800ccc2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ccc2:	69bb      	ldr	r3, [r7, #24]
 800ccc4:	f003 0308 	and.w	r3, r3, #8
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d15c      	bne.n	800cd86 <osMutexNew+0x102>
      mem = -1;
 800cccc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ccd0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d015      	beq.n	800cd04 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	689b      	ldr	r3, [r3, #8]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d006      	beq.n	800ccee <osMutexNew+0x6a>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	68db      	ldr	r3, [r3, #12]
 800cce4:	2b4f      	cmp	r3, #79	@ 0x4f
 800cce6:	d902      	bls.n	800ccee <osMutexNew+0x6a>
          mem = 1;
 800cce8:	2301      	movs	r3, #1
 800ccea:	613b      	str	r3, [r7, #16]
 800ccec:	e00c      	b.n	800cd08 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	689b      	ldr	r3, [r3, #8]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d108      	bne.n	800cd08 <osMutexNew+0x84>
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	68db      	ldr	r3, [r3, #12]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d104      	bne.n	800cd08 <osMutexNew+0x84>
            mem = 0;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	613b      	str	r3, [r7, #16]
 800cd02:	e001      	b.n	800cd08 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800cd04:	2300      	movs	r3, #0
 800cd06:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	2b01      	cmp	r3, #1
 800cd0c:	d112      	bne.n	800cd34 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d007      	beq.n	800cd24 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	689b      	ldr	r3, [r3, #8]
 800cd18:	4619      	mov	r1, r3
 800cd1a:	2004      	movs	r0, #4
 800cd1c:	f000 fb1f 	bl	800d35e <xQueueCreateMutexStatic>
 800cd20:	61f8      	str	r0, [r7, #28]
 800cd22:	e016      	b.n	800cd52 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	689b      	ldr	r3, [r3, #8]
 800cd28:	4619      	mov	r1, r3
 800cd2a:	2001      	movs	r0, #1
 800cd2c:	f000 fb17 	bl	800d35e <xQueueCreateMutexStatic>
 800cd30:	61f8      	str	r0, [r7, #28]
 800cd32:	e00e      	b.n	800cd52 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d10b      	bne.n	800cd52 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d004      	beq.n	800cd4a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800cd40:	2004      	movs	r0, #4
 800cd42:	f000 faf4 	bl	800d32e <xQueueCreateMutex>
 800cd46:	61f8      	str	r0, [r7, #28]
 800cd48:	e003      	b.n	800cd52 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800cd4a:	2001      	movs	r0, #1
 800cd4c:	f000 faef 	bl	800d32e <xQueueCreateMutex>
 800cd50:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800cd52:	69fb      	ldr	r3, [r7, #28]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d00c      	beq.n	800cd72 <osMutexNew+0xee>
        if (attr != NULL) {
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d003      	beq.n	800cd66 <osMutexNew+0xe2>
          name = attr->name;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	60fb      	str	r3, [r7, #12]
 800cd64:	e001      	b.n	800cd6a <osMutexNew+0xe6>
        } else {
          name = NULL;
 800cd66:	2300      	movs	r3, #0
 800cd68:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800cd6a:	68f9      	ldr	r1, [r7, #12]
 800cd6c:	69f8      	ldr	r0, [r7, #28]
 800cd6e:	f001 f837 	bl	800dde0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800cd72:	69fb      	ldr	r3, [r7, #28]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d006      	beq.n	800cd86 <osMutexNew+0x102>
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d003      	beq.n	800cd86 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800cd7e:	69fb      	ldr	r3, [r7, #28]
 800cd80:	f043 0301 	orr.w	r3, r3, #1
 800cd84:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800cd86:	69fb      	ldr	r3, [r7, #28]
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3720      	adds	r7, #32
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b086      	sub	sp, #24
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f023 0301 	bic.w	r3, r3, #1
 800cda0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f003 0301 	and.w	r3, r3, #1
 800cda8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cdae:	f3ef 8305 	mrs	r3, IPSR
 800cdb2:	60bb      	str	r3, [r7, #8]
  return(result);
 800cdb4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d003      	beq.n	800cdc2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800cdba:	f06f 0305 	mvn.w	r3, #5
 800cdbe:	617b      	str	r3, [r7, #20]
 800cdc0:	e02c      	b.n	800ce1c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d103      	bne.n	800cdd0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800cdc8:	f06f 0303 	mvn.w	r3, #3
 800cdcc:	617b      	str	r3, [r7, #20]
 800cdce:	e025      	b.n	800ce1c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d011      	beq.n	800cdfa <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800cdd6:	6839      	ldr	r1, [r7, #0]
 800cdd8:	6938      	ldr	r0, [r7, #16]
 800cdda:	f000 fb10 	bl	800d3fe <xQueueTakeMutexRecursive>
 800cdde:	4603      	mov	r3, r0
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d01b      	beq.n	800ce1c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d003      	beq.n	800cdf2 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800cdea:	f06f 0301 	mvn.w	r3, #1
 800cdee:	617b      	str	r3, [r7, #20]
 800cdf0:	e014      	b.n	800ce1c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800cdf2:	f06f 0302 	mvn.w	r3, #2
 800cdf6:	617b      	str	r3, [r7, #20]
 800cdf8:	e010      	b.n	800ce1c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800cdfa:	6839      	ldr	r1, [r7, #0]
 800cdfc:	6938      	ldr	r0, [r7, #16]
 800cdfe:	f000 fdb7 	bl	800d970 <xQueueSemaphoreTake>
 800ce02:	4603      	mov	r3, r0
 800ce04:	2b01      	cmp	r3, #1
 800ce06:	d009      	beq.n	800ce1c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d003      	beq.n	800ce16 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800ce0e:	f06f 0301 	mvn.w	r3, #1
 800ce12:	617b      	str	r3, [r7, #20]
 800ce14:	e002      	b.n	800ce1c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ce16:	f06f 0302 	mvn.w	r3, #2
 800ce1a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800ce1c:	697b      	ldr	r3, [r7, #20]
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3718      	adds	r7, #24
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}

0800ce26 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ce26:	b580      	push	{r7, lr}
 800ce28:	b086      	sub	sp, #24
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f023 0301 	bic.w	r3, r3, #1
 800ce34:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f003 0301 	and.w	r3, r3, #1
 800ce3c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce42:	f3ef 8305 	mrs	r3, IPSR
 800ce46:	60bb      	str	r3, [r7, #8]
  return(result);
 800ce48:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d003      	beq.n	800ce56 <osMutexRelease+0x30>
    stat = osErrorISR;
 800ce4e:	f06f 0305 	mvn.w	r3, #5
 800ce52:	617b      	str	r3, [r7, #20]
 800ce54:	e01f      	b.n	800ce96 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d103      	bne.n	800ce64 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800ce5c:	f06f 0303 	mvn.w	r3, #3
 800ce60:	617b      	str	r3, [r7, #20]
 800ce62:	e018      	b.n	800ce96 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d009      	beq.n	800ce7e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ce6a:	6938      	ldr	r0, [r7, #16]
 800ce6c:	f000 fa92 	bl	800d394 <xQueueGiveMutexRecursive>
 800ce70:	4603      	mov	r3, r0
 800ce72:	2b01      	cmp	r3, #1
 800ce74:	d00f      	beq.n	800ce96 <osMutexRelease+0x70>
        stat = osErrorResource;
 800ce76:	f06f 0302 	mvn.w	r3, #2
 800ce7a:	617b      	str	r3, [r7, #20]
 800ce7c:	e00b      	b.n	800ce96 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ce7e:	2300      	movs	r3, #0
 800ce80:	2200      	movs	r2, #0
 800ce82:	2100      	movs	r1, #0
 800ce84:	6938      	ldr	r0, [r7, #16]
 800ce86:	f000 faf1 	bl	800d46c <xQueueGenericSend>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d002      	beq.n	800ce96 <osMutexRelease+0x70>
        stat = osErrorResource;
 800ce90:	f06f 0302 	mvn.w	r3, #2
 800ce94:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ce96:	697b      	ldr	r3, [r7, #20]
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3718      	adds	r7, #24
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cea0:	b480      	push	{r7}
 800cea2:	b085      	sub	sp, #20
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	60f8      	str	r0, [r7, #12]
 800cea8:	60b9      	str	r1, [r7, #8]
 800ceaa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	4a07      	ldr	r2, [pc, #28]	@ (800cecc <vApplicationGetIdleTaskMemory+0x2c>)
 800ceb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	4a06      	ldr	r2, [pc, #24]	@ (800ced0 <vApplicationGetIdleTaskMemory+0x30>)
 800ceb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2280      	movs	r2, #128	@ 0x80
 800cebc:	601a      	str	r2, [r3, #0]
}
 800cebe:	bf00      	nop
 800cec0:	3714      	adds	r7, #20
 800cec2:	46bd      	mov	sp, r7
 800cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec8:	4770      	bx	lr
 800ceca:	bf00      	nop
 800cecc:	240018b8 	.word	0x240018b8
 800ced0:	24001960 	.word	0x24001960

0800ced4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ced4:	b480      	push	{r7}
 800ced6:	b085      	sub	sp, #20
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	60b9      	str	r1, [r7, #8]
 800cede:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	4a07      	ldr	r2, [pc, #28]	@ (800cf00 <vApplicationGetTimerTaskMemory+0x2c>)
 800cee4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	4a06      	ldr	r2, [pc, #24]	@ (800cf04 <vApplicationGetTimerTaskMemory+0x30>)
 800ceea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cef2:	601a      	str	r2, [r3, #0]
}
 800cef4:	bf00      	nop
 800cef6:	3714      	adds	r7, #20
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr
 800cf00:	24001b60 	.word	0x24001b60
 800cf04:	24001c08 	.word	0x24001c08

0800cf08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b083      	sub	sp, #12
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f103 0208 	add.w	r2, r3, #8
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cf20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f103 0208 	add.w	r2, r3, #8
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f103 0208 	add.w	r2, r3, #8
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cf3c:	bf00      	nop
 800cf3e:	370c      	adds	r7, #12
 800cf40:	46bd      	mov	sp, r7
 800cf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf46:	4770      	bx	lr

0800cf48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b083      	sub	sp, #12
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2200      	movs	r2, #0
 800cf54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cf56:	bf00      	nop
 800cf58:	370c      	adds	r7, #12
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf60:	4770      	bx	lr

0800cf62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cf62:	b480      	push	{r7}
 800cf64:	b085      	sub	sp, #20
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	6078      	str	r0, [r7, #4]
 800cf6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	685b      	ldr	r3, [r3, #4]
 800cf70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	68fa      	ldr	r2, [r7, #12]
 800cf76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	689a      	ldr	r2, [r3, #8]
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	689b      	ldr	r3, [r3, #8]
 800cf84:	683a      	ldr	r2, [r7, #0]
 800cf86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	683a      	ldr	r2, [r7, #0]
 800cf8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	687a      	ldr	r2, [r7, #4]
 800cf92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	1c5a      	adds	r2, r3, #1
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	601a      	str	r2, [r3, #0]
}
 800cf9e:	bf00      	nop
 800cfa0:	3714      	adds	r7, #20
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa8:	4770      	bx	lr

0800cfaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cfaa:	b480      	push	{r7}
 800cfac:	b085      	sub	sp, #20
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	6078      	str	r0, [r7, #4]
 800cfb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cfc0:	d103      	bne.n	800cfca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	691b      	ldr	r3, [r3, #16]
 800cfc6:	60fb      	str	r3, [r7, #12]
 800cfc8:	e00c      	b.n	800cfe4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	3308      	adds	r3, #8
 800cfce:	60fb      	str	r3, [r7, #12]
 800cfd0:	e002      	b.n	800cfd8 <vListInsert+0x2e>
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	685b      	ldr	r3, [r3, #4]
 800cfd6:	60fb      	str	r3, [r7, #12]
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	68ba      	ldr	r2, [r7, #8]
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d2f6      	bcs.n	800cfd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	685a      	ldr	r2, [r3, #4]
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	685b      	ldr	r3, [r3, #4]
 800cff0:	683a      	ldr	r2, [r7, #0]
 800cff2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	68fa      	ldr	r2, [r7, #12]
 800cff8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	683a      	ldr	r2, [r7, #0]
 800cffe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	687a      	ldr	r2, [r7, #4]
 800d004:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	1c5a      	adds	r2, r3, #1
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	601a      	str	r2, [r3, #0]
}
 800d010:	bf00      	nop
 800d012:	3714      	adds	r7, #20
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr

0800d01c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d01c:	b480      	push	{r7}
 800d01e:	b085      	sub	sp, #20
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	691b      	ldr	r3, [r3, #16]
 800d028:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	687a      	ldr	r2, [r7, #4]
 800d030:	6892      	ldr	r2, [r2, #8]
 800d032:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	689b      	ldr	r3, [r3, #8]
 800d038:	687a      	ldr	r2, [r7, #4]
 800d03a:	6852      	ldr	r2, [r2, #4]
 800d03c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	685b      	ldr	r3, [r3, #4]
 800d042:	687a      	ldr	r2, [r7, #4]
 800d044:	429a      	cmp	r2, r3
 800d046:	d103      	bne.n	800d050 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	689a      	ldr	r2, [r3, #8]
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2200      	movs	r2, #0
 800d054:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	1e5a      	subs	r2, r3, #1
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	681b      	ldr	r3, [r3, #0]
}
 800d064:	4618      	mov	r0, r3
 800d066:	3714      	adds	r7, #20
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr

0800d070 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d10b      	bne.n	800d09c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d088:	f383 8811 	msr	BASEPRI, r3
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	f3bf 8f4f 	dsb	sy
 800d094:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d096:	bf00      	nop
 800d098:	bf00      	nop
 800d09a:	e7fd      	b.n	800d098 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d09c:	f002 fddc 	bl	800fc58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	681a      	ldr	r2, [r3, #0]
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0a8:	68f9      	ldr	r1, [r7, #12]
 800d0aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d0ac:	fb01 f303 	mul.w	r3, r1, r3
 800d0b0:	441a      	add	r2, r3
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	681a      	ldr	r2, [r3, #0]
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681a      	ldr	r2, [r3, #0]
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0cc:	3b01      	subs	r3, #1
 800d0ce:	68f9      	ldr	r1, [r7, #12]
 800d0d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d0d2:	fb01 f303 	mul.w	r3, r1, r3
 800d0d6:	441a      	add	r2, r3
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	22ff      	movs	r2, #255	@ 0xff
 800d0e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	22ff      	movs	r2, #255	@ 0xff
 800d0e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d114      	bne.n	800d11c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	691b      	ldr	r3, [r3, #16]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d01a      	beq.n	800d130 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	3310      	adds	r3, #16
 800d0fe:	4618      	mov	r0, r3
 800d100:	f001 fb5e 	bl	800e7c0 <xTaskRemoveFromEventList>
 800d104:	4603      	mov	r3, r0
 800d106:	2b00      	cmp	r3, #0
 800d108:	d012      	beq.n	800d130 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d10a:	4b0d      	ldr	r3, [pc, #52]	@ (800d140 <xQueueGenericReset+0xd0>)
 800d10c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d110:	601a      	str	r2, [r3, #0]
 800d112:	f3bf 8f4f 	dsb	sy
 800d116:	f3bf 8f6f 	isb	sy
 800d11a:	e009      	b.n	800d130 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	3310      	adds	r3, #16
 800d120:	4618      	mov	r0, r3
 800d122:	f7ff fef1 	bl	800cf08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	3324      	adds	r3, #36	@ 0x24
 800d12a:	4618      	mov	r0, r3
 800d12c:	f7ff feec 	bl	800cf08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d130:	f002 fdc4 	bl	800fcbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d134:	2301      	movs	r3, #1
}
 800d136:	4618      	mov	r0, r3
 800d138:	3710      	adds	r7, #16
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	e000ed04 	.word	0xe000ed04

0800d144 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d144:	b580      	push	{r7, lr}
 800d146:	b08e      	sub	sp, #56	@ 0x38
 800d148:	af02      	add	r7, sp, #8
 800d14a:	60f8      	str	r0, [r7, #12]
 800d14c:	60b9      	str	r1, [r7, #8]
 800d14e:	607a      	str	r2, [r7, #4]
 800d150:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d10b      	bne.n	800d170 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d15c:	f383 8811 	msr	BASEPRI, r3
 800d160:	f3bf 8f6f 	isb	sy
 800d164:	f3bf 8f4f 	dsb	sy
 800d168:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d16a:	bf00      	nop
 800d16c:	bf00      	nop
 800d16e:	e7fd      	b.n	800d16c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d10b      	bne.n	800d18e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d17a:	f383 8811 	msr	BASEPRI, r3
 800d17e:	f3bf 8f6f 	isb	sy
 800d182:	f3bf 8f4f 	dsb	sy
 800d186:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d188:	bf00      	nop
 800d18a:	bf00      	nop
 800d18c:	e7fd      	b.n	800d18a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d002      	beq.n	800d19a <xQueueGenericCreateStatic+0x56>
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d001      	beq.n	800d19e <xQueueGenericCreateStatic+0x5a>
 800d19a:	2301      	movs	r3, #1
 800d19c:	e000      	b.n	800d1a0 <xQueueGenericCreateStatic+0x5c>
 800d19e:	2300      	movs	r3, #0
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d10b      	bne.n	800d1bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d1a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1a8:	f383 8811 	msr	BASEPRI, r3
 800d1ac:	f3bf 8f6f 	isb	sy
 800d1b0:	f3bf 8f4f 	dsb	sy
 800d1b4:	623b      	str	r3, [r7, #32]
}
 800d1b6:	bf00      	nop
 800d1b8:	bf00      	nop
 800d1ba:	e7fd      	b.n	800d1b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d102      	bne.n	800d1c8 <xQueueGenericCreateStatic+0x84>
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d101      	bne.n	800d1cc <xQueueGenericCreateStatic+0x88>
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	e000      	b.n	800d1ce <xQueueGenericCreateStatic+0x8a>
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d10b      	bne.n	800d1ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d1d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1d6:	f383 8811 	msr	BASEPRI, r3
 800d1da:	f3bf 8f6f 	isb	sy
 800d1de:	f3bf 8f4f 	dsb	sy
 800d1e2:	61fb      	str	r3, [r7, #28]
}
 800d1e4:	bf00      	nop
 800d1e6:	bf00      	nop
 800d1e8:	e7fd      	b.n	800d1e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d1ea:	2350      	movs	r3, #80	@ 0x50
 800d1ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	2b50      	cmp	r3, #80	@ 0x50
 800d1f2:	d00b      	beq.n	800d20c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d1f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1f8:	f383 8811 	msr	BASEPRI, r3
 800d1fc:	f3bf 8f6f 	isb	sy
 800d200:	f3bf 8f4f 	dsb	sy
 800d204:	61bb      	str	r3, [r7, #24]
}
 800d206:	bf00      	nop
 800d208:	bf00      	nop
 800d20a:	e7fd      	b.n	800d208 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d20c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d214:	2b00      	cmp	r3, #0
 800d216:	d00d      	beq.n	800d234 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d21a:	2201      	movs	r2, #1
 800d21c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d220:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d226:	9300      	str	r3, [sp, #0]
 800d228:	4613      	mov	r3, r2
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	68b9      	ldr	r1, [r7, #8]
 800d22e:	68f8      	ldr	r0, [r7, #12]
 800d230:	f000 f840 	bl	800d2b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d236:	4618      	mov	r0, r3
 800d238:	3730      	adds	r7, #48	@ 0x30
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}

0800d23e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d23e:	b580      	push	{r7, lr}
 800d240:	b08a      	sub	sp, #40	@ 0x28
 800d242:	af02      	add	r7, sp, #8
 800d244:	60f8      	str	r0, [r7, #12]
 800d246:	60b9      	str	r1, [r7, #8]
 800d248:	4613      	mov	r3, r2
 800d24a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d10b      	bne.n	800d26a <xQueueGenericCreate+0x2c>
	__asm volatile
 800d252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d256:	f383 8811 	msr	BASEPRI, r3
 800d25a:	f3bf 8f6f 	isb	sy
 800d25e:	f3bf 8f4f 	dsb	sy
 800d262:	613b      	str	r3, [r7, #16]
}
 800d264:	bf00      	nop
 800d266:	bf00      	nop
 800d268:	e7fd      	b.n	800d266 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	68ba      	ldr	r2, [r7, #8]
 800d26e:	fb02 f303 	mul.w	r3, r2, r3
 800d272:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d274:	69fb      	ldr	r3, [r7, #28]
 800d276:	3350      	adds	r3, #80	@ 0x50
 800d278:	4618      	mov	r0, r3
 800d27a:	f002 fe0f 	bl	800fe9c <pvPortMalloc>
 800d27e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d280:	69bb      	ldr	r3, [r7, #24]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d011      	beq.n	800d2aa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d286:	69bb      	ldr	r3, [r7, #24]
 800d288:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	3350      	adds	r3, #80	@ 0x50
 800d28e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d290:	69bb      	ldr	r3, [r7, #24]
 800d292:	2200      	movs	r2, #0
 800d294:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d298:	79fa      	ldrb	r2, [r7, #7]
 800d29a:	69bb      	ldr	r3, [r7, #24]
 800d29c:	9300      	str	r3, [sp, #0]
 800d29e:	4613      	mov	r3, r2
 800d2a0:	697a      	ldr	r2, [r7, #20]
 800d2a2:	68b9      	ldr	r1, [r7, #8]
 800d2a4:	68f8      	ldr	r0, [r7, #12]
 800d2a6:	f000 f805 	bl	800d2b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d2aa:	69bb      	ldr	r3, [r7, #24]
	}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3720      	adds	r7, #32
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}

0800d2b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b084      	sub	sp, #16
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	60f8      	str	r0, [r7, #12]
 800d2bc:	60b9      	str	r1, [r7, #8]
 800d2be:	607a      	str	r2, [r7, #4]
 800d2c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d103      	bne.n	800d2d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d2c8:	69bb      	ldr	r3, [r7, #24]
 800d2ca:	69ba      	ldr	r2, [r7, #24]
 800d2cc:	601a      	str	r2, [r3, #0]
 800d2ce:	e002      	b.n	800d2d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d2d0:	69bb      	ldr	r3, [r7, #24]
 800d2d2:	687a      	ldr	r2, [r7, #4]
 800d2d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d2d6:	69bb      	ldr	r3, [r7, #24]
 800d2d8:	68fa      	ldr	r2, [r7, #12]
 800d2da:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d2dc:	69bb      	ldr	r3, [r7, #24]
 800d2de:	68ba      	ldr	r2, [r7, #8]
 800d2e0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d2e2:	2101      	movs	r1, #1
 800d2e4:	69b8      	ldr	r0, [r7, #24]
 800d2e6:	f7ff fec3 	bl	800d070 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d2ea:	69bb      	ldr	r3, [r7, #24]
 800d2ec:	78fa      	ldrb	r2, [r7, #3]
 800d2ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d2f2:	bf00      	nop
 800d2f4:	3710      	adds	r7, #16
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}

0800d2fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d2fa:	b580      	push	{r7, lr}
 800d2fc:	b082      	sub	sp, #8
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d00e      	beq.n	800d326 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2200      	movs	r2, #0
 800d30c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2200      	movs	r2, #0
 800d312:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2200      	movs	r2, #0
 800d318:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d31a:	2300      	movs	r3, #0
 800d31c:	2200      	movs	r2, #0
 800d31e:	2100      	movs	r1, #0
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f000 f8a3 	bl	800d46c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d326:	bf00      	nop
 800d328:	3708      	adds	r7, #8
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}

0800d32e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d32e:	b580      	push	{r7, lr}
 800d330:	b086      	sub	sp, #24
 800d332:	af00      	add	r7, sp, #0
 800d334:	4603      	mov	r3, r0
 800d336:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d338:	2301      	movs	r3, #1
 800d33a:	617b      	str	r3, [r7, #20]
 800d33c:	2300      	movs	r3, #0
 800d33e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d340:	79fb      	ldrb	r3, [r7, #7]
 800d342:	461a      	mov	r2, r3
 800d344:	6939      	ldr	r1, [r7, #16]
 800d346:	6978      	ldr	r0, [r7, #20]
 800d348:	f7ff ff79 	bl	800d23e <xQueueGenericCreate>
 800d34c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d34e:	68f8      	ldr	r0, [r7, #12]
 800d350:	f7ff ffd3 	bl	800d2fa <prvInitialiseMutex>

		return xNewQueue;
 800d354:	68fb      	ldr	r3, [r7, #12]
	}
 800d356:	4618      	mov	r0, r3
 800d358:	3718      	adds	r7, #24
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}

0800d35e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d35e:	b580      	push	{r7, lr}
 800d360:	b088      	sub	sp, #32
 800d362:	af02      	add	r7, sp, #8
 800d364:	4603      	mov	r3, r0
 800d366:	6039      	str	r1, [r7, #0]
 800d368:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d36a:	2301      	movs	r3, #1
 800d36c:	617b      	str	r3, [r7, #20]
 800d36e:	2300      	movs	r3, #0
 800d370:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d372:	79fb      	ldrb	r3, [r7, #7]
 800d374:	9300      	str	r3, [sp, #0]
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	2200      	movs	r2, #0
 800d37a:	6939      	ldr	r1, [r7, #16]
 800d37c:	6978      	ldr	r0, [r7, #20]
 800d37e:	f7ff fee1 	bl	800d144 <xQueueGenericCreateStatic>
 800d382:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d384:	68f8      	ldr	r0, [r7, #12]
 800d386:	f7ff ffb8 	bl	800d2fa <prvInitialiseMutex>

		return xNewQueue;
 800d38a:	68fb      	ldr	r3, [r7, #12]
	}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3718      	adds	r7, #24
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}

0800d394 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d394:	b590      	push	{r4, r7, lr}
 800d396:	b087      	sub	sp, #28
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d10b      	bne.n	800d3be <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800d3a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3aa:	f383 8811 	msr	BASEPRI, r3
 800d3ae:	f3bf 8f6f 	isb	sy
 800d3b2:	f3bf 8f4f 	dsb	sy
 800d3b6:	60fb      	str	r3, [r7, #12]
}
 800d3b8:	bf00      	nop
 800d3ba:	bf00      	nop
 800d3bc:	e7fd      	b.n	800d3ba <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	689c      	ldr	r4, [r3, #8]
 800d3c2:	f001 fbc3 	bl	800eb4c <xTaskGetCurrentTaskHandle>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	429c      	cmp	r4, r3
 800d3ca:	d111      	bne.n	800d3f0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	68db      	ldr	r3, [r3, #12]
 800d3d0:	1e5a      	subs	r2, r3, #1
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	68db      	ldr	r3, [r3, #12]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d105      	bne.n	800d3ea <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d3de:	2300      	movs	r3, #0
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	2100      	movs	r1, #0
 800d3e4:	6938      	ldr	r0, [r7, #16]
 800d3e6:	f000 f841 	bl	800d46c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	617b      	str	r3, [r7, #20]
 800d3ee:	e001      	b.n	800d3f4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d3f4:	697b      	ldr	r3, [r7, #20]
	}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	371c      	adds	r7, #28
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd90      	pop	{r4, r7, pc}

0800d3fe <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d3fe:	b590      	push	{r4, r7, lr}
 800d400:	b087      	sub	sp, #28
 800d402:	af00      	add	r7, sp, #0
 800d404:	6078      	str	r0, [r7, #4]
 800d406:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d10b      	bne.n	800d42a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800d412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d416:	f383 8811 	msr	BASEPRI, r3
 800d41a:	f3bf 8f6f 	isb	sy
 800d41e:	f3bf 8f4f 	dsb	sy
 800d422:	60fb      	str	r3, [r7, #12]
}
 800d424:	bf00      	nop
 800d426:	bf00      	nop
 800d428:	e7fd      	b.n	800d426 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	689c      	ldr	r4, [r3, #8]
 800d42e:	f001 fb8d 	bl	800eb4c <xTaskGetCurrentTaskHandle>
 800d432:	4603      	mov	r3, r0
 800d434:	429c      	cmp	r4, r3
 800d436:	d107      	bne.n	800d448 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d438:	693b      	ldr	r3, [r7, #16]
 800d43a:	68db      	ldr	r3, [r3, #12]
 800d43c:	1c5a      	adds	r2, r3, #1
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d442:	2301      	movs	r3, #1
 800d444:	617b      	str	r3, [r7, #20]
 800d446:	e00c      	b.n	800d462 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d448:	6839      	ldr	r1, [r7, #0]
 800d44a:	6938      	ldr	r0, [r7, #16]
 800d44c:	f000 fa90 	bl	800d970 <xQueueSemaphoreTake>
 800d450:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d004      	beq.n	800d462 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	68db      	ldr	r3, [r3, #12]
 800d45c:	1c5a      	adds	r2, r3, #1
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d462:	697b      	ldr	r3, [r7, #20]
	}
 800d464:	4618      	mov	r0, r3
 800d466:	371c      	adds	r7, #28
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd90      	pop	{r4, r7, pc}

0800d46c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b08e      	sub	sp, #56	@ 0x38
 800d470:	af00      	add	r7, sp, #0
 800d472:	60f8      	str	r0, [r7, #12]
 800d474:	60b9      	str	r1, [r7, #8]
 800d476:	607a      	str	r2, [r7, #4]
 800d478:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d47a:	2300      	movs	r3, #0
 800d47c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d484:	2b00      	cmp	r3, #0
 800d486:	d10b      	bne.n	800d4a0 <xQueueGenericSend+0x34>
	__asm volatile
 800d488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d48c:	f383 8811 	msr	BASEPRI, r3
 800d490:	f3bf 8f6f 	isb	sy
 800d494:	f3bf 8f4f 	dsb	sy
 800d498:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d49a:	bf00      	nop
 800d49c:	bf00      	nop
 800d49e:	e7fd      	b.n	800d49c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d103      	bne.n	800d4ae <xQueueGenericSend+0x42>
 800d4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d101      	bne.n	800d4b2 <xQueueGenericSend+0x46>
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	e000      	b.n	800d4b4 <xQueueGenericSend+0x48>
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d10b      	bne.n	800d4d0 <xQueueGenericSend+0x64>
	__asm volatile
 800d4b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4bc:	f383 8811 	msr	BASEPRI, r3
 800d4c0:	f3bf 8f6f 	isb	sy
 800d4c4:	f3bf 8f4f 	dsb	sy
 800d4c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d4ca:	bf00      	nop
 800d4cc:	bf00      	nop
 800d4ce:	e7fd      	b.n	800d4cc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	2b02      	cmp	r3, #2
 800d4d4:	d103      	bne.n	800d4de <xQueueGenericSend+0x72>
 800d4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4da:	2b01      	cmp	r3, #1
 800d4dc:	d101      	bne.n	800d4e2 <xQueueGenericSend+0x76>
 800d4de:	2301      	movs	r3, #1
 800d4e0:	e000      	b.n	800d4e4 <xQueueGenericSend+0x78>
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d10b      	bne.n	800d500 <xQueueGenericSend+0x94>
	__asm volatile
 800d4e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4ec:	f383 8811 	msr	BASEPRI, r3
 800d4f0:	f3bf 8f6f 	isb	sy
 800d4f4:	f3bf 8f4f 	dsb	sy
 800d4f8:	623b      	str	r3, [r7, #32]
}
 800d4fa:	bf00      	nop
 800d4fc:	bf00      	nop
 800d4fe:	e7fd      	b.n	800d4fc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d500:	f001 fb34 	bl	800eb6c <xTaskGetSchedulerState>
 800d504:	4603      	mov	r3, r0
 800d506:	2b00      	cmp	r3, #0
 800d508:	d102      	bne.n	800d510 <xQueueGenericSend+0xa4>
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d101      	bne.n	800d514 <xQueueGenericSend+0xa8>
 800d510:	2301      	movs	r3, #1
 800d512:	e000      	b.n	800d516 <xQueueGenericSend+0xaa>
 800d514:	2300      	movs	r3, #0
 800d516:	2b00      	cmp	r3, #0
 800d518:	d10b      	bne.n	800d532 <xQueueGenericSend+0xc6>
	__asm volatile
 800d51a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d51e:	f383 8811 	msr	BASEPRI, r3
 800d522:	f3bf 8f6f 	isb	sy
 800d526:	f3bf 8f4f 	dsb	sy
 800d52a:	61fb      	str	r3, [r7, #28]
}
 800d52c:	bf00      	nop
 800d52e:	bf00      	nop
 800d530:	e7fd      	b.n	800d52e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d532:	f002 fb91 	bl	800fc58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d538:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d53a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d53c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d53e:	429a      	cmp	r2, r3
 800d540:	d302      	bcc.n	800d548 <xQueueGenericSend+0xdc>
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	2b02      	cmp	r3, #2
 800d546:	d129      	bne.n	800d59c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d548:	683a      	ldr	r2, [r7, #0]
 800d54a:	68b9      	ldr	r1, [r7, #8]
 800d54c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d54e:	f000 fb37 	bl	800dbc0 <prvCopyDataToQueue>
 800d552:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d010      	beq.n	800d57e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d55c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d55e:	3324      	adds	r3, #36	@ 0x24
 800d560:	4618      	mov	r0, r3
 800d562:	f001 f92d 	bl	800e7c0 <xTaskRemoveFromEventList>
 800d566:	4603      	mov	r3, r0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d013      	beq.n	800d594 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d56c:	4b3f      	ldr	r3, [pc, #252]	@ (800d66c <xQueueGenericSend+0x200>)
 800d56e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d572:	601a      	str	r2, [r3, #0]
 800d574:	f3bf 8f4f 	dsb	sy
 800d578:	f3bf 8f6f 	isb	sy
 800d57c:	e00a      	b.n	800d594 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d57e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d580:	2b00      	cmp	r3, #0
 800d582:	d007      	beq.n	800d594 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d584:	4b39      	ldr	r3, [pc, #228]	@ (800d66c <xQueueGenericSend+0x200>)
 800d586:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d58a:	601a      	str	r2, [r3, #0]
 800d58c:	f3bf 8f4f 	dsb	sy
 800d590:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d594:	f002 fb92 	bl	800fcbc <vPortExitCritical>
				return pdPASS;
 800d598:	2301      	movs	r3, #1
 800d59a:	e063      	b.n	800d664 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d103      	bne.n	800d5aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d5a2:	f002 fb8b 	bl	800fcbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	e05c      	b.n	800d664 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d5aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d106      	bne.n	800d5be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d5b0:	f107 0314 	add.w	r3, r7, #20
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f001 f967 	bl	800e888 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d5be:	f002 fb7d 	bl	800fcbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d5c2:	f000 fecf 	bl	800e364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d5c6:	f002 fb47 	bl	800fc58 <vPortEnterCritical>
 800d5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d5d0:	b25b      	sxtb	r3, r3
 800d5d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d5d6:	d103      	bne.n	800d5e0 <xQueueGenericSend+0x174>
 800d5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5da:	2200      	movs	r2, #0
 800d5dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d5e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d5e6:	b25b      	sxtb	r3, r3
 800d5e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d5ec:	d103      	bne.n	800d5f6 <xQueueGenericSend+0x18a>
 800d5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d5f6:	f002 fb61 	bl	800fcbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d5fa:	1d3a      	adds	r2, r7, #4
 800d5fc:	f107 0314 	add.w	r3, r7, #20
 800d600:	4611      	mov	r1, r2
 800d602:	4618      	mov	r0, r3
 800d604:	f001 f956 	bl	800e8b4 <xTaskCheckForTimeOut>
 800d608:	4603      	mov	r3, r0
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d124      	bne.n	800d658 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d60e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d610:	f000 fbce 	bl	800ddb0 <prvIsQueueFull>
 800d614:	4603      	mov	r3, r0
 800d616:	2b00      	cmp	r3, #0
 800d618:	d018      	beq.n	800d64c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d61a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d61c:	3310      	adds	r3, #16
 800d61e:	687a      	ldr	r2, [r7, #4]
 800d620:	4611      	mov	r1, r2
 800d622:	4618      	mov	r0, r3
 800d624:	f001 f87a 	bl	800e71c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d628:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d62a:	f000 fb59 	bl	800dce0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d62e:	f000 fea7 	bl	800e380 <xTaskResumeAll>
 800d632:	4603      	mov	r3, r0
 800d634:	2b00      	cmp	r3, #0
 800d636:	f47f af7c 	bne.w	800d532 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d63a:	4b0c      	ldr	r3, [pc, #48]	@ (800d66c <xQueueGenericSend+0x200>)
 800d63c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d640:	601a      	str	r2, [r3, #0]
 800d642:	f3bf 8f4f 	dsb	sy
 800d646:	f3bf 8f6f 	isb	sy
 800d64a:	e772      	b.n	800d532 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d64c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d64e:	f000 fb47 	bl	800dce0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d652:	f000 fe95 	bl	800e380 <xTaskResumeAll>
 800d656:	e76c      	b.n	800d532 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d658:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d65a:	f000 fb41 	bl	800dce0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d65e:	f000 fe8f 	bl	800e380 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d662:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d664:	4618      	mov	r0, r3
 800d666:	3738      	adds	r7, #56	@ 0x38
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}
 800d66c:	e000ed04 	.word	0xe000ed04

0800d670 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b090      	sub	sp, #64	@ 0x40
 800d674:	af00      	add	r7, sp, #0
 800d676:	60f8      	str	r0, [r7, #12]
 800d678:	60b9      	str	r1, [r7, #8]
 800d67a:	607a      	str	r2, [r7, #4]
 800d67c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d684:	2b00      	cmp	r3, #0
 800d686:	d10b      	bne.n	800d6a0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d68c:	f383 8811 	msr	BASEPRI, r3
 800d690:	f3bf 8f6f 	isb	sy
 800d694:	f3bf 8f4f 	dsb	sy
 800d698:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d69a:	bf00      	nop
 800d69c:	bf00      	nop
 800d69e:	e7fd      	b.n	800d69c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d103      	bne.n	800d6ae <xQueueGenericSendFromISR+0x3e>
 800d6a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d101      	bne.n	800d6b2 <xQueueGenericSendFromISR+0x42>
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	e000      	b.n	800d6b4 <xQueueGenericSendFromISR+0x44>
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d10b      	bne.n	800d6d0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d6b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6bc:	f383 8811 	msr	BASEPRI, r3
 800d6c0:	f3bf 8f6f 	isb	sy
 800d6c4:	f3bf 8f4f 	dsb	sy
 800d6c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d6ca:	bf00      	nop
 800d6cc:	bf00      	nop
 800d6ce:	e7fd      	b.n	800d6cc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	2b02      	cmp	r3, #2
 800d6d4:	d103      	bne.n	800d6de <xQueueGenericSendFromISR+0x6e>
 800d6d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6da:	2b01      	cmp	r3, #1
 800d6dc:	d101      	bne.n	800d6e2 <xQueueGenericSendFromISR+0x72>
 800d6de:	2301      	movs	r3, #1
 800d6e0:	e000      	b.n	800d6e4 <xQueueGenericSendFromISR+0x74>
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d10b      	bne.n	800d700 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d6e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6ec:	f383 8811 	msr	BASEPRI, r3
 800d6f0:	f3bf 8f6f 	isb	sy
 800d6f4:	f3bf 8f4f 	dsb	sy
 800d6f8:	623b      	str	r3, [r7, #32]
}
 800d6fa:	bf00      	nop
 800d6fc:	bf00      	nop
 800d6fe:	e7fd      	b.n	800d6fc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d700:	f002 fb8a 	bl	800fe18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d704:	f3ef 8211 	mrs	r2, BASEPRI
 800d708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d70c:	f383 8811 	msr	BASEPRI, r3
 800d710:	f3bf 8f6f 	isb	sy
 800d714:	f3bf 8f4f 	dsb	sy
 800d718:	61fa      	str	r2, [r7, #28]
 800d71a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d71c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d71e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d722:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d728:	429a      	cmp	r2, r3
 800d72a:	d302      	bcc.n	800d732 <xQueueGenericSendFromISR+0xc2>
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	2b02      	cmp	r3, #2
 800d730:	d12f      	bne.n	800d792 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d734:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d738:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d73c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d73e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d740:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d742:	683a      	ldr	r2, [r7, #0]
 800d744:	68b9      	ldr	r1, [r7, #8]
 800d746:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d748:	f000 fa3a 	bl	800dbc0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d74c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d750:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d754:	d112      	bne.n	800d77c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d016      	beq.n	800d78c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d75e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d760:	3324      	adds	r3, #36	@ 0x24
 800d762:	4618      	mov	r0, r3
 800d764:	f001 f82c 	bl	800e7c0 <xTaskRemoveFromEventList>
 800d768:	4603      	mov	r3, r0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d00e      	beq.n	800d78c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d00b      	beq.n	800d78c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2201      	movs	r2, #1
 800d778:	601a      	str	r2, [r3, #0]
 800d77a:	e007      	b.n	800d78c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d77c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d780:	3301      	adds	r3, #1
 800d782:	b2db      	uxtb	r3, r3
 800d784:	b25a      	sxtb	r2, r3
 800d786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d788:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d78c:	2301      	movs	r3, #1
 800d78e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d790:	e001      	b.n	800d796 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d792:	2300      	movs	r3, #0
 800d794:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d798:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d7a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d7a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3740      	adds	r7, #64	@ 0x40
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b08c      	sub	sp, #48	@ 0x30
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	60b9      	str	r1, [r7, #8]
 800d7b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d7c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d10b      	bne.n	800d7de <xQueueReceive+0x32>
	__asm volatile
 800d7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7ca:	f383 8811 	msr	BASEPRI, r3
 800d7ce:	f3bf 8f6f 	isb	sy
 800d7d2:	f3bf 8f4f 	dsb	sy
 800d7d6:	623b      	str	r3, [r7, #32]
}
 800d7d8:	bf00      	nop
 800d7da:	bf00      	nop
 800d7dc:	e7fd      	b.n	800d7da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d103      	bne.n	800d7ec <xQueueReceive+0x40>
 800d7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d101      	bne.n	800d7f0 <xQueueReceive+0x44>
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	e000      	b.n	800d7f2 <xQueueReceive+0x46>
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d10b      	bne.n	800d80e <xQueueReceive+0x62>
	__asm volatile
 800d7f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7fa:	f383 8811 	msr	BASEPRI, r3
 800d7fe:	f3bf 8f6f 	isb	sy
 800d802:	f3bf 8f4f 	dsb	sy
 800d806:	61fb      	str	r3, [r7, #28]
}
 800d808:	bf00      	nop
 800d80a:	bf00      	nop
 800d80c:	e7fd      	b.n	800d80a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d80e:	f001 f9ad 	bl	800eb6c <xTaskGetSchedulerState>
 800d812:	4603      	mov	r3, r0
 800d814:	2b00      	cmp	r3, #0
 800d816:	d102      	bne.n	800d81e <xQueueReceive+0x72>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d101      	bne.n	800d822 <xQueueReceive+0x76>
 800d81e:	2301      	movs	r3, #1
 800d820:	e000      	b.n	800d824 <xQueueReceive+0x78>
 800d822:	2300      	movs	r3, #0
 800d824:	2b00      	cmp	r3, #0
 800d826:	d10b      	bne.n	800d840 <xQueueReceive+0x94>
	__asm volatile
 800d828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d82c:	f383 8811 	msr	BASEPRI, r3
 800d830:	f3bf 8f6f 	isb	sy
 800d834:	f3bf 8f4f 	dsb	sy
 800d838:	61bb      	str	r3, [r7, #24]
}
 800d83a:	bf00      	nop
 800d83c:	bf00      	nop
 800d83e:	e7fd      	b.n	800d83c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d840:	f002 fa0a 	bl	800fc58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d848:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d01f      	beq.n	800d890 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d850:	68b9      	ldr	r1, [r7, #8]
 800d852:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d854:	f000 fa1e 	bl	800dc94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d85a:	1e5a      	subs	r2, r3, #1
 800d85c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d85e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d862:	691b      	ldr	r3, [r3, #16]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d00f      	beq.n	800d888 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d86a:	3310      	adds	r3, #16
 800d86c:	4618      	mov	r0, r3
 800d86e:	f000 ffa7 	bl	800e7c0 <xTaskRemoveFromEventList>
 800d872:	4603      	mov	r3, r0
 800d874:	2b00      	cmp	r3, #0
 800d876:	d007      	beq.n	800d888 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d878:	4b3c      	ldr	r3, [pc, #240]	@ (800d96c <xQueueReceive+0x1c0>)
 800d87a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d87e:	601a      	str	r2, [r3, #0]
 800d880:	f3bf 8f4f 	dsb	sy
 800d884:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d888:	f002 fa18 	bl	800fcbc <vPortExitCritical>
				return pdPASS;
 800d88c:	2301      	movs	r3, #1
 800d88e:	e069      	b.n	800d964 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d103      	bne.n	800d89e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d896:	f002 fa11 	bl	800fcbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d89a:	2300      	movs	r3, #0
 800d89c:	e062      	b.n	800d964 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d89e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d106      	bne.n	800d8b2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d8a4:	f107 0310 	add.w	r3, r7, #16
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f000 ffed 	bl	800e888 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d8b2:	f002 fa03 	bl	800fcbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d8b6:	f000 fd55 	bl	800e364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d8ba:	f002 f9cd 	bl	800fc58 <vPortEnterCritical>
 800d8be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d8c4:	b25b      	sxtb	r3, r3
 800d8c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d8ca:	d103      	bne.n	800d8d4 <xQueueReceive+0x128>
 800d8cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d8da:	b25b      	sxtb	r3, r3
 800d8dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d8e0:	d103      	bne.n	800d8ea <xQueueReceive+0x13e>
 800d8e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d8ea:	f002 f9e7 	bl	800fcbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d8ee:	1d3a      	adds	r2, r7, #4
 800d8f0:	f107 0310 	add.w	r3, r7, #16
 800d8f4:	4611      	mov	r1, r2
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f000 ffdc 	bl	800e8b4 <xTaskCheckForTimeOut>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d123      	bne.n	800d94a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d902:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d904:	f000 fa3e 	bl	800dd84 <prvIsQueueEmpty>
 800d908:	4603      	mov	r3, r0
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d017      	beq.n	800d93e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d90e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d910:	3324      	adds	r3, #36	@ 0x24
 800d912:	687a      	ldr	r2, [r7, #4]
 800d914:	4611      	mov	r1, r2
 800d916:	4618      	mov	r0, r3
 800d918:	f000 ff00 	bl	800e71c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d91c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d91e:	f000 f9df 	bl	800dce0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d922:	f000 fd2d 	bl	800e380 <xTaskResumeAll>
 800d926:	4603      	mov	r3, r0
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d189      	bne.n	800d840 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d92c:	4b0f      	ldr	r3, [pc, #60]	@ (800d96c <xQueueReceive+0x1c0>)
 800d92e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d932:	601a      	str	r2, [r3, #0]
 800d934:	f3bf 8f4f 	dsb	sy
 800d938:	f3bf 8f6f 	isb	sy
 800d93c:	e780      	b.n	800d840 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d93e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d940:	f000 f9ce 	bl	800dce0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d944:	f000 fd1c 	bl	800e380 <xTaskResumeAll>
 800d948:	e77a      	b.n	800d840 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d94a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d94c:	f000 f9c8 	bl	800dce0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d950:	f000 fd16 	bl	800e380 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d954:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d956:	f000 fa15 	bl	800dd84 <prvIsQueueEmpty>
 800d95a:	4603      	mov	r3, r0
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	f43f af6f 	beq.w	800d840 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d962:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d964:	4618      	mov	r0, r3
 800d966:	3730      	adds	r7, #48	@ 0x30
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}
 800d96c:	e000ed04 	.word	0xe000ed04

0800d970 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b08e      	sub	sp, #56	@ 0x38
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
 800d978:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d97a:	2300      	movs	r3, #0
 800d97c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d982:	2300      	movs	r3, #0
 800d984:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d10b      	bne.n	800d9a4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d98c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d990:	f383 8811 	msr	BASEPRI, r3
 800d994:	f3bf 8f6f 	isb	sy
 800d998:	f3bf 8f4f 	dsb	sy
 800d99c:	623b      	str	r3, [r7, #32]
}
 800d99e:	bf00      	nop
 800d9a0:	bf00      	nop
 800d9a2:	e7fd      	b.n	800d9a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d9a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d00b      	beq.n	800d9c4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d9ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9b0:	f383 8811 	msr	BASEPRI, r3
 800d9b4:	f3bf 8f6f 	isb	sy
 800d9b8:	f3bf 8f4f 	dsb	sy
 800d9bc:	61fb      	str	r3, [r7, #28]
}
 800d9be:	bf00      	nop
 800d9c0:	bf00      	nop
 800d9c2:	e7fd      	b.n	800d9c0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d9c4:	f001 f8d2 	bl	800eb6c <xTaskGetSchedulerState>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d102      	bne.n	800d9d4 <xQueueSemaphoreTake+0x64>
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d101      	bne.n	800d9d8 <xQueueSemaphoreTake+0x68>
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	e000      	b.n	800d9da <xQueueSemaphoreTake+0x6a>
 800d9d8:	2300      	movs	r3, #0
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d10b      	bne.n	800d9f6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9e2:	f383 8811 	msr	BASEPRI, r3
 800d9e6:	f3bf 8f6f 	isb	sy
 800d9ea:	f3bf 8f4f 	dsb	sy
 800d9ee:	61bb      	str	r3, [r7, #24]
}
 800d9f0:	bf00      	nop
 800d9f2:	bf00      	nop
 800d9f4:	e7fd      	b.n	800d9f2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d9f6:	f002 f92f 	bl	800fc58 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d9fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9fe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800da00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da02:	2b00      	cmp	r3, #0
 800da04:	d024      	beq.n	800da50 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800da06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da08:	1e5a      	subs	r2, r3, #1
 800da0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da0c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d104      	bne.n	800da20 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800da16:	f001 fa23 	bl	800ee60 <pvTaskIncrementMutexHeldCount>
 800da1a:	4602      	mov	r2, r0
 800da1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da1e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da22:	691b      	ldr	r3, [r3, #16]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d00f      	beq.n	800da48 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da2a:	3310      	adds	r3, #16
 800da2c:	4618      	mov	r0, r3
 800da2e:	f000 fec7 	bl	800e7c0 <xTaskRemoveFromEventList>
 800da32:	4603      	mov	r3, r0
 800da34:	2b00      	cmp	r3, #0
 800da36:	d007      	beq.n	800da48 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800da38:	4b54      	ldr	r3, [pc, #336]	@ (800db8c <xQueueSemaphoreTake+0x21c>)
 800da3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da3e:	601a      	str	r2, [r3, #0]
 800da40:	f3bf 8f4f 	dsb	sy
 800da44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800da48:	f002 f938 	bl	800fcbc <vPortExitCritical>
				return pdPASS;
 800da4c:	2301      	movs	r3, #1
 800da4e:	e098      	b.n	800db82 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d112      	bne.n	800da7c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800da56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d00b      	beq.n	800da74 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800da5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da60:	f383 8811 	msr	BASEPRI, r3
 800da64:	f3bf 8f6f 	isb	sy
 800da68:	f3bf 8f4f 	dsb	sy
 800da6c:	617b      	str	r3, [r7, #20]
}
 800da6e:	bf00      	nop
 800da70:	bf00      	nop
 800da72:	e7fd      	b.n	800da70 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800da74:	f002 f922 	bl	800fcbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800da78:	2300      	movs	r3, #0
 800da7a:	e082      	b.n	800db82 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800da7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d106      	bne.n	800da90 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da82:	f107 030c 	add.w	r3, r7, #12
 800da86:	4618      	mov	r0, r3
 800da88:	f000 fefe 	bl	800e888 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800da8c:	2301      	movs	r3, #1
 800da8e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800da90:	f002 f914 	bl	800fcbc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800da94:	f000 fc66 	bl	800e364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da98:	f002 f8de 	bl	800fc58 <vPortEnterCritical>
 800da9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800daa2:	b25b      	sxtb	r3, r3
 800daa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800daa8:	d103      	bne.n	800dab2 <xQueueSemaphoreTake+0x142>
 800daaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daac:	2200      	movs	r2, #0
 800daae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dab4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dab8:	b25b      	sxtb	r3, r3
 800daba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dabe:	d103      	bne.n	800dac8 <xQueueSemaphoreTake+0x158>
 800dac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dac2:	2200      	movs	r2, #0
 800dac4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dac8:	f002 f8f8 	bl	800fcbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dacc:	463a      	mov	r2, r7
 800dace:	f107 030c 	add.w	r3, r7, #12
 800dad2:	4611      	mov	r1, r2
 800dad4:	4618      	mov	r0, r3
 800dad6:	f000 feed 	bl	800e8b4 <xTaskCheckForTimeOut>
 800dada:	4603      	mov	r3, r0
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d132      	bne.n	800db46 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dae0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dae2:	f000 f94f 	bl	800dd84 <prvIsQueueEmpty>
 800dae6:	4603      	mov	r3, r0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d026      	beq.n	800db3a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800daec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d109      	bne.n	800db08 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800daf4:	f002 f8b0 	bl	800fc58 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800daf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dafa:	689b      	ldr	r3, [r3, #8]
 800dafc:	4618      	mov	r0, r3
 800dafe:	f001 f853 	bl	800eba8 <xTaskPriorityInherit>
 800db02:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800db04:	f002 f8da 	bl	800fcbc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800db08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db0a:	3324      	adds	r3, #36	@ 0x24
 800db0c:	683a      	ldr	r2, [r7, #0]
 800db0e:	4611      	mov	r1, r2
 800db10:	4618      	mov	r0, r3
 800db12:	f000 fe03 	bl	800e71c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800db16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800db18:	f000 f8e2 	bl	800dce0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800db1c:	f000 fc30 	bl	800e380 <xTaskResumeAll>
 800db20:	4603      	mov	r3, r0
 800db22:	2b00      	cmp	r3, #0
 800db24:	f47f af67 	bne.w	800d9f6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800db28:	4b18      	ldr	r3, [pc, #96]	@ (800db8c <xQueueSemaphoreTake+0x21c>)
 800db2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db2e:	601a      	str	r2, [r3, #0]
 800db30:	f3bf 8f4f 	dsb	sy
 800db34:	f3bf 8f6f 	isb	sy
 800db38:	e75d      	b.n	800d9f6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800db3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800db3c:	f000 f8d0 	bl	800dce0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800db40:	f000 fc1e 	bl	800e380 <xTaskResumeAll>
 800db44:	e757      	b.n	800d9f6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800db46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800db48:	f000 f8ca 	bl	800dce0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800db4c:	f000 fc18 	bl	800e380 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800db52:	f000 f917 	bl	800dd84 <prvIsQueueEmpty>
 800db56:	4603      	mov	r3, r0
 800db58:	2b00      	cmp	r3, #0
 800db5a:	f43f af4c 	beq.w	800d9f6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800db5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db60:	2b00      	cmp	r3, #0
 800db62:	d00d      	beq.n	800db80 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800db64:	f002 f878 	bl	800fc58 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800db68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800db6a:	f000 f811 	bl	800db90 <prvGetDisinheritPriorityAfterTimeout>
 800db6e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800db70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db72:	689b      	ldr	r3, [r3, #8]
 800db74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800db76:	4618      	mov	r0, r3
 800db78:	f001 f8ee 	bl	800ed58 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800db7c:	f002 f89e 	bl	800fcbc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800db80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800db82:	4618      	mov	r0, r3
 800db84:	3738      	adds	r7, #56	@ 0x38
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}
 800db8a:	bf00      	nop
 800db8c:	e000ed04 	.word	0xe000ed04

0800db90 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800db90:	b480      	push	{r7}
 800db92:	b085      	sub	sp, #20
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d006      	beq.n	800dbae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800dbaa:	60fb      	str	r3, [r7, #12]
 800dbac:	e001      	b.n	800dbb2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
	}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3714      	adds	r7, #20
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbe:	4770      	bx	lr

0800dbc0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b086      	sub	sp, #24
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	60f8      	str	r0, [r7, #12]
 800dbc8:	60b9      	str	r1, [r7, #8]
 800dbca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbd4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d10d      	bne.n	800dbfa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d14d      	bne.n	800dc82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	689b      	ldr	r3, [r3, #8]
 800dbea:	4618      	mov	r0, r3
 800dbec:	f001 f844 	bl	800ec78 <xTaskPriorityDisinherit>
 800dbf0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	609a      	str	r2, [r3, #8]
 800dbf8:	e043      	b.n	800dc82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d119      	bne.n	800dc34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	6858      	ldr	r0, [r3, #4]
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc08:	461a      	mov	r2, r3
 800dc0a:	68b9      	ldr	r1, [r7, #8]
 800dc0c:	f005 ff75 	bl	8013afa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	685a      	ldr	r2, [r3, #4]
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc18:	441a      	add	r2, r3
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	685a      	ldr	r2, [r3, #4]
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	689b      	ldr	r3, [r3, #8]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d32b      	bcc.n	800dc82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	681a      	ldr	r2, [r3, #0]
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	605a      	str	r2, [r3, #4]
 800dc32:	e026      	b.n	800dc82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	68d8      	ldr	r0, [r3, #12]
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc3c:	461a      	mov	r2, r3
 800dc3e:	68b9      	ldr	r1, [r7, #8]
 800dc40:	f005 ff5b 	bl	8013afa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	68da      	ldr	r2, [r3, #12]
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc4c:	425b      	negs	r3, r3
 800dc4e:	441a      	add	r2, r3
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	68da      	ldr	r2, [r3, #12]
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d207      	bcs.n	800dc70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	689a      	ldr	r2, [r3, #8]
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc68:	425b      	negs	r3, r3
 800dc6a:	441a      	add	r2, r3
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2b02      	cmp	r3, #2
 800dc74:	d105      	bne.n	800dc82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d002      	beq.n	800dc82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	3b01      	subs	r3, #1
 800dc80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	1c5a      	adds	r2, r3, #1
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800dc8a:	697b      	ldr	r3, [r7, #20]
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3718      	adds	r7, #24
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b082      	sub	sp, #8
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d018      	beq.n	800dcd8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	68da      	ldr	r2, [r3, #12]
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcae:	441a      	add	r2, r3
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	68da      	ldr	r2, [r3, #12]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	689b      	ldr	r3, [r3, #8]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d303      	bcc.n	800dcc8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681a      	ldr	r2, [r3, #0]
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	68d9      	ldr	r1, [r3, #12]
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcd0:	461a      	mov	r2, r3
 800dcd2:	6838      	ldr	r0, [r7, #0]
 800dcd4:	f005 ff11 	bl	8013afa <memcpy>
	}
}
 800dcd8:	bf00      	nop
 800dcda:	3708      	adds	r7, #8
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}

0800dce0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b084      	sub	sp, #16
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dce8:	f001 ffb6 	bl	800fc58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dcf2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dcf4:	e011      	b.n	800dd1a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d012      	beq.n	800dd24 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	3324      	adds	r3, #36	@ 0x24
 800dd02:	4618      	mov	r0, r3
 800dd04:	f000 fd5c 	bl	800e7c0 <xTaskRemoveFromEventList>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d001      	beq.n	800dd12 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dd0e:	f000 fe35 	bl	800e97c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dd12:	7bfb      	ldrb	r3, [r7, #15]
 800dd14:	3b01      	subs	r3, #1
 800dd16:	b2db      	uxtb	r3, r3
 800dd18:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	dce9      	bgt.n	800dcf6 <prvUnlockQueue+0x16>
 800dd22:	e000      	b.n	800dd26 <prvUnlockQueue+0x46>
					break;
 800dd24:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	22ff      	movs	r2, #255	@ 0xff
 800dd2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800dd2e:	f001 ffc5 	bl	800fcbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dd32:	f001 ff91 	bl	800fc58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dd3c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd3e:	e011      	b.n	800dd64 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	691b      	ldr	r3, [r3, #16]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d012      	beq.n	800dd6e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	3310      	adds	r3, #16
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f000 fd37 	bl	800e7c0 <xTaskRemoveFromEventList>
 800dd52:	4603      	mov	r3, r0
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d001      	beq.n	800dd5c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dd58:	f000 fe10 	bl	800e97c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dd5c:	7bbb      	ldrb	r3, [r7, #14]
 800dd5e:	3b01      	subs	r3, #1
 800dd60:	b2db      	uxtb	r3, r3
 800dd62:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	dce9      	bgt.n	800dd40 <prvUnlockQueue+0x60>
 800dd6c:	e000      	b.n	800dd70 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dd6e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	22ff      	movs	r2, #255	@ 0xff
 800dd74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800dd78:	f001 ffa0 	bl	800fcbc <vPortExitCritical>
}
 800dd7c:	bf00      	nop
 800dd7e:	3710      	adds	r7, #16
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b084      	sub	sp, #16
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dd8c:	f001 ff64 	bl	800fc58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d102      	bne.n	800dd9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dd98:	2301      	movs	r3, #1
 800dd9a:	60fb      	str	r3, [r7, #12]
 800dd9c:	e001      	b.n	800dda2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dda2:	f001 ff8b 	bl	800fcbc <vPortExitCritical>

	return xReturn;
 800dda6:	68fb      	ldr	r3, [r7, #12]
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3710      	adds	r7, #16
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ddb8:	f001 ff4e 	bl	800fc58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d102      	bne.n	800ddce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ddc8:	2301      	movs	r3, #1
 800ddca:	60fb      	str	r3, [r7, #12]
 800ddcc:	e001      	b.n	800ddd2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ddd2:	f001 ff73 	bl	800fcbc <vPortExitCritical>

	return xReturn;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3710      	adds	r7, #16
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}

0800dde0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dde0:	b480      	push	{r7}
 800dde2:	b085      	sub	sp, #20
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ddea:	2300      	movs	r3, #0
 800ddec:	60fb      	str	r3, [r7, #12]
 800ddee:	e014      	b.n	800de1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ddf0:	4a0f      	ldr	r2, [pc, #60]	@ (800de30 <vQueueAddToRegistry+0x50>)
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d10b      	bne.n	800de14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ddfc:	490c      	ldr	r1, [pc, #48]	@ (800de30 <vQueueAddToRegistry+0x50>)
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	683a      	ldr	r2, [r7, #0]
 800de02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800de06:	4a0a      	ldr	r2, [pc, #40]	@ (800de30 <vQueueAddToRegistry+0x50>)
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	00db      	lsls	r3, r3, #3
 800de0c:	4413      	add	r3, r2
 800de0e:	687a      	ldr	r2, [r7, #4]
 800de10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800de12:	e006      	b.n	800de22 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	3301      	adds	r3, #1
 800de18:	60fb      	str	r3, [r7, #12]
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	2b07      	cmp	r3, #7
 800de1e:	d9e7      	bls.n	800ddf0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800de20:	bf00      	nop
 800de22:	bf00      	nop
 800de24:	3714      	adds	r7, #20
 800de26:	46bd      	mov	sp, r7
 800de28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2c:	4770      	bx	lr
 800de2e:	bf00      	nop
 800de30:	24002008 	.word	0x24002008

0800de34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800de34:	b580      	push	{r7, lr}
 800de36:	b086      	sub	sp, #24
 800de38:	af00      	add	r7, sp, #0
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	60b9      	str	r1, [r7, #8]
 800de3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800de44:	f001 ff08 	bl	800fc58 <vPortEnterCritical>
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800de4e:	b25b      	sxtb	r3, r3
 800de50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de54:	d103      	bne.n	800de5e <vQueueWaitForMessageRestricted+0x2a>
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	2200      	movs	r2, #0
 800de5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800de64:	b25b      	sxtb	r3, r3
 800de66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de6a:	d103      	bne.n	800de74 <vQueueWaitForMessageRestricted+0x40>
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	2200      	movs	r2, #0
 800de70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800de74:	f001 ff22 	bl	800fcbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d106      	bne.n	800de8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	3324      	adds	r3, #36	@ 0x24
 800de84:	687a      	ldr	r2, [r7, #4]
 800de86:	68b9      	ldr	r1, [r7, #8]
 800de88:	4618      	mov	r0, r3
 800de8a:	f000 fc6d 	bl	800e768 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800de8e:	6978      	ldr	r0, [r7, #20]
 800de90:	f7ff ff26 	bl	800dce0 <prvUnlockQueue>
	}
 800de94:	bf00      	nop
 800de96:	3718      	adds	r7, #24
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b08e      	sub	sp, #56	@ 0x38
 800dea0:	af04      	add	r7, sp, #16
 800dea2:	60f8      	str	r0, [r7, #12]
 800dea4:	60b9      	str	r1, [r7, #8]
 800dea6:	607a      	str	r2, [r7, #4]
 800dea8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800deaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800deac:	2b00      	cmp	r3, #0
 800deae:	d10b      	bne.n	800dec8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800deb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deb4:	f383 8811 	msr	BASEPRI, r3
 800deb8:	f3bf 8f6f 	isb	sy
 800debc:	f3bf 8f4f 	dsb	sy
 800dec0:	623b      	str	r3, [r7, #32]
}
 800dec2:	bf00      	nop
 800dec4:	bf00      	nop
 800dec6:	e7fd      	b.n	800dec4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deca:	2b00      	cmp	r3, #0
 800decc:	d10b      	bne.n	800dee6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800dece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ded2:	f383 8811 	msr	BASEPRI, r3
 800ded6:	f3bf 8f6f 	isb	sy
 800deda:	f3bf 8f4f 	dsb	sy
 800dede:	61fb      	str	r3, [r7, #28]
}
 800dee0:	bf00      	nop
 800dee2:	bf00      	nop
 800dee4:	e7fd      	b.n	800dee2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dee6:	23a8      	movs	r3, #168	@ 0xa8
 800dee8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	2ba8      	cmp	r3, #168	@ 0xa8
 800deee:	d00b      	beq.n	800df08 <xTaskCreateStatic+0x6c>
	__asm volatile
 800def0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800def4:	f383 8811 	msr	BASEPRI, r3
 800def8:	f3bf 8f6f 	isb	sy
 800defc:	f3bf 8f4f 	dsb	sy
 800df00:	61bb      	str	r3, [r7, #24]
}
 800df02:	bf00      	nop
 800df04:	bf00      	nop
 800df06:	e7fd      	b.n	800df04 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800df08:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800df0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d01e      	beq.n	800df4e <xTaskCreateStatic+0xb2>
 800df10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df12:	2b00      	cmp	r3, #0
 800df14:	d01b      	beq.n	800df4e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800df16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df18:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800df1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800df1e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800df20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df22:	2202      	movs	r2, #2
 800df24:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800df28:	2300      	movs	r3, #0
 800df2a:	9303      	str	r3, [sp, #12]
 800df2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df2e:	9302      	str	r3, [sp, #8]
 800df30:	f107 0314 	add.w	r3, r7, #20
 800df34:	9301      	str	r3, [sp, #4]
 800df36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df38:	9300      	str	r3, [sp, #0]
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	687a      	ldr	r2, [r7, #4]
 800df3e:	68b9      	ldr	r1, [r7, #8]
 800df40:	68f8      	ldr	r0, [r7, #12]
 800df42:	f000 f851 	bl	800dfe8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800df46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800df48:	f000 f8f6 	bl	800e138 <prvAddNewTaskToReadyList>
 800df4c:	e001      	b.n	800df52 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800df4e:	2300      	movs	r3, #0
 800df50:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800df52:	697b      	ldr	r3, [r7, #20]
	}
 800df54:	4618      	mov	r0, r3
 800df56:	3728      	adds	r7, #40	@ 0x28
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}

0800df5c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b08c      	sub	sp, #48	@ 0x30
 800df60:	af04      	add	r7, sp, #16
 800df62:	60f8      	str	r0, [r7, #12]
 800df64:	60b9      	str	r1, [r7, #8]
 800df66:	603b      	str	r3, [r7, #0]
 800df68:	4613      	mov	r3, r2
 800df6a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800df6c:	88fb      	ldrh	r3, [r7, #6]
 800df6e:	009b      	lsls	r3, r3, #2
 800df70:	4618      	mov	r0, r3
 800df72:	f001 ff93 	bl	800fe9c <pvPortMalloc>
 800df76:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d00e      	beq.n	800df9c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800df7e:	20a8      	movs	r0, #168	@ 0xa8
 800df80:	f001 ff8c 	bl	800fe9c <pvPortMalloc>
 800df84:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800df86:	69fb      	ldr	r3, [r7, #28]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d003      	beq.n	800df94 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800df8c:	69fb      	ldr	r3, [r7, #28]
 800df8e:	697a      	ldr	r2, [r7, #20]
 800df90:	631a      	str	r2, [r3, #48]	@ 0x30
 800df92:	e005      	b.n	800dfa0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800df94:	6978      	ldr	r0, [r7, #20]
 800df96:	f002 f84f 	bl	8010038 <vPortFree>
 800df9a:	e001      	b.n	800dfa0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800df9c:	2300      	movs	r3, #0
 800df9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dfa0:	69fb      	ldr	r3, [r7, #28]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d017      	beq.n	800dfd6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dfa6:	69fb      	ldr	r3, [r7, #28]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dfae:	88fa      	ldrh	r2, [r7, #6]
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	9303      	str	r3, [sp, #12]
 800dfb4:	69fb      	ldr	r3, [r7, #28]
 800dfb6:	9302      	str	r3, [sp, #8]
 800dfb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfba:	9301      	str	r3, [sp, #4]
 800dfbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfbe:	9300      	str	r3, [sp, #0]
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	68b9      	ldr	r1, [r7, #8]
 800dfc4:	68f8      	ldr	r0, [r7, #12]
 800dfc6:	f000 f80f 	bl	800dfe8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dfca:	69f8      	ldr	r0, [r7, #28]
 800dfcc:	f000 f8b4 	bl	800e138 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	61bb      	str	r3, [r7, #24]
 800dfd4:	e002      	b.n	800dfdc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dfd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dfda:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dfdc:	69bb      	ldr	r3, [r7, #24]
	}
 800dfde:	4618      	mov	r0, r3
 800dfe0:	3720      	adds	r7, #32
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
	...

0800dfe8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b088      	sub	sp, #32
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	60f8      	str	r0, [r7, #12]
 800dff0:	60b9      	str	r1, [r7, #8]
 800dff2:	607a      	str	r2, [r7, #4]
 800dff4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dff8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	009b      	lsls	r3, r3, #2
 800dffe:	461a      	mov	r2, r3
 800e000:	21a5      	movs	r1, #165	@ 0xa5
 800e002:	f005 fc99 	bl	8013938 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e008:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e00a:	6879      	ldr	r1, [r7, #4]
 800e00c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e010:	440b      	add	r3, r1
 800e012:	009b      	lsls	r3, r3, #2
 800e014:	4413      	add	r3, r2
 800e016:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e018:	69bb      	ldr	r3, [r7, #24]
 800e01a:	f023 0307 	bic.w	r3, r3, #7
 800e01e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e020:	69bb      	ldr	r3, [r7, #24]
 800e022:	f003 0307 	and.w	r3, r3, #7
 800e026:	2b00      	cmp	r3, #0
 800e028:	d00b      	beq.n	800e042 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e02a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e02e:	f383 8811 	msr	BASEPRI, r3
 800e032:	f3bf 8f6f 	isb	sy
 800e036:	f3bf 8f4f 	dsb	sy
 800e03a:	617b      	str	r3, [r7, #20]
}
 800e03c:	bf00      	nop
 800e03e:	bf00      	nop
 800e040:	e7fd      	b.n	800e03e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d01f      	beq.n	800e088 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e048:	2300      	movs	r3, #0
 800e04a:	61fb      	str	r3, [r7, #28]
 800e04c:	e012      	b.n	800e074 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e04e:	68ba      	ldr	r2, [r7, #8]
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	4413      	add	r3, r2
 800e054:	7819      	ldrb	r1, [r3, #0]
 800e056:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e058:	69fb      	ldr	r3, [r7, #28]
 800e05a:	4413      	add	r3, r2
 800e05c:	3334      	adds	r3, #52	@ 0x34
 800e05e:	460a      	mov	r2, r1
 800e060:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e062:	68ba      	ldr	r2, [r7, #8]
 800e064:	69fb      	ldr	r3, [r7, #28]
 800e066:	4413      	add	r3, r2
 800e068:	781b      	ldrb	r3, [r3, #0]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d006      	beq.n	800e07c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e06e:	69fb      	ldr	r3, [r7, #28]
 800e070:	3301      	adds	r3, #1
 800e072:	61fb      	str	r3, [r7, #28]
 800e074:	69fb      	ldr	r3, [r7, #28]
 800e076:	2b0f      	cmp	r3, #15
 800e078:	d9e9      	bls.n	800e04e <prvInitialiseNewTask+0x66>
 800e07a:	e000      	b.n	800e07e <prvInitialiseNewTask+0x96>
			{
				break;
 800e07c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e080:	2200      	movs	r2, #0
 800e082:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e086:	e003      	b.n	800e090 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e08a:	2200      	movs	r2, #0
 800e08c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e092:	2b37      	cmp	r3, #55	@ 0x37
 800e094:	d901      	bls.n	800e09a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e096:	2337      	movs	r3, #55	@ 0x37
 800e098:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e09c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e09e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e0a4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0ae:	3304      	adds	r3, #4
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f7fe ff49 	bl	800cf48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0b8:	3318      	adds	r3, #24
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f7fe ff44 	bl	800cf48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e0cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0d4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0d8:	2200      	movs	r2, #0
 800e0da:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0e8:	3354      	adds	r3, #84	@ 0x54
 800e0ea:	224c      	movs	r2, #76	@ 0x4c
 800e0ec:	2100      	movs	r1, #0
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f005 fc22 	bl	8013938 <memset>
 800e0f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0f6:	4a0d      	ldr	r2, [pc, #52]	@ (800e12c <prvInitialiseNewTask+0x144>)
 800e0f8:	659a      	str	r2, [r3, #88]	@ 0x58
 800e0fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0fc:	4a0c      	ldr	r2, [pc, #48]	@ (800e130 <prvInitialiseNewTask+0x148>)
 800e0fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e102:	4a0c      	ldr	r2, [pc, #48]	@ (800e134 <prvInitialiseNewTask+0x14c>)
 800e104:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e106:	683a      	ldr	r2, [r7, #0]
 800e108:	68f9      	ldr	r1, [r7, #12]
 800e10a:	69b8      	ldr	r0, [r7, #24]
 800e10c:	f001 fc72 	bl	800f9f4 <pxPortInitialiseStack>
 800e110:	4602      	mov	r2, r0
 800e112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e114:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d002      	beq.n	800e122 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e11c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e11e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e120:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e122:	bf00      	nop
 800e124:	3720      	adds	r7, #32
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}
 800e12a:	bf00      	nop
 800e12c:	240333e4 	.word	0x240333e4
 800e130:	2403344c 	.word	0x2403344c
 800e134:	240334b4 	.word	0x240334b4

0800e138 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b082      	sub	sp, #8
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e140:	f001 fd8a 	bl	800fc58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e144:	4b2d      	ldr	r3, [pc, #180]	@ (800e1fc <prvAddNewTaskToReadyList+0xc4>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	3301      	adds	r3, #1
 800e14a:	4a2c      	ldr	r2, [pc, #176]	@ (800e1fc <prvAddNewTaskToReadyList+0xc4>)
 800e14c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e14e:	4b2c      	ldr	r3, [pc, #176]	@ (800e200 <prvAddNewTaskToReadyList+0xc8>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d109      	bne.n	800e16a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e156:	4a2a      	ldr	r2, [pc, #168]	@ (800e200 <prvAddNewTaskToReadyList+0xc8>)
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e15c:	4b27      	ldr	r3, [pc, #156]	@ (800e1fc <prvAddNewTaskToReadyList+0xc4>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	2b01      	cmp	r3, #1
 800e162:	d110      	bne.n	800e186 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e164:	f000 fc2e 	bl	800e9c4 <prvInitialiseTaskLists>
 800e168:	e00d      	b.n	800e186 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e16a:	4b26      	ldr	r3, [pc, #152]	@ (800e204 <prvAddNewTaskToReadyList+0xcc>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d109      	bne.n	800e186 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e172:	4b23      	ldr	r3, [pc, #140]	@ (800e200 <prvAddNewTaskToReadyList+0xc8>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d802      	bhi.n	800e186 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e180:	4a1f      	ldr	r2, [pc, #124]	@ (800e200 <prvAddNewTaskToReadyList+0xc8>)
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e186:	4b20      	ldr	r3, [pc, #128]	@ (800e208 <prvAddNewTaskToReadyList+0xd0>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	3301      	adds	r3, #1
 800e18c:	4a1e      	ldr	r2, [pc, #120]	@ (800e208 <prvAddNewTaskToReadyList+0xd0>)
 800e18e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e190:	4b1d      	ldr	r3, [pc, #116]	@ (800e208 <prvAddNewTaskToReadyList+0xd0>)
 800e192:	681a      	ldr	r2, [r3, #0]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e19c:	4b1b      	ldr	r3, [pc, #108]	@ (800e20c <prvAddNewTaskToReadyList+0xd4>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d903      	bls.n	800e1ac <prvAddNewTaskToReadyList+0x74>
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1a8:	4a18      	ldr	r2, [pc, #96]	@ (800e20c <prvAddNewTaskToReadyList+0xd4>)
 800e1aa:	6013      	str	r3, [r2, #0]
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1b0:	4613      	mov	r3, r2
 800e1b2:	009b      	lsls	r3, r3, #2
 800e1b4:	4413      	add	r3, r2
 800e1b6:	009b      	lsls	r3, r3, #2
 800e1b8:	4a15      	ldr	r2, [pc, #84]	@ (800e210 <prvAddNewTaskToReadyList+0xd8>)
 800e1ba:	441a      	add	r2, r3
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	3304      	adds	r3, #4
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	4610      	mov	r0, r2
 800e1c4:	f7fe fecd 	bl	800cf62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e1c8:	f001 fd78 	bl	800fcbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e1cc:	4b0d      	ldr	r3, [pc, #52]	@ (800e204 <prvAddNewTaskToReadyList+0xcc>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d00e      	beq.n	800e1f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e1d4:	4b0a      	ldr	r3, [pc, #40]	@ (800e200 <prvAddNewTaskToReadyList+0xc8>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d207      	bcs.n	800e1f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e1e2:	4b0c      	ldr	r3, [pc, #48]	@ (800e214 <prvAddNewTaskToReadyList+0xdc>)
 800e1e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e1e8:	601a      	str	r2, [r3, #0]
 800e1ea:	f3bf 8f4f 	dsb	sy
 800e1ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e1f2:	bf00      	nop
 800e1f4:	3708      	adds	r7, #8
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}
 800e1fa:	bf00      	nop
 800e1fc:	2400251c 	.word	0x2400251c
 800e200:	24002048 	.word	0x24002048
 800e204:	24002528 	.word	0x24002528
 800e208:	24002538 	.word	0x24002538
 800e20c:	24002524 	.word	0x24002524
 800e210:	2400204c 	.word	0x2400204c
 800e214:	e000ed04 	.word	0xe000ed04

0800e218 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b084      	sub	sp, #16
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e220:	2300      	movs	r3, #0
 800e222:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d018      	beq.n	800e25c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e22a:	4b14      	ldr	r3, [pc, #80]	@ (800e27c <vTaskDelay+0x64>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d00b      	beq.n	800e24a <vTaskDelay+0x32>
	__asm volatile
 800e232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e236:	f383 8811 	msr	BASEPRI, r3
 800e23a:	f3bf 8f6f 	isb	sy
 800e23e:	f3bf 8f4f 	dsb	sy
 800e242:	60bb      	str	r3, [r7, #8]
}
 800e244:	bf00      	nop
 800e246:	bf00      	nop
 800e248:	e7fd      	b.n	800e246 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e24a:	f000 f88b 	bl	800e364 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e24e:	2100      	movs	r1, #0
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f001 f821 	bl	800f298 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e256:	f000 f893 	bl	800e380 <xTaskResumeAll>
 800e25a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d107      	bne.n	800e272 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e262:	4b07      	ldr	r3, [pc, #28]	@ (800e280 <vTaskDelay+0x68>)
 800e264:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e268:	601a      	str	r2, [r3, #0]
 800e26a:	f3bf 8f4f 	dsb	sy
 800e26e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e272:	bf00      	nop
 800e274:	3710      	adds	r7, #16
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}
 800e27a:	bf00      	nop
 800e27c:	24002544 	.word	0x24002544
 800e280:	e000ed04 	.word	0xe000ed04

0800e284 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b08a      	sub	sp, #40	@ 0x28
 800e288:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e28a:	2300      	movs	r3, #0
 800e28c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e28e:	2300      	movs	r3, #0
 800e290:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e292:	463a      	mov	r2, r7
 800e294:	1d39      	adds	r1, r7, #4
 800e296:	f107 0308 	add.w	r3, r7, #8
 800e29a:	4618      	mov	r0, r3
 800e29c:	f7fe fe00 	bl	800cea0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e2a0:	6839      	ldr	r1, [r7, #0]
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	68ba      	ldr	r2, [r7, #8]
 800e2a6:	9202      	str	r2, [sp, #8]
 800e2a8:	9301      	str	r3, [sp, #4]
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	9300      	str	r3, [sp, #0]
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	460a      	mov	r2, r1
 800e2b2:	4924      	ldr	r1, [pc, #144]	@ (800e344 <vTaskStartScheduler+0xc0>)
 800e2b4:	4824      	ldr	r0, [pc, #144]	@ (800e348 <vTaskStartScheduler+0xc4>)
 800e2b6:	f7ff fdf1 	bl	800de9c <xTaskCreateStatic>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	4a23      	ldr	r2, [pc, #140]	@ (800e34c <vTaskStartScheduler+0xc8>)
 800e2be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e2c0:	4b22      	ldr	r3, [pc, #136]	@ (800e34c <vTaskStartScheduler+0xc8>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d002      	beq.n	800e2ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	617b      	str	r3, [r7, #20]
 800e2cc:	e001      	b.n	800e2d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	2b01      	cmp	r3, #1
 800e2d6:	d102      	bne.n	800e2de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e2d8:	f001 f832 	bl	800f340 <xTimerCreateTimerTask>
 800e2dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e2de:	697b      	ldr	r3, [r7, #20]
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d11b      	bne.n	800e31c <vTaskStartScheduler+0x98>
	__asm volatile
 800e2e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2e8:	f383 8811 	msr	BASEPRI, r3
 800e2ec:	f3bf 8f6f 	isb	sy
 800e2f0:	f3bf 8f4f 	dsb	sy
 800e2f4:	613b      	str	r3, [r7, #16]
}
 800e2f6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e2f8:	4b15      	ldr	r3, [pc, #84]	@ (800e350 <vTaskStartScheduler+0xcc>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	3354      	adds	r3, #84	@ 0x54
 800e2fe:	4a15      	ldr	r2, [pc, #84]	@ (800e354 <vTaskStartScheduler+0xd0>)
 800e300:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e302:	4b15      	ldr	r3, [pc, #84]	@ (800e358 <vTaskStartScheduler+0xd4>)
 800e304:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e308:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e30a:	4b14      	ldr	r3, [pc, #80]	@ (800e35c <vTaskStartScheduler+0xd8>)
 800e30c:	2201      	movs	r2, #1
 800e30e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e310:	4b13      	ldr	r3, [pc, #76]	@ (800e360 <vTaskStartScheduler+0xdc>)
 800e312:	2200      	movs	r2, #0
 800e314:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e316:	f001 fbfb 	bl	800fb10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e31a:	e00f      	b.n	800e33c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e322:	d10b      	bne.n	800e33c <vTaskStartScheduler+0xb8>
	__asm volatile
 800e324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e328:	f383 8811 	msr	BASEPRI, r3
 800e32c:	f3bf 8f6f 	isb	sy
 800e330:	f3bf 8f4f 	dsb	sy
 800e334:	60fb      	str	r3, [r7, #12]
}
 800e336:	bf00      	nop
 800e338:	bf00      	nop
 800e33a:	e7fd      	b.n	800e338 <vTaskStartScheduler+0xb4>
}
 800e33c:	bf00      	nop
 800e33e:	3718      	adds	r7, #24
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}
 800e344:	08013e7c 	.word	0x08013e7c
 800e348:	0800e995 	.word	0x0800e995
 800e34c:	24002540 	.word	0x24002540
 800e350:	24002048 	.word	0x24002048
 800e354:	2400139c 	.word	0x2400139c
 800e358:	2400253c 	.word	0x2400253c
 800e35c:	24002528 	.word	0x24002528
 800e360:	24002520 	.word	0x24002520

0800e364 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e364:	b480      	push	{r7}
 800e366:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e368:	4b04      	ldr	r3, [pc, #16]	@ (800e37c <vTaskSuspendAll+0x18>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	3301      	adds	r3, #1
 800e36e:	4a03      	ldr	r2, [pc, #12]	@ (800e37c <vTaskSuspendAll+0x18>)
 800e370:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e372:	bf00      	nop
 800e374:	46bd      	mov	sp, r7
 800e376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37a:	4770      	bx	lr
 800e37c:	24002544 	.word	0x24002544

0800e380 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b084      	sub	sp, #16
 800e384:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e386:	2300      	movs	r3, #0
 800e388:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e38a:	2300      	movs	r3, #0
 800e38c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e38e:	4b42      	ldr	r3, [pc, #264]	@ (800e498 <xTaskResumeAll+0x118>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d10b      	bne.n	800e3ae <xTaskResumeAll+0x2e>
	__asm volatile
 800e396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e39a:	f383 8811 	msr	BASEPRI, r3
 800e39e:	f3bf 8f6f 	isb	sy
 800e3a2:	f3bf 8f4f 	dsb	sy
 800e3a6:	603b      	str	r3, [r7, #0]
}
 800e3a8:	bf00      	nop
 800e3aa:	bf00      	nop
 800e3ac:	e7fd      	b.n	800e3aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e3ae:	f001 fc53 	bl	800fc58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e3b2:	4b39      	ldr	r3, [pc, #228]	@ (800e498 <xTaskResumeAll+0x118>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	3b01      	subs	r3, #1
 800e3b8:	4a37      	ldr	r2, [pc, #220]	@ (800e498 <xTaskResumeAll+0x118>)
 800e3ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3bc:	4b36      	ldr	r3, [pc, #216]	@ (800e498 <xTaskResumeAll+0x118>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d162      	bne.n	800e48a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e3c4:	4b35      	ldr	r3, [pc, #212]	@ (800e49c <xTaskResumeAll+0x11c>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d05e      	beq.n	800e48a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e3cc:	e02f      	b.n	800e42e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3ce:	4b34      	ldr	r3, [pc, #208]	@ (800e4a0 <xTaskResumeAll+0x120>)
 800e3d0:	68db      	ldr	r3, [r3, #12]
 800e3d2:	68db      	ldr	r3, [r3, #12]
 800e3d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	3318      	adds	r3, #24
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f7fe fe1e 	bl	800d01c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	3304      	adds	r3, #4
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7fe fe19 	bl	800d01c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3ee:	4b2d      	ldr	r3, [pc, #180]	@ (800e4a4 <xTaskResumeAll+0x124>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d903      	bls.n	800e3fe <xTaskResumeAll+0x7e>
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3fa:	4a2a      	ldr	r2, [pc, #168]	@ (800e4a4 <xTaskResumeAll+0x124>)
 800e3fc:	6013      	str	r3, [r2, #0]
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e402:	4613      	mov	r3, r2
 800e404:	009b      	lsls	r3, r3, #2
 800e406:	4413      	add	r3, r2
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	4a27      	ldr	r2, [pc, #156]	@ (800e4a8 <xTaskResumeAll+0x128>)
 800e40c:	441a      	add	r2, r3
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	3304      	adds	r3, #4
 800e412:	4619      	mov	r1, r3
 800e414:	4610      	mov	r0, r2
 800e416:	f7fe fda4 	bl	800cf62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e41e:	4b23      	ldr	r3, [pc, #140]	@ (800e4ac <xTaskResumeAll+0x12c>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e424:	429a      	cmp	r2, r3
 800e426:	d302      	bcc.n	800e42e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e428:	4b21      	ldr	r3, [pc, #132]	@ (800e4b0 <xTaskResumeAll+0x130>)
 800e42a:	2201      	movs	r2, #1
 800e42c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e42e:	4b1c      	ldr	r3, [pc, #112]	@ (800e4a0 <xTaskResumeAll+0x120>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d1cb      	bne.n	800e3ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d001      	beq.n	800e440 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e43c:	f000 fb66 	bl	800eb0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e440:	4b1c      	ldr	r3, [pc, #112]	@ (800e4b4 <xTaskResumeAll+0x134>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d010      	beq.n	800e46e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e44c:	f000 f846 	bl	800e4dc <xTaskIncrementTick>
 800e450:	4603      	mov	r3, r0
 800e452:	2b00      	cmp	r3, #0
 800e454:	d002      	beq.n	800e45c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e456:	4b16      	ldr	r3, [pc, #88]	@ (800e4b0 <xTaskResumeAll+0x130>)
 800e458:	2201      	movs	r2, #1
 800e45a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	3b01      	subs	r3, #1
 800e460:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d1f1      	bne.n	800e44c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e468:	4b12      	ldr	r3, [pc, #72]	@ (800e4b4 <xTaskResumeAll+0x134>)
 800e46a:	2200      	movs	r2, #0
 800e46c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e46e:	4b10      	ldr	r3, [pc, #64]	@ (800e4b0 <xTaskResumeAll+0x130>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d009      	beq.n	800e48a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e476:	2301      	movs	r3, #1
 800e478:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e47a:	4b0f      	ldr	r3, [pc, #60]	@ (800e4b8 <xTaskResumeAll+0x138>)
 800e47c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e480:	601a      	str	r2, [r3, #0]
 800e482:	f3bf 8f4f 	dsb	sy
 800e486:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e48a:	f001 fc17 	bl	800fcbc <vPortExitCritical>

	return xAlreadyYielded;
 800e48e:	68bb      	ldr	r3, [r7, #8]
}
 800e490:	4618      	mov	r0, r3
 800e492:	3710      	adds	r7, #16
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}
 800e498:	24002544 	.word	0x24002544
 800e49c:	2400251c 	.word	0x2400251c
 800e4a0:	240024dc 	.word	0x240024dc
 800e4a4:	24002524 	.word	0x24002524
 800e4a8:	2400204c 	.word	0x2400204c
 800e4ac:	24002048 	.word	0x24002048
 800e4b0:	24002530 	.word	0x24002530
 800e4b4:	2400252c 	.word	0x2400252c
 800e4b8:	e000ed04 	.word	0xe000ed04

0800e4bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e4bc:	b480      	push	{r7}
 800e4be:	b083      	sub	sp, #12
 800e4c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e4c2:	4b05      	ldr	r3, [pc, #20]	@ (800e4d8 <xTaskGetTickCount+0x1c>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e4c8:	687b      	ldr	r3, [r7, #4]
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	370c      	adds	r7, #12
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d4:	4770      	bx	lr
 800e4d6:	bf00      	nop
 800e4d8:	24002520 	.word	0x24002520

0800e4dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b086      	sub	sp, #24
 800e4e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4e6:	4b4f      	ldr	r3, [pc, #316]	@ (800e624 <xTaskIncrementTick+0x148>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	f040 8090 	bne.w	800e610 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e4f0:	4b4d      	ldr	r3, [pc, #308]	@ (800e628 <xTaskIncrementTick+0x14c>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	3301      	adds	r3, #1
 800e4f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e4f8:	4a4b      	ldr	r2, [pc, #300]	@ (800e628 <xTaskIncrementTick+0x14c>)
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e4fe:	693b      	ldr	r3, [r7, #16]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d121      	bne.n	800e548 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e504:	4b49      	ldr	r3, [pc, #292]	@ (800e62c <xTaskIncrementTick+0x150>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d00b      	beq.n	800e526 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e50e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e512:	f383 8811 	msr	BASEPRI, r3
 800e516:	f3bf 8f6f 	isb	sy
 800e51a:	f3bf 8f4f 	dsb	sy
 800e51e:	603b      	str	r3, [r7, #0]
}
 800e520:	bf00      	nop
 800e522:	bf00      	nop
 800e524:	e7fd      	b.n	800e522 <xTaskIncrementTick+0x46>
 800e526:	4b41      	ldr	r3, [pc, #260]	@ (800e62c <xTaskIncrementTick+0x150>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	60fb      	str	r3, [r7, #12]
 800e52c:	4b40      	ldr	r3, [pc, #256]	@ (800e630 <xTaskIncrementTick+0x154>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	4a3e      	ldr	r2, [pc, #248]	@ (800e62c <xTaskIncrementTick+0x150>)
 800e532:	6013      	str	r3, [r2, #0]
 800e534:	4a3e      	ldr	r2, [pc, #248]	@ (800e630 <xTaskIncrementTick+0x154>)
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	6013      	str	r3, [r2, #0]
 800e53a:	4b3e      	ldr	r3, [pc, #248]	@ (800e634 <xTaskIncrementTick+0x158>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	3301      	adds	r3, #1
 800e540:	4a3c      	ldr	r2, [pc, #240]	@ (800e634 <xTaskIncrementTick+0x158>)
 800e542:	6013      	str	r3, [r2, #0]
 800e544:	f000 fae2 	bl	800eb0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e548:	4b3b      	ldr	r3, [pc, #236]	@ (800e638 <xTaskIncrementTick+0x15c>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	693a      	ldr	r2, [r7, #16]
 800e54e:	429a      	cmp	r2, r3
 800e550:	d349      	bcc.n	800e5e6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e552:	4b36      	ldr	r3, [pc, #216]	@ (800e62c <xTaskIncrementTick+0x150>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d104      	bne.n	800e566 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e55c:	4b36      	ldr	r3, [pc, #216]	@ (800e638 <xTaskIncrementTick+0x15c>)
 800e55e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e562:	601a      	str	r2, [r3, #0]
					break;
 800e564:	e03f      	b.n	800e5e6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e566:	4b31      	ldr	r3, [pc, #196]	@ (800e62c <xTaskIncrementTick+0x150>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	68db      	ldr	r3, [r3, #12]
 800e56c:	68db      	ldr	r3, [r3, #12]
 800e56e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	685b      	ldr	r3, [r3, #4]
 800e574:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e576:	693a      	ldr	r2, [r7, #16]
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d203      	bcs.n	800e586 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e57e:	4a2e      	ldr	r2, [pc, #184]	@ (800e638 <xTaskIncrementTick+0x15c>)
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e584:	e02f      	b.n	800e5e6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e586:	68bb      	ldr	r3, [r7, #8]
 800e588:	3304      	adds	r3, #4
 800e58a:	4618      	mov	r0, r3
 800e58c:	f7fe fd46 	bl	800d01c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e594:	2b00      	cmp	r3, #0
 800e596:	d004      	beq.n	800e5a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	3318      	adds	r3, #24
 800e59c:	4618      	mov	r0, r3
 800e59e:	f7fe fd3d 	bl	800d01c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5a6:	4b25      	ldr	r3, [pc, #148]	@ (800e63c <xTaskIncrementTick+0x160>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	429a      	cmp	r2, r3
 800e5ac:	d903      	bls.n	800e5b6 <xTaskIncrementTick+0xda>
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5b2:	4a22      	ldr	r2, [pc, #136]	@ (800e63c <xTaskIncrementTick+0x160>)
 800e5b4:	6013      	str	r3, [r2, #0]
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5ba:	4613      	mov	r3, r2
 800e5bc:	009b      	lsls	r3, r3, #2
 800e5be:	4413      	add	r3, r2
 800e5c0:	009b      	lsls	r3, r3, #2
 800e5c2:	4a1f      	ldr	r2, [pc, #124]	@ (800e640 <xTaskIncrementTick+0x164>)
 800e5c4:	441a      	add	r2, r3
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	3304      	adds	r3, #4
 800e5ca:	4619      	mov	r1, r3
 800e5cc:	4610      	mov	r0, r2
 800e5ce:	f7fe fcc8 	bl	800cf62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5d6:	4b1b      	ldr	r3, [pc, #108]	@ (800e644 <xTaskIncrementTick+0x168>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d3b8      	bcc.n	800e552 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5e4:	e7b5      	b.n	800e552 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e5e6:	4b17      	ldr	r3, [pc, #92]	@ (800e644 <xTaskIncrementTick+0x168>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5ec:	4914      	ldr	r1, [pc, #80]	@ (800e640 <xTaskIncrementTick+0x164>)
 800e5ee:	4613      	mov	r3, r2
 800e5f0:	009b      	lsls	r3, r3, #2
 800e5f2:	4413      	add	r3, r2
 800e5f4:	009b      	lsls	r3, r3, #2
 800e5f6:	440b      	add	r3, r1
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	2b01      	cmp	r3, #1
 800e5fc:	d901      	bls.n	800e602 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e5fe:	2301      	movs	r3, #1
 800e600:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e602:	4b11      	ldr	r3, [pc, #68]	@ (800e648 <xTaskIncrementTick+0x16c>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d007      	beq.n	800e61a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e60a:	2301      	movs	r3, #1
 800e60c:	617b      	str	r3, [r7, #20]
 800e60e:	e004      	b.n	800e61a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e610:	4b0e      	ldr	r3, [pc, #56]	@ (800e64c <xTaskIncrementTick+0x170>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	3301      	adds	r3, #1
 800e616:	4a0d      	ldr	r2, [pc, #52]	@ (800e64c <xTaskIncrementTick+0x170>)
 800e618:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e61a:	697b      	ldr	r3, [r7, #20]
}
 800e61c:	4618      	mov	r0, r3
 800e61e:	3718      	adds	r7, #24
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}
 800e624:	24002544 	.word	0x24002544
 800e628:	24002520 	.word	0x24002520
 800e62c:	240024d4 	.word	0x240024d4
 800e630:	240024d8 	.word	0x240024d8
 800e634:	24002534 	.word	0x24002534
 800e638:	2400253c 	.word	0x2400253c
 800e63c:	24002524 	.word	0x24002524
 800e640:	2400204c 	.word	0x2400204c
 800e644:	24002048 	.word	0x24002048
 800e648:	24002530 	.word	0x24002530
 800e64c:	2400252c 	.word	0x2400252c

0800e650 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e650:	b480      	push	{r7}
 800e652:	b085      	sub	sp, #20
 800e654:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e656:	4b2b      	ldr	r3, [pc, #172]	@ (800e704 <vTaskSwitchContext+0xb4>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d003      	beq.n	800e666 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e65e:	4b2a      	ldr	r3, [pc, #168]	@ (800e708 <vTaskSwitchContext+0xb8>)
 800e660:	2201      	movs	r2, #1
 800e662:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e664:	e047      	b.n	800e6f6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e666:	4b28      	ldr	r3, [pc, #160]	@ (800e708 <vTaskSwitchContext+0xb8>)
 800e668:	2200      	movs	r2, #0
 800e66a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e66c:	4b27      	ldr	r3, [pc, #156]	@ (800e70c <vTaskSwitchContext+0xbc>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	60fb      	str	r3, [r7, #12]
 800e672:	e011      	b.n	800e698 <vTaskSwitchContext+0x48>
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d10b      	bne.n	800e692 <vTaskSwitchContext+0x42>
	__asm volatile
 800e67a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e67e:	f383 8811 	msr	BASEPRI, r3
 800e682:	f3bf 8f6f 	isb	sy
 800e686:	f3bf 8f4f 	dsb	sy
 800e68a:	607b      	str	r3, [r7, #4]
}
 800e68c:	bf00      	nop
 800e68e:	bf00      	nop
 800e690:	e7fd      	b.n	800e68e <vTaskSwitchContext+0x3e>
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	3b01      	subs	r3, #1
 800e696:	60fb      	str	r3, [r7, #12]
 800e698:	491d      	ldr	r1, [pc, #116]	@ (800e710 <vTaskSwitchContext+0xc0>)
 800e69a:	68fa      	ldr	r2, [r7, #12]
 800e69c:	4613      	mov	r3, r2
 800e69e:	009b      	lsls	r3, r3, #2
 800e6a0:	4413      	add	r3, r2
 800e6a2:	009b      	lsls	r3, r3, #2
 800e6a4:	440b      	add	r3, r1
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d0e3      	beq.n	800e674 <vTaskSwitchContext+0x24>
 800e6ac:	68fa      	ldr	r2, [r7, #12]
 800e6ae:	4613      	mov	r3, r2
 800e6b0:	009b      	lsls	r3, r3, #2
 800e6b2:	4413      	add	r3, r2
 800e6b4:	009b      	lsls	r3, r3, #2
 800e6b6:	4a16      	ldr	r2, [pc, #88]	@ (800e710 <vTaskSwitchContext+0xc0>)
 800e6b8:	4413      	add	r3, r2
 800e6ba:	60bb      	str	r3, [r7, #8]
 800e6bc:	68bb      	ldr	r3, [r7, #8]
 800e6be:	685b      	ldr	r3, [r3, #4]
 800e6c0:	685a      	ldr	r2, [r3, #4]
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	605a      	str	r2, [r3, #4]
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	685a      	ldr	r2, [r3, #4]
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	3308      	adds	r3, #8
 800e6ce:	429a      	cmp	r2, r3
 800e6d0:	d104      	bne.n	800e6dc <vTaskSwitchContext+0x8c>
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	685b      	ldr	r3, [r3, #4]
 800e6d6:	685a      	ldr	r2, [r3, #4]
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	605a      	str	r2, [r3, #4]
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	68db      	ldr	r3, [r3, #12]
 800e6e2:	4a0c      	ldr	r2, [pc, #48]	@ (800e714 <vTaskSwitchContext+0xc4>)
 800e6e4:	6013      	str	r3, [r2, #0]
 800e6e6:	4a09      	ldr	r2, [pc, #36]	@ (800e70c <vTaskSwitchContext+0xbc>)
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e6ec:	4b09      	ldr	r3, [pc, #36]	@ (800e714 <vTaskSwitchContext+0xc4>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	3354      	adds	r3, #84	@ 0x54
 800e6f2:	4a09      	ldr	r2, [pc, #36]	@ (800e718 <vTaskSwitchContext+0xc8>)
 800e6f4:	6013      	str	r3, [r2, #0]
}
 800e6f6:	bf00      	nop
 800e6f8:	3714      	adds	r7, #20
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e700:	4770      	bx	lr
 800e702:	bf00      	nop
 800e704:	24002544 	.word	0x24002544
 800e708:	24002530 	.word	0x24002530
 800e70c:	24002524 	.word	0x24002524
 800e710:	2400204c 	.word	0x2400204c
 800e714:	24002048 	.word	0x24002048
 800e718:	2400139c 	.word	0x2400139c

0800e71c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b084      	sub	sp, #16
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
 800e724:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d10b      	bne.n	800e744 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e72c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e730:	f383 8811 	msr	BASEPRI, r3
 800e734:	f3bf 8f6f 	isb	sy
 800e738:	f3bf 8f4f 	dsb	sy
 800e73c:	60fb      	str	r3, [r7, #12]
}
 800e73e:	bf00      	nop
 800e740:	bf00      	nop
 800e742:	e7fd      	b.n	800e740 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e744:	4b07      	ldr	r3, [pc, #28]	@ (800e764 <vTaskPlaceOnEventList+0x48>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	3318      	adds	r3, #24
 800e74a:	4619      	mov	r1, r3
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f7fe fc2c 	bl	800cfaa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e752:	2101      	movs	r1, #1
 800e754:	6838      	ldr	r0, [r7, #0]
 800e756:	f000 fd9f 	bl	800f298 <prvAddCurrentTaskToDelayedList>
}
 800e75a:	bf00      	nop
 800e75c:	3710      	adds	r7, #16
 800e75e:	46bd      	mov	sp, r7
 800e760:	bd80      	pop	{r7, pc}
 800e762:	bf00      	nop
 800e764:	24002048 	.word	0x24002048

0800e768 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b086      	sub	sp, #24
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	60f8      	str	r0, [r7, #12]
 800e770:	60b9      	str	r1, [r7, #8]
 800e772:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d10b      	bne.n	800e792 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e77a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e77e:	f383 8811 	msr	BASEPRI, r3
 800e782:	f3bf 8f6f 	isb	sy
 800e786:	f3bf 8f4f 	dsb	sy
 800e78a:	617b      	str	r3, [r7, #20]
}
 800e78c:	bf00      	nop
 800e78e:	bf00      	nop
 800e790:	e7fd      	b.n	800e78e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e792:	4b0a      	ldr	r3, [pc, #40]	@ (800e7bc <vTaskPlaceOnEventListRestricted+0x54>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	3318      	adds	r3, #24
 800e798:	4619      	mov	r1, r3
 800e79a:	68f8      	ldr	r0, [r7, #12]
 800e79c:	f7fe fbe1 	bl	800cf62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d002      	beq.n	800e7ac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e7a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e7aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e7ac:	6879      	ldr	r1, [r7, #4]
 800e7ae:	68b8      	ldr	r0, [r7, #8]
 800e7b0:	f000 fd72 	bl	800f298 <prvAddCurrentTaskToDelayedList>
	}
 800e7b4:	bf00      	nop
 800e7b6:	3718      	adds	r7, #24
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}
 800e7bc:	24002048 	.word	0x24002048

0800e7c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b086      	sub	sp, #24
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	68db      	ldr	r3, [r3, #12]
 800e7cc:	68db      	ldr	r3, [r3, #12]
 800e7ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d10b      	bne.n	800e7ee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7da:	f383 8811 	msr	BASEPRI, r3
 800e7de:	f3bf 8f6f 	isb	sy
 800e7e2:	f3bf 8f4f 	dsb	sy
 800e7e6:	60fb      	str	r3, [r7, #12]
}
 800e7e8:	bf00      	nop
 800e7ea:	bf00      	nop
 800e7ec:	e7fd      	b.n	800e7ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e7ee:	693b      	ldr	r3, [r7, #16]
 800e7f0:	3318      	adds	r3, #24
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7fe fc12 	bl	800d01c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7f8:	4b1d      	ldr	r3, [pc, #116]	@ (800e870 <xTaskRemoveFromEventList+0xb0>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d11d      	bne.n	800e83c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	3304      	adds	r3, #4
 800e804:	4618      	mov	r0, r3
 800e806:	f7fe fc09 	bl	800d01c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e80e:	4b19      	ldr	r3, [pc, #100]	@ (800e874 <xTaskRemoveFromEventList+0xb4>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	429a      	cmp	r2, r3
 800e814:	d903      	bls.n	800e81e <xTaskRemoveFromEventList+0x5e>
 800e816:	693b      	ldr	r3, [r7, #16]
 800e818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e81a:	4a16      	ldr	r2, [pc, #88]	@ (800e874 <xTaskRemoveFromEventList+0xb4>)
 800e81c:	6013      	str	r3, [r2, #0]
 800e81e:	693b      	ldr	r3, [r7, #16]
 800e820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e822:	4613      	mov	r3, r2
 800e824:	009b      	lsls	r3, r3, #2
 800e826:	4413      	add	r3, r2
 800e828:	009b      	lsls	r3, r3, #2
 800e82a:	4a13      	ldr	r2, [pc, #76]	@ (800e878 <xTaskRemoveFromEventList+0xb8>)
 800e82c:	441a      	add	r2, r3
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	3304      	adds	r3, #4
 800e832:	4619      	mov	r1, r3
 800e834:	4610      	mov	r0, r2
 800e836:	f7fe fb94 	bl	800cf62 <vListInsertEnd>
 800e83a:	e005      	b.n	800e848 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e83c:	693b      	ldr	r3, [r7, #16]
 800e83e:	3318      	adds	r3, #24
 800e840:	4619      	mov	r1, r3
 800e842:	480e      	ldr	r0, [pc, #56]	@ (800e87c <xTaskRemoveFromEventList+0xbc>)
 800e844:	f7fe fb8d 	bl	800cf62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e848:	693b      	ldr	r3, [r7, #16]
 800e84a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e84c:	4b0c      	ldr	r3, [pc, #48]	@ (800e880 <xTaskRemoveFromEventList+0xc0>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e852:	429a      	cmp	r2, r3
 800e854:	d905      	bls.n	800e862 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e856:	2301      	movs	r3, #1
 800e858:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e85a:	4b0a      	ldr	r3, [pc, #40]	@ (800e884 <xTaskRemoveFromEventList+0xc4>)
 800e85c:	2201      	movs	r2, #1
 800e85e:	601a      	str	r2, [r3, #0]
 800e860:	e001      	b.n	800e866 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e862:	2300      	movs	r3, #0
 800e864:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e866:	697b      	ldr	r3, [r7, #20]
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3718      	adds	r7, #24
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}
 800e870:	24002544 	.word	0x24002544
 800e874:	24002524 	.word	0x24002524
 800e878:	2400204c 	.word	0x2400204c
 800e87c:	240024dc 	.word	0x240024dc
 800e880:	24002048 	.word	0x24002048
 800e884:	24002530 	.word	0x24002530

0800e888 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e888:	b480      	push	{r7}
 800e88a:	b083      	sub	sp, #12
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e890:	4b06      	ldr	r3, [pc, #24]	@ (800e8ac <vTaskInternalSetTimeOutState+0x24>)
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e898:	4b05      	ldr	r3, [pc, #20]	@ (800e8b0 <vTaskInternalSetTimeOutState+0x28>)
 800e89a:	681a      	ldr	r2, [r3, #0]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	605a      	str	r2, [r3, #4]
}
 800e8a0:	bf00      	nop
 800e8a2:	370c      	adds	r7, #12
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8aa:	4770      	bx	lr
 800e8ac:	24002534 	.word	0x24002534
 800e8b0:	24002520 	.word	0x24002520

0800e8b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b088      	sub	sp, #32
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d10b      	bne.n	800e8dc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e8c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8c8:	f383 8811 	msr	BASEPRI, r3
 800e8cc:	f3bf 8f6f 	isb	sy
 800e8d0:	f3bf 8f4f 	dsb	sy
 800e8d4:	613b      	str	r3, [r7, #16]
}
 800e8d6:	bf00      	nop
 800e8d8:	bf00      	nop
 800e8da:	e7fd      	b.n	800e8d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d10b      	bne.n	800e8fa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e8e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8e6:	f383 8811 	msr	BASEPRI, r3
 800e8ea:	f3bf 8f6f 	isb	sy
 800e8ee:	f3bf 8f4f 	dsb	sy
 800e8f2:	60fb      	str	r3, [r7, #12]
}
 800e8f4:	bf00      	nop
 800e8f6:	bf00      	nop
 800e8f8:	e7fd      	b.n	800e8f6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e8fa:	f001 f9ad 	bl	800fc58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e8fe:	4b1d      	ldr	r3, [pc, #116]	@ (800e974 <xTaskCheckForTimeOut+0xc0>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	685b      	ldr	r3, [r3, #4]
 800e908:	69ba      	ldr	r2, [r7, #24]
 800e90a:	1ad3      	subs	r3, r2, r3
 800e90c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e916:	d102      	bne.n	800e91e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e918:	2300      	movs	r3, #0
 800e91a:	61fb      	str	r3, [r7, #28]
 800e91c:	e023      	b.n	800e966 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681a      	ldr	r2, [r3, #0]
 800e922:	4b15      	ldr	r3, [pc, #84]	@ (800e978 <xTaskCheckForTimeOut+0xc4>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	429a      	cmp	r2, r3
 800e928:	d007      	beq.n	800e93a <xTaskCheckForTimeOut+0x86>
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	69ba      	ldr	r2, [r7, #24]
 800e930:	429a      	cmp	r2, r3
 800e932:	d302      	bcc.n	800e93a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e934:	2301      	movs	r3, #1
 800e936:	61fb      	str	r3, [r7, #28]
 800e938:	e015      	b.n	800e966 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	697a      	ldr	r2, [r7, #20]
 800e940:	429a      	cmp	r2, r3
 800e942:	d20b      	bcs.n	800e95c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	681a      	ldr	r2, [r3, #0]
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	1ad2      	subs	r2, r2, r3
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f7ff ff99 	bl	800e888 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e956:	2300      	movs	r3, #0
 800e958:	61fb      	str	r3, [r7, #28]
 800e95a:	e004      	b.n	800e966 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	2200      	movs	r2, #0
 800e960:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e962:	2301      	movs	r3, #1
 800e964:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e966:	f001 f9a9 	bl	800fcbc <vPortExitCritical>

	return xReturn;
 800e96a:	69fb      	ldr	r3, [r7, #28]
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3720      	adds	r7, #32
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}
 800e974:	24002520 	.word	0x24002520
 800e978:	24002534 	.word	0x24002534

0800e97c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e97c:	b480      	push	{r7}
 800e97e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e980:	4b03      	ldr	r3, [pc, #12]	@ (800e990 <vTaskMissedYield+0x14>)
 800e982:	2201      	movs	r2, #1
 800e984:	601a      	str	r2, [r3, #0]
}
 800e986:	bf00      	nop
 800e988:	46bd      	mov	sp, r7
 800e98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98e:	4770      	bx	lr
 800e990:	24002530 	.word	0x24002530

0800e994 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b082      	sub	sp, #8
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e99c:	f000 f852 	bl	800ea44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e9a0:	4b06      	ldr	r3, [pc, #24]	@ (800e9bc <prvIdleTask+0x28>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	2b01      	cmp	r3, #1
 800e9a6:	d9f9      	bls.n	800e99c <prvIdleTask+0x8>
			{
				taskYIELD();
 800e9a8:	4b05      	ldr	r3, [pc, #20]	@ (800e9c0 <prvIdleTask+0x2c>)
 800e9aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9ae:	601a      	str	r2, [r3, #0]
 800e9b0:	f3bf 8f4f 	dsb	sy
 800e9b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e9b8:	e7f0      	b.n	800e99c <prvIdleTask+0x8>
 800e9ba:	bf00      	nop
 800e9bc:	2400204c 	.word	0x2400204c
 800e9c0:	e000ed04 	.word	0xe000ed04

0800e9c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b082      	sub	sp, #8
 800e9c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	607b      	str	r3, [r7, #4]
 800e9ce:	e00c      	b.n	800e9ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e9d0:	687a      	ldr	r2, [r7, #4]
 800e9d2:	4613      	mov	r3, r2
 800e9d4:	009b      	lsls	r3, r3, #2
 800e9d6:	4413      	add	r3, r2
 800e9d8:	009b      	lsls	r3, r3, #2
 800e9da:	4a12      	ldr	r2, [pc, #72]	@ (800ea24 <prvInitialiseTaskLists+0x60>)
 800e9dc:	4413      	add	r3, r2
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7fe fa92 	bl	800cf08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	607b      	str	r3, [r7, #4]
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2b37      	cmp	r3, #55	@ 0x37
 800e9ee:	d9ef      	bls.n	800e9d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e9f0:	480d      	ldr	r0, [pc, #52]	@ (800ea28 <prvInitialiseTaskLists+0x64>)
 800e9f2:	f7fe fa89 	bl	800cf08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e9f6:	480d      	ldr	r0, [pc, #52]	@ (800ea2c <prvInitialiseTaskLists+0x68>)
 800e9f8:	f7fe fa86 	bl	800cf08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e9fc:	480c      	ldr	r0, [pc, #48]	@ (800ea30 <prvInitialiseTaskLists+0x6c>)
 800e9fe:	f7fe fa83 	bl	800cf08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ea02:	480c      	ldr	r0, [pc, #48]	@ (800ea34 <prvInitialiseTaskLists+0x70>)
 800ea04:	f7fe fa80 	bl	800cf08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ea08:	480b      	ldr	r0, [pc, #44]	@ (800ea38 <prvInitialiseTaskLists+0x74>)
 800ea0a:	f7fe fa7d 	bl	800cf08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ea0e:	4b0b      	ldr	r3, [pc, #44]	@ (800ea3c <prvInitialiseTaskLists+0x78>)
 800ea10:	4a05      	ldr	r2, [pc, #20]	@ (800ea28 <prvInitialiseTaskLists+0x64>)
 800ea12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ea14:	4b0a      	ldr	r3, [pc, #40]	@ (800ea40 <prvInitialiseTaskLists+0x7c>)
 800ea16:	4a05      	ldr	r2, [pc, #20]	@ (800ea2c <prvInitialiseTaskLists+0x68>)
 800ea18:	601a      	str	r2, [r3, #0]
}
 800ea1a:	bf00      	nop
 800ea1c:	3708      	adds	r7, #8
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}
 800ea22:	bf00      	nop
 800ea24:	2400204c 	.word	0x2400204c
 800ea28:	240024ac 	.word	0x240024ac
 800ea2c:	240024c0 	.word	0x240024c0
 800ea30:	240024dc 	.word	0x240024dc
 800ea34:	240024f0 	.word	0x240024f0
 800ea38:	24002508 	.word	0x24002508
 800ea3c:	240024d4 	.word	0x240024d4
 800ea40:	240024d8 	.word	0x240024d8

0800ea44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b082      	sub	sp, #8
 800ea48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea4a:	e019      	b.n	800ea80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ea4c:	f001 f904 	bl	800fc58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea50:	4b10      	ldr	r3, [pc, #64]	@ (800ea94 <prvCheckTasksWaitingTermination+0x50>)
 800ea52:	68db      	ldr	r3, [r3, #12]
 800ea54:	68db      	ldr	r3, [r3, #12]
 800ea56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	3304      	adds	r3, #4
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f7fe fadd 	bl	800d01c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ea62:	4b0d      	ldr	r3, [pc, #52]	@ (800ea98 <prvCheckTasksWaitingTermination+0x54>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	3b01      	subs	r3, #1
 800ea68:	4a0b      	ldr	r2, [pc, #44]	@ (800ea98 <prvCheckTasksWaitingTermination+0x54>)
 800ea6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ea6c:	4b0b      	ldr	r3, [pc, #44]	@ (800ea9c <prvCheckTasksWaitingTermination+0x58>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	3b01      	subs	r3, #1
 800ea72:	4a0a      	ldr	r2, [pc, #40]	@ (800ea9c <prvCheckTasksWaitingTermination+0x58>)
 800ea74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ea76:	f001 f921 	bl	800fcbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	f000 f810 	bl	800eaa0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea80:	4b06      	ldr	r3, [pc, #24]	@ (800ea9c <prvCheckTasksWaitingTermination+0x58>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d1e1      	bne.n	800ea4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ea88:	bf00      	nop
 800ea8a:	bf00      	nop
 800ea8c:	3708      	adds	r7, #8
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}
 800ea92:	bf00      	nop
 800ea94:	240024f0 	.word	0x240024f0
 800ea98:	2400251c 	.word	0x2400251c
 800ea9c:	24002504 	.word	0x24002504

0800eaa0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b084      	sub	sp, #16
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	3354      	adds	r3, #84	@ 0x54
 800eaac:	4618      	mov	r0, r3
 800eaae:	f004 ff5b 	bl	8013968 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d108      	bne.n	800eace <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eac0:	4618      	mov	r0, r3
 800eac2:	f001 fab9 	bl	8010038 <vPortFree>
				vPortFree( pxTCB );
 800eac6:	6878      	ldr	r0, [r7, #4]
 800eac8:	f001 fab6 	bl	8010038 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800eacc:	e019      	b.n	800eb02 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ead4:	2b01      	cmp	r3, #1
 800ead6:	d103      	bne.n	800eae0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f001 faad 	bl	8010038 <vPortFree>
	}
 800eade:	e010      	b.n	800eb02 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800eae6:	2b02      	cmp	r3, #2
 800eae8:	d00b      	beq.n	800eb02 <prvDeleteTCB+0x62>
	__asm volatile
 800eaea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaee:	f383 8811 	msr	BASEPRI, r3
 800eaf2:	f3bf 8f6f 	isb	sy
 800eaf6:	f3bf 8f4f 	dsb	sy
 800eafa:	60fb      	str	r3, [r7, #12]
}
 800eafc:	bf00      	nop
 800eafe:	bf00      	nop
 800eb00:	e7fd      	b.n	800eafe <prvDeleteTCB+0x5e>
	}
 800eb02:	bf00      	nop
 800eb04:	3710      	adds	r7, #16
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}
	...

0800eb0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b083      	sub	sp, #12
 800eb10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eb12:	4b0c      	ldr	r3, [pc, #48]	@ (800eb44 <prvResetNextTaskUnblockTime+0x38>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d104      	bne.n	800eb26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eb1c:	4b0a      	ldr	r3, [pc, #40]	@ (800eb48 <prvResetNextTaskUnblockTime+0x3c>)
 800eb1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800eb22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800eb24:	e008      	b.n	800eb38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb26:	4b07      	ldr	r3, [pc, #28]	@ (800eb44 <prvResetNextTaskUnblockTime+0x38>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	68db      	ldr	r3, [r3, #12]
 800eb2c:	68db      	ldr	r3, [r3, #12]
 800eb2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	685b      	ldr	r3, [r3, #4]
 800eb34:	4a04      	ldr	r2, [pc, #16]	@ (800eb48 <prvResetNextTaskUnblockTime+0x3c>)
 800eb36:	6013      	str	r3, [r2, #0]
}
 800eb38:	bf00      	nop
 800eb3a:	370c      	adds	r7, #12
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb42:	4770      	bx	lr
 800eb44:	240024d4 	.word	0x240024d4
 800eb48:	2400253c 	.word	0x2400253c

0800eb4c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800eb4c:	b480      	push	{r7}
 800eb4e:	b083      	sub	sp, #12
 800eb50:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800eb52:	4b05      	ldr	r3, [pc, #20]	@ (800eb68 <xTaskGetCurrentTaskHandle+0x1c>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	607b      	str	r3, [r7, #4]

		return xReturn;
 800eb58:	687b      	ldr	r3, [r7, #4]
	}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	370c      	adds	r7, #12
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb64:	4770      	bx	lr
 800eb66:	bf00      	nop
 800eb68:	24002048 	.word	0x24002048

0800eb6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800eb6c:	b480      	push	{r7}
 800eb6e:	b083      	sub	sp, #12
 800eb70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800eb72:	4b0b      	ldr	r3, [pc, #44]	@ (800eba0 <xTaskGetSchedulerState+0x34>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d102      	bne.n	800eb80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	607b      	str	r3, [r7, #4]
 800eb7e:	e008      	b.n	800eb92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb80:	4b08      	ldr	r3, [pc, #32]	@ (800eba4 <xTaskGetSchedulerState+0x38>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d102      	bne.n	800eb8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eb88:	2302      	movs	r3, #2
 800eb8a:	607b      	str	r3, [r7, #4]
 800eb8c:	e001      	b.n	800eb92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800eb92:	687b      	ldr	r3, [r7, #4]
	}
 800eb94:	4618      	mov	r0, r3
 800eb96:	370c      	adds	r7, #12
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9e:	4770      	bx	lr
 800eba0:	24002528 	.word	0x24002528
 800eba4:	24002544 	.word	0x24002544

0800eba8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b084      	sub	sp, #16
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d051      	beq.n	800ec62 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebc2:	4b2a      	ldr	r3, [pc, #168]	@ (800ec6c <xTaskPriorityInherit+0xc4>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebc8:	429a      	cmp	r2, r3
 800ebca:	d241      	bcs.n	800ec50 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ebcc:	68bb      	ldr	r3, [r7, #8]
 800ebce:	699b      	ldr	r3, [r3, #24]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	db06      	blt.n	800ebe2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebd4:	4b25      	ldr	r3, [pc, #148]	@ (800ec6c <xTaskPriorityInherit+0xc4>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebda:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	6959      	ldr	r1, [r3, #20]
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebea:	4613      	mov	r3, r2
 800ebec:	009b      	lsls	r3, r3, #2
 800ebee:	4413      	add	r3, r2
 800ebf0:	009b      	lsls	r3, r3, #2
 800ebf2:	4a1f      	ldr	r2, [pc, #124]	@ (800ec70 <xTaskPriorityInherit+0xc8>)
 800ebf4:	4413      	add	r3, r2
 800ebf6:	4299      	cmp	r1, r3
 800ebf8:	d122      	bne.n	800ec40 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	3304      	adds	r3, #4
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7fe fa0c 	bl	800d01c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ec04:	4b19      	ldr	r3, [pc, #100]	@ (800ec6c <xTaskPriorityInherit+0xc4>)
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec0a:	68bb      	ldr	r3, [r7, #8]
 800ec0c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec12:	4b18      	ldr	r3, [pc, #96]	@ (800ec74 <xTaskPriorityInherit+0xcc>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	429a      	cmp	r2, r3
 800ec18:	d903      	bls.n	800ec22 <xTaskPriorityInherit+0x7a>
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec1e:	4a15      	ldr	r2, [pc, #84]	@ (800ec74 <xTaskPriorityInherit+0xcc>)
 800ec20:	6013      	str	r3, [r2, #0]
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec26:	4613      	mov	r3, r2
 800ec28:	009b      	lsls	r3, r3, #2
 800ec2a:	4413      	add	r3, r2
 800ec2c:	009b      	lsls	r3, r3, #2
 800ec2e:	4a10      	ldr	r2, [pc, #64]	@ (800ec70 <xTaskPriorityInherit+0xc8>)
 800ec30:	441a      	add	r2, r3
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	3304      	adds	r3, #4
 800ec36:	4619      	mov	r1, r3
 800ec38:	4610      	mov	r0, r2
 800ec3a:	f7fe f992 	bl	800cf62 <vListInsertEnd>
 800ec3e:	e004      	b.n	800ec4a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ec40:	4b0a      	ldr	r3, [pc, #40]	@ (800ec6c <xTaskPriorityInherit+0xc4>)
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	60fb      	str	r3, [r7, #12]
 800ec4e:	e008      	b.n	800ec62 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ec54:	4b05      	ldr	r3, [pc, #20]	@ (800ec6c <xTaskPriorityInherit+0xc4>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec5a:	429a      	cmp	r2, r3
 800ec5c:	d201      	bcs.n	800ec62 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ec5e:	2301      	movs	r3, #1
 800ec60:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec62:	68fb      	ldr	r3, [r7, #12]
	}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3710      	adds	r7, #16
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}
 800ec6c:	24002048 	.word	0x24002048
 800ec70:	2400204c 	.word	0x2400204c
 800ec74:	24002524 	.word	0x24002524

0800ec78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b086      	sub	sp, #24
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ec84:	2300      	movs	r3, #0
 800ec86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d058      	beq.n	800ed40 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ec8e:	4b2f      	ldr	r3, [pc, #188]	@ (800ed4c <xTaskPriorityDisinherit+0xd4>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	693a      	ldr	r2, [r7, #16]
 800ec94:	429a      	cmp	r2, r3
 800ec96:	d00b      	beq.n	800ecb0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ec98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec9c:	f383 8811 	msr	BASEPRI, r3
 800eca0:	f3bf 8f6f 	isb	sy
 800eca4:	f3bf 8f4f 	dsb	sy
 800eca8:	60fb      	str	r3, [r7, #12]
}
 800ecaa:	bf00      	nop
 800ecac:	bf00      	nop
 800ecae:	e7fd      	b.n	800ecac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d10b      	bne.n	800ecd0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ecb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecbc:	f383 8811 	msr	BASEPRI, r3
 800ecc0:	f3bf 8f6f 	isb	sy
 800ecc4:	f3bf 8f4f 	dsb	sy
 800ecc8:	60bb      	str	r3, [r7, #8]
}
 800ecca:	bf00      	nop
 800eccc:	bf00      	nop
 800ecce:	e7fd      	b.n	800eccc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ecd4:	1e5a      	subs	r2, r3, #1
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecde:	693b      	ldr	r3, [r7, #16]
 800ece0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ece2:	429a      	cmp	r2, r3
 800ece4:	d02c      	beq.n	800ed40 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ece6:	693b      	ldr	r3, [r7, #16]
 800ece8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d128      	bne.n	800ed40 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ecee:	693b      	ldr	r3, [r7, #16]
 800ecf0:	3304      	adds	r3, #4
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f7fe f992 	bl	800d01c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ecf8:	693b      	ldr	r3, [r7, #16]
 800ecfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ecfc:	693b      	ldr	r3, [r7, #16]
 800ecfe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed00:	693b      	ldr	r3, [r7, #16]
 800ed02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed04:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ed08:	693b      	ldr	r3, [r7, #16]
 800ed0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed10:	4b0f      	ldr	r3, [pc, #60]	@ (800ed50 <xTaskPriorityDisinherit+0xd8>)
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	429a      	cmp	r2, r3
 800ed16:	d903      	bls.n	800ed20 <xTaskPriorityDisinherit+0xa8>
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed1c:	4a0c      	ldr	r2, [pc, #48]	@ (800ed50 <xTaskPriorityDisinherit+0xd8>)
 800ed1e:	6013      	str	r3, [r2, #0]
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed24:	4613      	mov	r3, r2
 800ed26:	009b      	lsls	r3, r3, #2
 800ed28:	4413      	add	r3, r2
 800ed2a:	009b      	lsls	r3, r3, #2
 800ed2c:	4a09      	ldr	r2, [pc, #36]	@ (800ed54 <xTaskPriorityDisinherit+0xdc>)
 800ed2e:	441a      	add	r2, r3
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	3304      	adds	r3, #4
 800ed34:	4619      	mov	r1, r3
 800ed36:	4610      	mov	r0, r2
 800ed38:	f7fe f913 	bl	800cf62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ed40:	697b      	ldr	r3, [r7, #20]
	}
 800ed42:	4618      	mov	r0, r3
 800ed44:	3718      	adds	r7, #24
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}
 800ed4a:	bf00      	nop
 800ed4c:	24002048 	.word	0x24002048
 800ed50:	24002524 	.word	0x24002524
 800ed54:	2400204c 	.word	0x2400204c

0800ed58 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b088      	sub	sp, #32
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ed66:	2301      	movs	r3, #1
 800ed68:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d06c      	beq.n	800ee4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ed70:	69bb      	ldr	r3, [r7, #24]
 800ed72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d10b      	bne.n	800ed90 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ed78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed7c:	f383 8811 	msr	BASEPRI, r3
 800ed80:	f3bf 8f6f 	isb	sy
 800ed84:	f3bf 8f4f 	dsb	sy
 800ed88:	60fb      	str	r3, [r7, #12]
}
 800ed8a:	bf00      	nop
 800ed8c:	bf00      	nop
 800ed8e:	e7fd      	b.n	800ed8c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ed90:	69bb      	ldr	r3, [r7, #24]
 800ed92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed94:	683a      	ldr	r2, [r7, #0]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d902      	bls.n	800eda0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	61fb      	str	r3, [r7, #28]
 800ed9e:	e002      	b.n	800eda6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800eda0:	69bb      	ldr	r3, [r7, #24]
 800eda2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eda4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800eda6:	69bb      	ldr	r3, [r7, #24]
 800eda8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edaa:	69fa      	ldr	r2, [r7, #28]
 800edac:	429a      	cmp	r2, r3
 800edae:	d04c      	beq.n	800ee4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800edb0:	69bb      	ldr	r3, [r7, #24]
 800edb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edb4:	697a      	ldr	r2, [r7, #20]
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d147      	bne.n	800ee4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800edba:	4b26      	ldr	r3, [pc, #152]	@ (800ee54 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	69ba      	ldr	r2, [r7, #24]
 800edc0:	429a      	cmp	r2, r3
 800edc2:	d10b      	bne.n	800eddc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800edc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edc8:	f383 8811 	msr	BASEPRI, r3
 800edcc:	f3bf 8f6f 	isb	sy
 800edd0:	f3bf 8f4f 	dsb	sy
 800edd4:	60bb      	str	r3, [r7, #8]
}
 800edd6:	bf00      	nop
 800edd8:	bf00      	nop
 800edda:	e7fd      	b.n	800edd8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800eddc:	69bb      	ldr	r3, [r7, #24]
 800edde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ede0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ede2:	69bb      	ldr	r3, [r7, #24]
 800ede4:	69fa      	ldr	r2, [r7, #28]
 800ede6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ede8:	69bb      	ldr	r3, [r7, #24]
 800edea:	699b      	ldr	r3, [r3, #24]
 800edec:	2b00      	cmp	r3, #0
 800edee:	db04      	blt.n	800edfa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edf0:	69fb      	ldr	r3, [r7, #28]
 800edf2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800edf6:	69bb      	ldr	r3, [r7, #24]
 800edf8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800edfa:	69bb      	ldr	r3, [r7, #24]
 800edfc:	6959      	ldr	r1, [r3, #20]
 800edfe:	693a      	ldr	r2, [r7, #16]
 800ee00:	4613      	mov	r3, r2
 800ee02:	009b      	lsls	r3, r3, #2
 800ee04:	4413      	add	r3, r2
 800ee06:	009b      	lsls	r3, r3, #2
 800ee08:	4a13      	ldr	r2, [pc, #76]	@ (800ee58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ee0a:	4413      	add	r3, r2
 800ee0c:	4299      	cmp	r1, r3
 800ee0e:	d11c      	bne.n	800ee4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee10:	69bb      	ldr	r3, [r7, #24]
 800ee12:	3304      	adds	r3, #4
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7fe f901 	bl	800d01c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ee1a:	69bb      	ldr	r3, [r7, #24]
 800ee1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee1e:	4b0f      	ldr	r3, [pc, #60]	@ (800ee5c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d903      	bls.n	800ee2e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ee26:	69bb      	ldr	r3, [r7, #24]
 800ee28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee2a:	4a0c      	ldr	r2, [pc, #48]	@ (800ee5c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ee2c:	6013      	str	r3, [r2, #0]
 800ee2e:	69bb      	ldr	r3, [r7, #24]
 800ee30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee32:	4613      	mov	r3, r2
 800ee34:	009b      	lsls	r3, r3, #2
 800ee36:	4413      	add	r3, r2
 800ee38:	009b      	lsls	r3, r3, #2
 800ee3a:	4a07      	ldr	r2, [pc, #28]	@ (800ee58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ee3c:	441a      	add	r2, r3
 800ee3e:	69bb      	ldr	r3, [r7, #24]
 800ee40:	3304      	adds	r3, #4
 800ee42:	4619      	mov	r1, r3
 800ee44:	4610      	mov	r0, r2
 800ee46:	f7fe f88c 	bl	800cf62 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ee4a:	bf00      	nop
 800ee4c:	3720      	adds	r7, #32
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	bf00      	nop
 800ee54:	24002048 	.word	0x24002048
 800ee58:	2400204c 	.word	0x2400204c
 800ee5c:	24002524 	.word	0x24002524

0800ee60 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ee60:	b480      	push	{r7}
 800ee62:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ee64:	4b07      	ldr	r3, [pc, #28]	@ (800ee84 <pvTaskIncrementMutexHeldCount+0x24>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d004      	beq.n	800ee76 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ee6c:	4b05      	ldr	r3, [pc, #20]	@ (800ee84 <pvTaskIncrementMutexHeldCount+0x24>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ee72:	3201      	adds	r2, #1
 800ee74:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800ee76:	4b03      	ldr	r3, [pc, #12]	@ (800ee84 <pvTaskIncrementMutexHeldCount+0x24>)
 800ee78:	681b      	ldr	r3, [r3, #0]
	}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee82:	4770      	bx	lr
 800ee84:	24002048 	.word	0x24002048

0800ee88 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b086      	sub	sp, #24
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	60f8      	str	r0, [r7, #12]
 800ee90:	60b9      	str	r1, [r7, #8]
 800ee92:	607a      	str	r2, [r7, #4]
 800ee94:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800ee96:	f000 fedf 	bl	800fc58 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ee9a:	4b29      	ldr	r3, [pc, #164]	@ (800ef40 <xTaskNotifyWait+0xb8>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800eea2:	b2db      	uxtb	r3, r3
 800eea4:	2b02      	cmp	r3, #2
 800eea6:	d01c      	beq.n	800eee2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800eea8:	4b25      	ldr	r3, [pc, #148]	@ (800ef40 <xTaskNotifyWait+0xb8>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800eeb0:	68fa      	ldr	r2, [r7, #12]
 800eeb2:	43d2      	mvns	r2, r2
 800eeb4:	400a      	ands	r2, r1
 800eeb6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800eeba:	4b21      	ldr	r3, [pc, #132]	@ (800ef40 <xTaskNotifyWait+0xb8>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	2201      	movs	r2, #1
 800eec0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d00b      	beq.n	800eee2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800eeca:	2101      	movs	r1, #1
 800eecc:	6838      	ldr	r0, [r7, #0]
 800eece:	f000 f9e3 	bl	800f298 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800eed2:	4b1c      	ldr	r3, [pc, #112]	@ (800ef44 <xTaskNotifyWait+0xbc>)
 800eed4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eed8:	601a      	str	r2, [r3, #0]
 800eeda:	f3bf 8f4f 	dsb	sy
 800eede:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800eee2:	f000 feeb 	bl	800fcbc <vPortExitCritical>

		taskENTER_CRITICAL();
 800eee6:	f000 feb7 	bl	800fc58 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d005      	beq.n	800eefc <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800eef0:	4b13      	ldr	r3, [pc, #76]	@ (800ef40 <xTaskNotifyWait+0xb8>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800eefc:	4b10      	ldr	r3, [pc, #64]	@ (800ef40 <xTaskNotifyWait+0xb8>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800ef04:	b2db      	uxtb	r3, r3
 800ef06:	2b02      	cmp	r3, #2
 800ef08:	d002      	beq.n	800ef10 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	617b      	str	r3, [r7, #20]
 800ef0e:	e00a      	b.n	800ef26 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800ef10:	4b0b      	ldr	r3, [pc, #44]	@ (800ef40 <xTaskNotifyWait+0xb8>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800ef18:	68ba      	ldr	r2, [r7, #8]
 800ef1a:	43d2      	mvns	r2, r2
 800ef1c:	400a      	ands	r2, r1
 800ef1e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800ef22:	2301      	movs	r3, #1
 800ef24:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ef26:	4b06      	ldr	r3, [pc, #24]	@ (800ef40 <xTaskNotifyWait+0xb8>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800ef30:	f000 fec4 	bl	800fcbc <vPortExitCritical>

		return xReturn;
 800ef34:	697b      	ldr	r3, [r7, #20]
	}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3718      	adds	r7, #24
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}
 800ef3e:	bf00      	nop
 800ef40:	24002048 	.word	0x24002048
 800ef44:	e000ed04 	.word	0xe000ed04

0800ef48 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b08a      	sub	sp, #40	@ 0x28
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	60f8      	str	r0, [r7, #12]
 800ef50:	60b9      	str	r1, [r7, #8]
 800ef52:	603b      	str	r3, [r7, #0]
 800ef54:	4613      	mov	r3, r2
 800ef56:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800ef58:	2301      	movs	r3, #1
 800ef5a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d10b      	bne.n	800ef7a <xTaskGenericNotify+0x32>
	__asm volatile
 800ef62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef66:	f383 8811 	msr	BASEPRI, r3
 800ef6a:	f3bf 8f6f 	isb	sy
 800ef6e:	f3bf 8f4f 	dsb	sy
 800ef72:	61bb      	str	r3, [r7, #24]
}
 800ef74:	bf00      	nop
 800ef76:	bf00      	nop
 800ef78:	e7fd      	b.n	800ef76 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800ef7e:	f000 fe6b 	bl	800fc58 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d004      	beq.n	800ef92 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ef88:	6a3b      	ldr	r3, [r7, #32]
 800ef8a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ef92:	6a3b      	ldr	r3, [r7, #32]
 800ef94:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800ef98:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ef9a:	6a3b      	ldr	r3, [r7, #32]
 800ef9c:	2202      	movs	r2, #2
 800ef9e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800efa2:	79fb      	ldrb	r3, [r7, #7]
 800efa4:	2b04      	cmp	r3, #4
 800efa6:	d82e      	bhi.n	800f006 <xTaskGenericNotify+0xbe>
 800efa8:	a201      	add	r2, pc, #4	@ (adr r2, 800efb0 <xTaskGenericNotify+0x68>)
 800efaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efae:	bf00      	nop
 800efb0:	0800f02b 	.word	0x0800f02b
 800efb4:	0800efc5 	.word	0x0800efc5
 800efb8:	0800efd7 	.word	0x0800efd7
 800efbc:	0800efe7 	.word	0x0800efe7
 800efc0:	0800eff1 	.word	0x0800eff1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800efc4:	6a3b      	ldr	r3, [r7, #32]
 800efc6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	431a      	orrs	r2, r3
 800efce:	6a3b      	ldr	r3, [r7, #32]
 800efd0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800efd4:	e02c      	b.n	800f030 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800efd6:	6a3b      	ldr	r3, [r7, #32]
 800efd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800efdc:	1c5a      	adds	r2, r3, #1
 800efde:	6a3b      	ldr	r3, [r7, #32]
 800efe0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800efe4:	e024      	b.n	800f030 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800efe6:	6a3b      	ldr	r3, [r7, #32]
 800efe8:	68ba      	ldr	r2, [r7, #8]
 800efea:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800efee:	e01f      	b.n	800f030 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800eff0:	7ffb      	ldrb	r3, [r7, #31]
 800eff2:	2b02      	cmp	r3, #2
 800eff4:	d004      	beq.n	800f000 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800eff6:	6a3b      	ldr	r3, [r7, #32]
 800eff8:	68ba      	ldr	r2, [r7, #8]
 800effa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800effe:	e017      	b.n	800f030 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800f000:	2300      	movs	r3, #0
 800f002:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800f004:	e014      	b.n	800f030 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f006:	6a3b      	ldr	r3, [r7, #32]
 800f008:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f00c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f010:	d00d      	beq.n	800f02e <xTaskGenericNotify+0xe6>
	__asm volatile
 800f012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f016:	f383 8811 	msr	BASEPRI, r3
 800f01a:	f3bf 8f6f 	isb	sy
 800f01e:	f3bf 8f4f 	dsb	sy
 800f022:	617b      	str	r3, [r7, #20]
}
 800f024:	bf00      	nop
 800f026:	bf00      	nop
 800f028:	e7fd      	b.n	800f026 <xTaskGenericNotify+0xde>
					break;
 800f02a:	bf00      	nop
 800f02c:	e000      	b.n	800f030 <xTaskGenericNotify+0xe8>

					break;
 800f02e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f030:	7ffb      	ldrb	r3, [r7, #31]
 800f032:	2b01      	cmp	r3, #1
 800f034:	d13b      	bne.n	800f0ae <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f036:	6a3b      	ldr	r3, [r7, #32]
 800f038:	3304      	adds	r3, #4
 800f03a:	4618      	mov	r0, r3
 800f03c:	f7fd ffee 	bl	800d01c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f040:	6a3b      	ldr	r3, [r7, #32]
 800f042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f044:	4b1d      	ldr	r3, [pc, #116]	@ (800f0bc <xTaskGenericNotify+0x174>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	429a      	cmp	r2, r3
 800f04a:	d903      	bls.n	800f054 <xTaskGenericNotify+0x10c>
 800f04c:	6a3b      	ldr	r3, [r7, #32]
 800f04e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f050:	4a1a      	ldr	r2, [pc, #104]	@ (800f0bc <xTaskGenericNotify+0x174>)
 800f052:	6013      	str	r3, [r2, #0]
 800f054:	6a3b      	ldr	r3, [r7, #32]
 800f056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f058:	4613      	mov	r3, r2
 800f05a:	009b      	lsls	r3, r3, #2
 800f05c:	4413      	add	r3, r2
 800f05e:	009b      	lsls	r3, r3, #2
 800f060:	4a17      	ldr	r2, [pc, #92]	@ (800f0c0 <xTaskGenericNotify+0x178>)
 800f062:	441a      	add	r2, r3
 800f064:	6a3b      	ldr	r3, [r7, #32]
 800f066:	3304      	adds	r3, #4
 800f068:	4619      	mov	r1, r3
 800f06a:	4610      	mov	r0, r2
 800f06c:	f7fd ff79 	bl	800cf62 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f070:	6a3b      	ldr	r3, [r7, #32]
 800f072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f074:	2b00      	cmp	r3, #0
 800f076:	d00b      	beq.n	800f090 <xTaskGenericNotify+0x148>
	__asm volatile
 800f078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f07c:	f383 8811 	msr	BASEPRI, r3
 800f080:	f3bf 8f6f 	isb	sy
 800f084:	f3bf 8f4f 	dsb	sy
 800f088:	613b      	str	r3, [r7, #16]
}
 800f08a:	bf00      	nop
 800f08c:	bf00      	nop
 800f08e:	e7fd      	b.n	800f08c <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f090:	6a3b      	ldr	r3, [r7, #32]
 800f092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f094:	4b0b      	ldr	r3, [pc, #44]	@ (800f0c4 <xTaskGenericNotify+0x17c>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f09a:	429a      	cmp	r2, r3
 800f09c:	d907      	bls.n	800f0ae <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800f09e:	4b0a      	ldr	r3, [pc, #40]	@ (800f0c8 <xTaskGenericNotify+0x180>)
 800f0a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f0a4:	601a      	str	r2, [r3, #0]
 800f0a6:	f3bf 8f4f 	dsb	sy
 800f0aa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f0ae:	f000 fe05 	bl	800fcbc <vPortExitCritical>

		return xReturn;
 800f0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3728      	adds	r7, #40	@ 0x28
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}
 800f0bc:	24002524 	.word	0x24002524
 800f0c0:	2400204c 	.word	0x2400204c
 800f0c4:	24002048 	.word	0x24002048
 800f0c8:	e000ed04 	.word	0xe000ed04

0800f0cc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b08e      	sub	sp, #56	@ 0x38
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	60f8      	str	r0, [r7, #12]
 800f0d4:	60b9      	str	r1, [r7, #8]
 800f0d6:	603b      	str	r3, [r7, #0]
 800f0d8:	4613      	mov	r3, r2
 800f0da:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800f0dc:	2301      	movs	r3, #1
 800f0de:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d10b      	bne.n	800f0fe <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800f0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0ea:	f383 8811 	msr	BASEPRI, r3
 800f0ee:	f3bf 8f6f 	isb	sy
 800f0f2:	f3bf 8f4f 	dsb	sy
 800f0f6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f0f8:	bf00      	nop
 800f0fa:	bf00      	nop
 800f0fc:	e7fd      	b.n	800f0fa <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f0fe:	f000 fe8b 	bl	800fe18 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800f106:	f3ef 8211 	mrs	r2, BASEPRI
 800f10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f10e:	f383 8811 	msr	BASEPRI, r3
 800f112:	f3bf 8f6f 	isb	sy
 800f116:	f3bf 8f4f 	dsb	sy
 800f11a:	623a      	str	r2, [r7, #32]
 800f11c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800f11e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f120:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d004      	beq.n	800f132 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f12a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f134:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f138:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f13e:	2202      	movs	r2, #2
 800f140:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800f144:	79fb      	ldrb	r3, [r7, #7]
 800f146:	2b04      	cmp	r3, #4
 800f148:	d82e      	bhi.n	800f1a8 <xTaskGenericNotifyFromISR+0xdc>
 800f14a:	a201      	add	r2, pc, #4	@ (adr r2, 800f150 <xTaskGenericNotifyFromISR+0x84>)
 800f14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f150:	0800f1cd 	.word	0x0800f1cd
 800f154:	0800f165 	.word	0x0800f165
 800f158:	0800f177 	.word	0x0800f177
 800f15c:	0800f187 	.word	0x0800f187
 800f160:	0800f191 	.word	0x0800f191
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f166:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	431a      	orrs	r2, r3
 800f16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f170:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f174:	e02d      	b.n	800f1d2 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f178:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f17c:	1c5a      	adds	r2, r3, #1
 800f17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f180:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f184:	e025      	b.n	800f1d2 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f188:	68ba      	ldr	r2, [r7, #8]
 800f18a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f18e:	e020      	b.n	800f1d2 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f190:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f194:	2b02      	cmp	r3, #2
 800f196:	d004      	beq.n	800f1a2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f19a:	68ba      	ldr	r2, [r7, #8]
 800f19c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f1a0:	e017      	b.n	800f1d2 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800f1a6:	e014      	b.n	800f1d2 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f1ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f1b2:	d00d      	beq.n	800f1d0 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800f1b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1b8:	f383 8811 	msr	BASEPRI, r3
 800f1bc:	f3bf 8f6f 	isb	sy
 800f1c0:	f3bf 8f4f 	dsb	sy
 800f1c4:	61bb      	str	r3, [r7, #24]
}
 800f1c6:	bf00      	nop
 800f1c8:	bf00      	nop
 800f1ca:	e7fd      	b.n	800f1c8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800f1cc:	bf00      	nop
 800f1ce:	e000      	b.n	800f1d2 <xTaskGenericNotifyFromISR+0x106>
					break;
 800f1d0:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f1d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f1d6:	2b01      	cmp	r3, #1
 800f1d8:	d147      	bne.n	800f26a <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d00b      	beq.n	800f1fa <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800f1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1e6:	f383 8811 	msr	BASEPRI, r3
 800f1ea:	f3bf 8f6f 	isb	sy
 800f1ee:	f3bf 8f4f 	dsb	sy
 800f1f2:	617b      	str	r3, [r7, #20]
}
 800f1f4:	bf00      	nop
 800f1f6:	bf00      	nop
 800f1f8:	e7fd      	b.n	800f1f6 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f1fa:	4b21      	ldr	r3, [pc, #132]	@ (800f280 <xTaskGenericNotifyFromISR+0x1b4>)
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d11d      	bne.n	800f23e <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f204:	3304      	adds	r3, #4
 800f206:	4618      	mov	r0, r3
 800f208:	f7fd ff08 	bl	800d01c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f20c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f20e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f210:	4b1c      	ldr	r3, [pc, #112]	@ (800f284 <xTaskGenericNotifyFromISR+0x1b8>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	429a      	cmp	r2, r3
 800f216:	d903      	bls.n	800f220 <xTaskGenericNotifyFromISR+0x154>
 800f218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f21a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f21c:	4a19      	ldr	r2, [pc, #100]	@ (800f284 <xTaskGenericNotifyFromISR+0x1b8>)
 800f21e:	6013      	str	r3, [r2, #0]
 800f220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f224:	4613      	mov	r3, r2
 800f226:	009b      	lsls	r3, r3, #2
 800f228:	4413      	add	r3, r2
 800f22a:	009b      	lsls	r3, r3, #2
 800f22c:	4a16      	ldr	r2, [pc, #88]	@ (800f288 <xTaskGenericNotifyFromISR+0x1bc>)
 800f22e:	441a      	add	r2, r3
 800f230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f232:	3304      	adds	r3, #4
 800f234:	4619      	mov	r1, r3
 800f236:	4610      	mov	r0, r2
 800f238:	f7fd fe93 	bl	800cf62 <vListInsertEnd>
 800f23c:	e005      	b.n	800f24a <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800f23e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f240:	3318      	adds	r3, #24
 800f242:	4619      	mov	r1, r3
 800f244:	4811      	ldr	r0, [pc, #68]	@ (800f28c <xTaskGenericNotifyFromISR+0x1c0>)
 800f246:	f7fd fe8c 	bl	800cf62 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f24c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f24e:	4b10      	ldr	r3, [pc, #64]	@ (800f290 <xTaskGenericNotifyFromISR+0x1c4>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f254:	429a      	cmp	r2, r3
 800f256:	d908      	bls.n	800f26a <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800f258:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d002      	beq.n	800f264 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800f25e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f260:	2201      	movs	r2, #1
 800f262:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800f264:	4b0b      	ldr	r3, [pc, #44]	@ (800f294 <xTaskGenericNotifyFromISR+0x1c8>)
 800f266:	2201      	movs	r2, #1
 800f268:	601a      	str	r2, [r3, #0]
 800f26a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f26c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f26e:	693b      	ldr	r3, [r7, #16]
 800f270:	f383 8811 	msr	BASEPRI, r3
}
 800f274:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800f276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800f278:	4618      	mov	r0, r3
 800f27a:	3738      	adds	r7, #56	@ 0x38
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}
 800f280:	24002544 	.word	0x24002544
 800f284:	24002524 	.word	0x24002524
 800f288:	2400204c 	.word	0x2400204c
 800f28c:	240024dc 	.word	0x240024dc
 800f290:	24002048 	.word	0x24002048
 800f294:	24002530 	.word	0x24002530

0800f298 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b084      	sub	sp, #16
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f2a2:	4b21      	ldr	r3, [pc, #132]	@ (800f328 <prvAddCurrentTaskToDelayedList+0x90>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f2a8:	4b20      	ldr	r3, [pc, #128]	@ (800f32c <prvAddCurrentTaskToDelayedList+0x94>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	3304      	adds	r3, #4
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f7fd feb4 	bl	800d01c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f2ba:	d10a      	bne.n	800f2d2 <prvAddCurrentTaskToDelayedList+0x3a>
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d007      	beq.n	800f2d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f2c2:	4b1a      	ldr	r3, [pc, #104]	@ (800f32c <prvAddCurrentTaskToDelayedList+0x94>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	3304      	adds	r3, #4
 800f2c8:	4619      	mov	r1, r3
 800f2ca:	4819      	ldr	r0, [pc, #100]	@ (800f330 <prvAddCurrentTaskToDelayedList+0x98>)
 800f2cc:	f7fd fe49 	bl	800cf62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f2d0:	e026      	b.n	800f320 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f2d2:	68fa      	ldr	r2, [r7, #12]
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	4413      	add	r3, r2
 800f2d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f2da:	4b14      	ldr	r3, [pc, #80]	@ (800f32c <prvAddCurrentTaskToDelayedList+0x94>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	68ba      	ldr	r2, [r7, #8]
 800f2e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f2e2:	68ba      	ldr	r2, [r7, #8]
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	429a      	cmp	r2, r3
 800f2e8:	d209      	bcs.n	800f2fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f2ea:	4b12      	ldr	r3, [pc, #72]	@ (800f334 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f2ec:	681a      	ldr	r2, [r3, #0]
 800f2ee:	4b0f      	ldr	r3, [pc, #60]	@ (800f32c <prvAddCurrentTaskToDelayedList+0x94>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	3304      	adds	r3, #4
 800f2f4:	4619      	mov	r1, r3
 800f2f6:	4610      	mov	r0, r2
 800f2f8:	f7fd fe57 	bl	800cfaa <vListInsert>
}
 800f2fc:	e010      	b.n	800f320 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f2fe:	4b0e      	ldr	r3, [pc, #56]	@ (800f338 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f300:	681a      	ldr	r2, [r3, #0]
 800f302:	4b0a      	ldr	r3, [pc, #40]	@ (800f32c <prvAddCurrentTaskToDelayedList+0x94>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	3304      	adds	r3, #4
 800f308:	4619      	mov	r1, r3
 800f30a:	4610      	mov	r0, r2
 800f30c:	f7fd fe4d 	bl	800cfaa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f310:	4b0a      	ldr	r3, [pc, #40]	@ (800f33c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	68ba      	ldr	r2, [r7, #8]
 800f316:	429a      	cmp	r2, r3
 800f318:	d202      	bcs.n	800f320 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f31a:	4a08      	ldr	r2, [pc, #32]	@ (800f33c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	6013      	str	r3, [r2, #0]
}
 800f320:	bf00      	nop
 800f322:	3710      	adds	r7, #16
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}
 800f328:	24002520 	.word	0x24002520
 800f32c:	24002048 	.word	0x24002048
 800f330:	24002508 	.word	0x24002508
 800f334:	240024d8 	.word	0x240024d8
 800f338:	240024d4 	.word	0x240024d4
 800f33c:	2400253c 	.word	0x2400253c

0800f340 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b08a      	sub	sp, #40	@ 0x28
 800f344:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f346:	2300      	movs	r3, #0
 800f348:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f34a:	f000 fb13 	bl	800f974 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f34e:	4b1d      	ldr	r3, [pc, #116]	@ (800f3c4 <xTimerCreateTimerTask+0x84>)
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d021      	beq.n	800f39a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f356:	2300      	movs	r3, #0
 800f358:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f35a:	2300      	movs	r3, #0
 800f35c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f35e:	1d3a      	adds	r2, r7, #4
 800f360:	f107 0108 	add.w	r1, r7, #8
 800f364:	f107 030c 	add.w	r3, r7, #12
 800f368:	4618      	mov	r0, r3
 800f36a:	f7fd fdb3 	bl	800ced4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f36e:	6879      	ldr	r1, [r7, #4]
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	68fa      	ldr	r2, [r7, #12]
 800f374:	9202      	str	r2, [sp, #8]
 800f376:	9301      	str	r3, [sp, #4]
 800f378:	2302      	movs	r3, #2
 800f37a:	9300      	str	r3, [sp, #0]
 800f37c:	2300      	movs	r3, #0
 800f37e:	460a      	mov	r2, r1
 800f380:	4911      	ldr	r1, [pc, #68]	@ (800f3c8 <xTimerCreateTimerTask+0x88>)
 800f382:	4812      	ldr	r0, [pc, #72]	@ (800f3cc <xTimerCreateTimerTask+0x8c>)
 800f384:	f7fe fd8a 	bl	800de9c <xTaskCreateStatic>
 800f388:	4603      	mov	r3, r0
 800f38a:	4a11      	ldr	r2, [pc, #68]	@ (800f3d0 <xTimerCreateTimerTask+0x90>)
 800f38c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f38e:	4b10      	ldr	r3, [pc, #64]	@ (800f3d0 <xTimerCreateTimerTask+0x90>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d001      	beq.n	800f39a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f396:	2301      	movs	r3, #1
 800f398:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d10b      	bne.n	800f3b8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3a4:	f383 8811 	msr	BASEPRI, r3
 800f3a8:	f3bf 8f6f 	isb	sy
 800f3ac:	f3bf 8f4f 	dsb	sy
 800f3b0:	613b      	str	r3, [r7, #16]
}
 800f3b2:	bf00      	nop
 800f3b4:	bf00      	nop
 800f3b6:	e7fd      	b.n	800f3b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f3b8:	697b      	ldr	r3, [r7, #20]
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3718      	adds	r7, #24
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}
 800f3c2:	bf00      	nop
 800f3c4:	24002578 	.word	0x24002578
 800f3c8:	08013e84 	.word	0x08013e84
 800f3cc:	0800f50d 	.word	0x0800f50d
 800f3d0:	2400257c 	.word	0x2400257c

0800f3d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b08a      	sub	sp, #40	@ 0x28
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	60f8      	str	r0, [r7, #12]
 800f3dc:	60b9      	str	r1, [r7, #8]
 800f3de:	607a      	str	r2, [r7, #4]
 800f3e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d10b      	bne.n	800f404 <xTimerGenericCommand+0x30>
	__asm volatile
 800f3ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3f0:	f383 8811 	msr	BASEPRI, r3
 800f3f4:	f3bf 8f6f 	isb	sy
 800f3f8:	f3bf 8f4f 	dsb	sy
 800f3fc:	623b      	str	r3, [r7, #32]
}
 800f3fe:	bf00      	nop
 800f400:	bf00      	nop
 800f402:	e7fd      	b.n	800f400 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f404:	4b19      	ldr	r3, [pc, #100]	@ (800f46c <xTimerGenericCommand+0x98>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d02a      	beq.n	800f462 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f40c:	68bb      	ldr	r3, [r7, #8]
 800f40e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	2b05      	cmp	r3, #5
 800f41c:	dc18      	bgt.n	800f450 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f41e:	f7ff fba5 	bl	800eb6c <xTaskGetSchedulerState>
 800f422:	4603      	mov	r3, r0
 800f424:	2b02      	cmp	r3, #2
 800f426:	d109      	bne.n	800f43c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f428:	4b10      	ldr	r3, [pc, #64]	@ (800f46c <xTimerGenericCommand+0x98>)
 800f42a:	6818      	ldr	r0, [r3, #0]
 800f42c:	f107 0110 	add.w	r1, r7, #16
 800f430:	2300      	movs	r3, #0
 800f432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f434:	f7fe f81a 	bl	800d46c <xQueueGenericSend>
 800f438:	6278      	str	r0, [r7, #36]	@ 0x24
 800f43a:	e012      	b.n	800f462 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f43c:	4b0b      	ldr	r3, [pc, #44]	@ (800f46c <xTimerGenericCommand+0x98>)
 800f43e:	6818      	ldr	r0, [r3, #0]
 800f440:	f107 0110 	add.w	r1, r7, #16
 800f444:	2300      	movs	r3, #0
 800f446:	2200      	movs	r2, #0
 800f448:	f7fe f810 	bl	800d46c <xQueueGenericSend>
 800f44c:	6278      	str	r0, [r7, #36]	@ 0x24
 800f44e:	e008      	b.n	800f462 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f450:	4b06      	ldr	r3, [pc, #24]	@ (800f46c <xTimerGenericCommand+0x98>)
 800f452:	6818      	ldr	r0, [r3, #0]
 800f454:	f107 0110 	add.w	r1, r7, #16
 800f458:	2300      	movs	r3, #0
 800f45a:	683a      	ldr	r2, [r7, #0]
 800f45c:	f7fe f908 	bl	800d670 <xQueueGenericSendFromISR>
 800f460:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f464:	4618      	mov	r0, r3
 800f466:	3728      	adds	r7, #40	@ 0x28
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}
 800f46c:	24002578 	.word	0x24002578

0800f470 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b088      	sub	sp, #32
 800f474:	af02      	add	r7, sp, #8
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f47a:	4b23      	ldr	r3, [pc, #140]	@ (800f508 <prvProcessExpiredTimer+0x98>)
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	68db      	ldr	r3, [r3, #12]
 800f480:	68db      	ldr	r3, [r3, #12]
 800f482:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f484:	697b      	ldr	r3, [r7, #20]
 800f486:	3304      	adds	r3, #4
 800f488:	4618      	mov	r0, r3
 800f48a:	f7fd fdc7 	bl	800d01c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f494:	f003 0304 	and.w	r3, r3, #4
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d023      	beq.n	800f4e4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	699a      	ldr	r2, [r3, #24]
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	18d1      	adds	r1, r2, r3
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	683a      	ldr	r2, [r7, #0]
 800f4a8:	6978      	ldr	r0, [r7, #20]
 800f4aa:	f000 f8d5 	bl	800f658 <prvInsertTimerInActiveList>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d020      	beq.n	800f4f6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	9300      	str	r3, [sp, #0]
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	687a      	ldr	r2, [r7, #4]
 800f4bc:	2100      	movs	r1, #0
 800f4be:	6978      	ldr	r0, [r7, #20]
 800f4c0:	f7ff ff88 	bl	800f3d4 <xTimerGenericCommand>
 800f4c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d114      	bne.n	800f4f6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f4cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4d0:	f383 8811 	msr	BASEPRI, r3
 800f4d4:	f3bf 8f6f 	isb	sy
 800f4d8:	f3bf 8f4f 	dsb	sy
 800f4dc:	60fb      	str	r3, [r7, #12]
}
 800f4de:	bf00      	nop
 800f4e0:	bf00      	nop
 800f4e2:	e7fd      	b.n	800f4e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f4e4:	697b      	ldr	r3, [r7, #20]
 800f4e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f4ea:	f023 0301 	bic.w	r3, r3, #1
 800f4ee:	b2da      	uxtb	r2, r3
 800f4f0:	697b      	ldr	r3, [r7, #20]
 800f4f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f4f6:	697b      	ldr	r3, [r7, #20]
 800f4f8:	6a1b      	ldr	r3, [r3, #32]
 800f4fa:	6978      	ldr	r0, [r7, #20]
 800f4fc:	4798      	blx	r3
}
 800f4fe:	bf00      	nop
 800f500:	3718      	adds	r7, #24
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}
 800f506:	bf00      	nop
 800f508:	24002570 	.word	0x24002570

0800f50c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b084      	sub	sp, #16
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f514:	f107 0308 	add.w	r3, r7, #8
 800f518:	4618      	mov	r0, r3
 800f51a:	f000 f859 	bl	800f5d0 <prvGetNextExpireTime>
 800f51e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	4619      	mov	r1, r3
 800f524:	68f8      	ldr	r0, [r7, #12]
 800f526:	f000 f805 	bl	800f534 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f52a:	f000 f8d7 	bl	800f6dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f52e:	bf00      	nop
 800f530:	e7f0      	b.n	800f514 <prvTimerTask+0x8>
	...

0800f534 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b084      	sub	sp, #16
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
 800f53c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f53e:	f7fe ff11 	bl	800e364 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f542:	f107 0308 	add.w	r3, r7, #8
 800f546:	4618      	mov	r0, r3
 800f548:	f000 f866 	bl	800f618 <prvSampleTimeNow>
 800f54c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d130      	bne.n	800f5b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d10a      	bne.n	800f570 <prvProcessTimerOrBlockTask+0x3c>
 800f55a:	687a      	ldr	r2, [r7, #4]
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	429a      	cmp	r2, r3
 800f560:	d806      	bhi.n	800f570 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f562:	f7fe ff0d 	bl	800e380 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f566:	68f9      	ldr	r1, [r7, #12]
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	f7ff ff81 	bl	800f470 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f56e:	e024      	b.n	800f5ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d008      	beq.n	800f588 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f576:	4b13      	ldr	r3, [pc, #76]	@ (800f5c4 <prvProcessTimerOrBlockTask+0x90>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d101      	bne.n	800f584 <prvProcessTimerOrBlockTask+0x50>
 800f580:	2301      	movs	r3, #1
 800f582:	e000      	b.n	800f586 <prvProcessTimerOrBlockTask+0x52>
 800f584:	2300      	movs	r3, #0
 800f586:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f588:	4b0f      	ldr	r3, [pc, #60]	@ (800f5c8 <prvProcessTimerOrBlockTask+0x94>)
 800f58a:	6818      	ldr	r0, [r3, #0]
 800f58c:	687a      	ldr	r2, [r7, #4]
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	1ad3      	subs	r3, r2, r3
 800f592:	683a      	ldr	r2, [r7, #0]
 800f594:	4619      	mov	r1, r3
 800f596:	f7fe fc4d 	bl	800de34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f59a:	f7fe fef1 	bl	800e380 <xTaskResumeAll>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d10a      	bne.n	800f5ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f5a4:	4b09      	ldr	r3, [pc, #36]	@ (800f5cc <prvProcessTimerOrBlockTask+0x98>)
 800f5a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f5aa:	601a      	str	r2, [r3, #0]
 800f5ac:	f3bf 8f4f 	dsb	sy
 800f5b0:	f3bf 8f6f 	isb	sy
}
 800f5b4:	e001      	b.n	800f5ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f5b6:	f7fe fee3 	bl	800e380 <xTaskResumeAll>
}
 800f5ba:	bf00      	nop
 800f5bc:	3710      	adds	r7, #16
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}
 800f5c2:	bf00      	nop
 800f5c4:	24002574 	.word	0x24002574
 800f5c8:	24002578 	.word	0x24002578
 800f5cc:	e000ed04 	.word	0xe000ed04

0800f5d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f5d0:	b480      	push	{r7}
 800f5d2:	b085      	sub	sp, #20
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f5d8:	4b0e      	ldr	r3, [pc, #56]	@ (800f614 <prvGetNextExpireTime+0x44>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d101      	bne.n	800f5e6 <prvGetNextExpireTime+0x16>
 800f5e2:	2201      	movs	r2, #1
 800f5e4:	e000      	b.n	800f5e8 <prvGetNextExpireTime+0x18>
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d105      	bne.n	800f600 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f5f4:	4b07      	ldr	r3, [pc, #28]	@ (800f614 <prvGetNextExpireTime+0x44>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	68db      	ldr	r3, [r3, #12]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	60fb      	str	r3, [r7, #12]
 800f5fe:	e001      	b.n	800f604 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f600:	2300      	movs	r3, #0
 800f602:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f604:	68fb      	ldr	r3, [r7, #12]
}
 800f606:	4618      	mov	r0, r3
 800f608:	3714      	adds	r7, #20
 800f60a:	46bd      	mov	sp, r7
 800f60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f610:	4770      	bx	lr
 800f612:	bf00      	nop
 800f614:	24002570 	.word	0x24002570

0800f618 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b084      	sub	sp, #16
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f620:	f7fe ff4c 	bl	800e4bc <xTaskGetTickCount>
 800f624:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f626:	4b0b      	ldr	r3, [pc, #44]	@ (800f654 <prvSampleTimeNow+0x3c>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	68fa      	ldr	r2, [r7, #12]
 800f62c:	429a      	cmp	r2, r3
 800f62e:	d205      	bcs.n	800f63c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f630:	f000 f93a 	bl	800f8a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2201      	movs	r2, #1
 800f638:	601a      	str	r2, [r3, #0]
 800f63a:	e002      	b.n	800f642 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2200      	movs	r2, #0
 800f640:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f642:	4a04      	ldr	r2, [pc, #16]	@ (800f654 <prvSampleTimeNow+0x3c>)
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f648:	68fb      	ldr	r3, [r7, #12]
}
 800f64a:	4618      	mov	r0, r3
 800f64c:	3710      	adds	r7, #16
 800f64e:	46bd      	mov	sp, r7
 800f650:	bd80      	pop	{r7, pc}
 800f652:	bf00      	nop
 800f654:	24002580 	.word	0x24002580

0800f658 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b086      	sub	sp, #24
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	60f8      	str	r0, [r7, #12]
 800f660:	60b9      	str	r1, [r7, #8]
 800f662:	607a      	str	r2, [r7, #4]
 800f664:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f666:	2300      	movs	r3, #0
 800f668:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	68ba      	ldr	r2, [r7, #8]
 800f66e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	68fa      	ldr	r2, [r7, #12]
 800f674:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f676:	68ba      	ldr	r2, [r7, #8]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d812      	bhi.n	800f6a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f67e:	687a      	ldr	r2, [r7, #4]
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	1ad2      	subs	r2, r2, r3
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	699b      	ldr	r3, [r3, #24]
 800f688:	429a      	cmp	r2, r3
 800f68a:	d302      	bcc.n	800f692 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f68c:	2301      	movs	r3, #1
 800f68e:	617b      	str	r3, [r7, #20]
 800f690:	e01b      	b.n	800f6ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f692:	4b10      	ldr	r3, [pc, #64]	@ (800f6d4 <prvInsertTimerInActiveList+0x7c>)
 800f694:	681a      	ldr	r2, [r3, #0]
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	3304      	adds	r3, #4
 800f69a:	4619      	mov	r1, r3
 800f69c:	4610      	mov	r0, r2
 800f69e:	f7fd fc84 	bl	800cfaa <vListInsert>
 800f6a2:	e012      	b.n	800f6ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f6a4:	687a      	ldr	r2, [r7, #4]
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d206      	bcs.n	800f6ba <prvInsertTimerInActiveList+0x62>
 800f6ac:	68ba      	ldr	r2, [r7, #8]
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	d302      	bcc.n	800f6ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	617b      	str	r3, [r7, #20]
 800f6b8:	e007      	b.n	800f6ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f6ba:	4b07      	ldr	r3, [pc, #28]	@ (800f6d8 <prvInsertTimerInActiveList+0x80>)
 800f6bc:	681a      	ldr	r2, [r3, #0]
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	3304      	adds	r3, #4
 800f6c2:	4619      	mov	r1, r3
 800f6c4:	4610      	mov	r0, r2
 800f6c6:	f7fd fc70 	bl	800cfaa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f6ca:	697b      	ldr	r3, [r7, #20]
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3718      	adds	r7, #24
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}
 800f6d4:	24002574 	.word	0x24002574
 800f6d8:	24002570 	.word	0x24002570

0800f6dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b08e      	sub	sp, #56	@ 0x38
 800f6e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f6e2:	e0ce      	b.n	800f882 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	da19      	bge.n	800f71e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f6ea:	1d3b      	adds	r3, r7, #4
 800f6ec:	3304      	adds	r3, #4
 800f6ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f6f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d10b      	bne.n	800f70e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6fa:	f383 8811 	msr	BASEPRI, r3
 800f6fe:	f3bf 8f6f 	isb	sy
 800f702:	f3bf 8f4f 	dsb	sy
 800f706:	61fb      	str	r3, [r7, #28]
}
 800f708:	bf00      	nop
 800f70a:	bf00      	nop
 800f70c:	e7fd      	b.n	800f70a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f70e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f714:	6850      	ldr	r0, [r2, #4]
 800f716:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f718:	6892      	ldr	r2, [r2, #8]
 800f71a:	4611      	mov	r1, r2
 800f71c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2b00      	cmp	r3, #0
 800f722:	f2c0 80ae 	blt.w	800f882 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f72a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f72c:	695b      	ldr	r3, [r3, #20]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d004      	beq.n	800f73c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f734:	3304      	adds	r3, #4
 800f736:	4618      	mov	r0, r3
 800f738:	f7fd fc70 	bl	800d01c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f73c:	463b      	mov	r3, r7
 800f73e:	4618      	mov	r0, r3
 800f740:	f7ff ff6a 	bl	800f618 <prvSampleTimeNow>
 800f744:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	2b09      	cmp	r3, #9
 800f74a:	f200 8097 	bhi.w	800f87c <prvProcessReceivedCommands+0x1a0>
 800f74e:	a201      	add	r2, pc, #4	@ (adr r2, 800f754 <prvProcessReceivedCommands+0x78>)
 800f750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f754:	0800f77d 	.word	0x0800f77d
 800f758:	0800f77d 	.word	0x0800f77d
 800f75c:	0800f77d 	.word	0x0800f77d
 800f760:	0800f7f3 	.word	0x0800f7f3
 800f764:	0800f807 	.word	0x0800f807
 800f768:	0800f853 	.word	0x0800f853
 800f76c:	0800f77d 	.word	0x0800f77d
 800f770:	0800f77d 	.word	0x0800f77d
 800f774:	0800f7f3 	.word	0x0800f7f3
 800f778:	0800f807 	.word	0x0800f807
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f77c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f77e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f782:	f043 0301 	orr.w	r3, r3, #1
 800f786:	b2da      	uxtb	r2, r3
 800f788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f78a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f78e:	68ba      	ldr	r2, [r7, #8]
 800f790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f792:	699b      	ldr	r3, [r3, #24]
 800f794:	18d1      	adds	r1, r2, r3
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f79a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f79c:	f7ff ff5c 	bl	800f658 <prvInsertTimerInActiveList>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d06c      	beq.n	800f880 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f7a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7a8:	6a1b      	ldr	r3, [r3, #32]
 800f7aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f7ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f7ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f7b4:	f003 0304 	and.w	r3, r3, #4
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d061      	beq.n	800f880 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f7bc:	68ba      	ldr	r2, [r7, #8]
 800f7be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7c0:	699b      	ldr	r3, [r3, #24]
 800f7c2:	441a      	add	r2, r3
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	9300      	str	r3, [sp, #0]
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	2100      	movs	r1, #0
 800f7cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f7ce:	f7ff fe01 	bl	800f3d4 <xTimerGenericCommand>
 800f7d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f7d4:	6a3b      	ldr	r3, [r7, #32]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d152      	bne.n	800f880 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f7da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7de:	f383 8811 	msr	BASEPRI, r3
 800f7e2:	f3bf 8f6f 	isb	sy
 800f7e6:	f3bf 8f4f 	dsb	sy
 800f7ea:	61bb      	str	r3, [r7, #24]
}
 800f7ec:	bf00      	nop
 800f7ee:	bf00      	nop
 800f7f0:	e7fd      	b.n	800f7ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f7f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f7f8:	f023 0301 	bic.w	r3, r3, #1
 800f7fc:	b2da      	uxtb	r2, r3
 800f7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f800:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f804:	e03d      	b.n	800f882 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f808:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f80c:	f043 0301 	orr.w	r3, r3, #1
 800f810:	b2da      	uxtb	r2, r3
 800f812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f814:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f818:	68ba      	ldr	r2, [r7, #8]
 800f81a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f81c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f81e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f820:	699b      	ldr	r3, [r3, #24]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d10b      	bne.n	800f83e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f82a:	f383 8811 	msr	BASEPRI, r3
 800f82e:	f3bf 8f6f 	isb	sy
 800f832:	f3bf 8f4f 	dsb	sy
 800f836:	617b      	str	r3, [r7, #20]
}
 800f838:	bf00      	nop
 800f83a:	bf00      	nop
 800f83c:	e7fd      	b.n	800f83a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f83e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f840:	699a      	ldr	r2, [r3, #24]
 800f842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f844:	18d1      	adds	r1, r2, r3
 800f846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f84a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f84c:	f7ff ff04 	bl	800f658 <prvInsertTimerInActiveList>
					break;
 800f850:	e017      	b.n	800f882 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f854:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f858:	f003 0302 	and.w	r3, r3, #2
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d103      	bne.n	800f868 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f860:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f862:	f000 fbe9 	bl	8010038 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f866:	e00c      	b.n	800f882 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f86a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f86e:	f023 0301 	bic.w	r3, r3, #1
 800f872:	b2da      	uxtb	r2, r3
 800f874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f876:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f87a:	e002      	b.n	800f882 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f87c:	bf00      	nop
 800f87e:	e000      	b.n	800f882 <prvProcessReceivedCommands+0x1a6>
					break;
 800f880:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f882:	4b08      	ldr	r3, [pc, #32]	@ (800f8a4 <prvProcessReceivedCommands+0x1c8>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	1d39      	adds	r1, r7, #4
 800f888:	2200      	movs	r2, #0
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7fd ff8e 	bl	800d7ac <xQueueReceive>
 800f890:	4603      	mov	r3, r0
 800f892:	2b00      	cmp	r3, #0
 800f894:	f47f af26 	bne.w	800f6e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f898:	bf00      	nop
 800f89a:	bf00      	nop
 800f89c:	3730      	adds	r7, #48	@ 0x30
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	bd80      	pop	{r7, pc}
 800f8a2:	bf00      	nop
 800f8a4:	24002578 	.word	0x24002578

0800f8a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b088      	sub	sp, #32
 800f8ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f8ae:	e049      	b.n	800f944 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f8b0:	4b2e      	ldr	r3, [pc, #184]	@ (800f96c <prvSwitchTimerLists+0xc4>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	68db      	ldr	r3, [r3, #12]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8ba:	4b2c      	ldr	r3, [pc, #176]	@ (800f96c <prvSwitchTimerLists+0xc4>)
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	68db      	ldr	r3, [r3, #12]
 800f8c0:	68db      	ldr	r3, [r3, #12]
 800f8c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	3304      	adds	r3, #4
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f7fd fba7 	bl	800d01c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	6a1b      	ldr	r3, [r3, #32]
 800f8d2:	68f8      	ldr	r0, [r7, #12]
 800f8d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f8dc:	f003 0304 	and.w	r3, r3, #4
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d02f      	beq.n	800f944 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	699b      	ldr	r3, [r3, #24]
 800f8e8:	693a      	ldr	r2, [r7, #16]
 800f8ea:	4413      	add	r3, r2
 800f8ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f8ee:	68ba      	ldr	r2, [r7, #8]
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	429a      	cmp	r2, r3
 800f8f4:	d90e      	bls.n	800f914 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	68ba      	ldr	r2, [r7, #8]
 800f8fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	68fa      	ldr	r2, [r7, #12]
 800f900:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f902:	4b1a      	ldr	r3, [pc, #104]	@ (800f96c <prvSwitchTimerLists+0xc4>)
 800f904:	681a      	ldr	r2, [r3, #0]
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	3304      	adds	r3, #4
 800f90a:	4619      	mov	r1, r3
 800f90c:	4610      	mov	r0, r2
 800f90e:	f7fd fb4c 	bl	800cfaa <vListInsert>
 800f912:	e017      	b.n	800f944 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f914:	2300      	movs	r3, #0
 800f916:	9300      	str	r3, [sp, #0]
 800f918:	2300      	movs	r3, #0
 800f91a:	693a      	ldr	r2, [r7, #16]
 800f91c:	2100      	movs	r1, #0
 800f91e:	68f8      	ldr	r0, [r7, #12]
 800f920:	f7ff fd58 	bl	800f3d4 <xTimerGenericCommand>
 800f924:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d10b      	bne.n	800f944 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f92c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f930:	f383 8811 	msr	BASEPRI, r3
 800f934:	f3bf 8f6f 	isb	sy
 800f938:	f3bf 8f4f 	dsb	sy
 800f93c:	603b      	str	r3, [r7, #0]
}
 800f93e:	bf00      	nop
 800f940:	bf00      	nop
 800f942:	e7fd      	b.n	800f940 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f944:	4b09      	ldr	r3, [pc, #36]	@ (800f96c <prvSwitchTimerLists+0xc4>)
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d1b0      	bne.n	800f8b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f94e:	4b07      	ldr	r3, [pc, #28]	@ (800f96c <prvSwitchTimerLists+0xc4>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f954:	4b06      	ldr	r3, [pc, #24]	@ (800f970 <prvSwitchTimerLists+0xc8>)
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	4a04      	ldr	r2, [pc, #16]	@ (800f96c <prvSwitchTimerLists+0xc4>)
 800f95a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f95c:	4a04      	ldr	r2, [pc, #16]	@ (800f970 <prvSwitchTimerLists+0xc8>)
 800f95e:	697b      	ldr	r3, [r7, #20]
 800f960:	6013      	str	r3, [r2, #0]
}
 800f962:	bf00      	nop
 800f964:	3718      	adds	r7, #24
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
 800f96a:	bf00      	nop
 800f96c:	24002570 	.word	0x24002570
 800f970:	24002574 	.word	0x24002574

0800f974 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b082      	sub	sp, #8
 800f978:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f97a:	f000 f96d 	bl	800fc58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f97e:	4b15      	ldr	r3, [pc, #84]	@ (800f9d4 <prvCheckForValidListAndQueue+0x60>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d120      	bne.n	800f9c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f986:	4814      	ldr	r0, [pc, #80]	@ (800f9d8 <prvCheckForValidListAndQueue+0x64>)
 800f988:	f7fd fabe 	bl	800cf08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f98c:	4813      	ldr	r0, [pc, #76]	@ (800f9dc <prvCheckForValidListAndQueue+0x68>)
 800f98e:	f7fd fabb 	bl	800cf08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f992:	4b13      	ldr	r3, [pc, #76]	@ (800f9e0 <prvCheckForValidListAndQueue+0x6c>)
 800f994:	4a10      	ldr	r2, [pc, #64]	@ (800f9d8 <prvCheckForValidListAndQueue+0x64>)
 800f996:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f998:	4b12      	ldr	r3, [pc, #72]	@ (800f9e4 <prvCheckForValidListAndQueue+0x70>)
 800f99a:	4a10      	ldr	r2, [pc, #64]	@ (800f9dc <prvCheckForValidListAndQueue+0x68>)
 800f99c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f99e:	2300      	movs	r3, #0
 800f9a0:	9300      	str	r3, [sp, #0]
 800f9a2:	4b11      	ldr	r3, [pc, #68]	@ (800f9e8 <prvCheckForValidListAndQueue+0x74>)
 800f9a4:	4a11      	ldr	r2, [pc, #68]	@ (800f9ec <prvCheckForValidListAndQueue+0x78>)
 800f9a6:	2110      	movs	r1, #16
 800f9a8:	200a      	movs	r0, #10
 800f9aa:	f7fd fbcb 	bl	800d144 <xQueueGenericCreateStatic>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	4a08      	ldr	r2, [pc, #32]	@ (800f9d4 <prvCheckForValidListAndQueue+0x60>)
 800f9b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f9b4:	4b07      	ldr	r3, [pc, #28]	@ (800f9d4 <prvCheckForValidListAndQueue+0x60>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d005      	beq.n	800f9c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f9bc:	4b05      	ldr	r3, [pc, #20]	@ (800f9d4 <prvCheckForValidListAndQueue+0x60>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	490b      	ldr	r1, [pc, #44]	@ (800f9f0 <prvCheckForValidListAndQueue+0x7c>)
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f7fe fa0c 	bl	800dde0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f9c8:	f000 f978 	bl	800fcbc <vPortExitCritical>
}
 800f9cc:	bf00      	nop
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}
 800f9d2:	bf00      	nop
 800f9d4:	24002578 	.word	0x24002578
 800f9d8:	24002548 	.word	0x24002548
 800f9dc:	2400255c 	.word	0x2400255c
 800f9e0:	24002570 	.word	0x24002570
 800f9e4:	24002574 	.word	0x24002574
 800f9e8:	24002624 	.word	0x24002624
 800f9ec:	24002584 	.word	0x24002584
 800f9f0:	08013e8c 	.word	0x08013e8c

0800f9f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f9f4:	b480      	push	{r7}
 800f9f6:	b085      	sub	sp, #20
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	60f8      	str	r0, [r7, #12]
 800f9fc:	60b9      	str	r1, [r7, #8]
 800f9fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	3b04      	subs	r3, #4
 800fa04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fa0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	3b04      	subs	r3, #4
 800fa12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	f023 0201 	bic.w	r2, r3, #1
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	3b04      	subs	r3, #4
 800fa22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fa24:	4a0c      	ldr	r2, [pc, #48]	@ (800fa58 <pxPortInitialiseStack+0x64>)
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	3b14      	subs	r3, #20
 800fa2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fa30:	687a      	ldr	r2, [r7, #4]
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	3b04      	subs	r3, #4
 800fa3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	f06f 0202 	mvn.w	r2, #2
 800fa42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	3b20      	subs	r3, #32
 800fa48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fa4a:	68fb      	ldr	r3, [r7, #12]
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3714      	adds	r7, #20
 800fa50:	46bd      	mov	sp, r7
 800fa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa56:	4770      	bx	lr
 800fa58:	0800fa5d 	.word	0x0800fa5d

0800fa5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fa5c:	b480      	push	{r7}
 800fa5e:	b085      	sub	sp, #20
 800fa60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fa62:	2300      	movs	r3, #0
 800fa64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fa66:	4b13      	ldr	r3, [pc, #76]	@ (800fab4 <prvTaskExitError+0x58>)
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fa6e:	d00b      	beq.n	800fa88 <prvTaskExitError+0x2c>
	__asm volatile
 800fa70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa74:	f383 8811 	msr	BASEPRI, r3
 800fa78:	f3bf 8f6f 	isb	sy
 800fa7c:	f3bf 8f4f 	dsb	sy
 800fa80:	60fb      	str	r3, [r7, #12]
}
 800fa82:	bf00      	nop
 800fa84:	bf00      	nop
 800fa86:	e7fd      	b.n	800fa84 <prvTaskExitError+0x28>
	__asm volatile
 800fa88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa8c:	f383 8811 	msr	BASEPRI, r3
 800fa90:	f3bf 8f6f 	isb	sy
 800fa94:	f3bf 8f4f 	dsb	sy
 800fa98:	60bb      	str	r3, [r7, #8]
}
 800fa9a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fa9c:	bf00      	nop
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d0fc      	beq.n	800fa9e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800faa4:	bf00      	nop
 800faa6:	bf00      	nop
 800faa8:	3714      	adds	r7, #20
 800faaa:	46bd      	mov	sp, r7
 800faac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab0:	4770      	bx	lr
 800fab2:	bf00      	nop
 800fab4:	24000010 	.word	0x24000010
	...

0800fac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fac0:	4b07      	ldr	r3, [pc, #28]	@ (800fae0 <pxCurrentTCBConst2>)
 800fac2:	6819      	ldr	r1, [r3, #0]
 800fac4:	6808      	ldr	r0, [r1, #0]
 800fac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faca:	f380 8809 	msr	PSP, r0
 800face:	f3bf 8f6f 	isb	sy
 800fad2:	f04f 0000 	mov.w	r0, #0
 800fad6:	f380 8811 	msr	BASEPRI, r0
 800fada:	4770      	bx	lr
 800fadc:	f3af 8000 	nop.w

0800fae0 <pxCurrentTCBConst2>:
 800fae0:	24002048 	.word	0x24002048
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fae4:	bf00      	nop
 800fae6:	bf00      	nop

0800fae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fae8:	4808      	ldr	r0, [pc, #32]	@ (800fb0c <prvPortStartFirstTask+0x24>)
 800faea:	6800      	ldr	r0, [r0, #0]
 800faec:	6800      	ldr	r0, [r0, #0]
 800faee:	f380 8808 	msr	MSP, r0
 800faf2:	f04f 0000 	mov.w	r0, #0
 800faf6:	f380 8814 	msr	CONTROL, r0
 800fafa:	b662      	cpsie	i
 800fafc:	b661      	cpsie	f
 800fafe:	f3bf 8f4f 	dsb	sy
 800fb02:	f3bf 8f6f 	isb	sy
 800fb06:	df00      	svc	0
 800fb08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fb0a:	bf00      	nop
 800fb0c:	e000ed08 	.word	0xe000ed08

0800fb10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b086      	sub	sp, #24
 800fb14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fb16:	4b47      	ldr	r3, [pc, #284]	@ (800fc34 <xPortStartScheduler+0x124>)
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	4a47      	ldr	r2, [pc, #284]	@ (800fc38 <xPortStartScheduler+0x128>)
 800fb1c:	4293      	cmp	r3, r2
 800fb1e:	d10b      	bne.n	800fb38 <xPortStartScheduler+0x28>
	__asm volatile
 800fb20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb24:	f383 8811 	msr	BASEPRI, r3
 800fb28:	f3bf 8f6f 	isb	sy
 800fb2c:	f3bf 8f4f 	dsb	sy
 800fb30:	613b      	str	r3, [r7, #16]
}
 800fb32:	bf00      	nop
 800fb34:	bf00      	nop
 800fb36:	e7fd      	b.n	800fb34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fb38:	4b3e      	ldr	r3, [pc, #248]	@ (800fc34 <xPortStartScheduler+0x124>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	4a3f      	ldr	r2, [pc, #252]	@ (800fc3c <xPortStartScheduler+0x12c>)
 800fb3e:	4293      	cmp	r3, r2
 800fb40:	d10b      	bne.n	800fb5a <xPortStartScheduler+0x4a>
	__asm volatile
 800fb42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb46:	f383 8811 	msr	BASEPRI, r3
 800fb4a:	f3bf 8f6f 	isb	sy
 800fb4e:	f3bf 8f4f 	dsb	sy
 800fb52:	60fb      	str	r3, [r7, #12]
}
 800fb54:	bf00      	nop
 800fb56:	bf00      	nop
 800fb58:	e7fd      	b.n	800fb56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fb5a:	4b39      	ldr	r3, [pc, #228]	@ (800fc40 <xPortStartScheduler+0x130>)
 800fb5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fb5e:	697b      	ldr	r3, [r7, #20]
 800fb60:	781b      	ldrb	r3, [r3, #0]
 800fb62:	b2db      	uxtb	r3, r3
 800fb64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	22ff      	movs	r2, #255	@ 0xff
 800fb6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	781b      	ldrb	r3, [r3, #0]
 800fb70:	b2db      	uxtb	r3, r3
 800fb72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fb74:	78fb      	ldrb	r3, [r7, #3]
 800fb76:	b2db      	uxtb	r3, r3
 800fb78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fb7c:	b2da      	uxtb	r2, r3
 800fb7e:	4b31      	ldr	r3, [pc, #196]	@ (800fc44 <xPortStartScheduler+0x134>)
 800fb80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fb82:	4b31      	ldr	r3, [pc, #196]	@ (800fc48 <xPortStartScheduler+0x138>)
 800fb84:	2207      	movs	r2, #7
 800fb86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fb88:	e009      	b.n	800fb9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fb8a:	4b2f      	ldr	r3, [pc, #188]	@ (800fc48 <xPortStartScheduler+0x138>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	3b01      	subs	r3, #1
 800fb90:	4a2d      	ldr	r2, [pc, #180]	@ (800fc48 <xPortStartScheduler+0x138>)
 800fb92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fb94:	78fb      	ldrb	r3, [r7, #3]
 800fb96:	b2db      	uxtb	r3, r3
 800fb98:	005b      	lsls	r3, r3, #1
 800fb9a:	b2db      	uxtb	r3, r3
 800fb9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fb9e:	78fb      	ldrb	r3, [r7, #3]
 800fba0:	b2db      	uxtb	r3, r3
 800fba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fba6:	2b80      	cmp	r3, #128	@ 0x80
 800fba8:	d0ef      	beq.n	800fb8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fbaa:	4b27      	ldr	r3, [pc, #156]	@ (800fc48 <xPortStartScheduler+0x138>)
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	f1c3 0307 	rsb	r3, r3, #7
 800fbb2:	2b04      	cmp	r3, #4
 800fbb4:	d00b      	beq.n	800fbce <xPortStartScheduler+0xbe>
	__asm volatile
 800fbb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbba:	f383 8811 	msr	BASEPRI, r3
 800fbbe:	f3bf 8f6f 	isb	sy
 800fbc2:	f3bf 8f4f 	dsb	sy
 800fbc6:	60bb      	str	r3, [r7, #8]
}
 800fbc8:	bf00      	nop
 800fbca:	bf00      	nop
 800fbcc:	e7fd      	b.n	800fbca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fbce:	4b1e      	ldr	r3, [pc, #120]	@ (800fc48 <xPortStartScheduler+0x138>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	021b      	lsls	r3, r3, #8
 800fbd4:	4a1c      	ldr	r2, [pc, #112]	@ (800fc48 <xPortStartScheduler+0x138>)
 800fbd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fbd8:	4b1b      	ldr	r3, [pc, #108]	@ (800fc48 <xPortStartScheduler+0x138>)
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fbe0:	4a19      	ldr	r2, [pc, #100]	@ (800fc48 <xPortStartScheduler+0x138>)
 800fbe2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	b2da      	uxtb	r2, r3
 800fbe8:	697b      	ldr	r3, [r7, #20]
 800fbea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fbec:	4b17      	ldr	r3, [pc, #92]	@ (800fc4c <xPortStartScheduler+0x13c>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	4a16      	ldr	r2, [pc, #88]	@ (800fc4c <xPortStartScheduler+0x13c>)
 800fbf2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fbf6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fbf8:	4b14      	ldr	r3, [pc, #80]	@ (800fc4c <xPortStartScheduler+0x13c>)
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	4a13      	ldr	r2, [pc, #76]	@ (800fc4c <xPortStartScheduler+0x13c>)
 800fbfe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fc02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fc04:	f000 f8da 	bl	800fdbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fc08:	4b11      	ldr	r3, [pc, #68]	@ (800fc50 <xPortStartScheduler+0x140>)
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fc0e:	f000 f8f9 	bl	800fe04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fc12:	4b10      	ldr	r3, [pc, #64]	@ (800fc54 <xPortStartScheduler+0x144>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	4a0f      	ldr	r2, [pc, #60]	@ (800fc54 <xPortStartScheduler+0x144>)
 800fc18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fc1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fc1e:	f7ff ff63 	bl	800fae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fc22:	f7fe fd15 	bl	800e650 <vTaskSwitchContext>
	prvTaskExitError();
 800fc26:	f7ff ff19 	bl	800fa5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fc2a:	2300      	movs	r3, #0
}
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	3718      	adds	r7, #24
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bd80      	pop	{r7, pc}
 800fc34:	e000ed00 	.word	0xe000ed00
 800fc38:	410fc271 	.word	0x410fc271
 800fc3c:	410fc270 	.word	0x410fc270
 800fc40:	e000e400 	.word	0xe000e400
 800fc44:	24002674 	.word	0x24002674
 800fc48:	24002678 	.word	0x24002678
 800fc4c:	e000ed20 	.word	0xe000ed20
 800fc50:	24000010 	.word	0x24000010
 800fc54:	e000ef34 	.word	0xe000ef34

0800fc58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fc58:	b480      	push	{r7}
 800fc5a:	b083      	sub	sp, #12
 800fc5c:	af00      	add	r7, sp, #0
	__asm volatile
 800fc5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc62:	f383 8811 	msr	BASEPRI, r3
 800fc66:	f3bf 8f6f 	isb	sy
 800fc6a:	f3bf 8f4f 	dsb	sy
 800fc6e:	607b      	str	r3, [r7, #4]
}
 800fc70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fc72:	4b10      	ldr	r3, [pc, #64]	@ (800fcb4 <vPortEnterCritical+0x5c>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	3301      	adds	r3, #1
 800fc78:	4a0e      	ldr	r2, [pc, #56]	@ (800fcb4 <vPortEnterCritical+0x5c>)
 800fc7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fc7c:	4b0d      	ldr	r3, [pc, #52]	@ (800fcb4 <vPortEnterCritical+0x5c>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	2b01      	cmp	r3, #1
 800fc82:	d110      	bne.n	800fca6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fc84:	4b0c      	ldr	r3, [pc, #48]	@ (800fcb8 <vPortEnterCritical+0x60>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	b2db      	uxtb	r3, r3
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d00b      	beq.n	800fca6 <vPortEnterCritical+0x4e>
	__asm volatile
 800fc8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc92:	f383 8811 	msr	BASEPRI, r3
 800fc96:	f3bf 8f6f 	isb	sy
 800fc9a:	f3bf 8f4f 	dsb	sy
 800fc9e:	603b      	str	r3, [r7, #0]
}
 800fca0:	bf00      	nop
 800fca2:	bf00      	nop
 800fca4:	e7fd      	b.n	800fca2 <vPortEnterCritical+0x4a>
	}
}
 800fca6:	bf00      	nop
 800fca8:	370c      	adds	r7, #12
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb0:	4770      	bx	lr
 800fcb2:	bf00      	nop
 800fcb4:	24000010 	.word	0x24000010
 800fcb8:	e000ed04 	.word	0xe000ed04

0800fcbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fcbc:	b480      	push	{r7}
 800fcbe:	b083      	sub	sp, #12
 800fcc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fcc2:	4b12      	ldr	r3, [pc, #72]	@ (800fd0c <vPortExitCritical+0x50>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d10b      	bne.n	800fce2 <vPortExitCritical+0x26>
	__asm volatile
 800fcca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcce:	f383 8811 	msr	BASEPRI, r3
 800fcd2:	f3bf 8f6f 	isb	sy
 800fcd6:	f3bf 8f4f 	dsb	sy
 800fcda:	607b      	str	r3, [r7, #4]
}
 800fcdc:	bf00      	nop
 800fcde:	bf00      	nop
 800fce0:	e7fd      	b.n	800fcde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fce2:	4b0a      	ldr	r3, [pc, #40]	@ (800fd0c <vPortExitCritical+0x50>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	3b01      	subs	r3, #1
 800fce8:	4a08      	ldr	r2, [pc, #32]	@ (800fd0c <vPortExitCritical+0x50>)
 800fcea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fcec:	4b07      	ldr	r3, [pc, #28]	@ (800fd0c <vPortExitCritical+0x50>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d105      	bne.n	800fd00 <vPortExitCritical+0x44>
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	f383 8811 	msr	BASEPRI, r3
}
 800fcfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fd00:	bf00      	nop
 800fd02:	370c      	adds	r7, #12
 800fd04:	46bd      	mov	sp, r7
 800fd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0a:	4770      	bx	lr
 800fd0c:	24000010 	.word	0x24000010

0800fd10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fd10:	f3ef 8009 	mrs	r0, PSP
 800fd14:	f3bf 8f6f 	isb	sy
 800fd18:	4b15      	ldr	r3, [pc, #84]	@ (800fd70 <pxCurrentTCBConst>)
 800fd1a:	681a      	ldr	r2, [r3, #0]
 800fd1c:	f01e 0f10 	tst.w	lr, #16
 800fd20:	bf08      	it	eq
 800fd22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fd26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd2a:	6010      	str	r0, [r2, #0]
 800fd2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fd30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fd34:	f380 8811 	msr	BASEPRI, r0
 800fd38:	f3bf 8f4f 	dsb	sy
 800fd3c:	f3bf 8f6f 	isb	sy
 800fd40:	f7fe fc86 	bl	800e650 <vTaskSwitchContext>
 800fd44:	f04f 0000 	mov.w	r0, #0
 800fd48:	f380 8811 	msr	BASEPRI, r0
 800fd4c:	bc09      	pop	{r0, r3}
 800fd4e:	6819      	ldr	r1, [r3, #0]
 800fd50:	6808      	ldr	r0, [r1, #0]
 800fd52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd56:	f01e 0f10 	tst.w	lr, #16
 800fd5a:	bf08      	it	eq
 800fd5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fd60:	f380 8809 	msr	PSP, r0
 800fd64:	f3bf 8f6f 	isb	sy
 800fd68:	4770      	bx	lr
 800fd6a:	bf00      	nop
 800fd6c:	f3af 8000 	nop.w

0800fd70 <pxCurrentTCBConst>:
 800fd70:	24002048 	.word	0x24002048
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fd74:	bf00      	nop
 800fd76:	bf00      	nop

0800fd78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b082      	sub	sp, #8
 800fd7c:	af00      	add	r7, sp, #0
	__asm volatile
 800fd7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd82:	f383 8811 	msr	BASEPRI, r3
 800fd86:	f3bf 8f6f 	isb	sy
 800fd8a:	f3bf 8f4f 	dsb	sy
 800fd8e:	607b      	str	r3, [r7, #4]
}
 800fd90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fd92:	f7fe fba3 	bl	800e4dc <xTaskIncrementTick>
 800fd96:	4603      	mov	r3, r0
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d003      	beq.n	800fda4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fd9c:	4b06      	ldr	r3, [pc, #24]	@ (800fdb8 <xPortSysTickHandler+0x40>)
 800fd9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fda2:	601a      	str	r2, [r3, #0]
 800fda4:	2300      	movs	r3, #0
 800fda6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	f383 8811 	msr	BASEPRI, r3
}
 800fdae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fdb0:	bf00      	nop
 800fdb2:	3708      	adds	r7, #8
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}
 800fdb8:	e000ed04 	.word	0xe000ed04

0800fdbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fdbc:	b480      	push	{r7}
 800fdbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fdc0:	4b0b      	ldr	r3, [pc, #44]	@ (800fdf0 <vPortSetupTimerInterrupt+0x34>)
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fdc6:	4b0b      	ldr	r3, [pc, #44]	@ (800fdf4 <vPortSetupTimerInterrupt+0x38>)
 800fdc8:	2200      	movs	r2, #0
 800fdca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fdcc:	4b0a      	ldr	r3, [pc, #40]	@ (800fdf8 <vPortSetupTimerInterrupt+0x3c>)
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	4a0a      	ldr	r2, [pc, #40]	@ (800fdfc <vPortSetupTimerInterrupt+0x40>)
 800fdd2:	fba2 2303 	umull	r2, r3, r2, r3
 800fdd6:	099b      	lsrs	r3, r3, #6
 800fdd8:	4a09      	ldr	r2, [pc, #36]	@ (800fe00 <vPortSetupTimerInterrupt+0x44>)
 800fdda:	3b01      	subs	r3, #1
 800fddc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fdde:	4b04      	ldr	r3, [pc, #16]	@ (800fdf0 <vPortSetupTimerInterrupt+0x34>)
 800fde0:	2207      	movs	r2, #7
 800fde2:	601a      	str	r2, [r3, #0]
}
 800fde4:	bf00      	nop
 800fde6:	46bd      	mov	sp, r7
 800fde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdec:	4770      	bx	lr
 800fdee:	bf00      	nop
 800fdf0:	e000e010 	.word	0xe000e010
 800fdf4:	e000e018 	.word	0xe000e018
 800fdf8:	24000000 	.word	0x24000000
 800fdfc:	10624dd3 	.word	0x10624dd3
 800fe00:	e000e014 	.word	0xe000e014

0800fe04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fe04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fe14 <vPortEnableVFP+0x10>
 800fe08:	6801      	ldr	r1, [r0, #0]
 800fe0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fe0e:	6001      	str	r1, [r0, #0]
 800fe10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fe12:	bf00      	nop
 800fe14:	e000ed88 	.word	0xe000ed88

0800fe18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fe18:	b480      	push	{r7}
 800fe1a:	b085      	sub	sp, #20
 800fe1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fe1e:	f3ef 8305 	mrs	r3, IPSR
 800fe22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	2b0f      	cmp	r3, #15
 800fe28:	d915      	bls.n	800fe56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fe2a:	4a18      	ldr	r2, [pc, #96]	@ (800fe8c <vPortValidateInterruptPriority+0x74>)
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	4413      	add	r3, r2
 800fe30:	781b      	ldrb	r3, [r3, #0]
 800fe32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fe34:	4b16      	ldr	r3, [pc, #88]	@ (800fe90 <vPortValidateInterruptPriority+0x78>)
 800fe36:	781b      	ldrb	r3, [r3, #0]
 800fe38:	7afa      	ldrb	r2, [r7, #11]
 800fe3a:	429a      	cmp	r2, r3
 800fe3c:	d20b      	bcs.n	800fe56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fe3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe42:	f383 8811 	msr	BASEPRI, r3
 800fe46:	f3bf 8f6f 	isb	sy
 800fe4a:	f3bf 8f4f 	dsb	sy
 800fe4e:	607b      	str	r3, [r7, #4]
}
 800fe50:	bf00      	nop
 800fe52:	bf00      	nop
 800fe54:	e7fd      	b.n	800fe52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fe56:	4b0f      	ldr	r3, [pc, #60]	@ (800fe94 <vPortValidateInterruptPriority+0x7c>)
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fe5e:	4b0e      	ldr	r3, [pc, #56]	@ (800fe98 <vPortValidateInterruptPriority+0x80>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	429a      	cmp	r2, r3
 800fe64:	d90b      	bls.n	800fe7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800fe66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe6a:	f383 8811 	msr	BASEPRI, r3
 800fe6e:	f3bf 8f6f 	isb	sy
 800fe72:	f3bf 8f4f 	dsb	sy
 800fe76:	603b      	str	r3, [r7, #0]
}
 800fe78:	bf00      	nop
 800fe7a:	bf00      	nop
 800fe7c:	e7fd      	b.n	800fe7a <vPortValidateInterruptPriority+0x62>
	}
 800fe7e:	bf00      	nop
 800fe80:	3714      	adds	r7, #20
 800fe82:	46bd      	mov	sp, r7
 800fe84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe88:	4770      	bx	lr
 800fe8a:	bf00      	nop
 800fe8c:	e000e3f0 	.word	0xe000e3f0
 800fe90:	24002674 	.word	0x24002674
 800fe94:	e000ed0c 	.word	0xe000ed0c
 800fe98:	24002678 	.word	0x24002678

0800fe9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b08a      	sub	sp, #40	@ 0x28
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fea4:	2300      	movs	r3, #0
 800fea6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fea8:	f7fe fa5c 	bl	800e364 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800feac:	4b5c      	ldr	r3, [pc, #368]	@ (8010020 <pvPortMalloc+0x184>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d101      	bne.n	800feb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800feb4:	f000 f924 	bl	8010100 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800feb8:	4b5a      	ldr	r3, [pc, #360]	@ (8010024 <pvPortMalloc+0x188>)
 800feba:	681a      	ldr	r2, [r3, #0]
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	4013      	ands	r3, r2
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	f040 8095 	bne.w	800fff0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d01e      	beq.n	800ff0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800fecc:	2208      	movs	r2, #8
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	4413      	add	r3, r2
 800fed2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f003 0307 	and.w	r3, r3, #7
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d015      	beq.n	800ff0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f023 0307 	bic.w	r3, r3, #7
 800fee4:	3308      	adds	r3, #8
 800fee6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f003 0307 	and.w	r3, r3, #7
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d00b      	beq.n	800ff0a <pvPortMalloc+0x6e>
	__asm volatile
 800fef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fef6:	f383 8811 	msr	BASEPRI, r3
 800fefa:	f3bf 8f6f 	isb	sy
 800fefe:	f3bf 8f4f 	dsb	sy
 800ff02:	617b      	str	r3, [r7, #20]
}
 800ff04:	bf00      	nop
 800ff06:	bf00      	nop
 800ff08:	e7fd      	b.n	800ff06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d06f      	beq.n	800fff0 <pvPortMalloc+0x154>
 800ff10:	4b45      	ldr	r3, [pc, #276]	@ (8010028 <pvPortMalloc+0x18c>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	687a      	ldr	r2, [r7, #4]
 800ff16:	429a      	cmp	r2, r3
 800ff18:	d86a      	bhi.n	800fff0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ff1a:	4b44      	ldr	r3, [pc, #272]	@ (801002c <pvPortMalloc+0x190>)
 800ff1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ff1e:	4b43      	ldr	r3, [pc, #268]	@ (801002c <pvPortMalloc+0x190>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ff24:	e004      	b.n	800ff30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ff26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ff2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ff30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff32:	685b      	ldr	r3, [r3, #4]
 800ff34:	687a      	ldr	r2, [r7, #4]
 800ff36:	429a      	cmp	r2, r3
 800ff38:	d903      	bls.n	800ff42 <pvPortMalloc+0xa6>
 800ff3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d1f1      	bne.n	800ff26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ff42:	4b37      	ldr	r3, [pc, #220]	@ (8010020 <pvPortMalloc+0x184>)
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff48:	429a      	cmp	r2, r3
 800ff4a:	d051      	beq.n	800fff0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ff4c:	6a3b      	ldr	r3, [r7, #32]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	2208      	movs	r2, #8
 800ff52:	4413      	add	r3, r2
 800ff54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ff56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff58:	681a      	ldr	r2, [r3, #0]
 800ff5a:	6a3b      	ldr	r3, [r7, #32]
 800ff5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ff5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff60:	685a      	ldr	r2, [r3, #4]
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	1ad2      	subs	r2, r2, r3
 800ff66:	2308      	movs	r3, #8
 800ff68:	005b      	lsls	r3, r3, #1
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d920      	bls.n	800ffb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ff6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	4413      	add	r3, r2
 800ff74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff76:	69bb      	ldr	r3, [r7, #24]
 800ff78:	f003 0307 	and.w	r3, r3, #7
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d00b      	beq.n	800ff98 <pvPortMalloc+0xfc>
	__asm volatile
 800ff80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff84:	f383 8811 	msr	BASEPRI, r3
 800ff88:	f3bf 8f6f 	isb	sy
 800ff8c:	f3bf 8f4f 	dsb	sy
 800ff90:	613b      	str	r3, [r7, #16]
}
 800ff92:	bf00      	nop
 800ff94:	bf00      	nop
 800ff96:	e7fd      	b.n	800ff94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ff98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff9a:	685a      	ldr	r2, [r3, #4]
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	1ad2      	subs	r2, r2, r3
 800ffa0:	69bb      	ldr	r3, [r7, #24]
 800ffa2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ffa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffa6:	687a      	ldr	r2, [r7, #4]
 800ffa8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ffaa:	69b8      	ldr	r0, [r7, #24]
 800ffac:	f000 f90c 	bl	80101c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ffb0:	4b1d      	ldr	r3, [pc, #116]	@ (8010028 <pvPortMalloc+0x18c>)
 800ffb2:	681a      	ldr	r2, [r3, #0]
 800ffb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffb6:	685b      	ldr	r3, [r3, #4]
 800ffb8:	1ad3      	subs	r3, r2, r3
 800ffba:	4a1b      	ldr	r2, [pc, #108]	@ (8010028 <pvPortMalloc+0x18c>)
 800ffbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ffbe:	4b1a      	ldr	r3, [pc, #104]	@ (8010028 <pvPortMalloc+0x18c>)
 800ffc0:	681a      	ldr	r2, [r3, #0]
 800ffc2:	4b1b      	ldr	r3, [pc, #108]	@ (8010030 <pvPortMalloc+0x194>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	429a      	cmp	r2, r3
 800ffc8:	d203      	bcs.n	800ffd2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ffca:	4b17      	ldr	r3, [pc, #92]	@ (8010028 <pvPortMalloc+0x18c>)
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	4a18      	ldr	r2, [pc, #96]	@ (8010030 <pvPortMalloc+0x194>)
 800ffd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ffd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffd4:	685a      	ldr	r2, [r3, #4]
 800ffd6:	4b13      	ldr	r3, [pc, #76]	@ (8010024 <pvPortMalloc+0x188>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	431a      	orrs	r2, r3
 800ffdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ffe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ffe6:	4b13      	ldr	r3, [pc, #76]	@ (8010034 <pvPortMalloc+0x198>)
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	3301      	adds	r3, #1
 800ffec:	4a11      	ldr	r2, [pc, #68]	@ (8010034 <pvPortMalloc+0x198>)
 800ffee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fff0:	f7fe f9c6 	bl	800e380 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fff4:	69fb      	ldr	r3, [r7, #28]
 800fff6:	f003 0307 	and.w	r3, r3, #7
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d00b      	beq.n	8010016 <pvPortMalloc+0x17a>
	__asm volatile
 800fffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010002:	f383 8811 	msr	BASEPRI, r3
 8010006:	f3bf 8f6f 	isb	sy
 801000a:	f3bf 8f4f 	dsb	sy
 801000e:	60fb      	str	r3, [r7, #12]
}
 8010010:	bf00      	nop
 8010012:	bf00      	nop
 8010014:	e7fd      	b.n	8010012 <pvPortMalloc+0x176>
	return pvReturn;
 8010016:	69fb      	ldr	r3, [r7, #28]
}
 8010018:	4618      	mov	r0, r3
 801001a:	3728      	adds	r7, #40	@ 0x28
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}
 8010020:	240333c4 	.word	0x240333c4
 8010024:	240333d8 	.word	0x240333d8
 8010028:	240333c8 	.word	0x240333c8
 801002c:	240333bc 	.word	0x240333bc
 8010030:	240333cc 	.word	0x240333cc
 8010034:	240333d0 	.word	0x240333d0

08010038 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b086      	sub	sp, #24
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d04f      	beq.n	80100ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801004a:	2308      	movs	r3, #8
 801004c:	425b      	negs	r3, r3
 801004e:	697a      	ldr	r2, [r7, #20]
 8010050:	4413      	add	r3, r2
 8010052:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010054:	697b      	ldr	r3, [r7, #20]
 8010056:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010058:	693b      	ldr	r3, [r7, #16]
 801005a:	685a      	ldr	r2, [r3, #4]
 801005c:	4b25      	ldr	r3, [pc, #148]	@ (80100f4 <vPortFree+0xbc>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	4013      	ands	r3, r2
 8010062:	2b00      	cmp	r3, #0
 8010064:	d10b      	bne.n	801007e <vPortFree+0x46>
	__asm volatile
 8010066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801006a:	f383 8811 	msr	BASEPRI, r3
 801006e:	f3bf 8f6f 	isb	sy
 8010072:	f3bf 8f4f 	dsb	sy
 8010076:	60fb      	str	r3, [r7, #12]
}
 8010078:	bf00      	nop
 801007a:	bf00      	nop
 801007c:	e7fd      	b.n	801007a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801007e:	693b      	ldr	r3, [r7, #16]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d00b      	beq.n	801009e <vPortFree+0x66>
	__asm volatile
 8010086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801008a:	f383 8811 	msr	BASEPRI, r3
 801008e:	f3bf 8f6f 	isb	sy
 8010092:	f3bf 8f4f 	dsb	sy
 8010096:	60bb      	str	r3, [r7, #8]
}
 8010098:	bf00      	nop
 801009a:	bf00      	nop
 801009c:	e7fd      	b.n	801009a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801009e:	693b      	ldr	r3, [r7, #16]
 80100a0:	685a      	ldr	r2, [r3, #4]
 80100a2:	4b14      	ldr	r3, [pc, #80]	@ (80100f4 <vPortFree+0xbc>)
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	4013      	ands	r3, r2
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d01e      	beq.n	80100ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80100ac:	693b      	ldr	r3, [r7, #16]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d11a      	bne.n	80100ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	685a      	ldr	r2, [r3, #4]
 80100b8:	4b0e      	ldr	r3, [pc, #56]	@ (80100f4 <vPortFree+0xbc>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	43db      	mvns	r3, r3
 80100be:	401a      	ands	r2, r3
 80100c0:	693b      	ldr	r3, [r7, #16]
 80100c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80100c4:	f7fe f94e 	bl	800e364 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80100c8:	693b      	ldr	r3, [r7, #16]
 80100ca:	685a      	ldr	r2, [r3, #4]
 80100cc:	4b0a      	ldr	r3, [pc, #40]	@ (80100f8 <vPortFree+0xc0>)
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	4413      	add	r3, r2
 80100d2:	4a09      	ldr	r2, [pc, #36]	@ (80100f8 <vPortFree+0xc0>)
 80100d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80100d6:	6938      	ldr	r0, [r7, #16]
 80100d8:	f000 f876 	bl	80101c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80100dc:	4b07      	ldr	r3, [pc, #28]	@ (80100fc <vPortFree+0xc4>)
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	3301      	adds	r3, #1
 80100e2:	4a06      	ldr	r2, [pc, #24]	@ (80100fc <vPortFree+0xc4>)
 80100e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80100e6:	f7fe f94b 	bl	800e380 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80100ea:	bf00      	nop
 80100ec:	3718      	adds	r7, #24
 80100ee:	46bd      	mov	sp, r7
 80100f0:	bd80      	pop	{r7, pc}
 80100f2:	bf00      	nop
 80100f4:	240333d8 	.word	0x240333d8
 80100f8:	240333c8 	.word	0x240333c8
 80100fc:	240333d4 	.word	0x240333d4

08010100 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010100:	b480      	push	{r7}
 8010102:	b085      	sub	sp, #20
 8010104:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010106:	4b29      	ldr	r3, [pc, #164]	@ (80101ac <prvHeapInit+0xac>)
 8010108:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801010a:	4b29      	ldr	r3, [pc, #164]	@ (80101b0 <prvHeapInit+0xb0>)
 801010c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	f003 0307 	and.w	r3, r3, #7
 8010114:	2b00      	cmp	r3, #0
 8010116:	d00c      	beq.n	8010132 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	3307      	adds	r3, #7
 801011c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	f023 0307 	bic.w	r3, r3, #7
 8010124:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010126:	68ba      	ldr	r2, [r7, #8]
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	1ad3      	subs	r3, r2, r3
 801012c:	4a20      	ldr	r2, [pc, #128]	@ (80101b0 <prvHeapInit+0xb0>)
 801012e:	4413      	add	r3, r2
 8010130:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010136:	4a1f      	ldr	r2, [pc, #124]	@ (80101b4 <prvHeapInit+0xb4>)
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801013c:	4b1d      	ldr	r3, [pc, #116]	@ (80101b4 <prvHeapInit+0xb4>)
 801013e:	2200      	movs	r2, #0
 8010140:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	68ba      	ldr	r2, [r7, #8]
 8010146:	4413      	add	r3, r2
 8010148:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801014a:	2208      	movs	r2, #8
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	1a9b      	subs	r3, r3, r2
 8010150:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	f023 0307 	bic.w	r3, r3, #7
 8010158:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	4a16      	ldr	r2, [pc, #88]	@ (80101b8 <prvHeapInit+0xb8>)
 801015e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010160:	4b15      	ldr	r3, [pc, #84]	@ (80101b8 <prvHeapInit+0xb8>)
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	2200      	movs	r2, #0
 8010166:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010168:	4b13      	ldr	r3, [pc, #76]	@ (80101b8 <prvHeapInit+0xb8>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	2200      	movs	r2, #0
 801016e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	68fa      	ldr	r2, [r7, #12]
 8010178:	1ad2      	subs	r2, r2, r3
 801017a:	683b      	ldr	r3, [r7, #0]
 801017c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801017e:	4b0e      	ldr	r3, [pc, #56]	@ (80101b8 <prvHeapInit+0xb8>)
 8010180:	681a      	ldr	r2, [r3, #0]
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	685b      	ldr	r3, [r3, #4]
 801018a:	4a0c      	ldr	r2, [pc, #48]	@ (80101bc <prvHeapInit+0xbc>)
 801018c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	685b      	ldr	r3, [r3, #4]
 8010192:	4a0b      	ldr	r2, [pc, #44]	@ (80101c0 <prvHeapInit+0xc0>)
 8010194:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010196:	4b0b      	ldr	r3, [pc, #44]	@ (80101c4 <prvHeapInit+0xc4>)
 8010198:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801019c:	601a      	str	r2, [r3, #0]
}
 801019e:	bf00      	nop
 80101a0:	3714      	adds	r7, #20
 80101a2:	46bd      	mov	sp, r7
 80101a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a8:	4770      	bx	lr
 80101aa:	bf00      	nop
 80101ac:	00030d40 	.word	0x00030d40
 80101b0:	2400267c 	.word	0x2400267c
 80101b4:	240333bc 	.word	0x240333bc
 80101b8:	240333c4 	.word	0x240333c4
 80101bc:	240333cc 	.word	0x240333cc
 80101c0:	240333c8 	.word	0x240333c8
 80101c4:	240333d8 	.word	0x240333d8

080101c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80101c8:	b480      	push	{r7}
 80101ca:	b085      	sub	sp, #20
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80101d0:	4b28      	ldr	r3, [pc, #160]	@ (8010274 <prvInsertBlockIntoFreeList+0xac>)
 80101d2:	60fb      	str	r3, [r7, #12]
 80101d4:	e002      	b.n	80101dc <prvInsertBlockIntoFreeList+0x14>
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	60fb      	str	r3, [r7, #12]
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	687a      	ldr	r2, [r7, #4]
 80101e2:	429a      	cmp	r2, r3
 80101e4:	d8f7      	bhi.n	80101d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	685b      	ldr	r3, [r3, #4]
 80101ee:	68ba      	ldr	r2, [r7, #8]
 80101f0:	4413      	add	r3, r2
 80101f2:	687a      	ldr	r2, [r7, #4]
 80101f4:	429a      	cmp	r2, r3
 80101f6:	d108      	bne.n	801020a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	685a      	ldr	r2, [r3, #4]
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	685b      	ldr	r3, [r3, #4]
 8010200:	441a      	add	r2, r3
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	685b      	ldr	r3, [r3, #4]
 8010212:	68ba      	ldr	r2, [r7, #8]
 8010214:	441a      	add	r2, r3
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	429a      	cmp	r2, r3
 801021c:	d118      	bne.n	8010250 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	681a      	ldr	r2, [r3, #0]
 8010222:	4b15      	ldr	r3, [pc, #84]	@ (8010278 <prvInsertBlockIntoFreeList+0xb0>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	429a      	cmp	r2, r3
 8010228:	d00d      	beq.n	8010246 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	685a      	ldr	r2, [r3, #4]
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	685b      	ldr	r3, [r3, #4]
 8010234:	441a      	add	r2, r3
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	681a      	ldr	r2, [r3, #0]
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	601a      	str	r2, [r3, #0]
 8010244:	e008      	b.n	8010258 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010246:	4b0c      	ldr	r3, [pc, #48]	@ (8010278 <prvInsertBlockIntoFreeList+0xb0>)
 8010248:	681a      	ldr	r2, [r3, #0]
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	601a      	str	r2, [r3, #0]
 801024e:	e003      	b.n	8010258 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	681a      	ldr	r2, [r3, #0]
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010258:	68fa      	ldr	r2, [r7, #12]
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	429a      	cmp	r2, r3
 801025e:	d002      	beq.n	8010266 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	687a      	ldr	r2, [r7, #4]
 8010264:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010266:	bf00      	nop
 8010268:	3714      	adds	r7, #20
 801026a:	46bd      	mov	sp, r7
 801026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010270:	4770      	bx	lr
 8010272:	bf00      	nop
 8010274:	240333bc 	.word	0x240333bc
 8010278:	240333c4 	.word	0x240333c4

0801027c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 801027c:	4a02      	ldr	r2, [pc, #8]	@ (8010288 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0xc>)
 801027e:	4b03      	ldr	r3, [pc, #12]	@ (801028c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x10>)
 8010280:	6812      	ldr	r2, [r2, #0]
 8010282:	601a      	str	r2, [r3, #0]
 8010284:	4770      	bx	lr
 8010286:	bf00      	nop
 8010288:	24000e0c 	.word	0x24000e0c
 801028c:	2400001c 	.word	0x2400001c

08010290 <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_init_function>:
 8010290:	f002 bb96 	b.w	80129c0 <autoware_control_msgs__msg__Control__init>

08010294 <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_fini_function>:
 8010294:	f002 bbea 	b.w	8012a6c <autoware_control_msgs__msg__Control__fini>

08010298 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 8010298:	b510      	push	{r4, lr}
 801029a:	4c0c      	ldr	r4, [pc, #48]	@ (80102cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x34>)
 801029c:	f001 f892 	bl	80113c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80102a0:	60e0      	str	r0, [r4, #12]
 80102a2:	f001 f88f 	bl	80113c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80102a6:	64a0      	str	r0, [r4, #72]	@ 0x48
 80102a8:	f000 f81a 	bl	80102e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 80102ac:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 80102b0:	f000 f832 	bl	8010318 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 80102b4:	4b06      	ldr	r3, [pc, #24]	@ (80102d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 80102b6:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 80102ba:	681a      	ldr	r2, [r3, #0]
 80102bc:	b10a      	cbz	r2, 80102c2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x2a>
 80102be:	4804      	ldr	r0, [pc, #16]	@ (80102d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 80102c0:	bd10      	pop	{r4, pc}
 80102c2:	4a04      	ldr	r2, [pc, #16]	@ (80102d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x3c>)
 80102c4:	4802      	ldr	r0, [pc, #8]	@ (80102d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 80102c6:	6812      	ldr	r2, [r2, #0]
 80102c8:	601a      	str	r2, [r3, #0]
 80102ca:	bd10      	pop	{r4, pc}
 80102cc:	24000028 	.word	0x24000028
 80102d0:	24000118 	.word	0x24000118
 80102d4:	24000e10 	.word	0x24000e10

080102d8 <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_init_function>:
 80102d8:	f002 bbdc 	b.w	8012a94 <autoware_control_msgs__msg__Lateral__init>

080102dc <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_fini_function>:
 80102dc:	f002 bbfe 	b.w	8012adc <autoware_control_msgs__msg__Lateral__fini>

080102e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 80102e0:	b510      	push	{r4, lr}
 80102e2:	4c08      	ldr	r4, [pc, #32]	@ (8010304 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x24>)
 80102e4:	f001 f86e 	bl	80113c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80102e8:	60e0      	str	r0, [r4, #12]
 80102ea:	f001 f86b 	bl	80113c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80102ee:	4b06      	ldr	r3, [pc, #24]	@ (8010308 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 80102f0:	64a0      	str	r0, [r4, #72]	@ 0x48
 80102f2:	681a      	ldr	r2, [r3, #0]
 80102f4:	b10a      	cbz	r2, 80102fa <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x1a>
 80102f6:	4804      	ldr	r0, [pc, #16]	@ (8010308 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 80102f8:	bd10      	pop	{r4, pc}
 80102fa:	4a04      	ldr	r2, [pc, #16]	@ (801030c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x2c>)
 80102fc:	4802      	ldr	r0, [pc, #8]	@ (8010308 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 80102fe:	6812      	ldr	r2, [r2, #0]
 8010300:	601a      	str	r2, [r3, #0]
 8010302:	bd10      	pop	{r4, pc}
 8010304:	24000124 	.word	0x24000124
 8010308:	24000250 	.word	0x24000250
 801030c:	24000e10 	.word	0x24000e10

08010310 <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_init_function>:
 8010310:	f002 bbf0 	b.w	8012af4 <autoware_control_msgs__msg__Longitudinal__init>

08010314 <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_fini_function>:
 8010314:	f002 bc12 	b.w	8012b3c <autoware_control_msgs__msg__Longitudinal__fini>

08010318 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 8010318:	b510      	push	{r4, lr}
 801031a:	4c08      	ldr	r4, [pc, #32]	@ (801033c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x24>)
 801031c:	f001 f852 	bl	80113c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010320:	60e0      	str	r0, [r4, #12]
 8010322:	f001 f84f 	bl	80113c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010326:	4b06      	ldr	r3, [pc, #24]	@ (8010340 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 8010328:	64a0      	str	r0, [r4, #72]	@ 0x48
 801032a:	681a      	ldr	r2, [r3, #0]
 801032c:	b10a      	cbz	r2, 8010332 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x1a>
 801032e:	4804      	ldr	r0, [pc, #16]	@ (8010340 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 8010330:	bd10      	pop	{r4, pc}
 8010332:	4a04      	ldr	r2, [pc, #16]	@ (8010344 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x2c>)
 8010334:	4802      	ldr	r0, [pc, #8]	@ (8010340 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 8010336:	6812      	ldr	r2, [r2, #0]
 8010338:	601a      	str	r2, [r3, #0]
 801033a:	bd10      	pop	{r4, pc}
 801033c:	2400025c 	.word	0x2400025c
 8010340:	24000400 	.word	0x24000400
 8010344:	24000e10 	.word	0x24000e10

08010348 <get_serialized_size_autoware_control_msgs__msg__Control>:
 8010348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801034a:	4604      	mov	r4, r0
 801034c:	b1c8      	cbz	r0, 8010382 <get_serialized_size_autoware_control_msgs__msg__Control+0x3a>
 801034e:	460f      	mov	r7, r1
 8010350:	f001 f846 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010354:	4606      	mov	r6, r0
 8010356:	f104 0008 	add.w	r0, r4, #8
 801035a:	443e      	add	r6, r7
 801035c:	4631      	mov	r1, r6
 801035e:	f001 f83f 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010362:	4605      	mov	r5, r0
 8010364:	f104 0010 	add.w	r0, r4, #16
 8010368:	4435      	add	r5, r6
 801036a:	4629      	mov	r1, r5
 801036c:	f000 f8a2 	bl	80104b4 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 8010370:	4601      	mov	r1, r0
 8010372:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8010376:	440d      	add	r5, r1
 8010378:	4629      	mov	r1, r5
 801037a:	f000 f9a7 	bl	80106cc <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 801037e:	1bc0      	subs	r0, r0, r7
 8010380:	4428      	add	r0, r5
 8010382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010384 <_Control__cdr_deserialize>:
 8010384:	b570      	push	{r4, r5, r6, lr}
 8010386:	460c      	mov	r4, r1
 8010388:	b329      	cbz	r1, 80103d6 <_Control__cdr_deserialize+0x52>
 801038a:	4605      	mov	r5, r0
 801038c:	f001 f88c 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010390:	4603      	mov	r3, r0
 8010392:	4621      	mov	r1, r4
 8010394:	4628      	mov	r0, r5
 8010396:	685b      	ldr	r3, [r3, #4]
 8010398:	68db      	ldr	r3, [r3, #12]
 801039a:	4798      	blx	r3
 801039c:	f001 f884 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80103a0:	4603      	mov	r3, r0
 80103a2:	f104 0108 	add.w	r1, r4, #8
 80103a6:	4628      	mov	r0, r5
 80103a8:	685b      	ldr	r3, [r3, #4]
 80103aa:	68db      	ldr	r3, [r3, #12]
 80103ac:	4798      	blx	r3
 80103ae:	f000 f95b 	bl	8010668 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 80103b2:	4603      	mov	r3, r0
 80103b4:	f104 0110 	add.w	r1, r4, #16
 80103b8:	4628      	mov	r0, r5
 80103ba:	685b      	ldr	r3, [r3, #4]
 80103bc:	68db      	ldr	r3, [r3, #12]
 80103be:	4798      	blx	r3
 80103c0:	f000 fa28 	bl	8010814 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 80103c4:	4603      	mov	r3, r0
 80103c6:	f104 012c 	add.w	r1, r4, #44	@ 0x2c
 80103ca:	4628      	mov	r0, r5
 80103cc:	685b      	ldr	r3, [r3, #4]
 80103ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80103d2:	68db      	ldr	r3, [r3, #12]
 80103d4:	4718      	bx	r3
 80103d6:	4608      	mov	r0, r1
 80103d8:	bd70      	pop	{r4, r5, r6, pc}
 80103da:	bf00      	nop

080103dc <_Control__cdr_serialize>:
 80103dc:	b338      	cbz	r0, 801042e <_Control__cdr_serialize+0x52>
 80103de:	b570      	push	{r4, r5, r6, lr}
 80103e0:	4604      	mov	r4, r0
 80103e2:	460d      	mov	r5, r1
 80103e4:	f001 f860 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80103e8:	4603      	mov	r3, r0
 80103ea:	4629      	mov	r1, r5
 80103ec:	4620      	mov	r0, r4
 80103ee:	685b      	ldr	r3, [r3, #4]
 80103f0:	689b      	ldr	r3, [r3, #8]
 80103f2:	4798      	blx	r3
 80103f4:	f001 f858 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80103f8:	4603      	mov	r3, r0
 80103fa:	4629      	mov	r1, r5
 80103fc:	f104 0008 	add.w	r0, r4, #8
 8010400:	685b      	ldr	r3, [r3, #4]
 8010402:	689b      	ldr	r3, [r3, #8]
 8010404:	4798      	blx	r3
 8010406:	f000 f92f 	bl	8010668 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 801040a:	4603      	mov	r3, r0
 801040c:	4629      	mov	r1, r5
 801040e:	f104 0010 	add.w	r0, r4, #16
 8010412:	685b      	ldr	r3, [r3, #4]
 8010414:	689b      	ldr	r3, [r3, #8]
 8010416:	4798      	blx	r3
 8010418:	f000 f9fc 	bl	8010814 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 801041c:	4603      	mov	r3, r0
 801041e:	4629      	mov	r1, r5
 8010420:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8010424:	685b      	ldr	r3, [r3, #4]
 8010426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801042a:	689b      	ldr	r3, [r3, #8]
 801042c:	4718      	bx	r3
 801042e:	4770      	bx	lr

08010430 <_Control__get_serialized_size>:
 8010430:	b538      	push	{r3, r4, r5, lr}
 8010432:	4604      	mov	r4, r0
 8010434:	b1b8      	cbz	r0, 8010466 <_Control__get_serialized_size+0x36>
 8010436:	2100      	movs	r1, #0
 8010438:	f000 ffd2 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 801043c:	4605      	mov	r5, r0
 801043e:	f104 0008 	add.w	r0, r4, #8
 8010442:	4629      	mov	r1, r5
 8010444:	f000 ffcc 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010448:	4601      	mov	r1, r0
 801044a:	f104 0010 	add.w	r0, r4, #16
 801044e:	440d      	add	r5, r1
 8010450:	4629      	mov	r1, r5
 8010452:	f000 f82f 	bl	80104b4 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 8010456:	4601      	mov	r1, r0
 8010458:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 801045c:	440d      	add	r5, r1
 801045e:	4629      	mov	r1, r5
 8010460:	f000 f934 	bl	80106cc <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 8010464:	4428      	add	r0, r5
 8010466:	bd38      	pop	{r3, r4, r5, pc}

08010468 <_Control__max_serialized_size>:
 8010468:	b530      	push	{r4, r5, lr}
 801046a:	b083      	sub	sp, #12
 801046c:	2301      	movs	r3, #1
 801046e:	2100      	movs	r1, #0
 8010470:	f10d 0007 	add.w	r0, sp, #7
 8010474:	f88d 3007 	strb.w	r3, [sp, #7]
 8010478:	f001 f802 	bl	8011480 <max_serialized_size_builtin_interfaces__msg__Time>
 801047c:	4604      	mov	r4, r0
 801047e:	f10d 0007 	add.w	r0, sp, #7
 8010482:	4621      	mov	r1, r4
 8010484:	f000 fffc 	bl	8011480 <max_serialized_size_builtin_interfaces__msg__Time>
 8010488:	4605      	mov	r5, r0
 801048a:	f10d 0007 	add.w	r0, sp, #7
 801048e:	4425      	add	r5, r4
 8010490:	4629      	mov	r1, r5
 8010492:	f000 f8c7 	bl	8010624 <max_serialized_size_autoware_control_msgs__msg__Lateral>
 8010496:	4604      	mov	r4, r0
 8010498:	f10d 0007 	add.w	r0, sp, #7
 801049c:	442c      	add	r4, r5
 801049e:	4621      	mov	r1, r4
 80104a0:	f000 f980 	bl	80107a4 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 80104a4:	4420      	add	r0, r4
 80104a6:	b003      	add	sp, #12
 80104a8:	bd30      	pop	{r4, r5, pc}
 80104aa:	bf00      	nop

080104ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 80104ac:	4800      	ldr	r0, [pc, #0]	@ (80104b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x4>)
 80104ae:	4770      	bx	lr
 80104b0:	2400040c 	.word	0x2400040c

080104b4 <get_serialized_size_autoware_control_msgs__msg__Lateral>:
 80104b4:	b5b0      	push	{r4, r5, r7, lr}
 80104b6:	4604      	mov	r4, r0
 80104b8:	b1f0      	cbz	r0, 80104f8 <get_serialized_size_autoware_control_msgs__msg__Lateral+0x44>
 80104ba:	460d      	mov	r5, r1
 80104bc:	f000 ff90 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 80104c0:	4607      	mov	r7, r0
 80104c2:	f104 0008 	add.w	r0, r4, #8
 80104c6:	442f      	add	r7, r5
 80104c8:	f1c5 0501 	rsb	r5, r5, #1
 80104cc:	4639      	mov	r1, r7
 80104ce:	f000 ff87 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 80104d2:	4407      	add	r7, r0
 80104d4:	2104      	movs	r1, #4
 80104d6:	4638      	mov	r0, r7
 80104d8:	f001 fea8 	bl	801222c <ucdr_alignment>
 80104dc:	2104      	movs	r1, #4
 80104de:	1844      	adds	r4, r0, r1
 80104e0:	443c      	add	r4, r7
 80104e2:	4620      	mov	r0, r4
 80104e4:	f001 fea2 	bl	801222c <ucdr_alignment>
 80104e8:	3004      	adds	r0, #4
 80104ea:	2101      	movs	r1, #1
 80104ec:	4404      	add	r4, r0
 80104ee:	4620      	mov	r0, r4
 80104f0:	f001 fe9c 	bl	801222c <ucdr_alignment>
 80104f4:	4428      	add	r0, r5
 80104f6:	4420      	add	r0, r4
 80104f8:	bdb0      	pop	{r4, r5, r7, pc}
 80104fa:	bf00      	nop

080104fc <_Lateral__cdr_deserialize>:
 80104fc:	b538      	push	{r3, r4, r5, lr}
 80104fe:	460c      	mov	r4, r1
 8010500:	b311      	cbz	r1, 8010548 <_Lateral__cdr_deserialize+0x4c>
 8010502:	4605      	mov	r5, r0
 8010504:	f000 ffd0 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010508:	4603      	mov	r3, r0
 801050a:	4621      	mov	r1, r4
 801050c:	4628      	mov	r0, r5
 801050e:	685b      	ldr	r3, [r3, #4]
 8010510:	68db      	ldr	r3, [r3, #12]
 8010512:	4798      	blx	r3
 8010514:	f000 ffc8 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010518:	4603      	mov	r3, r0
 801051a:	f104 0108 	add.w	r1, r4, #8
 801051e:	4628      	mov	r0, r5
 8010520:	685b      	ldr	r3, [r3, #4]
 8010522:	68db      	ldr	r3, [r3, #12]
 8010524:	4798      	blx	r3
 8010526:	f104 0110 	add.w	r1, r4, #16
 801052a:	4628      	mov	r0, r5
 801052c:	f001 fc30 	bl	8011d90 <ucdr_deserialize_float>
 8010530:	f104 0114 	add.w	r1, r4, #20
 8010534:	4628      	mov	r0, r5
 8010536:	f001 fc2b 	bl	8011d90 <ucdr_deserialize_float>
 801053a:	f104 0118 	add.w	r1, r4, #24
 801053e:	4628      	mov	r0, r5
 8010540:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010544:	f000 bfca 	b.w	80114dc <ucdr_deserialize_bool>
 8010548:	4608      	mov	r0, r1
 801054a:	bd38      	pop	{r3, r4, r5, pc}

0801054c <_Lateral__cdr_serialize>:
 801054c:	b318      	cbz	r0, 8010596 <_Lateral__cdr_serialize+0x4a>
 801054e:	b538      	push	{r3, r4, r5, lr}
 8010550:	4604      	mov	r4, r0
 8010552:	460d      	mov	r5, r1
 8010554:	f000 ffa8 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010558:	4603      	mov	r3, r0
 801055a:	4629      	mov	r1, r5
 801055c:	4620      	mov	r0, r4
 801055e:	685b      	ldr	r3, [r3, #4]
 8010560:	689b      	ldr	r3, [r3, #8]
 8010562:	4798      	blx	r3
 8010564:	f000 ffa0 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010568:	4603      	mov	r3, r0
 801056a:	4629      	mov	r1, r5
 801056c:	f104 0008 	add.w	r0, r4, #8
 8010570:	685b      	ldr	r3, [r3, #4]
 8010572:	689b      	ldr	r3, [r3, #8]
 8010574:	4798      	blx	r3
 8010576:	ed94 0a04 	vldr	s0, [r4, #16]
 801057a:	4628      	mov	r0, r5
 801057c:	f001 fb70 	bl	8011c60 <ucdr_serialize_float>
 8010580:	ed94 0a05 	vldr	s0, [r4, #20]
 8010584:	4628      	mov	r0, r5
 8010586:	f001 fb6b 	bl	8011c60 <ucdr_serialize_float>
 801058a:	7e21      	ldrb	r1, [r4, #24]
 801058c:	4628      	mov	r0, r5
 801058e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010592:	f000 bf8d 	b.w	80114b0 <ucdr_serialize_bool>
 8010596:	4770      	bx	lr

08010598 <_Lateral__get_serialized_size>:
 8010598:	b538      	push	{r3, r4, r5, lr}
 801059a:	4604      	mov	r4, r0
 801059c:	b1d8      	cbz	r0, 80105d6 <_Lateral__get_serialized_size+0x3e>
 801059e:	2100      	movs	r1, #0
 80105a0:	f000 ff1e 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 80105a4:	4605      	mov	r5, r0
 80105a6:	f104 0008 	add.w	r0, r4, #8
 80105aa:	4629      	mov	r1, r5
 80105ac:	f000 ff18 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 80105b0:	4405      	add	r5, r0
 80105b2:	2104      	movs	r1, #4
 80105b4:	4628      	mov	r0, r5
 80105b6:	f001 fe39 	bl	801222c <ucdr_alignment>
 80105ba:	2104      	movs	r1, #4
 80105bc:	4408      	add	r0, r1
 80105be:	1944      	adds	r4, r0, r5
 80105c0:	4620      	mov	r0, r4
 80105c2:	f001 fe33 	bl	801222c <ucdr_alignment>
 80105c6:	3004      	adds	r0, #4
 80105c8:	2101      	movs	r1, #1
 80105ca:	4404      	add	r4, r0
 80105cc:	4620      	mov	r0, r4
 80105ce:	f001 fe2d 	bl	801222c <ucdr_alignment>
 80105d2:	3001      	adds	r0, #1
 80105d4:	4420      	add	r0, r4
 80105d6:	bd38      	pop	{r3, r4, r5, pc}

080105d8 <_Lateral__max_serialized_size>:
 80105d8:	b530      	push	{r4, r5, lr}
 80105da:	b083      	sub	sp, #12
 80105dc:	2501      	movs	r5, #1
 80105de:	2100      	movs	r1, #0
 80105e0:	f10d 0007 	add.w	r0, sp, #7
 80105e4:	f88d 5007 	strb.w	r5, [sp, #7]
 80105e8:	f000 ff4a 	bl	8011480 <max_serialized_size_builtin_interfaces__msg__Time>
 80105ec:	4604      	mov	r4, r0
 80105ee:	f10d 0007 	add.w	r0, sp, #7
 80105f2:	4621      	mov	r1, r4
 80105f4:	f000 ff44 	bl	8011480 <max_serialized_size_builtin_interfaces__msg__Time>
 80105f8:	4404      	add	r4, r0
 80105fa:	2104      	movs	r1, #4
 80105fc:	4620      	mov	r0, r4
 80105fe:	f001 fe15 	bl	801222c <ucdr_alignment>
 8010602:	2104      	movs	r1, #4
 8010604:	4408      	add	r0, r1
 8010606:	4404      	add	r4, r0
 8010608:	4620      	mov	r0, r4
 801060a:	f001 fe0f 	bl	801222c <ucdr_alignment>
 801060e:	3004      	adds	r0, #4
 8010610:	4629      	mov	r1, r5
 8010612:	4404      	add	r4, r0
 8010614:	4620      	mov	r0, r4
 8010616:	f001 fe09 	bl	801222c <ucdr_alignment>
 801061a:	4428      	add	r0, r5
 801061c:	4420      	add	r0, r4
 801061e:	b003      	add	sp, #12
 8010620:	bd30      	pop	{r4, r5, pc}
 8010622:	bf00      	nop

08010624 <max_serialized_size_autoware_control_msgs__msg__Lateral>:
 8010624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010626:	2701      	movs	r7, #1
 8010628:	460c      	mov	r4, r1
 801062a:	4606      	mov	r6, r0
 801062c:	7007      	strb	r7, [r0, #0]
 801062e:	f000 ff27 	bl	8011480 <max_serialized_size_builtin_interfaces__msg__Time>
 8010632:	4605      	mov	r5, r0
 8010634:	4630      	mov	r0, r6
 8010636:	4425      	add	r5, r4
 8010638:	1b3c      	subs	r4, r7, r4
 801063a:	4629      	mov	r1, r5
 801063c:	f000 ff20 	bl	8011480 <max_serialized_size_builtin_interfaces__msg__Time>
 8010640:	4405      	add	r5, r0
 8010642:	2104      	movs	r1, #4
 8010644:	4628      	mov	r0, r5
 8010646:	f001 fdf1 	bl	801222c <ucdr_alignment>
 801064a:	2104      	movs	r1, #4
 801064c:	4408      	add	r0, r1
 801064e:	4405      	add	r5, r0
 8010650:	4628      	mov	r0, r5
 8010652:	f001 fdeb 	bl	801222c <ucdr_alignment>
 8010656:	3004      	adds	r0, #4
 8010658:	4639      	mov	r1, r7
 801065a:	4405      	add	r5, r0
 801065c:	4628      	mov	r0, r5
 801065e:	f001 fde5 	bl	801222c <ucdr_alignment>
 8010662:	4420      	add	r0, r4
 8010664:	4428      	add	r0, r5
 8010666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010668 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 8010668:	4800      	ldr	r0, [pc, #0]	@ (801066c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x4>)
 801066a:	4770      	bx	lr
 801066c:	24000434 	.word	0x24000434

08010670 <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>:
 8010670:	b570      	push	{r4, r5, r6, lr}
 8010672:	460c      	mov	r4, r1
 8010674:	4606      	mov	r6, r0
 8010676:	f000 feb3 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 801067a:	4605      	mov	r5, r0
 801067c:	f106 0008 	add.w	r0, r6, #8
 8010680:	4425      	add	r5, r4
 8010682:	f1c4 0401 	rsb	r4, r4, #1
 8010686:	4629      	mov	r1, r5
 8010688:	f000 feaa 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 801068c:	4405      	add	r5, r0
 801068e:	2104      	movs	r1, #4
 8010690:	4628      	mov	r0, r5
 8010692:	f001 fdcb 	bl	801222c <ucdr_alignment>
 8010696:	2104      	movs	r1, #4
 8010698:	4408      	add	r0, r1
 801069a:	4405      	add	r5, r0
 801069c:	4628      	mov	r0, r5
 801069e:	f001 fdc5 	bl	801222c <ucdr_alignment>
 80106a2:	2104      	movs	r1, #4
 80106a4:	4408      	add	r0, r1
 80106a6:	1946      	adds	r6, r0, r5
 80106a8:	4630      	mov	r0, r6
 80106aa:	f001 fdbf 	bl	801222c <ucdr_alignment>
 80106ae:	1d05      	adds	r5, r0, #4
 80106b0:	2101      	movs	r1, #1
 80106b2:	4435      	add	r5, r6
 80106b4:	4628      	mov	r0, r5
 80106b6:	f001 fdb9 	bl	801222c <ucdr_alignment>
 80106ba:	2101      	movs	r1, #1
 80106bc:	4408      	add	r0, r1
 80106be:	4405      	add	r5, r0
 80106c0:	4628      	mov	r0, r5
 80106c2:	f001 fdb3 	bl	801222c <ucdr_alignment>
 80106c6:	4420      	add	r0, r4
 80106c8:	4428      	add	r0, r5
 80106ca:	bd70      	pop	{r4, r5, r6, pc}

080106cc <get_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 80106cc:	b108      	cbz	r0, 80106d2 <get_serialized_size_autoware_control_msgs__msg__Longitudinal+0x6>
 80106ce:	f7ff bfcf 	b.w	8010670 <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 80106d2:	4770      	bx	lr

080106d4 <_Longitudinal__get_serialized_size>:
 80106d4:	b110      	cbz	r0, 80106dc <_Longitudinal__get_serialized_size+0x8>
 80106d6:	2100      	movs	r1, #0
 80106d8:	f7ff bfca 	b.w	8010670 <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 80106dc:	4770      	bx	lr
 80106de:	bf00      	nop

080106e0 <_Longitudinal__cdr_deserialize>:
 80106e0:	b538      	push	{r3, r4, r5, lr}
 80106e2:	460c      	mov	r4, r1
 80106e4:	b361      	cbz	r1, 8010740 <_Longitudinal__cdr_deserialize+0x60>
 80106e6:	4605      	mov	r5, r0
 80106e8:	f000 fede 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80106ec:	4603      	mov	r3, r0
 80106ee:	4621      	mov	r1, r4
 80106f0:	4628      	mov	r0, r5
 80106f2:	685b      	ldr	r3, [r3, #4]
 80106f4:	68db      	ldr	r3, [r3, #12]
 80106f6:	4798      	blx	r3
 80106f8:	f000 fed6 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80106fc:	4603      	mov	r3, r0
 80106fe:	f104 0108 	add.w	r1, r4, #8
 8010702:	4628      	mov	r0, r5
 8010704:	685b      	ldr	r3, [r3, #4]
 8010706:	68db      	ldr	r3, [r3, #12]
 8010708:	4798      	blx	r3
 801070a:	f104 0110 	add.w	r1, r4, #16
 801070e:	4628      	mov	r0, r5
 8010710:	f001 fb3e 	bl	8011d90 <ucdr_deserialize_float>
 8010714:	f104 0114 	add.w	r1, r4, #20
 8010718:	4628      	mov	r0, r5
 801071a:	f001 fb39 	bl	8011d90 <ucdr_deserialize_float>
 801071e:	f104 0118 	add.w	r1, r4, #24
 8010722:	4628      	mov	r0, r5
 8010724:	f001 fb34 	bl	8011d90 <ucdr_deserialize_float>
 8010728:	f104 011c 	add.w	r1, r4, #28
 801072c:	4628      	mov	r0, r5
 801072e:	f000 fed5 	bl	80114dc <ucdr_deserialize_bool>
 8010732:	f104 011d 	add.w	r1, r4, #29
 8010736:	4628      	mov	r0, r5
 8010738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801073c:	f000 bece 	b.w	80114dc <ucdr_deserialize_bool>
 8010740:	4608      	mov	r0, r1
 8010742:	bd38      	pop	{r3, r4, r5, pc}

08010744 <_Longitudinal__cdr_serialize>:
 8010744:	b360      	cbz	r0, 80107a0 <_Longitudinal__cdr_serialize+0x5c>
 8010746:	b538      	push	{r3, r4, r5, lr}
 8010748:	4604      	mov	r4, r0
 801074a:	460d      	mov	r5, r1
 801074c:	f000 feac 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010750:	4603      	mov	r3, r0
 8010752:	4629      	mov	r1, r5
 8010754:	4620      	mov	r0, r4
 8010756:	685b      	ldr	r3, [r3, #4]
 8010758:	689b      	ldr	r3, [r3, #8]
 801075a:	4798      	blx	r3
 801075c:	f000 fea4 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010760:	4603      	mov	r3, r0
 8010762:	4629      	mov	r1, r5
 8010764:	f104 0008 	add.w	r0, r4, #8
 8010768:	685b      	ldr	r3, [r3, #4]
 801076a:	689b      	ldr	r3, [r3, #8]
 801076c:	4798      	blx	r3
 801076e:	ed94 0a04 	vldr	s0, [r4, #16]
 8010772:	4628      	mov	r0, r5
 8010774:	f001 fa74 	bl	8011c60 <ucdr_serialize_float>
 8010778:	ed94 0a05 	vldr	s0, [r4, #20]
 801077c:	4628      	mov	r0, r5
 801077e:	f001 fa6f 	bl	8011c60 <ucdr_serialize_float>
 8010782:	ed94 0a06 	vldr	s0, [r4, #24]
 8010786:	4628      	mov	r0, r5
 8010788:	f001 fa6a 	bl	8011c60 <ucdr_serialize_float>
 801078c:	7f21      	ldrb	r1, [r4, #28]
 801078e:	4628      	mov	r0, r5
 8010790:	f000 fe8e 	bl	80114b0 <ucdr_serialize_bool>
 8010794:	7f61      	ldrb	r1, [r4, #29]
 8010796:	4628      	mov	r0, r5
 8010798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801079c:	f000 be88 	b.w	80114b0 <ucdr_serialize_bool>
 80107a0:	4770      	bx	lr
 80107a2:	bf00      	nop

080107a4 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 80107a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107a6:	2701      	movs	r7, #1
 80107a8:	460c      	mov	r4, r1
 80107aa:	4606      	mov	r6, r0
 80107ac:	7007      	strb	r7, [r0, #0]
 80107ae:	f000 fe67 	bl	8011480 <max_serialized_size_builtin_interfaces__msg__Time>
 80107b2:	4605      	mov	r5, r0
 80107b4:	4630      	mov	r0, r6
 80107b6:	4425      	add	r5, r4
 80107b8:	1b3c      	subs	r4, r7, r4
 80107ba:	4629      	mov	r1, r5
 80107bc:	f000 fe60 	bl	8011480 <max_serialized_size_builtin_interfaces__msg__Time>
 80107c0:	4405      	add	r5, r0
 80107c2:	2104      	movs	r1, #4
 80107c4:	4628      	mov	r0, r5
 80107c6:	f001 fd31 	bl	801222c <ucdr_alignment>
 80107ca:	2104      	movs	r1, #4
 80107cc:	4408      	add	r0, r1
 80107ce:	4405      	add	r5, r0
 80107d0:	4628      	mov	r0, r5
 80107d2:	f001 fd2b 	bl	801222c <ucdr_alignment>
 80107d6:	2104      	movs	r1, #4
 80107d8:	4408      	add	r0, r1
 80107da:	1946      	adds	r6, r0, r5
 80107dc:	4630      	mov	r0, r6
 80107de:	f001 fd25 	bl	801222c <ucdr_alignment>
 80107e2:	1d05      	adds	r5, r0, #4
 80107e4:	4639      	mov	r1, r7
 80107e6:	4435      	add	r5, r6
 80107e8:	4628      	mov	r0, r5
 80107ea:	f001 fd1f 	bl	801222c <ucdr_alignment>
 80107ee:	4438      	add	r0, r7
 80107f0:	4639      	mov	r1, r7
 80107f2:	4405      	add	r5, r0
 80107f4:	4628      	mov	r0, r5
 80107f6:	f001 fd19 	bl	801222c <ucdr_alignment>
 80107fa:	4420      	add	r0, r4
 80107fc:	4428      	add	r0, r5
 80107fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010800 <_Longitudinal__max_serialized_size>:
 8010800:	b500      	push	{lr}
 8010802:	b083      	sub	sp, #12
 8010804:	2100      	movs	r1, #0
 8010806:	f10d 0007 	add.w	r0, sp, #7
 801080a:	f7ff ffcb 	bl	80107a4 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 801080e:	b003      	add	sp, #12
 8010810:	f85d fb04 	ldr.w	pc, [sp], #4

08010814 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 8010814:	4800      	ldr	r0, [pc, #0]	@ (8010818 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x4>)
 8010816:	4770      	bx	lr
 8010818:	2400045c 	.word	0x2400045c

0801081c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 801081c:	4b04      	ldr	r3, [pc, #16]	@ (8010830 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x14>)
 801081e:	4805      	ldr	r0, [pc, #20]	@ (8010834 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x18>)
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	4905      	ldr	r1, [pc, #20]	@ (8010838 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>)
 8010824:	4a05      	ldr	r2, [pc, #20]	@ (801083c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8010826:	6003      	str	r3, [r0, #0]
 8010828:	600b      	str	r3, [r1, #0]
 801082a:	6013      	str	r3, [r2, #0]
 801082c:	4770      	bx	lr
 801082e:	bf00      	nop
 8010830:	24000e0c 	.word	0x24000e0c
 8010834:	240004a8 	.word	0x240004a8
 8010838:	240004b4 	.word	0x240004b4
 801083c:	2400048c 	.word	0x2400048c

08010840 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 8010840:	4a02      	ldr	r2, [pc, #8]	@ (801084c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0xc>)
 8010842:	4b03      	ldr	r3, [pc, #12]	@ (8010850 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x10>)
 8010844:	6812      	ldr	r2, [r2, #0]
 8010846:	601a      	str	r2, [r3, #0]
 8010848:	4770      	bx	lr
 801084a:	bf00      	nop
 801084c:	24000e0c 	.word	0x24000e0c
 8010850:	240004c8 	.word	0x240004c8

08010854 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 8010854:	4a02      	ldr	r2, [pc, #8]	@ (8010860 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0xc>)
 8010856:	4b03      	ldr	r3, [pc, #12]	@ (8010864 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x10>)
 8010858:	6812      	ldr	r2, [r2, #0]
 801085a:	601a      	str	r2, [r3, #0]
 801085c:	4770      	bx	lr
 801085e:	bf00      	nop
 8010860:	24000e0c 	.word	0x24000e0c
 8010864:	240004dc 	.word	0x240004dc

08010868 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 8010868:	4a02      	ldr	r2, [pc, #8]	@ (8010874 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0xc>)
 801086a:	4b03      	ldr	r3, [pc, #12]	@ (8010878 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x10>)
 801086c:	6812      	ldr	r2, [r2, #0]
 801086e:	601a      	str	r2, [r3, #0]
 8010870:	4770      	bx	lr
 8010872:	bf00      	nop
 8010874:	24000e0c 	.word	0x24000e0c
 8010878:	240004f0 	.word	0x240004f0

0801087c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 801087c:	4a02      	ldr	r2, [pc, #8]	@ (8010888 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0xc>)
 801087e:	4b03      	ldr	r3, [pc, #12]	@ (801088c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x10>)
 8010880:	6812      	ldr	r2, [r2, #0]
 8010882:	601a      	str	r2, [r3, #0]
 8010884:	4770      	bx	lr
 8010886:	bf00      	nop
 8010888:	24000e0c 	.word	0x24000e0c
 801088c:	24000504 	.word	0x24000504

08010890 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 8010890:	4a02      	ldr	r2, [pc, #8]	@ (801089c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0xc>)
 8010892:	4b03      	ldr	r3, [pc, #12]	@ (80108a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x10>)
 8010894:	6812      	ldr	r2, [r2, #0]
 8010896:	601a      	str	r2, [r3, #0]
 8010898:	4770      	bx	lr
 801089a:	bf00      	nop
 801089c:	24000e0c 	.word	0x24000e0c
 80108a0:	24000518 	.word	0x24000518

080108a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 80108a4:	4a02      	ldr	r2, [pc, #8]	@ (80108b0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0xc>)
 80108a6:	4b03      	ldr	r3, [pc, #12]	@ (80108b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x10>)
 80108a8:	6812      	ldr	r2, [r2, #0]
 80108aa:	601a      	str	r2, [r3, #0]
 80108ac:	4770      	bx	lr
 80108ae:	bf00      	nop
 80108b0:	24000e0c 	.word	0x24000e0c
 80108b4:	2400052c 	.word	0x2400052c

080108b8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 80108b8:	4a02      	ldr	r2, [pc, #8]	@ (80108c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0xc>)
 80108ba:	4b03      	ldr	r3, [pc, #12]	@ (80108c8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x10>)
 80108bc:	6812      	ldr	r2, [r2, #0]
 80108be:	601a      	str	r2, [r3, #0]
 80108c0:	4770      	bx	lr
 80108c2:	bf00      	nop
 80108c4:	24000e0c 	.word	0x24000e0c
 80108c8:	24000540 	.word	0x24000540

080108cc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 80108cc:	4a02      	ldr	r2, [pc, #8]	@ (80108d8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0xc>)
 80108ce:	4b03      	ldr	r3, [pc, #12]	@ (80108dc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x10>)
 80108d0:	6812      	ldr	r2, [r2, #0]
 80108d2:	601a      	str	r2, [r3, #0]
 80108d4:	4770      	bx	lr
 80108d6:	bf00      	nop
 80108d8:	24000e0c 	.word	0x24000e0c
 80108dc:	24000554 	.word	0x24000554

080108e0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 80108e0:	4a02      	ldr	r2, [pc, #8]	@ (80108ec <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0xc>)
 80108e2:	4b03      	ldr	r3, [pc, #12]	@ (80108f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x10>)
 80108e4:	6812      	ldr	r2, [r2, #0]
 80108e6:	601a      	str	r2, [r3, #0]
 80108e8:	4770      	bx	lr
 80108ea:	bf00      	nop
 80108ec:	24000e0c 	.word	0x24000e0c
 80108f0:	24000568 	.word	0x24000568

080108f4 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_init_function>:
 80108f4:	f002 b92e 	b.w	8012b54 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init>

080108f8 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_fini_function>:
 80108f8:	f002 b93e 	b.w	8012b78 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini>

080108fc <autoware_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_init_function>:
 80108fc:	f002 b940 	b.w	8012b80 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__init>

08010900 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_fini_function>:
 8010900:	f002 b942 	b.w	8012b88 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__fini>

08010904 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 8010904:	b508      	push	{r3, lr}
 8010906:	f000 fd5d 	bl	80113c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801090a:	4b06      	ldr	r3, [pc, #24]	@ (8010924 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 801090c:	4906      	ldr	r1, [pc, #24]	@ (8010928 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x24>)
 801090e:	681a      	ldr	r2, [r3, #0]
 8010910:	60c8      	str	r0, [r1, #12]
 8010912:	b10a      	cbz	r2, 8010918 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x14>
 8010914:	4803      	ldr	r0, [pc, #12]	@ (8010924 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8010916:	bd08      	pop	{r3, pc}
 8010918:	4a04      	ldr	r2, [pc, #16]	@ (801092c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x28>)
 801091a:	4802      	ldr	r0, [pc, #8]	@ (8010924 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 801091c:	6812      	ldr	r2, [r2, #0]
 801091e:	601a      	str	r2, [r3, #0]
 8010920:	bd08      	pop	{r3, pc}
 8010922:	bf00      	nop
 8010924:	240005ec 	.word	0x240005ec
 8010928:	24000574 	.word	0x24000574
 801092c:	24000e10 	.word	0x24000e10

08010930 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 8010930:	4b04      	ldr	r3, [pc, #16]	@ (8010944 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 8010932:	681a      	ldr	r2, [r3, #0]
 8010934:	b10a      	cbz	r2, 801093a <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0xa>
 8010936:	4803      	ldr	r0, [pc, #12]	@ (8010944 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 8010938:	4770      	bx	lr
 801093a:	4a03      	ldr	r2, [pc, #12]	@ (8010948 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x18>)
 801093c:	4801      	ldr	r0, [pc, #4]	@ (8010944 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 801093e:	6812      	ldr	r2, [r2, #0]
 8010940:	601a      	str	r2, [r3, #0]
 8010942:	4770      	bx	lr
 8010944:	24000634 	.word	0x24000634
 8010948:	24000e10 	.word	0x24000e10

0801094c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 801094c:	4b16      	ldr	r3, [pc, #88]	@ (80109a8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 801094e:	681a      	ldr	r2, [r3, #0]
 8010950:	b510      	push	{r4, lr}
 8010952:	b132      	cbz	r2, 8010962 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x16>
 8010954:	685c      	ldr	r4, [r3, #4]
 8010956:	68a3      	ldr	r3, [r4, #8]
 8010958:	b153      	cbz	r3, 8010970 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x24>
 801095a:	68e3      	ldr	r3, [r4, #12]
 801095c:	b1a3      	cbz	r3, 8010988 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x3c>
 801095e:	4812      	ldr	r0, [pc, #72]	@ (80109a8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8010960:	bd10      	pop	{r4, pc}
 8010962:	4a12      	ldr	r2, [pc, #72]	@ (80109ac <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8010964:	685c      	ldr	r4, [r3, #4]
 8010966:	6812      	ldr	r2, [r2, #0]
 8010968:	601a      	str	r2, [r3, #0]
 801096a:	68a3      	ldr	r3, [r4, #8]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d1f4      	bne.n	801095a <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0xe>
 8010970:	f000 fd28 	bl	80113c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010974:	4b0e      	ldr	r3, [pc, #56]	@ (80109b0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x64>)
 8010976:	490f      	ldr	r1, [pc, #60]	@ (80109b4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x68>)
 8010978:	681a      	ldr	r2, [r3, #0]
 801097a:	60c8      	str	r0, [r1, #12]
 801097c:	b17a      	cbz	r2, 801099e <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x52>
 801097e:	685b      	ldr	r3, [r3, #4]
 8010980:	60a3      	str	r3, [r4, #8]
 8010982:	68e3      	ldr	r3, [r4, #12]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d1ea      	bne.n	801095e <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x12>
 8010988:	4b0b      	ldr	r3, [pc, #44]	@ (80109b8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x6c>)
 801098a:	681a      	ldr	r2, [r3, #0]
 801098c:	b11a      	cbz	r2, 8010996 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x4a>
 801098e:	685b      	ldr	r3, [r3, #4]
 8010990:	4805      	ldr	r0, [pc, #20]	@ (80109a8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8010992:	60e3      	str	r3, [r4, #12]
 8010994:	bd10      	pop	{r4, pc}
 8010996:	4a05      	ldr	r2, [pc, #20]	@ (80109ac <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8010998:	6812      	ldr	r2, [r2, #0]
 801099a:	601a      	str	r2, [r3, #0]
 801099c:	e7f7      	b.n	801098e <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x42>
 801099e:	4a03      	ldr	r2, [pc, #12]	@ (80109ac <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 80109a0:	6812      	ldr	r2, [r2, #0]
 80109a2:	601a      	str	r2, [r3, #0]
 80109a4:	e7eb      	b.n	801097e <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x32>
 80109a6:	bf00      	nop
 80109a8:	24000650 	.word	0x24000650
 80109ac:	24000e10 	.word	0x24000e10
 80109b0:	240005ec 	.word	0x240005ec
 80109b4:	24000574 	.word	0x24000574
 80109b8:	24000634 	.word	0x24000634

080109bc <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_init_function>:
 80109bc:	f002 b8e6 	b.w	8012b8c <autoware_vehicle_msgs__msg__ControlModeReport__init>

080109c0 <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_fini_function>:
 80109c0:	f002 b8f6 	b.w	8012bb0 <autoware_vehicle_msgs__msg__ControlModeReport__fini>

080109c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 80109c4:	b508      	push	{r3, lr}
 80109c6:	f000 fcfd 	bl	80113c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80109ca:	4b06      	ldr	r3, [pc, #24]	@ (80109e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 80109cc:	4906      	ldr	r1, [pc, #24]	@ (80109e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x24>)
 80109ce:	681a      	ldr	r2, [r3, #0]
 80109d0:	60c8      	str	r0, [r1, #12]
 80109d2:	b10a      	cbz	r2, 80109d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>
 80109d4:	4803      	ldr	r0, [pc, #12]	@ (80109e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 80109d6:	bd08      	pop	{r3, pc}
 80109d8:	4a04      	ldr	r2, [pc, #16]	@ (80109ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x28>)
 80109da:	4802      	ldr	r0, [pc, #8]	@ (80109e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 80109dc:	6812      	ldr	r2, [r2, #0]
 80109de:	601a      	str	r2, [r3, #0]
 80109e0:	bd08      	pop	{r3, pc}
 80109e2:	bf00      	nop
 80109e4:	240006d4 	.word	0x240006d4
 80109e8:	2400065c 	.word	0x2400065c
 80109ec:	24000e10 	.word	0x24000e10

080109f0 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_init_function>:
 80109f0:	f002 b8e2 	b.w	8012bb8 <autoware_vehicle_msgs__msg__GearCommand__init>

080109f4 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_fini_function>:
 80109f4:	f002 b8f2 	b.w	8012bdc <autoware_vehicle_msgs__msg__GearCommand__fini>

080109f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 80109f8:	b508      	push	{r3, lr}
 80109fa:	f000 fce3 	bl	80113c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80109fe:	4b06      	ldr	r3, [pc, #24]	@ (8010a18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 8010a00:	4906      	ldr	r1, [pc, #24]	@ (8010a1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x24>)
 8010a02:	681a      	ldr	r2, [r3, #0]
 8010a04:	60c8      	str	r0, [r1, #12]
 8010a06:	b10a      	cbz	r2, 8010a0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>
 8010a08:	4803      	ldr	r0, [pc, #12]	@ (8010a18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 8010a0a:	bd08      	pop	{r3, pc}
 8010a0c:	4a04      	ldr	r2, [pc, #16]	@ (8010a20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x28>)
 8010a0e:	4802      	ldr	r0, [pc, #8]	@ (8010a18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 8010a10:	6812      	ldr	r2, [r2, #0]
 8010a12:	601a      	str	r2, [r3, #0]
 8010a14:	bd08      	pop	{r3, pc}
 8010a16:	bf00      	nop
 8010a18:	24000758 	.word	0x24000758
 8010a1c:	240006e0 	.word	0x240006e0
 8010a20:	24000e10 	.word	0x24000e10

08010a24 <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_init_function>:
 8010a24:	f002 b8de 	b.w	8012be4 <autoware_vehicle_msgs__msg__GearReport__init>

08010a28 <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_fini_function>:
 8010a28:	f002 b8ee 	b.w	8012c08 <autoware_vehicle_msgs__msg__GearReport__fini>

08010a2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 8010a2c:	b508      	push	{r3, lr}
 8010a2e:	f000 fcc9 	bl	80113c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010a32:	4b06      	ldr	r3, [pc, #24]	@ (8010a4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 8010a34:	4906      	ldr	r1, [pc, #24]	@ (8010a50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x24>)
 8010a36:	681a      	ldr	r2, [r3, #0]
 8010a38:	60c8      	str	r0, [r1, #12]
 8010a3a:	b10a      	cbz	r2, 8010a40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>
 8010a3c:	4803      	ldr	r0, [pc, #12]	@ (8010a4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 8010a3e:	bd08      	pop	{r3, pc}
 8010a40:	4a04      	ldr	r2, [pc, #16]	@ (8010a54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x28>)
 8010a42:	4802      	ldr	r0, [pc, #8]	@ (8010a4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 8010a44:	6812      	ldr	r2, [r2, #0]
 8010a46:	601a      	str	r2, [r3, #0]
 8010a48:	bd08      	pop	{r3, pc}
 8010a4a:	bf00      	nop
 8010a4c:	240007dc 	.word	0x240007dc
 8010a50:	24000764 	.word	0x24000764
 8010a54:	24000e10 	.word	0x24000e10

08010a58 <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_init_function>:
 8010a58:	f002 b8da 	b.w	8012c10 <autoware_vehicle_msgs__msg__HazardLightsCommand__init>

08010a5c <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_fini_function>:
 8010a5c:	f002 b8ea 	b.w	8012c34 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>

08010a60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8010a60:	b508      	push	{r3, lr}
 8010a62:	f000 fcaf 	bl	80113c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010a66:	4b06      	ldr	r3, [pc, #24]	@ (8010a80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8010a68:	4906      	ldr	r1, [pc, #24]	@ (8010a84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x24>)
 8010a6a:	681a      	ldr	r2, [r3, #0]
 8010a6c:	60c8      	str	r0, [r1, #12]
 8010a6e:	b10a      	cbz	r2, 8010a74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>
 8010a70:	4803      	ldr	r0, [pc, #12]	@ (8010a80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8010a72:	bd08      	pop	{r3, pc}
 8010a74:	4a04      	ldr	r2, [pc, #16]	@ (8010a88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x28>)
 8010a76:	4802      	ldr	r0, [pc, #8]	@ (8010a80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8010a78:	6812      	ldr	r2, [r2, #0]
 8010a7a:	601a      	str	r2, [r3, #0]
 8010a7c:	bd08      	pop	{r3, pc}
 8010a7e:	bf00      	nop
 8010a80:	24000860 	.word	0x24000860
 8010a84:	240007e8 	.word	0x240007e8
 8010a88:	24000e10 	.word	0x24000e10

08010a8c <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_init_function>:
 8010a8c:	f002 b8d6 	b.w	8012c3c <autoware_vehicle_msgs__msg__HazardLightsReport__init>

08010a90 <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_fini_function>:
 8010a90:	f002 b8e6 	b.w	8012c60 <autoware_vehicle_msgs__msg__HazardLightsReport__fini>

08010a94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 8010a94:	b508      	push	{r3, lr}
 8010a96:	f000 fc95 	bl	80113c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010a9a:	4b06      	ldr	r3, [pc, #24]	@ (8010ab4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8010a9c:	4906      	ldr	r1, [pc, #24]	@ (8010ab8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x24>)
 8010a9e:	681a      	ldr	r2, [r3, #0]
 8010aa0:	60c8      	str	r0, [r1, #12]
 8010aa2:	b10a      	cbz	r2, 8010aa8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>
 8010aa4:	4803      	ldr	r0, [pc, #12]	@ (8010ab4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8010aa6:	bd08      	pop	{r3, pc}
 8010aa8:	4a04      	ldr	r2, [pc, #16]	@ (8010abc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x28>)
 8010aaa:	4802      	ldr	r0, [pc, #8]	@ (8010ab4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8010aac:	6812      	ldr	r2, [r2, #0]
 8010aae:	601a      	str	r2, [r3, #0]
 8010ab0:	bd08      	pop	{r3, pc}
 8010ab2:	bf00      	nop
 8010ab4:	240008e4 	.word	0x240008e4
 8010ab8:	2400086c 	.word	0x2400086c
 8010abc:	24000e10 	.word	0x24000e10

08010ac0 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_init_function>:
 8010ac0:	f002 b8d2 	b.w	8012c68 <autoware_vehicle_msgs__msg__SteeringReport__init>

08010ac4 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_fini_function>:
 8010ac4:	f002 b8e2 	b.w	8012c8c <autoware_vehicle_msgs__msg__SteeringReport__fini>

08010ac8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 8010ac8:	b508      	push	{r3, lr}
 8010aca:	f000 fc7b 	bl	80113c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010ace:	4b06      	ldr	r3, [pc, #24]	@ (8010ae8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 8010ad0:	4906      	ldr	r1, [pc, #24]	@ (8010aec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x24>)
 8010ad2:	681a      	ldr	r2, [r3, #0]
 8010ad4:	60c8      	str	r0, [r1, #12]
 8010ad6:	b10a      	cbz	r2, 8010adc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>
 8010ad8:	4803      	ldr	r0, [pc, #12]	@ (8010ae8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 8010ada:	bd08      	pop	{r3, pc}
 8010adc:	4a04      	ldr	r2, [pc, #16]	@ (8010af0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x28>)
 8010ade:	4802      	ldr	r0, [pc, #8]	@ (8010ae8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 8010ae0:	6812      	ldr	r2, [r2, #0]
 8010ae2:	601a      	str	r2, [r3, #0]
 8010ae4:	bd08      	pop	{r3, pc}
 8010ae6:	bf00      	nop
 8010ae8:	24000968 	.word	0x24000968
 8010aec:	240008f0 	.word	0x240008f0
 8010af0:	24000e10 	.word	0x24000e10

08010af4 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_init_function>:
 8010af4:	f002 b8ce 	b.w	8012c94 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>

08010af8 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_fini_function>:
 8010af8:	f002 b8de 	b.w	8012cb8 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>

08010afc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8010afc:	b508      	push	{r3, lr}
 8010afe:	f000 fc61 	bl	80113c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010b02:	4b06      	ldr	r3, [pc, #24]	@ (8010b1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8010b04:	4906      	ldr	r1, [pc, #24]	@ (8010b20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x24>)
 8010b06:	681a      	ldr	r2, [r3, #0]
 8010b08:	60c8      	str	r0, [r1, #12]
 8010b0a:	b10a      	cbz	r2, 8010b10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>
 8010b0c:	4803      	ldr	r0, [pc, #12]	@ (8010b1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8010b0e:	bd08      	pop	{r3, pc}
 8010b10:	4a04      	ldr	r2, [pc, #16]	@ (8010b24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x28>)
 8010b12:	4802      	ldr	r0, [pc, #8]	@ (8010b1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8010b14:	6812      	ldr	r2, [r2, #0]
 8010b16:	601a      	str	r2, [r3, #0]
 8010b18:	bd08      	pop	{r3, pc}
 8010b1a:	bf00      	nop
 8010b1c:	240009ec 	.word	0x240009ec
 8010b20:	24000974 	.word	0x24000974
 8010b24:	24000e10 	.word	0x24000e10

08010b28 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_init_function>:
 8010b28:	f002 b8ca 	b.w	8012cc0 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>

08010b2c <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_fini_function>:
 8010b2c:	f002 b8da 	b.w	8012ce4 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>

08010b30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8010b30:	b508      	push	{r3, lr}
 8010b32:	f000 fc47 	bl	80113c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010b36:	4b06      	ldr	r3, [pc, #24]	@ (8010b50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 8010b38:	4906      	ldr	r1, [pc, #24]	@ (8010b54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x24>)
 8010b3a:	681a      	ldr	r2, [r3, #0]
 8010b3c:	60c8      	str	r0, [r1, #12]
 8010b3e:	b10a      	cbz	r2, 8010b44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>
 8010b40:	4803      	ldr	r0, [pc, #12]	@ (8010b50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 8010b42:	bd08      	pop	{r3, pc}
 8010b44:	4a04      	ldr	r2, [pc, #16]	@ (8010b58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x28>)
 8010b46:	4802      	ldr	r0, [pc, #8]	@ (8010b50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 8010b48:	6812      	ldr	r2, [r2, #0]
 8010b4a:	601a      	str	r2, [r3, #0]
 8010b4c:	bd08      	pop	{r3, pc}
 8010b4e:	bf00      	nop
 8010b50:	24000a70 	.word	0x24000a70
 8010b54:	240009f8 	.word	0x240009f8
 8010b58:	24000e10 	.word	0x24000e10

08010b5c <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_init_function>:
 8010b5c:	f002 b8c6 	b.w	8012cec <autoware_vehicle_msgs__msg__VelocityReport__init>

08010b60 <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_fini_function>:
 8010b60:	f002 b8d6 	b.w	8012d10 <autoware_vehicle_msgs__msg__VelocityReport__fini>

08010b64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 8010b64:	b508      	push	{r3, lr}
 8010b66:	f001 fc57 	bl	8012418 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010b6a:	4b06      	ldr	r3, [pc, #24]	@ (8010b84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 8010b6c:	4906      	ldr	r1, [pc, #24]	@ (8010b88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x24>)
 8010b6e:	681a      	ldr	r2, [r3, #0]
 8010b70:	60c8      	str	r0, [r1, #12]
 8010b72:	b10a      	cbz	r2, 8010b78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>
 8010b74:	4803      	ldr	r0, [pc, #12]	@ (8010b84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 8010b76:	bd08      	pop	{r3, pc}
 8010b78:	4a04      	ldr	r2, [pc, #16]	@ (8010b8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x28>)
 8010b7a:	4802      	ldr	r0, [pc, #8]	@ (8010b84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 8010b7c:	6812      	ldr	r2, [r2, #0]
 8010b7e:	601a      	str	r2, [r3, #0]
 8010b80:	bd08      	pop	{r3, pc}
 8010b82:	bf00      	nop
 8010b84:	24000b6c 	.word	0x24000b6c
 8010b88:	24000a7c 	.word	0x24000a7c
 8010b8c:	24000e10 	.word	0x24000e10

08010b90 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 8010b90:	4800      	ldr	r0, [pc, #0]	@ (8010b94 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x4>)
 8010b92:	4770      	bx	lr
 8010b94:	24000b94 	.word	0x24000b94

08010b98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 8010b98:	4800      	ldr	r0, [pc, #0]	@ (8010b9c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x4>)
 8010b9a:	4770      	bx	lr
 8010b9c:	24000ba0 	.word	0x24000ba0

08010ba0 <_ControlModeCommand_Response__max_serialized_size>:
 8010ba0:	2101      	movs	r1, #1
 8010ba2:	2000      	movs	r0, #0
 8010ba4:	b508      	push	{r3, lr}
 8010ba6:	f001 fb41 	bl	801222c <ucdr_alignment>
 8010baa:	3001      	adds	r0, #1
 8010bac:	bd08      	pop	{r3, pc}
 8010bae:	bf00      	nop

08010bb0 <_ControlModeCommand_Response__cdr_deserialize>:
 8010bb0:	b109      	cbz	r1, 8010bb6 <_ControlModeCommand_Response__cdr_deserialize+0x6>
 8010bb2:	f000 bc93 	b.w	80114dc <ucdr_deserialize_bool>
 8010bb6:	4608      	mov	r0, r1
 8010bb8:	4770      	bx	lr
 8010bba:	bf00      	nop

08010bbc <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 8010bbc:	b538      	push	{r3, r4, r5, lr}
 8010bbe:	b158      	cbz	r0, 8010bd8 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>
 8010bc0:	460d      	mov	r5, r1
 8010bc2:	f000 fc0d 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010bc6:	2101      	movs	r1, #1
 8010bc8:	182c      	adds	r4, r5, r0
 8010bca:	f1c5 0501 	rsb	r5, r5, #1
 8010bce:	4620      	mov	r0, r4
 8010bd0:	f001 fb2c 	bl	801222c <ucdr_alignment>
 8010bd4:	4428      	add	r0, r5
 8010bd6:	4420      	add	r0, r4
 8010bd8:	bd38      	pop	{r3, r4, r5, pc}
 8010bda:	bf00      	nop

08010bdc <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 8010bdc:	b138      	cbz	r0, 8010bee <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x12>
 8010bde:	b508      	push	{r3, lr}
 8010be0:	460b      	mov	r3, r1
 8010be2:	2101      	movs	r1, #1
 8010be4:	4618      	mov	r0, r3
 8010be6:	f001 fb21 	bl	801222c <ucdr_alignment>
 8010bea:	3001      	adds	r0, #1
 8010bec:	bd08      	pop	{r3, pc}
 8010bee:	4770      	bx	lr

08010bf0 <_ControlModeCommand_Request__cdr_deserialize>:
 8010bf0:	b538      	push	{r3, r4, r5, lr}
 8010bf2:	460c      	mov	r4, r1
 8010bf4:	b179      	cbz	r1, 8010c16 <_ControlModeCommand_Request__cdr_deserialize+0x26>
 8010bf6:	4605      	mov	r5, r0
 8010bf8:	f000 fc56 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	4621      	mov	r1, r4
 8010c00:	4628      	mov	r0, r5
 8010c02:	685b      	ldr	r3, [r3, #4]
 8010c04:	68db      	ldr	r3, [r3, #12]
 8010c06:	4798      	blx	r3
 8010c08:	f104 0108 	add.w	r1, r4, #8
 8010c0c:	4628      	mov	r0, r5
 8010c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c12:	f000 bc91 	b.w	8011538 <ucdr_deserialize_uint8_t>
 8010c16:	4608      	mov	r0, r1
 8010c18:	bd38      	pop	{r3, r4, r5, pc}
 8010c1a:	bf00      	nop

08010c1c <_ControlModeCommand_Request__cdr_serialize>:
 8010c1c:	b180      	cbz	r0, 8010c40 <_ControlModeCommand_Request__cdr_serialize+0x24>
 8010c1e:	b538      	push	{r3, r4, r5, lr}
 8010c20:	4604      	mov	r4, r0
 8010c22:	460d      	mov	r5, r1
 8010c24:	f000 fc40 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	4629      	mov	r1, r5
 8010c2c:	4620      	mov	r0, r4
 8010c2e:	685b      	ldr	r3, [r3, #4]
 8010c30:	689b      	ldr	r3, [r3, #8]
 8010c32:	4798      	blx	r3
 8010c34:	7a21      	ldrb	r1, [r4, #8]
 8010c36:	4628      	mov	r0, r5
 8010c38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c3c:	f000 bc66 	b.w	801150c <ucdr_serialize_uint8_t>
 8010c40:	4770      	bx	lr
 8010c42:	bf00      	nop

08010c44 <_ControlModeCommand_Response__cdr_serialize>:
 8010c44:	460a      	mov	r2, r1
 8010c46:	b118      	cbz	r0, 8010c50 <_ControlModeCommand_Response__cdr_serialize+0xc>
 8010c48:	7801      	ldrb	r1, [r0, #0]
 8010c4a:	4610      	mov	r0, r2
 8010c4c:	f000 bc30 	b.w	80114b0 <ucdr_serialize_bool>
 8010c50:	4770      	bx	lr
 8010c52:	bf00      	nop

08010c54 <_ControlModeCommand_Response__get_serialized_size>:
 8010c54:	b130      	cbz	r0, 8010c64 <_ControlModeCommand_Response__get_serialized_size+0x10>
 8010c56:	2101      	movs	r1, #1
 8010c58:	2000      	movs	r0, #0
 8010c5a:	b508      	push	{r3, lr}
 8010c5c:	f001 fae6 	bl	801222c <ucdr_alignment>
 8010c60:	3001      	adds	r0, #1
 8010c62:	bd08      	pop	{r3, pc}
 8010c64:	4770      	bx	lr
 8010c66:	bf00      	nop

08010c68 <_ControlModeCommand_Request__get_serialized_size>:
 8010c68:	b150      	cbz	r0, 8010c80 <_ControlModeCommand_Request__get_serialized_size+0x18>
 8010c6a:	2100      	movs	r1, #0
 8010c6c:	b510      	push	{r4, lr}
 8010c6e:	f000 fbb7 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010c72:	4604      	mov	r4, r0
 8010c74:	2101      	movs	r1, #1
 8010c76:	f001 fad9 	bl	801222c <ucdr_alignment>
 8010c7a:	4420      	add	r0, r4
 8010c7c:	3001      	adds	r0, #1
 8010c7e:	bd10      	pop	{r4, pc}
 8010c80:	4770      	bx	lr
 8010c82:	bf00      	nop

08010c84 <_ControlModeCommand_Request__max_serialized_size>:
 8010c84:	b510      	push	{r4, lr}
 8010c86:	b082      	sub	sp, #8
 8010c88:	2401      	movs	r4, #1
 8010c8a:	2100      	movs	r1, #0
 8010c8c:	f10d 0007 	add.w	r0, sp, #7
 8010c90:	f88d 4007 	strb.w	r4, [sp, #7]
 8010c94:	f000 fbf4 	bl	8011480 <max_serialized_size_builtin_interfaces__msg__Time>
 8010c98:	4621      	mov	r1, r4
 8010c9a:	4604      	mov	r4, r0
 8010c9c:	f001 fac6 	bl	801222c <ucdr_alignment>
 8010ca0:	4420      	add	r0, r4
 8010ca2:	3001      	adds	r0, #1
 8010ca4:	b002      	add	sp, #8
 8010ca6:	bd10      	pop	{r4, pc}

08010ca8 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 8010ca8:	4800      	ldr	r0, [pc, #0]	@ (8010cac <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x4>)
 8010caa:	4770      	bx	lr
 8010cac:	24000b88 	.word	0x24000b88

08010cb0 <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport>:
 8010cb0:	b538      	push	{r3, r4, r5, lr}
 8010cb2:	b158      	cbz	r0, 8010ccc <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport+0x1c>
 8010cb4:	460d      	mov	r5, r1
 8010cb6:	f000 fb93 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010cba:	2101      	movs	r1, #1
 8010cbc:	182c      	adds	r4, r5, r0
 8010cbe:	f1c5 0501 	rsb	r5, r5, #1
 8010cc2:	4620      	mov	r0, r4
 8010cc4:	f001 fab2 	bl	801222c <ucdr_alignment>
 8010cc8:	4428      	add	r0, r5
 8010cca:	4420      	add	r0, r4
 8010ccc:	bd38      	pop	{r3, r4, r5, pc}
 8010cce:	bf00      	nop

08010cd0 <_ControlModeReport__cdr_deserialize>:
 8010cd0:	b538      	push	{r3, r4, r5, lr}
 8010cd2:	460c      	mov	r4, r1
 8010cd4:	b179      	cbz	r1, 8010cf6 <_ControlModeReport__cdr_deserialize+0x26>
 8010cd6:	4605      	mov	r5, r0
 8010cd8:	f000 fbe6 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	4621      	mov	r1, r4
 8010ce0:	4628      	mov	r0, r5
 8010ce2:	685b      	ldr	r3, [r3, #4]
 8010ce4:	68db      	ldr	r3, [r3, #12]
 8010ce6:	4798      	blx	r3
 8010ce8:	f104 0108 	add.w	r1, r4, #8
 8010cec:	4628      	mov	r0, r5
 8010cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010cf2:	f000 bc21 	b.w	8011538 <ucdr_deserialize_uint8_t>
 8010cf6:	4608      	mov	r0, r1
 8010cf8:	bd38      	pop	{r3, r4, r5, pc}
 8010cfa:	bf00      	nop

08010cfc <_ControlModeReport__cdr_serialize>:
 8010cfc:	b180      	cbz	r0, 8010d20 <_ControlModeReport__cdr_serialize+0x24>
 8010cfe:	b538      	push	{r3, r4, r5, lr}
 8010d00:	4604      	mov	r4, r0
 8010d02:	460d      	mov	r5, r1
 8010d04:	f000 fbd0 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010d08:	4603      	mov	r3, r0
 8010d0a:	4629      	mov	r1, r5
 8010d0c:	4620      	mov	r0, r4
 8010d0e:	685b      	ldr	r3, [r3, #4]
 8010d10:	689b      	ldr	r3, [r3, #8]
 8010d12:	4798      	blx	r3
 8010d14:	7a21      	ldrb	r1, [r4, #8]
 8010d16:	4628      	mov	r0, r5
 8010d18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d1c:	f000 bbf6 	b.w	801150c <ucdr_serialize_uint8_t>
 8010d20:	4770      	bx	lr
 8010d22:	bf00      	nop

08010d24 <_ControlModeReport__get_serialized_size>:
 8010d24:	b150      	cbz	r0, 8010d3c <_ControlModeReport__get_serialized_size+0x18>
 8010d26:	2100      	movs	r1, #0
 8010d28:	b510      	push	{r4, lr}
 8010d2a:	f000 fb59 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010d2e:	4604      	mov	r4, r0
 8010d30:	2101      	movs	r1, #1
 8010d32:	f001 fa7b 	bl	801222c <ucdr_alignment>
 8010d36:	4420      	add	r0, r4
 8010d38:	3001      	adds	r0, #1
 8010d3a:	bd10      	pop	{r4, pc}
 8010d3c:	4770      	bx	lr
 8010d3e:	bf00      	nop

08010d40 <_ControlModeReport__max_serialized_size>:
 8010d40:	b510      	push	{r4, lr}
 8010d42:	b082      	sub	sp, #8
 8010d44:	2401      	movs	r4, #1
 8010d46:	2100      	movs	r1, #0
 8010d48:	f10d 0007 	add.w	r0, sp, #7
 8010d4c:	f88d 4007 	strb.w	r4, [sp, #7]
 8010d50:	f000 fb96 	bl	8011480 <max_serialized_size_builtin_interfaces__msg__Time>
 8010d54:	4621      	mov	r1, r4
 8010d56:	4604      	mov	r4, r0
 8010d58:	f001 fa68 	bl	801222c <ucdr_alignment>
 8010d5c:	4420      	add	r0, r4
 8010d5e:	3001      	adds	r0, #1
 8010d60:	b002      	add	sp, #8
 8010d62:	bd10      	pop	{r4, pc}

08010d64 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 8010d64:	4800      	ldr	r0, [pc, #0]	@ (8010d68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x4>)
 8010d66:	4770      	bx	lr
 8010d68:	24000be4 	.word	0x24000be4

08010d6c <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand>:
 8010d6c:	b538      	push	{r3, r4, r5, lr}
 8010d6e:	b158      	cbz	r0, 8010d88 <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand+0x1c>
 8010d70:	460d      	mov	r5, r1
 8010d72:	f000 fb35 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010d76:	2101      	movs	r1, #1
 8010d78:	182c      	adds	r4, r5, r0
 8010d7a:	f1c5 0501 	rsb	r5, r5, #1
 8010d7e:	4620      	mov	r0, r4
 8010d80:	f001 fa54 	bl	801222c <ucdr_alignment>
 8010d84:	4428      	add	r0, r5
 8010d86:	4420      	add	r0, r4
 8010d88:	bd38      	pop	{r3, r4, r5, pc}
 8010d8a:	bf00      	nop

08010d8c <_GearCommand__cdr_deserialize>:
 8010d8c:	b538      	push	{r3, r4, r5, lr}
 8010d8e:	460c      	mov	r4, r1
 8010d90:	b179      	cbz	r1, 8010db2 <_GearCommand__cdr_deserialize+0x26>
 8010d92:	4605      	mov	r5, r0
 8010d94:	f000 fb88 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010d98:	4603      	mov	r3, r0
 8010d9a:	4621      	mov	r1, r4
 8010d9c:	4628      	mov	r0, r5
 8010d9e:	685b      	ldr	r3, [r3, #4]
 8010da0:	68db      	ldr	r3, [r3, #12]
 8010da2:	4798      	blx	r3
 8010da4:	f104 0108 	add.w	r1, r4, #8
 8010da8:	4628      	mov	r0, r5
 8010daa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dae:	f000 bbc3 	b.w	8011538 <ucdr_deserialize_uint8_t>
 8010db2:	4608      	mov	r0, r1
 8010db4:	bd38      	pop	{r3, r4, r5, pc}
 8010db6:	bf00      	nop

08010db8 <_GearCommand__cdr_serialize>:
 8010db8:	b180      	cbz	r0, 8010ddc <_GearCommand__cdr_serialize+0x24>
 8010dba:	b538      	push	{r3, r4, r5, lr}
 8010dbc:	4604      	mov	r4, r0
 8010dbe:	460d      	mov	r5, r1
 8010dc0:	f000 fb72 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	4629      	mov	r1, r5
 8010dc8:	4620      	mov	r0, r4
 8010dca:	685b      	ldr	r3, [r3, #4]
 8010dcc:	689b      	ldr	r3, [r3, #8]
 8010dce:	4798      	blx	r3
 8010dd0:	7a21      	ldrb	r1, [r4, #8]
 8010dd2:	4628      	mov	r0, r5
 8010dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dd8:	f000 bb98 	b.w	801150c <ucdr_serialize_uint8_t>
 8010ddc:	4770      	bx	lr
 8010dde:	bf00      	nop

08010de0 <_GearCommand__get_serialized_size>:
 8010de0:	b150      	cbz	r0, 8010df8 <_GearCommand__get_serialized_size+0x18>
 8010de2:	2100      	movs	r1, #0
 8010de4:	b510      	push	{r4, lr}
 8010de6:	f000 fafb 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010dea:	4604      	mov	r4, r0
 8010dec:	2101      	movs	r1, #1
 8010dee:	f001 fa1d 	bl	801222c <ucdr_alignment>
 8010df2:	4420      	add	r0, r4
 8010df4:	3001      	adds	r0, #1
 8010df6:	bd10      	pop	{r4, pc}
 8010df8:	4770      	bx	lr
 8010dfa:	bf00      	nop

08010dfc <_GearCommand__max_serialized_size>:
 8010dfc:	b510      	push	{r4, lr}
 8010dfe:	b082      	sub	sp, #8
 8010e00:	2401      	movs	r4, #1
 8010e02:	2100      	movs	r1, #0
 8010e04:	f10d 0007 	add.w	r0, sp, #7
 8010e08:	f88d 4007 	strb.w	r4, [sp, #7]
 8010e0c:	f000 fb38 	bl	8011480 <max_serialized_size_builtin_interfaces__msg__Time>
 8010e10:	4621      	mov	r1, r4
 8010e12:	4604      	mov	r4, r0
 8010e14:	f001 fa0a 	bl	801222c <ucdr_alignment>
 8010e18:	4420      	add	r0, r4
 8010e1a:	3001      	adds	r0, #1
 8010e1c:	b002      	add	sp, #8
 8010e1e:	bd10      	pop	{r4, pc}

08010e20 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 8010e20:	4800      	ldr	r0, [pc, #0]	@ (8010e24 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x4>)
 8010e22:	4770      	bx	lr
 8010e24:	24000c0c 	.word	0x24000c0c

08010e28 <get_serialized_size_autoware_vehicle_msgs__msg__GearReport>:
 8010e28:	b538      	push	{r3, r4, r5, lr}
 8010e2a:	b158      	cbz	r0, 8010e44 <get_serialized_size_autoware_vehicle_msgs__msg__GearReport+0x1c>
 8010e2c:	460d      	mov	r5, r1
 8010e2e:	f000 fad7 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010e32:	2101      	movs	r1, #1
 8010e34:	182c      	adds	r4, r5, r0
 8010e36:	f1c5 0501 	rsb	r5, r5, #1
 8010e3a:	4620      	mov	r0, r4
 8010e3c:	f001 f9f6 	bl	801222c <ucdr_alignment>
 8010e40:	4428      	add	r0, r5
 8010e42:	4420      	add	r0, r4
 8010e44:	bd38      	pop	{r3, r4, r5, pc}
 8010e46:	bf00      	nop

08010e48 <_GearReport__cdr_deserialize>:
 8010e48:	b538      	push	{r3, r4, r5, lr}
 8010e4a:	460c      	mov	r4, r1
 8010e4c:	b179      	cbz	r1, 8010e6e <_GearReport__cdr_deserialize+0x26>
 8010e4e:	4605      	mov	r5, r0
 8010e50:	f000 fb2a 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010e54:	4603      	mov	r3, r0
 8010e56:	4621      	mov	r1, r4
 8010e58:	4628      	mov	r0, r5
 8010e5a:	685b      	ldr	r3, [r3, #4]
 8010e5c:	68db      	ldr	r3, [r3, #12]
 8010e5e:	4798      	blx	r3
 8010e60:	f104 0108 	add.w	r1, r4, #8
 8010e64:	4628      	mov	r0, r5
 8010e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e6a:	f000 bb65 	b.w	8011538 <ucdr_deserialize_uint8_t>
 8010e6e:	4608      	mov	r0, r1
 8010e70:	bd38      	pop	{r3, r4, r5, pc}
 8010e72:	bf00      	nop

08010e74 <_GearReport__cdr_serialize>:
 8010e74:	b180      	cbz	r0, 8010e98 <_GearReport__cdr_serialize+0x24>
 8010e76:	b538      	push	{r3, r4, r5, lr}
 8010e78:	4604      	mov	r4, r0
 8010e7a:	460d      	mov	r5, r1
 8010e7c:	f000 fb14 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010e80:	4603      	mov	r3, r0
 8010e82:	4629      	mov	r1, r5
 8010e84:	4620      	mov	r0, r4
 8010e86:	685b      	ldr	r3, [r3, #4]
 8010e88:	689b      	ldr	r3, [r3, #8]
 8010e8a:	4798      	blx	r3
 8010e8c:	7a21      	ldrb	r1, [r4, #8]
 8010e8e:	4628      	mov	r0, r5
 8010e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e94:	f000 bb3a 	b.w	801150c <ucdr_serialize_uint8_t>
 8010e98:	4770      	bx	lr
 8010e9a:	bf00      	nop

08010e9c <_GearReport__get_serialized_size>:
 8010e9c:	b150      	cbz	r0, 8010eb4 <_GearReport__get_serialized_size+0x18>
 8010e9e:	2100      	movs	r1, #0
 8010ea0:	b510      	push	{r4, lr}
 8010ea2:	f000 fa9d 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010ea6:	4604      	mov	r4, r0
 8010ea8:	2101      	movs	r1, #1
 8010eaa:	f001 f9bf 	bl	801222c <ucdr_alignment>
 8010eae:	4420      	add	r0, r4
 8010eb0:	3001      	adds	r0, #1
 8010eb2:	bd10      	pop	{r4, pc}
 8010eb4:	4770      	bx	lr
 8010eb6:	bf00      	nop

08010eb8 <_GearReport__max_serialized_size>:
 8010eb8:	b510      	push	{r4, lr}
 8010eba:	b082      	sub	sp, #8
 8010ebc:	2401      	movs	r4, #1
 8010ebe:	2100      	movs	r1, #0
 8010ec0:	f10d 0007 	add.w	r0, sp, #7
 8010ec4:	f88d 4007 	strb.w	r4, [sp, #7]
 8010ec8:	f000 fada 	bl	8011480 <max_serialized_size_builtin_interfaces__msg__Time>
 8010ecc:	4621      	mov	r1, r4
 8010ece:	4604      	mov	r4, r0
 8010ed0:	f001 f9ac 	bl	801222c <ucdr_alignment>
 8010ed4:	4420      	add	r0, r4
 8010ed6:	3001      	adds	r0, #1
 8010ed8:	b002      	add	sp, #8
 8010eda:	bd10      	pop	{r4, pc}

08010edc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 8010edc:	4800      	ldr	r0, [pc, #0]	@ (8010ee0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x4>)
 8010ede:	4770      	bx	lr
 8010ee0:	24000c34 	.word	0x24000c34

08010ee4 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8010ee4:	b538      	push	{r3, r4, r5, lr}
 8010ee6:	b158      	cbz	r0, 8010f00 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand+0x1c>
 8010ee8:	460d      	mov	r5, r1
 8010eea:	f000 fa79 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010eee:	2101      	movs	r1, #1
 8010ef0:	182c      	adds	r4, r5, r0
 8010ef2:	f1c5 0501 	rsb	r5, r5, #1
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	f001 f998 	bl	801222c <ucdr_alignment>
 8010efc:	4428      	add	r0, r5
 8010efe:	4420      	add	r0, r4
 8010f00:	bd38      	pop	{r3, r4, r5, pc}
 8010f02:	bf00      	nop

08010f04 <_HazardLightsCommand__cdr_deserialize>:
 8010f04:	b538      	push	{r3, r4, r5, lr}
 8010f06:	460c      	mov	r4, r1
 8010f08:	b179      	cbz	r1, 8010f2a <_HazardLightsCommand__cdr_deserialize+0x26>
 8010f0a:	4605      	mov	r5, r0
 8010f0c:	f000 facc 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010f10:	4603      	mov	r3, r0
 8010f12:	4621      	mov	r1, r4
 8010f14:	4628      	mov	r0, r5
 8010f16:	685b      	ldr	r3, [r3, #4]
 8010f18:	68db      	ldr	r3, [r3, #12]
 8010f1a:	4798      	blx	r3
 8010f1c:	f104 0108 	add.w	r1, r4, #8
 8010f20:	4628      	mov	r0, r5
 8010f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f26:	f000 bb07 	b.w	8011538 <ucdr_deserialize_uint8_t>
 8010f2a:	4608      	mov	r0, r1
 8010f2c:	bd38      	pop	{r3, r4, r5, pc}
 8010f2e:	bf00      	nop

08010f30 <_HazardLightsCommand__cdr_serialize>:
 8010f30:	b180      	cbz	r0, 8010f54 <_HazardLightsCommand__cdr_serialize+0x24>
 8010f32:	b538      	push	{r3, r4, r5, lr}
 8010f34:	4604      	mov	r4, r0
 8010f36:	460d      	mov	r5, r1
 8010f38:	f000 fab6 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	4629      	mov	r1, r5
 8010f40:	4620      	mov	r0, r4
 8010f42:	685b      	ldr	r3, [r3, #4]
 8010f44:	689b      	ldr	r3, [r3, #8]
 8010f46:	4798      	blx	r3
 8010f48:	7a21      	ldrb	r1, [r4, #8]
 8010f4a:	4628      	mov	r0, r5
 8010f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f50:	f000 badc 	b.w	801150c <ucdr_serialize_uint8_t>
 8010f54:	4770      	bx	lr
 8010f56:	bf00      	nop

08010f58 <_HazardLightsCommand__get_serialized_size>:
 8010f58:	b150      	cbz	r0, 8010f70 <_HazardLightsCommand__get_serialized_size+0x18>
 8010f5a:	2100      	movs	r1, #0
 8010f5c:	b510      	push	{r4, lr}
 8010f5e:	f000 fa3f 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010f62:	4604      	mov	r4, r0
 8010f64:	2101      	movs	r1, #1
 8010f66:	f001 f961 	bl	801222c <ucdr_alignment>
 8010f6a:	4420      	add	r0, r4
 8010f6c:	3001      	adds	r0, #1
 8010f6e:	bd10      	pop	{r4, pc}
 8010f70:	4770      	bx	lr
 8010f72:	bf00      	nop

08010f74 <_HazardLightsCommand__max_serialized_size>:
 8010f74:	b510      	push	{r4, lr}
 8010f76:	b082      	sub	sp, #8
 8010f78:	2401      	movs	r4, #1
 8010f7a:	2100      	movs	r1, #0
 8010f7c:	f10d 0007 	add.w	r0, sp, #7
 8010f80:	f88d 4007 	strb.w	r4, [sp, #7]
 8010f84:	f000 fa7c 	bl	8011480 <max_serialized_size_builtin_interfaces__msg__Time>
 8010f88:	4621      	mov	r1, r4
 8010f8a:	4604      	mov	r4, r0
 8010f8c:	f001 f94e 	bl	801222c <ucdr_alignment>
 8010f90:	4420      	add	r0, r4
 8010f92:	3001      	adds	r0, #1
 8010f94:	b002      	add	sp, #8
 8010f96:	bd10      	pop	{r4, pc}

08010f98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8010f98:	4800      	ldr	r0, [pc, #0]	@ (8010f9c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x4>)
 8010f9a:	4770      	bx	lr
 8010f9c:	24000c5c 	.word	0x24000c5c

08010fa0 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport>:
 8010fa0:	b538      	push	{r3, r4, r5, lr}
 8010fa2:	b158      	cbz	r0, 8010fbc <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport+0x1c>
 8010fa4:	460d      	mov	r5, r1
 8010fa6:	f000 fa1b 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010faa:	2101      	movs	r1, #1
 8010fac:	182c      	adds	r4, r5, r0
 8010fae:	f1c5 0501 	rsb	r5, r5, #1
 8010fb2:	4620      	mov	r0, r4
 8010fb4:	f001 f93a 	bl	801222c <ucdr_alignment>
 8010fb8:	4428      	add	r0, r5
 8010fba:	4420      	add	r0, r4
 8010fbc:	bd38      	pop	{r3, r4, r5, pc}
 8010fbe:	bf00      	nop

08010fc0 <_HazardLightsReport__cdr_deserialize>:
 8010fc0:	b538      	push	{r3, r4, r5, lr}
 8010fc2:	460c      	mov	r4, r1
 8010fc4:	b179      	cbz	r1, 8010fe6 <_HazardLightsReport__cdr_deserialize+0x26>
 8010fc6:	4605      	mov	r5, r0
 8010fc8:	f000 fa6e 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	4621      	mov	r1, r4
 8010fd0:	4628      	mov	r0, r5
 8010fd2:	685b      	ldr	r3, [r3, #4]
 8010fd4:	68db      	ldr	r3, [r3, #12]
 8010fd6:	4798      	blx	r3
 8010fd8:	f104 0108 	add.w	r1, r4, #8
 8010fdc:	4628      	mov	r0, r5
 8010fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010fe2:	f000 baa9 	b.w	8011538 <ucdr_deserialize_uint8_t>
 8010fe6:	4608      	mov	r0, r1
 8010fe8:	bd38      	pop	{r3, r4, r5, pc}
 8010fea:	bf00      	nop

08010fec <_HazardLightsReport__cdr_serialize>:
 8010fec:	b180      	cbz	r0, 8011010 <_HazardLightsReport__cdr_serialize+0x24>
 8010fee:	b538      	push	{r3, r4, r5, lr}
 8010ff0:	4604      	mov	r4, r0
 8010ff2:	460d      	mov	r5, r1
 8010ff4:	f000 fa58 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	4629      	mov	r1, r5
 8010ffc:	4620      	mov	r0, r4
 8010ffe:	685b      	ldr	r3, [r3, #4]
 8011000:	689b      	ldr	r3, [r3, #8]
 8011002:	4798      	blx	r3
 8011004:	7a21      	ldrb	r1, [r4, #8]
 8011006:	4628      	mov	r0, r5
 8011008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801100c:	f000 ba7e 	b.w	801150c <ucdr_serialize_uint8_t>
 8011010:	4770      	bx	lr
 8011012:	bf00      	nop

08011014 <_HazardLightsReport__get_serialized_size>:
 8011014:	b150      	cbz	r0, 801102c <_HazardLightsReport__get_serialized_size+0x18>
 8011016:	2100      	movs	r1, #0
 8011018:	b510      	push	{r4, lr}
 801101a:	f000 f9e1 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 801101e:	4604      	mov	r4, r0
 8011020:	2101      	movs	r1, #1
 8011022:	f001 f903 	bl	801222c <ucdr_alignment>
 8011026:	4420      	add	r0, r4
 8011028:	3001      	adds	r0, #1
 801102a:	bd10      	pop	{r4, pc}
 801102c:	4770      	bx	lr
 801102e:	bf00      	nop

08011030 <_HazardLightsReport__max_serialized_size>:
 8011030:	b510      	push	{r4, lr}
 8011032:	b082      	sub	sp, #8
 8011034:	2401      	movs	r4, #1
 8011036:	2100      	movs	r1, #0
 8011038:	f10d 0007 	add.w	r0, sp, #7
 801103c:	f88d 4007 	strb.w	r4, [sp, #7]
 8011040:	f000 fa1e 	bl	8011480 <max_serialized_size_builtin_interfaces__msg__Time>
 8011044:	4621      	mov	r1, r4
 8011046:	4604      	mov	r4, r0
 8011048:	f001 f8f0 	bl	801222c <ucdr_alignment>
 801104c:	4420      	add	r0, r4
 801104e:	3001      	adds	r0, #1
 8011050:	b002      	add	sp, #8
 8011052:	bd10      	pop	{r4, pc}

08011054 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 8011054:	4800      	ldr	r0, [pc, #0]	@ (8011058 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x4>)
 8011056:	4770      	bx	lr
 8011058:	24000c84 	.word	0x24000c84

0801105c <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport>:
 801105c:	b538      	push	{r3, r4, r5, lr}
 801105e:	b158      	cbz	r0, 8011078 <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport+0x1c>
 8011060:	460d      	mov	r5, r1
 8011062:	f000 f9bd 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 8011066:	2104      	movs	r1, #4
 8011068:	182c      	adds	r4, r5, r0
 801106a:	f1c5 0504 	rsb	r5, r5, #4
 801106e:	4620      	mov	r0, r4
 8011070:	f001 f8dc 	bl	801222c <ucdr_alignment>
 8011074:	4428      	add	r0, r5
 8011076:	4420      	add	r0, r4
 8011078:	bd38      	pop	{r3, r4, r5, pc}
 801107a:	bf00      	nop

0801107c <_SteeringReport__cdr_deserialize>:
 801107c:	b538      	push	{r3, r4, r5, lr}
 801107e:	460c      	mov	r4, r1
 8011080:	b179      	cbz	r1, 80110a2 <_SteeringReport__cdr_deserialize+0x26>
 8011082:	4605      	mov	r5, r0
 8011084:	f000 fa10 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011088:	4603      	mov	r3, r0
 801108a:	4621      	mov	r1, r4
 801108c:	4628      	mov	r0, r5
 801108e:	685b      	ldr	r3, [r3, #4]
 8011090:	68db      	ldr	r3, [r3, #12]
 8011092:	4798      	blx	r3
 8011094:	f104 0108 	add.w	r1, r4, #8
 8011098:	4628      	mov	r0, r5
 801109a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801109e:	f000 be77 	b.w	8011d90 <ucdr_deserialize_float>
 80110a2:	4608      	mov	r0, r1
 80110a4:	bd38      	pop	{r3, r4, r5, pc}
 80110a6:	bf00      	nop

080110a8 <_SteeringReport__cdr_serialize>:
 80110a8:	b188      	cbz	r0, 80110ce <_SteeringReport__cdr_serialize+0x26>
 80110aa:	b538      	push	{r3, r4, r5, lr}
 80110ac:	4604      	mov	r4, r0
 80110ae:	460d      	mov	r5, r1
 80110b0:	f000 f9fa 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80110b4:	4603      	mov	r3, r0
 80110b6:	4629      	mov	r1, r5
 80110b8:	4620      	mov	r0, r4
 80110ba:	685b      	ldr	r3, [r3, #4]
 80110bc:	689b      	ldr	r3, [r3, #8]
 80110be:	4798      	blx	r3
 80110c0:	ed94 0a02 	vldr	s0, [r4, #8]
 80110c4:	4628      	mov	r0, r5
 80110c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110ca:	f000 bdc9 	b.w	8011c60 <ucdr_serialize_float>
 80110ce:	4770      	bx	lr

080110d0 <_SteeringReport__get_serialized_size>:
 80110d0:	b150      	cbz	r0, 80110e8 <_SteeringReport__get_serialized_size+0x18>
 80110d2:	2100      	movs	r1, #0
 80110d4:	b510      	push	{r4, lr}
 80110d6:	f000 f983 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 80110da:	4604      	mov	r4, r0
 80110dc:	2104      	movs	r1, #4
 80110de:	f001 f8a5 	bl	801222c <ucdr_alignment>
 80110e2:	4420      	add	r0, r4
 80110e4:	3004      	adds	r0, #4
 80110e6:	bd10      	pop	{r4, pc}
 80110e8:	4770      	bx	lr
 80110ea:	bf00      	nop

080110ec <_SteeringReport__max_serialized_size>:
 80110ec:	b510      	push	{r4, lr}
 80110ee:	b082      	sub	sp, #8
 80110f0:	2301      	movs	r3, #1
 80110f2:	2100      	movs	r1, #0
 80110f4:	f10d 0007 	add.w	r0, sp, #7
 80110f8:	f88d 3007 	strb.w	r3, [sp, #7]
 80110fc:	f000 f9c0 	bl	8011480 <max_serialized_size_builtin_interfaces__msg__Time>
 8011100:	4604      	mov	r4, r0
 8011102:	2104      	movs	r1, #4
 8011104:	f001 f892 	bl	801222c <ucdr_alignment>
 8011108:	4420      	add	r0, r4
 801110a:	3004      	adds	r0, #4
 801110c:	b002      	add	sp, #8
 801110e:	bd10      	pop	{r4, pc}

08011110 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 8011110:	4800      	ldr	r0, [pc, #0]	@ (8011114 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x4>)
 8011112:	4770      	bx	lr
 8011114:	24000cac 	.word	0x24000cac

08011118 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8011118:	b538      	push	{r3, r4, r5, lr}
 801111a:	b158      	cbz	r0, 8011134 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x1c>
 801111c:	460d      	mov	r5, r1
 801111e:	f000 f95f 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 8011122:	2101      	movs	r1, #1
 8011124:	182c      	adds	r4, r5, r0
 8011126:	f1c5 0501 	rsb	r5, r5, #1
 801112a:	4620      	mov	r0, r4
 801112c:	f001 f87e 	bl	801222c <ucdr_alignment>
 8011130:	4428      	add	r0, r5
 8011132:	4420      	add	r0, r4
 8011134:	bd38      	pop	{r3, r4, r5, pc}
 8011136:	bf00      	nop

08011138 <_TurnIndicatorsCommand__cdr_deserialize>:
 8011138:	b538      	push	{r3, r4, r5, lr}
 801113a:	460c      	mov	r4, r1
 801113c:	b179      	cbz	r1, 801115e <_TurnIndicatorsCommand__cdr_deserialize+0x26>
 801113e:	4605      	mov	r5, r0
 8011140:	f000 f9b2 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011144:	4603      	mov	r3, r0
 8011146:	4621      	mov	r1, r4
 8011148:	4628      	mov	r0, r5
 801114a:	685b      	ldr	r3, [r3, #4]
 801114c:	68db      	ldr	r3, [r3, #12]
 801114e:	4798      	blx	r3
 8011150:	f104 0108 	add.w	r1, r4, #8
 8011154:	4628      	mov	r0, r5
 8011156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801115a:	f000 b9ed 	b.w	8011538 <ucdr_deserialize_uint8_t>
 801115e:	4608      	mov	r0, r1
 8011160:	bd38      	pop	{r3, r4, r5, pc}
 8011162:	bf00      	nop

08011164 <_TurnIndicatorsCommand__cdr_serialize>:
 8011164:	b180      	cbz	r0, 8011188 <_TurnIndicatorsCommand__cdr_serialize+0x24>
 8011166:	b538      	push	{r3, r4, r5, lr}
 8011168:	4604      	mov	r4, r0
 801116a:	460d      	mov	r5, r1
 801116c:	f000 f99c 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011170:	4603      	mov	r3, r0
 8011172:	4629      	mov	r1, r5
 8011174:	4620      	mov	r0, r4
 8011176:	685b      	ldr	r3, [r3, #4]
 8011178:	689b      	ldr	r3, [r3, #8]
 801117a:	4798      	blx	r3
 801117c:	7a21      	ldrb	r1, [r4, #8]
 801117e:	4628      	mov	r0, r5
 8011180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011184:	f000 b9c2 	b.w	801150c <ucdr_serialize_uint8_t>
 8011188:	4770      	bx	lr
 801118a:	bf00      	nop

0801118c <_TurnIndicatorsCommand__get_serialized_size>:
 801118c:	b150      	cbz	r0, 80111a4 <_TurnIndicatorsCommand__get_serialized_size+0x18>
 801118e:	2100      	movs	r1, #0
 8011190:	b510      	push	{r4, lr}
 8011192:	f000 f925 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 8011196:	4604      	mov	r4, r0
 8011198:	2101      	movs	r1, #1
 801119a:	f001 f847 	bl	801222c <ucdr_alignment>
 801119e:	4420      	add	r0, r4
 80111a0:	3001      	adds	r0, #1
 80111a2:	bd10      	pop	{r4, pc}
 80111a4:	4770      	bx	lr
 80111a6:	bf00      	nop

080111a8 <_TurnIndicatorsCommand__max_serialized_size>:
 80111a8:	b510      	push	{r4, lr}
 80111aa:	b082      	sub	sp, #8
 80111ac:	2401      	movs	r4, #1
 80111ae:	2100      	movs	r1, #0
 80111b0:	f10d 0007 	add.w	r0, sp, #7
 80111b4:	f88d 4007 	strb.w	r4, [sp, #7]
 80111b8:	f000 f962 	bl	8011480 <max_serialized_size_builtin_interfaces__msg__Time>
 80111bc:	4621      	mov	r1, r4
 80111be:	4604      	mov	r4, r0
 80111c0:	f001 f834 	bl	801222c <ucdr_alignment>
 80111c4:	4420      	add	r0, r4
 80111c6:	3001      	adds	r0, #1
 80111c8:	b002      	add	sp, #8
 80111ca:	bd10      	pop	{r4, pc}

080111cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 80111cc:	4800      	ldr	r0, [pc, #0]	@ (80111d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x4>)
 80111ce:	4770      	bx	lr
 80111d0:	24000cd4 	.word	0x24000cd4

080111d4 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 80111d4:	b538      	push	{r3, r4, r5, lr}
 80111d6:	b158      	cbz	r0, 80111f0 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x1c>
 80111d8:	460d      	mov	r5, r1
 80111da:	f000 f901 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 80111de:	2101      	movs	r1, #1
 80111e0:	182c      	adds	r4, r5, r0
 80111e2:	f1c5 0501 	rsb	r5, r5, #1
 80111e6:	4620      	mov	r0, r4
 80111e8:	f001 f820 	bl	801222c <ucdr_alignment>
 80111ec:	4428      	add	r0, r5
 80111ee:	4420      	add	r0, r4
 80111f0:	bd38      	pop	{r3, r4, r5, pc}
 80111f2:	bf00      	nop

080111f4 <_TurnIndicatorsReport__cdr_deserialize>:
 80111f4:	b538      	push	{r3, r4, r5, lr}
 80111f6:	460c      	mov	r4, r1
 80111f8:	b179      	cbz	r1, 801121a <_TurnIndicatorsReport__cdr_deserialize+0x26>
 80111fa:	4605      	mov	r5, r0
 80111fc:	f000 f954 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011200:	4603      	mov	r3, r0
 8011202:	4621      	mov	r1, r4
 8011204:	4628      	mov	r0, r5
 8011206:	685b      	ldr	r3, [r3, #4]
 8011208:	68db      	ldr	r3, [r3, #12]
 801120a:	4798      	blx	r3
 801120c:	f104 0108 	add.w	r1, r4, #8
 8011210:	4628      	mov	r0, r5
 8011212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011216:	f000 b98f 	b.w	8011538 <ucdr_deserialize_uint8_t>
 801121a:	4608      	mov	r0, r1
 801121c:	bd38      	pop	{r3, r4, r5, pc}
 801121e:	bf00      	nop

08011220 <_TurnIndicatorsReport__cdr_serialize>:
 8011220:	b180      	cbz	r0, 8011244 <_TurnIndicatorsReport__cdr_serialize+0x24>
 8011222:	b538      	push	{r3, r4, r5, lr}
 8011224:	4604      	mov	r4, r0
 8011226:	460d      	mov	r5, r1
 8011228:	f000 f93e 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801122c:	4603      	mov	r3, r0
 801122e:	4629      	mov	r1, r5
 8011230:	4620      	mov	r0, r4
 8011232:	685b      	ldr	r3, [r3, #4]
 8011234:	689b      	ldr	r3, [r3, #8]
 8011236:	4798      	blx	r3
 8011238:	7a21      	ldrb	r1, [r4, #8]
 801123a:	4628      	mov	r0, r5
 801123c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011240:	f000 b964 	b.w	801150c <ucdr_serialize_uint8_t>
 8011244:	4770      	bx	lr
 8011246:	bf00      	nop

08011248 <_TurnIndicatorsReport__get_serialized_size>:
 8011248:	b150      	cbz	r0, 8011260 <_TurnIndicatorsReport__get_serialized_size+0x18>
 801124a:	2100      	movs	r1, #0
 801124c:	b510      	push	{r4, lr}
 801124e:	f000 f8c7 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 8011252:	4604      	mov	r4, r0
 8011254:	2101      	movs	r1, #1
 8011256:	f000 ffe9 	bl	801222c <ucdr_alignment>
 801125a:	4420      	add	r0, r4
 801125c:	3001      	adds	r0, #1
 801125e:	bd10      	pop	{r4, pc}
 8011260:	4770      	bx	lr
 8011262:	bf00      	nop

08011264 <_TurnIndicatorsReport__max_serialized_size>:
 8011264:	b510      	push	{r4, lr}
 8011266:	b082      	sub	sp, #8
 8011268:	2401      	movs	r4, #1
 801126a:	2100      	movs	r1, #0
 801126c:	f10d 0007 	add.w	r0, sp, #7
 8011270:	f88d 4007 	strb.w	r4, [sp, #7]
 8011274:	f000 f904 	bl	8011480 <max_serialized_size_builtin_interfaces__msg__Time>
 8011278:	4621      	mov	r1, r4
 801127a:	4604      	mov	r4, r0
 801127c:	f000 ffd6 	bl	801222c <ucdr_alignment>
 8011280:	4420      	add	r0, r4
 8011282:	3001      	adds	r0, #1
 8011284:	b002      	add	sp, #8
 8011286:	bd10      	pop	{r4, pc}

08011288 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8011288:	4800      	ldr	r0, [pc, #0]	@ (801128c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x4>)
 801128a:	4770      	bx	lr
 801128c:	24000cfc 	.word	0x24000cfc

08011290 <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport>:
 8011290:	b1c8      	cbz	r0, 80112c6 <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport+0x36>
 8011292:	b570      	push	{r4, r5, r6, lr}
 8011294:	460d      	mov	r5, r1
 8011296:	f001 f8e3 	bl	8012460 <get_serialized_size_std_msgs__msg__Header>
 801129a:	2104      	movs	r1, #4
 801129c:	182e      	adds	r6, r5, r0
 801129e:	f1c5 0504 	rsb	r5, r5, #4
 80112a2:	4630      	mov	r0, r6
 80112a4:	f000 ffc2 	bl	801222c <ucdr_alignment>
 80112a8:	2104      	movs	r1, #4
 80112aa:	1844      	adds	r4, r0, r1
 80112ac:	4434      	add	r4, r6
 80112ae:	4620      	mov	r0, r4
 80112b0:	f000 ffbc 	bl	801222c <ucdr_alignment>
 80112b4:	2104      	movs	r1, #4
 80112b6:	4408      	add	r0, r1
 80112b8:	4404      	add	r4, r0
 80112ba:	4620      	mov	r0, r4
 80112bc:	f000 ffb6 	bl	801222c <ucdr_alignment>
 80112c0:	4428      	add	r0, r5
 80112c2:	4420      	add	r0, r4
 80112c4:	bd70      	pop	{r4, r5, r6, pc}
 80112c6:	4770      	bx	lr

080112c8 <_VelocityReport__cdr_deserialize>:
 80112c8:	b538      	push	{r3, r4, r5, lr}
 80112ca:	460c      	mov	r4, r1
 80112cc:	b1c9      	cbz	r1, 8011302 <_VelocityReport__cdr_deserialize+0x3a>
 80112ce:	4605      	mov	r5, r0
 80112d0:	f001 f94a 	bl	8012568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80112d4:	4603      	mov	r3, r0
 80112d6:	4621      	mov	r1, r4
 80112d8:	4628      	mov	r0, r5
 80112da:	685b      	ldr	r3, [r3, #4]
 80112dc:	68db      	ldr	r3, [r3, #12]
 80112de:	4798      	blx	r3
 80112e0:	f104 0114 	add.w	r1, r4, #20
 80112e4:	4628      	mov	r0, r5
 80112e6:	f000 fd53 	bl	8011d90 <ucdr_deserialize_float>
 80112ea:	f104 0118 	add.w	r1, r4, #24
 80112ee:	4628      	mov	r0, r5
 80112f0:	f000 fd4e 	bl	8011d90 <ucdr_deserialize_float>
 80112f4:	f104 011c 	add.w	r1, r4, #28
 80112f8:	4628      	mov	r0, r5
 80112fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80112fe:	f000 bd47 	b.w	8011d90 <ucdr_deserialize_float>
 8011302:	4608      	mov	r0, r1
 8011304:	bd38      	pop	{r3, r4, r5, pc}
 8011306:	bf00      	nop

08011308 <_VelocityReport__cdr_serialize>:
 8011308:	b1d8      	cbz	r0, 8011342 <_VelocityReport__cdr_serialize+0x3a>
 801130a:	b538      	push	{r3, r4, r5, lr}
 801130c:	4604      	mov	r4, r0
 801130e:	460d      	mov	r5, r1
 8011310:	f001 f92a 	bl	8012568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011314:	4603      	mov	r3, r0
 8011316:	4629      	mov	r1, r5
 8011318:	4620      	mov	r0, r4
 801131a:	685b      	ldr	r3, [r3, #4]
 801131c:	689b      	ldr	r3, [r3, #8]
 801131e:	4798      	blx	r3
 8011320:	ed94 0a05 	vldr	s0, [r4, #20]
 8011324:	4628      	mov	r0, r5
 8011326:	f000 fc9b 	bl	8011c60 <ucdr_serialize_float>
 801132a:	ed94 0a06 	vldr	s0, [r4, #24]
 801132e:	4628      	mov	r0, r5
 8011330:	f000 fc96 	bl	8011c60 <ucdr_serialize_float>
 8011334:	ed94 0a07 	vldr	s0, [r4, #28]
 8011338:	4628      	mov	r0, r5
 801133a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801133e:	f000 bc8f 	b.w	8011c60 <ucdr_serialize_float>
 8011342:	4770      	bx	lr

08011344 <_VelocityReport__get_serialized_size>:
 8011344:	b1b0      	cbz	r0, 8011374 <_VelocityReport__get_serialized_size+0x30>
 8011346:	2100      	movs	r1, #0
 8011348:	b510      	push	{r4, lr}
 801134a:	f001 f889 	bl	8012460 <get_serialized_size_std_msgs__msg__Header>
 801134e:	4604      	mov	r4, r0
 8011350:	2104      	movs	r1, #4
 8011352:	f000 ff6b 	bl	801222c <ucdr_alignment>
 8011356:	2104      	movs	r1, #4
 8011358:	4420      	add	r0, r4
 801135a:	1844      	adds	r4, r0, r1
 801135c:	4620      	mov	r0, r4
 801135e:	f000 ff65 	bl	801222c <ucdr_alignment>
 8011362:	2104      	movs	r1, #4
 8011364:	4408      	add	r0, r1
 8011366:	4404      	add	r4, r0
 8011368:	4620      	mov	r0, r4
 801136a:	f000 ff5f 	bl	801222c <ucdr_alignment>
 801136e:	3004      	adds	r0, #4
 8011370:	4420      	add	r0, r4
 8011372:	bd10      	pop	{r4, pc}
 8011374:	4770      	bx	lr
 8011376:	bf00      	nop

08011378 <_VelocityReport__max_serialized_size>:
 8011378:	b510      	push	{r4, lr}
 801137a:	b082      	sub	sp, #8
 801137c:	2301      	movs	r3, #1
 801137e:	2100      	movs	r1, #0
 8011380:	f10d 0007 	add.w	r0, sp, #7
 8011384:	f88d 3007 	strb.w	r3, [sp, #7]
 8011388:	f001 f8e4 	bl	8012554 <max_serialized_size_std_msgs__msg__Header>
 801138c:	4604      	mov	r4, r0
 801138e:	2104      	movs	r1, #4
 8011390:	f000 ff4c 	bl	801222c <ucdr_alignment>
 8011394:	2104      	movs	r1, #4
 8011396:	4420      	add	r0, r4
 8011398:	1844      	adds	r4, r0, r1
 801139a:	4620      	mov	r0, r4
 801139c:	f000 ff46 	bl	801222c <ucdr_alignment>
 80113a0:	2104      	movs	r1, #4
 80113a2:	4408      	add	r0, r1
 80113a4:	4404      	add	r4, r0
 80113a6:	4620      	mov	r0, r4
 80113a8:	f000 ff40 	bl	801222c <ucdr_alignment>
 80113ac:	3004      	adds	r0, #4
 80113ae:	4420      	add	r0, r4
 80113b0:	b002      	add	sp, #8
 80113b2:	bd10      	pop	{r4, pc}

080113b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 80113b4:	4800      	ldr	r0, [pc, #0]	@ (80113b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x4>)
 80113b6:	4770      	bx	lr
 80113b8:	24000d24 	.word	0x24000d24

080113bc <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 80113bc:	f001 bcac 	b.w	8012d18 <builtin_interfaces__msg__Time__init>

080113c0 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 80113c0:	f001 bcae 	b.w	8012d20 <builtin_interfaces__msg__Time__fini>

080113c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 80113c4:	4b04      	ldr	r3, [pc, #16]	@ (80113d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80113c6:	681a      	ldr	r2, [r3, #0]
 80113c8:	b10a      	cbz	r2, 80113ce <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 80113ca:	4803      	ldr	r0, [pc, #12]	@ (80113d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80113cc:	4770      	bx	lr
 80113ce:	4a03      	ldr	r2, [pc, #12]	@ (80113dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 80113d0:	4801      	ldr	r0, [pc, #4]	@ (80113d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80113d2:	6812      	ldr	r2, [r2, #0]
 80113d4:	601a      	str	r2, [r3, #0]
 80113d6:	4770      	bx	lr
 80113d8:	24000dc4 	.word	0x24000dc4
 80113dc:	24000e10 	.word	0x24000e10

080113e0 <get_serialized_size_builtin_interfaces__msg__Time>:
 80113e0:	b180      	cbz	r0, 8011404 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 80113e2:	b538      	push	{r3, r4, r5, lr}
 80113e4:	460d      	mov	r5, r1
 80113e6:	2104      	movs	r1, #4
 80113e8:	4628      	mov	r0, r5
 80113ea:	f000 ff1f 	bl	801222c <ucdr_alignment>
 80113ee:	1d2b      	adds	r3, r5, #4
 80113f0:	f1c5 0504 	rsb	r5, r5, #4
 80113f4:	2104      	movs	r1, #4
 80113f6:	181c      	adds	r4, r3, r0
 80113f8:	4620      	mov	r0, r4
 80113fa:	f000 ff17 	bl	801222c <ucdr_alignment>
 80113fe:	4428      	add	r0, r5
 8011400:	4420      	add	r0, r4
 8011402:	bd38      	pop	{r3, r4, r5, pc}
 8011404:	4770      	bx	lr
 8011406:	bf00      	nop

08011408 <_Time__cdr_deserialize>:
 8011408:	b538      	push	{r3, r4, r5, lr}
 801140a:	460c      	mov	r4, r1
 801140c:	b141      	cbz	r1, 8011420 <_Time__cdr_deserialize+0x18>
 801140e:	4605      	mov	r5, r0
 8011410:	f000 fb96 	bl	8011b40 <ucdr_deserialize_int32_t>
 8011414:	1d21      	adds	r1, r4, #4
 8011416:	4628      	mov	r0, r5
 8011418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801141c:	f000 b9d2 	b.w	80117c4 <ucdr_deserialize_uint32_t>
 8011420:	4608      	mov	r0, r1
 8011422:	bd38      	pop	{r3, r4, r5, pc}

08011424 <_Time__cdr_serialize>:
 8011424:	b160      	cbz	r0, 8011440 <_Time__cdr_serialize+0x1c>
 8011426:	b538      	push	{r3, r4, r5, lr}
 8011428:	460d      	mov	r5, r1
 801142a:	4604      	mov	r4, r0
 801142c:	6801      	ldr	r1, [r0, #0]
 801142e:	4628      	mov	r0, r5
 8011430:	f000 faee 	bl	8011a10 <ucdr_serialize_int32_t>
 8011434:	6861      	ldr	r1, [r4, #4]
 8011436:	4628      	mov	r0, r5
 8011438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801143c:	f000 b892 	b.w	8011564 <ucdr_serialize_uint32_t>
 8011440:	4770      	bx	lr
 8011442:	bf00      	nop

08011444 <_Time__get_serialized_size>:
 8011444:	b160      	cbz	r0, 8011460 <_Time__get_serialized_size+0x1c>
 8011446:	2104      	movs	r1, #4
 8011448:	2000      	movs	r0, #0
 801144a:	b510      	push	{r4, lr}
 801144c:	f000 feee 	bl	801222c <ucdr_alignment>
 8011450:	2104      	movs	r1, #4
 8011452:	1844      	adds	r4, r0, r1
 8011454:	4620      	mov	r0, r4
 8011456:	f000 fee9 	bl	801222c <ucdr_alignment>
 801145a:	3004      	adds	r0, #4
 801145c:	4420      	add	r0, r4
 801145e:	bd10      	pop	{r4, pc}
 8011460:	4770      	bx	lr
 8011462:	bf00      	nop

08011464 <_Time__max_serialized_size>:
 8011464:	b510      	push	{r4, lr}
 8011466:	2104      	movs	r1, #4
 8011468:	2000      	movs	r0, #0
 801146a:	f000 fedf 	bl	801222c <ucdr_alignment>
 801146e:	2104      	movs	r1, #4
 8011470:	1844      	adds	r4, r0, r1
 8011472:	4620      	mov	r0, r4
 8011474:	f000 feda 	bl	801222c <ucdr_alignment>
 8011478:	3004      	adds	r0, #4
 801147a:	4420      	add	r0, r4
 801147c:	bd10      	pop	{r4, pc}
 801147e:	bf00      	nop

08011480 <max_serialized_size_builtin_interfaces__msg__Time>:
 8011480:	b538      	push	{r3, r4, r5, lr}
 8011482:	460c      	mov	r4, r1
 8011484:	2301      	movs	r3, #1
 8011486:	2104      	movs	r1, #4
 8011488:	1d25      	adds	r5, r4, #4
 801148a:	7003      	strb	r3, [r0, #0]
 801148c:	4620      	mov	r0, r4
 801148e:	f1c4 0404 	rsb	r4, r4, #4
 8011492:	f000 fecb 	bl	801222c <ucdr_alignment>
 8011496:	4405      	add	r5, r0
 8011498:	2104      	movs	r1, #4
 801149a:	4628      	mov	r0, r5
 801149c:	f000 fec6 	bl	801222c <ucdr_alignment>
 80114a0:	4420      	add	r0, r4
 80114a2:	4428      	add	r0, r5
 80114a4:	bd38      	pop	{r3, r4, r5, pc}
 80114a6:	bf00      	nop

080114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 80114a8:	4800      	ldr	r0, [pc, #0]	@ (80114ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 80114aa:	4770      	bx	lr
 80114ac:	24000dd0 	.word	0x24000dd0

080114b0 <ucdr_serialize_bool>:
 80114b0:	b538      	push	{r3, r4, r5, lr}
 80114b2:	460d      	mov	r5, r1
 80114b4:	2101      	movs	r1, #1
 80114b6:	4604      	mov	r4, r0
 80114b8:	f000 fe9c 	bl	80121f4 <ucdr_check_final_buffer_behavior>
 80114bc:	b148      	cbz	r0, 80114d2 <ucdr_serialize_bool+0x22>
 80114be:	68a3      	ldr	r3, [r4, #8]
 80114c0:	2101      	movs	r1, #1
 80114c2:	701d      	strb	r5, [r3, #0]
 80114c4:	68a2      	ldr	r2, [r4, #8]
 80114c6:	6923      	ldr	r3, [r4, #16]
 80114c8:	440a      	add	r2, r1
 80114ca:	7561      	strb	r1, [r4, #21]
 80114cc:	440b      	add	r3, r1
 80114ce:	60a2      	str	r2, [r4, #8]
 80114d0:	6123      	str	r3, [r4, #16]
 80114d2:	7da0      	ldrb	r0, [r4, #22]
 80114d4:	f080 0001 	eor.w	r0, r0, #1
 80114d8:	bd38      	pop	{r3, r4, r5, pc}
 80114da:	bf00      	nop

080114dc <ucdr_deserialize_bool>:
 80114dc:	b538      	push	{r3, r4, r5, lr}
 80114de:	460d      	mov	r5, r1
 80114e0:	2101      	movs	r1, #1
 80114e2:	4604      	mov	r4, r0
 80114e4:	f000 fe86 	bl	80121f4 <ucdr_check_final_buffer_behavior>
 80114e8:	b160      	cbz	r0, 8011504 <ucdr_deserialize_bool+0x28>
 80114ea:	68a2      	ldr	r2, [r4, #8]
 80114ec:	2101      	movs	r1, #1
 80114ee:	6923      	ldr	r3, [r4, #16]
 80114f0:	f812 0b01 	ldrb.w	r0, [r2], #1
 80114f4:	440b      	add	r3, r1
 80114f6:	3800      	subs	r0, #0
 80114f8:	bf18      	it	ne
 80114fa:	2001      	movne	r0, #1
 80114fc:	7028      	strb	r0, [r5, #0]
 80114fe:	60a2      	str	r2, [r4, #8]
 8011500:	6123      	str	r3, [r4, #16]
 8011502:	7561      	strb	r1, [r4, #21]
 8011504:	7da0      	ldrb	r0, [r4, #22]
 8011506:	f080 0001 	eor.w	r0, r0, #1
 801150a:	bd38      	pop	{r3, r4, r5, pc}

0801150c <ucdr_serialize_uint8_t>:
 801150c:	b538      	push	{r3, r4, r5, lr}
 801150e:	460d      	mov	r5, r1
 8011510:	2101      	movs	r1, #1
 8011512:	4604      	mov	r4, r0
 8011514:	f000 fe6e 	bl	80121f4 <ucdr_check_final_buffer_behavior>
 8011518:	b148      	cbz	r0, 801152e <ucdr_serialize_uint8_t+0x22>
 801151a:	68a3      	ldr	r3, [r4, #8]
 801151c:	2101      	movs	r1, #1
 801151e:	701d      	strb	r5, [r3, #0]
 8011520:	68a2      	ldr	r2, [r4, #8]
 8011522:	6923      	ldr	r3, [r4, #16]
 8011524:	440a      	add	r2, r1
 8011526:	7561      	strb	r1, [r4, #21]
 8011528:	440b      	add	r3, r1
 801152a:	60a2      	str	r2, [r4, #8]
 801152c:	6123      	str	r3, [r4, #16]
 801152e:	7da0      	ldrb	r0, [r4, #22]
 8011530:	f080 0001 	eor.w	r0, r0, #1
 8011534:	bd38      	pop	{r3, r4, r5, pc}
 8011536:	bf00      	nop

08011538 <ucdr_deserialize_uint8_t>:
 8011538:	b538      	push	{r3, r4, r5, lr}
 801153a:	460d      	mov	r5, r1
 801153c:	2101      	movs	r1, #1
 801153e:	4604      	mov	r4, r0
 8011540:	f000 fe58 	bl	80121f4 <ucdr_check_final_buffer_behavior>
 8011544:	b150      	cbz	r0, 801155c <ucdr_deserialize_uint8_t+0x24>
 8011546:	68a3      	ldr	r3, [r4, #8]
 8011548:	2101      	movs	r1, #1
 801154a:	781b      	ldrb	r3, [r3, #0]
 801154c:	702b      	strb	r3, [r5, #0]
 801154e:	68a2      	ldr	r2, [r4, #8]
 8011550:	6923      	ldr	r3, [r4, #16]
 8011552:	440a      	add	r2, r1
 8011554:	7561      	strb	r1, [r4, #21]
 8011556:	440b      	add	r3, r1
 8011558:	60a2      	str	r2, [r4, #8]
 801155a:	6123      	str	r3, [r4, #16]
 801155c:	7da0      	ldrb	r0, [r4, #22]
 801155e:	f080 0001 	eor.w	r0, r0, #1
 8011562:	bd38      	pop	{r3, r4, r5, pc}

08011564 <ucdr_serialize_uint32_t>:
 8011564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011568:	b082      	sub	sp, #8
 801156a:	4604      	mov	r4, r0
 801156c:	9101      	str	r1, [sp, #4]
 801156e:	2104      	movs	r1, #4
 8011570:	f000 fe64 	bl	801223c <ucdr_buffer_alignment>
 8011574:	4601      	mov	r1, r0
 8011576:	4620      	mov	r0, r4
 8011578:	7d67      	ldrb	r7, [r4, #21]
 801157a:	f000 fea3 	bl	80122c4 <ucdr_advance_buffer>
 801157e:	2104      	movs	r1, #4
 8011580:	4620      	mov	r0, r4
 8011582:	f000 fe2b 	bl	80121dc <ucdr_check_buffer_available_for>
 8011586:	2800      	cmp	r0, #0
 8011588:	d139      	bne.n	80115fe <ucdr_serialize_uint32_t+0x9a>
 801158a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801158e:	42ab      	cmp	r3, r5
 8011590:	d930      	bls.n	80115f4 <ucdr_serialize_uint32_t+0x90>
 8011592:	1b5e      	subs	r6, r3, r5
 8011594:	60a3      	str	r3, [r4, #8]
 8011596:	6923      	ldr	r3, [r4, #16]
 8011598:	4620      	mov	r0, r4
 801159a:	f1c6 0804 	rsb	r8, r6, #4
 801159e:	4433      	add	r3, r6
 80115a0:	4641      	mov	r1, r8
 80115a2:	6123      	str	r3, [r4, #16]
 80115a4:	f000 fe26 	bl	80121f4 <ucdr_check_final_buffer_behavior>
 80115a8:	2800      	cmp	r0, #0
 80115aa:	d04c      	beq.n	8011646 <ucdr_serialize_uint32_t+0xe2>
 80115ac:	7d23      	ldrb	r3, [r4, #20]
 80115ae:	2b01      	cmp	r3, #1
 80115b0:	d063      	beq.n	801167a <ucdr_serialize_uint32_t+0x116>
 80115b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80115b6:	702b      	strb	r3, [r5, #0]
 80115b8:	2e00      	cmp	r6, #0
 80115ba:	d051      	beq.n	8011660 <ucdr_serialize_uint32_t+0xfc>
 80115bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80115c0:	2e01      	cmp	r6, #1
 80115c2:	706b      	strb	r3, [r5, #1]
 80115c4:	d050      	beq.n	8011668 <ucdr_serialize_uint32_t+0x104>
 80115c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80115ca:	2e02      	cmp	r6, #2
 80115cc:	70ab      	strb	r3, [r5, #2]
 80115ce:	d04f      	beq.n	8011670 <ucdr_serialize_uint32_t+0x10c>
 80115d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80115d4:	70eb      	strb	r3, [r5, #3]
 80115d6:	6923      	ldr	r3, [r4, #16]
 80115d8:	2104      	movs	r1, #4
 80115da:	68a2      	ldr	r2, [r4, #8]
 80115dc:	3304      	adds	r3, #4
 80115de:	7da0      	ldrb	r0, [r4, #22]
 80115e0:	4442      	add	r2, r8
 80115e2:	7561      	strb	r1, [r4, #21]
 80115e4:	1b9e      	subs	r6, r3, r6
 80115e6:	f080 0001 	eor.w	r0, r0, #1
 80115ea:	60a2      	str	r2, [r4, #8]
 80115ec:	6126      	str	r6, [r4, #16]
 80115ee:	b002      	add	sp, #8
 80115f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115f4:	2104      	movs	r1, #4
 80115f6:	4620      	mov	r0, r4
 80115f8:	f000 fdfc 	bl	80121f4 <ucdr_check_final_buffer_behavior>
 80115fc:	b1d0      	cbz	r0, 8011634 <ucdr_serialize_uint32_t+0xd0>
 80115fe:	7d23      	ldrb	r3, [r4, #20]
 8011600:	2b01      	cmp	r3, #1
 8011602:	68a3      	ldr	r3, [r4, #8]
 8011604:	d01c      	beq.n	8011640 <ucdr_serialize_uint32_t+0xdc>
 8011606:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801160a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801160e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011612:	7018      	strb	r0, [r3, #0]
 8011614:	68a3      	ldr	r3, [r4, #8]
 8011616:	705a      	strb	r2, [r3, #1]
 8011618:	68a3      	ldr	r3, [r4, #8]
 801161a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801161e:	7099      	strb	r1, [r3, #2]
 8011620:	68a3      	ldr	r3, [r4, #8]
 8011622:	70da      	strb	r2, [r3, #3]
 8011624:	2104      	movs	r1, #4
 8011626:	68a2      	ldr	r2, [r4, #8]
 8011628:	6923      	ldr	r3, [r4, #16]
 801162a:	440a      	add	r2, r1
 801162c:	7561      	strb	r1, [r4, #21]
 801162e:	440b      	add	r3, r1
 8011630:	60a2      	str	r2, [r4, #8]
 8011632:	6123      	str	r3, [r4, #16]
 8011634:	7da0      	ldrb	r0, [r4, #22]
 8011636:	f080 0001 	eor.w	r0, r0, #1
 801163a:	b002      	add	sp, #8
 801163c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011640:	9a01      	ldr	r2, [sp, #4]
 8011642:	601a      	str	r2, [r3, #0]
 8011644:	e7ee      	b.n	8011624 <ucdr_serialize_uint32_t+0xc0>
 8011646:	68a2      	ldr	r2, [r4, #8]
 8011648:	6923      	ldr	r3, [r4, #16]
 801164a:	7da0      	ldrb	r0, [r4, #22]
 801164c:	1b92      	subs	r2, r2, r6
 801164e:	1b9b      	subs	r3, r3, r6
 8011650:	7567      	strb	r7, [r4, #21]
 8011652:	f080 0001 	eor.w	r0, r0, #1
 8011656:	60a2      	str	r2, [r4, #8]
 8011658:	6123      	str	r3, [r4, #16]
 801165a:	b002      	add	sp, #8
 801165c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011660:	68a3      	ldr	r3, [r4, #8]
 8011662:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011666:	701a      	strb	r2, [r3, #0]
 8011668:	68a3      	ldr	r3, [r4, #8]
 801166a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801166e:	701a      	strb	r2, [r3, #0]
 8011670:	68a3      	ldr	r3, [r4, #8]
 8011672:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011676:	701a      	strb	r2, [r3, #0]
 8011678:	e7ad      	b.n	80115d6 <ucdr_serialize_uint32_t+0x72>
 801167a:	4628      	mov	r0, r5
 801167c:	ad01      	add	r5, sp, #4
 801167e:	4632      	mov	r2, r6
 8011680:	4629      	mov	r1, r5
 8011682:	f002 fa3a 	bl	8013afa <memcpy>
 8011686:	4642      	mov	r2, r8
 8011688:	19a9      	adds	r1, r5, r6
 801168a:	68a0      	ldr	r0, [r4, #8]
 801168c:	f002 fa35 	bl	8013afa <memcpy>
 8011690:	e7a1      	b.n	80115d6 <ucdr_serialize_uint32_t+0x72>
 8011692:	bf00      	nop

08011694 <ucdr_serialize_endian_uint32_t>:
 8011694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011698:	4604      	mov	r4, r0
 801169a:	b083      	sub	sp, #12
 801169c:	460d      	mov	r5, r1
 801169e:	2104      	movs	r1, #4
 80116a0:	9201      	str	r2, [sp, #4]
 80116a2:	f000 fdcb 	bl	801223c <ucdr_buffer_alignment>
 80116a6:	4601      	mov	r1, r0
 80116a8:	4620      	mov	r0, r4
 80116aa:	f894 8015 	ldrb.w	r8, [r4, #21]
 80116ae:	f000 fe09 	bl	80122c4 <ucdr_advance_buffer>
 80116b2:	2104      	movs	r1, #4
 80116b4:	4620      	mov	r0, r4
 80116b6:	f000 fd91 	bl	80121dc <ucdr_check_buffer_available_for>
 80116ba:	2800      	cmp	r0, #0
 80116bc:	d138      	bne.n	8011730 <ucdr_serialize_endian_uint32_t+0x9c>
 80116be:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80116c2:	42b7      	cmp	r7, r6
 80116c4:	d92f      	bls.n	8011726 <ucdr_serialize_endian_uint32_t+0x92>
 80116c6:	6923      	ldr	r3, [r4, #16]
 80116c8:	4620      	mov	r0, r4
 80116ca:	60a7      	str	r7, [r4, #8]
 80116cc:	1bbf      	subs	r7, r7, r6
 80116ce:	443b      	add	r3, r7
 80116d0:	f1c7 0904 	rsb	r9, r7, #4
 80116d4:	6123      	str	r3, [r4, #16]
 80116d6:	4649      	mov	r1, r9
 80116d8:	f000 fd8c 	bl	80121f4 <ucdr_check_final_buffer_behavior>
 80116dc:	2800      	cmp	r0, #0
 80116de:	d04a      	beq.n	8011776 <ucdr_serialize_endian_uint32_t+0xe2>
 80116e0:	2d01      	cmp	r5, #1
 80116e2:	d063      	beq.n	80117ac <ucdr_serialize_endian_uint32_t+0x118>
 80116e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80116e8:	7033      	strb	r3, [r6, #0]
 80116ea:	2f00      	cmp	r7, #0
 80116ec:	d051      	beq.n	8011792 <ucdr_serialize_endian_uint32_t+0xfe>
 80116ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80116f2:	2f01      	cmp	r7, #1
 80116f4:	7073      	strb	r3, [r6, #1]
 80116f6:	d050      	beq.n	801179a <ucdr_serialize_endian_uint32_t+0x106>
 80116f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80116fc:	2f02      	cmp	r7, #2
 80116fe:	70b3      	strb	r3, [r6, #2]
 8011700:	d04f      	beq.n	80117a2 <ucdr_serialize_endian_uint32_t+0x10e>
 8011702:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011706:	70f3      	strb	r3, [r6, #3]
 8011708:	6923      	ldr	r3, [r4, #16]
 801170a:	2104      	movs	r1, #4
 801170c:	68a2      	ldr	r2, [r4, #8]
 801170e:	7da0      	ldrb	r0, [r4, #22]
 8011710:	3304      	adds	r3, #4
 8011712:	444a      	add	r2, r9
 8011714:	7561      	strb	r1, [r4, #21]
 8011716:	1bdb      	subs	r3, r3, r7
 8011718:	f080 0001 	eor.w	r0, r0, #1
 801171c:	60a2      	str	r2, [r4, #8]
 801171e:	6123      	str	r3, [r4, #16]
 8011720:	b003      	add	sp, #12
 8011722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011726:	2104      	movs	r1, #4
 8011728:	4620      	mov	r0, r4
 801172a:	f000 fd63 	bl	80121f4 <ucdr_check_final_buffer_behavior>
 801172e:	b1c8      	cbz	r0, 8011764 <ucdr_serialize_endian_uint32_t+0xd0>
 8011730:	2d01      	cmp	r5, #1
 8011732:	68a3      	ldr	r3, [r4, #8]
 8011734:	d01c      	beq.n	8011770 <ucdr_serialize_endian_uint32_t+0xdc>
 8011736:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801173a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801173e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011742:	7018      	strb	r0, [r3, #0]
 8011744:	68a3      	ldr	r3, [r4, #8]
 8011746:	705a      	strb	r2, [r3, #1]
 8011748:	68a3      	ldr	r3, [r4, #8]
 801174a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801174e:	7099      	strb	r1, [r3, #2]
 8011750:	68a3      	ldr	r3, [r4, #8]
 8011752:	70da      	strb	r2, [r3, #3]
 8011754:	2104      	movs	r1, #4
 8011756:	68a2      	ldr	r2, [r4, #8]
 8011758:	6923      	ldr	r3, [r4, #16]
 801175a:	440a      	add	r2, r1
 801175c:	7561      	strb	r1, [r4, #21]
 801175e:	440b      	add	r3, r1
 8011760:	60a2      	str	r2, [r4, #8]
 8011762:	6123      	str	r3, [r4, #16]
 8011764:	7da0      	ldrb	r0, [r4, #22]
 8011766:	f080 0001 	eor.w	r0, r0, #1
 801176a:	b003      	add	sp, #12
 801176c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011770:	9a01      	ldr	r2, [sp, #4]
 8011772:	601a      	str	r2, [r3, #0]
 8011774:	e7ee      	b.n	8011754 <ucdr_serialize_endian_uint32_t+0xc0>
 8011776:	68a2      	ldr	r2, [r4, #8]
 8011778:	6923      	ldr	r3, [r4, #16]
 801177a:	7da0      	ldrb	r0, [r4, #22]
 801177c:	1bd2      	subs	r2, r2, r7
 801177e:	1bdb      	subs	r3, r3, r7
 8011780:	f884 8015 	strb.w	r8, [r4, #21]
 8011784:	f080 0001 	eor.w	r0, r0, #1
 8011788:	60a2      	str	r2, [r4, #8]
 801178a:	6123      	str	r3, [r4, #16]
 801178c:	b003      	add	sp, #12
 801178e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011792:	68a3      	ldr	r3, [r4, #8]
 8011794:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011798:	701a      	strb	r2, [r3, #0]
 801179a:	68a3      	ldr	r3, [r4, #8]
 801179c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80117a0:	701a      	strb	r2, [r3, #0]
 80117a2:	68a3      	ldr	r3, [r4, #8]
 80117a4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80117a8:	701a      	strb	r2, [r3, #0]
 80117aa:	e7ad      	b.n	8011708 <ucdr_serialize_endian_uint32_t+0x74>
 80117ac:	ad01      	add	r5, sp, #4
 80117ae:	463a      	mov	r2, r7
 80117b0:	4630      	mov	r0, r6
 80117b2:	4629      	mov	r1, r5
 80117b4:	f002 f9a1 	bl	8013afa <memcpy>
 80117b8:	464a      	mov	r2, r9
 80117ba:	19e9      	adds	r1, r5, r7
 80117bc:	68a0      	ldr	r0, [r4, #8]
 80117be:	f002 f99c 	bl	8013afa <memcpy>
 80117c2:	e7a1      	b.n	8011708 <ucdr_serialize_endian_uint32_t+0x74>

080117c4 <ucdr_deserialize_uint32_t>:
 80117c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117c8:	4604      	mov	r4, r0
 80117ca:	460d      	mov	r5, r1
 80117cc:	2104      	movs	r1, #4
 80117ce:	f000 fd35 	bl	801223c <ucdr_buffer_alignment>
 80117d2:	4601      	mov	r1, r0
 80117d4:	4620      	mov	r0, r4
 80117d6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80117da:	f000 fd73 	bl	80122c4 <ucdr_advance_buffer>
 80117de:	2104      	movs	r1, #4
 80117e0:	4620      	mov	r0, r4
 80117e2:	f000 fcfb 	bl	80121dc <ucdr_check_buffer_available_for>
 80117e6:	2800      	cmp	r0, #0
 80117e8:	d138      	bne.n	801185c <ucdr_deserialize_uint32_t+0x98>
 80117ea:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80117ee:	42b7      	cmp	r7, r6
 80117f0:	d92f      	bls.n	8011852 <ucdr_deserialize_uint32_t+0x8e>
 80117f2:	6923      	ldr	r3, [r4, #16]
 80117f4:	4620      	mov	r0, r4
 80117f6:	60a7      	str	r7, [r4, #8]
 80117f8:	1bbf      	subs	r7, r7, r6
 80117fa:	443b      	add	r3, r7
 80117fc:	f1c7 0904 	rsb	r9, r7, #4
 8011800:	6123      	str	r3, [r4, #16]
 8011802:	4649      	mov	r1, r9
 8011804:	f000 fcf6 	bl	80121f4 <ucdr_check_final_buffer_behavior>
 8011808:	2800      	cmp	r0, #0
 801180a:	d046      	beq.n	801189a <ucdr_deserialize_uint32_t+0xd6>
 801180c:	7d23      	ldrb	r3, [r4, #20]
 801180e:	2b01      	cmp	r3, #1
 8011810:	d05c      	beq.n	80118cc <ucdr_deserialize_uint32_t+0x108>
 8011812:	78f3      	ldrb	r3, [r6, #3]
 8011814:	702b      	strb	r3, [r5, #0]
 8011816:	2f00      	cmp	r7, #0
 8011818:	d04c      	beq.n	80118b4 <ucdr_deserialize_uint32_t+0xf0>
 801181a:	78b3      	ldrb	r3, [r6, #2]
 801181c:	2f01      	cmp	r7, #1
 801181e:	706b      	strb	r3, [r5, #1]
 8011820:	f105 0302 	add.w	r3, r5, #2
 8011824:	d04a      	beq.n	80118bc <ucdr_deserialize_uint32_t+0xf8>
 8011826:	7873      	ldrb	r3, [r6, #1]
 8011828:	2f02      	cmp	r7, #2
 801182a:	70ab      	strb	r3, [r5, #2]
 801182c:	f105 0303 	add.w	r3, r5, #3
 8011830:	d048      	beq.n	80118c4 <ucdr_deserialize_uint32_t+0x100>
 8011832:	7833      	ldrb	r3, [r6, #0]
 8011834:	70eb      	strb	r3, [r5, #3]
 8011836:	6923      	ldr	r3, [r4, #16]
 8011838:	2104      	movs	r1, #4
 801183a:	68a2      	ldr	r2, [r4, #8]
 801183c:	3304      	adds	r3, #4
 801183e:	7da0      	ldrb	r0, [r4, #22]
 8011840:	444a      	add	r2, r9
 8011842:	7561      	strb	r1, [r4, #21]
 8011844:	1bdb      	subs	r3, r3, r7
 8011846:	f080 0001 	eor.w	r0, r0, #1
 801184a:	60a2      	str	r2, [r4, #8]
 801184c:	6123      	str	r3, [r4, #16]
 801184e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011852:	2104      	movs	r1, #4
 8011854:	4620      	mov	r0, r4
 8011856:	f000 fccd 	bl	80121f4 <ucdr_check_final_buffer_behavior>
 801185a:	b1b0      	cbz	r0, 801188a <ucdr_deserialize_uint32_t+0xc6>
 801185c:	7d23      	ldrb	r3, [r4, #20]
 801185e:	2b01      	cmp	r3, #1
 8011860:	68a3      	ldr	r3, [r4, #8]
 8011862:	d017      	beq.n	8011894 <ucdr_deserialize_uint32_t+0xd0>
 8011864:	78db      	ldrb	r3, [r3, #3]
 8011866:	702b      	strb	r3, [r5, #0]
 8011868:	68a3      	ldr	r3, [r4, #8]
 801186a:	789b      	ldrb	r3, [r3, #2]
 801186c:	706b      	strb	r3, [r5, #1]
 801186e:	68a3      	ldr	r3, [r4, #8]
 8011870:	785b      	ldrb	r3, [r3, #1]
 8011872:	70ab      	strb	r3, [r5, #2]
 8011874:	68a3      	ldr	r3, [r4, #8]
 8011876:	781b      	ldrb	r3, [r3, #0]
 8011878:	70eb      	strb	r3, [r5, #3]
 801187a:	2104      	movs	r1, #4
 801187c:	68a2      	ldr	r2, [r4, #8]
 801187e:	6923      	ldr	r3, [r4, #16]
 8011880:	440a      	add	r2, r1
 8011882:	7561      	strb	r1, [r4, #21]
 8011884:	440b      	add	r3, r1
 8011886:	60a2      	str	r2, [r4, #8]
 8011888:	6123      	str	r3, [r4, #16]
 801188a:	7da0      	ldrb	r0, [r4, #22]
 801188c:	f080 0001 	eor.w	r0, r0, #1
 8011890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	602b      	str	r3, [r5, #0]
 8011898:	e7ef      	b.n	801187a <ucdr_deserialize_uint32_t+0xb6>
 801189a:	68a2      	ldr	r2, [r4, #8]
 801189c:	6923      	ldr	r3, [r4, #16]
 801189e:	1bd2      	subs	r2, r2, r7
 80118a0:	7da0      	ldrb	r0, [r4, #22]
 80118a2:	1bdb      	subs	r3, r3, r7
 80118a4:	f884 8015 	strb.w	r8, [r4, #21]
 80118a8:	f080 0001 	eor.w	r0, r0, #1
 80118ac:	60a2      	str	r2, [r4, #8]
 80118ae:	6123      	str	r3, [r4, #16]
 80118b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118b4:	68a3      	ldr	r3, [r4, #8]
 80118b6:	789b      	ldrb	r3, [r3, #2]
 80118b8:	706b      	strb	r3, [r5, #1]
 80118ba:	1cab      	adds	r3, r5, #2
 80118bc:	68a2      	ldr	r2, [r4, #8]
 80118be:	7852      	ldrb	r2, [r2, #1]
 80118c0:	f803 2b01 	strb.w	r2, [r3], #1
 80118c4:	68a2      	ldr	r2, [r4, #8]
 80118c6:	7812      	ldrb	r2, [r2, #0]
 80118c8:	701a      	strb	r2, [r3, #0]
 80118ca:	e7b4      	b.n	8011836 <ucdr_deserialize_uint32_t+0x72>
 80118cc:	4631      	mov	r1, r6
 80118ce:	463a      	mov	r2, r7
 80118d0:	4628      	mov	r0, r5
 80118d2:	f002 f912 	bl	8013afa <memcpy>
 80118d6:	464a      	mov	r2, r9
 80118d8:	19e8      	adds	r0, r5, r7
 80118da:	68a1      	ldr	r1, [r4, #8]
 80118dc:	f002 f90d 	bl	8013afa <memcpy>
 80118e0:	e7a9      	b.n	8011836 <ucdr_deserialize_uint32_t+0x72>
 80118e2:	bf00      	nop

080118e4 <ucdr_deserialize_endian_uint32_t>:
 80118e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118e8:	4604      	mov	r4, r0
 80118ea:	460e      	mov	r6, r1
 80118ec:	2104      	movs	r1, #4
 80118ee:	4615      	mov	r5, r2
 80118f0:	f000 fca4 	bl	801223c <ucdr_buffer_alignment>
 80118f4:	4601      	mov	r1, r0
 80118f6:	4620      	mov	r0, r4
 80118f8:	f894 8015 	ldrb.w	r8, [r4, #21]
 80118fc:	f000 fce2 	bl	80122c4 <ucdr_advance_buffer>
 8011900:	2104      	movs	r1, #4
 8011902:	4620      	mov	r0, r4
 8011904:	f000 fc6a 	bl	80121dc <ucdr_check_buffer_available_for>
 8011908:	2800      	cmp	r0, #0
 801190a:	d13c      	bne.n	8011986 <ucdr_deserialize_endian_uint32_t+0xa2>
 801190c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8011910:	42bb      	cmp	r3, r7
 8011912:	d933      	bls.n	801197c <ucdr_deserialize_endian_uint32_t+0x98>
 8011914:	eba3 0907 	sub.w	r9, r3, r7
 8011918:	60a3      	str	r3, [r4, #8]
 801191a:	6923      	ldr	r3, [r4, #16]
 801191c:	4620      	mov	r0, r4
 801191e:	f1c9 0a04 	rsb	sl, r9, #4
 8011922:	444b      	add	r3, r9
 8011924:	4651      	mov	r1, sl
 8011926:	6123      	str	r3, [r4, #16]
 8011928:	f000 fc64 	bl	80121f4 <ucdr_check_final_buffer_behavior>
 801192c:	2800      	cmp	r0, #0
 801192e:	d048      	beq.n	80119c2 <ucdr_deserialize_endian_uint32_t+0xde>
 8011930:	2e01      	cmp	r6, #1
 8011932:	d061      	beq.n	80119f8 <ucdr_deserialize_endian_uint32_t+0x114>
 8011934:	78fb      	ldrb	r3, [r7, #3]
 8011936:	702b      	strb	r3, [r5, #0]
 8011938:	f1b9 0f00 	cmp.w	r9, #0
 801193c:	d050      	beq.n	80119e0 <ucdr_deserialize_endian_uint32_t+0xfc>
 801193e:	78bb      	ldrb	r3, [r7, #2]
 8011940:	f1b9 0f01 	cmp.w	r9, #1
 8011944:	706b      	strb	r3, [r5, #1]
 8011946:	f105 0302 	add.w	r3, r5, #2
 801194a:	d04d      	beq.n	80119e8 <ucdr_deserialize_endian_uint32_t+0x104>
 801194c:	787b      	ldrb	r3, [r7, #1]
 801194e:	f1b9 0f02 	cmp.w	r9, #2
 8011952:	70ab      	strb	r3, [r5, #2]
 8011954:	f105 0303 	add.w	r3, r5, #3
 8011958:	d04a      	beq.n	80119f0 <ucdr_deserialize_endian_uint32_t+0x10c>
 801195a:	783b      	ldrb	r3, [r7, #0]
 801195c:	70eb      	strb	r3, [r5, #3]
 801195e:	6923      	ldr	r3, [r4, #16]
 8011960:	2104      	movs	r1, #4
 8011962:	68a2      	ldr	r2, [r4, #8]
 8011964:	3304      	adds	r3, #4
 8011966:	7da0      	ldrb	r0, [r4, #22]
 8011968:	4452      	add	r2, sl
 801196a:	7561      	strb	r1, [r4, #21]
 801196c:	eba3 0309 	sub.w	r3, r3, r9
 8011970:	f080 0001 	eor.w	r0, r0, #1
 8011974:	60a2      	str	r2, [r4, #8]
 8011976:	6123      	str	r3, [r4, #16]
 8011978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801197c:	2104      	movs	r1, #4
 801197e:	4620      	mov	r0, r4
 8011980:	f000 fc38 	bl	80121f4 <ucdr_check_final_buffer_behavior>
 8011984:	b1a8      	cbz	r0, 80119b2 <ucdr_deserialize_endian_uint32_t+0xce>
 8011986:	2e01      	cmp	r6, #1
 8011988:	68a3      	ldr	r3, [r4, #8]
 801198a:	d017      	beq.n	80119bc <ucdr_deserialize_endian_uint32_t+0xd8>
 801198c:	78db      	ldrb	r3, [r3, #3]
 801198e:	702b      	strb	r3, [r5, #0]
 8011990:	68a3      	ldr	r3, [r4, #8]
 8011992:	789b      	ldrb	r3, [r3, #2]
 8011994:	706b      	strb	r3, [r5, #1]
 8011996:	68a3      	ldr	r3, [r4, #8]
 8011998:	785b      	ldrb	r3, [r3, #1]
 801199a:	70ab      	strb	r3, [r5, #2]
 801199c:	68a3      	ldr	r3, [r4, #8]
 801199e:	781b      	ldrb	r3, [r3, #0]
 80119a0:	70eb      	strb	r3, [r5, #3]
 80119a2:	2104      	movs	r1, #4
 80119a4:	68a2      	ldr	r2, [r4, #8]
 80119a6:	6923      	ldr	r3, [r4, #16]
 80119a8:	440a      	add	r2, r1
 80119aa:	7561      	strb	r1, [r4, #21]
 80119ac:	440b      	add	r3, r1
 80119ae:	60a2      	str	r2, [r4, #8]
 80119b0:	6123      	str	r3, [r4, #16]
 80119b2:	7da0      	ldrb	r0, [r4, #22]
 80119b4:	f080 0001 	eor.w	r0, r0, #1
 80119b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	602b      	str	r3, [r5, #0]
 80119c0:	e7ef      	b.n	80119a2 <ucdr_deserialize_endian_uint32_t+0xbe>
 80119c2:	68a2      	ldr	r2, [r4, #8]
 80119c4:	6923      	ldr	r3, [r4, #16]
 80119c6:	eba2 0209 	sub.w	r2, r2, r9
 80119ca:	7da0      	ldrb	r0, [r4, #22]
 80119cc:	eba3 0309 	sub.w	r3, r3, r9
 80119d0:	f884 8015 	strb.w	r8, [r4, #21]
 80119d4:	f080 0001 	eor.w	r0, r0, #1
 80119d8:	60a2      	str	r2, [r4, #8]
 80119da:	6123      	str	r3, [r4, #16]
 80119dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119e0:	68a3      	ldr	r3, [r4, #8]
 80119e2:	789b      	ldrb	r3, [r3, #2]
 80119e4:	706b      	strb	r3, [r5, #1]
 80119e6:	1cab      	adds	r3, r5, #2
 80119e8:	68a2      	ldr	r2, [r4, #8]
 80119ea:	7852      	ldrb	r2, [r2, #1]
 80119ec:	f803 2b01 	strb.w	r2, [r3], #1
 80119f0:	68a2      	ldr	r2, [r4, #8]
 80119f2:	7812      	ldrb	r2, [r2, #0]
 80119f4:	701a      	strb	r2, [r3, #0]
 80119f6:	e7b2      	b.n	801195e <ucdr_deserialize_endian_uint32_t+0x7a>
 80119f8:	4639      	mov	r1, r7
 80119fa:	464a      	mov	r2, r9
 80119fc:	4628      	mov	r0, r5
 80119fe:	f002 f87c 	bl	8013afa <memcpy>
 8011a02:	4652      	mov	r2, sl
 8011a04:	eb05 0009 	add.w	r0, r5, r9
 8011a08:	68a1      	ldr	r1, [r4, #8]
 8011a0a:	f002 f876 	bl	8013afa <memcpy>
 8011a0e:	e7a6      	b.n	801195e <ucdr_deserialize_endian_uint32_t+0x7a>

08011a10 <ucdr_serialize_int32_t>:
 8011a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a14:	b082      	sub	sp, #8
 8011a16:	4604      	mov	r4, r0
 8011a18:	9101      	str	r1, [sp, #4]
 8011a1a:	2104      	movs	r1, #4
 8011a1c:	f000 fc0e 	bl	801223c <ucdr_buffer_alignment>
 8011a20:	4601      	mov	r1, r0
 8011a22:	4620      	mov	r0, r4
 8011a24:	7d67      	ldrb	r7, [r4, #21]
 8011a26:	f000 fc4d 	bl	80122c4 <ucdr_advance_buffer>
 8011a2a:	2104      	movs	r1, #4
 8011a2c:	4620      	mov	r0, r4
 8011a2e:	f000 fbd5 	bl	80121dc <ucdr_check_buffer_available_for>
 8011a32:	2800      	cmp	r0, #0
 8011a34:	d139      	bne.n	8011aaa <ucdr_serialize_int32_t+0x9a>
 8011a36:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011a3a:	42ab      	cmp	r3, r5
 8011a3c:	d930      	bls.n	8011aa0 <ucdr_serialize_int32_t+0x90>
 8011a3e:	1b5e      	subs	r6, r3, r5
 8011a40:	60a3      	str	r3, [r4, #8]
 8011a42:	6923      	ldr	r3, [r4, #16]
 8011a44:	4620      	mov	r0, r4
 8011a46:	f1c6 0804 	rsb	r8, r6, #4
 8011a4a:	4433      	add	r3, r6
 8011a4c:	4641      	mov	r1, r8
 8011a4e:	6123      	str	r3, [r4, #16]
 8011a50:	f000 fbd0 	bl	80121f4 <ucdr_check_final_buffer_behavior>
 8011a54:	2800      	cmp	r0, #0
 8011a56:	d04c      	beq.n	8011af2 <ucdr_serialize_int32_t+0xe2>
 8011a58:	7d23      	ldrb	r3, [r4, #20]
 8011a5a:	2b01      	cmp	r3, #1
 8011a5c:	d063      	beq.n	8011b26 <ucdr_serialize_int32_t+0x116>
 8011a5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011a62:	702b      	strb	r3, [r5, #0]
 8011a64:	2e00      	cmp	r6, #0
 8011a66:	d051      	beq.n	8011b0c <ucdr_serialize_int32_t+0xfc>
 8011a68:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011a6c:	2e01      	cmp	r6, #1
 8011a6e:	706b      	strb	r3, [r5, #1]
 8011a70:	d050      	beq.n	8011b14 <ucdr_serialize_int32_t+0x104>
 8011a72:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011a76:	2e02      	cmp	r6, #2
 8011a78:	70ab      	strb	r3, [r5, #2]
 8011a7a:	d04f      	beq.n	8011b1c <ucdr_serialize_int32_t+0x10c>
 8011a7c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011a80:	70eb      	strb	r3, [r5, #3]
 8011a82:	6923      	ldr	r3, [r4, #16]
 8011a84:	2104      	movs	r1, #4
 8011a86:	68a2      	ldr	r2, [r4, #8]
 8011a88:	3304      	adds	r3, #4
 8011a8a:	7da0      	ldrb	r0, [r4, #22]
 8011a8c:	4442      	add	r2, r8
 8011a8e:	7561      	strb	r1, [r4, #21]
 8011a90:	1b9e      	subs	r6, r3, r6
 8011a92:	f080 0001 	eor.w	r0, r0, #1
 8011a96:	60a2      	str	r2, [r4, #8]
 8011a98:	6126      	str	r6, [r4, #16]
 8011a9a:	b002      	add	sp, #8
 8011a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011aa0:	2104      	movs	r1, #4
 8011aa2:	4620      	mov	r0, r4
 8011aa4:	f000 fba6 	bl	80121f4 <ucdr_check_final_buffer_behavior>
 8011aa8:	b1d0      	cbz	r0, 8011ae0 <ucdr_serialize_int32_t+0xd0>
 8011aaa:	7d23      	ldrb	r3, [r4, #20]
 8011aac:	2b01      	cmp	r3, #1
 8011aae:	68a3      	ldr	r3, [r4, #8]
 8011ab0:	d01c      	beq.n	8011aec <ucdr_serialize_int32_t+0xdc>
 8011ab2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011ab6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011aba:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011abe:	7018      	strb	r0, [r3, #0]
 8011ac0:	68a3      	ldr	r3, [r4, #8]
 8011ac2:	705a      	strb	r2, [r3, #1]
 8011ac4:	68a3      	ldr	r3, [r4, #8]
 8011ac6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011aca:	7099      	strb	r1, [r3, #2]
 8011acc:	68a3      	ldr	r3, [r4, #8]
 8011ace:	70da      	strb	r2, [r3, #3]
 8011ad0:	2104      	movs	r1, #4
 8011ad2:	68a2      	ldr	r2, [r4, #8]
 8011ad4:	6923      	ldr	r3, [r4, #16]
 8011ad6:	440a      	add	r2, r1
 8011ad8:	7561      	strb	r1, [r4, #21]
 8011ada:	440b      	add	r3, r1
 8011adc:	60a2      	str	r2, [r4, #8]
 8011ade:	6123      	str	r3, [r4, #16]
 8011ae0:	7da0      	ldrb	r0, [r4, #22]
 8011ae2:	f080 0001 	eor.w	r0, r0, #1
 8011ae6:	b002      	add	sp, #8
 8011ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011aec:	9a01      	ldr	r2, [sp, #4]
 8011aee:	601a      	str	r2, [r3, #0]
 8011af0:	e7ee      	b.n	8011ad0 <ucdr_serialize_int32_t+0xc0>
 8011af2:	68a2      	ldr	r2, [r4, #8]
 8011af4:	6923      	ldr	r3, [r4, #16]
 8011af6:	7da0      	ldrb	r0, [r4, #22]
 8011af8:	1b92      	subs	r2, r2, r6
 8011afa:	1b9b      	subs	r3, r3, r6
 8011afc:	7567      	strb	r7, [r4, #21]
 8011afe:	f080 0001 	eor.w	r0, r0, #1
 8011b02:	60a2      	str	r2, [r4, #8]
 8011b04:	6123      	str	r3, [r4, #16]
 8011b06:	b002      	add	sp, #8
 8011b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b0c:	68a3      	ldr	r3, [r4, #8]
 8011b0e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011b12:	701a      	strb	r2, [r3, #0]
 8011b14:	68a3      	ldr	r3, [r4, #8]
 8011b16:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011b1a:	701a      	strb	r2, [r3, #0]
 8011b1c:	68a3      	ldr	r3, [r4, #8]
 8011b1e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011b22:	701a      	strb	r2, [r3, #0]
 8011b24:	e7ad      	b.n	8011a82 <ucdr_serialize_int32_t+0x72>
 8011b26:	4628      	mov	r0, r5
 8011b28:	ad01      	add	r5, sp, #4
 8011b2a:	4632      	mov	r2, r6
 8011b2c:	4629      	mov	r1, r5
 8011b2e:	f001 ffe4 	bl	8013afa <memcpy>
 8011b32:	4642      	mov	r2, r8
 8011b34:	19a9      	adds	r1, r5, r6
 8011b36:	68a0      	ldr	r0, [r4, #8]
 8011b38:	f001 ffdf 	bl	8013afa <memcpy>
 8011b3c:	e7a1      	b.n	8011a82 <ucdr_serialize_int32_t+0x72>
 8011b3e:	bf00      	nop

08011b40 <ucdr_deserialize_int32_t>:
 8011b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b44:	4604      	mov	r4, r0
 8011b46:	460d      	mov	r5, r1
 8011b48:	2104      	movs	r1, #4
 8011b4a:	f000 fb77 	bl	801223c <ucdr_buffer_alignment>
 8011b4e:	4601      	mov	r1, r0
 8011b50:	4620      	mov	r0, r4
 8011b52:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011b56:	f000 fbb5 	bl	80122c4 <ucdr_advance_buffer>
 8011b5a:	2104      	movs	r1, #4
 8011b5c:	4620      	mov	r0, r4
 8011b5e:	f000 fb3d 	bl	80121dc <ucdr_check_buffer_available_for>
 8011b62:	2800      	cmp	r0, #0
 8011b64:	d138      	bne.n	8011bd8 <ucdr_deserialize_int32_t+0x98>
 8011b66:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011b6a:	42b7      	cmp	r7, r6
 8011b6c:	d92f      	bls.n	8011bce <ucdr_deserialize_int32_t+0x8e>
 8011b6e:	6923      	ldr	r3, [r4, #16]
 8011b70:	4620      	mov	r0, r4
 8011b72:	60a7      	str	r7, [r4, #8]
 8011b74:	1bbf      	subs	r7, r7, r6
 8011b76:	443b      	add	r3, r7
 8011b78:	f1c7 0904 	rsb	r9, r7, #4
 8011b7c:	6123      	str	r3, [r4, #16]
 8011b7e:	4649      	mov	r1, r9
 8011b80:	f000 fb38 	bl	80121f4 <ucdr_check_final_buffer_behavior>
 8011b84:	2800      	cmp	r0, #0
 8011b86:	d046      	beq.n	8011c16 <ucdr_deserialize_int32_t+0xd6>
 8011b88:	7d23      	ldrb	r3, [r4, #20]
 8011b8a:	2b01      	cmp	r3, #1
 8011b8c:	d05c      	beq.n	8011c48 <ucdr_deserialize_int32_t+0x108>
 8011b8e:	78f3      	ldrb	r3, [r6, #3]
 8011b90:	702b      	strb	r3, [r5, #0]
 8011b92:	2f00      	cmp	r7, #0
 8011b94:	d04c      	beq.n	8011c30 <ucdr_deserialize_int32_t+0xf0>
 8011b96:	78b3      	ldrb	r3, [r6, #2]
 8011b98:	2f01      	cmp	r7, #1
 8011b9a:	706b      	strb	r3, [r5, #1]
 8011b9c:	f105 0302 	add.w	r3, r5, #2
 8011ba0:	d04a      	beq.n	8011c38 <ucdr_deserialize_int32_t+0xf8>
 8011ba2:	7873      	ldrb	r3, [r6, #1]
 8011ba4:	2f02      	cmp	r7, #2
 8011ba6:	70ab      	strb	r3, [r5, #2]
 8011ba8:	f105 0303 	add.w	r3, r5, #3
 8011bac:	d048      	beq.n	8011c40 <ucdr_deserialize_int32_t+0x100>
 8011bae:	7833      	ldrb	r3, [r6, #0]
 8011bb0:	70eb      	strb	r3, [r5, #3]
 8011bb2:	6923      	ldr	r3, [r4, #16]
 8011bb4:	2104      	movs	r1, #4
 8011bb6:	68a2      	ldr	r2, [r4, #8]
 8011bb8:	3304      	adds	r3, #4
 8011bba:	7da0      	ldrb	r0, [r4, #22]
 8011bbc:	444a      	add	r2, r9
 8011bbe:	7561      	strb	r1, [r4, #21]
 8011bc0:	1bdb      	subs	r3, r3, r7
 8011bc2:	f080 0001 	eor.w	r0, r0, #1
 8011bc6:	60a2      	str	r2, [r4, #8]
 8011bc8:	6123      	str	r3, [r4, #16]
 8011bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bce:	2104      	movs	r1, #4
 8011bd0:	4620      	mov	r0, r4
 8011bd2:	f000 fb0f 	bl	80121f4 <ucdr_check_final_buffer_behavior>
 8011bd6:	b1b0      	cbz	r0, 8011c06 <ucdr_deserialize_int32_t+0xc6>
 8011bd8:	7d23      	ldrb	r3, [r4, #20]
 8011bda:	2b01      	cmp	r3, #1
 8011bdc:	68a3      	ldr	r3, [r4, #8]
 8011bde:	d017      	beq.n	8011c10 <ucdr_deserialize_int32_t+0xd0>
 8011be0:	78db      	ldrb	r3, [r3, #3]
 8011be2:	702b      	strb	r3, [r5, #0]
 8011be4:	68a3      	ldr	r3, [r4, #8]
 8011be6:	789b      	ldrb	r3, [r3, #2]
 8011be8:	706b      	strb	r3, [r5, #1]
 8011bea:	68a3      	ldr	r3, [r4, #8]
 8011bec:	785b      	ldrb	r3, [r3, #1]
 8011bee:	70ab      	strb	r3, [r5, #2]
 8011bf0:	68a3      	ldr	r3, [r4, #8]
 8011bf2:	781b      	ldrb	r3, [r3, #0]
 8011bf4:	70eb      	strb	r3, [r5, #3]
 8011bf6:	2104      	movs	r1, #4
 8011bf8:	68a2      	ldr	r2, [r4, #8]
 8011bfa:	6923      	ldr	r3, [r4, #16]
 8011bfc:	440a      	add	r2, r1
 8011bfe:	7561      	strb	r1, [r4, #21]
 8011c00:	440b      	add	r3, r1
 8011c02:	60a2      	str	r2, [r4, #8]
 8011c04:	6123      	str	r3, [r4, #16]
 8011c06:	7da0      	ldrb	r0, [r4, #22]
 8011c08:	f080 0001 	eor.w	r0, r0, #1
 8011c0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	602b      	str	r3, [r5, #0]
 8011c14:	e7ef      	b.n	8011bf6 <ucdr_deserialize_int32_t+0xb6>
 8011c16:	68a2      	ldr	r2, [r4, #8]
 8011c18:	6923      	ldr	r3, [r4, #16]
 8011c1a:	1bd2      	subs	r2, r2, r7
 8011c1c:	7da0      	ldrb	r0, [r4, #22]
 8011c1e:	1bdb      	subs	r3, r3, r7
 8011c20:	f884 8015 	strb.w	r8, [r4, #21]
 8011c24:	f080 0001 	eor.w	r0, r0, #1
 8011c28:	60a2      	str	r2, [r4, #8]
 8011c2a:	6123      	str	r3, [r4, #16]
 8011c2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c30:	68a3      	ldr	r3, [r4, #8]
 8011c32:	789b      	ldrb	r3, [r3, #2]
 8011c34:	706b      	strb	r3, [r5, #1]
 8011c36:	1cab      	adds	r3, r5, #2
 8011c38:	68a2      	ldr	r2, [r4, #8]
 8011c3a:	7852      	ldrb	r2, [r2, #1]
 8011c3c:	f803 2b01 	strb.w	r2, [r3], #1
 8011c40:	68a2      	ldr	r2, [r4, #8]
 8011c42:	7812      	ldrb	r2, [r2, #0]
 8011c44:	701a      	strb	r2, [r3, #0]
 8011c46:	e7b4      	b.n	8011bb2 <ucdr_deserialize_int32_t+0x72>
 8011c48:	4631      	mov	r1, r6
 8011c4a:	463a      	mov	r2, r7
 8011c4c:	4628      	mov	r0, r5
 8011c4e:	f001 ff54 	bl	8013afa <memcpy>
 8011c52:	464a      	mov	r2, r9
 8011c54:	19e8      	adds	r0, r5, r7
 8011c56:	68a1      	ldr	r1, [r4, #8]
 8011c58:	f001 ff4f 	bl	8013afa <memcpy>
 8011c5c:	e7a9      	b.n	8011bb2 <ucdr_deserialize_int32_t+0x72>
 8011c5e:	bf00      	nop

08011c60 <ucdr_serialize_float>:
 8011c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c64:	4604      	mov	r4, r0
 8011c66:	b082      	sub	sp, #8
 8011c68:	2104      	movs	r1, #4
 8011c6a:	ed8d 0a01 	vstr	s0, [sp, #4]
 8011c6e:	f000 fae5 	bl	801223c <ucdr_buffer_alignment>
 8011c72:	4601      	mov	r1, r0
 8011c74:	4620      	mov	r0, r4
 8011c76:	7d67      	ldrb	r7, [r4, #21]
 8011c78:	f000 fb24 	bl	80122c4 <ucdr_advance_buffer>
 8011c7c:	2104      	movs	r1, #4
 8011c7e:	4620      	mov	r0, r4
 8011c80:	f000 faac 	bl	80121dc <ucdr_check_buffer_available_for>
 8011c84:	2800      	cmp	r0, #0
 8011c86:	d139      	bne.n	8011cfc <ucdr_serialize_float+0x9c>
 8011c88:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011c8c:	42ab      	cmp	r3, r5
 8011c8e:	d930      	bls.n	8011cf2 <ucdr_serialize_float+0x92>
 8011c90:	1b5e      	subs	r6, r3, r5
 8011c92:	60a3      	str	r3, [r4, #8]
 8011c94:	6923      	ldr	r3, [r4, #16]
 8011c96:	4620      	mov	r0, r4
 8011c98:	f1c6 0804 	rsb	r8, r6, #4
 8011c9c:	4433      	add	r3, r6
 8011c9e:	4641      	mov	r1, r8
 8011ca0:	6123      	str	r3, [r4, #16]
 8011ca2:	f000 faa7 	bl	80121f4 <ucdr_check_final_buffer_behavior>
 8011ca6:	2800      	cmp	r0, #0
 8011ca8:	d04c      	beq.n	8011d44 <ucdr_serialize_float+0xe4>
 8011caa:	7d23      	ldrb	r3, [r4, #20]
 8011cac:	2b01      	cmp	r3, #1
 8011cae:	d063      	beq.n	8011d78 <ucdr_serialize_float+0x118>
 8011cb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011cb4:	702b      	strb	r3, [r5, #0]
 8011cb6:	2e00      	cmp	r6, #0
 8011cb8:	d051      	beq.n	8011d5e <ucdr_serialize_float+0xfe>
 8011cba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011cbe:	2e01      	cmp	r6, #1
 8011cc0:	706b      	strb	r3, [r5, #1]
 8011cc2:	d050      	beq.n	8011d66 <ucdr_serialize_float+0x106>
 8011cc4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011cc8:	2e02      	cmp	r6, #2
 8011cca:	70ab      	strb	r3, [r5, #2]
 8011ccc:	d04f      	beq.n	8011d6e <ucdr_serialize_float+0x10e>
 8011cce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011cd2:	70eb      	strb	r3, [r5, #3]
 8011cd4:	6923      	ldr	r3, [r4, #16]
 8011cd6:	2104      	movs	r1, #4
 8011cd8:	68a2      	ldr	r2, [r4, #8]
 8011cda:	3304      	adds	r3, #4
 8011cdc:	7da0      	ldrb	r0, [r4, #22]
 8011cde:	4442      	add	r2, r8
 8011ce0:	7561      	strb	r1, [r4, #21]
 8011ce2:	1b9e      	subs	r6, r3, r6
 8011ce4:	f080 0001 	eor.w	r0, r0, #1
 8011ce8:	60a2      	str	r2, [r4, #8]
 8011cea:	6126      	str	r6, [r4, #16]
 8011cec:	b002      	add	sp, #8
 8011cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cf2:	2104      	movs	r1, #4
 8011cf4:	4620      	mov	r0, r4
 8011cf6:	f000 fa7d 	bl	80121f4 <ucdr_check_final_buffer_behavior>
 8011cfa:	b1d0      	cbz	r0, 8011d32 <ucdr_serialize_float+0xd2>
 8011cfc:	7d23      	ldrb	r3, [r4, #20]
 8011cfe:	2b01      	cmp	r3, #1
 8011d00:	68a3      	ldr	r3, [r4, #8]
 8011d02:	d01c      	beq.n	8011d3e <ucdr_serialize_float+0xde>
 8011d04:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011d08:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011d0c:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011d10:	7018      	strb	r0, [r3, #0]
 8011d12:	68a3      	ldr	r3, [r4, #8]
 8011d14:	705a      	strb	r2, [r3, #1]
 8011d16:	68a3      	ldr	r3, [r4, #8]
 8011d18:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011d1c:	7099      	strb	r1, [r3, #2]
 8011d1e:	68a3      	ldr	r3, [r4, #8]
 8011d20:	70da      	strb	r2, [r3, #3]
 8011d22:	2104      	movs	r1, #4
 8011d24:	68a2      	ldr	r2, [r4, #8]
 8011d26:	6923      	ldr	r3, [r4, #16]
 8011d28:	440a      	add	r2, r1
 8011d2a:	7561      	strb	r1, [r4, #21]
 8011d2c:	440b      	add	r3, r1
 8011d2e:	60a2      	str	r2, [r4, #8]
 8011d30:	6123      	str	r3, [r4, #16]
 8011d32:	7da0      	ldrb	r0, [r4, #22]
 8011d34:	f080 0001 	eor.w	r0, r0, #1
 8011d38:	b002      	add	sp, #8
 8011d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d3e:	9a01      	ldr	r2, [sp, #4]
 8011d40:	601a      	str	r2, [r3, #0]
 8011d42:	e7ee      	b.n	8011d22 <ucdr_serialize_float+0xc2>
 8011d44:	68a2      	ldr	r2, [r4, #8]
 8011d46:	6923      	ldr	r3, [r4, #16]
 8011d48:	7da0      	ldrb	r0, [r4, #22]
 8011d4a:	1b92      	subs	r2, r2, r6
 8011d4c:	1b9b      	subs	r3, r3, r6
 8011d4e:	7567      	strb	r7, [r4, #21]
 8011d50:	f080 0001 	eor.w	r0, r0, #1
 8011d54:	60a2      	str	r2, [r4, #8]
 8011d56:	6123      	str	r3, [r4, #16]
 8011d58:	b002      	add	sp, #8
 8011d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d5e:	68a3      	ldr	r3, [r4, #8]
 8011d60:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011d64:	701a      	strb	r2, [r3, #0]
 8011d66:	68a3      	ldr	r3, [r4, #8]
 8011d68:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011d6c:	701a      	strb	r2, [r3, #0]
 8011d6e:	68a3      	ldr	r3, [r4, #8]
 8011d70:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011d74:	701a      	strb	r2, [r3, #0]
 8011d76:	e7ad      	b.n	8011cd4 <ucdr_serialize_float+0x74>
 8011d78:	4628      	mov	r0, r5
 8011d7a:	ad01      	add	r5, sp, #4
 8011d7c:	4632      	mov	r2, r6
 8011d7e:	4629      	mov	r1, r5
 8011d80:	f001 febb 	bl	8013afa <memcpy>
 8011d84:	4642      	mov	r2, r8
 8011d86:	19a9      	adds	r1, r5, r6
 8011d88:	68a0      	ldr	r0, [r4, #8]
 8011d8a:	f001 feb6 	bl	8013afa <memcpy>
 8011d8e:	e7a1      	b.n	8011cd4 <ucdr_serialize_float+0x74>

08011d90 <ucdr_deserialize_float>:
 8011d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d94:	4604      	mov	r4, r0
 8011d96:	460d      	mov	r5, r1
 8011d98:	2104      	movs	r1, #4
 8011d9a:	f000 fa4f 	bl	801223c <ucdr_buffer_alignment>
 8011d9e:	4601      	mov	r1, r0
 8011da0:	4620      	mov	r0, r4
 8011da2:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011da6:	f000 fa8d 	bl	80122c4 <ucdr_advance_buffer>
 8011daa:	2104      	movs	r1, #4
 8011dac:	4620      	mov	r0, r4
 8011dae:	f000 fa15 	bl	80121dc <ucdr_check_buffer_available_for>
 8011db2:	2800      	cmp	r0, #0
 8011db4:	d138      	bne.n	8011e28 <ucdr_deserialize_float+0x98>
 8011db6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011dba:	42b7      	cmp	r7, r6
 8011dbc:	d92f      	bls.n	8011e1e <ucdr_deserialize_float+0x8e>
 8011dbe:	6923      	ldr	r3, [r4, #16]
 8011dc0:	4620      	mov	r0, r4
 8011dc2:	60a7      	str	r7, [r4, #8]
 8011dc4:	1bbf      	subs	r7, r7, r6
 8011dc6:	443b      	add	r3, r7
 8011dc8:	f1c7 0904 	rsb	r9, r7, #4
 8011dcc:	6123      	str	r3, [r4, #16]
 8011dce:	4649      	mov	r1, r9
 8011dd0:	f000 fa10 	bl	80121f4 <ucdr_check_final_buffer_behavior>
 8011dd4:	2800      	cmp	r0, #0
 8011dd6:	d046      	beq.n	8011e66 <ucdr_deserialize_float+0xd6>
 8011dd8:	7d23      	ldrb	r3, [r4, #20]
 8011dda:	2b01      	cmp	r3, #1
 8011ddc:	d05c      	beq.n	8011e98 <ucdr_deserialize_float+0x108>
 8011dde:	78f3      	ldrb	r3, [r6, #3]
 8011de0:	702b      	strb	r3, [r5, #0]
 8011de2:	2f00      	cmp	r7, #0
 8011de4:	d04c      	beq.n	8011e80 <ucdr_deserialize_float+0xf0>
 8011de6:	78b3      	ldrb	r3, [r6, #2]
 8011de8:	2f01      	cmp	r7, #1
 8011dea:	706b      	strb	r3, [r5, #1]
 8011dec:	f105 0302 	add.w	r3, r5, #2
 8011df0:	d04a      	beq.n	8011e88 <ucdr_deserialize_float+0xf8>
 8011df2:	7873      	ldrb	r3, [r6, #1]
 8011df4:	2f02      	cmp	r7, #2
 8011df6:	70ab      	strb	r3, [r5, #2]
 8011df8:	f105 0303 	add.w	r3, r5, #3
 8011dfc:	d048      	beq.n	8011e90 <ucdr_deserialize_float+0x100>
 8011dfe:	7833      	ldrb	r3, [r6, #0]
 8011e00:	70eb      	strb	r3, [r5, #3]
 8011e02:	6923      	ldr	r3, [r4, #16]
 8011e04:	2104      	movs	r1, #4
 8011e06:	68a2      	ldr	r2, [r4, #8]
 8011e08:	3304      	adds	r3, #4
 8011e0a:	7da0      	ldrb	r0, [r4, #22]
 8011e0c:	444a      	add	r2, r9
 8011e0e:	7561      	strb	r1, [r4, #21]
 8011e10:	1bdb      	subs	r3, r3, r7
 8011e12:	f080 0001 	eor.w	r0, r0, #1
 8011e16:	60a2      	str	r2, [r4, #8]
 8011e18:	6123      	str	r3, [r4, #16]
 8011e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e1e:	2104      	movs	r1, #4
 8011e20:	4620      	mov	r0, r4
 8011e22:	f000 f9e7 	bl	80121f4 <ucdr_check_final_buffer_behavior>
 8011e26:	b1b0      	cbz	r0, 8011e56 <ucdr_deserialize_float+0xc6>
 8011e28:	7d23      	ldrb	r3, [r4, #20]
 8011e2a:	2b01      	cmp	r3, #1
 8011e2c:	68a3      	ldr	r3, [r4, #8]
 8011e2e:	d017      	beq.n	8011e60 <ucdr_deserialize_float+0xd0>
 8011e30:	78db      	ldrb	r3, [r3, #3]
 8011e32:	702b      	strb	r3, [r5, #0]
 8011e34:	68a3      	ldr	r3, [r4, #8]
 8011e36:	789b      	ldrb	r3, [r3, #2]
 8011e38:	706b      	strb	r3, [r5, #1]
 8011e3a:	68a3      	ldr	r3, [r4, #8]
 8011e3c:	785b      	ldrb	r3, [r3, #1]
 8011e3e:	70ab      	strb	r3, [r5, #2]
 8011e40:	68a3      	ldr	r3, [r4, #8]
 8011e42:	781b      	ldrb	r3, [r3, #0]
 8011e44:	70eb      	strb	r3, [r5, #3]
 8011e46:	2104      	movs	r1, #4
 8011e48:	68a2      	ldr	r2, [r4, #8]
 8011e4a:	6923      	ldr	r3, [r4, #16]
 8011e4c:	440a      	add	r2, r1
 8011e4e:	7561      	strb	r1, [r4, #21]
 8011e50:	440b      	add	r3, r1
 8011e52:	60a2      	str	r2, [r4, #8]
 8011e54:	6123      	str	r3, [r4, #16]
 8011e56:	7da0      	ldrb	r0, [r4, #22]
 8011e58:	f080 0001 	eor.w	r0, r0, #1
 8011e5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	602b      	str	r3, [r5, #0]
 8011e64:	e7ef      	b.n	8011e46 <ucdr_deserialize_float+0xb6>
 8011e66:	68a2      	ldr	r2, [r4, #8]
 8011e68:	6923      	ldr	r3, [r4, #16]
 8011e6a:	1bd2      	subs	r2, r2, r7
 8011e6c:	7da0      	ldrb	r0, [r4, #22]
 8011e6e:	1bdb      	subs	r3, r3, r7
 8011e70:	f884 8015 	strb.w	r8, [r4, #21]
 8011e74:	f080 0001 	eor.w	r0, r0, #1
 8011e78:	60a2      	str	r2, [r4, #8]
 8011e7a:	6123      	str	r3, [r4, #16]
 8011e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e80:	68a3      	ldr	r3, [r4, #8]
 8011e82:	789b      	ldrb	r3, [r3, #2]
 8011e84:	706b      	strb	r3, [r5, #1]
 8011e86:	1cab      	adds	r3, r5, #2
 8011e88:	68a2      	ldr	r2, [r4, #8]
 8011e8a:	7852      	ldrb	r2, [r2, #1]
 8011e8c:	f803 2b01 	strb.w	r2, [r3], #1
 8011e90:	68a2      	ldr	r2, [r4, #8]
 8011e92:	7812      	ldrb	r2, [r2, #0]
 8011e94:	701a      	strb	r2, [r3, #0]
 8011e96:	e7b4      	b.n	8011e02 <ucdr_deserialize_float+0x72>
 8011e98:	4631      	mov	r1, r6
 8011e9a:	463a      	mov	r2, r7
 8011e9c:	4628      	mov	r0, r5
 8011e9e:	f001 fe2c 	bl	8013afa <memcpy>
 8011ea2:	464a      	mov	r2, r9
 8011ea4:	19e8      	adds	r0, r5, r7
 8011ea6:	68a1      	ldr	r1, [r4, #8]
 8011ea8:	f001 fe27 	bl	8013afa <memcpy>
 8011eac:	e7a9      	b.n	8011e02 <ucdr_deserialize_float+0x72>
 8011eae:	bf00      	nop

08011eb0 <ucdr_serialize_double>:
 8011eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011eb4:	4604      	mov	r4, r0
 8011eb6:	b082      	sub	sp, #8
 8011eb8:	2108      	movs	r1, #8
 8011eba:	ed8d 0b00 	vstr	d0, [sp]
 8011ebe:	f000 f9bd 	bl	801223c <ucdr_buffer_alignment>
 8011ec2:	4601      	mov	r1, r0
 8011ec4:	4620      	mov	r0, r4
 8011ec6:	7d67      	ldrb	r7, [r4, #21]
 8011ec8:	f000 f9fc 	bl	80122c4 <ucdr_advance_buffer>
 8011ecc:	2108      	movs	r1, #8
 8011ece:	4620      	mov	r0, r4
 8011ed0:	f000 f984 	bl	80121dc <ucdr_check_buffer_available_for>
 8011ed4:	2800      	cmp	r0, #0
 8011ed6:	d14e      	bne.n	8011f76 <ucdr_serialize_double+0xc6>
 8011ed8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011edc:	42ab      	cmp	r3, r5
 8011ede:	d945      	bls.n	8011f6c <ucdr_serialize_double+0xbc>
 8011ee0:	1b5e      	subs	r6, r3, r5
 8011ee2:	60a3      	str	r3, [r4, #8]
 8011ee4:	6923      	ldr	r3, [r4, #16]
 8011ee6:	4620      	mov	r0, r4
 8011ee8:	f1c6 0808 	rsb	r8, r6, #8
 8011eec:	4433      	add	r3, r6
 8011eee:	4641      	mov	r1, r8
 8011ef0:	6123      	str	r3, [r4, #16]
 8011ef2:	f000 f97f 	bl	80121f4 <ucdr_check_final_buffer_behavior>
 8011ef6:	2800      	cmp	r0, #0
 8011ef8:	d074      	beq.n	8011fe4 <ucdr_serialize_double+0x134>
 8011efa:	7d23      	ldrb	r3, [r4, #20]
 8011efc:	2b01      	cmp	r3, #1
 8011efe:	f000 809b 	beq.w	8012038 <ucdr_serialize_double+0x188>
 8011f02:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011f06:	702b      	strb	r3, [r5, #0]
 8011f08:	2e00      	cmp	r6, #0
 8011f0a:	d078      	beq.n	8011ffe <ucdr_serialize_double+0x14e>
 8011f0c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011f10:	2e01      	cmp	r6, #1
 8011f12:	706b      	strb	r3, [r5, #1]
 8011f14:	d077      	beq.n	8012006 <ucdr_serialize_double+0x156>
 8011f16:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011f1a:	2e02      	cmp	r6, #2
 8011f1c:	70ab      	strb	r3, [r5, #2]
 8011f1e:	d076      	beq.n	801200e <ucdr_serialize_double+0x15e>
 8011f20:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011f24:	2e03      	cmp	r6, #3
 8011f26:	70eb      	strb	r3, [r5, #3]
 8011f28:	d075      	beq.n	8012016 <ucdr_serialize_double+0x166>
 8011f2a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011f2e:	2e04      	cmp	r6, #4
 8011f30:	712b      	strb	r3, [r5, #4]
 8011f32:	d074      	beq.n	801201e <ucdr_serialize_double+0x16e>
 8011f34:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8011f38:	2e05      	cmp	r6, #5
 8011f3a:	716b      	strb	r3, [r5, #5]
 8011f3c:	d073      	beq.n	8012026 <ucdr_serialize_double+0x176>
 8011f3e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8011f42:	2e06      	cmp	r6, #6
 8011f44:	71ab      	strb	r3, [r5, #6]
 8011f46:	d072      	beq.n	801202e <ucdr_serialize_double+0x17e>
 8011f48:	f89d 3000 	ldrb.w	r3, [sp]
 8011f4c:	71eb      	strb	r3, [r5, #7]
 8011f4e:	6923      	ldr	r3, [r4, #16]
 8011f50:	2108      	movs	r1, #8
 8011f52:	68a2      	ldr	r2, [r4, #8]
 8011f54:	3308      	adds	r3, #8
 8011f56:	7da0      	ldrb	r0, [r4, #22]
 8011f58:	4442      	add	r2, r8
 8011f5a:	7561      	strb	r1, [r4, #21]
 8011f5c:	1b9e      	subs	r6, r3, r6
 8011f5e:	f080 0001 	eor.w	r0, r0, #1
 8011f62:	60a2      	str	r2, [r4, #8]
 8011f64:	6126      	str	r6, [r4, #16]
 8011f66:	b002      	add	sp, #8
 8011f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f6c:	2108      	movs	r1, #8
 8011f6e:	4620      	mov	r0, r4
 8011f70:	f000 f940 	bl	80121f4 <ucdr_check_final_buffer_behavior>
 8011f74:	b350      	cbz	r0, 8011fcc <ucdr_serialize_double+0x11c>
 8011f76:	7d23      	ldrb	r3, [r4, #20]
 8011f78:	2b01      	cmp	r3, #1
 8011f7a:	d02d      	beq.n	8011fd8 <ucdr_serialize_double+0x128>
 8011f7c:	68a3      	ldr	r3, [r4, #8]
 8011f7e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011f82:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011f86:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011f8a:	7018      	strb	r0, [r3, #0]
 8011f8c:	68a3      	ldr	r3, [r4, #8]
 8011f8e:	705a      	strb	r2, [r3, #1]
 8011f90:	68a3      	ldr	r3, [r4, #8]
 8011f92:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011f96:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8011f9a:	7099      	strb	r1, [r3, #2]
 8011f9c:	68a3      	ldr	r3, [r4, #8]
 8011f9e:	70da      	strb	r2, [r3, #3]
 8011fa0:	68a3      	ldr	r3, [r4, #8]
 8011fa2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011fa6:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8011faa:	7118      	strb	r0, [r3, #4]
 8011fac:	68a3      	ldr	r3, [r4, #8]
 8011fae:	715a      	strb	r2, [r3, #5]
 8011fb0:	68a3      	ldr	r3, [r4, #8]
 8011fb2:	f89d 2000 	ldrb.w	r2, [sp]
 8011fb6:	7199      	strb	r1, [r3, #6]
 8011fb8:	68a3      	ldr	r3, [r4, #8]
 8011fba:	71da      	strb	r2, [r3, #7]
 8011fbc:	2108      	movs	r1, #8
 8011fbe:	68a2      	ldr	r2, [r4, #8]
 8011fc0:	6923      	ldr	r3, [r4, #16]
 8011fc2:	440a      	add	r2, r1
 8011fc4:	7561      	strb	r1, [r4, #21]
 8011fc6:	440b      	add	r3, r1
 8011fc8:	60a2      	str	r2, [r4, #8]
 8011fca:	6123      	str	r3, [r4, #16]
 8011fcc:	7da0      	ldrb	r0, [r4, #22]
 8011fce:	f080 0001 	eor.w	r0, r0, #1
 8011fd2:	b002      	add	sp, #8
 8011fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fd8:	466b      	mov	r3, sp
 8011fda:	68a2      	ldr	r2, [r4, #8]
 8011fdc:	cb03      	ldmia	r3!, {r0, r1}
 8011fde:	6010      	str	r0, [r2, #0]
 8011fe0:	6051      	str	r1, [r2, #4]
 8011fe2:	e7eb      	b.n	8011fbc <ucdr_serialize_double+0x10c>
 8011fe4:	68a2      	ldr	r2, [r4, #8]
 8011fe6:	6923      	ldr	r3, [r4, #16]
 8011fe8:	7da0      	ldrb	r0, [r4, #22]
 8011fea:	1b92      	subs	r2, r2, r6
 8011fec:	1b9b      	subs	r3, r3, r6
 8011fee:	7567      	strb	r7, [r4, #21]
 8011ff0:	f080 0001 	eor.w	r0, r0, #1
 8011ff4:	60a2      	str	r2, [r4, #8]
 8011ff6:	6123      	str	r3, [r4, #16]
 8011ff8:	b002      	add	sp, #8
 8011ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ffe:	68a3      	ldr	r3, [r4, #8]
 8012000:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012004:	701a      	strb	r2, [r3, #0]
 8012006:	68a3      	ldr	r3, [r4, #8]
 8012008:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801200c:	701a      	strb	r2, [r3, #0]
 801200e:	68a3      	ldr	r3, [r4, #8]
 8012010:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012014:	701a      	strb	r2, [r3, #0]
 8012016:	68a3      	ldr	r3, [r4, #8]
 8012018:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801201c:	701a      	strb	r2, [r3, #0]
 801201e:	68a3      	ldr	r3, [r4, #8]
 8012020:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012024:	701a      	strb	r2, [r3, #0]
 8012026:	68a3      	ldr	r3, [r4, #8]
 8012028:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801202c:	701a      	strb	r2, [r3, #0]
 801202e:	68a3      	ldr	r3, [r4, #8]
 8012030:	f89d 2000 	ldrb.w	r2, [sp]
 8012034:	701a      	strb	r2, [r3, #0]
 8012036:	e78a      	b.n	8011f4e <ucdr_serialize_double+0x9e>
 8012038:	4628      	mov	r0, r5
 801203a:	466d      	mov	r5, sp
 801203c:	4632      	mov	r2, r6
 801203e:	4629      	mov	r1, r5
 8012040:	f001 fd5b 	bl	8013afa <memcpy>
 8012044:	4642      	mov	r2, r8
 8012046:	19a9      	adds	r1, r5, r6
 8012048:	68a0      	ldr	r0, [r4, #8]
 801204a:	f001 fd56 	bl	8013afa <memcpy>
 801204e:	e77e      	b.n	8011f4e <ucdr_serialize_double+0x9e>

08012050 <ucdr_deserialize_double>:
 8012050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012054:	4604      	mov	r4, r0
 8012056:	460d      	mov	r5, r1
 8012058:	2108      	movs	r1, #8
 801205a:	f000 f8ef 	bl	801223c <ucdr_buffer_alignment>
 801205e:	4601      	mov	r1, r0
 8012060:	4620      	mov	r0, r4
 8012062:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012066:	f000 f92d 	bl	80122c4 <ucdr_advance_buffer>
 801206a:	2108      	movs	r1, #8
 801206c:	4620      	mov	r0, r4
 801206e:	f000 f8b5 	bl	80121dc <ucdr_check_buffer_available_for>
 8012072:	2800      	cmp	r0, #0
 8012074:	d151      	bne.n	801211a <ucdr_deserialize_double+0xca>
 8012076:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801207a:	42be      	cmp	r6, r7
 801207c:	d948      	bls.n	8012110 <ucdr_deserialize_double+0xc0>
 801207e:	6923      	ldr	r3, [r4, #16]
 8012080:	4620      	mov	r0, r4
 8012082:	60a6      	str	r6, [r4, #8]
 8012084:	1bf6      	subs	r6, r6, r7
 8012086:	4433      	add	r3, r6
 8012088:	f1c6 0908 	rsb	r9, r6, #8
 801208c:	6123      	str	r3, [r4, #16]
 801208e:	4649      	mov	r1, r9
 8012090:	f000 f8b0 	bl	80121f4 <ucdr_check_final_buffer_behavior>
 8012094:	2800      	cmp	r0, #0
 8012096:	d06d      	beq.n	8012174 <ucdr_deserialize_double+0x124>
 8012098:	7d23      	ldrb	r3, [r4, #20]
 801209a:	2b01      	cmp	r3, #1
 801209c:	f000 8093 	beq.w	80121c6 <ucdr_deserialize_double+0x176>
 80120a0:	79fb      	ldrb	r3, [r7, #7]
 80120a2:	702b      	strb	r3, [r5, #0]
 80120a4:	2e00      	cmp	r6, #0
 80120a6:	d072      	beq.n	801218e <ucdr_deserialize_double+0x13e>
 80120a8:	79bb      	ldrb	r3, [r7, #6]
 80120aa:	2e01      	cmp	r6, #1
 80120ac:	706b      	strb	r3, [r5, #1]
 80120ae:	f105 0302 	add.w	r3, r5, #2
 80120b2:	d070      	beq.n	8012196 <ucdr_deserialize_double+0x146>
 80120b4:	797b      	ldrb	r3, [r7, #5]
 80120b6:	2e02      	cmp	r6, #2
 80120b8:	70ab      	strb	r3, [r5, #2]
 80120ba:	f105 0303 	add.w	r3, r5, #3
 80120be:	d06e      	beq.n	801219e <ucdr_deserialize_double+0x14e>
 80120c0:	793b      	ldrb	r3, [r7, #4]
 80120c2:	2e03      	cmp	r6, #3
 80120c4:	70eb      	strb	r3, [r5, #3]
 80120c6:	f105 0304 	add.w	r3, r5, #4
 80120ca:	d06c      	beq.n	80121a6 <ucdr_deserialize_double+0x156>
 80120cc:	78fb      	ldrb	r3, [r7, #3]
 80120ce:	2e04      	cmp	r6, #4
 80120d0:	712b      	strb	r3, [r5, #4]
 80120d2:	f105 0305 	add.w	r3, r5, #5
 80120d6:	d06a      	beq.n	80121ae <ucdr_deserialize_double+0x15e>
 80120d8:	78bb      	ldrb	r3, [r7, #2]
 80120da:	2e05      	cmp	r6, #5
 80120dc:	716b      	strb	r3, [r5, #5]
 80120de:	f105 0306 	add.w	r3, r5, #6
 80120e2:	d068      	beq.n	80121b6 <ucdr_deserialize_double+0x166>
 80120e4:	787b      	ldrb	r3, [r7, #1]
 80120e6:	2e06      	cmp	r6, #6
 80120e8:	71ab      	strb	r3, [r5, #6]
 80120ea:	f105 0307 	add.w	r3, r5, #7
 80120ee:	d066      	beq.n	80121be <ucdr_deserialize_double+0x16e>
 80120f0:	783b      	ldrb	r3, [r7, #0]
 80120f2:	71eb      	strb	r3, [r5, #7]
 80120f4:	6923      	ldr	r3, [r4, #16]
 80120f6:	2108      	movs	r1, #8
 80120f8:	68a2      	ldr	r2, [r4, #8]
 80120fa:	3308      	adds	r3, #8
 80120fc:	7da0      	ldrb	r0, [r4, #22]
 80120fe:	444a      	add	r2, r9
 8012100:	7561      	strb	r1, [r4, #21]
 8012102:	1b9e      	subs	r6, r3, r6
 8012104:	f080 0001 	eor.w	r0, r0, #1
 8012108:	60a2      	str	r2, [r4, #8]
 801210a:	6126      	str	r6, [r4, #16]
 801210c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012110:	2108      	movs	r1, #8
 8012112:	4620      	mov	r0, r4
 8012114:	f000 f86e 	bl	80121f4 <ucdr_check_final_buffer_behavior>
 8012118:	b310      	cbz	r0, 8012160 <ucdr_deserialize_double+0x110>
 801211a:	7d23      	ldrb	r3, [r4, #20]
 801211c:	2b01      	cmp	r3, #1
 801211e:	68a3      	ldr	r3, [r4, #8]
 8012120:	d023      	beq.n	801216a <ucdr_deserialize_double+0x11a>
 8012122:	79db      	ldrb	r3, [r3, #7]
 8012124:	702b      	strb	r3, [r5, #0]
 8012126:	68a3      	ldr	r3, [r4, #8]
 8012128:	799b      	ldrb	r3, [r3, #6]
 801212a:	706b      	strb	r3, [r5, #1]
 801212c:	68a3      	ldr	r3, [r4, #8]
 801212e:	795b      	ldrb	r3, [r3, #5]
 8012130:	70ab      	strb	r3, [r5, #2]
 8012132:	68a3      	ldr	r3, [r4, #8]
 8012134:	791b      	ldrb	r3, [r3, #4]
 8012136:	70eb      	strb	r3, [r5, #3]
 8012138:	68a3      	ldr	r3, [r4, #8]
 801213a:	78db      	ldrb	r3, [r3, #3]
 801213c:	712b      	strb	r3, [r5, #4]
 801213e:	68a3      	ldr	r3, [r4, #8]
 8012140:	789b      	ldrb	r3, [r3, #2]
 8012142:	716b      	strb	r3, [r5, #5]
 8012144:	68a3      	ldr	r3, [r4, #8]
 8012146:	785b      	ldrb	r3, [r3, #1]
 8012148:	71ab      	strb	r3, [r5, #6]
 801214a:	68a3      	ldr	r3, [r4, #8]
 801214c:	781b      	ldrb	r3, [r3, #0]
 801214e:	71eb      	strb	r3, [r5, #7]
 8012150:	2108      	movs	r1, #8
 8012152:	68a2      	ldr	r2, [r4, #8]
 8012154:	6923      	ldr	r3, [r4, #16]
 8012156:	440a      	add	r2, r1
 8012158:	7561      	strb	r1, [r4, #21]
 801215a:	440b      	add	r3, r1
 801215c:	60a2      	str	r2, [r4, #8]
 801215e:	6123      	str	r3, [r4, #16]
 8012160:	7da0      	ldrb	r0, [r4, #22]
 8012162:	f080 0001 	eor.w	r0, r0, #1
 8012166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801216a:	681a      	ldr	r2, [r3, #0]
 801216c:	685b      	ldr	r3, [r3, #4]
 801216e:	602a      	str	r2, [r5, #0]
 8012170:	606b      	str	r3, [r5, #4]
 8012172:	e7ed      	b.n	8012150 <ucdr_deserialize_double+0x100>
 8012174:	68a2      	ldr	r2, [r4, #8]
 8012176:	6923      	ldr	r3, [r4, #16]
 8012178:	1b92      	subs	r2, r2, r6
 801217a:	7da0      	ldrb	r0, [r4, #22]
 801217c:	1b9b      	subs	r3, r3, r6
 801217e:	f884 8015 	strb.w	r8, [r4, #21]
 8012182:	f080 0001 	eor.w	r0, r0, #1
 8012186:	60a2      	str	r2, [r4, #8]
 8012188:	6123      	str	r3, [r4, #16]
 801218a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801218e:	68a3      	ldr	r3, [r4, #8]
 8012190:	799b      	ldrb	r3, [r3, #6]
 8012192:	706b      	strb	r3, [r5, #1]
 8012194:	1cab      	adds	r3, r5, #2
 8012196:	68a2      	ldr	r2, [r4, #8]
 8012198:	7952      	ldrb	r2, [r2, #5]
 801219a:	f803 2b01 	strb.w	r2, [r3], #1
 801219e:	68a2      	ldr	r2, [r4, #8]
 80121a0:	7912      	ldrb	r2, [r2, #4]
 80121a2:	f803 2b01 	strb.w	r2, [r3], #1
 80121a6:	68a2      	ldr	r2, [r4, #8]
 80121a8:	78d2      	ldrb	r2, [r2, #3]
 80121aa:	f803 2b01 	strb.w	r2, [r3], #1
 80121ae:	68a2      	ldr	r2, [r4, #8]
 80121b0:	7892      	ldrb	r2, [r2, #2]
 80121b2:	f803 2b01 	strb.w	r2, [r3], #1
 80121b6:	68a2      	ldr	r2, [r4, #8]
 80121b8:	7852      	ldrb	r2, [r2, #1]
 80121ba:	f803 2b01 	strb.w	r2, [r3], #1
 80121be:	68a2      	ldr	r2, [r4, #8]
 80121c0:	7812      	ldrb	r2, [r2, #0]
 80121c2:	701a      	strb	r2, [r3, #0]
 80121c4:	e796      	b.n	80120f4 <ucdr_deserialize_double+0xa4>
 80121c6:	4639      	mov	r1, r7
 80121c8:	4632      	mov	r2, r6
 80121ca:	4628      	mov	r0, r5
 80121cc:	f001 fc95 	bl	8013afa <memcpy>
 80121d0:	464a      	mov	r2, r9
 80121d2:	19a8      	adds	r0, r5, r6
 80121d4:	68a1      	ldr	r1, [r4, #8]
 80121d6:	f001 fc90 	bl	8013afa <memcpy>
 80121da:	e78b      	b.n	80120f4 <ucdr_deserialize_double+0xa4>

080121dc <ucdr_check_buffer_available_for>:
 80121dc:	7d83      	ldrb	r3, [r0, #22]
 80121de:	b93b      	cbnz	r3, 80121f0 <ucdr_check_buffer_available_for+0x14>
 80121e0:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80121e4:	4419      	add	r1, r3
 80121e6:	4288      	cmp	r0, r1
 80121e8:	bf34      	ite	cc
 80121ea:	2000      	movcc	r0, #0
 80121ec:	2001      	movcs	r0, #1
 80121ee:	4770      	bx	lr
 80121f0:	2000      	movs	r0, #0
 80121f2:	4770      	bx	lr

080121f4 <ucdr_check_final_buffer_behavior>:
 80121f4:	7d83      	ldrb	r3, [r0, #22]
 80121f6:	b943      	cbnz	r3, 801220a <ucdr_check_final_buffer_behavior+0x16>
 80121f8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 80121fc:	b510      	push	{r4, lr}
 80121fe:	4291      	cmp	r1, r2
 8012200:	4604      	mov	r4, r0
 8012202:	d205      	bcs.n	8012210 <ucdr_check_final_buffer_behavior+0x1c>
 8012204:	2301      	movs	r3, #1
 8012206:	4618      	mov	r0, r3
 8012208:	bd10      	pop	{r4, pc}
 801220a:	2300      	movs	r3, #0
 801220c:	4618      	mov	r0, r3
 801220e:	4770      	bx	lr
 8012210:	6982      	ldr	r2, [r0, #24]
 8012212:	b13a      	cbz	r2, 8012224 <ucdr_check_final_buffer_behavior+0x30>
 8012214:	69c1      	ldr	r1, [r0, #28]
 8012216:	4790      	blx	r2
 8012218:	f080 0301 	eor.w	r3, r0, #1
 801221c:	75a0      	strb	r0, [r4, #22]
 801221e:	b2db      	uxtb	r3, r3
 8012220:	4618      	mov	r0, r3
 8012222:	bd10      	pop	{r4, pc}
 8012224:	2001      	movs	r0, #1
 8012226:	75a0      	strb	r0, [r4, #22]
 8012228:	e7fa      	b.n	8012220 <ucdr_check_final_buffer_behavior+0x2c>
 801222a:	bf00      	nop

0801222c <ucdr_alignment>:
 801222c:	fbb0 f2f1 	udiv	r2, r0, r1
 8012230:	fb02 0011 	mls	r0, r2, r1, r0
 8012234:	1e4b      	subs	r3, r1, #1
 8012236:	1a08      	subs	r0, r1, r0
 8012238:	4018      	ands	r0, r3
 801223a:	4770      	bx	lr

0801223c <ucdr_buffer_alignment>:
 801223c:	7d43      	ldrb	r3, [r0, #21]
 801223e:	428b      	cmp	r3, r1
 8012240:	d209      	bcs.n	8012256 <ucdr_buffer_alignment+0x1a>
 8012242:	6903      	ldr	r3, [r0, #16]
 8012244:	1e4a      	subs	r2, r1, #1
 8012246:	fbb3 f0f1 	udiv	r0, r3, r1
 801224a:	fb01 3010 	mls	r0, r1, r0, r3
 801224e:	1a09      	subs	r1, r1, r0
 8012250:	ea01 0002 	and.w	r0, r1, r2
 8012254:	4770      	bx	lr
 8012256:	2000      	movs	r0, #0
 8012258:	4770      	bx	lr
 801225a:	bf00      	nop

0801225c <ucdr_align_to>:
 801225c:	b538      	push	{r3, r4, r5, lr}
 801225e:	4604      	mov	r4, r0
 8012260:	460d      	mov	r5, r1
 8012262:	f7ff ffeb 	bl	801223c <ucdr_buffer_alignment>
 8012266:	68a3      	ldr	r3, [r4, #8]
 8012268:	7565      	strb	r5, [r4, #21]
 801226a:	181a      	adds	r2, r3, r0
 801226c:	6923      	ldr	r3, [r4, #16]
 801226e:	4418      	add	r0, r3
 8012270:	6863      	ldr	r3, [r4, #4]
 8012272:	4293      	cmp	r3, r2
 8012274:	6120      	str	r0, [r4, #16]
 8012276:	bf28      	it	cs
 8012278:	4613      	movcs	r3, r2
 801227a:	60a3      	str	r3, [r4, #8]
 801227c:	bd38      	pop	{r3, r4, r5, pc}
 801227e:	bf00      	nop

08012280 <ucdr_buffer_remaining>:
 8012280:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8012284:	1a10      	subs	r0, r2, r0
 8012286:	4770      	bx	lr

08012288 <ucdr_check_final_buffer_behavior_array>:
 8012288:	b538      	push	{r3, r4, r5, lr}
 801228a:	7d83      	ldrb	r3, [r0, #22]
 801228c:	b9a3      	cbnz	r3, 80122b8 <ucdr_check_final_buffer_behavior_array+0x30>
 801228e:	4604      	mov	r4, r0
 8012290:	460d      	mov	r5, r1
 8012292:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8012296:	429a      	cmp	r2, r3
 8012298:	d300      	bcc.n	801229c <ucdr_check_final_buffer_behavior_array+0x14>
 801229a:	b931      	cbnz	r1, 80122aa <ucdr_check_final_buffer_behavior_array+0x22>
 801229c:	4620      	mov	r0, r4
 801229e:	f7ff ffef 	bl	8012280 <ucdr_buffer_remaining>
 80122a2:	42a8      	cmp	r0, r5
 80122a4:	bf28      	it	cs
 80122a6:	4628      	movcs	r0, r5
 80122a8:	bd38      	pop	{r3, r4, r5, pc}
 80122aa:	6983      	ldr	r3, [r0, #24]
 80122ac:	b133      	cbz	r3, 80122bc <ucdr_check_final_buffer_behavior_array+0x34>
 80122ae:	69c1      	ldr	r1, [r0, #28]
 80122b0:	4798      	blx	r3
 80122b2:	75a0      	strb	r0, [r4, #22]
 80122b4:	2800      	cmp	r0, #0
 80122b6:	d0f1      	beq.n	801229c <ucdr_check_final_buffer_behavior_array+0x14>
 80122b8:	2000      	movs	r0, #0
 80122ba:	bd38      	pop	{r3, r4, r5, pc}
 80122bc:	2301      	movs	r3, #1
 80122be:	7583      	strb	r3, [r0, #22]
 80122c0:	e7fa      	b.n	80122b8 <ucdr_check_final_buffer_behavior_array+0x30>
 80122c2:	bf00      	nop

080122c4 <ucdr_advance_buffer>:
 80122c4:	b538      	push	{r3, r4, r5, lr}
 80122c6:	4604      	mov	r4, r0
 80122c8:	460d      	mov	r5, r1
 80122ca:	f7ff ff87 	bl	80121dc <ucdr_check_buffer_available_for>
 80122ce:	b178      	cbz	r0, 80122f0 <ucdr_advance_buffer+0x2c>
 80122d0:	6923      	ldr	r3, [r4, #16]
 80122d2:	68a2      	ldr	r2, [r4, #8]
 80122d4:	442b      	add	r3, r5
 80122d6:	442a      	add	r2, r5
 80122d8:	6123      	str	r3, [r4, #16]
 80122da:	2301      	movs	r3, #1
 80122dc:	60a2      	str	r2, [r4, #8]
 80122de:	7563      	strb	r3, [r4, #21]
 80122e0:	bd38      	pop	{r3, r4, r5, pc}
 80122e2:	68a2      	ldr	r2, [r4, #8]
 80122e4:	1a2d      	subs	r5, r5, r0
 80122e6:	6923      	ldr	r3, [r4, #16]
 80122e8:	4402      	add	r2, r0
 80122ea:	4418      	add	r0, r3
 80122ec:	60a2      	str	r2, [r4, #8]
 80122ee:	6120      	str	r0, [r4, #16]
 80122f0:	4629      	mov	r1, r5
 80122f2:	2201      	movs	r2, #1
 80122f4:	4620      	mov	r0, r4
 80122f6:	f7ff ffc7 	bl	8012288 <ucdr_check_final_buffer_behavior_array>
 80122fa:	2800      	cmp	r0, #0
 80122fc:	d1f1      	bne.n	80122e2 <ucdr_advance_buffer+0x1e>
 80122fe:	2301      	movs	r3, #1
 8012300:	7563      	strb	r3, [r4, #21]
 8012302:	bd38      	pop	{r3, r4, r5, pc}

08012304 <__default_zero_allocate>:
 8012304:	f001 b802 	b.w	801330c <calloc>

08012308 <__default_reallocate>:
 8012308:	f001 b8ec 	b.w	80134e4 <realloc>

0801230c <__default_deallocate>:
 801230c:	f001 b834 	b.w	8013378 <free>

08012310 <__default_allocate>:
 8012310:	f001 b82a 	b.w	8013368 <malloc>

08012314 <rcutils_get_default_allocator>:
 8012314:	b510      	push	{r4, lr}
 8012316:	4c05      	ldr	r4, [pc, #20]	@ (801232c <rcutils_get_default_allocator+0x18>)
 8012318:	4686      	mov	lr, r0
 801231a:	4684      	mov	ip, r0
 801231c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801231e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012322:	6823      	ldr	r3, [r4, #0]
 8012324:	4670      	mov	r0, lr
 8012326:	f8cc 3000 	str.w	r3, [ip]
 801232a:	bd10      	pop	{r4, pc}
 801232c:	24000df8 	.word	0x24000df8

08012330 <get_message_typesupport_handle_function>:
 8012330:	b510      	push	{r4, lr}
 8012332:	4604      	mov	r4, r0
 8012334:	6800      	ldr	r0, [r0, #0]
 8012336:	f7ed ffd3 	bl	80002e0 <strcmp>
 801233a:	2800      	cmp	r0, #0
 801233c:	bf0c      	ite	eq
 801233e:	4620      	moveq	r0, r4
 8012340:	2000      	movne	r0, #0
 8012342:	bd10      	pop	{r4, pc}

08012344 <get_service_typesupport_handle_function>:
 8012344:	b510      	push	{r4, lr}
 8012346:	4604      	mov	r4, r0
 8012348:	6800      	ldr	r0, [r0, #0]
 801234a:	f7ed ffc9 	bl	80002e0 <strcmp>
 801234e:	2800      	cmp	r0, #0
 8012350:	bf0c      	ite	eq
 8012352:	4620      	moveq	r0, r4
 8012354:	2000      	movne	r0, #0
 8012356:	bd10      	pop	{r4, pc}

08012358 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8012358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801235c:	6805      	ldr	r5, [r0, #0]
 801235e:	4604      	mov	r4, r0
 8012360:	460e      	mov	r6, r1
 8012362:	4628      	mov	r0, r5
 8012364:	f7ed ffbc 	bl	80002e0 <strcmp>
 8012368:	b1c8      	cbz	r0, 801239e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801236a:	4b11      	ldr	r3, [pc, #68]	@ (80123b0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	429d      	cmp	r5, r3
 8012370:	d112      	bne.n	8012398 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8012372:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8012376:	f8d8 4000 	ldr.w	r4, [r8]
 801237a:	b16c      	cbz	r4, 8012398 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801237c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8012380:	2700      	movs	r7, #0
 8012382:	3d04      	subs	r5, #4
 8012384:	4631      	mov	r1, r6
 8012386:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801238a:	f7ed ffa9 	bl	80002e0 <strcmp>
 801238e:	00bb      	lsls	r3, r7, #2
 8012390:	b140      	cbz	r0, 80123a4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8012392:	3701      	adds	r7, #1
 8012394:	42bc      	cmp	r4, r7
 8012396:	d1f5      	bne.n	8012384 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8012398:	2000      	movs	r0, #0
 801239a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801239e:	4620      	mov	r0, r4
 80123a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123a4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80123a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123ac:	58d3      	ldr	r3, [r2, r3]
 80123ae:	4718      	bx	r3
 80123b0:	24000e0c 	.word	0x24000e0c

080123b4 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 80123b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123b8:	6805      	ldr	r5, [r0, #0]
 80123ba:	4604      	mov	r4, r0
 80123bc:	460e      	mov	r6, r1
 80123be:	4628      	mov	r0, r5
 80123c0:	f7ed ff8e 	bl	80002e0 <strcmp>
 80123c4:	b1c8      	cbz	r0, 80123fa <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 80123c6:	4b11      	ldr	r3, [pc, #68]	@ (801240c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	429d      	cmp	r5, r3
 80123cc:	d112      	bne.n	80123f4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 80123ce:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80123d2:	f8d8 4000 	ldr.w	r4, [r8]
 80123d6:	b16c      	cbz	r4, 80123f4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 80123d8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80123dc:	2700      	movs	r7, #0
 80123de:	3d04      	subs	r5, #4
 80123e0:	4631      	mov	r1, r6
 80123e2:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80123e6:	f7ed ff7b 	bl	80002e0 <strcmp>
 80123ea:	00bb      	lsls	r3, r7, #2
 80123ec:	b140      	cbz	r0, 8012400 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 80123ee:	3701      	adds	r7, #1
 80123f0:	42bc      	cmp	r4, r7
 80123f2:	d1f5      	bne.n	80123e0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 80123f4:	2000      	movs	r0, #0
 80123f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123fa:	4620      	mov	r0, r4
 80123fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012400:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012408:	58d3      	ldr	r3, [r2, r3]
 801240a:	4718      	bx	r3
 801240c:	24000e0c 	.word	0x24000e0c

08012410 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 8012410:	f000 bcb4 	b.w	8012d7c <std_msgs__msg__Header__init>

08012414 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 8012414:	f000 bcd6 	b.w	8012dc4 <std_msgs__msg__Header__fini>

08012418 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8012418:	b508      	push	{r3, lr}
 801241a:	f7fe ffd3 	bl	80113c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801241e:	4b06      	ldr	r3, [pc, #24]	@ (8012438 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8012420:	4906      	ldr	r1, [pc, #24]	@ (801243c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 8012422:	681a      	ldr	r2, [r3, #0]
 8012424:	60c8      	str	r0, [r1, #12]
 8012426:	b10a      	cbz	r2, 801242c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 8012428:	4803      	ldr	r0, [pc, #12]	@ (8012438 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 801242a:	bd08      	pop	{r3, pc}
 801242c:	4a04      	ldr	r2, [pc, #16]	@ (8012440 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 801242e:	4802      	ldr	r0, [pc, #8]	@ (8012438 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8012430:	6812      	ldr	r2, [r2, #0]
 8012432:	601a      	str	r2, [r3, #0]
 8012434:	bd08      	pop	{r3, pc}
 8012436:	bf00      	nop
 8012438:	24000e8c 	.word	0x24000e8c
 801243c:	24000e14 	.word	0x24000e14
 8012440:	24000e10 	.word	0x24000e10

08012444 <_Header__max_serialized_size>:
 8012444:	b500      	push	{lr}
 8012446:	b083      	sub	sp, #12
 8012448:	2301      	movs	r3, #1
 801244a:	2100      	movs	r1, #0
 801244c:	f10d 0007 	add.w	r0, sp, #7
 8012450:	f88d 3007 	strb.w	r3, [sp, #7]
 8012454:	f7ff f814 	bl	8011480 <max_serialized_size_builtin_interfaces__msg__Time>
 8012458:	b003      	add	sp, #12
 801245a:	f85d fb04 	ldr.w	pc, [sp], #4
 801245e:	bf00      	nop

08012460 <get_serialized_size_std_msgs__msg__Header>:
 8012460:	b570      	push	{r4, r5, r6, lr}
 8012462:	4605      	mov	r5, r0
 8012464:	b168      	cbz	r0, 8012482 <get_serialized_size_std_msgs__msg__Header+0x22>
 8012466:	460c      	mov	r4, r1
 8012468:	f7fe ffba 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 801246c:	2104      	movs	r1, #4
 801246e:	1826      	adds	r6, r4, r0
 8012470:	f1c4 0405 	rsb	r4, r4, #5
 8012474:	4630      	mov	r0, r6
 8012476:	f7ff fed9 	bl	801222c <ucdr_alignment>
 801247a:	68e9      	ldr	r1, [r5, #12]
 801247c:	440c      	add	r4, r1
 801247e:	4404      	add	r4, r0
 8012480:	19a0      	adds	r0, r4, r6
 8012482:	bd70      	pop	{r4, r5, r6, pc}

08012484 <_Header__cdr_deserialize>:
 8012484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012486:	460c      	mov	r4, r1
 8012488:	b083      	sub	sp, #12
 801248a:	b1e9      	cbz	r1, 80124c8 <_Header__cdr_deserialize+0x44>
 801248c:	4606      	mov	r6, r0
 801248e:	f7ff f80b 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012492:	4603      	mov	r3, r0
 8012494:	4621      	mov	r1, r4
 8012496:	4630      	mov	r0, r6
 8012498:	685b      	ldr	r3, [r3, #4]
 801249a:	68db      	ldr	r3, [r3, #12]
 801249c:	4798      	blx	r3
 801249e:	6927      	ldr	r7, [r4, #16]
 80124a0:	ab01      	add	r3, sp, #4
 80124a2:	68a1      	ldr	r1, [r4, #8]
 80124a4:	463a      	mov	r2, r7
 80124a6:	4630      	mov	r0, r6
 80124a8:	f000 fc4e 	bl	8012d48 <ucdr_deserialize_sequence_char>
 80124ac:	9b01      	ldr	r3, [sp, #4]
 80124ae:	4605      	mov	r5, r0
 80124b0:	b920      	cbnz	r0, 80124bc <_Header__cdr_deserialize+0x38>
 80124b2:	429f      	cmp	r7, r3
 80124b4:	d30c      	bcc.n	80124d0 <_Header__cdr_deserialize+0x4c>
 80124b6:	4628      	mov	r0, r5
 80124b8:	b003      	add	sp, #12
 80124ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124bc:	b103      	cbz	r3, 80124c0 <_Header__cdr_deserialize+0x3c>
 80124be:	3b01      	subs	r3, #1
 80124c0:	4628      	mov	r0, r5
 80124c2:	60e3      	str	r3, [r4, #12]
 80124c4:	b003      	add	sp, #12
 80124c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124c8:	460d      	mov	r5, r1
 80124ca:	4628      	mov	r0, r5
 80124cc:	b003      	add	sp, #12
 80124ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124d0:	2101      	movs	r1, #1
 80124d2:	4630      	mov	r0, r6
 80124d4:	75b5      	strb	r5, [r6, #22]
 80124d6:	7571      	strb	r1, [r6, #21]
 80124d8:	60e5      	str	r5, [r4, #12]
 80124da:	f7ff febf 	bl	801225c <ucdr_align_to>
 80124de:	4630      	mov	r0, r6
 80124e0:	9901      	ldr	r1, [sp, #4]
 80124e2:	f7ff feef 	bl	80122c4 <ucdr_advance_buffer>
 80124e6:	4628      	mov	r0, r5
 80124e8:	b003      	add	sp, #12
 80124ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080124ec <_Header__cdr_serialize>:
 80124ec:	b308      	cbz	r0, 8012532 <_Header__cdr_serialize+0x46>
 80124ee:	b570      	push	{r4, r5, r6, lr}
 80124f0:	4604      	mov	r4, r0
 80124f2:	460d      	mov	r5, r1
 80124f4:	f7fe ffd8 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80124f8:	4603      	mov	r3, r0
 80124fa:	4629      	mov	r1, r5
 80124fc:	4620      	mov	r0, r4
 80124fe:	685b      	ldr	r3, [r3, #4]
 8012500:	689b      	ldr	r3, [r3, #8]
 8012502:	4798      	blx	r3
 8012504:	68a6      	ldr	r6, [r4, #8]
 8012506:	b15e      	cbz	r6, 8012520 <_Header__cdr_serialize+0x34>
 8012508:	4630      	mov	r0, r6
 801250a:	f7ed fef3 	bl	80002f4 <strlen>
 801250e:	4603      	mov	r3, r0
 8012510:	1c42      	adds	r2, r0, #1
 8012512:	4631      	mov	r1, r6
 8012514:	4628      	mov	r0, r5
 8012516:	60e3      	str	r3, [r4, #12]
 8012518:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801251c:	f000 bc02 	b.w	8012d24 <ucdr_serialize_sequence_char>
 8012520:	4633      	mov	r3, r6
 8012522:	4632      	mov	r2, r6
 8012524:	4631      	mov	r1, r6
 8012526:	4628      	mov	r0, r5
 8012528:	60e3      	str	r3, [r4, #12]
 801252a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801252e:	f000 bbf9 	b.w	8012d24 <ucdr_serialize_sequence_char>
 8012532:	4770      	bx	lr

08012534 <_Header__get_serialized_size>:
 8012534:	b538      	push	{r3, r4, r5, lr}
 8012536:	4604      	mov	r4, r0
 8012538:	b150      	cbz	r0, 8012550 <_Header__get_serialized_size+0x1c>
 801253a:	2100      	movs	r1, #0
 801253c:	f7fe ff50 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 8012540:	2104      	movs	r1, #4
 8012542:	4605      	mov	r5, r0
 8012544:	f7ff fe72 	bl	801222c <ucdr_alignment>
 8012548:	68e2      	ldr	r2, [r4, #12]
 801254a:	3205      	adds	r2, #5
 801254c:	1953      	adds	r3, r2, r5
 801254e:	4418      	add	r0, r3
 8012550:	bd38      	pop	{r3, r4, r5, pc}
 8012552:	bf00      	nop

08012554 <max_serialized_size_std_msgs__msg__Header>:
 8012554:	2301      	movs	r3, #1
 8012556:	b510      	push	{r4, lr}
 8012558:	7003      	strb	r3, [r0, #0]
 801255a:	4604      	mov	r4, r0
 801255c:	f7fe ff90 	bl	8011480 <max_serialized_size_builtin_interfaces__msg__Time>
 8012560:	2300      	movs	r3, #0
 8012562:	7023      	strb	r3, [r4, #0]
 8012564:	bd10      	pop	{r4, pc}
 8012566:	bf00      	nop

08012568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8012568:	4800      	ldr	r0, [pc, #0]	@ (801256c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 801256a:	4770      	bx	lr
 801256c:	24000e98 	.word	0x24000e98

08012570 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8012570:	4a02      	ldr	r2, [pc, #8]	@ (801257c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xc>)
 8012572:	4b03      	ldr	r3, [pc, #12]	@ (8012580 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x10>)
 8012574:	6812      	ldr	r2, [r2, #0]
 8012576:	601a      	str	r2, [r3, #0]
 8012578:	4770      	bx	lr
 801257a:	bf00      	nop
 801257c:	24000e0c 	.word	0x24000e0c
 8012580:	24000ec8 	.word	0x24000ec8

08012584 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8012584:	4a02      	ldr	r2, [pc, #8]	@ (8012590 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xc>)
 8012586:	4b03      	ldr	r3, [pc, #12]	@ (8012594 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x10>)
 8012588:	6812      	ldr	r2, [r2, #0]
 801258a:	601a      	str	r2, [r3, #0]
 801258c:	4770      	bx	lr
 801258e:	bf00      	nop
 8012590:	24000e0c 	.word	0x24000e0c
 8012594:	24000edc 	.word	0x24000edc

08012598 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8012598:	4a02      	ldr	r2, [pc, #8]	@ (80125a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xc>)
 801259a:	4b03      	ldr	r3, [pc, #12]	@ (80125a8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x10>)
 801259c:	6812      	ldr	r2, [r2, #0]
 801259e:	601a      	str	r2, [r3, #0]
 80125a0:	4770      	bx	lr
 80125a2:	bf00      	nop
 80125a4:	24000e0c 	.word	0x24000e0c
 80125a8:	24000ef0 	.word	0x24000ef0

080125ac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 80125ac:	4a02      	ldr	r2, [pc, #8]	@ (80125b8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xc>)
 80125ae:	4b03      	ldr	r3, [pc, #12]	@ (80125bc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x10>)
 80125b0:	6812      	ldr	r2, [r2, #0]
 80125b2:	601a      	str	r2, [r3, #0]
 80125b4:	4770      	bx	lr
 80125b6:	bf00      	nop
 80125b8:	24000e0c 	.word	0x24000e0c
 80125bc:	24000f04 	.word	0x24000f04

080125c0 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_init_function>:
 80125c0:	f000 bc0c 	b.w	8012ddc <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>

080125c4 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_fini_function>:
 80125c4:	f000 bc2e 	b.w	8012e24 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>

080125c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 80125c8:	b510      	push	{r4, lr}
 80125ca:	4c08      	ldr	r4, [pc, #32]	@ (80125ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x24>)
 80125cc:	f7ff ff24 	bl	8012418 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 80125d0:	60e0      	str	r0, [r4, #12]
 80125d2:	f000 fc93 	bl	8012efc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 80125d6:	4b06      	ldr	r3, [pc, #24]	@ (80125f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 80125d8:	64a0      	str	r0, [r4, #72]	@ 0x48
 80125da:	681a      	ldr	r2, [r3, #0]
 80125dc:	b10a      	cbz	r2, 80125e2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1a>
 80125de:	4804      	ldr	r0, [pc, #16]	@ (80125f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 80125e0:	bd10      	pop	{r4, pc}
 80125e2:	4a04      	ldr	r2, [pc, #16]	@ (80125f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x2c>)
 80125e4:	4802      	ldr	r0, [pc, #8]	@ (80125f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 80125e6:	6812      	ldr	r2, [r2, #0]
 80125e8:	601a      	str	r2, [r3, #0]
 80125ea:	bd10      	pop	{r4, pc}
 80125ec:	24000f10 	.word	0x24000f10
 80125f0:	24000f88 	.word	0x24000f88
 80125f4:	24000e10 	.word	0x24000e10

080125f8 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_init_function>:
 80125f8:	f000 bc20 	b.w	8012e3c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>

080125fc <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_fini_function>:
 80125fc:	f000 bc42 	b.w	8012e84 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>

08012600 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8012600:	b510      	push	{r4, lr}
 8012602:	4c08      	ldr	r4, [pc, #32]	@ (8012624 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x24>)
 8012604:	f7ff ff08 	bl	8012418 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012608:	60e0      	str	r0, [r4, #12]
 801260a:	f000 fc89 	bl	8012f20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 801260e:	4b06      	ldr	r3, [pc, #24]	@ (8012628 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8012610:	64a0      	str	r0, [r4, #72]	@ 0x48
 8012612:	681a      	ldr	r2, [r3, #0]
 8012614:	b10a      	cbz	r2, 801261a <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1a>
 8012616:	4804      	ldr	r0, [pc, #16]	@ (8012628 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8012618:	bd10      	pop	{r4, pc}
 801261a:	4a04      	ldr	r2, [pc, #16]	@ (801262c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x2c>)
 801261c:	4802      	ldr	r0, [pc, #8]	@ (8012628 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 801261e:	6812      	ldr	r2, [r2, #0]
 8012620:	601a      	str	r2, [r3, #0]
 8012622:	bd10      	pop	{r4, pc}
 8012624:	24000f94 	.word	0x24000f94
 8012628:	2400100c 	.word	0x2400100c
 801262c:	24000e10 	.word	0x24000e10

08012630 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_init_function>:
 8012630:	f000 bc34 	b.w	8012e9c <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>

08012634 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_fini_function>:
 8012634:	f000 bc44 	b.w	8012ec0 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>

08012638 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8012638:	b508      	push	{r3, lr}
 801263a:	f7fe fec3 	bl	80113c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801263e:	4b06      	ldr	r3, [pc, #24]	@ (8012658 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8012640:	4906      	ldr	r1, [pc, #24]	@ (801265c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x24>)
 8012642:	681a      	ldr	r2, [r3, #0]
 8012644:	60c8      	str	r0, [r1, #12]
 8012646:	b10a      	cbz	r2, 801264c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>
 8012648:	4803      	ldr	r0, [pc, #12]	@ (8012658 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 801264a:	bd08      	pop	{r3, pc}
 801264c:	4a04      	ldr	r2, [pc, #16]	@ (8012660 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x28>)
 801264e:	4802      	ldr	r0, [pc, #8]	@ (8012658 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8012650:	6812      	ldr	r2, [r2, #0]
 8012652:	601a      	str	r2, [r3, #0]
 8012654:	bd08      	pop	{r3, pc}
 8012656:	bf00      	nop
 8012658:	24001090 	.word	0x24001090
 801265c:	24001018 	.word	0x24001018
 8012660:	24000e10 	.word	0x24000e10

08012664 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_init_function>:
 8012664:	f000 bc30 	b.w	8012ec8 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>

08012668 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_fini_function>:
 8012668:	f000 bc40 	b.w	8012eec <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>

0801266c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 801266c:	b508      	push	{r3, lr}
 801266e:	f7fe fea9 	bl	80113c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012672:	4b06      	ldr	r3, [pc, #24]	@ (801268c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8012674:	4906      	ldr	r1, [pc, #24]	@ (8012690 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x24>)
 8012676:	681a      	ldr	r2, [r3, #0]
 8012678:	60c8      	str	r0, [r1, #12]
 801267a:	b10a      	cbz	r2, 8012680 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>
 801267c:	4803      	ldr	r0, [pc, #12]	@ (801268c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 801267e:	bd08      	pop	{r3, pc}
 8012680:	4a04      	ldr	r2, [pc, #16]	@ (8012694 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x28>)
 8012682:	4802      	ldr	r0, [pc, #8]	@ (801268c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8012684:	6812      	ldr	r2, [r2, #0]
 8012686:	601a      	str	r2, [r3, #0]
 8012688:	bd08      	pop	{r3, pc}
 801268a:	bf00      	nop
 801268c:	24001114 	.word	0x24001114
 8012690:	2400109c 	.word	0x2400109c
 8012694:	24000e10 	.word	0x24000e10

08012698 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8012698:	b538      	push	{r3, r4, r5, lr}
 801269a:	4604      	mov	r4, r0
 801269c:	b150      	cbz	r0, 80126b4 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1c>
 801269e:	460d      	mov	r5, r1
 80126a0:	f7ff fede 	bl	8012460 <get_serialized_size_std_msgs__msg__Header>
 80126a4:	4603      	mov	r3, r0
 80126a6:	f104 0018 	add.w	r0, r4, #24
 80126aa:	461c      	mov	r4, r3
 80126ac:	18e9      	adds	r1, r5, r3
 80126ae:	f000 fc45 	bl	8012f3c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 80126b2:	4420      	add	r0, r4
 80126b4:	bd38      	pop	{r3, r4, r5, pc}
 80126b6:	bf00      	nop

080126b8 <_ActuationCommandStamped__cdr_deserialize>:
 80126b8:	b570      	push	{r4, r5, r6, lr}
 80126ba:	460c      	mov	r4, r1
 80126bc:	b199      	cbz	r1, 80126e6 <_ActuationCommandStamped__cdr_deserialize+0x2e>
 80126be:	4605      	mov	r5, r0
 80126c0:	f7ff ff52 	bl	8012568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80126c4:	4603      	mov	r3, r0
 80126c6:	4621      	mov	r1, r4
 80126c8:	4628      	mov	r0, r5
 80126ca:	685b      	ldr	r3, [r3, #4]
 80126cc:	68db      	ldr	r3, [r3, #12]
 80126ce:	4798      	blx	r3
 80126d0:	f000 fcbc 	bl	801304c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 80126d4:	4603      	mov	r3, r0
 80126d6:	f104 0118 	add.w	r1, r4, #24
 80126da:	4628      	mov	r0, r5
 80126dc:	685b      	ldr	r3, [r3, #4]
 80126de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80126e2:	68db      	ldr	r3, [r3, #12]
 80126e4:	4718      	bx	r3
 80126e6:	4608      	mov	r0, r1
 80126e8:	bd70      	pop	{r4, r5, r6, pc}
 80126ea:	bf00      	nop

080126ec <_ActuationCommandStamped__cdr_serialize>:
 80126ec:	b510      	push	{r4, lr}
 80126ee:	b082      	sub	sp, #8
 80126f0:	9101      	str	r1, [sp, #4]
 80126f2:	b1a0      	cbz	r0, 801271e <_ActuationCommandStamped__cdr_serialize+0x32>
 80126f4:	4604      	mov	r4, r0
 80126f6:	f7ff ff37 	bl	8012568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80126fa:	4603      	mov	r3, r0
 80126fc:	9901      	ldr	r1, [sp, #4]
 80126fe:	4620      	mov	r0, r4
 8012700:	685b      	ldr	r3, [r3, #4]
 8012702:	689b      	ldr	r3, [r3, #8]
 8012704:	4798      	blx	r3
 8012706:	f000 fca1 	bl	801304c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 801270a:	4603      	mov	r3, r0
 801270c:	9901      	ldr	r1, [sp, #4]
 801270e:	f104 0018 	add.w	r0, r4, #24
 8012712:	685b      	ldr	r3, [r3, #4]
 8012714:	689b      	ldr	r3, [r3, #8]
 8012716:	b002      	add	sp, #8
 8012718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801271c:	4718      	bx	r3
 801271e:	b002      	add	sp, #8
 8012720:	bd10      	pop	{r4, pc}
 8012722:	bf00      	nop

08012724 <_ActuationCommandStamped__get_serialized_size>:
 8012724:	b510      	push	{r4, lr}
 8012726:	4604      	mov	r4, r0
 8012728:	b148      	cbz	r0, 801273e <_ActuationCommandStamped__get_serialized_size+0x1a>
 801272a:	2100      	movs	r1, #0
 801272c:	f7ff fe98 	bl	8012460 <get_serialized_size_std_msgs__msg__Header>
 8012730:	4601      	mov	r1, r0
 8012732:	f104 0018 	add.w	r0, r4, #24
 8012736:	460c      	mov	r4, r1
 8012738:	f000 fc00 	bl	8012f3c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 801273c:	4420      	add	r0, r4
 801273e:	bd10      	pop	{r4, pc}

08012740 <_ActuationCommandStamped__max_serialized_size>:
 8012740:	b510      	push	{r4, lr}
 8012742:	b082      	sub	sp, #8
 8012744:	2301      	movs	r3, #1
 8012746:	2100      	movs	r1, #0
 8012748:	f10d 0007 	add.w	r0, sp, #7
 801274c:	f88d 3007 	strb.w	r3, [sp, #7]
 8012750:	f7ff ff00 	bl	8012554 <max_serialized_size_std_msgs__msg__Header>
 8012754:	4604      	mov	r4, r0
 8012756:	f10d 0007 	add.w	r0, sp, #7
 801275a:	4621      	mov	r1, r4
 801275c:	f000 fc5c 	bl	8013018 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8012760:	4420      	add	r0, r4
 8012762:	b002      	add	sp, #8
 8012764:	bd10      	pop	{r4, pc}
 8012766:	bf00      	nop

08012768 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8012768:	4800      	ldr	r0, [pc, #0]	@ (801276c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x4>)
 801276a:	4770      	bx	lr
 801276c:	24001120 	.word	0x24001120

08012770 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8012770:	b538      	push	{r3, r4, r5, lr}
 8012772:	4604      	mov	r4, r0
 8012774:	b150      	cbz	r0, 801278c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1c>
 8012776:	460d      	mov	r5, r1
 8012778:	f7ff fe72 	bl	8012460 <get_serialized_size_std_msgs__msg__Header>
 801277c:	4603      	mov	r3, r0
 801277e:	f104 0018 	add.w	r0, r4, #24
 8012782:	461c      	mov	r4, r3
 8012784:	18e9      	adds	r1, r5, r3
 8012786:	f000 fc65 	bl	8013054 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 801278a:	4420      	add	r0, r4
 801278c:	bd38      	pop	{r3, r4, r5, pc}
 801278e:	bf00      	nop

08012790 <_ActuationStatusStamped__cdr_deserialize>:
 8012790:	b570      	push	{r4, r5, r6, lr}
 8012792:	460c      	mov	r4, r1
 8012794:	b199      	cbz	r1, 80127be <_ActuationStatusStamped__cdr_deserialize+0x2e>
 8012796:	4605      	mov	r5, r0
 8012798:	f7ff fee6 	bl	8012568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801279c:	4603      	mov	r3, r0
 801279e:	4621      	mov	r1, r4
 80127a0:	4628      	mov	r0, r5
 80127a2:	685b      	ldr	r3, [r3, #4]
 80127a4:	68db      	ldr	r3, [r3, #12]
 80127a6:	4798      	blx	r3
 80127a8:	f000 fcdc 	bl	8013164 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 80127ac:	4603      	mov	r3, r0
 80127ae:	f104 0118 	add.w	r1, r4, #24
 80127b2:	4628      	mov	r0, r5
 80127b4:	685b      	ldr	r3, [r3, #4]
 80127b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80127ba:	68db      	ldr	r3, [r3, #12]
 80127bc:	4718      	bx	r3
 80127be:	4608      	mov	r0, r1
 80127c0:	bd70      	pop	{r4, r5, r6, pc}
 80127c2:	bf00      	nop

080127c4 <_ActuationStatusStamped__cdr_serialize>:
 80127c4:	b510      	push	{r4, lr}
 80127c6:	b082      	sub	sp, #8
 80127c8:	9101      	str	r1, [sp, #4]
 80127ca:	b1a0      	cbz	r0, 80127f6 <_ActuationStatusStamped__cdr_serialize+0x32>
 80127cc:	4604      	mov	r4, r0
 80127ce:	f7ff fecb 	bl	8012568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80127d2:	4603      	mov	r3, r0
 80127d4:	9901      	ldr	r1, [sp, #4]
 80127d6:	4620      	mov	r0, r4
 80127d8:	685b      	ldr	r3, [r3, #4]
 80127da:	689b      	ldr	r3, [r3, #8]
 80127dc:	4798      	blx	r3
 80127de:	f000 fcc1 	bl	8013164 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 80127e2:	4603      	mov	r3, r0
 80127e4:	9901      	ldr	r1, [sp, #4]
 80127e6:	f104 0018 	add.w	r0, r4, #24
 80127ea:	685b      	ldr	r3, [r3, #4]
 80127ec:	689b      	ldr	r3, [r3, #8]
 80127ee:	b002      	add	sp, #8
 80127f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80127f4:	4718      	bx	r3
 80127f6:	b002      	add	sp, #8
 80127f8:	bd10      	pop	{r4, pc}
 80127fa:	bf00      	nop

080127fc <_ActuationStatusStamped__get_serialized_size>:
 80127fc:	b510      	push	{r4, lr}
 80127fe:	4604      	mov	r4, r0
 8012800:	b148      	cbz	r0, 8012816 <_ActuationStatusStamped__get_serialized_size+0x1a>
 8012802:	2100      	movs	r1, #0
 8012804:	f7ff fe2c 	bl	8012460 <get_serialized_size_std_msgs__msg__Header>
 8012808:	4601      	mov	r1, r0
 801280a:	f104 0018 	add.w	r0, r4, #24
 801280e:	460c      	mov	r4, r1
 8012810:	f000 fc20 	bl	8013054 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8012814:	4420      	add	r0, r4
 8012816:	bd10      	pop	{r4, pc}

08012818 <_ActuationStatusStamped__max_serialized_size>:
 8012818:	b510      	push	{r4, lr}
 801281a:	b082      	sub	sp, #8
 801281c:	2301      	movs	r3, #1
 801281e:	2100      	movs	r1, #0
 8012820:	f10d 0007 	add.w	r0, sp, #7
 8012824:	f88d 3007 	strb.w	r3, [sp, #7]
 8012828:	f7ff fe94 	bl	8012554 <max_serialized_size_std_msgs__msg__Header>
 801282c:	4604      	mov	r4, r0
 801282e:	f10d 0007 	add.w	r0, sp, #7
 8012832:	4621      	mov	r1, r4
 8012834:	f000 fc7c 	bl	8013130 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8012838:	4420      	add	r0, r4
 801283a:	b002      	add	sp, #8
 801283c:	bd10      	pop	{r4, pc}
 801283e:	bf00      	nop

08012840 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8012840:	4800      	ldr	r0, [pc, #0]	@ (8012844 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x4>)
 8012842:	4770      	bx	lr
 8012844:	24001148 	.word	0x24001148

08012848 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8012848:	b538      	push	{r3, r4, r5, lr}
 801284a:	b158      	cbz	r0, 8012864 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x1c>
 801284c:	460d      	mov	r5, r1
 801284e:	f7fe fdc7 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 8012852:	2104      	movs	r1, #4
 8012854:	182c      	adds	r4, r5, r0
 8012856:	f1c5 0504 	rsb	r5, r5, #4
 801285a:	4620      	mov	r0, r4
 801285c:	f7ff fce6 	bl	801222c <ucdr_alignment>
 8012860:	4428      	add	r0, r5
 8012862:	4420      	add	r0, r4
 8012864:	bd38      	pop	{r3, r4, r5, pc}
 8012866:	bf00      	nop

08012868 <_SteeringWheelStatusStamped__cdr_deserialize>:
 8012868:	b538      	push	{r3, r4, r5, lr}
 801286a:	460c      	mov	r4, r1
 801286c:	b179      	cbz	r1, 801288e <_SteeringWheelStatusStamped__cdr_deserialize+0x26>
 801286e:	4605      	mov	r5, r0
 8012870:	f7fe fe1a 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012874:	4603      	mov	r3, r0
 8012876:	4621      	mov	r1, r4
 8012878:	4628      	mov	r0, r5
 801287a:	685b      	ldr	r3, [r3, #4]
 801287c:	68db      	ldr	r3, [r3, #12]
 801287e:	4798      	blx	r3
 8012880:	f104 0108 	add.w	r1, r4, #8
 8012884:	4628      	mov	r0, r5
 8012886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801288a:	f7ff ba81 	b.w	8011d90 <ucdr_deserialize_float>
 801288e:	4608      	mov	r0, r1
 8012890:	bd38      	pop	{r3, r4, r5, pc}
 8012892:	bf00      	nop

08012894 <_SteeringWheelStatusStamped__cdr_serialize>:
 8012894:	b188      	cbz	r0, 80128ba <_SteeringWheelStatusStamped__cdr_serialize+0x26>
 8012896:	b538      	push	{r3, r4, r5, lr}
 8012898:	4604      	mov	r4, r0
 801289a:	460d      	mov	r5, r1
 801289c:	f7fe fe04 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80128a0:	4603      	mov	r3, r0
 80128a2:	4629      	mov	r1, r5
 80128a4:	4620      	mov	r0, r4
 80128a6:	685b      	ldr	r3, [r3, #4]
 80128a8:	689b      	ldr	r3, [r3, #8]
 80128aa:	4798      	blx	r3
 80128ac:	ed94 0a02 	vldr	s0, [r4, #8]
 80128b0:	4628      	mov	r0, r5
 80128b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80128b6:	f7ff b9d3 	b.w	8011c60 <ucdr_serialize_float>
 80128ba:	4770      	bx	lr

080128bc <_SteeringWheelStatusStamped__get_serialized_size>:
 80128bc:	b150      	cbz	r0, 80128d4 <_SteeringWheelStatusStamped__get_serialized_size+0x18>
 80128be:	2100      	movs	r1, #0
 80128c0:	b510      	push	{r4, lr}
 80128c2:	f7fe fd8d 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 80128c6:	4604      	mov	r4, r0
 80128c8:	2104      	movs	r1, #4
 80128ca:	f7ff fcaf 	bl	801222c <ucdr_alignment>
 80128ce:	4420      	add	r0, r4
 80128d0:	3004      	adds	r0, #4
 80128d2:	bd10      	pop	{r4, pc}
 80128d4:	4770      	bx	lr
 80128d6:	bf00      	nop

080128d8 <_SteeringWheelStatusStamped__max_serialized_size>:
 80128d8:	b510      	push	{r4, lr}
 80128da:	b082      	sub	sp, #8
 80128dc:	2301      	movs	r3, #1
 80128de:	2100      	movs	r1, #0
 80128e0:	f10d 0007 	add.w	r0, sp, #7
 80128e4:	f88d 3007 	strb.w	r3, [sp, #7]
 80128e8:	f7fe fdca 	bl	8011480 <max_serialized_size_builtin_interfaces__msg__Time>
 80128ec:	4604      	mov	r4, r0
 80128ee:	2104      	movs	r1, #4
 80128f0:	f7ff fc9c 	bl	801222c <ucdr_alignment>
 80128f4:	4420      	add	r0, r4
 80128f6:	3004      	adds	r0, #4
 80128f8:	b002      	add	sp, #8
 80128fa:	bd10      	pop	{r4, pc}

080128fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80128fc:	4800      	ldr	r0, [pc, #0]	@ (8012900 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x4>)
 80128fe:	4770      	bx	lr
 8012900:	24001170 	.word	0x24001170

08012904 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8012904:	b538      	push	{r3, r4, r5, lr}
 8012906:	b158      	cbz	r0, 8012920 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x1c>
 8012908:	460d      	mov	r5, r1
 801290a:	f7fe fd69 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 801290e:	2101      	movs	r1, #1
 8012910:	182c      	adds	r4, r5, r0
 8012912:	f1c5 0501 	rsb	r5, r5, #1
 8012916:	4620      	mov	r0, r4
 8012918:	f7ff fc88 	bl	801222c <ucdr_alignment>
 801291c:	4428      	add	r0, r5
 801291e:	4420      	add	r0, r4
 8012920:	bd38      	pop	{r3, r4, r5, pc}
 8012922:	bf00      	nop

08012924 <_VehicleEmergencyStamped__cdr_deserialize>:
 8012924:	b538      	push	{r3, r4, r5, lr}
 8012926:	460c      	mov	r4, r1
 8012928:	b179      	cbz	r1, 801294a <_VehicleEmergencyStamped__cdr_deserialize+0x26>
 801292a:	4605      	mov	r5, r0
 801292c:	f7fe fdbc 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012930:	4603      	mov	r3, r0
 8012932:	4621      	mov	r1, r4
 8012934:	4628      	mov	r0, r5
 8012936:	685b      	ldr	r3, [r3, #4]
 8012938:	68db      	ldr	r3, [r3, #12]
 801293a:	4798      	blx	r3
 801293c:	f104 0108 	add.w	r1, r4, #8
 8012940:	4628      	mov	r0, r5
 8012942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012946:	f7fe bdc9 	b.w	80114dc <ucdr_deserialize_bool>
 801294a:	4608      	mov	r0, r1
 801294c:	bd38      	pop	{r3, r4, r5, pc}
 801294e:	bf00      	nop

08012950 <_VehicleEmergencyStamped__cdr_serialize>:
 8012950:	b180      	cbz	r0, 8012974 <_VehicleEmergencyStamped__cdr_serialize+0x24>
 8012952:	b538      	push	{r3, r4, r5, lr}
 8012954:	4604      	mov	r4, r0
 8012956:	460d      	mov	r5, r1
 8012958:	f7fe fda6 	bl	80114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801295c:	4603      	mov	r3, r0
 801295e:	4629      	mov	r1, r5
 8012960:	4620      	mov	r0, r4
 8012962:	685b      	ldr	r3, [r3, #4]
 8012964:	689b      	ldr	r3, [r3, #8]
 8012966:	4798      	blx	r3
 8012968:	7a21      	ldrb	r1, [r4, #8]
 801296a:	4628      	mov	r0, r5
 801296c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012970:	f7fe bd9e 	b.w	80114b0 <ucdr_serialize_bool>
 8012974:	4770      	bx	lr
 8012976:	bf00      	nop

08012978 <_VehicleEmergencyStamped__get_serialized_size>:
 8012978:	b150      	cbz	r0, 8012990 <_VehicleEmergencyStamped__get_serialized_size+0x18>
 801297a:	2100      	movs	r1, #0
 801297c:	b510      	push	{r4, lr}
 801297e:	f7fe fd2f 	bl	80113e0 <get_serialized_size_builtin_interfaces__msg__Time>
 8012982:	4604      	mov	r4, r0
 8012984:	2101      	movs	r1, #1
 8012986:	f7ff fc51 	bl	801222c <ucdr_alignment>
 801298a:	4420      	add	r0, r4
 801298c:	3001      	adds	r0, #1
 801298e:	bd10      	pop	{r4, pc}
 8012990:	4770      	bx	lr
 8012992:	bf00      	nop

08012994 <_VehicleEmergencyStamped__max_serialized_size>:
 8012994:	b510      	push	{r4, lr}
 8012996:	b082      	sub	sp, #8
 8012998:	2401      	movs	r4, #1
 801299a:	2100      	movs	r1, #0
 801299c:	f10d 0007 	add.w	r0, sp, #7
 80129a0:	f88d 4007 	strb.w	r4, [sp, #7]
 80129a4:	f7fe fd6c 	bl	8011480 <max_serialized_size_builtin_interfaces__msg__Time>
 80129a8:	4621      	mov	r1, r4
 80129aa:	4604      	mov	r4, r0
 80129ac:	f7ff fc3e 	bl	801222c <ucdr_alignment>
 80129b0:	4420      	add	r0, r4
 80129b2:	3001      	adds	r0, #1
 80129b4:	b002      	add	sp, #8
 80129b6:	bd10      	pop	{r4, pc}

080129b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 80129b8:	4800      	ldr	r0, [pc, #0]	@ (80129bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x4>)
 80129ba:	4770      	bx	lr
 80129bc:	24001198 	.word	0x24001198

080129c0 <autoware_control_msgs__msg__Control__init>:
 80129c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129c4:	4605      	mov	r5, r0
 80129c6:	b3c0      	cbz	r0, 8012a3a <autoware_control_msgs__msg__Control__init+0x7a>
 80129c8:	f000 f9a6 	bl	8012d18 <builtin_interfaces__msg__Time__init>
 80129cc:	4604      	mov	r4, r0
 80129ce:	b310      	cbz	r0, 8012a16 <autoware_control_msgs__msg__Control__init+0x56>
 80129d0:	f105 0608 	add.w	r6, r5, #8
 80129d4:	4630      	mov	r0, r6
 80129d6:	f000 f99f 	bl	8012d18 <builtin_interfaces__msg__Time__init>
 80129da:	4604      	mov	r4, r0
 80129dc:	2800      	cmp	r0, #0
 80129de:	d040      	beq.n	8012a62 <autoware_control_msgs__msg__Control__init+0xa2>
 80129e0:	f105 0710 	add.w	r7, r5, #16
 80129e4:	4638      	mov	r0, r7
 80129e6:	f000 f855 	bl	8012a94 <autoware_control_msgs__msg__Lateral__init>
 80129ea:	4604      	mov	r4, r0
 80129ec:	b348      	cbz	r0, 8012a42 <autoware_control_msgs__msg__Control__init+0x82>
 80129ee:	f105 082c 	add.w	r8, r5, #44	@ 0x2c
 80129f2:	4640      	mov	r0, r8
 80129f4:	f000 f87e 	bl	8012af4 <autoware_control_msgs__msg__Longitudinal__init>
 80129f8:	4604      	mov	r4, r0
 80129fa:	b9d8      	cbnz	r0, 8012a34 <autoware_control_msgs__msg__Control__init+0x74>
 80129fc:	4628      	mov	r0, r5
 80129fe:	f000 f98f 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012a02:	4630      	mov	r0, r6
 8012a04:	f000 f98c 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012a08:	4638      	mov	r0, r7
 8012a0a:	f000 f867 	bl	8012adc <autoware_control_msgs__msg__Lateral__fini>
 8012a0e:	4640      	mov	r0, r8
 8012a10:	f000 f894 	bl	8012b3c <autoware_control_msgs__msg__Longitudinal__fini>
 8012a14:	e00e      	b.n	8012a34 <autoware_control_msgs__msg__Control__init+0x74>
 8012a16:	4628      	mov	r0, r5
 8012a18:	f000 f982 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012a1c:	f105 0008 	add.w	r0, r5, #8
 8012a20:	f000 f97e 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012a24:	f105 0010 	add.w	r0, r5, #16
 8012a28:	f000 f858 	bl	8012adc <autoware_control_msgs__msg__Lateral__fini>
 8012a2c:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8012a30:	f000 f884 	bl	8012b3c <autoware_control_msgs__msg__Longitudinal__fini>
 8012a34:	4620      	mov	r0, r4
 8012a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a3a:	4604      	mov	r4, r0
 8012a3c:	4620      	mov	r0, r4
 8012a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a42:	4628      	mov	r0, r5
 8012a44:	f000 f96c 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012a48:	4630      	mov	r0, r6
 8012a4a:	f000 f969 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012a4e:	4638      	mov	r0, r7
 8012a50:	f000 f844 	bl	8012adc <autoware_control_msgs__msg__Lateral__fini>
 8012a54:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8012a58:	f000 f870 	bl	8012b3c <autoware_control_msgs__msg__Longitudinal__fini>
 8012a5c:	4620      	mov	r0, r4
 8012a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a62:	4628      	mov	r0, r5
 8012a64:	f000 f95c 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012a68:	4630      	mov	r0, r6
 8012a6a:	e7d9      	b.n	8012a20 <autoware_control_msgs__msg__Control__init+0x60>

08012a6c <autoware_control_msgs__msg__Control__fini>:
 8012a6c:	b188      	cbz	r0, 8012a92 <autoware_control_msgs__msg__Control__fini+0x26>
 8012a6e:	b510      	push	{r4, lr}
 8012a70:	4604      	mov	r4, r0
 8012a72:	f000 f955 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012a76:	f104 0008 	add.w	r0, r4, #8
 8012a7a:	f000 f951 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012a7e:	f104 0010 	add.w	r0, r4, #16
 8012a82:	f000 f82b 	bl	8012adc <autoware_control_msgs__msg__Lateral__fini>
 8012a86:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8012a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a8e:	f000 b855 	b.w	8012b3c <autoware_control_msgs__msg__Longitudinal__fini>
 8012a92:	4770      	bx	lr

08012a94 <autoware_control_msgs__msg__Lateral__init>:
 8012a94:	b570      	push	{r4, r5, r6, lr}
 8012a96:	4605      	mov	r5, r0
 8012a98:	b1a8      	cbz	r0, 8012ac6 <autoware_control_msgs__msg__Lateral__init+0x32>
 8012a9a:	f000 f93d 	bl	8012d18 <builtin_interfaces__msg__Time__init>
 8012a9e:	4604      	mov	r4, r0
 8012aa0:	b140      	cbz	r0, 8012ab4 <autoware_control_msgs__msg__Lateral__init+0x20>
 8012aa2:	f105 0608 	add.w	r6, r5, #8
 8012aa6:	4630      	mov	r0, r6
 8012aa8:	f000 f936 	bl	8012d18 <builtin_interfaces__msg__Time__init>
 8012aac:	4604      	mov	r4, r0
 8012aae:	b168      	cbz	r0, 8012acc <autoware_control_msgs__msg__Lateral__init+0x38>
 8012ab0:	4620      	mov	r0, r4
 8012ab2:	bd70      	pop	{r4, r5, r6, pc}
 8012ab4:	4628      	mov	r0, r5
 8012ab6:	f000 f933 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012aba:	f105 0008 	add.w	r0, r5, #8
 8012abe:	f000 f92f 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012ac2:	4620      	mov	r0, r4
 8012ac4:	bd70      	pop	{r4, r5, r6, pc}
 8012ac6:	4604      	mov	r4, r0
 8012ac8:	4620      	mov	r0, r4
 8012aca:	bd70      	pop	{r4, r5, r6, pc}
 8012acc:	4628      	mov	r0, r5
 8012ace:	f000 f927 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012ad2:	4630      	mov	r0, r6
 8012ad4:	f000 f924 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012ad8:	e7ea      	b.n	8012ab0 <autoware_control_msgs__msg__Lateral__init+0x1c>
 8012ada:	bf00      	nop

08012adc <autoware_control_msgs__msg__Lateral__fini>:
 8012adc:	b148      	cbz	r0, 8012af2 <autoware_control_msgs__msg__Lateral__fini+0x16>
 8012ade:	b510      	push	{r4, lr}
 8012ae0:	4604      	mov	r4, r0
 8012ae2:	f000 f91d 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012ae6:	f104 0008 	add.w	r0, r4, #8
 8012aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012aee:	f000 b917 	b.w	8012d20 <builtin_interfaces__msg__Time__fini>
 8012af2:	4770      	bx	lr

08012af4 <autoware_control_msgs__msg__Longitudinal__init>:
 8012af4:	b570      	push	{r4, r5, r6, lr}
 8012af6:	4605      	mov	r5, r0
 8012af8:	b1a8      	cbz	r0, 8012b26 <autoware_control_msgs__msg__Longitudinal__init+0x32>
 8012afa:	f000 f90d 	bl	8012d18 <builtin_interfaces__msg__Time__init>
 8012afe:	4604      	mov	r4, r0
 8012b00:	b140      	cbz	r0, 8012b14 <autoware_control_msgs__msg__Longitudinal__init+0x20>
 8012b02:	f105 0608 	add.w	r6, r5, #8
 8012b06:	4630      	mov	r0, r6
 8012b08:	f000 f906 	bl	8012d18 <builtin_interfaces__msg__Time__init>
 8012b0c:	4604      	mov	r4, r0
 8012b0e:	b168      	cbz	r0, 8012b2c <autoware_control_msgs__msg__Longitudinal__init+0x38>
 8012b10:	4620      	mov	r0, r4
 8012b12:	bd70      	pop	{r4, r5, r6, pc}
 8012b14:	4628      	mov	r0, r5
 8012b16:	f000 f903 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012b1a:	f105 0008 	add.w	r0, r5, #8
 8012b1e:	f000 f8ff 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012b22:	4620      	mov	r0, r4
 8012b24:	bd70      	pop	{r4, r5, r6, pc}
 8012b26:	4604      	mov	r4, r0
 8012b28:	4620      	mov	r0, r4
 8012b2a:	bd70      	pop	{r4, r5, r6, pc}
 8012b2c:	4628      	mov	r0, r5
 8012b2e:	f000 f8f7 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012b32:	4630      	mov	r0, r6
 8012b34:	f000 f8f4 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012b38:	e7ea      	b.n	8012b10 <autoware_control_msgs__msg__Longitudinal__init+0x1c>
 8012b3a:	bf00      	nop

08012b3c <autoware_control_msgs__msg__Longitudinal__fini>:
 8012b3c:	b148      	cbz	r0, 8012b52 <autoware_control_msgs__msg__Longitudinal__fini+0x16>
 8012b3e:	b510      	push	{r4, lr}
 8012b40:	4604      	mov	r4, r0
 8012b42:	f000 f8ed 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012b46:	f104 0008 	add.w	r0, r4, #8
 8012b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b4e:	f000 b8e7 	b.w	8012d20 <builtin_interfaces__msg__Time__fini>
 8012b52:	4770      	bx	lr

08012b54 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init>:
 8012b54:	b538      	push	{r3, r4, r5, lr}
 8012b56:	4604      	mov	r4, r0
 8012b58:	b128      	cbz	r0, 8012b66 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init+0x12>
 8012b5a:	f000 f8dd 	bl	8012d18 <builtin_interfaces__msg__Time__init>
 8012b5e:	4605      	mov	r5, r0
 8012b60:	b120      	cbz	r0, 8012b6c <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init+0x18>
 8012b62:	4628      	mov	r0, r5
 8012b64:	bd38      	pop	{r3, r4, r5, pc}
 8012b66:	4605      	mov	r5, r0
 8012b68:	4628      	mov	r0, r5
 8012b6a:	bd38      	pop	{r3, r4, r5, pc}
 8012b6c:	4620      	mov	r0, r4
 8012b6e:	f000 f8d7 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012b72:	4628      	mov	r0, r5
 8012b74:	bd38      	pop	{r3, r4, r5, pc}
 8012b76:	bf00      	nop

08012b78 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini>:
 8012b78:	b108      	cbz	r0, 8012b7e <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini+0x6>
 8012b7a:	f000 b8d1 	b.w	8012d20 <builtin_interfaces__msg__Time__fini>
 8012b7e:	4770      	bx	lr

08012b80 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__init>:
 8012b80:	3800      	subs	r0, #0
 8012b82:	bf18      	it	ne
 8012b84:	2001      	movne	r0, #1
 8012b86:	4770      	bx	lr

08012b88 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__fini>:
 8012b88:	4770      	bx	lr
 8012b8a:	bf00      	nop

08012b8c <autoware_vehicle_msgs__msg__ControlModeReport__init>:
 8012b8c:	b538      	push	{r3, r4, r5, lr}
 8012b8e:	4604      	mov	r4, r0
 8012b90:	b128      	cbz	r0, 8012b9e <autoware_vehicle_msgs__msg__ControlModeReport__init+0x12>
 8012b92:	f000 f8c1 	bl	8012d18 <builtin_interfaces__msg__Time__init>
 8012b96:	4605      	mov	r5, r0
 8012b98:	b120      	cbz	r0, 8012ba4 <autoware_vehicle_msgs__msg__ControlModeReport__init+0x18>
 8012b9a:	4628      	mov	r0, r5
 8012b9c:	bd38      	pop	{r3, r4, r5, pc}
 8012b9e:	4605      	mov	r5, r0
 8012ba0:	4628      	mov	r0, r5
 8012ba2:	bd38      	pop	{r3, r4, r5, pc}
 8012ba4:	4620      	mov	r0, r4
 8012ba6:	f000 f8bb 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012baa:	4628      	mov	r0, r5
 8012bac:	bd38      	pop	{r3, r4, r5, pc}
 8012bae:	bf00      	nop

08012bb0 <autoware_vehicle_msgs__msg__ControlModeReport__fini>:
 8012bb0:	b108      	cbz	r0, 8012bb6 <autoware_vehicle_msgs__msg__ControlModeReport__fini+0x6>
 8012bb2:	f000 b8b5 	b.w	8012d20 <builtin_interfaces__msg__Time__fini>
 8012bb6:	4770      	bx	lr

08012bb8 <autoware_vehicle_msgs__msg__GearCommand__init>:
 8012bb8:	b538      	push	{r3, r4, r5, lr}
 8012bba:	4604      	mov	r4, r0
 8012bbc:	b128      	cbz	r0, 8012bca <autoware_vehicle_msgs__msg__GearCommand__init+0x12>
 8012bbe:	f000 f8ab 	bl	8012d18 <builtin_interfaces__msg__Time__init>
 8012bc2:	4605      	mov	r5, r0
 8012bc4:	b120      	cbz	r0, 8012bd0 <autoware_vehicle_msgs__msg__GearCommand__init+0x18>
 8012bc6:	4628      	mov	r0, r5
 8012bc8:	bd38      	pop	{r3, r4, r5, pc}
 8012bca:	4605      	mov	r5, r0
 8012bcc:	4628      	mov	r0, r5
 8012bce:	bd38      	pop	{r3, r4, r5, pc}
 8012bd0:	4620      	mov	r0, r4
 8012bd2:	f000 f8a5 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012bd6:	4628      	mov	r0, r5
 8012bd8:	bd38      	pop	{r3, r4, r5, pc}
 8012bda:	bf00      	nop

08012bdc <autoware_vehicle_msgs__msg__GearCommand__fini>:
 8012bdc:	b108      	cbz	r0, 8012be2 <autoware_vehicle_msgs__msg__GearCommand__fini+0x6>
 8012bde:	f000 b89f 	b.w	8012d20 <builtin_interfaces__msg__Time__fini>
 8012be2:	4770      	bx	lr

08012be4 <autoware_vehicle_msgs__msg__GearReport__init>:
 8012be4:	b538      	push	{r3, r4, r5, lr}
 8012be6:	4604      	mov	r4, r0
 8012be8:	b128      	cbz	r0, 8012bf6 <autoware_vehicle_msgs__msg__GearReport__init+0x12>
 8012bea:	f000 f895 	bl	8012d18 <builtin_interfaces__msg__Time__init>
 8012bee:	4605      	mov	r5, r0
 8012bf0:	b120      	cbz	r0, 8012bfc <autoware_vehicle_msgs__msg__GearReport__init+0x18>
 8012bf2:	4628      	mov	r0, r5
 8012bf4:	bd38      	pop	{r3, r4, r5, pc}
 8012bf6:	4605      	mov	r5, r0
 8012bf8:	4628      	mov	r0, r5
 8012bfa:	bd38      	pop	{r3, r4, r5, pc}
 8012bfc:	4620      	mov	r0, r4
 8012bfe:	f000 f88f 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012c02:	4628      	mov	r0, r5
 8012c04:	bd38      	pop	{r3, r4, r5, pc}
 8012c06:	bf00      	nop

08012c08 <autoware_vehicle_msgs__msg__GearReport__fini>:
 8012c08:	b108      	cbz	r0, 8012c0e <autoware_vehicle_msgs__msg__GearReport__fini+0x6>
 8012c0a:	f000 b889 	b.w	8012d20 <builtin_interfaces__msg__Time__fini>
 8012c0e:	4770      	bx	lr

08012c10 <autoware_vehicle_msgs__msg__HazardLightsCommand__init>:
 8012c10:	b538      	push	{r3, r4, r5, lr}
 8012c12:	4604      	mov	r4, r0
 8012c14:	b128      	cbz	r0, 8012c22 <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x12>
 8012c16:	f000 f87f 	bl	8012d18 <builtin_interfaces__msg__Time__init>
 8012c1a:	4605      	mov	r5, r0
 8012c1c:	b120      	cbz	r0, 8012c28 <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x18>
 8012c1e:	4628      	mov	r0, r5
 8012c20:	bd38      	pop	{r3, r4, r5, pc}
 8012c22:	4605      	mov	r5, r0
 8012c24:	4628      	mov	r0, r5
 8012c26:	bd38      	pop	{r3, r4, r5, pc}
 8012c28:	4620      	mov	r0, r4
 8012c2a:	f000 f879 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012c2e:	4628      	mov	r0, r5
 8012c30:	bd38      	pop	{r3, r4, r5, pc}
 8012c32:	bf00      	nop

08012c34 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>:
 8012c34:	b108      	cbz	r0, 8012c3a <autoware_vehicle_msgs__msg__HazardLightsCommand__fini+0x6>
 8012c36:	f000 b873 	b.w	8012d20 <builtin_interfaces__msg__Time__fini>
 8012c3a:	4770      	bx	lr

08012c3c <autoware_vehicle_msgs__msg__HazardLightsReport__init>:
 8012c3c:	b538      	push	{r3, r4, r5, lr}
 8012c3e:	4604      	mov	r4, r0
 8012c40:	b128      	cbz	r0, 8012c4e <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x12>
 8012c42:	f000 f869 	bl	8012d18 <builtin_interfaces__msg__Time__init>
 8012c46:	4605      	mov	r5, r0
 8012c48:	b120      	cbz	r0, 8012c54 <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x18>
 8012c4a:	4628      	mov	r0, r5
 8012c4c:	bd38      	pop	{r3, r4, r5, pc}
 8012c4e:	4605      	mov	r5, r0
 8012c50:	4628      	mov	r0, r5
 8012c52:	bd38      	pop	{r3, r4, r5, pc}
 8012c54:	4620      	mov	r0, r4
 8012c56:	f000 f863 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012c5a:	4628      	mov	r0, r5
 8012c5c:	bd38      	pop	{r3, r4, r5, pc}
 8012c5e:	bf00      	nop

08012c60 <autoware_vehicle_msgs__msg__HazardLightsReport__fini>:
 8012c60:	b108      	cbz	r0, 8012c66 <autoware_vehicle_msgs__msg__HazardLightsReport__fini+0x6>
 8012c62:	f000 b85d 	b.w	8012d20 <builtin_interfaces__msg__Time__fini>
 8012c66:	4770      	bx	lr

08012c68 <autoware_vehicle_msgs__msg__SteeringReport__init>:
 8012c68:	b538      	push	{r3, r4, r5, lr}
 8012c6a:	4604      	mov	r4, r0
 8012c6c:	b128      	cbz	r0, 8012c7a <autoware_vehicle_msgs__msg__SteeringReport__init+0x12>
 8012c6e:	f000 f853 	bl	8012d18 <builtin_interfaces__msg__Time__init>
 8012c72:	4605      	mov	r5, r0
 8012c74:	b120      	cbz	r0, 8012c80 <autoware_vehicle_msgs__msg__SteeringReport__init+0x18>
 8012c76:	4628      	mov	r0, r5
 8012c78:	bd38      	pop	{r3, r4, r5, pc}
 8012c7a:	4605      	mov	r5, r0
 8012c7c:	4628      	mov	r0, r5
 8012c7e:	bd38      	pop	{r3, r4, r5, pc}
 8012c80:	4620      	mov	r0, r4
 8012c82:	f000 f84d 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012c86:	4628      	mov	r0, r5
 8012c88:	bd38      	pop	{r3, r4, r5, pc}
 8012c8a:	bf00      	nop

08012c8c <autoware_vehicle_msgs__msg__SteeringReport__fini>:
 8012c8c:	b108      	cbz	r0, 8012c92 <autoware_vehicle_msgs__msg__SteeringReport__fini+0x6>
 8012c8e:	f000 b847 	b.w	8012d20 <builtin_interfaces__msg__Time__fini>
 8012c92:	4770      	bx	lr

08012c94 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>:
 8012c94:	b538      	push	{r3, r4, r5, lr}
 8012c96:	4604      	mov	r4, r0
 8012c98:	b128      	cbz	r0, 8012ca6 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x12>
 8012c9a:	f000 f83d 	bl	8012d18 <builtin_interfaces__msg__Time__init>
 8012c9e:	4605      	mov	r5, r0
 8012ca0:	b120      	cbz	r0, 8012cac <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x18>
 8012ca2:	4628      	mov	r0, r5
 8012ca4:	bd38      	pop	{r3, r4, r5, pc}
 8012ca6:	4605      	mov	r5, r0
 8012ca8:	4628      	mov	r0, r5
 8012caa:	bd38      	pop	{r3, r4, r5, pc}
 8012cac:	4620      	mov	r0, r4
 8012cae:	f000 f837 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012cb2:	4628      	mov	r0, r5
 8012cb4:	bd38      	pop	{r3, r4, r5, pc}
 8012cb6:	bf00      	nop

08012cb8 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>:
 8012cb8:	b108      	cbz	r0, 8012cbe <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini+0x6>
 8012cba:	f000 b831 	b.w	8012d20 <builtin_interfaces__msg__Time__fini>
 8012cbe:	4770      	bx	lr

08012cc0 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>:
 8012cc0:	b538      	push	{r3, r4, r5, lr}
 8012cc2:	4604      	mov	r4, r0
 8012cc4:	b128      	cbz	r0, 8012cd2 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x12>
 8012cc6:	f000 f827 	bl	8012d18 <builtin_interfaces__msg__Time__init>
 8012cca:	4605      	mov	r5, r0
 8012ccc:	b120      	cbz	r0, 8012cd8 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x18>
 8012cce:	4628      	mov	r0, r5
 8012cd0:	bd38      	pop	{r3, r4, r5, pc}
 8012cd2:	4605      	mov	r5, r0
 8012cd4:	4628      	mov	r0, r5
 8012cd6:	bd38      	pop	{r3, r4, r5, pc}
 8012cd8:	4620      	mov	r0, r4
 8012cda:	f000 f821 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012cde:	4628      	mov	r0, r5
 8012ce0:	bd38      	pop	{r3, r4, r5, pc}
 8012ce2:	bf00      	nop

08012ce4 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>:
 8012ce4:	b108      	cbz	r0, 8012cea <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini+0x6>
 8012ce6:	f000 b81b 	b.w	8012d20 <builtin_interfaces__msg__Time__fini>
 8012cea:	4770      	bx	lr

08012cec <autoware_vehicle_msgs__msg__VelocityReport__init>:
 8012cec:	b538      	push	{r3, r4, r5, lr}
 8012cee:	4604      	mov	r4, r0
 8012cf0:	b128      	cbz	r0, 8012cfe <autoware_vehicle_msgs__msg__VelocityReport__init+0x12>
 8012cf2:	f000 f843 	bl	8012d7c <std_msgs__msg__Header__init>
 8012cf6:	4605      	mov	r5, r0
 8012cf8:	b120      	cbz	r0, 8012d04 <autoware_vehicle_msgs__msg__VelocityReport__init+0x18>
 8012cfa:	4628      	mov	r0, r5
 8012cfc:	bd38      	pop	{r3, r4, r5, pc}
 8012cfe:	4605      	mov	r5, r0
 8012d00:	4628      	mov	r0, r5
 8012d02:	bd38      	pop	{r3, r4, r5, pc}
 8012d04:	4620      	mov	r0, r4
 8012d06:	f000 f85d 	bl	8012dc4 <std_msgs__msg__Header__fini>
 8012d0a:	4628      	mov	r0, r5
 8012d0c:	bd38      	pop	{r3, r4, r5, pc}
 8012d0e:	bf00      	nop

08012d10 <autoware_vehicle_msgs__msg__VelocityReport__fini>:
 8012d10:	b108      	cbz	r0, 8012d16 <autoware_vehicle_msgs__msg__VelocityReport__fini+0x6>
 8012d12:	f000 b857 	b.w	8012dc4 <std_msgs__msg__Header__fini>
 8012d16:	4770      	bx	lr

08012d18 <builtin_interfaces__msg__Time__init>:
 8012d18:	3800      	subs	r0, #0
 8012d1a:	bf18      	it	ne
 8012d1c:	2001      	movne	r0, #1
 8012d1e:	4770      	bx	lr

08012d20 <builtin_interfaces__msg__Time__fini>:
 8012d20:	4770      	bx	lr
 8012d22:	bf00      	nop

08012d24 <ucdr_serialize_sequence_char>:
 8012d24:	b570      	push	{r4, r5, r6, lr}
 8012d26:	4615      	mov	r5, r2
 8012d28:	460e      	mov	r6, r1
 8012d2a:	7d01      	ldrb	r1, [r0, #20]
 8012d2c:	4604      	mov	r4, r0
 8012d2e:	f7fe fcb1 	bl	8011694 <ucdr_serialize_endian_uint32_t>
 8012d32:	b90d      	cbnz	r5, 8012d38 <ucdr_serialize_sequence_char+0x14>
 8012d34:	2001      	movs	r0, #1
 8012d36:	bd70      	pop	{r4, r5, r6, pc}
 8012d38:	462b      	mov	r3, r5
 8012d3a:	4632      	mov	r2, r6
 8012d3c:	7d21      	ldrb	r1, [r4, #20]
 8012d3e:	4620      	mov	r0, r4
 8012d40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d44:	f000 ba12 	b.w	801316c <ucdr_serialize_endian_array_char>

08012d48 <ucdr_deserialize_sequence_char>:
 8012d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d4c:	461d      	mov	r5, r3
 8012d4e:	4616      	mov	r6, r2
 8012d50:	460f      	mov	r7, r1
 8012d52:	461a      	mov	r2, r3
 8012d54:	7d01      	ldrb	r1, [r0, #20]
 8012d56:	4604      	mov	r4, r0
 8012d58:	f7fe fdc4 	bl	80118e4 <ucdr_deserialize_endian_uint32_t>
 8012d5c:	682b      	ldr	r3, [r5, #0]
 8012d5e:	429e      	cmp	r6, r3
 8012d60:	d201      	bcs.n	8012d66 <ucdr_deserialize_sequence_char+0x1e>
 8012d62:	2201      	movs	r2, #1
 8012d64:	75a2      	strb	r2, [r4, #22]
 8012d66:	b913      	cbnz	r3, 8012d6e <ucdr_deserialize_sequence_char+0x26>
 8012d68:	2001      	movs	r0, #1
 8012d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d6e:	463a      	mov	r2, r7
 8012d70:	7d21      	ldrb	r1, [r4, #20]
 8012d72:	4620      	mov	r0, r4
 8012d74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d78:	f000 ba2a 	b.w	80131d0 <ucdr_deserialize_endian_array_char>

08012d7c <std_msgs__msg__Header__init>:
 8012d7c:	b570      	push	{r4, r5, r6, lr}
 8012d7e:	4605      	mov	r5, r0
 8012d80:	b1a8      	cbz	r0, 8012dae <std_msgs__msg__Header__init+0x32>
 8012d82:	f7ff ffc9 	bl	8012d18 <builtin_interfaces__msg__Time__init>
 8012d86:	4604      	mov	r4, r0
 8012d88:	b140      	cbz	r0, 8012d9c <std_msgs__msg__Header__init+0x20>
 8012d8a:	f105 0608 	add.w	r6, r5, #8
 8012d8e:	4630      	mov	r0, r6
 8012d90:	f000 fa52 	bl	8013238 <rosidl_runtime_c__String__init>
 8012d94:	4604      	mov	r4, r0
 8012d96:	b168      	cbz	r0, 8012db4 <std_msgs__msg__Header__init+0x38>
 8012d98:	4620      	mov	r0, r4
 8012d9a:	bd70      	pop	{r4, r5, r6, pc}
 8012d9c:	4628      	mov	r0, r5
 8012d9e:	f7ff ffbf 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012da2:	f105 0008 	add.w	r0, r5, #8
 8012da6:	f000 fa5d 	bl	8013264 <rosidl_runtime_c__String__fini>
 8012daa:	4620      	mov	r0, r4
 8012dac:	bd70      	pop	{r4, r5, r6, pc}
 8012dae:	4604      	mov	r4, r0
 8012db0:	4620      	mov	r0, r4
 8012db2:	bd70      	pop	{r4, r5, r6, pc}
 8012db4:	4628      	mov	r0, r5
 8012db6:	f7ff ffb3 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012dba:	4630      	mov	r0, r6
 8012dbc:	f000 fa52 	bl	8013264 <rosidl_runtime_c__String__fini>
 8012dc0:	e7ea      	b.n	8012d98 <std_msgs__msg__Header__init+0x1c>
 8012dc2:	bf00      	nop

08012dc4 <std_msgs__msg__Header__fini>:
 8012dc4:	b148      	cbz	r0, 8012dda <std_msgs__msg__Header__fini+0x16>
 8012dc6:	b510      	push	{r4, lr}
 8012dc8:	4604      	mov	r4, r0
 8012dca:	f7ff ffa9 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012dce:	f104 0008 	add.w	r0, r4, #8
 8012dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012dd6:	f000 ba45 	b.w	8013264 <rosidl_runtime_c__String__fini>
 8012dda:	4770      	bx	lr

08012ddc <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>:
 8012ddc:	b570      	push	{r4, r5, r6, lr}
 8012dde:	4605      	mov	r5, r0
 8012de0:	b1a8      	cbz	r0, 8012e0e <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x32>
 8012de2:	f7ff ffcb 	bl	8012d7c <std_msgs__msg__Header__init>
 8012de6:	4604      	mov	r4, r0
 8012de8:	b140      	cbz	r0, 8012dfc <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x20>
 8012dea:	f105 0618 	add.w	r6, r5, #24
 8012dee:	4630      	mov	r0, r6
 8012df0:	f000 fa80 	bl	80132f4 <tier4_vehicle_msgs__msg__ActuationCommand__init>
 8012df4:	4604      	mov	r4, r0
 8012df6:	b168      	cbz	r0, 8012e14 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x38>
 8012df8:	4620      	mov	r0, r4
 8012dfa:	bd70      	pop	{r4, r5, r6, pc}
 8012dfc:	4628      	mov	r0, r5
 8012dfe:	f7ff ffe1 	bl	8012dc4 <std_msgs__msg__Header__fini>
 8012e02:	f105 0018 	add.w	r0, r5, #24
 8012e06:	f000 fa79 	bl	80132fc <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 8012e0a:	4620      	mov	r0, r4
 8012e0c:	bd70      	pop	{r4, r5, r6, pc}
 8012e0e:	4604      	mov	r4, r0
 8012e10:	4620      	mov	r0, r4
 8012e12:	bd70      	pop	{r4, r5, r6, pc}
 8012e14:	4628      	mov	r0, r5
 8012e16:	f7ff ffd5 	bl	8012dc4 <std_msgs__msg__Header__fini>
 8012e1a:	4630      	mov	r0, r6
 8012e1c:	f000 fa6e 	bl	80132fc <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 8012e20:	e7ea      	b.n	8012df8 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x1c>
 8012e22:	bf00      	nop

08012e24 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>:
 8012e24:	b148      	cbz	r0, 8012e3a <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini+0x16>
 8012e26:	b510      	push	{r4, lr}
 8012e28:	4604      	mov	r4, r0
 8012e2a:	f7ff ffcb 	bl	8012dc4 <std_msgs__msg__Header__fini>
 8012e2e:	f104 0018 	add.w	r0, r4, #24
 8012e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e36:	f000 ba61 	b.w	80132fc <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 8012e3a:	4770      	bx	lr

08012e3c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>:
 8012e3c:	b570      	push	{r4, r5, r6, lr}
 8012e3e:	4605      	mov	r5, r0
 8012e40:	b1a8      	cbz	r0, 8012e6e <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x32>
 8012e42:	f7ff ff9b 	bl	8012d7c <std_msgs__msg__Header__init>
 8012e46:	4604      	mov	r4, r0
 8012e48:	b140      	cbz	r0, 8012e5c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x20>
 8012e4a:	f105 0618 	add.w	r6, r5, #24
 8012e4e:	4630      	mov	r0, r6
 8012e50:	f000 fa56 	bl	8013300 <tier4_vehicle_msgs__msg__ActuationStatus__init>
 8012e54:	4604      	mov	r4, r0
 8012e56:	b168      	cbz	r0, 8012e74 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x38>
 8012e58:	4620      	mov	r0, r4
 8012e5a:	bd70      	pop	{r4, r5, r6, pc}
 8012e5c:	4628      	mov	r0, r5
 8012e5e:	f7ff ffb1 	bl	8012dc4 <std_msgs__msg__Header__fini>
 8012e62:	f105 0018 	add.w	r0, r5, #24
 8012e66:	f000 fa4f 	bl	8013308 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 8012e6a:	4620      	mov	r0, r4
 8012e6c:	bd70      	pop	{r4, r5, r6, pc}
 8012e6e:	4604      	mov	r4, r0
 8012e70:	4620      	mov	r0, r4
 8012e72:	bd70      	pop	{r4, r5, r6, pc}
 8012e74:	4628      	mov	r0, r5
 8012e76:	f7ff ffa5 	bl	8012dc4 <std_msgs__msg__Header__fini>
 8012e7a:	4630      	mov	r0, r6
 8012e7c:	f000 fa44 	bl	8013308 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 8012e80:	e7ea      	b.n	8012e58 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x1c>
 8012e82:	bf00      	nop

08012e84 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>:
 8012e84:	b148      	cbz	r0, 8012e9a <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini+0x16>
 8012e86:	b510      	push	{r4, lr}
 8012e88:	4604      	mov	r4, r0
 8012e8a:	f7ff ff9b 	bl	8012dc4 <std_msgs__msg__Header__fini>
 8012e8e:	f104 0018 	add.w	r0, r4, #24
 8012e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e96:	f000 ba37 	b.w	8013308 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 8012e9a:	4770      	bx	lr

08012e9c <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>:
 8012e9c:	b538      	push	{r3, r4, r5, lr}
 8012e9e:	4604      	mov	r4, r0
 8012ea0:	b128      	cbz	r0, 8012eae <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x12>
 8012ea2:	f7ff ff39 	bl	8012d18 <builtin_interfaces__msg__Time__init>
 8012ea6:	4605      	mov	r5, r0
 8012ea8:	b120      	cbz	r0, 8012eb4 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x18>
 8012eaa:	4628      	mov	r0, r5
 8012eac:	bd38      	pop	{r3, r4, r5, pc}
 8012eae:	4605      	mov	r5, r0
 8012eb0:	4628      	mov	r0, r5
 8012eb2:	bd38      	pop	{r3, r4, r5, pc}
 8012eb4:	4620      	mov	r0, r4
 8012eb6:	f7ff ff33 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012eba:	4628      	mov	r0, r5
 8012ebc:	bd38      	pop	{r3, r4, r5, pc}
 8012ebe:	bf00      	nop

08012ec0 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>:
 8012ec0:	b108      	cbz	r0, 8012ec6 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini+0x6>
 8012ec2:	f7ff bf2d 	b.w	8012d20 <builtin_interfaces__msg__Time__fini>
 8012ec6:	4770      	bx	lr

08012ec8 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>:
 8012ec8:	b538      	push	{r3, r4, r5, lr}
 8012eca:	4604      	mov	r4, r0
 8012ecc:	b128      	cbz	r0, 8012eda <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x12>
 8012ece:	f7ff ff23 	bl	8012d18 <builtin_interfaces__msg__Time__init>
 8012ed2:	4605      	mov	r5, r0
 8012ed4:	b120      	cbz	r0, 8012ee0 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x18>
 8012ed6:	4628      	mov	r0, r5
 8012ed8:	bd38      	pop	{r3, r4, r5, pc}
 8012eda:	4605      	mov	r5, r0
 8012edc:	4628      	mov	r0, r5
 8012ede:	bd38      	pop	{r3, r4, r5, pc}
 8012ee0:	4620      	mov	r0, r4
 8012ee2:	f7ff ff1d 	bl	8012d20 <builtin_interfaces__msg__Time__fini>
 8012ee6:	4628      	mov	r0, r5
 8012ee8:	bd38      	pop	{r3, r4, r5, pc}
 8012eea:	bf00      	nop

08012eec <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>:
 8012eec:	b108      	cbz	r0, 8012ef2 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini+0x6>
 8012eee:	f7ff bf17 	b.w	8012d20 <builtin_interfaces__msg__Time__fini>
 8012ef2:	4770      	bx	lr

08012ef4 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_init_function>:
 8012ef4:	f000 b9fe 	b.w	80132f4 <tier4_vehicle_msgs__msg__ActuationCommand__init>

08012ef8 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_fini_function>:
 8012ef8:	f000 ba00 	b.w	80132fc <tier4_vehicle_msgs__msg__ActuationCommand__fini>

08012efc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 8012efc:	4b04      	ldr	r3, [pc, #16]	@ (8012f10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 8012efe:	681a      	ldr	r2, [r3, #0]
 8012f00:	b10a      	cbz	r2, 8012f06 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0xa>
 8012f02:	4803      	ldr	r0, [pc, #12]	@ (8012f10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 8012f04:	4770      	bx	lr
 8012f06:	4a03      	ldr	r2, [pc, #12]	@ (8012f14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x18>)
 8012f08:	4801      	ldr	r0, [pc, #4]	@ (8012f10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 8012f0a:	6812      	ldr	r2, [r2, #0]
 8012f0c:	601a      	str	r2, [r3, #0]
 8012f0e:	4770      	bx	lr
 8012f10:	24001274 	.word	0x24001274
 8012f14:	24000e10 	.word	0x24000e10

08012f18 <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_init_function>:
 8012f18:	f000 b9f2 	b.w	8013300 <tier4_vehicle_msgs__msg__ActuationStatus__init>

08012f1c <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_fini_function>:
 8012f1c:	f000 b9f4 	b.w	8013308 <tier4_vehicle_msgs__msg__ActuationStatus__fini>

08012f20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 8012f20:	4b04      	ldr	r3, [pc, #16]	@ (8012f34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 8012f22:	681a      	ldr	r2, [r3, #0]
 8012f24:	b10a      	cbz	r2, 8012f2a <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0xa>
 8012f26:	4803      	ldr	r0, [pc, #12]	@ (8012f34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 8012f28:	4770      	bx	lr
 8012f2a:	4a03      	ldr	r2, [pc, #12]	@ (8012f38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x18>)
 8012f2c:	4801      	ldr	r0, [pc, #4]	@ (8012f34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 8012f2e:	6812      	ldr	r2, [r2, #0]
 8012f30:	601a      	str	r2, [r3, #0]
 8012f32:	4770      	bx	lr
 8012f34:	24001334 	.word	0x24001334
 8012f38:	24000e10 	.word	0x24000e10

08012f3c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 8012f3c:	b1b8      	cbz	r0, 8012f6e <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand+0x32>
 8012f3e:	b538      	push	{r3, r4, r5, lr}
 8012f40:	460d      	mov	r5, r1
 8012f42:	2108      	movs	r1, #8
 8012f44:	4628      	mov	r0, r5
 8012f46:	f7ff f971 	bl	801222c <ucdr_alignment>
 8012f4a:	f105 0308 	add.w	r3, r5, #8
 8012f4e:	2108      	movs	r1, #8
 8012f50:	f1c5 0508 	rsb	r5, r5, #8
 8012f54:	181c      	adds	r4, r3, r0
 8012f56:	4620      	mov	r0, r4
 8012f58:	f7ff f968 	bl	801222c <ucdr_alignment>
 8012f5c:	2108      	movs	r1, #8
 8012f5e:	4408      	add	r0, r1
 8012f60:	4404      	add	r4, r0
 8012f62:	4620      	mov	r0, r4
 8012f64:	f7ff f962 	bl	801222c <ucdr_alignment>
 8012f68:	4428      	add	r0, r5
 8012f6a:	4420      	add	r0, r4
 8012f6c:	bd38      	pop	{r3, r4, r5, pc}
 8012f6e:	4770      	bx	lr

08012f70 <_ActuationCommand__cdr_deserialize>:
 8012f70:	b538      	push	{r3, r4, r5, lr}
 8012f72:	460c      	mov	r4, r1
 8012f74:	b171      	cbz	r1, 8012f94 <_ActuationCommand__cdr_deserialize+0x24>
 8012f76:	4605      	mov	r5, r0
 8012f78:	f7ff f86a 	bl	8012050 <ucdr_deserialize_double>
 8012f7c:	f104 0108 	add.w	r1, r4, #8
 8012f80:	4628      	mov	r0, r5
 8012f82:	f7ff f865 	bl	8012050 <ucdr_deserialize_double>
 8012f86:	f104 0110 	add.w	r1, r4, #16
 8012f8a:	4628      	mov	r0, r5
 8012f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f90:	f7ff b85e 	b.w	8012050 <ucdr_deserialize_double>
 8012f94:	4608      	mov	r0, r1
 8012f96:	bd38      	pop	{r3, r4, r5, pc}

08012f98 <_ActuationCommand__cdr_serialize>:
 8012f98:	b198      	cbz	r0, 8012fc2 <_ActuationCommand__cdr_serialize+0x2a>
 8012f9a:	b538      	push	{r3, r4, r5, lr}
 8012f9c:	460d      	mov	r5, r1
 8012f9e:	4604      	mov	r4, r0
 8012fa0:	ed90 0b00 	vldr	d0, [r0]
 8012fa4:	4608      	mov	r0, r1
 8012fa6:	f7fe ff83 	bl	8011eb0 <ucdr_serialize_double>
 8012faa:	4628      	mov	r0, r5
 8012fac:	ed94 0b02 	vldr	d0, [r4, #8]
 8012fb0:	f7fe ff7e 	bl	8011eb0 <ucdr_serialize_double>
 8012fb4:	4628      	mov	r0, r5
 8012fb6:	ed94 0b04 	vldr	d0, [r4, #16]
 8012fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012fbe:	f7fe bf77 	b.w	8011eb0 <ucdr_serialize_double>
 8012fc2:	4770      	bx	lr

08012fc4 <_ActuationCommand__get_serialized_size>:
 8012fc4:	b190      	cbz	r0, 8012fec <_ActuationCommand__get_serialized_size+0x28>
 8012fc6:	2108      	movs	r1, #8
 8012fc8:	2000      	movs	r0, #0
 8012fca:	b510      	push	{r4, lr}
 8012fcc:	f7ff f92e 	bl	801222c <ucdr_alignment>
 8012fd0:	2108      	movs	r1, #8
 8012fd2:	1844      	adds	r4, r0, r1
 8012fd4:	4620      	mov	r0, r4
 8012fd6:	f7ff f929 	bl	801222c <ucdr_alignment>
 8012fda:	2108      	movs	r1, #8
 8012fdc:	4408      	add	r0, r1
 8012fde:	4404      	add	r4, r0
 8012fe0:	4620      	mov	r0, r4
 8012fe2:	f7ff f923 	bl	801222c <ucdr_alignment>
 8012fe6:	3008      	adds	r0, #8
 8012fe8:	4420      	add	r0, r4
 8012fea:	bd10      	pop	{r4, pc}
 8012fec:	4770      	bx	lr
 8012fee:	bf00      	nop

08012ff0 <_ActuationCommand__max_serialized_size>:
 8012ff0:	b538      	push	{r3, r4, r5, lr}
 8012ff2:	2108      	movs	r1, #8
 8012ff4:	2000      	movs	r0, #0
 8012ff6:	f7ff f919 	bl	801222c <ucdr_alignment>
 8012ffa:	2108      	movs	r1, #8
 8012ffc:	1845      	adds	r5, r0, r1
 8012ffe:	4628      	mov	r0, r5
 8013000:	f7ff f914 	bl	801222c <ucdr_alignment>
 8013004:	2108      	movs	r1, #8
 8013006:	1844      	adds	r4, r0, r1
 8013008:	442c      	add	r4, r5
 801300a:	4620      	mov	r0, r4
 801300c:	f7ff f90e 	bl	801222c <ucdr_alignment>
 8013010:	3008      	adds	r0, #8
 8013012:	4420      	add	r0, r4
 8013014:	bd38      	pop	{r3, r4, r5, pc}
 8013016:	bf00      	nop

08013018 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 8013018:	b570      	push	{r4, r5, r6, lr}
 801301a:	460c      	mov	r4, r1
 801301c:	2301      	movs	r3, #1
 801301e:	2108      	movs	r1, #8
 8013020:	f104 0508 	add.w	r5, r4, #8
 8013024:	7003      	strb	r3, [r0, #0]
 8013026:	4620      	mov	r0, r4
 8013028:	f1c4 0408 	rsb	r4, r4, #8
 801302c:	f7ff f8fe 	bl	801222c <ucdr_alignment>
 8013030:	1946      	adds	r6, r0, r5
 8013032:	2108      	movs	r1, #8
 8013034:	4630      	mov	r0, r6
 8013036:	f7ff f8f9 	bl	801222c <ucdr_alignment>
 801303a:	2108      	movs	r1, #8
 801303c:	1845      	adds	r5, r0, r1
 801303e:	4435      	add	r5, r6
 8013040:	4628      	mov	r0, r5
 8013042:	f7ff f8f3 	bl	801222c <ucdr_alignment>
 8013046:	4420      	add	r0, r4
 8013048:	4428      	add	r0, r5
 801304a:	bd70      	pop	{r4, r5, r6, pc}

0801304c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 801304c:	4800      	ldr	r0, [pc, #0]	@ (8013050 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x4>)
 801304e:	4770      	bx	lr
 8013050:	24001340 	.word	0x24001340

08013054 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 8013054:	b1b8      	cbz	r0, 8013086 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus+0x32>
 8013056:	b538      	push	{r3, r4, r5, lr}
 8013058:	460d      	mov	r5, r1
 801305a:	2108      	movs	r1, #8
 801305c:	4628      	mov	r0, r5
 801305e:	f7ff f8e5 	bl	801222c <ucdr_alignment>
 8013062:	f105 0308 	add.w	r3, r5, #8
 8013066:	2108      	movs	r1, #8
 8013068:	f1c5 0508 	rsb	r5, r5, #8
 801306c:	181c      	adds	r4, r3, r0
 801306e:	4620      	mov	r0, r4
 8013070:	f7ff f8dc 	bl	801222c <ucdr_alignment>
 8013074:	2108      	movs	r1, #8
 8013076:	4408      	add	r0, r1
 8013078:	4404      	add	r4, r0
 801307a:	4620      	mov	r0, r4
 801307c:	f7ff f8d6 	bl	801222c <ucdr_alignment>
 8013080:	4428      	add	r0, r5
 8013082:	4420      	add	r0, r4
 8013084:	bd38      	pop	{r3, r4, r5, pc}
 8013086:	4770      	bx	lr

08013088 <_ActuationStatus__cdr_deserialize>:
 8013088:	b538      	push	{r3, r4, r5, lr}
 801308a:	460c      	mov	r4, r1
 801308c:	b171      	cbz	r1, 80130ac <_ActuationStatus__cdr_deserialize+0x24>
 801308e:	4605      	mov	r5, r0
 8013090:	f7fe ffde 	bl	8012050 <ucdr_deserialize_double>
 8013094:	f104 0108 	add.w	r1, r4, #8
 8013098:	4628      	mov	r0, r5
 801309a:	f7fe ffd9 	bl	8012050 <ucdr_deserialize_double>
 801309e:	f104 0110 	add.w	r1, r4, #16
 80130a2:	4628      	mov	r0, r5
 80130a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80130a8:	f7fe bfd2 	b.w	8012050 <ucdr_deserialize_double>
 80130ac:	4608      	mov	r0, r1
 80130ae:	bd38      	pop	{r3, r4, r5, pc}

080130b0 <_ActuationStatus__cdr_serialize>:
 80130b0:	b198      	cbz	r0, 80130da <_ActuationStatus__cdr_serialize+0x2a>
 80130b2:	b538      	push	{r3, r4, r5, lr}
 80130b4:	460d      	mov	r5, r1
 80130b6:	4604      	mov	r4, r0
 80130b8:	ed90 0b00 	vldr	d0, [r0]
 80130bc:	4608      	mov	r0, r1
 80130be:	f7fe fef7 	bl	8011eb0 <ucdr_serialize_double>
 80130c2:	4628      	mov	r0, r5
 80130c4:	ed94 0b02 	vldr	d0, [r4, #8]
 80130c8:	f7fe fef2 	bl	8011eb0 <ucdr_serialize_double>
 80130cc:	4628      	mov	r0, r5
 80130ce:	ed94 0b04 	vldr	d0, [r4, #16]
 80130d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80130d6:	f7fe beeb 	b.w	8011eb0 <ucdr_serialize_double>
 80130da:	4770      	bx	lr

080130dc <_ActuationStatus__get_serialized_size>:
 80130dc:	b190      	cbz	r0, 8013104 <_ActuationStatus__get_serialized_size+0x28>
 80130de:	2108      	movs	r1, #8
 80130e0:	2000      	movs	r0, #0
 80130e2:	b510      	push	{r4, lr}
 80130e4:	f7ff f8a2 	bl	801222c <ucdr_alignment>
 80130e8:	2108      	movs	r1, #8
 80130ea:	1844      	adds	r4, r0, r1
 80130ec:	4620      	mov	r0, r4
 80130ee:	f7ff f89d 	bl	801222c <ucdr_alignment>
 80130f2:	2108      	movs	r1, #8
 80130f4:	4408      	add	r0, r1
 80130f6:	4404      	add	r4, r0
 80130f8:	4620      	mov	r0, r4
 80130fa:	f7ff f897 	bl	801222c <ucdr_alignment>
 80130fe:	3008      	adds	r0, #8
 8013100:	4420      	add	r0, r4
 8013102:	bd10      	pop	{r4, pc}
 8013104:	4770      	bx	lr
 8013106:	bf00      	nop

08013108 <_ActuationStatus__max_serialized_size>:
 8013108:	b538      	push	{r3, r4, r5, lr}
 801310a:	2108      	movs	r1, #8
 801310c:	2000      	movs	r0, #0
 801310e:	f7ff f88d 	bl	801222c <ucdr_alignment>
 8013112:	2108      	movs	r1, #8
 8013114:	1845      	adds	r5, r0, r1
 8013116:	4628      	mov	r0, r5
 8013118:	f7ff f888 	bl	801222c <ucdr_alignment>
 801311c:	2108      	movs	r1, #8
 801311e:	1844      	adds	r4, r0, r1
 8013120:	442c      	add	r4, r5
 8013122:	4620      	mov	r0, r4
 8013124:	f7ff f882 	bl	801222c <ucdr_alignment>
 8013128:	3008      	adds	r0, #8
 801312a:	4420      	add	r0, r4
 801312c:	bd38      	pop	{r3, r4, r5, pc}
 801312e:	bf00      	nop

08013130 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 8013130:	b570      	push	{r4, r5, r6, lr}
 8013132:	460c      	mov	r4, r1
 8013134:	2301      	movs	r3, #1
 8013136:	2108      	movs	r1, #8
 8013138:	f104 0508 	add.w	r5, r4, #8
 801313c:	7003      	strb	r3, [r0, #0]
 801313e:	4620      	mov	r0, r4
 8013140:	f1c4 0408 	rsb	r4, r4, #8
 8013144:	f7ff f872 	bl	801222c <ucdr_alignment>
 8013148:	1946      	adds	r6, r0, r5
 801314a:	2108      	movs	r1, #8
 801314c:	4630      	mov	r0, r6
 801314e:	f7ff f86d 	bl	801222c <ucdr_alignment>
 8013152:	2108      	movs	r1, #8
 8013154:	1845      	adds	r5, r0, r1
 8013156:	4435      	add	r5, r6
 8013158:	4628      	mov	r0, r5
 801315a:	f7ff f867 	bl	801222c <ucdr_alignment>
 801315e:	4420      	add	r0, r4
 8013160:	4428      	add	r0, r5
 8013162:	bd70      	pop	{r4, r5, r6, pc}

08013164 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 8013164:	4800      	ldr	r0, [pc, #0]	@ (8013168 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x4>)
 8013166:	4770      	bx	lr
 8013168:	24001368 	.word	0x24001368

0801316c <ucdr_serialize_endian_array_char>:
 801316c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013170:	4619      	mov	r1, r3
 8013172:	461f      	mov	r7, r3
 8013174:	4605      	mov	r5, r0
 8013176:	4690      	mov	r8, r2
 8013178:	f7ff f830 	bl	80121dc <ucdr_check_buffer_available_for>
 801317c:	b9e0      	cbnz	r0, 80131b8 <ucdr_serialize_endian_array_char+0x4c>
 801317e:	463e      	mov	r6, r7
 8013180:	e00b      	b.n	801319a <ucdr_serialize_endian_array_char+0x2e>
 8013182:	4441      	add	r1, r8
 8013184:	68a8      	ldr	r0, [r5, #8]
 8013186:	4622      	mov	r2, r4
 8013188:	1b36      	subs	r6, r6, r4
 801318a:	f000 fcb6 	bl	8013afa <memcpy>
 801318e:	68ab      	ldr	r3, [r5, #8]
 8013190:	6928      	ldr	r0, [r5, #16]
 8013192:	4423      	add	r3, r4
 8013194:	4420      	add	r0, r4
 8013196:	60ab      	str	r3, [r5, #8]
 8013198:	6128      	str	r0, [r5, #16]
 801319a:	4631      	mov	r1, r6
 801319c:	2201      	movs	r2, #1
 801319e:	4628      	mov	r0, r5
 80131a0:	f7ff f872 	bl	8012288 <ucdr_check_final_buffer_behavior_array>
 80131a4:	1bb9      	subs	r1, r7, r6
 80131a6:	4604      	mov	r4, r0
 80131a8:	2800      	cmp	r0, #0
 80131aa:	d1ea      	bne.n	8013182 <ucdr_serialize_endian_array_char+0x16>
 80131ac:	2301      	movs	r3, #1
 80131ae:	7da8      	ldrb	r0, [r5, #22]
 80131b0:	756b      	strb	r3, [r5, #21]
 80131b2:	4058      	eors	r0, r3
 80131b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131b8:	463a      	mov	r2, r7
 80131ba:	4641      	mov	r1, r8
 80131bc:	68a8      	ldr	r0, [r5, #8]
 80131be:	f000 fc9c 	bl	8013afa <memcpy>
 80131c2:	68aa      	ldr	r2, [r5, #8]
 80131c4:	692b      	ldr	r3, [r5, #16]
 80131c6:	443a      	add	r2, r7
 80131c8:	443b      	add	r3, r7
 80131ca:	60aa      	str	r2, [r5, #8]
 80131cc:	612b      	str	r3, [r5, #16]
 80131ce:	e7ed      	b.n	80131ac <ucdr_serialize_endian_array_char+0x40>

080131d0 <ucdr_deserialize_endian_array_char>:
 80131d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131d4:	4619      	mov	r1, r3
 80131d6:	461f      	mov	r7, r3
 80131d8:	4605      	mov	r5, r0
 80131da:	4690      	mov	r8, r2
 80131dc:	f7fe fffe 	bl	80121dc <ucdr_check_buffer_available_for>
 80131e0:	b9e8      	cbnz	r0, 801321e <ucdr_deserialize_endian_array_char+0x4e>
 80131e2:	463e      	mov	r6, r7
 80131e4:	e00c      	b.n	8013200 <ucdr_deserialize_endian_array_char+0x30>
 80131e6:	eb08 0003 	add.w	r0, r8, r3
 80131ea:	68a9      	ldr	r1, [r5, #8]
 80131ec:	4622      	mov	r2, r4
 80131ee:	1b36      	subs	r6, r6, r4
 80131f0:	f000 fc83 	bl	8013afa <memcpy>
 80131f4:	68ab      	ldr	r3, [r5, #8]
 80131f6:	6928      	ldr	r0, [r5, #16]
 80131f8:	4423      	add	r3, r4
 80131fa:	4420      	add	r0, r4
 80131fc:	60ab      	str	r3, [r5, #8]
 80131fe:	6128      	str	r0, [r5, #16]
 8013200:	4631      	mov	r1, r6
 8013202:	2201      	movs	r2, #1
 8013204:	4628      	mov	r0, r5
 8013206:	f7ff f83f 	bl	8012288 <ucdr_check_final_buffer_behavior_array>
 801320a:	1bbb      	subs	r3, r7, r6
 801320c:	4604      	mov	r4, r0
 801320e:	2800      	cmp	r0, #0
 8013210:	d1e9      	bne.n	80131e6 <ucdr_deserialize_endian_array_char+0x16>
 8013212:	2301      	movs	r3, #1
 8013214:	7da8      	ldrb	r0, [r5, #22]
 8013216:	756b      	strb	r3, [r5, #21]
 8013218:	4058      	eors	r0, r3
 801321a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801321e:	463a      	mov	r2, r7
 8013220:	68a9      	ldr	r1, [r5, #8]
 8013222:	4640      	mov	r0, r8
 8013224:	f000 fc69 	bl	8013afa <memcpy>
 8013228:	68aa      	ldr	r2, [r5, #8]
 801322a:	692b      	ldr	r3, [r5, #16]
 801322c:	443a      	add	r2, r7
 801322e:	443b      	add	r3, r7
 8013230:	60aa      	str	r2, [r5, #8]
 8013232:	612b      	str	r3, [r5, #16]
 8013234:	e7ed      	b.n	8013212 <ucdr_deserialize_endian_array_char+0x42>
 8013236:	bf00      	nop

08013238 <rosidl_runtime_c__String__init>:
 8013238:	b510      	push	{r4, lr}
 801323a:	4604      	mov	r4, r0
 801323c:	b086      	sub	sp, #24
 801323e:	b170      	cbz	r0, 801325e <rosidl_runtime_c__String__init+0x26>
 8013240:	a801      	add	r0, sp, #4
 8013242:	f7ff f867 	bl	8012314 <rcutils_get_default_allocator>
 8013246:	9b01      	ldr	r3, [sp, #4]
 8013248:	9905      	ldr	r1, [sp, #20]
 801324a:	2001      	movs	r0, #1
 801324c:	4798      	blx	r3
 801324e:	6020      	str	r0, [r4, #0]
 8013250:	b128      	cbz	r0, 801325e <rosidl_runtime_c__String__init+0x26>
 8013252:	2100      	movs	r1, #0
 8013254:	2201      	movs	r2, #1
 8013256:	7001      	strb	r1, [r0, #0]
 8013258:	4610      	mov	r0, r2
 801325a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801325e:	b006      	add	sp, #24
 8013260:	bd10      	pop	{r4, pc}
 8013262:	bf00      	nop

08013264 <rosidl_runtime_c__String__fini>:
 8013264:	b320      	cbz	r0, 80132b0 <rosidl_runtime_c__String__fini+0x4c>
 8013266:	6803      	ldr	r3, [r0, #0]
 8013268:	b510      	push	{r4, lr}
 801326a:	4604      	mov	r4, r0
 801326c:	b086      	sub	sp, #24
 801326e:	b173      	cbz	r3, 801328e <rosidl_runtime_c__String__fini+0x2a>
 8013270:	6883      	ldr	r3, [r0, #8]
 8013272:	b1f3      	cbz	r3, 80132b2 <rosidl_runtime_c__String__fini+0x4e>
 8013274:	a801      	add	r0, sp, #4
 8013276:	f7ff f84d 	bl	8012314 <rcutils_get_default_allocator>
 801327a:	9b02      	ldr	r3, [sp, #8]
 801327c:	9905      	ldr	r1, [sp, #20]
 801327e:	6820      	ldr	r0, [r4, #0]
 8013280:	4798      	blx	r3
 8013282:	2300      	movs	r3, #0
 8013284:	e9c4 3300 	strd	r3, r3, [r4]
 8013288:	60a3      	str	r3, [r4, #8]
 801328a:	b006      	add	sp, #24
 801328c:	bd10      	pop	{r4, pc}
 801328e:	6843      	ldr	r3, [r0, #4]
 8013290:	b9db      	cbnz	r3, 80132ca <rosidl_runtime_c__String__fini+0x66>
 8013292:	6883      	ldr	r3, [r0, #8]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d0f8      	beq.n	801328a <rosidl_runtime_c__String__fini+0x26>
 8013298:	4b12      	ldr	r3, [pc, #72]	@ (80132e4 <rosidl_runtime_c__String__fini+0x80>)
 801329a:	2251      	movs	r2, #81	@ 0x51
 801329c:	2101      	movs	r1, #1
 801329e:	4812      	ldr	r0, [pc, #72]	@ (80132e8 <rosidl_runtime_c__String__fini+0x84>)
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	68db      	ldr	r3, [r3, #12]
 80132a4:	f000 fa62 	bl	801376c <fwrite>
 80132a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80132ac:	f000 f84a 	bl	8013344 <exit>
 80132b0:	4770      	bx	lr
 80132b2:	4b0c      	ldr	r3, [pc, #48]	@ (80132e4 <rosidl_runtime_c__String__fini+0x80>)
 80132b4:	224c      	movs	r2, #76	@ 0x4c
 80132b6:	2101      	movs	r1, #1
 80132b8:	480c      	ldr	r0, [pc, #48]	@ (80132ec <rosidl_runtime_c__String__fini+0x88>)
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	68db      	ldr	r3, [r3, #12]
 80132be:	f000 fa55 	bl	801376c <fwrite>
 80132c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80132c6:	f000 f83d 	bl	8013344 <exit>
 80132ca:	4b06      	ldr	r3, [pc, #24]	@ (80132e4 <rosidl_runtime_c__String__fini+0x80>)
 80132cc:	224e      	movs	r2, #78	@ 0x4e
 80132ce:	2101      	movs	r1, #1
 80132d0:	4807      	ldr	r0, [pc, #28]	@ (80132f0 <rosidl_runtime_c__String__fini+0x8c>)
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	68db      	ldr	r3, [r3, #12]
 80132d6:	f000 fa49 	bl	801376c <fwrite>
 80132da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80132de:	f000 f831 	bl	8013344 <exit>
 80132e2:	bf00      	nop
 80132e4:	2400139c 	.word	0x2400139c
 80132e8:	0801583c 	.word	0x0801583c
 80132ec:	0801579c 	.word	0x0801579c
 80132f0:	080157ec 	.word	0x080157ec

080132f4 <tier4_vehicle_msgs__msg__ActuationCommand__init>:
 80132f4:	3800      	subs	r0, #0
 80132f6:	bf18      	it	ne
 80132f8:	2001      	movne	r0, #1
 80132fa:	4770      	bx	lr

080132fc <tier4_vehicle_msgs__msg__ActuationCommand__fini>:
 80132fc:	4770      	bx	lr
 80132fe:	bf00      	nop

08013300 <tier4_vehicle_msgs__msg__ActuationStatus__init>:
 8013300:	3800      	subs	r0, #0
 8013302:	bf18      	it	ne
 8013304:	2001      	movne	r0, #1
 8013306:	4770      	bx	lr

08013308 <tier4_vehicle_msgs__msg__ActuationStatus__fini>:
 8013308:	4770      	bx	lr
 801330a:	bf00      	nop

0801330c <calloc>:
 801330c:	4b02      	ldr	r3, [pc, #8]	@ (8013318 <calloc+0xc>)
 801330e:	460a      	mov	r2, r1
 8013310:	4601      	mov	r1, r0
 8013312:	6818      	ldr	r0, [r3, #0]
 8013314:	f000 b802 	b.w	801331c <_calloc_r>
 8013318:	2400139c 	.word	0x2400139c

0801331c <_calloc_r>:
 801331c:	b570      	push	{r4, r5, r6, lr}
 801331e:	fba1 5402 	umull	r5, r4, r1, r2
 8013322:	b93c      	cbnz	r4, 8013334 <_calloc_r+0x18>
 8013324:	4629      	mov	r1, r5
 8013326:	f000 f851 	bl	80133cc <_malloc_r>
 801332a:	4606      	mov	r6, r0
 801332c:	b928      	cbnz	r0, 801333a <_calloc_r+0x1e>
 801332e:	2600      	movs	r6, #0
 8013330:	4630      	mov	r0, r6
 8013332:	bd70      	pop	{r4, r5, r6, pc}
 8013334:	220c      	movs	r2, #12
 8013336:	6002      	str	r2, [r0, #0]
 8013338:	e7f9      	b.n	801332e <_calloc_r+0x12>
 801333a:	462a      	mov	r2, r5
 801333c:	4621      	mov	r1, r4
 801333e:	f000 fafb 	bl	8013938 <memset>
 8013342:	e7f5      	b.n	8013330 <_calloc_r+0x14>

08013344 <exit>:
 8013344:	b508      	push	{r3, lr}
 8013346:	4b06      	ldr	r3, [pc, #24]	@ (8013360 <exit+0x1c>)
 8013348:	4604      	mov	r4, r0
 801334a:	b113      	cbz	r3, 8013352 <exit+0xe>
 801334c:	2100      	movs	r1, #0
 801334e:	f3af 8000 	nop.w
 8013352:	4b04      	ldr	r3, [pc, #16]	@ (8013364 <exit+0x20>)
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	b103      	cbz	r3, 801335a <exit+0x16>
 8013358:	4798      	blx	r3
 801335a:	4620      	mov	r0, r4
 801335c:	f7ed ffac 	bl	80012b8 <_exit>
 8013360:	00000000 	.word	0x00000000
 8013364:	2403351c 	.word	0x2403351c

08013368 <malloc>:
 8013368:	4b02      	ldr	r3, [pc, #8]	@ (8013374 <malloc+0xc>)
 801336a:	4601      	mov	r1, r0
 801336c:	6818      	ldr	r0, [r3, #0]
 801336e:	f000 b82d 	b.w	80133cc <_malloc_r>
 8013372:	bf00      	nop
 8013374:	2400139c 	.word	0x2400139c

08013378 <free>:
 8013378:	4b02      	ldr	r3, [pc, #8]	@ (8013384 <free+0xc>)
 801337a:	4601      	mov	r1, r0
 801337c:	6818      	ldr	r0, [r3, #0]
 801337e:	f000 bbcb 	b.w	8013b18 <_free_r>
 8013382:	bf00      	nop
 8013384:	2400139c 	.word	0x2400139c

08013388 <sbrk_aligned>:
 8013388:	b570      	push	{r4, r5, r6, lr}
 801338a:	4e0f      	ldr	r6, [pc, #60]	@ (80133c8 <sbrk_aligned+0x40>)
 801338c:	460c      	mov	r4, r1
 801338e:	6831      	ldr	r1, [r6, #0]
 8013390:	4605      	mov	r5, r0
 8013392:	b911      	cbnz	r1, 801339a <sbrk_aligned+0x12>
 8013394:	f000 fb62 	bl	8013a5c <_sbrk_r>
 8013398:	6030      	str	r0, [r6, #0]
 801339a:	4621      	mov	r1, r4
 801339c:	4628      	mov	r0, r5
 801339e:	f000 fb5d 	bl	8013a5c <_sbrk_r>
 80133a2:	1c43      	adds	r3, r0, #1
 80133a4:	d103      	bne.n	80133ae <sbrk_aligned+0x26>
 80133a6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80133aa:	4620      	mov	r0, r4
 80133ac:	bd70      	pop	{r4, r5, r6, pc}
 80133ae:	1cc4      	adds	r4, r0, #3
 80133b0:	f024 0403 	bic.w	r4, r4, #3
 80133b4:	42a0      	cmp	r0, r4
 80133b6:	d0f8      	beq.n	80133aa <sbrk_aligned+0x22>
 80133b8:	1a21      	subs	r1, r4, r0
 80133ba:	4628      	mov	r0, r5
 80133bc:	f000 fb4e 	bl	8013a5c <_sbrk_r>
 80133c0:	3001      	adds	r0, #1
 80133c2:	d1f2      	bne.n	80133aa <sbrk_aligned+0x22>
 80133c4:	e7ef      	b.n	80133a6 <sbrk_aligned+0x1e>
 80133c6:	bf00      	nop
 80133c8:	240333dc 	.word	0x240333dc

080133cc <_malloc_r>:
 80133cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133d0:	1ccd      	adds	r5, r1, #3
 80133d2:	f025 0503 	bic.w	r5, r5, #3
 80133d6:	3508      	adds	r5, #8
 80133d8:	2d0c      	cmp	r5, #12
 80133da:	bf38      	it	cc
 80133dc:	250c      	movcc	r5, #12
 80133de:	2d00      	cmp	r5, #0
 80133e0:	4606      	mov	r6, r0
 80133e2:	db01      	blt.n	80133e8 <_malloc_r+0x1c>
 80133e4:	42a9      	cmp	r1, r5
 80133e6:	d904      	bls.n	80133f2 <_malloc_r+0x26>
 80133e8:	230c      	movs	r3, #12
 80133ea:	6033      	str	r3, [r6, #0]
 80133ec:	2000      	movs	r0, #0
 80133ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80134c8 <_malloc_r+0xfc>
 80133f6:	f000 f869 	bl	80134cc <__malloc_lock>
 80133fa:	f8d8 3000 	ldr.w	r3, [r8]
 80133fe:	461c      	mov	r4, r3
 8013400:	bb44      	cbnz	r4, 8013454 <_malloc_r+0x88>
 8013402:	4629      	mov	r1, r5
 8013404:	4630      	mov	r0, r6
 8013406:	f7ff ffbf 	bl	8013388 <sbrk_aligned>
 801340a:	1c43      	adds	r3, r0, #1
 801340c:	4604      	mov	r4, r0
 801340e:	d158      	bne.n	80134c2 <_malloc_r+0xf6>
 8013410:	f8d8 4000 	ldr.w	r4, [r8]
 8013414:	4627      	mov	r7, r4
 8013416:	2f00      	cmp	r7, #0
 8013418:	d143      	bne.n	80134a2 <_malloc_r+0xd6>
 801341a:	2c00      	cmp	r4, #0
 801341c:	d04b      	beq.n	80134b6 <_malloc_r+0xea>
 801341e:	6823      	ldr	r3, [r4, #0]
 8013420:	4639      	mov	r1, r7
 8013422:	4630      	mov	r0, r6
 8013424:	eb04 0903 	add.w	r9, r4, r3
 8013428:	f000 fb18 	bl	8013a5c <_sbrk_r>
 801342c:	4581      	cmp	r9, r0
 801342e:	d142      	bne.n	80134b6 <_malloc_r+0xea>
 8013430:	6821      	ldr	r1, [r4, #0]
 8013432:	1a6d      	subs	r5, r5, r1
 8013434:	4629      	mov	r1, r5
 8013436:	4630      	mov	r0, r6
 8013438:	f7ff ffa6 	bl	8013388 <sbrk_aligned>
 801343c:	3001      	adds	r0, #1
 801343e:	d03a      	beq.n	80134b6 <_malloc_r+0xea>
 8013440:	6823      	ldr	r3, [r4, #0]
 8013442:	442b      	add	r3, r5
 8013444:	6023      	str	r3, [r4, #0]
 8013446:	f8d8 3000 	ldr.w	r3, [r8]
 801344a:	685a      	ldr	r2, [r3, #4]
 801344c:	bb62      	cbnz	r2, 80134a8 <_malloc_r+0xdc>
 801344e:	f8c8 7000 	str.w	r7, [r8]
 8013452:	e00f      	b.n	8013474 <_malloc_r+0xa8>
 8013454:	6822      	ldr	r2, [r4, #0]
 8013456:	1b52      	subs	r2, r2, r5
 8013458:	d420      	bmi.n	801349c <_malloc_r+0xd0>
 801345a:	2a0b      	cmp	r2, #11
 801345c:	d917      	bls.n	801348e <_malloc_r+0xc2>
 801345e:	1961      	adds	r1, r4, r5
 8013460:	42a3      	cmp	r3, r4
 8013462:	6025      	str	r5, [r4, #0]
 8013464:	bf18      	it	ne
 8013466:	6059      	strne	r1, [r3, #4]
 8013468:	6863      	ldr	r3, [r4, #4]
 801346a:	bf08      	it	eq
 801346c:	f8c8 1000 	streq.w	r1, [r8]
 8013470:	5162      	str	r2, [r4, r5]
 8013472:	604b      	str	r3, [r1, #4]
 8013474:	4630      	mov	r0, r6
 8013476:	f000 f82f 	bl	80134d8 <__malloc_unlock>
 801347a:	f104 000b 	add.w	r0, r4, #11
 801347e:	1d23      	adds	r3, r4, #4
 8013480:	f020 0007 	bic.w	r0, r0, #7
 8013484:	1ac2      	subs	r2, r0, r3
 8013486:	bf1c      	itt	ne
 8013488:	1a1b      	subne	r3, r3, r0
 801348a:	50a3      	strne	r3, [r4, r2]
 801348c:	e7af      	b.n	80133ee <_malloc_r+0x22>
 801348e:	6862      	ldr	r2, [r4, #4]
 8013490:	42a3      	cmp	r3, r4
 8013492:	bf0c      	ite	eq
 8013494:	f8c8 2000 	streq.w	r2, [r8]
 8013498:	605a      	strne	r2, [r3, #4]
 801349a:	e7eb      	b.n	8013474 <_malloc_r+0xa8>
 801349c:	4623      	mov	r3, r4
 801349e:	6864      	ldr	r4, [r4, #4]
 80134a0:	e7ae      	b.n	8013400 <_malloc_r+0x34>
 80134a2:	463c      	mov	r4, r7
 80134a4:	687f      	ldr	r7, [r7, #4]
 80134a6:	e7b6      	b.n	8013416 <_malloc_r+0x4a>
 80134a8:	461a      	mov	r2, r3
 80134aa:	685b      	ldr	r3, [r3, #4]
 80134ac:	42a3      	cmp	r3, r4
 80134ae:	d1fb      	bne.n	80134a8 <_malloc_r+0xdc>
 80134b0:	2300      	movs	r3, #0
 80134b2:	6053      	str	r3, [r2, #4]
 80134b4:	e7de      	b.n	8013474 <_malloc_r+0xa8>
 80134b6:	230c      	movs	r3, #12
 80134b8:	6033      	str	r3, [r6, #0]
 80134ba:	4630      	mov	r0, r6
 80134bc:	f000 f80c 	bl	80134d8 <__malloc_unlock>
 80134c0:	e794      	b.n	80133ec <_malloc_r+0x20>
 80134c2:	6005      	str	r5, [r0, #0]
 80134c4:	e7d6      	b.n	8013474 <_malloc_r+0xa8>
 80134c6:	bf00      	nop
 80134c8:	240333e0 	.word	0x240333e0

080134cc <__malloc_lock>:
 80134cc:	4801      	ldr	r0, [pc, #4]	@ (80134d4 <__malloc_lock+0x8>)
 80134ce:	f000 bb12 	b.w	8013af6 <__retarget_lock_acquire_recursive>
 80134d2:	bf00      	nop
 80134d4:	24033524 	.word	0x24033524

080134d8 <__malloc_unlock>:
 80134d8:	4801      	ldr	r0, [pc, #4]	@ (80134e0 <__malloc_unlock+0x8>)
 80134da:	f000 bb0d 	b.w	8013af8 <__retarget_lock_release_recursive>
 80134de:	bf00      	nop
 80134e0:	24033524 	.word	0x24033524

080134e4 <realloc>:
 80134e4:	4b02      	ldr	r3, [pc, #8]	@ (80134f0 <realloc+0xc>)
 80134e6:	460a      	mov	r2, r1
 80134e8:	4601      	mov	r1, r0
 80134ea:	6818      	ldr	r0, [r3, #0]
 80134ec:	f000 b802 	b.w	80134f4 <_realloc_r>
 80134f0:	2400139c 	.word	0x2400139c

080134f4 <_realloc_r>:
 80134f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134f8:	4680      	mov	r8, r0
 80134fa:	4615      	mov	r5, r2
 80134fc:	460c      	mov	r4, r1
 80134fe:	b921      	cbnz	r1, 801350a <_realloc_r+0x16>
 8013500:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013504:	4611      	mov	r1, r2
 8013506:	f7ff bf61 	b.w	80133cc <_malloc_r>
 801350a:	b92a      	cbnz	r2, 8013518 <_realloc_r+0x24>
 801350c:	f000 fb04 	bl	8013b18 <_free_r>
 8013510:	2400      	movs	r4, #0
 8013512:	4620      	mov	r0, r4
 8013514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013518:	f000 fb48 	bl	8013bac <_malloc_usable_size_r>
 801351c:	4285      	cmp	r5, r0
 801351e:	4606      	mov	r6, r0
 8013520:	d802      	bhi.n	8013528 <_realloc_r+0x34>
 8013522:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013526:	d8f4      	bhi.n	8013512 <_realloc_r+0x1e>
 8013528:	4629      	mov	r1, r5
 801352a:	4640      	mov	r0, r8
 801352c:	f7ff ff4e 	bl	80133cc <_malloc_r>
 8013530:	4607      	mov	r7, r0
 8013532:	2800      	cmp	r0, #0
 8013534:	d0ec      	beq.n	8013510 <_realloc_r+0x1c>
 8013536:	42b5      	cmp	r5, r6
 8013538:	462a      	mov	r2, r5
 801353a:	4621      	mov	r1, r4
 801353c:	bf28      	it	cs
 801353e:	4632      	movcs	r2, r6
 8013540:	f000 fadb 	bl	8013afa <memcpy>
 8013544:	4621      	mov	r1, r4
 8013546:	4640      	mov	r0, r8
 8013548:	f000 fae6 	bl	8013b18 <_free_r>
 801354c:	463c      	mov	r4, r7
 801354e:	e7e0      	b.n	8013512 <_realloc_r+0x1e>

08013550 <std>:
 8013550:	2300      	movs	r3, #0
 8013552:	b510      	push	{r4, lr}
 8013554:	4604      	mov	r4, r0
 8013556:	e9c0 3300 	strd	r3, r3, [r0]
 801355a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801355e:	6083      	str	r3, [r0, #8]
 8013560:	8181      	strh	r1, [r0, #12]
 8013562:	6643      	str	r3, [r0, #100]	@ 0x64
 8013564:	81c2      	strh	r2, [r0, #14]
 8013566:	6183      	str	r3, [r0, #24]
 8013568:	4619      	mov	r1, r3
 801356a:	2208      	movs	r2, #8
 801356c:	305c      	adds	r0, #92	@ 0x5c
 801356e:	f000 f9e3 	bl	8013938 <memset>
 8013572:	4b0d      	ldr	r3, [pc, #52]	@ (80135a8 <std+0x58>)
 8013574:	6263      	str	r3, [r4, #36]	@ 0x24
 8013576:	4b0d      	ldr	r3, [pc, #52]	@ (80135ac <std+0x5c>)
 8013578:	62a3      	str	r3, [r4, #40]	@ 0x28
 801357a:	4b0d      	ldr	r3, [pc, #52]	@ (80135b0 <std+0x60>)
 801357c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801357e:	4b0d      	ldr	r3, [pc, #52]	@ (80135b4 <std+0x64>)
 8013580:	6323      	str	r3, [r4, #48]	@ 0x30
 8013582:	4b0d      	ldr	r3, [pc, #52]	@ (80135b8 <std+0x68>)
 8013584:	6224      	str	r4, [r4, #32]
 8013586:	429c      	cmp	r4, r3
 8013588:	d006      	beq.n	8013598 <std+0x48>
 801358a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801358e:	4294      	cmp	r4, r2
 8013590:	d002      	beq.n	8013598 <std+0x48>
 8013592:	33d0      	adds	r3, #208	@ 0xd0
 8013594:	429c      	cmp	r4, r3
 8013596:	d105      	bne.n	80135a4 <std+0x54>
 8013598:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801359c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135a0:	f000 baa8 	b.w	8013af4 <__retarget_lock_init_recursive>
 80135a4:	bd10      	pop	{r4, pc}
 80135a6:	bf00      	nop
 80135a8:	08013789 	.word	0x08013789
 80135ac:	080137ab 	.word	0x080137ab
 80135b0:	080137e3 	.word	0x080137e3
 80135b4:	08013807 	.word	0x08013807
 80135b8:	240333e4 	.word	0x240333e4

080135bc <stdio_exit_handler>:
 80135bc:	4a02      	ldr	r2, [pc, #8]	@ (80135c8 <stdio_exit_handler+0xc>)
 80135be:	4903      	ldr	r1, [pc, #12]	@ (80135cc <stdio_exit_handler+0x10>)
 80135c0:	4803      	ldr	r0, [pc, #12]	@ (80135d0 <stdio_exit_handler+0x14>)
 80135c2:	f000 b869 	b.w	8013698 <_fwalk_sglue>
 80135c6:	bf00      	nop
 80135c8:	24001390 	.word	0x24001390
 80135cc:	08013cc5 	.word	0x08013cc5
 80135d0:	240013a0 	.word	0x240013a0

080135d4 <cleanup_stdio>:
 80135d4:	6841      	ldr	r1, [r0, #4]
 80135d6:	4b0c      	ldr	r3, [pc, #48]	@ (8013608 <cleanup_stdio+0x34>)
 80135d8:	4299      	cmp	r1, r3
 80135da:	b510      	push	{r4, lr}
 80135dc:	4604      	mov	r4, r0
 80135de:	d001      	beq.n	80135e4 <cleanup_stdio+0x10>
 80135e0:	f000 fb70 	bl	8013cc4 <_fflush_r>
 80135e4:	68a1      	ldr	r1, [r4, #8]
 80135e6:	4b09      	ldr	r3, [pc, #36]	@ (801360c <cleanup_stdio+0x38>)
 80135e8:	4299      	cmp	r1, r3
 80135ea:	d002      	beq.n	80135f2 <cleanup_stdio+0x1e>
 80135ec:	4620      	mov	r0, r4
 80135ee:	f000 fb69 	bl	8013cc4 <_fflush_r>
 80135f2:	68e1      	ldr	r1, [r4, #12]
 80135f4:	4b06      	ldr	r3, [pc, #24]	@ (8013610 <cleanup_stdio+0x3c>)
 80135f6:	4299      	cmp	r1, r3
 80135f8:	d004      	beq.n	8013604 <cleanup_stdio+0x30>
 80135fa:	4620      	mov	r0, r4
 80135fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013600:	f000 bb60 	b.w	8013cc4 <_fflush_r>
 8013604:	bd10      	pop	{r4, pc}
 8013606:	bf00      	nop
 8013608:	240333e4 	.word	0x240333e4
 801360c:	2403344c 	.word	0x2403344c
 8013610:	240334b4 	.word	0x240334b4

08013614 <global_stdio_init.part.0>:
 8013614:	b510      	push	{r4, lr}
 8013616:	4b0b      	ldr	r3, [pc, #44]	@ (8013644 <global_stdio_init.part.0+0x30>)
 8013618:	4c0b      	ldr	r4, [pc, #44]	@ (8013648 <global_stdio_init.part.0+0x34>)
 801361a:	4a0c      	ldr	r2, [pc, #48]	@ (801364c <global_stdio_init.part.0+0x38>)
 801361c:	601a      	str	r2, [r3, #0]
 801361e:	4620      	mov	r0, r4
 8013620:	2200      	movs	r2, #0
 8013622:	2104      	movs	r1, #4
 8013624:	f7ff ff94 	bl	8013550 <std>
 8013628:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801362c:	2201      	movs	r2, #1
 801362e:	2109      	movs	r1, #9
 8013630:	f7ff ff8e 	bl	8013550 <std>
 8013634:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013638:	2202      	movs	r2, #2
 801363a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801363e:	2112      	movs	r1, #18
 8013640:	f7ff bf86 	b.w	8013550 <std>
 8013644:	2403351c 	.word	0x2403351c
 8013648:	240333e4 	.word	0x240333e4
 801364c:	080135bd 	.word	0x080135bd

08013650 <__sfp_lock_acquire>:
 8013650:	4801      	ldr	r0, [pc, #4]	@ (8013658 <__sfp_lock_acquire+0x8>)
 8013652:	f000 ba50 	b.w	8013af6 <__retarget_lock_acquire_recursive>
 8013656:	bf00      	nop
 8013658:	24033525 	.word	0x24033525

0801365c <__sfp_lock_release>:
 801365c:	4801      	ldr	r0, [pc, #4]	@ (8013664 <__sfp_lock_release+0x8>)
 801365e:	f000 ba4b 	b.w	8013af8 <__retarget_lock_release_recursive>
 8013662:	bf00      	nop
 8013664:	24033525 	.word	0x24033525

08013668 <__sinit>:
 8013668:	b510      	push	{r4, lr}
 801366a:	4604      	mov	r4, r0
 801366c:	f7ff fff0 	bl	8013650 <__sfp_lock_acquire>
 8013670:	6a23      	ldr	r3, [r4, #32]
 8013672:	b11b      	cbz	r3, 801367c <__sinit+0x14>
 8013674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013678:	f7ff bff0 	b.w	801365c <__sfp_lock_release>
 801367c:	4b04      	ldr	r3, [pc, #16]	@ (8013690 <__sinit+0x28>)
 801367e:	6223      	str	r3, [r4, #32]
 8013680:	4b04      	ldr	r3, [pc, #16]	@ (8013694 <__sinit+0x2c>)
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d1f5      	bne.n	8013674 <__sinit+0xc>
 8013688:	f7ff ffc4 	bl	8013614 <global_stdio_init.part.0>
 801368c:	e7f2      	b.n	8013674 <__sinit+0xc>
 801368e:	bf00      	nop
 8013690:	080135d5 	.word	0x080135d5
 8013694:	2403351c 	.word	0x2403351c

08013698 <_fwalk_sglue>:
 8013698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801369c:	4607      	mov	r7, r0
 801369e:	4688      	mov	r8, r1
 80136a0:	4614      	mov	r4, r2
 80136a2:	2600      	movs	r6, #0
 80136a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80136a8:	f1b9 0901 	subs.w	r9, r9, #1
 80136ac:	d505      	bpl.n	80136ba <_fwalk_sglue+0x22>
 80136ae:	6824      	ldr	r4, [r4, #0]
 80136b0:	2c00      	cmp	r4, #0
 80136b2:	d1f7      	bne.n	80136a4 <_fwalk_sglue+0xc>
 80136b4:	4630      	mov	r0, r6
 80136b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136ba:	89ab      	ldrh	r3, [r5, #12]
 80136bc:	2b01      	cmp	r3, #1
 80136be:	d907      	bls.n	80136d0 <_fwalk_sglue+0x38>
 80136c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80136c4:	3301      	adds	r3, #1
 80136c6:	d003      	beq.n	80136d0 <_fwalk_sglue+0x38>
 80136c8:	4629      	mov	r1, r5
 80136ca:	4638      	mov	r0, r7
 80136cc:	47c0      	blx	r8
 80136ce:	4306      	orrs	r6, r0
 80136d0:	3568      	adds	r5, #104	@ 0x68
 80136d2:	e7e9      	b.n	80136a8 <_fwalk_sglue+0x10>

080136d4 <_fwrite_r>:
 80136d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136d8:	9c08      	ldr	r4, [sp, #32]
 80136da:	468a      	mov	sl, r1
 80136dc:	4690      	mov	r8, r2
 80136de:	fb02 f903 	mul.w	r9, r2, r3
 80136e2:	4606      	mov	r6, r0
 80136e4:	b118      	cbz	r0, 80136ee <_fwrite_r+0x1a>
 80136e6:	6a03      	ldr	r3, [r0, #32]
 80136e8:	b90b      	cbnz	r3, 80136ee <_fwrite_r+0x1a>
 80136ea:	f7ff ffbd 	bl	8013668 <__sinit>
 80136ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80136f0:	07dd      	lsls	r5, r3, #31
 80136f2:	d405      	bmi.n	8013700 <_fwrite_r+0x2c>
 80136f4:	89a3      	ldrh	r3, [r4, #12]
 80136f6:	0598      	lsls	r0, r3, #22
 80136f8:	d402      	bmi.n	8013700 <_fwrite_r+0x2c>
 80136fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80136fc:	f000 f9fb 	bl	8013af6 <__retarget_lock_acquire_recursive>
 8013700:	89a3      	ldrh	r3, [r4, #12]
 8013702:	0719      	lsls	r1, r3, #28
 8013704:	d516      	bpl.n	8013734 <_fwrite_r+0x60>
 8013706:	6923      	ldr	r3, [r4, #16]
 8013708:	b1a3      	cbz	r3, 8013734 <_fwrite_r+0x60>
 801370a:	2500      	movs	r5, #0
 801370c:	454d      	cmp	r5, r9
 801370e:	d01f      	beq.n	8013750 <_fwrite_r+0x7c>
 8013710:	68a7      	ldr	r7, [r4, #8]
 8013712:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8013716:	3f01      	subs	r7, #1
 8013718:	2f00      	cmp	r7, #0
 801371a:	60a7      	str	r7, [r4, #8]
 801371c:	da04      	bge.n	8013728 <_fwrite_r+0x54>
 801371e:	69a3      	ldr	r3, [r4, #24]
 8013720:	429f      	cmp	r7, r3
 8013722:	db0f      	blt.n	8013744 <_fwrite_r+0x70>
 8013724:	290a      	cmp	r1, #10
 8013726:	d00d      	beq.n	8013744 <_fwrite_r+0x70>
 8013728:	6823      	ldr	r3, [r4, #0]
 801372a:	1c5a      	adds	r2, r3, #1
 801372c:	6022      	str	r2, [r4, #0]
 801372e:	7019      	strb	r1, [r3, #0]
 8013730:	3501      	adds	r5, #1
 8013732:	e7eb      	b.n	801370c <_fwrite_r+0x38>
 8013734:	4621      	mov	r1, r4
 8013736:	4630      	mov	r0, r6
 8013738:	f000 f8a8 	bl	801388c <__swsetup_r>
 801373c:	2800      	cmp	r0, #0
 801373e:	d0e4      	beq.n	801370a <_fwrite_r+0x36>
 8013740:	2500      	movs	r5, #0
 8013742:	e005      	b.n	8013750 <_fwrite_r+0x7c>
 8013744:	4622      	mov	r2, r4
 8013746:	4630      	mov	r0, r6
 8013748:	f000 f861 	bl	801380e <__swbuf_r>
 801374c:	3001      	adds	r0, #1
 801374e:	d1ef      	bne.n	8013730 <_fwrite_r+0x5c>
 8013750:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013752:	07da      	lsls	r2, r3, #31
 8013754:	d405      	bmi.n	8013762 <_fwrite_r+0x8e>
 8013756:	89a3      	ldrh	r3, [r4, #12]
 8013758:	059b      	lsls	r3, r3, #22
 801375a:	d402      	bmi.n	8013762 <_fwrite_r+0x8e>
 801375c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801375e:	f000 f9cb 	bl	8013af8 <__retarget_lock_release_recursive>
 8013762:	fbb5 f0f8 	udiv	r0, r5, r8
 8013766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801376c <fwrite>:
 801376c:	b507      	push	{r0, r1, r2, lr}
 801376e:	9300      	str	r3, [sp, #0]
 8013770:	4613      	mov	r3, r2
 8013772:	460a      	mov	r2, r1
 8013774:	4601      	mov	r1, r0
 8013776:	4803      	ldr	r0, [pc, #12]	@ (8013784 <fwrite+0x18>)
 8013778:	6800      	ldr	r0, [r0, #0]
 801377a:	f7ff ffab 	bl	80136d4 <_fwrite_r>
 801377e:	b003      	add	sp, #12
 8013780:	f85d fb04 	ldr.w	pc, [sp], #4
 8013784:	2400139c 	.word	0x2400139c

08013788 <__sread>:
 8013788:	b510      	push	{r4, lr}
 801378a:	460c      	mov	r4, r1
 801378c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013790:	f000 f952 	bl	8013a38 <_read_r>
 8013794:	2800      	cmp	r0, #0
 8013796:	bfab      	itete	ge
 8013798:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801379a:	89a3      	ldrhlt	r3, [r4, #12]
 801379c:	181b      	addge	r3, r3, r0
 801379e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80137a2:	bfac      	ite	ge
 80137a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80137a6:	81a3      	strhlt	r3, [r4, #12]
 80137a8:	bd10      	pop	{r4, pc}

080137aa <__swrite>:
 80137aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137ae:	461f      	mov	r7, r3
 80137b0:	898b      	ldrh	r3, [r1, #12]
 80137b2:	05db      	lsls	r3, r3, #23
 80137b4:	4605      	mov	r5, r0
 80137b6:	460c      	mov	r4, r1
 80137b8:	4616      	mov	r6, r2
 80137ba:	d505      	bpl.n	80137c8 <__swrite+0x1e>
 80137bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137c0:	2302      	movs	r3, #2
 80137c2:	2200      	movs	r2, #0
 80137c4:	f000 f926 	bl	8013a14 <_lseek_r>
 80137c8:	89a3      	ldrh	r3, [r4, #12]
 80137ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80137ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80137d2:	81a3      	strh	r3, [r4, #12]
 80137d4:	4632      	mov	r2, r6
 80137d6:	463b      	mov	r3, r7
 80137d8:	4628      	mov	r0, r5
 80137da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80137de:	f000 b94d 	b.w	8013a7c <_write_r>

080137e2 <__sseek>:
 80137e2:	b510      	push	{r4, lr}
 80137e4:	460c      	mov	r4, r1
 80137e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137ea:	f000 f913 	bl	8013a14 <_lseek_r>
 80137ee:	1c43      	adds	r3, r0, #1
 80137f0:	89a3      	ldrh	r3, [r4, #12]
 80137f2:	bf15      	itete	ne
 80137f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80137f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80137fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80137fe:	81a3      	strheq	r3, [r4, #12]
 8013800:	bf18      	it	ne
 8013802:	81a3      	strhne	r3, [r4, #12]
 8013804:	bd10      	pop	{r4, pc}

08013806 <__sclose>:
 8013806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801380a:	f000 b89d 	b.w	8013948 <_close_r>

0801380e <__swbuf_r>:
 801380e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013810:	460e      	mov	r6, r1
 8013812:	4614      	mov	r4, r2
 8013814:	4605      	mov	r5, r0
 8013816:	b118      	cbz	r0, 8013820 <__swbuf_r+0x12>
 8013818:	6a03      	ldr	r3, [r0, #32]
 801381a:	b90b      	cbnz	r3, 8013820 <__swbuf_r+0x12>
 801381c:	f7ff ff24 	bl	8013668 <__sinit>
 8013820:	69a3      	ldr	r3, [r4, #24]
 8013822:	60a3      	str	r3, [r4, #8]
 8013824:	89a3      	ldrh	r3, [r4, #12]
 8013826:	071a      	lsls	r2, r3, #28
 8013828:	d501      	bpl.n	801382e <__swbuf_r+0x20>
 801382a:	6923      	ldr	r3, [r4, #16]
 801382c:	b943      	cbnz	r3, 8013840 <__swbuf_r+0x32>
 801382e:	4621      	mov	r1, r4
 8013830:	4628      	mov	r0, r5
 8013832:	f000 f82b 	bl	801388c <__swsetup_r>
 8013836:	b118      	cbz	r0, 8013840 <__swbuf_r+0x32>
 8013838:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801383c:	4638      	mov	r0, r7
 801383e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013840:	6823      	ldr	r3, [r4, #0]
 8013842:	6922      	ldr	r2, [r4, #16]
 8013844:	1a98      	subs	r0, r3, r2
 8013846:	6963      	ldr	r3, [r4, #20]
 8013848:	b2f6      	uxtb	r6, r6
 801384a:	4283      	cmp	r3, r0
 801384c:	4637      	mov	r7, r6
 801384e:	dc05      	bgt.n	801385c <__swbuf_r+0x4e>
 8013850:	4621      	mov	r1, r4
 8013852:	4628      	mov	r0, r5
 8013854:	f000 fa36 	bl	8013cc4 <_fflush_r>
 8013858:	2800      	cmp	r0, #0
 801385a:	d1ed      	bne.n	8013838 <__swbuf_r+0x2a>
 801385c:	68a3      	ldr	r3, [r4, #8]
 801385e:	3b01      	subs	r3, #1
 8013860:	60a3      	str	r3, [r4, #8]
 8013862:	6823      	ldr	r3, [r4, #0]
 8013864:	1c5a      	adds	r2, r3, #1
 8013866:	6022      	str	r2, [r4, #0]
 8013868:	701e      	strb	r6, [r3, #0]
 801386a:	6962      	ldr	r2, [r4, #20]
 801386c:	1c43      	adds	r3, r0, #1
 801386e:	429a      	cmp	r2, r3
 8013870:	d004      	beq.n	801387c <__swbuf_r+0x6e>
 8013872:	89a3      	ldrh	r3, [r4, #12]
 8013874:	07db      	lsls	r3, r3, #31
 8013876:	d5e1      	bpl.n	801383c <__swbuf_r+0x2e>
 8013878:	2e0a      	cmp	r6, #10
 801387a:	d1df      	bne.n	801383c <__swbuf_r+0x2e>
 801387c:	4621      	mov	r1, r4
 801387e:	4628      	mov	r0, r5
 8013880:	f000 fa20 	bl	8013cc4 <_fflush_r>
 8013884:	2800      	cmp	r0, #0
 8013886:	d0d9      	beq.n	801383c <__swbuf_r+0x2e>
 8013888:	e7d6      	b.n	8013838 <__swbuf_r+0x2a>
	...

0801388c <__swsetup_r>:
 801388c:	b538      	push	{r3, r4, r5, lr}
 801388e:	4b29      	ldr	r3, [pc, #164]	@ (8013934 <__swsetup_r+0xa8>)
 8013890:	4605      	mov	r5, r0
 8013892:	6818      	ldr	r0, [r3, #0]
 8013894:	460c      	mov	r4, r1
 8013896:	b118      	cbz	r0, 80138a0 <__swsetup_r+0x14>
 8013898:	6a03      	ldr	r3, [r0, #32]
 801389a:	b90b      	cbnz	r3, 80138a0 <__swsetup_r+0x14>
 801389c:	f7ff fee4 	bl	8013668 <__sinit>
 80138a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138a4:	0719      	lsls	r1, r3, #28
 80138a6:	d422      	bmi.n	80138ee <__swsetup_r+0x62>
 80138a8:	06da      	lsls	r2, r3, #27
 80138aa:	d407      	bmi.n	80138bc <__swsetup_r+0x30>
 80138ac:	2209      	movs	r2, #9
 80138ae:	602a      	str	r2, [r5, #0]
 80138b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80138b4:	81a3      	strh	r3, [r4, #12]
 80138b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80138ba:	e033      	b.n	8013924 <__swsetup_r+0x98>
 80138bc:	0758      	lsls	r0, r3, #29
 80138be:	d512      	bpl.n	80138e6 <__swsetup_r+0x5a>
 80138c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80138c2:	b141      	cbz	r1, 80138d6 <__swsetup_r+0x4a>
 80138c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80138c8:	4299      	cmp	r1, r3
 80138ca:	d002      	beq.n	80138d2 <__swsetup_r+0x46>
 80138cc:	4628      	mov	r0, r5
 80138ce:	f000 f923 	bl	8013b18 <_free_r>
 80138d2:	2300      	movs	r3, #0
 80138d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80138d6:	89a3      	ldrh	r3, [r4, #12]
 80138d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80138dc:	81a3      	strh	r3, [r4, #12]
 80138de:	2300      	movs	r3, #0
 80138e0:	6063      	str	r3, [r4, #4]
 80138e2:	6923      	ldr	r3, [r4, #16]
 80138e4:	6023      	str	r3, [r4, #0]
 80138e6:	89a3      	ldrh	r3, [r4, #12]
 80138e8:	f043 0308 	orr.w	r3, r3, #8
 80138ec:	81a3      	strh	r3, [r4, #12]
 80138ee:	6923      	ldr	r3, [r4, #16]
 80138f0:	b94b      	cbnz	r3, 8013906 <__swsetup_r+0x7a>
 80138f2:	89a3      	ldrh	r3, [r4, #12]
 80138f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80138f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80138fc:	d003      	beq.n	8013906 <__swsetup_r+0x7a>
 80138fe:	4621      	mov	r1, r4
 8013900:	4628      	mov	r0, r5
 8013902:	f000 fa2d 	bl	8013d60 <__smakebuf_r>
 8013906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801390a:	f013 0201 	ands.w	r2, r3, #1
 801390e:	d00a      	beq.n	8013926 <__swsetup_r+0x9a>
 8013910:	2200      	movs	r2, #0
 8013912:	60a2      	str	r2, [r4, #8]
 8013914:	6962      	ldr	r2, [r4, #20]
 8013916:	4252      	negs	r2, r2
 8013918:	61a2      	str	r2, [r4, #24]
 801391a:	6922      	ldr	r2, [r4, #16]
 801391c:	b942      	cbnz	r2, 8013930 <__swsetup_r+0xa4>
 801391e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013922:	d1c5      	bne.n	80138b0 <__swsetup_r+0x24>
 8013924:	bd38      	pop	{r3, r4, r5, pc}
 8013926:	0799      	lsls	r1, r3, #30
 8013928:	bf58      	it	pl
 801392a:	6962      	ldrpl	r2, [r4, #20]
 801392c:	60a2      	str	r2, [r4, #8]
 801392e:	e7f4      	b.n	801391a <__swsetup_r+0x8e>
 8013930:	2000      	movs	r0, #0
 8013932:	e7f7      	b.n	8013924 <__swsetup_r+0x98>
 8013934:	2400139c 	.word	0x2400139c

08013938 <memset>:
 8013938:	4402      	add	r2, r0
 801393a:	4603      	mov	r3, r0
 801393c:	4293      	cmp	r3, r2
 801393e:	d100      	bne.n	8013942 <memset+0xa>
 8013940:	4770      	bx	lr
 8013942:	f803 1b01 	strb.w	r1, [r3], #1
 8013946:	e7f9      	b.n	801393c <memset+0x4>

08013948 <_close_r>:
 8013948:	b538      	push	{r3, r4, r5, lr}
 801394a:	4d06      	ldr	r5, [pc, #24]	@ (8013964 <_close_r+0x1c>)
 801394c:	2300      	movs	r3, #0
 801394e:	4604      	mov	r4, r0
 8013950:	4608      	mov	r0, r1
 8013952:	602b      	str	r3, [r5, #0]
 8013954:	f7ed fcf4 	bl	8001340 <_close>
 8013958:	1c43      	adds	r3, r0, #1
 801395a:	d102      	bne.n	8013962 <_close_r+0x1a>
 801395c:	682b      	ldr	r3, [r5, #0]
 801395e:	b103      	cbz	r3, 8013962 <_close_r+0x1a>
 8013960:	6023      	str	r3, [r4, #0]
 8013962:	bd38      	pop	{r3, r4, r5, pc}
 8013964:	24033520 	.word	0x24033520

08013968 <_reclaim_reent>:
 8013968:	4b29      	ldr	r3, [pc, #164]	@ (8013a10 <_reclaim_reent+0xa8>)
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	4283      	cmp	r3, r0
 801396e:	b570      	push	{r4, r5, r6, lr}
 8013970:	4604      	mov	r4, r0
 8013972:	d04b      	beq.n	8013a0c <_reclaim_reent+0xa4>
 8013974:	69c3      	ldr	r3, [r0, #28]
 8013976:	b1ab      	cbz	r3, 80139a4 <_reclaim_reent+0x3c>
 8013978:	68db      	ldr	r3, [r3, #12]
 801397a:	b16b      	cbz	r3, 8013998 <_reclaim_reent+0x30>
 801397c:	2500      	movs	r5, #0
 801397e:	69e3      	ldr	r3, [r4, #28]
 8013980:	68db      	ldr	r3, [r3, #12]
 8013982:	5959      	ldr	r1, [r3, r5]
 8013984:	2900      	cmp	r1, #0
 8013986:	d13b      	bne.n	8013a00 <_reclaim_reent+0x98>
 8013988:	3504      	adds	r5, #4
 801398a:	2d80      	cmp	r5, #128	@ 0x80
 801398c:	d1f7      	bne.n	801397e <_reclaim_reent+0x16>
 801398e:	69e3      	ldr	r3, [r4, #28]
 8013990:	4620      	mov	r0, r4
 8013992:	68d9      	ldr	r1, [r3, #12]
 8013994:	f000 f8c0 	bl	8013b18 <_free_r>
 8013998:	69e3      	ldr	r3, [r4, #28]
 801399a:	6819      	ldr	r1, [r3, #0]
 801399c:	b111      	cbz	r1, 80139a4 <_reclaim_reent+0x3c>
 801399e:	4620      	mov	r0, r4
 80139a0:	f000 f8ba 	bl	8013b18 <_free_r>
 80139a4:	6961      	ldr	r1, [r4, #20]
 80139a6:	b111      	cbz	r1, 80139ae <_reclaim_reent+0x46>
 80139a8:	4620      	mov	r0, r4
 80139aa:	f000 f8b5 	bl	8013b18 <_free_r>
 80139ae:	69e1      	ldr	r1, [r4, #28]
 80139b0:	b111      	cbz	r1, 80139b8 <_reclaim_reent+0x50>
 80139b2:	4620      	mov	r0, r4
 80139b4:	f000 f8b0 	bl	8013b18 <_free_r>
 80139b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80139ba:	b111      	cbz	r1, 80139c2 <_reclaim_reent+0x5a>
 80139bc:	4620      	mov	r0, r4
 80139be:	f000 f8ab 	bl	8013b18 <_free_r>
 80139c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80139c4:	b111      	cbz	r1, 80139cc <_reclaim_reent+0x64>
 80139c6:	4620      	mov	r0, r4
 80139c8:	f000 f8a6 	bl	8013b18 <_free_r>
 80139cc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80139ce:	b111      	cbz	r1, 80139d6 <_reclaim_reent+0x6e>
 80139d0:	4620      	mov	r0, r4
 80139d2:	f000 f8a1 	bl	8013b18 <_free_r>
 80139d6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80139d8:	b111      	cbz	r1, 80139e0 <_reclaim_reent+0x78>
 80139da:	4620      	mov	r0, r4
 80139dc:	f000 f89c 	bl	8013b18 <_free_r>
 80139e0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80139e2:	b111      	cbz	r1, 80139ea <_reclaim_reent+0x82>
 80139e4:	4620      	mov	r0, r4
 80139e6:	f000 f897 	bl	8013b18 <_free_r>
 80139ea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80139ec:	b111      	cbz	r1, 80139f4 <_reclaim_reent+0x8c>
 80139ee:	4620      	mov	r0, r4
 80139f0:	f000 f892 	bl	8013b18 <_free_r>
 80139f4:	6a23      	ldr	r3, [r4, #32]
 80139f6:	b14b      	cbz	r3, 8013a0c <_reclaim_reent+0xa4>
 80139f8:	4620      	mov	r0, r4
 80139fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80139fe:	4718      	bx	r3
 8013a00:	680e      	ldr	r6, [r1, #0]
 8013a02:	4620      	mov	r0, r4
 8013a04:	f000 f888 	bl	8013b18 <_free_r>
 8013a08:	4631      	mov	r1, r6
 8013a0a:	e7bb      	b.n	8013984 <_reclaim_reent+0x1c>
 8013a0c:	bd70      	pop	{r4, r5, r6, pc}
 8013a0e:	bf00      	nop
 8013a10:	2400139c 	.word	0x2400139c

08013a14 <_lseek_r>:
 8013a14:	b538      	push	{r3, r4, r5, lr}
 8013a16:	4d07      	ldr	r5, [pc, #28]	@ (8013a34 <_lseek_r+0x20>)
 8013a18:	4604      	mov	r4, r0
 8013a1a:	4608      	mov	r0, r1
 8013a1c:	4611      	mov	r1, r2
 8013a1e:	2200      	movs	r2, #0
 8013a20:	602a      	str	r2, [r5, #0]
 8013a22:	461a      	mov	r2, r3
 8013a24:	f7ed fcb3 	bl	800138e <_lseek>
 8013a28:	1c43      	adds	r3, r0, #1
 8013a2a:	d102      	bne.n	8013a32 <_lseek_r+0x1e>
 8013a2c:	682b      	ldr	r3, [r5, #0]
 8013a2e:	b103      	cbz	r3, 8013a32 <_lseek_r+0x1e>
 8013a30:	6023      	str	r3, [r4, #0]
 8013a32:	bd38      	pop	{r3, r4, r5, pc}
 8013a34:	24033520 	.word	0x24033520

08013a38 <_read_r>:
 8013a38:	b538      	push	{r3, r4, r5, lr}
 8013a3a:	4d07      	ldr	r5, [pc, #28]	@ (8013a58 <_read_r+0x20>)
 8013a3c:	4604      	mov	r4, r0
 8013a3e:	4608      	mov	r0, r1
 8013a40:	4611      	mov	r1, r2
 8013a42:	2200      	movs	r2, #0
 8013a44:	602a      	str	r2, [r5, #0]
 8013a46:	461a      	mov	r2, r3
 8013a48:	f7ed fc41 	bl	80012ce <_read>
 8013a4c:	1c43      	adds	r3, r0, #1
 8013a4e:	d102      	bne.n	8013a56 <_read_r+0x1e>
 8013a50:	682b      	ldr	r3, [r5, #0]
 8013a52:	b103      	cbz	r3, 8013a56 <_read_r+0x1e>
 8013a54:	6023      	str	r3, [r4, #0]
 8013a56:	bd38      	pop	{r3, r4, r5, pc}
 8013a58:	24033520 	.word	0x24033520

08013a5c <_sbrk_r>:
 8013a5c:	b538      	push	{r3, r4, r5, lr}
 8013a5e:	4d06      	ldr	r5, [pc, #24]	@ (8013a78 <_sbrk_r+0x1c>)
 8013a60:	2300      	movs	r3, #0
 8013a62:	4604      	mov	r4, r0
 8013a64:	4608      	mov	r0, r1
 8013a66:	602b      	str	r3, [r5, #0]
 8013a68:	f7ed fc9e 	bl	80013a8 <_sbrk>
 8013a6c:	1c43      	adds	r3, r0, #1
 8013a6e:	d102      	bne.n	8013a76 <_sbrk_r+0x1a>
 8013a70:	682b      	ldr	r3, [r5, #0]
 8013a72:	b103      	cbz	r3, 8013a76 <_sbrk_r+0x1a>
 8013a74:	6023      	str	r3, [r4, #0]
 8013a76:	bd38      	pop	{r3, r4, r5, pc}
 8013a78:	24033520 	.word	0x24033520

08013a7c <_write_r>:
 8013a7c:	b538      	push	{r3, r4, r5, lr}
 8013a7e:	4d07      	ldr	r5, [pc, #28]	@ (8013a9c <_write_r+0x20>)
 8013a80:	4604      	mov	r4, r0
 8013a82:	4608      	mov	r0, r1
 8013a84:	4611      	mov	r1, r2
 8013a86:	2200      	movs	r2, #0
 8013a88:	602a      	str	r2, [r5, #0]
 8013a8a:	461a      	mov	r2, r3
 8013a8c:	f7ed fc3c 	bl	8001308 <_write>
 8013a90:	1c43      	adds	r3, r0, #1
 8013a92:	d102      	bne.n	8013a9a <_write_r+0x1e>
 8013a94:	682b      	ldr	r3, [r5, #0]
 8013a96:	b103      	cbz	r3, 8013a9a <_write_r+0x1e>
 8013a98:	6023      	str	r3, [r4, #0]
 8013a9a:	bd38      	pop	{r3, r4, r5, pc}
 8013a9c:	24033520 	.word	0x24033520

08013aa0 <__errno>:
 8013aa0:	4b01      	ldr	r3, [pc, #4]	@ (8013aa8 <__errno+0x8>)
 8013aa2:	6818      	ldr	r0, [r3, #0]
 8013aa4:	4770      	bx	lr
 8013aa6:	bf00      	nop
 8013aa8:	2400139c 	.word	0x2400139c

08013aac <__libc_init_array>:
 8013aac:	b570      	push	{r4, r5, r6, lr}
 8013aae:	4d0d      	ldr	r5, [pc, #52]	@ (8013ae4 <__libc_init_array+0x38>)
 8013ab0:	4c0d      	ldr	r4, [pc, #52]	@ (8013ae8 <__libc_init_array+0x3c>)
 8013ab2:	1b64      	subs	r4, r4, r5
 8013ab4:	10a4      	asrs	r4, r4, #2
 8013ab6:	2600      	movs	r6, #0
 8013ab8:	42a6      	cmp	r6, r4
 8013aba:	d109      	bne.n	8013ad0 <__libc_init_array+0x24>
 8013abc:	4d0b      	ldr	r5, [pc, #44]	@ (8013aec <__libc_init_array+0x40>)
 8013abe:	4c0c      	ldr	r4, [pc, #48]	@ (8013af0 <__libc_init_array+0x44>)
 8013ac0:	f000 f9ac 	bl	8013e1c <_init>
 8013ac4:	1b64      	subs	r4, r4, r5
 8013ac6:	10a4      	asrs	r4, r4, #2
 8013ac8:	2600      	movs	r6, #0
 8013aca:	42a6      	cmp	r6, r4
 8013acc:	d105      	bne.n	8013ada <__libc_init_array+0x2e>
 8013ace:	bd70      	pop	{r4, r5, r6, pc}
 8013ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ad4:	4798      	blx	r3
 8013ad6:	3601      	adds	r6, #1
 8013ad8:	e7ee      	b.n	8013ab8 <__libc_init_array+0xc>
 8013ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ade:	4798      	blx	r3
 8013ae0:	3601      	adds	r6, #1
 8013ae2:	e7f2      	b.n	8013aca <__libc_init_array+0x1e>
 8013ae4:	08015898 	.word	0x08015898
 8013ae8:	08015898 	.word	0x08015898
 8013aec:	08015898 	.word	0x08015898
 8013af0:	080158d8 	.word	0x080158d8

08013af4 <__retarget_lock_init_recursive>:
 8013af4:	4770      	bx	lr

08013af6 <__retarget_lock_acquire_recursive>:
 8013af6:	4770      	bx	lr

08013af8 <__retarget_lock_release_recursive>:
 8013af8:	4770      	bx	lr

08013afa <memcpy>:
 8013afa:	440a      	add	r2, r1
 8013afc:	4291      	cmp	r1, r2
 8013afe:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8013b02:	d100      	bne.n	8013b06 <memcpy+0xc>
 8013b04:	4770      	bx	lr
 8013b06:	b510      	push	{r4, lr}
 8013b08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013b0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013b10:	4291      	cmp	r1, r2
 8013b12:	d1f9      	bne.n	8013b08 <memcpy+0xe>
 8013b14:	bd10      	pop	{r4, pc}
	...

08013b18 <_free_r>:
 8013b18:	b538      	push	{r3, r4, r5, lr}
 8013b1a:	4605      	mov	r5, r0
 8013b1c:	2900      	cmp	r1, #0
 8013b1e:	d041      	beq.n	8013ba4 <_free_r+0x8c>
 8013b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b24:	1f0c      	subs	r4, r1, #4
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	bfb8      	it	lt
 8013b2a:	18e4      	addlt	r4, r4, r3
 8013b2c:	f7ff fcce 	bl	80134cc <__malloc_lock>
 8013b30:	4a1d      	ldr	r2, [pc, #116]	@ (8013ba8 <_free_r+0x90>)
 8013b32:	6813      	ldr	r3, [r2, #0]
 8013b34:	b933      	cbnz	r3, 8013b44 <_free_r+0x2c>
 8013b36:	6063      	str	r3, [r4, #4]
 8013b38:	6014      	str	r4, [r2, #0]
 8013b3a:	4628      	mov	r0, r5
 8013b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b40:	f7ff bcca 	b.w	80134d8 <__malloc_unlock>
 8013b44:	42a3      	cmp	r3, r4
 8013b46:	d908      	bls.n	8013b5a <_free_r+0x42>
 8013b48:	6820      	ldr	r0, [r4, #0]
 8013b4a:	1821      	adds	r1, r4, r0
 8013b4c:	428b      	cmp	r3, r1
 8013b4e:	bf01      	itttt	eq
 8013b50:	6819      	ldreq	r1, [r3, #0]
 8013b52:	685b      	ldreq	r3, [r3, #4]
 8013b54:	1809      	addeq	r1, r1, r0
 8013b56:	6021      	streq	r1, [r4, #0]
 8013b58:	e7ed      	b.n	8013b36 <_free_r+0x1e>
 8013b5a:	461a      	mov	r2, r3
 8013b5c:	685b      	ldr	r3, [r3, #4]
 8013b5e:	b10b      	cbz	r3, 8013b64 <_free_r+0x4c>
 8013b60:	42a3      	cmp	r3, r4
 8013b62:	d9fa      	bls.n	8013b5a <_free_r+0x42>
 8013b64:	6811      	ldr	r1, [r2, #0]
 8013b66:	1850      	adds	r0, r2, r1
 8013b68:	42a0      	cmp	r0, r4
 8013b6a:	d10b      	bne.n	8013b84 <_free_r+0x6c>
 8013b6c:	6820      	ldr	r0, [r4, #0]
 8013b6e:	4401      	add	r1, r0
 8013b70:	1850      	adds	r0, r2, r1
 8013b72:	4283      	cmp	r3, r0
 8013b74:	6011      	str	r1, [r2, #0]
 8013b76:	d1e0      	bne.n	8013b3a <_free_r+0x22>
 8013b78:	6818      	ldr	r0, [r3, #0]
 8013b7a:	685b      	ldr	r3, [r3, #4]
 8013b7c:	6053      	str	r3, [r2, #4]
 8013b7e:	4408      	add	r0, r1
 8013b80:	6010      	str	r0, [r2, #0]
 8013b82:	e7da      	b.n	8013b3a <_free_r+0x22>
 8013b84:	d902      	bls.n	8013b8c <_free_r+0x74>
 8013b86:	230c      	movs	r3, #12
 8013b88:	602b      	str	r3, [r5, #0]
 8013b8a:	e7d6      	b.n	8013b3a <_free_r+0x22>
 8013b8c:	6820      	ldr	r0, [r4, #0]
 8013b8e:	1821      	adds	r1, r4, r0
 8013b90:	428b      	cmp	r3, r1
 8013b92:	bf04      	itt	eq
 8013b94:	6819      	ldreq	r1, [r3, #0]
 8013b96:	685b      	ldreq	r3, [r3, #4]
 8013b98:	6063      	str	r3, [r4, #4]
 8013b9a:	bf04      	itt	eq
 8013b9c:	1809      	addeq	r1, r1, r0
 8013b9e:	6021      	streq	r1, [r4, #0]
 8013ba0:	6054      	str	r4, [r2, #4]
 8013ba2:	e7ca      	b.n	8013b3a <_free_r+0x22>
 8013ba4:	bd38      	pop	{r3, r4, r5, pc}
 8013ba6:	bf00      	nop
 8013ba8:	240333e0 	.word	0x240333e0

08013bac <_malloc_usable_size_r>:
 8013bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013bb0:	1f18      	subs	r0, r3, #4
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	bfbc      	itt	lt
 8013bb6:	580b      	ldrlt	r3, [r1, r0]
 8013bb8:	18c0      	addlt	r0, r0, r3
 8013bba:	4770      	bx	lr

08013bbc <__sflush_r>:
 8013bbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bc4:	0716      	lsls	r6, r2, #28
 8013bc6:	4605      	mov	r5, r0
 8013bc8:	460c      	mov	r4, r1
 8013bca:	d454      	bmi.n	8013c76 <__sflush_r+0xba>
 8013bcc:	684b      	ldr	r3, [r1, #4]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	dc02      	bgt.n	8013bd8 <__sflush_r+0x1c>
 8013bd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	dd48      	ble.n	8013c6a <__sflush_r+0xae>
 8013bd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013bda:	2e00      	cmp	r6, #0
 8013bdc:	d045      	beq.n	8013c6a <__sflush_r+0xae>
 8013bde:	2300      	movs	r3, #0
 8013be0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013be4:	682f      	ldr	r7, [r5, #0]
 8013be6:	6a21      	ldr	r1, [r4, #32]
 8013be8:	602b      	str	r3, [r5, #0]
 8013bea:	d030      	beq.n	8013c4e <__sflush_r+0x92>
 8013bec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013bee:	89a3      	ldrh	r3, [r4, #12]
 8013bf0:	0759      	lsls	r1, r3, #29
 8013bf2:	d505      	bpl.n	8013c00 <__sflush_r+0x44>
 8013bf4:	6863      	ldr	r3, [r4, #4]
 8013bf6:	1ad2      	subs	r2, r2, r3
 8013bf8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013bfa:	b10b      	cbz	r3, 8013c00 <__sflush_r+0x44>
 8013bfc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013bfe:	1ad2      	subs	r2, r2, r3
 8013c00:	2300      	movs	r3, #0
 8013c02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013c04:	6a21      	ldr	r1, [r4, #32]
 8013c06:	4628      	mov	r0, r5
 8013c08:	47b0      	blx	r6
 8013c0a:	1c43      	adds	r3, r0, #1
 8013c0c:	89a3      	ldrh	r3, [r4, #12]
 8013c0e:	d106      	bne.n	8013c1e <__sflush_r+0x62>
 8013c10:	6829      	ldr	r1, [r5, #0]
 8013c12:	291d      	cmp	r1, #29
 8013c14:	d82b      	bhi.n	8013c6e <__sflush_r+0xb2>
 8013c16:	4a2a      	ldr	r2, [pc, #168]	@ (8013cc0 <__sflush_r+0x104>)
 8013c18:	410a      	asrs	r2, r1
 8013c1a:	07d6      	lsls	r6, r2, #31
 8013c1c:	d427      	bmi.n	8013c6e <__sflush_r+0xb2>
 8013c1e:	2200      	movs	r2, #0
 8013c20:	6062      	str	r2, [r4, #4]
 8013c22:	04d9      	lsls	r1, r3, #19
 8013c24:	6922      	ldr	r2, [r4, #16]
 8013c26:	6022      	str	r2, [r4, #0]
 8013c28:	d504      	bpl.n	8013c34 <__sflush_r+0x78>
 8013c2a:	1c42      	adds	r2, r0, #1
 8013c2c:	d101      	bne.n	8013c32 <__sflush_r+0x76>
 8013c2e:	682b      	ldr	r3, [r5, #0]
 8013c30:	b903      	cbnz	r3, 8013c34 <__sflush_r+0x78>
 8013c32:	6560      	str	r0, [r4, #84]	@ 0x54
 8013c34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013c36:	602f      	str	r7, [r5, #0]
 8013c38:	b1b9      	cbz	r1, 8013c6a <__sflush_r+0xae>
 8013c3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013c3e:	4299      	cmp	r1, r3
 8013c40:	d002      	beq.n	8013c48 <__sflush_r+0x8c>
 8013c42:	4628      	mov	r0, r5
 8013c44:	f7ff ff68 	bl	8013b18 <_free_r>
 8013c48:	2300      	movs	r3, #0
 8013c4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8013c4c:	e00d      	b.n	8013c6a <__sflush_r+0xae>
 8013c4e:	2301      	movs	r3, #1
 8013c50:	4628      	mov	r0, r5
 8013c52:	47b0      	blx	r6
 8013c54:	4602      	mov	r2, r0
 8013c56:	1c50      	adds	r0, r2, #1
 8013c58:	d1c9      	bne.n	8013bee <__sflush_r+0x32>
 8013c5a:	682b      	ldr	r3, [r5, #0]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d0c6      	beq.n	8013bee <__sflush_r+0x32>
 8013c60:	2b1d      	cmp	r3, #29
 8013c62:	d001      	beq.n	8013c68 <__sflush_r+0xac>
 8013c64:	2b16      	cmp	r3, #22
 8013c66:	d11e      	bne.n	8013ca6 <__sflush_r+0xea>
 8013c68:	602f      	str	r7, [r5, #0]
 8013c6a:	2000      	movs	r0, #0
 8013c6c:	e022      	b.n	8013cb4 <__sflush_r+0xf8>
 8013c6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013c72:	b21b      	sxth	r3, r3
 8013c74:	e01b      	b.n	8013cae <__sflush_r+0xf2>
 8013c76:	690f      	ldr	r7, [r1, #16]
 8013c78:	2f00      	cmp	r7, #0
 8013c7a:	d0f6      	beq.n	8013c6a <__sflush_r+0xae>
 8013c7c:	0793      	lsls	r3, r2, #30
 8013c7e:	680e      	ldr	r6, [r1, #0]
 8013c80:	bf08      	it	eq
 8013c82:	694b      	ldreq	r3, [r1, #20]
 8013c84:	600f      	str	r7, [r1, #0]
 8013c86:	bf18      	it	ne
 8013c88:	2300      	movne	r3, #0
 8013c8a:	eba6 0807 	sub.w	r8, r6, r7
 8013c8e:	608b      	str	r3, [r1, #8]
 8013c90:	f1b8 0f00 	cmp.w	r8, #0
 8013c94:	dde9      	ble.n	8013c6a <__sflush_r+0xae>
 8013c96:	6a21      	ldr	r1, [r4, #32]
 8013c98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013c9a:	4643      	mov	r3, r8
 8013c9c:	463a      	mov	r2, r7
 8013c9e:	4628      	mov	r0, r5
 8013ca0:	47b0      	blx	r6
 8013ca2:	2800      	cmp	r0, #0
 8013ca4:	dc08      	bgt.n	8013cb8 <__sflush_r+0xfc>
 8013ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013caa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013cae:	81a3      	strh	r3, [r4, #12]
 8013cb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cb8:	4407      	add	r7, r0
 8013cba:	eba8 0800 	sub.w	r8, r8, r0
 8013cbe:	e7e7      	b.n	8013c90 <__sflush_r+0xd4>
 8013cc0:	dfbffffe 	.word	0xdfbffffe

08013cc4 <_fflush_r>:
 8013cc4:	b538      	push	{r3, r4, r5, lr}
 8013cc6:	690b      	ldr	r3, [r1, #16]
 8013cc8:	4605      	mov	r5, r0
 8013cca:	460c      	mov	r4, r1
 8013ccc:	b913      	cbnz	r3, 8013cd4 <_fflush_r+0x10>
 8013cce:	2500      	movs	r5, #0
 8013cd0:	4628      	mov	r0, r5
 8013cd2:	bd38      	pop	{r3, r4, r5, pc}
 8013cd4:	b118      	cbz	r0, 8013cde <_fflush_r+0x1a>
 8013cd6:	6a03      	ldr	r3, [r0, #32]
 8013cd8:	b90b      	cbnz	r3, 8013cde <_fflush_r+0x1a>
 8013cda:	f7ff fcc5 	bl	8013668 <__sinit>
 8013cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d0f3      	beq.n	8013cce <_fflush_r+0xa>
 8013ce6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013ce8:	07d0      	lsls	r0, r2, #31
 8013cea:	d404      	bmi.n	8013cf6 <_fflush_r+0x32>
 8013cec:	0599      	lsls	r1, r3, #22
 8013cee:	d402      	bmi.n	8013cf6 <_fflush_r+0x32>
 8013cf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013cf2:	f7ff ff00 	bl	8013af6 <__retarget_lock_acquire_recursive>
 8013cf6:	4628      	mov	r0, r5
 8013cf8:	4621      	mov	r1, r4
 8013cfa:	f7ff ff5f 	bl	8013bbc <__sflush_r>
 8013cfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013d00:	07da      	lsls	r2, r3, #31
 8013d02:	4605      	mov	r5, r0
 8013d04:	d4e4      	bmi.n	8013cd0 <_fflush_r+0xc>
 8013d06:	89a3      	ldrh	r3, [r4, #12]
 8013d08:	059b      	lsls	r3, r3, #22
 8013d0a:	d4e1      	bmi.n	8013cd0 <_fflush_r+0xc>
 8013d0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013d0e:	f7ff fef3 	bl	8013af8 <__retarget_lock_release_recursive>
 8013d12:	e7dd      	b.n	8013cd0 <_fflush_r+0xc>

08013d14 <__swhatbuf_r>:
 8013d14:	b570      	push	{r4, r5, r6, lr}
 8013d16:	460c      	mov	r4, r1
 8013d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d1c:	2900      	cmp	r1, #0
 8013d1e:	b096      	sub	sp, #88	@ 0x58
 8013d20:	4615      	mov	r5, r2
 8013d22:	461e      	mov	r6, r3
 8013d24:	da0d      	bge.n	8013d42 <__swhatbuf_r+0x2e>
 8013d26:	89a3      	ldrh	r3, [r4, #12]
 8013d28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013d2c:	f04f 0100 	mov.w	r1, #0
 8013d30:	bf14      	ite	ne
 8013d32:	2340      	movne	r3, #64	@ 0x40
 8013d34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013d38:	2000      	movs	r0, #0
 8013d3a:	6031      	str	r1, [r6, #0]
 8013d3c:	602b      	str	r3, [r5, #0]
 8013d3e:	b016      	add	sp, #88	@ 0x58
 8013d40:	bd70      	pop	{r4, r5, r6, pc}
 8013d42:	466a      	mov	r2, sp
 8013d44:	f000 f848 	bl	8013dd8 <_fstat_r>
 8013d48:	2800      	cmp	r0, #0
 8013d4a:	dbec      	blt.n	8013d26 <__swhatbuf_r+0x12>
 8013d4c:	9901      	ldr	r1, [sp, #4]
 8013d4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013d52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013d56:	4259      	negs	r1, r3
 8013d58:	4159      	adcs	r1, r3
 8013d5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013d5e:	e7eb      	b.n	8013d38 <__swhatbuf_r+0x24>

08013d60 <__smakebuf_r>:
 8013d60:	898b      	ldrh	r3, [r1, #12]
 8013d62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013d64:	079d      	lsls	r5, r3, #30
 8013d66:	4606      	mov	r6, r0
 8013d68:	460c      	mov	r4, r1
 8013d6a:	d507      	bpl.n	8013d7c <__smakebuf_r+0x1c>
 8013d6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013d70:	6023      	str	r3, [r4, #0]
 8013d72:	6123      	str	r3, [r4, #16]
 8013d74:	2301      	movs	r3, #1
 8013d76:	6163      	str	r3, [r4, #20]
 8013d78:	b003      	add	sp, #12
 8013d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d7c:	ab01      	add	r3, sp, #4
 8013d7e:	466a      	mov	r2, sp
 8013d80:	f7ff ffc8 	bl	8013d14 <__swhatbuf_r>
 8013d84:	9f00      	ldr	r7, [sp, #0]
 8013d86:	4605      	mov	r5, r0
 8013d88:	4639      	mov	r1, r7
 8013d8a:	4630      	mov	r0, r6
 8013d8c:	f7ff fb1e 	bl	80133cc <_malloc_r>
 8013d90:	b948      	cbnz	r0, 8013da6 <__smakebuf_r+0x46>
 8013d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d96:	059a      	lsls	r2, r3, #22
 8013d98:	d4ee      	bmi.n	8013d78 <__smakebuf_r+0x18>
 8013d9a:	f023 0303 	bic.w	r3, r3, #3
 8013d9e:	f043 0302 	orr.w	r3, r3, #2
 8013da2:	81a3      	strh	r3, [r4, #12]
 8013da4:	e7e2      	b.n	8013d6c <__smakebuf_r+0xc>
 8013da6:	89a3      	ldrh	r3, [r4, #12]
 8013da8:	6020      	str	r0, [r4, #0]
 8013daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013dae:	81a3      	strh	r3, [r4, #12]
 8013db0:	9b01      	ldr	r3, [sp, #4]
 8013db2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013db6:	b15b      	cbz	r3, 8013dd0 <__smakebuf_r+0x70>
 8013db8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013dbc:	4630      	mov	r0, r6
 8013dbe:	f000 f81d 	bl	8013dfc <_isatty_r>
 8013dc2:	b128      	cbz	r0, 8013dd0 <__smakebuf_r+0x70>
 8013dc4:	89a3      	ldrh	r3, [r4, #12]
 8013dc6:	f023 0303 	bic.w	r3, r3, #3
 8013dca:	f043 0301 	orr.w	r3, r3, #1
 8013dce:	81a3      	strh	r3, [r4, #12]
 8013dd0:	89a3      	ldrh	r3, [r4, #12]
 8013dd2:	431d      	orrs	r5, r3
 8013dd4:	81a5      	strh	r5, [r4, #12]
 8013dd6:	e7cf      	b.n	8013d78 <__smakebuf_r+0x18>

08013dd8 <_fstat_r>:
 8013dd8:	b538      	push	{r3, r4, r5, lr}
 8013dda:	4d07      	ldr	r5, [pc, #28]	@ (8013df8 <_fstat_r+0x20>)
 8013ddc:	2300      	movs	r3, #0
 8013dde:	4604      	mov	r4, r0
 8013de0:	4608      	mov	r0, r1
 8013de2:	4611      	mov	r1, r2
 8013de4:	602b      	str	r3, [r5, #0]
 8013de6:	f7ed fab7 	bl	8001358 <_fstat>
 8013dea:	1c43      	adds	r3, r0, #1
 8013dec:	d102      	bne.n	8013df4 <_fstat_r+0x1c>
 8013dee:	682b      	ldr	r3, [r5, #0]
 8013df0:	b103      	cbz	r3, 8013df4 <_fstat_r+0x1c>
 8013df2:	6023      	str	r3, [r4, #0]
 8013df4:	bd38      	pop	{r3, r4, r5, pc}
 8013df6:	bf00      	nop
 8013df8:	24033520 	.word	0x24033520

08013dfc <_isatty_r>:
 8013dfc:	b538      	push	{r3, r4, r5, lr}
 8013dfe:	4d06      	ldr	r5, [pc, #24]	@ (8013e18 <_isatty_r+0x1c>)
 8013e00:	2300      	movs	r3, #0
 8013e02:	4604      	mov	r4, r0
 8013e04:	4608      	mov	r0, r1
 8013e06:	602b      	str	r3, [r5, #0]
 8013e08:	f7ed fab6 	bl	8001378 <_isatty>
 8013e0c:	1c43      	adds	r3, r0, #1
 8013e0e:	d102      	bne.n	8013e16 <_isatty_r+0x1a>
 8013e10:	682b      	ldr	r3, [r5, #0]
 8013e12:	b103      	cbz	r3, 8013e16 <_isatty_r+0x1a>
 8013e14:	6023      	str	r3, [r4, #0]
 8013e16:	bd38      	pop	{r3, r4, r5, pc}
 8013e18:	24033520 	.word	0x24033520

08013e1c <_init>:
 8013e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e1e:	bf00      	nop
 8013e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e22:	bc08      	pop	{r3}
 8013e24:	469e      	mov	lr, r3
 8013e26:	4770      	bx	lr

08013e28 <_fini>:
 8013e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e2a:	bf00      	nop
 8013e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e2e:	bc08      	pop	{r3}
 8013e30:	469e      	mov	lr, r3
 8013e32:	4770      	bx	lr
